// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211001

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/signalrservice/v1alpha1api20211001storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/resourceDefinitions/signalR
type SignalR struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SignalR_Spec           `json:"spec,omitempty"`
	Status            SignalRResource_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SignalR{}

// GetConditions returns the conditions of the resource
func (signalR *SignalR) GetConditions() conditions.Conditions {
	return signalR.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (signalR *SignalR) SetConditions(conditions conditions.Conditions) {
	signalR.Status.Conditions = conditions
}

var _ conversion.Convertible = &SignalR{}

// ConvertFrom populates our SignalR from the provided hub SignalR
func (signalR *SignalR) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20211001storage.SignalR)
	if !ok {
		return fmt.Errorf("expected storage:signalrservice/v1alpha1api20211001storage/SignalR but received %T instead", hub)
	}

	return signalR.AssignPropertiesFromSignalR(source)
}

// ConvertTo populates the provided hub SignalR from our SignalR
func (signalR *SignalR) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20211001storage.SignalR)
	if !ok {
		return fmt.Errorf("expected storage:signalrservice/v1alpha1api20211001storage/SignalR but received %T instead", hub)
	}

	return signalR.AssignPropertiesToSignalR(destination)
}

// +kubebuilder:webhook:path=/mutate-signalrservice-azure-com-v1alpha1api20211001-signalr,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=signalrservice.azure.com,resources=signalrs,verbs=create;update,versions=v1alpha1api20211001,name=default.v1alpha1api20211001.signalrs.signalrservice.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &SignalR{}

// Default applies defaults to the SignalR resource
func (signalR *SignalR) Default() {
	signalR.defaultImpl()
	var temp interface{} = signalR
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (signalR *SignalR) defaultAzureName() {
	if signalR.Spec.AzureName == "" {
		signalR.Spec.AzureName = signalR.Name
	}
}

// defaultImpl applies the code generated defaults to the SignalR resource
func (signalR *SignalR) defaultImpl() { signalR.defaultAzureName() }

var _ genruntime.KubernetesResource = &SignalR{}

// AzureName returns the Azure name of the resource
func (signalR *SignalR) AzureName() string {
	return signalR.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-10-01"
func (signalR SignalR) GetAPIVersion() string {
	return "2021-10-01"
}

// GetResourceKind returns the kind of the resource
func (signalR *SignalR) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (signalR *SignalR) GetSpec() genruntime.ConvertibleSpec {
	return &signalR.Spec
}

// GetStatus returns the status of this resource
func (signalR *SignalR) GetStatus() genruntime.ConvertibleStatus {
	return &signalR.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.SignalRService/signalR"
func (signalR *SignalR) GetType() string {
	return "Microsoft.SignalRService/signalR"
}

// NewEmptyStatus returns a new empty (blank) status
func (signalR *SignalR) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SignalRResource_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (signalR *SignalR) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(signalR.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  signalR.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (signalR *SignalR) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SignalRResource_Status); ok {
		signalR.Status = *st
		return nil
	}

	// Convert status to required version
	var st SignalRResource_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	signalR.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-signalrservice-azure-com-v1alpha1api20211001-signalr,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=signalrservice.azure.com,resources=signalrs,verbs=create;update,versions=v1alpha1api20211001,name=validate.v1alpha1api20211001.signalrs.signalrservice.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &SignalR{}

// ValidateCreate validates the creation of the resource
func (signalR *SignalR) ValidateCreate() error {
	validations := signalR.createValidations()
	var temp interface{} = signalR
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (signalR *SignalR) ValidateDelete() error {
	validations := signalR.deleteValidations()
	var temp interface{} = signalR
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (signalR *SignalR) ValidateUpdate(old runtime.Object) error {
	validations := signalR.updateValidations()
	var temp interface{} = signalR
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (signalR *SignalR) createValidations() []func() error {
	return []func() error{signalR.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (signalR *SignalR) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (signalR *SignalR) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return signalR.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (signalR *SignalR) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&signalR.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromSignalR populates our SignalR from the provided source SignalR
func (signalR *SignalR) AssignPropertiesFromSignalR(source *v1alpha1api20211001storage.SignalR) error {

	// ObjectMeta
	signalR.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec SignalR_Spec
	err := spec.AssignPropertiesFromSignalRSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromSignalRSpec()")
	}
	signalR.Spec = spec

	// Status
	var status SignalRResource_Status
	err = status.AssignPropertiesFromSignalRResourceStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromSignalRResourceStatus()")
	}
	signalR.Status = status

	// No error
	return nil
}

// AssignPropertiesToSignalR populates the provided destination SignalR from our SignalR
func (signalR *SignalR) AssignPropertiesToSignalR(destination *v1alpha1api20211001storage.SignalR) error {

	// ObjectMeta
	destination.ObjectMeta = *signalR.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20211001storage.SignalR_Spec
	err := signalR.Spec.AssignPropertiesToSignalRSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToSignalRSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20211001storage.SignalRResource_Status
	err = signalR.Status.AssignPropertiesToSignalRResourceStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToSignalRResourceStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (signalR *SignalR) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: signalR.Spec.OriginalVersion(),
		Kind:    "SignalR",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/resourceDefinitions/signalR
type SignalRList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SignalR `json:"items"`
}

type SignalRResource_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Cors: Cross-Origin Resource Sharing (CORS) settings.
	Cors *SignalRCorsSettings_Status `json:"cors,omitempty"`

	//DisableAadAuth: DisableLocalAuth
	//Enable or disable aad auth
	//When set as true, connection with AuthType=aad won't work.
	DisableAadAuth *bool `json:"disableAadAuth,omitempty"`

	//DisableLocalAuth: DisableLocalAuth
	//Enable or disable local auth with AccessKey
	//When set as true, connection with AccessKey=xxx won't work.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	//ExternalIP: The publicly accessible IP of the resource.
	ExternalIP *string `json:"externalIP,omitempty"`

	//Features: List of the featureFlags.
	//FeatureFlags that are not included in the parameters for the update operation
	//will not be modified.
	//And the response will only include featureFlags that are explicitly set.
	//When a featureFlag is not explicitly set, its globally default value will be used
	//But keep in mind, the default value doesn't mean "false". It varies in terms of
	//different FeatureFlags.
	Features []SignalRFeature_Status `json:"features,omitempty"`

	//HostName: FQDN of the service instance.
	HostName *string `json:"hostName,omitempty"`

	//HostNamePrefix: Deprecated.
	HostNamePrefix *string `json:"hostNamePrefix,omitempty"`

	//Id: Fully qualified resource Id for the resource.
	Id *string `json:"id,omitempty"`

	//Identity: The managed identity response
	Identity *ManagedIdentity_Status `json:"identity,omitempty"`

	//Kind: The kind of the service - e.g. "SignalR" for
	//"Microsoft.SignalRService/SignalR"
	Kind *ServiceKind_Status `json:"kind,omitempty"`

	//Location: The GEO location of the resource. e.g. West US | East US | North
	//Central US | South Central US.
	Location *string `json:"location,omitempty"`

	//Name: The name of the resource.
	Name *string `json:"name,omitempty"`

	//NetworkACLs: Network ACLs
	NetworkACLs *SignalRNetworkACLs_Status `json:"networkACLs,omitempty"`

	//PrivateEndpointConnections: Private endpoint connections to the resource.
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: Provisioning state of the resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//PublicNetworkAccess: Enable or disable public network access. Default to
	//"Enabled".
	//When it's Enabled, network ACLs still apply.
	//When it's Disabled, public network access is always disabled no matter what you
	//set in network ACLs.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`

	//PublicPort: The publicly accessible port of the resource which is designed for
	//browser/client side usage.
	PublicPort *int `json:"publicPort,omitempty"`

	//ResourceLogConfiguration: Resource log configuration of a
	//Microsoft.SignalRService resource.
	//If resourceLogConfiguration isn't null or empty, it will override options
	//"EnableConnectivityLog" and "EnableMessagingLogs" in features.
	//Otherwise, use options "EnableConnectivityLog" and "EnableMessagingLogs" in
	//features.
	ResourceLogConfiguration *ResourceLogConfiguration_Status `json:"resourceLogConfiguration,omitempty"`

	//ServerPort: The publicly accessible port of the resource which is designed for
	//customer server side usage.
	ServerPort *int `json:"serverPort,omitempty"`

	//SharedPrivateLinkResources: The list of shared private link resources.
	SharedPrivateLinkResources []SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded `json:"sharedPrivateLinkResources,omitempty"`

	//Sku: The billing information of the resource.(e.g. Free, Standard)
	Sku *ResourceSku_Status `json:"sku,omitempty"`

	//SystemData: Metadata pertaining to creation and last modification of the
	//resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Tags: Tags of the service which is a list of key value pairs that describe the
	//resource.
	Tags map[string]string `json:"tags,omitempty"`

	//Tls: TLS settings.
	Tls *SignalRTlsSettings_Status `json:"tls,omitempty"`

	//Type: The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type *string `json:"type,omitempty"`

	//Upstream: Upstream settings when the service is in server-less mode.
	Upstream *ServerlessUpstreamSettings_Status `json:"upstream,omitempty"`

	//Version: Version of the resource. Probably you need the same or higher version
	//of client SDKs.
	Version *string `json:"version,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SignalRResource_Status{}

// ConvertStatusFrom populates our SignalRResource_Status from the provided source
func (signalRResourceStatus *SignalRResource_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20211001storage.SignalRResource_Status)
	if ok {
		// Populate our instance from source
		return signalRResourceStatus.AssignPropertiesFromSignalRResourceStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20211001storage.SignalRResource_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = signalRResourceStatus.AssignPropertiesFromSignalRResourceStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SignalRResource_Status
func (signalRResourceStatus *SignalRResource_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20211001storage.SignalRResource_Status)
	if ok {
		// Populate destination from our instance
		return signalRResourceStatus.AssignPropertiesToSignalRResourceStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20211001storage.SignalRResource_Status{}
	err := signalRResourceStatus.AssignPropertiesToSignalRResourceStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SignalRResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRResourceStatus *SignalRResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRResourceStatus *SignalRResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRResource_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 SignalRCorsSettings_Status
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			signalRResourceStatus.Cors = &cors
		}
	}

	// Set property ‘DisableAadAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableAadAuth != nil {
			disableAadAuth := *typedInput.Properties.DisableAadAuth
			signalRResourceStatus.DisableAadAuth = &disableAadAuth
		}
	}

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableLocalAuth != nil {
			disableLocalAuth := *typedInput.Properties.DisableLocalAuth
			signalRResourceStatus.DisableLocalAuth = &disableLocalAuth
		}
	}

	// Set property ‘ExternalIP’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExternalIP != nil {
			externalIP := *typedInput.Properties.ExternalIP
			signalRResourceStatus.ExternalIP = &externalIP
		}
	}

	// Set property ‘Features’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Features {
			var item1 SignalRFeature_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			signalRResourceStatus.Features = append(signalRResourceStatus.Features, item1)
		}
	}

	// Set property ‘HostName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostName != nil {
			hostName := *typedInput.Properties.HostName
			signalRResourceStatus.HostName = &hostName
		}
	}

	// Set property ‘HostNamePrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostNamePrefix != nil {
			hostNamePrefix := *typedInput.Properties.HostNamePrefix
			signalRResourceStatus.HostNamePrefix = &hostNamePrefix
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		signalRResourceStatus.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 ManagedIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		signalRResourceStatus.Identity = &identity
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		signalRResourceStatus.Kind = &kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		signalRResourceStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		signalRResourceStatus.Name = &name
	}

	// Set property ‘NetworkACLs’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkACLs != nil {
			var networkACLs1 SignalRNetworkACLs_Status
			err := networkACLs1.PopulateFromARM(owner, *typedInput.Properties.NetworkACLs)
			if err != nil {
				return err
			}
			networkACLs := networkACLs1
			signalRResourceStatus.NetworkACLs = &networkACLs
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			signalRResourceStatus.PrivateEndpointConnections = append(signalRResourceStatus.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			signalRResourceStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			signalRResourceStatus.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘PublicPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicPort != nil {
			publicPort := *typedInput.Properties.PublicPort
			signalRResourceStatus.PublicPort = &publicPort
		}
	}

	// Set property ‘ResourceLogConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceLogConfiguration != nil {
			var resourceLogConfiguration1 ResourceLogConfiguration_Status
			err := resourceLogConfiguration1.PopulateFromARM(owner, *typedInput.Properties.ResourceLogConfiguration)
			if err != nil {
				return err
			}
			resourceLogConfiguration := resourceLogConfiguration1
			signalRResourceStatus.ResourceLogConfiguration = &resourceLogConfiguration
		}
	}

	// Set property ‘ServerPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServerPort != nil {
			serverPort := *typedInput.Properties.ServerPort
			signalRResourceStatus.ServerPort = &serverPort
		}
	}

	// Set property ‘SharedPrivateLinkResources’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SharedPrivateLinkResources {
			var item1 SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			signalRResourceStatus.SharedPrivateLinkResources = append(signalRResourceStatus.SharedPrivateLinkResources, item1)
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 ResourceSku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		signalRResourceStatus.Sku = &sku
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		signalRResourceStatus.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		signalRResourceStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			signalRResourceStatus.Tags[key] = value
		}
	}

	// Set property ‘Tls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tls != nil {
			var tls1 SignalRTlsSettings_Status
			err := tls1.PopulateFromARM(owner, *typedInput.Properties.Tls)
			if err != nil {
				return err
			}
			tls := tls1
			signalRResourceStatus.Tls = &tls
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		signalRResourceStatus.Type = &typeVar
	}

	// Set property ‘Upstream’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Upstream != nil {
			var upstream1 ServerlessUpstreamSettings_Status
			err := upstream1.PopulateFromARM(owner, *typedInput.Properties.Upstream)
			if err != nil {
				return err
			}
			upstream := upstream1
			signalRResourceStatus.Upstream = &upstream
		}
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			signalRResourceStatus.Version = &version
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRResourceStatus populates our SignalRResource_Status from the provided source SignalRResource_Status
func (signalRResourceStatus *SignalRResource_Status) AssignPropertiesFromSignalRResourceStatus(source *v1alpha1api20211001storage.SignalRResource_Status) error {

	// Conditions
	signalRResourceStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Cors
	if source.Cors != nil {
		var cor SignalRCorsSettings_Status
		err := cor.AssignPropertiesFromSignalRCorsSettingsStatus(source.Cors)
		if err != nil {
			return errors.Wrap(err, "populating Cors from Cors, calling AssignPropertiesFromSignalRCorsSettingsStatus()")
		}
		signalRResourceStatus.Cors = &cor
	} else {
		signalRResourceStatus.Cors = nil
	}

	// DisableAadAuth
	if source.DisableAadAuth != nil {
		disableAadAuth := *source.DisableAadAuth
		signalRResourceStatus.DisableAadAuth = &disableAadAuth
	} else {
		signalRResourceStatus.DisableAadAuth = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		signalRResourceStatus.DisableLocalAuth = &disableLocalAuth
	} else {
		signalRResourceStatus.DisableLocalAuth = nil
	}

	// ExternalIP
	signalRResourceStatus.ExternalIP = genruntime.ClonePointerToString(source.ExternalIP)

	// Features
	if source.Features != nil {
		featureList := make([]SignalRFeature_Status, len(source.Features))
		for featureIndex, featureItem := range source.Features {
			// Shadow the loop variable to avoid aliasing
			featureItem := featureItem
			var feature SignalRFeature_Status
			err := feature.AssignPropertiesFromSignalRFeatureStatus(&featureItem)
			if err != nil {
				return errors.Wrap(err, "populating Features from Features, calling AssignPropertiesFromSignalRFeatureStatus()")
			}
			featureList[featureIndex] = feature
		}
		signalRResourceStatus.Features = featureList
	} else {
		signalRResourceStatus.Features = nil
	}

	// HostName
	signalRResourceStatus.HostName = genruntime.ClonePointerToString(source.HostName)

	// HostNamePrefix
	signalRResourceStatus.HostNamePrefix = genruntime.ClonePointerToString(source.HostNamePrefix)

	// Id
	signalRResourceStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity ManagedIdentity_Status
		err := identity.AssignPropertiesFromManagedIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromManagedIdentityStatus()")
		}
		signalRResourceStatus.Identity = &identity
	} else {
		signalRResourceStatus.Identity = nil
	}

	// Kind
	if source.Kind != nil {
		kind := ServiceKind_Status(*source.Kind)
		signalRResourceStatus.Kind = &kind
	} else {
		signalRResourceStatus.Kind = nil
	}

	// Location
	signalRResourceStatus.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	signalRResourceStatus.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkACLs
	if source.NetworkACLs != nil {
		var networkACL SignalRNetworkACLs_Status
		err := networkACL.AssignPropertiesFromSignalRNetworkACLsStatus(source.NetworkACLs)
		if err != nil {
			return errors.Wrap(err, "populating NetworkACLs from NetworkACLs, calling AssignPropertiesFromSignalRNetworkACLsStatus()")
		}
		signalRResourceStatus.NetworkACLs = &networkACL
	} else {
		signalRResourceStatus.NetworkACLs = nil
	}

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSignalRSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesFromPrivateEndpointConnectionStatusSignalRSubResourceEmbedded()")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		signalRResourceStatus.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		signalRResourceStatus.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		signalRResourceStatus.ProvisioningState = &provisioningState
	} else {
		signalRResourceStatus.ProvisioningState = nil
	}

	// PublicNetworkAccess
	signalRResourceStatus.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// PublicPort
	signalRResourceStatus.PublicPort = genruntime.ClonePointerToInt(source.PublicPort)

	// ResourceLogConfiguration
	if source.ResourceLogConfiguration != nil {
		var resourceLogConfiguration ResourceLogConfiguration_Status
		err := resourceLogConfiguration.AssignPropertiesFromResourceLogConfigurationStatus(source.ResourceLogConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating ResourceLogConfiguration from ResourceLogConfiguration, calling AssignPropertiesFromResourceLogConfigurationStatus()")
		}
		signalRResourceStatus.ResourceLogConfiguration = &resourceLogConfiguration
	} else {
		signalRResourceStatus.ResourceLogConfiguration = nil
	}

	// ServerPort
	signalRResourceStatus.ServerPort = genruntime.ClonePointerToInt(source.ServerPort)

	// SharedPrivateLinkResources
	if source.SharedPrivateLinkResources != nil {
		sharedPrivateLinkResourceList := make([]SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded, len(source.SharedPrivateLinkResources))
		for sharedPrivateLinkResourceIndex, sharedPrivateLinkResourceItem := range source.SharedPrivateLinkResources {
			// Shadow the loop variable to avoid aliasing
			sharedPrivateLinkResourceItem := sharedPrivateLinkResourceItem
			var sharedPrivateLinkResource SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
			err := sharedPrivateLinkResource.AssignPropertiesFromSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded(&sharedPrivateLinkResourceItem)
			if err != nil {
				return errors.Wrap(err, "populating SharedPrivateLinkResources from SharedPrivateLinkResources, calling AssignPropertiesFromSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded()")
			}
			sharedPrivateLinkResourceList[sharedPrivateLinkResourceIndex] = sharedPrivateLinkResource
		}
		signalRResourceStatus.SharedPrivateLinkResources = sharedPrivateLinkResourceList
	} else {
		signalRResourceStatus.SharedPrivateLinkResources = nil
	}

	// Sku
	if source.Sku != nil {
		var sku ResourceSku_Status
		err := sku.AssignPropertiesFromResourceSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromResourceSkuStatus()")
		}
		signalRResourceStatus.Sku = &sku
	} else {
		signalRResourceStatus.Sku = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		signalRResourceStatus.SystemData = &systemDatum
	} else {
		signalRResourceStatus.SystemData = nil
	}

	// Tags
	signalRResourceStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Tls
	if source.Tls != nil {
		var tl SignalRTlsSettings_Status
		err := tl.AssignPropertiesFromSignalRTlsSettingsStatus(source.Tls)
		if err != nil {
			return errors.Wrap(err, "populating Tls from Tls, calling AssignPropertiesFromSignalRTlsSettingsStatus()")
		}
		signalRResourceStatus.Tls = &tl
	} else {
		signalRResourceStatus.Tls = nil
	}

	// Type
	signalRResourceStatus.Type = genruntime.ClonePointerToString(source.Type)

	// Upstream
	if source.Upstream != nil {
		var upstream ServerlessUpstreamSettings_Status
		err := upstream.AssignPropertiesFromServerlessUpstreamSettingsStatus(source.Upstream)
		if err != nil {
			return errors.Wrap(err, "populating Upstream from Upstream, calling AssignPropertiesFromServerlessUpstreamSettingsStatus()")
		}
		signalRResourceStatus.Upstream = &upstream
	} else {
		signalRResourceStatus.Upstream = nil
	}

	// Version
	signalRResourceStatus.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignPropertiesToSignalRResourceStatus populates the provided destination SignalRResource_Status from our SignalRResource_Status
func (signalRResourceStatus *SignalRResource_Status) AssignPropertiesToSignalRResourceStatus(destination *v1alpha1api20211001storage.SignalRResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(signalRResourceStatus.Conditions)

	// Cors
	if signalRResourceStatus.Cors != nil {
		var cor v1alpha1api20211001storage.SignalRCorsSettings_Status
		err := (*signalRResourceStatus.Cors).AssignPropertiesToSignalRCorsSettingsStatus(&cor)
		if err != nil {
			return errors.Wrap(err, "populating Cors from Cors, calling AssignPropertiesToSignalRCorsSettingsStatus()")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DisableAadAuth
	if signalRResourceStatus.DisableAadAuth != nil {
		disableAadAuth := *signalRResourceStatus.DisableAadAuth
		destination.DisableAadAuth = &disableAadAuth
	} else {
		destination.DisableAadAuth = nil
	}

	// DisableLocalAuth
	if signalRResourceStatus.DisableLocalAuth != nil {
		disableLocalAuth := *signalRResourceStatus.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// ExternalIP
	destination.ExternalIP = genruntime.ClonePointerToString(signalRResourceStatus.ExternalIP)

	// Features
	if signalRResourceStatus.Features != nil {
		featureList := make([]v1alpha1api20211001storage.SignalRFeature_Status, len(signalRResourceStatus.Features))
		for featureIndex, featureItem := range signalRResourceStatus.Features {
			// Shadow the loop variable to avoid aliasing
			featureItem := featureItem
			var feature v1alpha1api20211001storage.SignalRFeature_Status
			err := featureItem.AssignPropertiesToSignalRFeatureStatus(&feature)
			if err != nil {
				return errors.Wrap(err, "populating Features from Features, calling AssignPropertiesToSignalRFeatureStatus()")
			}
			featureList[featureIndex] = feature
		}
		destination.Features = featureList
	} else {
		destination.Features = nil
	}

	// HostName
	destination.HostName = genruntime.ClonePointerToString(signalRResourceStatus.HostName)

	// HostNamePrefix
	destination.HostNamePrefix = genruntime.ClonePointerToString(signalRResourceStatus.HostNamePrefix)

	// Id
	destination.Id = genruntime.ClonePointerToString(signalRResourceStatus.Id)

	// Identity
	if signalRResourceStatus.Identity != nil {
		var identity v1alpha1api20211001storage.ManagedIdentity_Status
		err := (*signalRResourceStatus.Identity).AssignPropertiesToManagedIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToManagedIdentityStatus()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Kind
	if signalRResourceStatus.Kind != nil {
		kind := string(*signalRResourceStatus.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(signalRResourceStatus.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(signalRResourceStatus.Name)

	// NetworkACLs
	if signalRResourceStatus.NetworkACLs != nil {
		var networkACL v1alpha1api20211001storage.SignalRNetworkACLs_Status
		err := (*signalRResourceStatus.NetworkACLs).AssignPropertiesToSignalRNetworkACLsStatus(&networkACL)
		if err != nil {
			return errors.Wrap(err, "populating NetworkACLs from NetworkACLs, calling AssignPropertiesToSignalRNetworkACLsStatus()")
		}
		destination.NetworkACLs = &networkACL
	} else {
		destination.NetworkACLs = nil
	}

	// PrivateEndpointConnections
	if signalRResourceStatus.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20211001storage.PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded, len(signalRResourceStatus.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range signalRResourceStatus.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20211001storage.PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSignalRSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesToPrivateEndpointConnectionStatusSignalRSubResourceEmbedded()")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if signalRResourceStatus.ProvisioningState != nil {
		provisioningState := string(*signalRResourceStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(signalRResourceStatus.PublicNetworkAccess)

	// PublicPort
	destination.PublicPort = genruntime.ClonePointerToInt(signalRResourceStatus.PublicPort)

	// ResourceLogConfiguration
	if signalRResourceStatus.ResourceLogConfiguration != nil {
		var resourceLogConfiguration v1alpha1api20211001storage.ResourceLogConfiguration_Status
		err := (*signalRResourceStatus.ResourceLogConfiguration).AssignPropertiesToResourceLogConfigurationStatus(&resourceLogConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating ResourceLogConfiguration from ResourceLogConfiguration, calling AssignPropertiesToResourceLogConfigurationStatus()")
		}
		destination.ResourceLogConfiguration = &resourceLogConfiguration
	} else {
		destination.ResourceLogConfiguration = nil
	}

	// ServerPort
	destination.ServerPort = genruntime.ClonePointerToInt(signalRResourceStatus.ServerPort)

	// SharedPrivateLinkResources
	if signalRResourceStatus.SharedPrivateLinkResources != nil {
		sharedPrivateLinkResourceList := make([]v1alpha1api20211001storage.SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded, len(signalRResourceStatus.SharedPrivateLinkResources))
		for sharedPrivateLinkResourceIndex, sharedPrivateLinkResourceItem := range signalRResourceStatus.SharedPrivateLinkResources {
			// Shadow the loop variable to avoid aliasing
			sharedPrivateLinkResourceItem := sharedPrivateLinkResourceItem
			var sharedPrivateLinkResource v1alpha1api20211001storage.SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
			err := sharedPrivateLinkResourceItem.AssignPropertiesToSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded(&sharedPrivateLinkResource)
			if err != nil {
				return errors.Wrap(err, "populating SharedPrivateLinkResources from SharedPrivateLinkResources, calling AssignPropertiesToSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded()")
			}
			sharedPrivateLinkResourceList[sharedPrivateLinkResourceIndex] = sharedPrivateLinkResource
		}
		destination.SharedPrivateLinkResources = sharedPrivateLinkResourceList
	} else {
		destination.SharedPrivateLinkResources = nil
	}

	// Sku
	if signalRResourceStatus.Sku != nil {
		var sku v1alpha1api20211001storage.ResourceSku_Status
		err := (*signalRResourceStatus.Sku).AssignPropertiesToResourceSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToResourceSkuStatus()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SystemData
	if signalRResourceStatus.SystemData != nil {
		var systemDatum v1alpha1api20211001storage.SystemData_Status
		err := (*signalRResourceStatus.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(signalRResourceStatus.Tags)

	// Tls
	if signalRResourceStatus.Tls != nil {
		var tl v1alpha1api20211001storage.SignalRTlsSettings_Status
		err := (*signalRResourceStatus.Tls).AssignPropertiesToSignalRTlsSettingsStatus(&tl)
		if err != nil {
			return errors.Wrap(err, "populating Tls from Tls, calling AssignPropertiesToSignalRTlsSettingsStatus()")
		}
		destination.Tls = &tl
	} else {
		destination.Tls = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(signalRResourceStatus.Type)

	// Upstream
	if signalRResourceStatus.Upstream != nil {
		var upstream v1alpha1api20211001storage.ServerlessUpstreamSettings_Status
		err := (*signalRResourceStatus.Upstream).AssignPropertiesToServerlessUpstreamSettingsStatus(&upstream)
		if err != nil {
			return errors.Wrap(err, "populating Upstream from Upstream, calling AssignPropertiesToServerlessUpstreamSettingsStatus()")
		}
		destination.Upstream = &upstream
	} else {
		destination.Upstream = nil
	}

	// Version
	destination.Version = genruntime.ClonePointerToString(signalRResourceStatus.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2021-10-01"}
type SignalRSpecAPIVersion string

const SignalRSpecAPIVersion20211001 = SignalRSpecAPIVersion("2021-10-01")

type SignalR_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Cors: Cross-Origin Resource Sharing (CORS) settings.
	Cors *SignalRCorsSettings `json:"cors,omitempty"`

	//DisableAadAuth: DisableLocalAuth
	//Enable or disable aad auth
	//When set as true, connection with AuthType=aad won't work.
	DisableAadAuth *bool `json:"disableAadAuth,omitempty"`

	//DisableLocalAuth: DisableLocalAuth
	//Enable or disable local auth with AccessKey
	//When set as true, connection with AccessKey=xxx won't work.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	//Features: List of the featureFlags.
	//FeatureFlags that are not included in the parameters for the update operation
	//will not be modified.
	//And the response will only include featureFlags that are explicitly set.
	//When a featureFlag is not explicitly set, its globally default value will be used
	//But keep in mind, the default value doesn't mean "false". It varies in terms of
	//different FeatureFlags.
	Features []SignalRFeature `json:"features,omitempty"`

	//Identity: A class represent managed identities used for request and response
	Identity *ManagedIdentity `json:"identity,omitempty"`

	//Kind: The kind of the service - e.g. "SignalR" for
	//"Microsoft.SignalRService/SignalR".
	Kind *SignalRSpecKind `json:"kind,omitempty"`

	//Location: The GEO location of the resource. e.g. West US | East US | North
	//Central US | South Central US.
	Location *string `json:"location,omitempty"`

	//NetworkACLs: Network ACLs for the resource
	NetworkACLs *SignalRNetworkACLs `json:"networkACLs,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PublicNetworkAccess: Enable or disable public network access. Default to
	//"Enabled".
	//When it's Enabled, network ACLs still apply.
	//When it's Disabled, public network access is always disabled no matter what you
	//set in network ACLs.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`

	//ResourceLogConfiguration: Resource log configuration of a
	//Microsoft.SignalRService resource.
	ResourceLogConfiguration *ResourceLogConfiguration `json:"resourceLogConfiguration,omitempty"`

	//Sku: The billing information of the resource.
	Sku *ResourceSku `json:"sku,omitempty"`

	//Tags: Tags of the service which is a list of key value pairs that describe the
	//resource.
	Tags map[string]string `json:"tags,omitempty"`

	//Tls: TLS settings for the resource
	Tls *SignalRTlsSettings `json:"tls,omitempty"`

	//Upstream: The settings for the Upstream when the service is in server-less mode.
	Upstream *ServerlessUpstreamSettings `json:"upstream,omitempty"`
}

var _ genruntime.ARMTransformer = &SignalR_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (signalRSpec *SignalR_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if signalRSpec == nil {
		return nil, nil
	}
	var result SignalR_SpecARM

	// Set property ‘Identity’:
	if signalRSpec.Identity != nil {
		identityARM, err := (*signalRSpec.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(ManagedIdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Kind’:
	if signalRSpec.Kind != nil {
		kind := *signalRSpec.Kind
		result.Kind = &kind
	}

	// Set property ‘Location’:
	if signalRSpec.Location != nil {
		location := *signalRSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if signalRSpec.Cors != nil {
		corsARM, err := (*signalRSpec.Cors).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cors := corsARM.(SignalRCorsSettingsARM)
		result.Properties.Cors = &cors
	}
	if signalRSpec.DisableAadAuth != nil {
		disableAadAuth := *signalRSpec.DisableAadAuth
		result.Properties.DisableAadAuth = &disableAadAuth
	}
	if signalRSpec.DisableLocalAuth != nil {
		disableLocalAuth := *signalRSpec.DisableLocalAuth
		result.Properties.DisableLocalAuth = &disableLocalAuth
	}
	for _, item := range signalRSpec.Features {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Features = append(result.Properties.Features, itemARM.(SignalRFeatureARM))
	}
	if signalRSpec.NetworkACLs != nil {
		networkACLsARM, err := (*signalRSpec.NetworkACLs).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkACLs := networkACLsARM.(SignalRNetworkACLsARM)
		result.Properties.NetworkACLs = &networkACLs
	}
	if signalRSpec.PublicNetworkAccess != nil {
		publicNetworkAccess := *signalRSpec.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}
	if signalRSpec.ResourceLogConfiguration != nil {
		resourceLogConfigurationARM, err := (*signalRSpec.ResourceLogConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		resourceLogConfiguration := resourceLogConfigurationARM.(ResourceLogConfigurationARM)
		result.Properties.ResourceLogConfiguration = &resourceLogConfiguration
	}
	if signalRSpec.Tls != nil {
		tlsARM, err := (*signalRSpec.Tls).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tls := tlsARM.(SignalRTlsSettingsARM)
		result.Properties.Tls = &tls
	}
	if signalRSpec.Upstream != nil {
		upstreamARM, err := (*signalRSpec.Upstream).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		upstream := upstreamARM.(ServerlessUpstreamSettingsARM)
		result.Properties.Upstream = &upstream
	}

	// Set property ‘Sku’:
	if signalRSpec.Sku != nil {
		skuARM, err := (*signalRSpec.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(ResourceSkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if signalRSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range signalRSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRSpec *SignalR_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalR_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRSpec *SignalR_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalR_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalR_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	signalRSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties.Cors != nil {
		var cors1 SignalRCorsSettings
		err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
		if err != nil {
			return err
		}
		cors := cors1
		signalRSpec.Cors = &cors
	}

	// Set property ‘DisableAadAuth’:
	// copying flattened property:
	if typedInput.Properties.DisableAadAuth != nil {
		disableAadAuth := *typedInput.Properties.DisableAadAuth
		signalRSpec.DisableAadAuth = &disableAadAuth
	}

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties.DisableLocalAuth != nil {
		disableLocalAuth := *typedInput.Properties.DisableLocalAuth
		signalRSpec.DisableLocalAuth = &disableLocalAuth
	}

	// Set property ‘Features’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Features {
		var item1 SignalRFeature
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		signalRSpec.Features = append(signalRSpec.Features, item1)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 ManagedIdentity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		signalRSpec.Identity = &identity
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		signalRSpec.Kind = &kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		signalRSpec.Location = &location
	}

	// Set property ‘NetworkACLs’:
	// copying flattened property:
	if typedInput.Properties.NetworkACLs != nil {
		var networkACLs1 SignalRNetworkACLs
		err := networkACLs1.PopulateFromARM(owner, *typedInput.Properties.NetworkACLs)
		if err != nil {
			return err
		}
		networkACLs := networkACLs1
		signalRSpec.NetworkACLs = &networkACLs
	}

	// Set property ‘Owner’:
	signalRSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
		signalRSpec.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘ResourceLogConfiguration’:
	// copying flattened property:
	if typedInput.Properties.ResourceLogConfiguration != nil {
		var resourceLogConfiguration1 ResourceLogConfiguration
		err := resourceLogConfiguration1.PopulateFromARM(owner, *typedInput.Properties.ResourceLogConfiguration)
		if err != nil {
			return err
		}
		resourceLogConfiguration := resourceLogConfiguration1
		signalRSpec.ResourceLogConfiguration = &resourceLogConfiguration
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 ResourceSku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		signalRSpec.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		signalRSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			signalRSpec.Tags[key] = value
		}
	}

	// Set property ‘Tls’:
	// copying flattened property:
	if typedInput.Properties.Tls != nil {
		var tls1 SignalRTlsSettings
		err := tls1.PopulateFromARM(owner, *typedInput.Properties.Tls)
		if err != nil {
			return err
		}
		tls := tls1
		signalRSpec.Tls = &tls
	}

	// Set property ‘Upstream’:
	// copying flattened property:
	if typedInput.Properties.Upstream != nil {
		var upstream1 ServerlessUpstreamSettings
		err := upstream1.PopulateFromARM(owner, *typedInput.Properties.Upstream)
		if err != nil {
			return err
		}
		upstream := upstream1
		signalRSpec.Upstream = &upstream
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &SignalR_Spec{}

// ConvertSpecFrom populates our SignalR_Spec from the provided source
func (signalRSpec *SignalR_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20211001storage.SignalR_Spec)
	if ok {
		// Populate our instance from source
		return signalRSpec.AssignPropertiesFromSignalRSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20211001storage.SignalR_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = signalRSpec.AssignPropertiesFromSignalRSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our SignalR_Spec
func (signalRSpec *SignalR_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20211001storage.SignalR_Spec)
	if ok {
		// Populate destination from our instance
		return signalRSpec.AssignPropertiesToSignalRSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20211001storage.SignalR_Spec{}
	err := signalRSpec.AssignPropertiesToSignalRSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromSignalRSpec populates our SignalR_Spec from the provided source SignalR_Spec
func (signalRSpec *SignalR_Spec) AssignPropertiesFromSignalRSpec(source *v1alpha1api20211001storage.SignalR_Spec) error {

	// AzureName
	signalRSpec.AzureName = source.AzureName

	// Cors
	if source.Cors != nil {
		var cor SignalRCorsSettings
		err := cor.AssignPropertiesFromSignalRCorsSettings(source.Cors)
		if err != nil {
			return errors.Wrap(err, "populating Cors from Cors, calling AssignPropertiesFromSignalRCorsSettings()")
		}
		signalRSpec.Cors = &cor
	} else {
		signalRSpec.Cors = nil
	}

	// DisableAadAuth
	if source.DisableAadAuth != nil {
		disableAadAuth := *source.DisableAadAuth
		signalRSpec.DisableAadAuth = &disableAadAuth
	} else {
		signalRSpec.DisableAadAuth = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		signalRSpec.DisableLocalAuth = &disableLocalAuth
	} else {
		signalRSpec.DisableLocalAuth = nil
	}

	// Features
	if source.Features != nil {
		featureList := make([]SignalRFeature, len(source.Features))
		for featureIndex, featureItem := range source.Features {
			// Shadow the loop variable to avoid aliasing
			featureItem := featureItem
			var feature SignalRFeature
			err := feature.AssignPropertiesFromSignalRFeature(&featureItem)
			if err != nil {
				return errors.Wrap(err, "populating Features from Features, calling AssignPropertiesFromSignalRFeature()")
			}
			featureList[featureIndex] = feature
		}
		signalRSpec.Features = featureList
	} else {
		signalRSpec.Features = nil
	}

	// Identity
	if source.Identity != nil {
		var identity ManagedIdentity
		err := identity.AssignPropertiesFromManagedIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromManagedIdentity()")
		}
		signalRSpec.Identity = &identity
	} else {
		signalRSpec.Identity = nil
	}

	// Kind
	if source.Kind != nil {
		kind := SignalRSpecKind(*source.Kind)
		signalRSpec.Kind = &kind
	} else {
		signalRSpec.Kind = nil
	}

	// Location
	signalRSpec.Location = genruntime.ClonePointerToString(source.Location)

	// NetworkACLs
	if source.NetworkACLs != nil {
		var networkACL SignalRNetworkACLs
		err := networkACL.AssignPropertiesFromSignalRNetworkACLs(source.NetworkACLs)
		if err != nil {
			return errors.Wrap(err, "populating NetworkACLs from NetworkACLs, calling AssignPropertiesFromSignalRNetworkACLs()")
		}
		signalRSpec.NetworkACLs = &networkACL
	} else {
		signalRSpec.NetworkACLs = nil
	}

	// Owner
	signalRSpec.Owner = source.Owner.Copy()

	// PublicNetworkAccess
	signalRSpec.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// ResourceLogConfiguration
	if source.ResourceLogConfiguration != nil {
		var resourceLogConfiguration ResourceLogConfiguration
		err := resourceLogConfiguration.AssignPropertiesFromResourceLogConfiguration(source.ResourceLogConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating ResourceLogConfiguration from ResourceLogConfiguration, calling AssignPropertiesFromResourceLogConfiguration()")
		}
		signalRSpec.ResourceLogConfiguration = &resourceLogConfiguration
	} else {
		signalRSpec.ResourceLogConfiguration = nil
	}

	// Sku
	if source.Sku != nil {
		var sku ResourceSku
		err := sku.AssignPropertiesFromResourceSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromResourceSku()")
		}
		signalRSpec.Sku = &sku
	} else {
		signalRSpec.Sku = nil
	}

	// Tags
	signalRSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Tls
	if source.Tls != nil {
		var tl SignalRTlsSettings
		err := tl.AssignPropertiesFromSignalRTlsSettings(source.Tls)
		if err != nil {
			return errors.Wrap(err, "populating Tls from Tls, calling AssignPropertiesFromSignalRTlsSettings()")
		}
		signalRSpec.Tls = &tl
	} else {
		signalRSpec.Tls = nil
	}

	// Upstream
	if source.Upstream != nil {
		var upstream ServerlessUpstreamSettings
		err := upstream.AssignPropertiesFromServerlessUpstreamSettings(source.Upstream)
		if err != nil {
			return errors.Wrap(err, "populating Upstream from Upstream, calling AssignPropertiesFromServerlessUpstreamSettings()")
		}
		signalRSpec.Upstream = &upstream
	} else {
		signalRSpec.Upstream = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRSpec populates the provided destination SignalR_Spec from our SignalR_Spec
func (signalRSpec *SignalR_Spec) AssignPropertiesToSignalRSpec(destination *v1alpha1api20211001storage.SignalR_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = signalRSpec.AzureName

	// Cors
	if signalRSpec.Cors != nil {
		var cor v1alpha1api20211001storage.SignalRCorsSettings
		err := (*signalRSpec.Cors).AssignPropertiesToSignalRCorsSettings(&cor)
		if err != nil {
			return errors.Wrap(err, "populating Cors from Cors, calling AssignPropertiesToSignalRCorsSettings()")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DisableAadAuth
	if signalRSpec.DisableAadAuth != nil {
		disableAadAuth := *signalRSpec.DisableAadAuth
		destination.DisableAadAuth = &disableAadAuth
	} else {
		destination.DisableAadAuth = nil
	}

	// DisableLocalAuth
	if signalRSpec.DisableLocalAuth != nil {
		disableLocalAuth := *signalRSpec.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Features
	if signalRSpec.Features != nil {
		featureList := make([]v1alpha1api20211001storage.SignalRFeature, len(signalRSpec.Features))
		for featureIndex, featureItem := range signalRSpec.Features {
			// Shadow the loop variable to avoid aliasing
			featureItem := featureItem
			var feature v1alpha1api20211001storage.SignalRFeature
			err := featureItem.AssignPropertiesToSignalRFeature(&feature)
			if err != nil {
				return errors.Wrap(err, "populating Features from Features, calling AssignPropertiesToSignalRFeature()")
			}
			featureList[featureIndex] = feature
		}
		destination.Features = featureList
	} else {
		destination.Features = nil
	}

	// Identity
	if signalRSpec.Identity != nil {
		var identity v1alpha1api20211001storage.ManagedIdentity
		err := (*signalRSpec.Identity).AssignPropertiesToManagedIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToManagedIdentity()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Kind
	if signalRSpec.Kind != nil {
		kind := string(*signalRSpec.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(signalRSpec.Location)

	// NetworkACLs
	if signalRSpec.NetworkACLs != nil {
		var networkACL v1alpha1api20211001storage.SignalRNetworkACLs
		err := (*signalRSpec.NetworkACLs).AssignPropertiesToSignalRNetworkACLs(&networkACL)
		if err != nil {
			return errors.Wrap(err, "populating NetworkACLs from NetworkACLs, calling AssignPropertiesToSignalRNetworkACLs()")
		}
		destination.NetworkACLs = &networkACL
	} else {
		destination.NetworkACLs = nil
	}

	// OriginalVersion
	destination.OriginalVersion = signalRSpec.OriginalVersion()

	// Owner
	destination.Owner = signalRSpec.Owner.Copy()

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(signalRSpec.PublicNetworkAccess)

	// ResourceLogConfiguration
	if signalRSpec.ResourceLogConfiguration != nil {
		var resourceLogConfiguration v1alpha1api20211001storage.ResourceLogConfiguration
		err := (*signalRSpec.ResourceLogConfiguration).AssignPropertiesToResourceLogConfiguration(&resourceLogConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating ResourceLogConfiguration from ResourceLogConfiguration, calling AssignPropertiesToResourceLogConfiguration()")
		}
		destination.ResourceLogConfiguration = &resourceLogConfiguration
	} else {
		destination.ResourceLogConfiguration = nil
	}

	// Sku
	if signalRSpec.Sku != nil {
		var sku v1alpha1api20211001storage.ResourceSku
		err := (*signalRSpec.Sku).AssignPropertiesToResourceSku(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToResourceSku()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(signalRSpec.Tags)

	// Tls
	if signalRSpec.Tls != nil {
		var tl v1alpha1api20211001storage.SignalRTlsSettings
		err := (*signalRSpec.Tls).AssignPropertiesToSignalRTlsSettings(&tl)
		if err != nil {
			return errors.Wrap(err, "populating Tls from Tls, calling AssignPropertiesToSignalRTlsSettings()")
		}
		destination.Tls = &tl
	} else {
		destination.Tls = nil
	}

	// Upstream
	if signalRSpec.Upstream != nil {
		var upstream v1alpha1api20211001storage.ServerlessUpstreamSettings
		err := (*signalRSpec.Upstream).AssignPropertiesToServerlessUpstreamSettings(&upstream)
		if err != nil {
			return errors.Wrap(err, "populating Upstream from Upstream, calling AssignPropertiesToServerlessUpstreamSettings()")
		}
		destination.Upstream = &upstream
	} else {
		destination.Upstream = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (signalRSpec *SignalR_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (signalRSpec *SignalR_Spec) SetAzureName(azureName string) { signalRSpec.AzureName = azureName }

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ManagedIdentity
type ManagedIdentity struct {
	//Type: Represent the identity type: systemAssigned, userAssigned, None.
	Type *ManagedIdentityType `json:"type,omitempty"`

	//UserAssignedIdentities: Get or set the user assigned identities
	UserAssignedIdentities map[string]v1.JSON `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedIdentity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (managedIdentity *ManagedIdentity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if managedIdentity == nil {
		return nil, nil
	}
	var result ManagedIdentityARM

	// Set property ‘Type’:
	if managedIdentity.Type != nil {
		typeVar := *managedIdentity.Type
		result.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if managedIdentity.UserAssignedIdentities != nil {
		result.UserAssignedIdentities = make(map[string]v1.JSON)
		for key, value := range managedIdentity.UserAssignedIdentities {
			result.UserAssignedIdentities[key] = *value.DeepCopy()
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (managedIdentity *ManagedIdentity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedIdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (managedIdentity *ManagedIdentity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedIdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedIdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		managedIdentity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		managedIdentity.UserAssignedIdentities = make(map[string]v1.JSON)
		for key, value := range typedInput.UserAssignedIdentities {
			managedIdentity.UserAssignedIdentities[key] = *value.DeepCopy()
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedIdentity populates our ManagedIdentity from the provided source ManagedIdentity
func (managedIdentity *ManagedIdentity) AssignPropertiesFromManagedIdentity(source *v1alpha1api20211001storage.ManagedIdentity) error {

	// Type
	if source.Type != nil {
		typeVar := ManagedIdentityType(*source.Type)
		managedIdentity.Type = &typeVar
	} else {
		managedIdentity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1.JSON, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			userAssignedIdentityMap[userAssignedIdentityKey] = *userAssignedIdentityValue.DeepCopy()
		}
		managedIdentity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		managedIdentity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedIdentity populates the provided destination ManagedIdentity from our ManagedIdentity
func (managedIdentity *ManagedIdentity) AssignPropertiesToManagedIdentity(destination *v1alpha1api20211001storage.ManagedIdentity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if managedIdentity.Type != nil {
		typeVar := string(*managedIdentity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if managedIdentity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1.JSON, len(managedIdentity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range managedIdentity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			userAssignedIdentityMap[userAssignedIdentityKey] = *userAssignedIdentityValue.DeepCopy()
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ManagedIdentity_Status struct {
	//PrincipalId: Get the principal id for the system assigned identity.
	//Only be used in response.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: Get the tenant id for the system assigned identity.
	//Only be used in response
	TenantId *string `json:"tenantId,omitempty"`

	//Type: Represent the identity type: systemAssigned, userAssigned, None
	Type *ManagedIdentityType_Status `json:"type,omitempty"`

	//UserAssignedIdentities: Get or set the user assigned identities
	UserAssignedIdentities map[string]UserAssignedIdentityProperty_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagedIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (managedIdentityStatus *ManagedIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (managedIdentityStatus *ManagedIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		managedIdentityStatus.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		managedIdentityStatus.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		managedIdentityStatus.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		managedIdentityStatus.UserAssignedIdentities = make(map[string]UserAssignedIdentityProperty_Status)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserAssignedIdentityProperty_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			managedIdentityStatus.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedIdentityStatus populates our ManagedIdentity_Status from the provided source ManagedIdentity_Status
func (managedIdentityStatus *ManagedIdentity_Status) AssignPropertiesFromManagedIdentityStatus(source *v1alpha1api20211001storage.ManagedIdentity_Status) error {

	// PrincipalId
	managedIdentityStatus.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	managedIdentityStatus.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := ManagedIdentityType_Status(*source.Type)
		managedIdentityStatus.Type = &typeVar
	} else {
		managedIdentityStatus.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserAssignedIdentityProperty_Status, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserAssignedIdentityProperty_Status
			err := userAssignedIdentity.AssignPropertiesFromUserAssignedIdentityPropertyStatus(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "populating UserAssignedIdentities from UserAssignedIdentities, calling AssignPropertiesFromUserAssignedIdentityPropertyStatus()")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		managedIdentityStatus.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		managedIdentityStatus.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedIdentityStatus populates the provided destination ManagedIdentity_Status from our ManagedIdentity_Status
func (managedIdentityStatus *ManagedIdentity_Status) AssignPropertiesToManagedIdentityStatus(destination *v1alpha1api20211001storage.ManagedIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(managedIdentityStatus.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(managedIdentityStatus.TenantId)

	// Type
	if managedIdentityStatus.Type != nil {
		typeVar := string(*managedIdentityStatus.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if managedIdentityStatus.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20211001storage.UserAssignedIdentityProperty_Status, len(managedIdentityStatus.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range managedIdentityStatus.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20211001storage.UserAssignedIdentityProperty_Status
			err := userAssignedIdentityValue.AssignPropertiesToUserAssignedIdentityPropertyStatus(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "populating UserAssignedIdentities from UserAssignedIdentities, calling AssignPropertiesToUserAssignedIdentityPropertyStatus()")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded struct {
	//Id: Fully qualified resource Id for the resource.
	Id *string `json:"id,omitempty"`

	//SystemData: Metadata pertaining to creation and last modification of the
	//resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointConnectionStatusSignalRSubResourceEmbedded *PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointConnectionStatusSignalRSubResourceEmbedded *PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		privateEndpointConnectionStatusSignalRSubResourceEmbedded.Id = &id
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		privateEndpointConnectionStatusSignalRSubResourceEmbedded.SystemData = &systemData
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSignalRSubResourceEmbedded populates our PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
func (privateEndpointConnectionStatusSignalRSubResourceEmbedded *PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSignalRSubResourceEmbedded(source *v1alpha1api20211001storage.PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) error {

	// Id
	privateEndpointConnectionStatusSignalRSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		privateEndpointConnectionStatusSignalRSubResourceEmbedded.SystemData = &systemDatum
	} else {
		privateEndpointConnectionStatusSignalRSubResourceEmbedded.SystemData = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSignalRSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded from our PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
func (privateEndpointConnectionStatusSignalRSubResourceEmbedded *PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSignalRSubResourceEmbedded(destination *v1alpha1api20211001storage.PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(privateEndpointConnectionStatusSignalRSubResourceEmbedded.Id)

	// SystemData
	if privateEndpointConnectionStatusSignalRSubResourceEmbedded.SystemData != nil {
		var systemDatum v1alpha1api20211001storage.SystemData_Status
		err := (*privateEndpointConnectionStatusSignalRSubResourceEmbedded.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ProvisioningState_Status string

const (
	ProvisioningState_StatusCanceled  = ProvisioningState_Status("Canceled")
	ProvisioningState_StatusCreating  = ProvisioningState_Status("Creating")
	ProvisioningState_StatusDeleting  = ProvisioningState_Status("Deleting")
	ProvisioningState_StatusFailed    = ProvisioningState_Status("Failed")
	ProvisioningState_StatusMoving    = ProvisioningState_Status("Moving")
	ProvisioningState_StatusRunning   = ProvisioningState_Status("Running")
	ProvisioningState_StatusSucceeded = ProvisioningState_Status("Succeeded")
	ProvisioningState_StatusUnknown   = ProvisioningState_Status("Unknown")
	ProvisioningState_StatusUpdating  = ProvisioningState_Status("Updating")
)

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ResourceLogConfiguration
type ResourceLogConfiguration struct {
	//Categories: Gets or sets the list of category configurations.
	Categories []ResourceLogCategory `json:"categories,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceLogConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resourceLogConfiguration *ResourceLogConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resourceLogConfiguration == nil {
		return nil, nil
	}
	var result ResourceLogConfigurationARM

	// Set property ‘Categories’:
	for _, item := range resourceLogConfiguration.Categories {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Categories = append(result.Categories, itemARM.(ResourceLogCategoryARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceLogConfiguration *ResourceLogConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceLogConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceLogConfiguration *ResourceLogConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceLogConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceLogConfigurationARM, got %T", armInput)
	}

	// Set property ‘Categories’:
	for _, item := range typedInput.Categories {
		var item1 ResourceLogCategory
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		resourceLogConfiguration.Categories = append(resourceLogConfiguration.Categories, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceLogConfiguration populates our ResourceLogConfiguration from the provided source ResourceLogConfiguration
func (resourceLogConfiguration *ResourceLogConfiguration) AssignPropertiesFromResourceLogConfiguration(source *v1alpha1api20211001storage.ResourceLogConfiguration) error {

	// Categories
	if source.Categories != nil {
		categoryList := make([]ResourceLogCategory, len(source.Categories))
		for categoryIndex, categoryItem := range source.Categories {
			// Shadow the loop variable to avoid aliasing
			categoryItem := categoryItem
			var category ResourceLogCategory
			err := category.AssignPropertiesFromResourceLogCategory(&categoryItem)
			if err != nil {
				return errors.Wrap(err, "populating Categories from Categories, calling AssignPropertiesFromResourceLogCategory()")
			}
			categoryList[categoryIndex] = category
		}
		resourceLogConfiguration.Categories = categoryList
	} else {
		resourceLogConfiguration.Categories = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceLogConfiguration populates the provided destination ResourceLogConfiguration from our ResourceLogConfiguration
func (resourceLogConfiguration *ResourceLogConfiguration) AssignPropertiesToResourceLogConfiguration(destination *v1alpha1api20211001storage.ResourceLogConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Categories
	if resourceLogConfiguration.Categories != nil {
		categoryList := make([]v1alpha1api20211001storage.ResourceLogCategory, len(resourceLogConfiguration.Categories))
		for categoryIndex, categoryItem := range resourceLogConfiguration.Categories {
			// Shadow the loop variable to avoid aliasing
			categoryItem := categoryItem
			var category v1alpha1api20211001storage.ResourceLogCategory
			err := categoryItem.AssignPropertiesToResourceLogCategory(&category)
			if err != nil {
				return errors.Wrap(err, "populating Categories from Categories, calling AssignPropertiesToResourceLogCategory()")
			}
			categoryList[categoryIndex] = category
		}
		destination.Categories = categoryList
	} else {
		destination.Categories = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceLogConfiguration_Status struct {
	//Categories: Gets or sets the list of category configurations.
	Categories []ResourceLogCategory_Status `json:"categories,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceLogConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceLogConfigurationStatus *ResourceLogConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceLogConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceLogConfigurationStatus *ResourceLogConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceLogConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceLogConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘Categories’:
	for _, item := range typedInput.Categories {
		var item1 ResourceLogCategory_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		resourceLogConfigurationStatus.Categories = append(resourceLogConfigurationStatus.Categories, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceLogConfigurationStatus populates our ResourceLogConfiguration_Status from the provided source ResourceLogConfiguration_Status
func (resourceLogConfigurationStatus *ResourceLogConfiguration_Status) AssignPropertiesFromResourceLogConfigurationStatus(source *v1alpha1api20211001storage.ResourceLogConfiguration_Status) error {

	// Categories
	if source.Categories != nil {
		categoryList := make([]ResourceLogCategory_Status, len(source.Categories))
		for categoryIndex, categoryItem := range source.Categories {
			// Shadow the loop variable to avoid aliasing
			categoryItem := categoryItem
			var category ResourceLogCategory_Status
			err := category.AssignPropertiesFromResourceLogCategoryStatus(&categoryItem)
			if err != nil {
				return errors.Wrap(err, "populating Categories from Categories, calling AssignPropertiesFromResourceLogCategoryStatus()")
			}
			categoryList[categoryIndex] = category
		}
		resourceLogConfigurationStatus.Categories = categoryList
	} else {
		resourceLogConfigurationStatus.Categories = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceLogConfigurationStatus populates the provided destination ResourceLogConfiguration_Status from our ResourceLogConfiguration_Status
func (resourceLogConfigurationStatus *ResourceLogConfiguration_Status) AssignPropertiesToResourceLogConfigurationStatus(destination *v1alpha1api20211001storage.ResourceLogConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Categories
	if resourceLogConfigurationStatus.Categories != nil {
		categoryList := make([]v1alpha1api20211001storage.ResourceLogCategory_Status, len(resourceLogConfigurationStatus.Categories))
		for categoryIndex, categoryItem := range resourceLogConfigurationStatus.Categories {
			// Shadow the loop variable to avoid aliasing
			categoryItem := categoryItem
			var category v1alpha1api20211001storage.ResourceLogCategory_Status
			err := categoryItem.AssignPropertiesToResourceLogCategoryStatus(&category)
			if err != nil {
				return errors.Wrap(err, "populating Categories from Categories, calling AssignPropertiesToResourceLogCategoryStatus()")
			}
			categoryList[categoryIndex] = category
		}
		destination.Categories = categoryList
	} else {
		destination.Categories = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ResourceSku
type ResourceSku struct {
	//Capacity: Optional, integer. The unit count of the resource. 1 by default.
	//If present, following values are allowed:
	//Free: 1
	//Standard: 1,2,5,10,20,50,100
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	//Name: The name of the SKU. Required.
	//Allowed values: Standard_S1, Free_F1
	Name string `json:"name"`

	//Tier: Optional tier of this particular SKU. 'Standard' or 'Free'.
	//`Basic` is deprecated, use `Standard` instead.
	Tier *ResourceSkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceSku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resourceSku *ResourceSku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resourceSku == nil {
		return nil, nil
	}
	var result ResourceSkuARM

	// Set property ‘Capacity’:
	if resourceSku.Capacity != nil {
		capacity := *resourceSku.Capacity
		result.Capacity = &capacity
	}

	// Set property ‘Name’:
	result.Name = resourceSku.Name

	// Set property ‘Tier’:
	if resourceSku.Tier != nil {
		tier := *resourceSku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceSku *ResourceSku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceSkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceSku *ResourceSku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceSkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceSkuARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		resourceSku.Capacity = &capacity
	}

	// Set property ‘Name’:
	resourceSku.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		resourceSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceSku populates our ResourceSku from the provided source ResourceSku
func (resourceSku *ResourceSku) AssignPropertiesFromResourceSku(source *v1alpha1api20211001storage.ResourceSku) error {

	// Capacity
	resourceSku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	resourceSku.Name = genruntime.GetOptionalStringValue(source.Name)

	// Tier
	if source.Tier != nil {
		tier := ResourceSkuTier(*source.Tier)
		resourceSku.Tier = &tier
	} else {
		resourceSku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceSku populates the provided destination ResourceSku from our ResourceSku
func (resourceSku *ResourceSku) AssignPropertiesToResourceSku(destination *v1alpha1api20211001storage.ResourceSku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(resourceSku.Capacity)

	// Name
	name := resourceSku.Name
	destination.Name = &name

	// Tier
	if resourceSku.Tier != nil {
		tier := string(*resourceSku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceSku_Status struct {
	//Capacity: Optional, integer. The unit count of the resource. 1 by default.
	//If present, following values are allowed:
	//Free: 1
	//Standard: 1,2,5,10,20,50,100
	Capacity *int `json:"capacity,omitempty"`

	//Family: Not used. Retained for future use.
	Family *string `json:"family,omitempty"`

	// +kubebuilder:validation:Required
	//Name: The name of the SKU. Required.
	//Allowed values: Standard_S1, Free_F1
	Name string `json:"name"`

	//Size: Not used. Retained for future use.
	Size *string `json:"size,omitempty"`

	//Tier: Optional tier of this particular SKU. 'Standard' or 'Free'.
	//`Basic` is deprecated, use `Standard` instead.
	Tier *SignalRSkuTier_Status `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceSku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceSkuStatus *ResourceSku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceSku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceSkuStatus *ResourceSku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceSku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceSku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		resourceSkuStatus.Capacity = &capacity
	}

	// Set property ‘Family’:
	if typedInput.Family != nil {
		family := *typedInput.Family
		resourceSkuStatus.Family = &family
	}

	// Set property ‘Name’:
	resourceSkuStatus.Name = typedInput.Name

	// Set property ‘Size’:
	if typedInput.Size != nil {
		size := *typedInput.Size
		resourceSkuStatus.Size = &size
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		resourceSkuStatus.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceSkuStatus populates our ResourceSku_Status from the provided source ResourceSku_Status
func (resourceSkuStatus *ResourceSku_Status) AssignPropertiesFromResourceSkuStatus(source *v1alpha1api20211001storage.ResourceSku_Status) error {

	// Capacity
	resourceSkuStatus.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	resourceSkuStatus.Family = genruntime.ClonePointerToString(source.Family)

	// Name
	resourceSkuStatus.Name = genruntime.GetOptionalStringValue(source.Name)

	// Size
	resourceSkuStatus.Size = genruntime.ClonePointerToString(source.Size)

	// Tier
	if source.Tier != nil {
		tier := SignalRSkuTier_Status(*source.Tier)
		resourceSkuStatus.Tier = &tier
	} else {
		resourceSkuStatus.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceSkuStatus populates the provided destination ResourceSku_Status from our ResourceSku_Status
func (resourceSkuStatus *ResourceSku_Status) AssignPropertiesToResourceSkuStatus(destination *v1alpha1api20211001storage.ResourceSku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(resourceSkuStatus.Capacity)

	// Family
	destination.Family = genruntime.ClonePointerToString(resourceSkuStatus.Family)

	// Name
	name := resourceSkuStatus.Name
	destination.Name = &name

	// Size
	destination.Size = genruntime.ClonePointerToString(resourceSkuStatus.Size)

	// Tier
	if resourceSkuStatus.Tier != nil {
		tier := string(*resourceSkuStatus.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ServerlessUpstreamSettings
type ServerlessUpstreamSettings struct {
	//Templates: Gets or sets the list of Upstream URL templates. Order matters, and
	//the first matching template takes effects.
	Templates []UpstreamTemplate `json:"templates,omitempty"`
}

var _ genruntime.ARMTransformer = &ServerlessUpstreamSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serverlessUpstreamSettings *ServerlessUpstreamSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serverlessUpstreamSettings == nil {
		return nil, nil
	}
	var result ServerlessUpstreamSettingsARM

	// Set property ‘Templates’:
	for _, item := range serverlessUpstreamSettings.Templates {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Templates = append(result.Templates, itemARM.(UpstreamTemplateARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serverlessUpstreamSettings *ServerlessUpstreamSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServerlessUpstreamSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serverlessUpstreamSettings *ServerlessUpstreamSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServerlessUpstreamSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServerlessUpstreamSettingsARM, got %T", armInput)
	}

	// Set property ‘Templates’:
	for _, item := range typedInput.Templates {
		var item1 UpstreamTemplate
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		serverlessUpstreamSettings.Templates = append(serverlessUpstreamSettings.Templates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromServerlessUpstreamSettings populates our ServerlessUpstreamSettings from the provided source ServerlessUpstreamSettings
func (serverlessUpstreamSettings *ServerlessUpstreamSettings) AssignPropertiesFromServerlessUpstreamSettings(source *v1alpha1api20211001storage.ServerlessUpstreamSettings) error {

	// Templates
	if source.Templates != nil {
		templateList := make([]UpstreamTemplate, len(source.Templates))
		for templateIndex, templateItem := range source.Templates {
			// Shadow the loop variable to avoid aliasing
			templateItem := templateItem
			var template UpstreamTemplate
			err := template.AssignPropertiesFromUpstreamTemplate(&templateItem)
			if err != nil {
				return errors.Wrap(err, "populating Templates from Templates, calling AssignPropertiesFromUpstreamTemplate()")
			}
			templateList[templateIndex] = template
		}
		serverlessUpstreamSettings.Templates = templateList
	} else {
		serverlessUpstreamSettings.Templates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServerlessUpstreamSettings populates the provided destination ServerlessUpstreamSettings from our ServerlessUpstreamSettings
func (serverlessUpstreamSettings *ServerlessUpstreamSettings) AssignPropertiesToServerlessUpstreamSettings(destination *v1alpha1api20211001storage.ServerlessUpstreamSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Templates
	if serverlessUpstreamSettings.Templates != nil {
		templateList := make([]v1alpha1api20211001storage.UpstreamTemplate, len(serverlessUpstreamSettings.Templates))
		for templateIndex, templateItem := range serverlessUpstreamSettings.Templates {
			// Shadow the loop variable to avoid aliasing
			templateItem := templateItem
			var template v1alpha1api20211001storage.UpstreamTemplate
			err := templateItem.AssignPropertiesToUpstreamTemplate(&template)
			if err != nil {
				return errors.Wrap(err, "populating Templates from Templates, calling AssignPropertiesToUpstreamTemplate()")
			}
			templateList[templateIndex] = template
		}
		destination.Templates = templateList
	} else {
		destination.Templates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServerlessUpstreamSettings_Status struct {
	//Templates: Gets or sets the list of Upstream URL templates. Order matters, and
	//the first matching template takes effects.
	Templates []UpstreamTemplate_Status `json:"templates,omitempty"`
}

var _ genruntime.FromARMConverter = &ServerlessUpstreamSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serverlessUpstreamSettingsStatus *ServerlessUpstreamSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServerlessUpstreamSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serverlessUpstreamSettingsStatus *ServerlessUpstreamSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServerlessUpstreamSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServerlessUpstreamSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘Templates’:
	for _, item := range typedInput.Templates {
		var item1 UpstreamTemplate_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		serverlessUpstreamSettingsStatus.Templates = append(serverlessUpstreamSettingsStatus.Templates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromServerlessUpstreamSettingsStatus populates our ServerlessUpstreamSettings_Status from the provided source ServerlessUpstreamSettings_Status
func (serverlessUpstreamSettingsStatus *ServerlessUpstreamSettings_Status) AssignPropertiesFromServerlessUpstreamSettingsStatus(source *v1alpha1api20211001storage.ServerlessUpstreamSettings_Status) error {

	// Templates
	if source.Templates != nil {
		templateList := make([]UpstreamTemplate_Status, len(source.Templates))
		for templateIndex, templateItem := range source.Templates {
			// Shadow the loop variable to avoid aliasing
			templateItem := templateItem
			var template UpstreamTemplate_Status
			err := template.AssignPropertiesFromUpstreamTemplateStatus(&templateItem)
			if err != nil {
				return errors.Wrap(err, "populating Templates from Templates, calling AssignPropertiesFromUpstreamTemplateStatus()")
			}
			templateList[templateIndex] = template
		}
		serverlessUpstreamSettingsStatus.Templates = templateList
	} else {
		serverlessUpstreamSettingsStatus.Templates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServerlessUpstreamSettingsStatus populates the provided destination ServerlessUpstreamSettings_Status from our ServerlessUpstreamSettings_Status
func (serverlessUpstreamSettingsStatus *ServerlessUpstreamSettings_Status) AssignPropertiesToServerlessUpstreamSettingsStatus(destination *v1alpha1api20211001storage.ServerlessUpstreamSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Templates
	if serverlessUpstreamSettingsStatus.Templates != nil {
		templateList := make([]v1alpha1api20211001storage.UpstreamTemplate_Status, len(serverlessUpstreamSettingsStatus.Templates))
		for templateIndex, templateItem := range serverlessUpstreamSettingsStatus.Templates {
			// Shadow the loop variable to avoid aliasing
			templateItem := templateItem
			var template v1alpha1api20211001storage.UpstreamTemplate_Status
			err := templateItem.AssignPropertiesToUpstreamTemplateStatus(&template)
			if err != nil {
				return errors.Wrap(err, "populating Templates from Templates, calling AssignPropertiesToUpstreamTemplateStatus()")
			}
			templateList[templateIndex] = template
		}
		destination.Templates = templateList
	} else {
		destination.Templates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded struct {
	//Id: Fully qualified resource Id for the resource.
	Id *string `json:"id,omitempty"`

	//SystemData: Metadata pertaining to creation and last modification of the
	//resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`
}

var _ genruntime.FromARMConverter = &SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded *SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded *SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded.Id = &id
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded.SystemData = &systemData
	}

	// No error
	return nil
}

// AssignPropertiesFromSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded populates our SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded from the provided source SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
func (sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded *SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) AssignPropertiesFromSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded(source *v1alpha1api20211001storage.SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) error {

	// Id
	sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded.SystemData = &systemDatum
	} else {
		sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded.SystemData = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded populates the provided destination SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded from our SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
func (sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded *SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) AssignPropertiesToSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded(destination *v1alpha1api20211001storage.SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded.Id)

	// SystemData
	if sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded.SystemData != nil {
		var systemDatum v1alpha1api20211001storage.SystemData_Status
		err := (*sharedPrivateLinkResourceStatusSignalRSubResourceEmbedded.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/SignalRCorsSettings
type SignalRCorsSettings struct {
	//AllowedOrigins: Gets or sets the list of origins that should be allowed to make
	//cross-origin calls (for example: http://example.com:12345). Use "*" to allow
	//all. If omitted, allow all by default.
	AllowedOrigins []string `json:"allowedOrigins,omitempty"`
}

var _ genruntime.ARMTransformer = &SignalRCorsSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (signalRCorsSettings *SignalRCorsSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if signalRCorsSettings == nil {
		return nil, nil
	}
	var result SignalRCorsSettingsARM

	// Set property ‘AllowedOrigins’:
	for _, item := range signalRCorsSettings.AllowedOrigins {
		result.AllowedOrigins = append(result.AllowedOrigins, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRCorsSettings *SignalRCorsSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRCorsSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRCorsSettings *SignalRCorsSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRCorsSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRCorsSettingsARM, got %T", armInput)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		signalRCorsSettings.AllowedOrigins = append(signalRCorsSettings.AllowedOrigins, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRCorsSettings populates our SignalRCorsSettings from the provided source SignalRCorsSettings
func (signalRCorsSettings *SignalRCorsSettings) AssignPropertiesFromSignalRCorsSettings(source *v1alpha1api20211001storage.SignalRCorsSettings) error {

	// AllowedOrigins
	signalRCorsSettings.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// No error
	return nil
}

// AssignPropertiesToSignalRCorsSettings populates the provided destination SignalRCorsSettings from our SignalRCorsSettings
func (signalRCorsSettings *SignalRCorsSettings) AssignPropertiesToSignalRCorsSettings(destination *v1alpha1api20211001storage.SignalRCorsSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(signalRCorsSettings.AllowedOrigins)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SignalRCorsSettings_Status struct {
	//AllowedOrigins: Gets or sets the list of origins that should be allowed to make
	//cross-origin calls (for example: http://example.com:12345). Use "*" to allow
	//all. If omitted, allow all by default.
	AllowedOrigins []string `json:"allowedOrigins,omitempty"`
}

var _ genruntime.FromARMConverter = &SignalRCorsSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRCorsSettingsStatus *SignalRCorsSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRCorsSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRCorsSettingsStatus *SignalRCorsSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRCorsSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRCorsSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		signalRCorsSettingsStatus.AllowedOrigins = append(signalRCorsSettingsStatus.AllowedOrigins, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRCorsSettingsStatus populates our SignalRCorsSettings_Status from the provided source SignalRCorsSettings_Status
func (signalRCorsSettingsStatus *SignalRCorsSettings_Status) AssignPropertiesFromSignalRCorsSettingsStatus(source *v1alpha1api20211001storage.SignalRCorsSettings_Status) error {

	// AllowedOrigins
	signalRCorsSettingsStatus.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// No error
	return nil
}

// AssignPropertiesToSignalRCorsSettingsStatus populates the provided destination SignalRCorsSettings_Status from our SignalRCorsSettings_Status
func (signalRCorsSettingsStatus *SignalRCorsSettings_Status) AssignPropertiesToSignalRCorsSettingsStatus(destination *v1alpha1api20211001storage.SignalRCorsSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(signalRCorsSettingsStatus.AllowedOrigins)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/SignalRFeature
type SignalRFeature struct {
	// +kubebuilder:validation:Required
	//Flag: FeatureFlags is the supported features of Azure SignalR service.
	//- ServiceMode: Flag for backend server for SignalR service. Values allowed:
	//"Default": have your own backend server; "Serverless": your application doesn't
	//have a backend server; "Classic": for backward compatibility. Support both
	//Default and Serverless mode but not recommended; "PredefinedOnly": for future
	//use.
	//- EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log
	//category respectively.
	//- EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log
	//category respectively.
	//- EnableLiveTrace: Live Trace allows you to know what's happening inside Azure
	//SignalR service, it will give you live traces in real time, it will be helpful
	//when you developing your own Azure SignalR based web application or
	//self-troubleshooting some issues. Please note that live traces are counted as
	//outbound messages that will be charged. Values allowed: "true"/"false", to
	//enable/disable live trace feature.
	Flag SignalRFeatureFlag `json:"flag"`

	//Properties: Optional properties related to this feature.
	Properties map[string]string `json:"properties,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=128
	// +kubebuilder:validation:MinLength=1
	//Value: Value of the feature flag. See Azure SignalR service document
	//https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value string `json:"value"`
}

var _ genruntime.ARMTransformer = &SignalRFeature{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (signalRFeature *SignalRFeature) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if signalRFeature == nil {
		return nil, nil
	}
	var result SignalRFeatureARM

	// Set property ‘Flag’:
	result.Flag = signalRFeature.Flag

	// Set property ‘Properties’:
	if signalRFeature.Properties != nil {
		result.Properties = make(map[string]string)
		for key, value := range signalRFeature.Properties {
			result.Properties[key] = value
		}
	}

	// Set property ‘Value’:
	result.Value = signalRFeature.Value
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRFeature *SignalRFeature) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRFeatureARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRFeature *SignalRFeature) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRFeatureARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRFeatureARM, got %T", armInput)
	}

	// Set property ‘Flag’:
	signalRFeature.Flag = typedInput.Flag

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		signalRFeature.Properties = make(map[string]string)
		for key, value := range typedInput.Properties {
			signalRFeature.Properties[key] = value
		}
	}

	// Set property ‘Value’:
	signalRFeature.Value = typedInput.Value

	// No error
	return nil
}

// AssignPropertiesFromSignalRFeature populates our SignalRFeature from the provided source SignalRFeature
func (signalRFeature *SignalRFeature) AssignPropertiesFromSignalRFeature(source *v1alpha1api20211001storage.SignalRFeature) error {

	// Flag
	if source.Flag != nil {
		signalRFeature.Flag = SignalRFeatureFlag(*source.Flag)
	} else {
		signalRFeature.Flag = ""
	}

	// Properties
	signalRFeature.Properties = genruntime.CloneMapOfStringToString(source.Properties)

	// Value
	if source.Value != nil {
		signalRFeature.Value = *source.Value
	} else {
		signalRFeature.Value = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRFeature populates the provided destination SignalRFeature from our SignalRFeature
func (signalRFeature *SignalRFeature) AssignPropertiesToSignalRFeature(destination *v1alpha1api20211001storage.SignalRFeature) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Flag
	flag := string(signalRFeature.Flag)
	destination.Flag = &flag

	// Properties
	destination.Properties = genruntime.CloneMapOfStringToString(signalRFeature.Properties)

	// Value
	value := signalRFeature.Value
	destination.Value = &value

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SignalRFeature_Status struct {
	// +kubebuilder:validation:Required
	//Flag: FeatureFlags is the supported features of Azure SignalR service.
	//- ServiceMode: Flag for backend server for SignalR service. Values allowed:
	//"Default": have your own backend server; "Serverless": your application doesn't
	//have a backend server; "Classic": for backward compatibility. Support both
	//Default and Serverless mode but not recommended; "PredefinedOnly": for future
	//use.
	//- EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log
	//category respectively.
	//- EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log
	//category respectively.
	//- EnableLiveTrace: Live Trace allows you to know what's happening inside Azure
	//SignalR service, it will give you live traces in real time, it will be helpful
	//when you developing your own Azure SignalR based web application or
	//self-troubleshooting some issues. Please note that live traces are counted as
	//outbound messages that will be charged. Values allowed: "true"/"false", to
	//enable/disable live trace feature.
	Flag FeatureFlags_Status `json:"flag"`

	//Properties: Optional properties related to this feature.
	Properties map[string]string `json:"properties,omitempty"`

	// +kubebuilder:validation:Required
	//Value: Value of the feature flag. See Azure SignalR service document
	//https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value string `json:"value"`
}

var _ genruntime.FromARMConverter = &SignalRFeature_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRFeatureStatus *SignalRFeature_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRFeature_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRFeatureStatus *SignalRFeature_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRFeature_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRFeature_StatusARM, got %T", armInput)
	}

	// Set property ‘Flag’:
	signalRFeatureStatus.Flag = typedInput.Flag

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		signalRFeatureStatus.Properties = make(map[string]string)
		for key, value := range typedInput.Properties {
			signalRFeatureStatus.Properties[key] = value
		}
	}

	// Set property ‘Value’:
	signalRFeatureStatus.Value = typedInput.Value

	// No error
	return nil
}

// AssignPropertiesFromSignalRFeatureStatus populates our SignalRFeature_Status from the provided source SignalRFeature_Status
func (signalRFeatureStatus *SignalRFeature_Status) AssignPropertiesFromSignalRFeatureStatus(source *v1alpha1api20211001storage.SignalRFeature_Status) error {

	// Flag
	if source.Flag != nil {
		signalRFeatureStatus.Flag = FeatureFlags_Status(*source.Flag)
	} else {
		signalRFeatureStatus.Flag = ""
	}

	// Properties
	signalRFeatureStatus.Properties = genruntime.CloneMapOfStringToString(source.Properties)

	// Value
	signalRFeatureStatus.Value = genruntime.GetOptionalStringValue(source.Value)

	// No error
	return nil
}

// AssignPropertiesToSignalRFeatureStatus populates the provided destination SignalRFeature_Status from our SignalRFeature_Status
func (signalRFeatureStatus *SignalRFeature_Status) AssignPropertiesToSignalRFeatureStatus(destination *v1alpha1api20211001storage.SignalRFeature_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Flag
	flag := string(signalRFeatureStatus.Flag)
	destination.Flag = &flag

	// Properties
	destination.Properties = genruntime.CloneMapOfStringToString(signalRFeatureStatus.Properties)

	// Value
	value := signalRFeatureStatus.Value
	destination.Value = &value

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/SignalRNetworkACLs
type SignalRNetworkACLs struct {
	//DefaultAction: Default action when no other rule matches.
	DefaultAction *SignalRNetworkACLsDefaultAction `json:"defaultAction,omitempty"`

	//PrivateEndpoints: ACLs for requests from private endpoints
	PrivateEndpoints []PrivateEndpointACL `json:"privateEndpoints,omitempty"`

	//PublicNetwork: Network ACL
	PublicNetwork *NetworkACL `json:"publicNetwork,omitempty"`
}

var _ genruntime.ARMTransformer = &SignalRNetworkACLs{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (signalRNetworkACLs *SignalRNetworkACLs) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if signalRNetworkACLs == nil {
		return nil, nil
	}
	var result SignalRNetworkACLsARM

	// Set property ‘DefaultAction’:
	if signalRNetworkACLs.DefaultAction != nil {
		defaultAction := *signalRNetworkACLs.DefaultAction
		result.DefaultAction = &defaultAction
	}

	// Set property ‘PrivateEndpoints’:
	for _, item := range signalRNetworkACLs.PrivateEndpoints {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.PrivateEndpoints = append(result.PrivateEndpoints, itemARM.(PrivateEndpointACLARM))
	}

	// Set property ‘PublicNetwork’:
	if signalRNetworkACLs.PublicNetwork != nil {
		publicNetworkARM, err := (*signalRNetworkACLs.PublicNetwork).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		publicNetwork := publicNetworkARM.(NetworkACLARM)
		result.PublicNetwork = &publicNetwork
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRNetworkACLs *SignalRNetworkACLs) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRNetworkACLsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRNetworkACLs *SignalRNetworkACLs) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRNetworkACLsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRNetworkACLsARM, got %T", armInput)
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		signalRNetworkACLs.DefaultAction = &defaultAction
	}

	// Set property ‘PrivateEndpoints’:
	for _, item := range typedInput.PrivateEndpoints {
		var item1 PrivateEndpointACL
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		signalRNetworkACLs.PrivateEndpoints = append(signalRNetworkACLs.PrivateEndpoints, item1)
	}

	// Set property ‘PublicNetwork’:
	if typedInput.PublicNetwork != nil {
		var publicNetwork1 NetworkACL
		err := publicNetwork1.PopulateFromARM(owner, *typedInput.PublicNetwork)
		if err != nil {
			return err
		}
		publicNetwork := publicNetwork1
		signalRNetworkACLs.PublicNetwork = &publicNetwork
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRNetworkACLs populates our SignalRNetworkACLs from the provided source SignalRNetworkACLs
func (signalRNetworkACLs *SignalRNetworkACLs) AssignPropertiesFromSignalRNetworkACLs(source *v1alpha1api20211001storage.SignalRNetworkACLs) error {

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := SignalRNetworkACLsDefaultAction(*source.DefaultAction)
		signalRNetworkACLs.DefaultAction = &defaultAction
	} else {
		signalRNetworkACLs.DefaultAction = nil
	}

	// PrivateEndpoints
	if source.PrivateEndpoints != nil {
		privateEndpointList := make([]PrivateEndpointACL, len(source.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range source.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint PrivateEndpointACL
			err := privateEndpoint.AssignPropertiesFromPrivateEndpointACL(&privateEndpointItem)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpoints from PrivateEndpoints, calling AssignPropertiesFromPrivateEndpointACL()")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		signalRNetworkACLs.PrivateEndpoints = privateEndpointList
	} else {
		signalRNetworkACLs.PrivateEndpoints = nil
	}

	// PublicNetwork
	if source.PublicNetwork != nil {
		var publicNetwork NetworkACL
		err := publicNetwork.AssignPropertiesFromNetworkACL(source.PublicNetwork)
		if err != nil {
			return errors.Wrap(err, "populating PublicNetwork from PublicNetwork, calling AssignPropertiesFromNetworkACL()")
		}
		signalRNetworkACLs.PublicNetwork = &publicNetwork
	} else {
		signalRNetworkACLs.PublicNetwork = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRNetworkACLs populates the provided destination SignalRNetworkACLs from our SignalRNetworkACLs
func (signalRNetworkACLs *SignalRNetworkACLs) AssignPropertiesToSignalRNetworkACLs(destination *v1alpha1api20211001storage.SignalRNetworkACLs) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultAction
	if signalRNetworkACLs.DefaultAction != nil {
		defaultAction := string(*signalRNetworkACLs.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// PrivateEndpoints
	if signalRNetworkACLs.PrivateEndpoints != nil {
		privateEndpointList := make([]v1alpha1api20211001storage.PrivateEndpointACL, len(signalRNetworkACLs.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range signalRNetworkACLs.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint v1alpha1api20211001storage.PrivateEndpointACL
			err := privateEndpointItem.AssignPropertiesToPrivateEndpointACL(&privateEndpoint)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpoints from PrivateEndpoints, calling AssignPropertiesToPrivateEndpointACL()")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		destination.PrivateEndpoints = privateEndpointList
	} else {
		destination.PrivateEndpoints = nil
	}

	// PublicNetwork
	if signalRNetworkACLs.PublicNetwork != nil {
		var publicNetwork v1alpha1api20211001storage.NetworkACL
		err := (*signalRNetworkACLs.PublicNetwork).AssignPropertiesToNetworkACL(&publicNetwork)
		if err != nil {
			return errors.Wrap(err, "populating PublicNetwork from PublicNetwork, calling AssignPropertiesToNetworkACL()")
		}
		destination.PublicNetwork = &publicNetwork
	} else {
		destination.PublicNetwork = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SignalRNetworkACLs_Status struct {
	//DefaultAction: Default action when no other rule matches
	DefaultAction *ACLAction_Status `json:"defaultAction,omitempty"`

	//PrivateEndpoints: ACLs for requests from private endpoints
	PrivateEndpoints []PrivateEndpointACL_Status `json:"privateEndpoints,omitempty"`

	//PublicNetwork: ACL for requests from public network
	PublicNetwork *NetworkACL_Status `json:"publicNetwork,omitempty"`
}

var _ genruntime.FromARMConverter = &SignalRNetworkACLs_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRNetworkACLsStatus *SignalRNetworkACLs_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRNetworkACLs_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRNetworkACLsStatus *SignalRNetworkACLs_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRNetworkACLs_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRNetworkACLs_StatusARM, got %T", armInput)
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		signalRNetworkACLsStatus.DefaultAction = &defaultAction
	}

	// Set property ‘PrivateEndpoints’:
	for _, item := range typedInput.PrivateEndpoints {
		var item1 PrivateEndpointACL_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		signalRNetworkACLsStatus.PrivateEndpoints = append(signalRNetworkACLsStatus.PrivateEndpoints, item1)
	}

	// Set property ‘PublicNetwork’:
	if typedInput.PublicNetwork != nil {
		var publicNetwork1 NetworkACL_Status
		err := publicNetwork1.PopulateFromARM(owner, *typedInput.PublicNetwork)
		if err != nil {
			return err
		}
		publicNetwork := publicNetwork1
		signalRNetworkACLsStatus.PublicNetwork = &publicNetwork
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRNetworkACLsStatus populates our SignalRNetworkACLs_Status from the provided source SignalRNetworkACLs_Status
func (signalRNetworkACLsStatus *SignalRNetworkACLs_Status) AssignPropertiesFromSignalRNetworkACLsStatus(source *v1alpha1api20211001storage.SignalRNetworkACLs_Status) error {

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := ACLAction_Status(*source.DefaultAction)
		signalRNetworkACLsStatus.DefaultAction = &defaultAction
	} else {
		signalRNetworkACLsStatus.DefaultAction = nil
	}

	// PrivateEndpoints
	if source.PrivateEndpoints != nil {
		privateEndpointList := make([]PrivateEndpointACL_Status, len(source.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range source.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint PrivateEndpointACL_Status
			err := privateEndpoint.AssignPropertiesFromPrivateEndpointACLStatus(&privateEndpointItem)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpoints from PrivateEndpoints, calling AssignPropertiesFromPrivateEndpointACLStatus()")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		signalRNetworkACLsStatus.PrivateEndpoints = privateEndpointList
	} else {
		signalRNetworkACLsStatus.PrivateEndpoints = nil
	}

	// PublicNetwork
	if source.PublicNetwork != nil {
		var publicNetwork NetworkACL_Status
		err := publicNetwork.AssignPropertiesFromNetworkACLStatus(source.PublicNetwork)
		if err != nil {
			return errors.Wrap(err, "populating PublicNetwork from PublicNetwork, calling AssignPropertiesFromNetworkACLStatus()")
		}
		signalRNetworkACLsStatus.PublicNetwork = &publicNetwork
	} else {
		signalRNetworkACLsStatus.PublicNetwork = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRNetworkACLsStatus populates the provided destination SignalRNetworkACLs_Status from our SignalRNetworkACLs_Status
func (signalRNetworkACLsStatus *SignalRNetworkACLs_Status) AssignPropertiesToSignalRNetworkACLsStatus(destination *v1alpha1api20211001storage.SignalRNetworkACLs_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultAction
	if signalRNetworkACLsStatus.DefaultAction != nil {
		defaultAction := string(*signalRNetworkACLsStatus.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// PrivateEndpoints
	if signalRNetworkACLsStatus.PrivateEndpoints != nil {
		privateEndpointList := make([]v1alpha1api20211001storage.PrivateEndpointACL_Status, len(signalRNetworkACLsStatus.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range signalRNetworkACLsStatus.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint v1alpha1api20211001storage.PrivateEndpointACL_Status
			err := privateEndpointItem.AssignPropertiesToPrivateEndpointACLStatus(&privateEndpoint)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpoints from PrivateEndpoints, calling AssignPropertiesToPrivateEndpointACLStatus()")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		destination.PrivateEndpoints = privateEndpointList
	} else {
		destination.PrivateEndpoints = nil
	}

	// PublicNetwork
	if signalRNetworkACLsStatus.PublicNetwork != nil {
		var publicNetwork v1alpha1api20211001storage.NetworkACL_Status
		err := (*signalRNetworkACLsStatus.PublicNetwork).AssignPropertiesToNetworkACLStatus(&publicNetwork)
		if err != nil {
			return errors.Wrap(err, "populating PublicNetwork from PublicNetwork, calling AssignPropertiesToNetworkACLStatus()")
		}
		destination.PublicNetwork = &publicNetwork
	} else {
		destination.PublicNetwork = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/SignalRTlsSettings
type SignalRTlsSettings struct {
	//ClientCertEnabled: Request client certificate during TLS handshake if enabled
	ClientCertEnabled *bool `json:"clientCertEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &SignalRTlsSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (signalRTlsSettings *SignalRTlsSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if signalRTlsSettings == nil {
		return nil, nil
	}
	var result SignalRTlsSettingsARM

	// Set property ‘ClientCertEnabled’:
	if signalRTlsSettings.ClientCertEnabled != nil {
		clientCertEnabled := *signalRTlsSettings.ClientCertEnabled
		result.ClientCertEnabled = &clientCertEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRTlsSettings *SignalRTlsSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRTlsSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRTlsSettings *SignalRTlsSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRTlsSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRTlsSettingsARM, got %T", armInput)
	}

	// Set property ‘ClientCertEnabled’:
	if typedInput.ClientCertEnabled != nil {
		clientCertEnabled := *typedInput.ClientCertEnabled
		signalRTlsSettings.ClientCertEnabled = &clientCertEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRTlsSettings populates our SignalRTlsSettings from the provided source SignalRTlsSettings
func (signalRTlsSettings *SignalRTlsSettings) AssignPropertiesFromSignalRTlsSettings(source *v1alpha1api20211001storage.SignalRTlsSettings) error {

	// ClientCertEnabled
	if source.ClientCertEnabled != nil {
		clientCertEnabled := *source.ClientCertEnabled
		signalRTlsSettings.ClientCertEnabled = &clientCertEnabled
	} else {
		signalRTlsSettings.ClientCertEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRTlsSettings populates the provided destination SignalRTlsSettings from our SignalRTlsSettings
func (signalRTlsSettings *SignalRTlsSettings) AssignPropertiesToSignalRTlsSettings(destination *v1alpha1api20211001storage.SignalRTlsSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientCertEnabled
	if signalRTlsSettings.ClientCertEnabled != nil {
		clientCertEnabled := *signalRTlsSettings.ClientCertEnabled
		destination.ClientCertEnabled = &clientCertEnabled
	} else {
		destination.ClientCertEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SignalRTlsSettings_Status struct {
	//ClientCertEnabled: Request client certificate during TLS handshake if enabled
	ClientCertEnabled *bool `json:"clientCertEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &SignalRTlsSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalRTlsSettingsStatus *SignalRTlsSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRTlsSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalRTlsSettingsStatus *SignalRTlsSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRTlsSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRTlsSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientCertEnabled’:
	if typedInput.ClientCertEnabled != nil {
		clientCertEnabled := *typedInput.ClientCertEnabled
		signalRTlsSettingsStatus.ClientCertEnabled = &clientCertEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRTlsSettingsStatus populates our SignalRTlsSettings_Status from the provided source SignalRTlsSettings_Status
func (signalRTlsSettingsStatus *SignalRTlsSettings_Status) AssignPropertiesFromSignalRTlsSettingsStatus(source *v1alpha1api20211001storage.SignalRTlsSettings_Status) error {

	// ClientCertEnabled
	if source.ClientCertEnabled != nil {
		clientCertEnabled := *source.ClientCertEnabled
		signalRTlsSettingsStatus.ClientCertEnabled = &clientCertEnabled
	} else {
		signalRTlsSettingsStatus.ClientCertEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRTlsSettingsStatus populates the provided destination SignalRTlsSettings_Status from our SignalRTlsSettings_Status
func (signalRTlsSettingsStatus *SignalRTlsSettings_Status) AssignPropertiesToSignalRTlsSettingsStatus(destination *v1alpha1api20211001storage.SignalRTlsSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientCertEnabled
	if signalRTlsSettingsStatus.ClientCertEnabled != nil {
		clientCertEnabled := *signalRTlsSettingsStatus.ClientCertEnabled
		destination.ClientCertEnabled = &clientCertEnabled
	} else {
		destination.ClientCertEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_Status struct {
	//CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	//CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	//CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemDataStatusCreatedByType `json:"createdByType,omitempty"`

	//LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	//LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	//LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemDataStatusLastModifiedByType `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (systemDataStatus *SystemData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (systemDataStatus *SystemData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		systemDataStatus.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		systemDataStatus.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		systemDataStatus.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		systemDataStatus.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		systemDataStatus.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		systemDataStatus.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemDataStatus populates our SystemData_Status from the provided source SystemData_Status
func (systemDataStatus *SystemData_Status) AssignPropertiesFromSystemDataStatus(source *v1alpha1api20211001storage.SystemData_Status) error {

	// CreatedAt
	systemDataStatus.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	systemDataStatus.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemDataStatusCreatedByType(*source.CreatedByType)
		systemDataStatus.CreatedByType = &createdByType
	} else {
		systemDataStatus.CreatedByType = nil
	}

	// LastModifiedAt
	systemDataStatus.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	systemDataStatus.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemDataStatusLastModifiedByType(*source.LastModifiedByType)
		systemDataStatus.LastModifiedByType = &lastModifiedByType
	} else {
		systemDataStatus.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemDataStatus populates the provided destination SystemData_Status from our SystemData_Status
func (systemDataStatus *SystemData_Status) AssignPropertiesToSystemDataStatus(destination *v1alpha1api20211001storage.SystemData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(systemDataStatus.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(systemDataStatus.CreatedBy)

	// CreatedByType
	if systemDataStatus.CreatedByType != nil {
		createdByType := string(*systemDataStatus.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(systemDataStatus.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(systemDataStatus.LastModifiedBy)

	// LastModifiedByType
	if systemDataStatus.LastModifiedByType != nil {
		lastModifiedByType := string(*systemDataStatus.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ACLAction_Status string

const (
	ACLAction_StatusAllow = ACLAction_Status("Allow")
	ACLAction_StatusDeny  = ACLAction_Status("Deny")
)

type FeatureFlags_Status string

const (
	FeatureFlags_StatusEnableConnectivityLogs = FeatureFlags_Status("EnableConnectivityLogs")
	FeatureFlags_StatusEnableLiveTrace        = FeatureFlags_Status("EnableLiveTrace")
	FeatureFlags_StatusEnableMessagingLogs    = FeatureFlags_Status("EnableMessagingLogs")
	FeatureFlags_StatusServiceMode            = FeatureFlags_Status("ServiceMode")
)

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/NetworkACL
type NetworkACL struct {
	//Allow: Allowed request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Allow []NetworkACLAllow `json:"allow,omitempty"`

	//Deny: Denied request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Deny []NetworkACLDeny `json:"deny,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkACL{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (networkACL *NetworkACL) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if networkACL == nil {
		return nil, nil
	}
	var result NetworkACLARM

	// Set property ‘Allow’:
	for _, item := range networkACL.Allow {
		result.Allow = append(result.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range networkACL.Deny {
		result.Deny = append(result.Deny, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkACL *NetworkACL) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkACLARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkACL *NetworkACL) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkACLARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkACLARM, got %T", armInput)
	}

	// Set property ‘Allow’:
	for _, item := range typedInput.Allow {
		networkACL.Allow = append(networkACL.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range typedInput.Deny {
		networkACL.Deny = append(networkACL.Deny, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkACL populates our NetworkACL from the provided source NetworkACL
func (networkACL *NetworkACL) AssignPropertiesFromNetworkACL(source *v1alpha1api20211001storage.NetworkACL) error {

	// Allow
	if source.Allow != nil {
		allowList := make([]NetworkACLAllow, len(source.Allow))
		for allowIndex, allowItem := range source.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = NetworkACLAllow(allowItem)
		}
		networkACL.Allow = allowList
	} else {
		networkACL.Allow = nil
	}

	// Deny
	if source.Deny != nil {
		denyList := make([]NetworkACLDeny, len(source.Deny))
		for denyIndex, denyItem := range source.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = NetworkACLDeny(denyItem)
		}
		networkACL.Deny = denyList
	} else {
		networkACL.Deny = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkACL populates the provided destination NetworkACL from our NetworkACL
func (networkACL *NetworkACL) AssignPropertiesToNetworkACL(destination *v1alpha1api20211001storage.NetworkACL) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Allow
	if networkACL.Allow != nil {
		allowList := make([]string, len(networkACL.Allow))
		for allowIndex, allowItem := range networkACL.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = string(allowItem)
		}
		destination.Allow = allowList
	} else {
		destination.Allow = nil
	}

	// Deny
	if networkACL.Deny != nil {
		denyList := make([]string, len(networkACL.Deny))
		for denyIndex, denyItem := range networkACL.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = string(denyItem)
		}
		destination.Deny = denyList
	} else {
		destination.Deny = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkACL_Status struct {
	//Allow: Allowed request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Allow []SignalRRequestType_Status `json:"allow,omitempty"`

	//Deny: Denied request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Deny []SignalRRequestType_Status `json:"deny,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkACL_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkACLStatus *NetworkACL_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkACL_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkACLStatus *NetworkACL_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkACL_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkACL_StatusARM, got %T", armInput)
	}

	// Set property ‘Allow’:
	for _, item := range typedInput.Allow {
		networkACLStatus.Allow = append(networkACLStatus.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range typedInput.Deny {
		networkACLStatus.Deny = append(networkACLStatus.Deny, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkACLStatus populates our NetworkACL_Status from the provided source NetworkACL_Status
func (networkACLStatus *NetworkACL_Status) AssignPropertiesFromNetworkACLStatus(source *v1alpha1api20211001storage.NetworkACL_Status) error {

	// Allow
	if source.Allow != nil {
		allowList := make([]SignalRRequestType_Status, len(source.Allow))
		for allowIndex, allowItem := range source.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = SignalRRequestType_Status(allowItem)
		}
		networkACLStatus.Allow = allowList
	} else {
		networkACLStatus.Allow = nil
	}

	// Deny
	if source.Deny != nil {
		denyList := make([]SignalRRequestType_Status, len(source.Deny))
		for denyIndex, denyItem := range source.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = SignalRRequestType_Status(denyItem)
		}
		networkACLStatus.Deny = denyList
	} else {
		networkACLStatus.Deny = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkACLStatus populates the provided destination NetworkACL_Status from our NetworkACL_Status
func (networkACLStatus *NetworkACL_Status) AssignPropertiesToNetworkACLStatus(destination *v1alpha1api20211001storage.NetworkACL_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Allow
	if networkACLStatus.Allow != nil {
		allowList := make([]string, len(networkACLStatus.Allow))
		for allowIndex, allowItem := range networkACLStatus.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = string(allowItem)
		}
		destination.Allow = allowList
	} else {
		destination.Allow = nil
	}

	// Deny
	if networkACLStatus.Deny != nil {
		denyList := make([]string, len(networkACLStatus.Deny))
		for denyIndex, denyItem := range networkACLStatus.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = string(denyItem)
		}
		destination.Deny = denyList
	} else {
		destination.Deny = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/PrivateEndpointACL
type PrivateEndpointACL struct {
	//Allow: Allowed request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Allow []PrivateEndpointACLAllow `json:"allow,omitempty"`

	//Deny: Denied request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Deny []PrivateEndpointACLDeny `json:"deny,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the private endpoint connection
	Name string `json:"name"`
}

var _ genruntime.ARMTransformer = &PrivateEndpointACL{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (privateEndpointACL *PrivateEndpointACL) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if privateEndpointACL == nil {
		return nil, nil
	}
	var result PrivateEndpointACLARM

	// Set property ‘Allow’:
	for _, item := range privateEndpointACL.Allow {
		result.Allow = append(result.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range privateEndpointACL.Deny {
		result.Deny = append(result.Deny, item)
	}

	// Set property ‘Name’:
	result.Name = privateEndpointACL.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointACL *PrivateEndpointACL) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointACLARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointACL *PrivateEndpointACL) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointACLARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointACLARM, got %T", armInput)
	}

	// Set property ‘Allow’:
	for _, item := range typedInput.Allow {
		privateEndpointACL.Allow = append(privateEndpointACL.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range typedInput.Deny {
		privateEndpointACL.Deny = append(privateEndpointACL.Deny, item)
	}

	// Set property ‘Name’:
	privateEndpointACL.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointACL populates our PrivateEndpointACL from the provided source PrivateEndpointACL
func (privateEndpointACL *PrivateEndpointACL) AssignPropertiesFromPrivateEndpointACL(source *v1alpha1api20211001storage.PrivateEndpointACL) error {

	// Allow
	if source.Allow != nil {
		allowList := make([]PrivateEndpointACLAllow, len(source.Allow))
		for allowIndex, allowItem := range source.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = PrivateEndpointACLAllow(allowItem)
		}
		privateEndpointACL.Allow = allowList
	} else {
		privateEndpointACL.Allow = nil
	}

	// Deny
	if source.Deny != nil {
		denyList := make([]PrivateEndpointACLDeny, len(source.Deny))
		for denyIndex, denyItem := range source.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = PrivateEndpointACLDeny(denyItem)
		}
		privateEndpointACL.Deny = denyList
	} else {
		privateEndpointACL.Deny = nil
	}

	// Name
	privateEndpointACL.Name = genruntime.GetOptionalStringValue(source.Name)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointACL populates the provided destination PrivateEndpointACL from our PrivateEndpointACL
func (privateEndpointACL *PrivateEndpointACL) AssignPropertiesToPrivateEndpointACL(destination *v1alpha1api20211001storage.PrivateEndpointACL) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Allow
	if privateEndpointACL.Allow != nil {
		allowList := make([]string, len(privateEndpointACL.Allow))
		for allowIndex, allowItem := range privateEndpointACL.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = string(allowItem)
		}
		destination.Allow = allowList
	} else {
		destination.Allow = nil
	}

	// Deny
	if privateEndpointACL.Deny != nil {
		denyList := make([]string, len(privateEndpointACL.Deny))
		for denyIndex, denyItem := range privateEndpointACL.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = string(denyItem)
		}
		destination.Deny = denyList
	} else {
		destination.Deny = nil
	}

	// Name
	name := privateEndpointACL.Name
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointACL_Status struct {
	//Allow: Allowed request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Allow []SignalRRequestType_Status `json:"allow,omitempty"`

	//Deny: Denied request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Deny []SignalRRequestType_Status `json:"deny,omitempty"`

	// +kubebuilder:validation:Required
	//Name: Name of the private endpoint connection
	Name string `json:"name"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointACL_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointACLStatus *PrivateEndpointACL_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointACL_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointACLStatus *PrivateEndpointACL_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointACL_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointACL_StatusARM, got %T", armInput)
	}

	// Set property ‘Allow’:
	for _, item := range typedInput.Allow {
		privateEndpointACLStatus.Allow = append(privateEndpointACLStatus.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range typedInput.Deny {
		privateEndpointACLStatus.Deny = append(privateEndpointACLStatus.Deny, item)
	}

	// Set property ‘Name’:
	privateEndpointACLStatus.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointACLStatus populates our PrivateEndpointACL_Status from the provided source PrivateEndpointACL_Status
func (privateEndpointACLStatus *PrivateEndpointACL_Status) AssignPropertiesFromPrivateEndpointACLStatus(source *v1alpha1api20211001storage.PrivateEndpointACL_Status) error {

	// Allow
	if source.Allow != nil {
		allowList := make([]SignalRRequestType_Status, len(source.Allow))
		for allowIndex, allowItem := range source.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = SignalRRequestType_Status(allowItem)
		}
		privateEndpointACLStatus.Allow = allowList
	} else {
		privateEndpointACLStatus.Allow = nil
	}

	// Deny
	if source.Deny != nil {
		denyList := make([]SignalRRequestType_Status, len(source.Deny))
		for denyIndex, denyItem := range source.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = SignalRRequestType_Status(denyItem)
		}
		privateEndpointACLStatus.Deny = denyList
	} else {
		privateEndpointACLStatus.Deny = nil
	}

	// Name
	privateEndpointACLStatus.Name = genruntime.GetOptionalStringValue(source.Name)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointACLStatus populates the provided destination PrivateEndpointACL_Status from our PrivateEndpointACL_Status
func (privateEndpointACLStatus *PrivateEndpointACL_Status) AssignPropertiesToPrivateEndpointACLStatus(destination *v1alpha1api20211001storage.PrivateEndpointACL_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Allow
	if privateEndpointACLStatus.Allow != nil {
		allowList := make([]string, len(privateEndpointACLStatus.Allow))
		for allowIndex, allowItem := range privateEndpointACLStatus.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = string(allowItem)
		}
		destination.Allow = allowList
	} else {
		destination.Allow = nil
	}

	// Deny
	if privateEndpointACLStatus.Deny != nil {
		denyList := make([]string, len(privateEndpointACLStatus.Deny))
		for denyIndex, denyItem := range privateEndpointACLStatus.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = string(denyItem)
		}
		destination.Deny = denyList
	} else {
		destination.Deny = nil
	}

	// Name
	name := privateEndpointACLStatus.Name
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ResourceLogCategory
type ResourceLogCategory struct {
	//Enabled: Indicates whether or the resource log category is enabled.
	//Available values: true, false.
	//Case insensitive.
	Enabled *string `json:"enabled,omitempty"`

	//Name: Gets or sets the resource log category's name.
	//Available values: ConnectivityLogs, MessagingLogs.
	//Case insensitive.
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceLogCategory{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resourceLogCategory *ResourceLogCategory) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resourceLogCategory == nil {
		return nil, nil
	}
	var result ResourceLogCategoryARM

	// Set property ‘Enabled’:
	if resourceLogCategory.Enabled != nil {
		enabled := *resourceLogCategory.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘Name’:
	if resourceLogCategory.Name != nil {
		name := *resourceLogCategory.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceLogCategory *ResourceLogCategory) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceLogCategoryARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceLogCategory *ResourceLogCategory) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceLogCategoryARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceLogCategoryARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		resourceLogCategory.Enabled = &enabled
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		resourceLogCategory.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceLogCategory populates our ResourceLogCategory from the provided source ResourceLogCategory
func (resourceLogCategory *ResourceLogCategory) AssignPropertiesFromResourceLogCategory(source *v1alpha1api20211001storage.ResourceLogCategory) error {

	// Enabled
	resourceLogCategory.Enabled = genruntime.ClonePointerToString(source.Enabled)

	// Name
	resourceLogCategory.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToResourceLogCategory populates the provided destination ResourceLogCategory from our ResourceLogCategory
func (resourceLogCategory *ResourceLogCategory) AssignPropertiesToResourceLogCategory(destination *v1alpha1api20211001storage.ResourceLogCategory) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	destination.Enabled = genruntime.ClonePointerToString(resourceLogCategory.Enabled)

	// Name
	destination.Name = genruntime.ClonePointerToString(resourceLogCategory.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceLogCategory_Status struct {
	//Enabled: Indicates whether or the resource log category is enabled.
	//Available values: true, false.
	//Case insensitive.
	Enabled *string `json:"enabled,omitempty"`

	//Name: Gets or sets the resource log category's name.
	//Available values: ConnectivityLogs, MessagingLogs.
	//Case insensitive.
	Name *string `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceLogCategory_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceLogCategoryStatus *ResourceLogCategory_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceLogCategory_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceLogCategoryStatus *ResourceLogCategory_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceLogCategory_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceLogCategory_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		resourceLogCategoryStatus.Enabled = &enabled
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		resourceLogCategoryStatus.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceLogCategoryStatus populates our ResourceLogCategory_Status from the provided source ResourceLogCategory_Status
func (resourceLogCategoryStatus *ResourceLogCategory_Status) AssignPropertiesFromResourceLogCategoryStatus(source *v1alpha1api20211001storage.ResourceLogCategory_Status) error {

	// Enabled
	resourceLogCategoryStatus.Enabled = genruntime.ClonePointerToString(source.Enabled)

	// Name
	resourceLogCategoryStatus.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToResourceLogCategoryStatus populates the provided destination ResourceLogCategory_Status from our ResourceLogCategory_Status
func (resourceLogCategoryStatus *ResourceLogCategory_Status) AssignPropertiesToResourceLogCategoryStatus(destination *v1alpha1api20211001storage.ResourceLogCategory_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	destination.Enabled = genruntime.ClonePointerToString(resourceLogCategoryStatus.Enabled)

	// Name
	destination.Name = genruntime.ClonePointerToString(resourceLogCategoryStatus.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"EnableConnectivityLogs","EnableLiveTrace","EnableMessagingLogs","ServiceMode"}
type SignalRFeatureFlag string

const (
	SignalRFeatureFlagEnableConnectivityLogs = SignalRFeatureFlag("EnableConnectivityLogs")
	SignalRFeatureFlagEnableLiveTrace        = SignalRFeatureFlag("EnableLiveTrace")
	SignalRFeatureFlagEnableMessagingLogs    = SignalRFeatureFlag("EnableMessagingLogs")
	SignalRFeatureFlagServiceMode            = SignalRFeatureFlag("ServiceMode")
)

// +kubebuilder:validation:Enum={"Allow","Deny"}
type SignalRNetworkACLsDefaultAction string

const (
	SignalRNetworkACLsDefaultActionAllow = SignalRNetworkACLsDefaultAction("Allow")
	SignalRNetworkACLsDefaultActionDeny  = SignalRNetworkACLsDefaultAction("Deny")
)

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/UpstreamTemplate
type UpstreamTemplate struct {
	//Auth: Upstream auth settings.
	Auth *UpstreamAuthSettings `json:"auth,omitempty"`

	//CategoryPattern: Gets or sets the matching pattern for category names. If not
	//set, it matches any category.
	//There are 3 kind of patterns supported:
	//1. "*", it to matches any category name
	//2. Combine multiple categories with ",", for example "connections,messages", it
	//matches category "connections" and "messages"
	//3. The single category name, for example, "connections", it matches the category
	//"connections"
	CategoryPattern *string `json:"categoryPattern,omitempty"`

	//EventPattern: Gets or sets the matching pattern for event names. If not set, it
	//matches any event.
	//There are 3 kind of patterns supported:
	//1. "*", it to matches any event name
	//2. Combine multiple events with ",", for example "connect,disconnect", it
	//matches event "connect" and "disconnect"
	//3. The single event name, for example, "connect", it matches "connect"
	EventPattern *string `json:"eventPattern,omitempty"`

	//HubPattern: Gets or sets the matching pattern for hub names. If not set, it
	//matches any hub.
	//There are 3 kind of patterns supported:
	//1. "*", it to matches any hub name
	//2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1"
	//and "hub2"
	//3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern *string `json:"hubPattern,omitempty"`

	// +kubebuilder:validation:Required
	//UrlTemplate: Gets or sets the Upstream URL template. You can use 3 predefined
	//parameters {hub}, {category} {event} inside the template, the value of the
	//Upstream URL is dynamically calculated when the client request comes in.
	//For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with
	//a client request from hub `chat` connects, it will first POST to this URL:
	//`http://example.com/chat/api/connect`.
	UrlTemplate string `json:"urlTemplate"`
}

var _ genruntime.ARMTransformer = &UpstreamTemplate{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (upstreamTemplate *UpstreamTemplate) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if upstreamTemplate == nil {
		return nil, nil
	}
	var result UpstreamTemplateARM

	// Set property ‘Auth’:
	if upstreamTemplate.Auth != nil {
		authARM, err := (*upstreamTemplate.Auth).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		auth := authARM.(UpstreamAuthSettingsARM)
		result.Auth = &auth
	}

	// Set property ‘CategoryPattern’:
	if upstreamTemplate.CategoryPattern != nil {
		categoryPattern := *upstreamTemplate.CategoryPattern
		result.CategoryPattern = &categoryPattern
	}

	// Set property ‘EventPattern’:
	if upstreamTemplate.EventPattern != nil {
		eventPattern := *upstreamTemplate.EventPattern
		result.EventPattern = &eventPattern
	}

	// Set property ‘HubPattern’:
	if upstreamTemplate.HubPattern != nil {
		hubPattern := *upstreamTemplate.HubPattern
		result.HubPattern = &hubPattern
	}

	// Set property ‘UrlTemplate’:
	result.UrlTemplate = upstreamTemplate.UrlTemplate
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (upstreamTemplate *UpstreamTemplate) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpstreamTemplateARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (upstreamTemplate *UpstreamTemplate) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpstreamTemplateARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpstreamTemplateARM, got %T", armInput)
	}

	// Set property ‘Auth’:
	if typedInput.Auth != nil {
		var auth1 UpstreamAuthSettings
		err := auth1.PopulateFromARM(owner, *typedInput.Auth)
		if err != nil {
			return err
		}
		auth := auth1
		upstreamTemplate.Auth = &auth
	}

	// Set property ‘CategoryPattern’:
	if typedInput.CategoryPattern != nil {
		categoryPattern := *typedInput.CategoryPattern
		upstreamTemplate.CategoryPattern = &categoryPattern
	}

	// Set property ‘EventPattern’:
	if typedInput.EventPattern != nil {
		eventPattern := *typedInput.EventPattern
		upstreamTemplate.EventPattern = &eventPattern
	}

	// Set property ‘HubPattern’:
	if typedInput.HubPattern != nil {
		hubPattern := *typedInput.HubPattern
		upstreamTemplate.HubPattern = &hubPattern
	}

	// Set property ‘UrlTemplate’:
	upstreamTemplate.UrlTemplate = typedInput.UrlTemplate

	// No error
	return nil
}

// AssignPropertiesFromUpstreamTemplate populates our UpstreamTemplate from the provided source UpstreamTemplate
func (upstreamTemplate *UpstreamTemplate) AssignPropertiesFromUpstreamTemplate(source *v1alpha1api20211001storage.UpstreamTemplate) error {

	// Auth
	if source.Auth != nil {
		var auth UpstreamAuthSettings
		err := auth.AssignPropertiesFromUpstreamAuthSettings(source.Auth)
		if err != nil {
			return errors.Wrap(err, "populating Auth from Auth, calling AssignPropertiesFromUpstreamAuthSettings()")
		}
		upstreamTemplate.Auth = &auth
	} else {
		upstreamTemplate.Auth = nil
	}

	// CategoryPattern
	upstreamTemplate.CategoryPattern = genruntime.ClonePointerToString(source.CategoryPattern)

	// EventPattern
	upstreamTemplate.EventPattern = genruntime.ClonePointerToString(source.EventPattern)

	// HubPattern
	upstreamTemplate.HubPattern = genruntime.ClonePointerToString(source.HubPattern)

	// UrlTemplate
	upstreamTemplate.UrlTemplate = genruntime.GetOptionalStringValue(source.UrlTemplate)

	// No error
	return nil
}

// AssignPropertiesToUpstreamTemplate populates the provided destination UpstreamTemplate from our UpstreamTemplate
func (upstreamTemplate *UpstreamTemplate) AssignPropertiesToUpstreamTemplate(destination *v1alpha1api20211001storage.UpstreamTemplate) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Auth
	if upstreamTemplate.Auth != nil {
		var auth v1alpha1api20211001storage.UpstreamAuthSettings
		err := (*upstreamTemplate.Auth).AssignPropertiesToUpstreamAuthSettings(&auth)
		if err != nil {
			return errors.Wrap(err, "populating Auth from Auth, calling AssignPropertiesToUpstreamAuthSettings()")
		}
		destination.Auth = &auth
	} else {
		destination.Auth = nil
	}

	// CategoryPattern
	destination.CategoryPattern = genruntime.ClonePointerToString(upstreamTemplate.CategoryPattern)

	// EventPattern
	destination.EventPattern = genruntime.ClonePointerToString(upstreamTemplate.EventPattern)

	// HubPattern
	destination.HubPattern = genruntime.ClonePointerToString(upstreamTemplate.HubPattern)

	// UrlTemplate
	urlTemplate := upstreamTemplate.UrlTemplate
	destination.UrlTemplate = &urlTemplate

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UpstreamTemplate_Status struct {
	//Auth: Gets or sets the auth settings for an upstream. If not set, no auth is
	//used for upstream messages.
	Auth *UpstreamAuthSettings_Status `json:"auth,omitempty"`

	//CategoryPattern: Gets or sets the matching pattern for category names. If not
	//set, it matches any category.
	//There are 3 kind of patterns supported:
	//1. "*", it to matches any category name
	//2. Combine multiple categories with ",", for example "connections,messages", it
	//matches category "connections" and "messages"
	//3. The single category name, for example, "connections", it matches the category
	//"connections"
	CategoryPattern *string `json:"categoryPattern,omitempty"`

	//EventPattern: Gets or sets the matching pattern for event names. If not set, it
	//matches any event.
	//There are 3 kind of patterns supported:
	//1. "*", it to matches any event name
	//2. Combine multiple events with ",", for example "connect,disconnect", it
	//matches event "connect" and "disconnect"
	//3. The single event name, for example, "connect", it matches "connect"
	EventPattern *string `json:"eventPattern,omitempty"`

	//HubPattern: Gets or sets the matching pattern for hub names. If not set, it
	//matches any hub.
	//There are 3 kind of patterns supported:
	//1. "*", it to matches any hub name
	//2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1"
	//and "hub2"
	//3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern *string `json:"hubPattern,omitempty"`

	// +kubebuilder:validation:Required
	//UrlTemplate: Gets or sets the Upstream URL template. You can use 3 predefined
	//parameters {hub}, {category} {event} inside the template, the value of the
	//Upstream URL is dynamically calculated when the client request comes in.
	//For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with
	//a client request from hub `chat` connects, it will first POST to this URL:
	//`http://example.com/chat/api/connect`.
	UrlTemplate string `json:"urlTemplate"`
}

var _ genruntime.FromARMConverter = &UpstreamTemplate_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (upstreamTemplateStatus *UpstreamTemplate_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpstreamTemplate_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (upstreamTemplateStatus *UpstreamTemplate_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpstreamTemplate_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpstreamTemplate_StatusARM, got %T", armInput)
	}

	// Set property ‘Auth’:
	if typedInput.Auth != nil {
		var auth1 UpstreamAuthSettings_Status
		err := auth1.PopulateFromARM(owner, *typedInput.Auth)
		if err != nil {
			return err
		}
		auth := auth1
		upstreamTemplateStatus.Auth = &auth
	}

	// Set property ‘CategoryPattern’:
	if typedInput.CategoryPattern != nil {
		categoryPattern := *typedInput.CategoryPattern
		upstreamTemplateStatus.CategoryPattern = &categoryPattern
	}

	// Set property ‘EventPattern’:
	if typedInput.EventPattern != nil {
		eventPattern := *typedInput.EventPattern
		upstreamTemplateStatus.EventPattern = &eventPattern
	}

	// Set property ‘HubPattern’:
	if typedInput.HubPattern != nil {
		hubPattern := *typedInput.HubPattern
		upstreamTemplateStatus.HubPattern = &hubPattern
	}

	// Set property ‘UrlTemplate’:
	upstreamTemplateStatus.UrlTemplate = typedInput.UrlTemplate

	// No error
	return nil
}

// AssignPropertiesFromUpstreamTemplateStatus populates our UpstreamTemplate_Status from the provided source UpstreamTemplate_Status
func (upstreamTemplateStatus *UpstreamTemplate_Status) AssignPropertiesFromUpstreamTemplateStatus(source *v1alpha1api20211001storage.UpstreamTemplate_Status) error {

	// Auth
	if source.Auth != nil {
		var auth UpstreamAuthSettings_Status
		err := auth.AssignPropertiesFromUpstreamAuthSettingsStatus(source.Auth)
		if err != nil {
			return errors.Wrap(err, "populating Auth from Auth, calling AssignPropertiesFromUpstreamAuthSettingsStatus()")
		}
		upstreamTemplateStatus.Auth = &auth
	} else {
		upstreamTemplateStatus.Auth = nil
	}

	// CategoryPattern
	upstreamTemplateStatus.CategoryPattern = genruntime.ClonePointerToString(source.CategoryPattern)

	// EventPattern
	upstreamTemplateStatus.EventPattern = genruntime.ClonePointerToString(source.EventPattern)

	// HubPattern
	upstreamTemplateStatus.HubPattern = genruntime.ClonePointerToString(source.HubPattern)

	// UrlTemplate
	upstreamTemplateStatus.UrlTemplate = genruntime.GetOptionalStringValue(source.UrlTemplate)

	// No error
	return nil
}

// AssignPropertiesToUpstreamTemplateStatus populates the provided destination UpstreamTemplate_Status from our UpstreamTemplate_Status
func (upstreamTemplateStatus *UpstreamTemplate_Status) AssignPropertiesToUpstreamTemplateStatus(destination *v1alpha1api20211001storage.UpstreamTemplate_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Auth
	if upstreamTemplateStatus.Auth != nil {
		var auth v1alpha1api20211001storage.UpstreamAuthSettings_Status
		err := (*upstreamTemplateStatus.Auth).AssignPropertiesToUpstreamAuthSettingsStatus(&auth)
		if err != nil {
			return errors.Wrap(err, "populating Auth from Auth, calling AssignPropertiesToUpstreamAuthSettingsStatus()")
		}
		destination.Auth = &auth
	} else {
		destination.Auth = nil
	}

	// CategoryPattern
	destination.CategoryPattern = genruntime.ClonePointerToString(upstreamTemplateStatus.CategoryPattern)

	// EventPattern
	destination.EventPattern = genruntime.ClonePointerToString(upstreamTemplateStatus.EventPattern)

	// HubPattern
	destination.HubPattern = genruntime.ClonePointerToString(upstreamTemplateStatus.HubPattern)

	// UrlTemplate
	urlTemplate := upstreamTemplateStatus.UrlTemplate
	destination.UrlTemplate = &urlTemplate

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UserAssignedIdentityProperty_Status struct {
	//ClientId: Get the client id for the user assigned identity
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: Get the principal id for the user assigned identity
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentityProperty_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (userAssignedIdentityPropertyStatus *UserAssignedIdentityProperty_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentityProperty_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (userAssignedIdentityPropertyStatus *UserAssignedIdentityProperty_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentityProperty_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentityProperty_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		userAssignedIdentityPropertyStatus.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		userAssignedIdentityPropertyStatus.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityPropertyStatus populates our UserAssignedIdentityProperty_Status from the provided source UserAssignedIdentityProperty_Status
func (userAssignedIdentityPropertyStatus *UserAssignedIdentityProperty_Status) AssignPropertiesFromUserAssignedIdentityPropertyStatus(source *v1alpha1api20211001storage.UserAssignedIdentityProperty_Status) error {

	// ClientId
	userAssignedIdentityPropertyStatus.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	userAssignedIdentityPropertyStatus.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityPropertyStatus populates the provided destination UserAssignedIdentityProperty_Status from our UserAssignedIdentityProperty_Status
func (userAssignedIdentityPropertyStatus *UserAssignedIdentityProperty_Status) AssignPropertiesToUserAssignedIdentityPropertyStatus(destination *v1alpha1api20211001storage.UserAssignedIdentityProperty_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(userAssignedIdentityPropertyStatus.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(userAssignedIdentityPropertyStatus.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ClientConnection","RESTAPI","ServerConnection","Trace"}
type NetworkACLAllow string

const (
	NetworkACLAllowClientConnection = NetworkACLAllow("ClientConnection")
	NetworkACLAllowRESTAPI          = NetworkACLAllow("RESTAPI")
	NetworkACLAllowServerConnection = NetworkACLAllow("ServerConnection")
	NetworkACLAllowTrace            = NetworkACLAllow("Trace")
)

// +kubebuilder:validation:Enum={"ClientConnection","RESTAPI","ServerConnection","Trace"}
type NetworkACLDeny string

const (
	NetworkACLDenyClientConnection = NetworkACLDeny("ClientConnection")
	NetworkACLDenyRESTAPI          = NetworkACLDeny("RESTAPI")
	NetworkACLDenyServerConnection = NetworkACLDeny("ServerConnection")
	NetworkACLDenyTrace            = NetworkACLDeny("Trace")
)

// +kubebuilder:validation:Enum={"ClientConnection","RESTAPI","ServerConnection","Trace"}
type PrivateEndpointACLAllow string

const (
	PrivateEndpointACLAllowClientConnection = PrivateEndpointACLAllow("ClientConnection")
	PrivateEndpointACLAllowRESTAPI          = PrivateEndpointACLAllow("RESTAPI")
	PrivateEndpointACLAllowServerConnection = PrivateEndpointACLAllow("ServerConnection")
	PrivateEndpointACLAllowTrace            = PrivateEndpointACLAllow("Trace")
)

// +kubebuilder:validation:Enum={"ClientConnection","RESTAPI","ServerConnection","Trace"}
type PrivateEndpointACLDeny string

const (
	PrivateEndpointACLDenyClientConnection = PrivateEndpointACLDeny("ClientConnection")
	PrivateEndpointACLDenyRESTAPI          = PrivateEndpointACLDeny("RESTAPI")
	PrivateEndpointACLDenyServerConnection = PrivateEndpointACLDeny("ServerConnection")
	PrivateEndpointACLDenyTrace            = PrivateEndpointACLDeny("Trace")
)

type SignalRRequestType_Status string

const (
	SignalRRequestType_StatusClientConnection = SignalRRequestType_Status("ClientConnection")
	SignalRRequestType_StatusRESTAPI          = SignalRRequestType_Status("RESTAPI")
	SignalRRequestType_StatusServerConnection = SignalRRequestType_Status("ServerConnection")
	SignalRRequestType_StatusTrace            = SignalRRequestType_Status("Trace")
)

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/UpstreamAuthSettings
type UpstreamAuthSettings struct {
	//ManagedIdentity: Managed identity settings for upstream.
	ManagedIdentity *ManagedIdentitySettings `json:"managedIdentity,omitempty"`

	//Type: Gets or sets the type of auth. None or ManagedIdentity is supported now.
	Type *UpstreamAuthSettingsType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &UpstreamAuthSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (upstreamAuthSettings *UpstreamAuthSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if upstreamAuthSettings == nil {
		return nil, nil
	}
	var result UpstreamAuthSettingsARM

	// Set property ‘ManagedIdentity’:
	if upstreamAuthSettings.ManagedIdentity != nil {
		managedIdentityARM, err := (*upstreamAuthSettings.ManagedIdentity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		managedIdentity := managedIdentityARM.(ManagedIdentitySettingsARM)
		result.ManagedIdentity = &managedIdentity
	}

	// Set property ‘Type’:
	if upstreamAuthSettings.Type != nil {
		typeVar := *upstreamAuthSettings.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (upstreamAuthSettings *UpstreamAuthSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpstreamAuthSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (upstreamAuthSettings *UpstreamAuthSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpstreamAuthSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpstreamAuthSettingsARM, got %T", armInput)
	}

	// Set property ‘ManagedIdentity’:
	if typedInput.ManagedIdentity != nil {
		var managedIdentity1 ManagedIdentitySettings
		err := managedIdentity1.PopulateFromARM(owner, *typedInput.ManagedIdentity)
		if err != nil {
			return err
		}
		managedIdentity := managedIdentity1
		upstreamAuthSettings.ManagedIdentity = &managedIdentity
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		upstreamAuthSettings.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromUpstreamAuthSettings populates our UpstreamAuthSettings from the provided source UpstreamAuthSettings
func (upstreamAuthSettings *UpstreamAuthSettings) AssignPropertiesFromUpstreamAuthSettings(source *v1alpha1api20211001storage.UpstreamAuthSettings) error {

	// ManagedIdentity
	if source.ManagedIdentity != nil {
		var managedIdentity ManagedIdentitySettings
		err := managedIdentity.AssignPropertiesFromManagedIdentitySettings(source.ManagedIdentity)
		if err != nil {
			return errors.Wrap(err, "populating ManagedIdentity from ManagedIdentity, calling AssignPropertiesFromManagedIdentitySettings()")
		}
		upstreamAuthSettings.ManagedIdentity = &managedIdentity
	} else {
		upstreamAuthSettings.ManagedIdentity = nil
	}

	// Type
	if source.Type != nil {
		typeVar := UpstreamAuthSettingsType(*source.Type)
		upstreamAuthSettings.Type = &typeVar
	} else {
		upstreamAuthSettings.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUpstreamAuthSettings populates the provided destination UpstreamAuthSettings from our UpstreamAuthSettings
func (upstreamAuthSettings *UpstreamAuthSettings) AssignPropertiesToUpstreamAuthSettings(destination *v1alpha1api20211001storage.UpstreamAuthSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ManagedIdentity
	if upstreamAuthSettings.ManagedIdentity != nil {
		var managedIdentity v1alpha1api20211001storage.ManagedIdentitySettings
		err := (*upstreamAuthSettings.ManagedIdentity).AssignPropertiesToManagedIdentitySettings(&managedIdentity)
		if err != nil {
			return errors.Wrap(err, "populating ManagedIdentity from ManagedIdentity, calling AssignPropertiesToManagedIdentitySettings()")
		}
		destination.ManagedIdentity = &managedIdentity
	} else {
		destination.ManagedIdentity = nil
	}

	// Type
	if upstreamAuthSettings.Type != nil {
		typeVar := string(*upstreamAuthSettings.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UpstreamAuthSettings_Status struct {
	//ManagedIdentity: Gets or sets the managed identity settings. It's required if
	//the auth type is set to ManagedIdentity.
	ManagedIdentity *ManagedIdentitySettings_Status `json:"managedIdentity,omitempty"`

	//Type: Gets or sets the type of auth. None or ManagedIdentity is supported now.
	Type *UpstreamAuthType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &UpstreamAuthSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (upstreamAuthSettingsStatus *UpstreamAuthSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpstreamAuthSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (upstreamAuthSettingsStatus *UpstreamAuthSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpstreamAuthSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpstreamAuthSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘ManagedIdentity’:
	if typedInput.ManagedIdentity != nil {
		var managedIdentity1 ManagedIdentitySettings_Status
		err := managedIdentity1.PopulateFromARM(owner, *typedInput.ManagedIdentity)
		if err != nil {
			return err
		}
		managedIdentity := managedIdentity1
		upstreamAuthSettingsStatus.ManagedIdentity = &managedIdentity
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		upstreamAuthSettingsStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromUpstreamAuthSettingsStatus populates our UpstreamAuthSettings_Status from the provided source UpstreamAuthSettings_Status
func (upstreamAuthSettingsStatus *UpstreamAuthSettings_Status) AssignPropertiesFromUpstreamAuthSettingsStatus(source *v1alpha1api20211001storage.UpstreamAuthSettings_Status) error {

	// ManagedIdentity
	if source.ManagedIdentity != nil {
		var managedIdentity ManagedIdentitySettings_Status
		err := managedIdentity.AssignPropertiesFromManagedIdentitySettingsStatus(source.ManagedIdentity)
		if err != nil {
			return errors.Wrap(err, "populating ManagedIdentity from ManagedIdentity, calling AssignPropertiesFromManagedIdentitySettingsStatus()")
		}
		upstreamAuthSettingsStatus.ManagedIdentity = &managedIdentity
	} else {
		upstreamAuthSettingsStatus.ManagedIdentity = nil
	}

	// Type
	if source.Type != nil {
		typeVar := UpstreamAuthType_Status(*source.Type)
		upstreamAuthSettingsStatus.Type = &typeVar
	} else {
		upstreamAuthSettingsStatus.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUpstreamAuthSettingsStatus populates the provided destination UpstreamAuthSettings_Status from our UpstreamAuthSettings_Status
func (upstreamAuthSettingsStatus *UpstreamAuthSettings_Status) AssignPropertiesToUpstreamAuthSettingsStatus(destination *v1alpha1api20211001storage.UpstreamAuthSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ManagedIdentity
	if upstreamAuthSettingsStatus.ManagedIdentity != nil {
		var managedIdentity v1alpha1api20211001storage.ManagedIdentitySettings_Status
		err := (*upstreamAuthSettingsStatus.ManagedIdentity).AssignPropertiesToManagedIdentitySettingsStatus(&managedIdentity)
		if err != nil {
			return errors.Wrap(err, "populating ManagedIdentity from ManagedIdentity, calling AssignPropertiesToManagedIdentitySettingsStatus()")
		}
		destination.ManagedIdentity = &managedIdentity
	} else {
		destination.ManagedIdentity = nil
	}

	// Type
	if upstreamAuthSettingsStatus.Type != nil {
		typeVar := string(*upstreamAuthSettingsStatus.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ManagedIdentitySettings
type ManagedIdentitySettings struct {
	//Resource: The Resource indicating the App ID URI of the target resource.
	//It also appears in the aud (audience) claim of the issued token.
	Resource *string `json:"resource,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedIdentitySettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (managedIdentitySettings *ManagedIdentitySettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if managedIdentitySettings == nil {
		return nil, nil
	}
	var result ManagedIdentitySettingsARM

	// Set property ‘Resource’:
	if managedIdentitySettings.Resource != nil {
		resource := *managedIdentitySettings.Resource
		result.Resource = &resource
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (managedIdentitySettings *ManagedIdentitySettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedIdentitySettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (managedIdentitySettings *ManagedIdentitySettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedIdentitySettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedIdentitySettingsARM, got %T", armInput)
	}

	// Set property ‘Resource’:
	if typedInput.Resource != nil {
		resource := *typedInput.Resource
		managedIdentitySettings.Resource = &resource
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedIdentitySettings populates our ManagedIdentitySettings from the provided source ManagedIdentitySettings
func (managedIdentitySettings *ManagedIdentitySettings) AssignPropertiesFromManagedIdentitySettings(source *v1alpha1api20211001storage.ManagedIdentitySettings) error {

	// Resource
	managedIdentitySettings.Resource = genruntime.ClonePointerToString(source.Resource)

	// No error
	return nil
}

// AssignPropertiesToManagedIdentitySettings populates the provided destination ManagedIdentitySettings from our ManagedIdentitySettings
func (managedIdentitySettings *ManagedIdentitySettings) AssignPropertiesToManagedIdentitySettings(destination *v1alpha1api20211001storage.ManagedIdentitySettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Resource
	destination.Resource = genruntime.ClonePointerToString(managedIdentitySettings.Resource)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ManagedIdentitySettings_Status struct {
	//Resource: The Resource indicating the App ID URI of the target resource.
	//It also appears in the aud (audience) claim of the issued token.
	Resource *string `json:"resource,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagedIdentitySettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (managedIdentitySettingsStatus *ManagedIdentitySettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedIdentitySettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (managedIdentitySettingsStatus *ManagedIdentitySettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedIdentitySettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedIdentitySettings_StatusARM, got %T", armInput)
	}

	// Set property ‘Resource’:
	if typedInput.Resource != nil {
		resource := *typedInput.Resource
		managedIdentitySettingsStatus.Resource = &resource
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedIdentitySettingsStatus populates our ManagedIdentitySettings_Status from the provided source ManagedIdentitySettings_Status
func (managedIdentitySettingsStatus *ManagedIdentitySettings_Status) AssignPropertiesFromManagedIdentitySettingsStatus(source *v1alpha1api20211001storage.ManagedIdentitySettings_Status) error {

	// Resource
	managedIdentitySettingsStatus.Resource = genruntime.ClonePointerToString(source.Resource)

	// No error
	return nil
}

// AssignPropertiesToManagedIdentitySettingsStatus populates the provided destination ManagedIdentitySettings_Status from our ManagedIdentitySettings_Status
func (managedIdentitySettingsStatus *ManagedIdentitySettings_Status) AssignPropertiesToManagedIdentitySettingsStatus(destination *v1alpha1api20211001storage.ManagedIdentitySettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Resource
	destination.Resource = genruntime.ClonePointerToString(managedIdentitySettingsStatus.Resource)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ManagedIdentity","None"}
type UpstreamAuthSettingsType string

const (
	UpstreamAuthSettingsTypeManagedIdentity = UpstreamAuthSettingsType("ManagedIdentity")
	UpstreamAuthSettingsTypeNone            = UpstreamAuthSettingsType("None")
)

type UpstreamAuthType_Status string

const (
	UpstreamAuthType_StatusManagedIdentity = UpstreamAuthType_Status("ManagedIdentity")
	UpstreamAuthType_StatusNone            = UpstreamAuthType_Status("None")
)

func init() {
	SchemeBuilder.Register(&SignalR{}, &SignalRList{})
}
