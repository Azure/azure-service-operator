// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211001

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SignalRResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRResource_STATUS_ARM, SignalRResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRResource_STATUS_ARM runs a test to see if a specific instance of SignalRResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRResource_STATUS_ARM(subject SignalRResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRResource_STATUS_ARM instances for property testing - lazily instantiated by
// SignalRResource_STATUS_ARMGenerator()
var signalRResource_STATUS_ARMGenerator gopter.Gen

// SignalRResource_STATUS_ARMGenerator returns a generator of SignalRResource_STATUS_ARM instances for property testing.
// We first initialize signalRResource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRResource_STATUS_ARMGenerator() gopter.Gen {
	if signalRResource_STATUS_ARMGenerator != nil {
		return signalRResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRResource_STATUS_ARM(generators)
	signalRResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SignalRResource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRResource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSignalRResource_STATUS_ARM(generators)
	signalRResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SignalRResource_STATUS_ARM{}), generators)

	return signalRResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(ServiceKind_STATUS_RawWebSockets, ServiceKind_STATUS_SignalR))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSignalRResource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(SignalRProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(ResourceSku_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_ManagedIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentity_STATUS_ARM, ManagedIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentity_STATUS_ARM runs a test to see if a specific instance of ManagedIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentity_STATUS_ARM(subject ManagedIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedIdentity_STATUS_ARMGenerator()
var managedIdentity_STATUS_ARMGenerator gopter.Gen

// ManagedIdentity_STATUS_ARMGenerator returns a generator of ManagedIdentity_STATUS_ARM instances for property testing.
// We first initialize managedIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedIdentity_STATUS_ARMGenerator() gopter.Gen {
	if managedIdentity_STATUS_ARMGenerator != nil {
		return managedIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentity_STATUS_ARM(generators)
	managedIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedIdentity_STATUS_ARM(generators)
	managedIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentity_STATUS_ARM{}), generators)

	return managedIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedIdentityType_STATUS_None, ManagedIdentityType_STATUS_SystemAssigned, ManagedIdentityType_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), UserAssignedIdentityProperty_STATUS_ARMGenerator())
}

func Test_ResourceSku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSku_STATUS_ARM, ResourceSku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSku_STATUS_ARM runs a test to see if a specific instance of ResourceSku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSku_STATUS_ARM(subject ResourceSku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSku_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceSku_STATUS_ARMGenerator()
var resourceSku_STATUS_ARMGenerator gopter.Gen

// ResourceSku_STATUS_ARMGenerator returns a generator of ResourceSku_STATUS_ARM instances for property testing.
func ResourceSku_STATUS_ARMGenerator() gopter.Gen {
	if resourceSku_STATUS_ARMGenerator != nil {
		return resourceSku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceSku_STATUS_ARM(generators)
	resourceSku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceSku_STATUS_ARM{}), generators)

	return resourceSku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		SignalRSkuTier_STATUS_Basic,
		SignalRSkuTier_STATUS_Free,
		SignalRSkuTier_STATUS_Premium,
		SignalRSkuTier_STATUS_Standard))
}

func Test_SignalRProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRProperties_STATUS_ARM, SignalRProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRProperties_STATUS_ARM runs a test to see if a specific instance of SignalRProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRProperties_STATUS_ARM(subject SignalRProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRProperties_STATUS_ARM instances for property testing - lazily instantiated by
// SignalRProperties_STATUS_ARMGenerator()
var signalRProperties_STATUS_ARMGenerator gopter.Gen

// SignalRProperties_STATUS_ARMGenerator returns a generator of SignalRProperties_STATUS_ARM instances for property testing.
// We first initialize signalRProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRProperties_STATUS_ARMGenerator() gopter.Gen {
	if signalRProperties_STATUS_ARMGenerator != nil {
		return signalRProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRProperties_STATUS_ARM(generators)
	signalRProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SignalRProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSignalRProperties_STATUS_ARM(generators)
	signalRProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SignalRProperties_STATUS_ARM{}), generators)

	return signalRProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DisableAadAuth"] = gen.PtrOf(gen.Bool())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["ExternalIP"] = gen.PtrOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HostNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Canceled,
		ProvisioningState_STATUS_Creating,
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Moving,
		ProvisioningState_STATUS_Running,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Unknown,
		ProvisioningState_STATUS_Updating))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
	gens["PublicPort"] = gen.PtrOf(gen.Int())
	gens["ServerPort"] = gen.PtrOf(gen.Int())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSignalRProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(SignalRCorsSettings_STATUS_ARMGenerator())
	gens["Features"] = gen.SliceOf(SignalRFeature_STATUS_ARMGenerator())
	gens["NetworkACLs"] = gen.PtrOf(SignalRNetworkACLs_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator())
	gens["ResourceLogConfiguration"] = gen.PtrOf(ResourceLogConfiguration_STATUS_ARMGenerator())
	gens["SharedPrivateLinkResources"] = gen.SliceOf(SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator())
	gens["Tls"] = gen.PtrOf(SignalRTlsSettings_STATUS_ARMGenerator())
	gens["Upstream"] = gen.PtrOf(ServerlessUpstreamSettings_STATUS_ARMGenerator())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}

func Test_PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM, PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM(subject PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM instances for property testing - lazily
// instantiated by PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator()
var privateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator returns a generator of PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM instances for property testing.
// We first initialize privateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator != nil {
		return privateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM(generators)
	privateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM(generators)
	privateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM{}), generators)

	return privateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_ResourceLogConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLogConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLogConfiguration_STATUS_ARM, ResourceLogConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLogConfiguration_STATUS_ARM runs a test to see if a specific instance of ResourceLogConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLogConfiguration_STATUS_ARM(subject ResourceLogConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLogConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLogConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceLogConfiguration_STATUS_ARMGenerator()
var resourceLogConfiguration_STATUS_ARMGenerator gopter.Gen

// ResourceLogConfiguration_STATUS_ARMGenerator returns a generator of ResourceLogConfiguration_STATUS_ARM instances for property testing.
func ResourceLogConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if resourceLogConfiguration_STATUS_ARMGenerator != nil {
		return resourceLogConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceLogConfiguration_STATUS_ARM(generators)
	resourceLogConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceLogConfiguration_STATUS_ARM{}), generators)

	return resourceLogConfiguration_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForResourceLogConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceLogConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Categories"] = gen.SliceOf(ResourceLogCategory_STATUS_ARMGenerator())
}

func Test_ServerlessUpstreamSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerlessUpstreamSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerlessUpstreamSettings_STATUS_ARM, ServerlessUpstreamSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerlessUpstreamSettings_STATUS_ARM runs a test to see if a specific instance of ServerlessUpstreamSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerlessUpstreamSettings_STATUS_ARM(subject ServerlessUpstreamSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerlessUpstreamSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerlessUpstreamSettings_STATUS_ARM instances for property testing - lazily instantiated by
// ServerlessUpstreamSettings_STATUS_ARMGenerator()
var serverlessUpstreamSettings_STATUS_ARMGenerator gopter.Gen

// ServerlessUpstreamSettings_STATUS_ARMGenerator returns a generator of ServerlessUpstreamSettings_STATUS_ARM instances for property testing.
func ServerlessUpstreamSettings_STATUS_ARMGenerator() gopter.Gen {
	if serverlessUpstreamSettings_STATUS_ARMGenerator != nil {
		return serverlessUpstreamSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServerlessUpstreamSettings_STATUS_ARM(generators)
	serverlessUpstreamSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerlessUpstreamSettings_STATUS_ARM{}), generators)

	return serverlessUpstreamSettings_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForServerlessUpstreamSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerlessUpstreamSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Templates"] = gen.SliceOf(UpstreamTemplate_STATUS_ARMGenerator())
}

func Test_SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM, SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM runs a test to see if a specific instance of SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM(subject SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM instances for property testing - lazily
// instantiated by SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator()
var sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator gopter.Gen

// SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator returns a generator of SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM instances for property testing.
// We first initialize sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator != nil {
		return sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM(generators)
	sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM(generators)
	AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM(generators)
	sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM{}), generators)

	return sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_SignalRCorsSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRCorsSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRCorsSettings_STATUS_ARM, SignalRCorsSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRCorsSettings_STATUS_ARM runs a test to see if a specific instance of SignalRCorsSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRCorsSettings_STATUS_ARM(subject SignalRCorsSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRCorsSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRCorsSettings_STATUS_ARM instances for property testing - lazily instantiated by
// SignalRCorsSettings_STATUS_ARMGenerator()
var signalRCorsSettings_STATUS_ARMGenerator gopter.Gen

// SignalRCorsSettings_STATUS_ARMGenerator returns a generator of SignalRCorsSettings_STATUS_ARM instances for property testing.
func SignalRCorsSettings_STATUS_ARMGenerator() gopter.Gen {
	if signalRCorsSettings_STATUS_ARMGenerator != nil {
		return signalRCorsSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRCorsSettings_STATUS_ARM(generators)
	signalRCorsSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SignalRCorsSettings_STATUS_ARM{}), generators)

	return signalRCorsSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRCorsSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRCorsSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
}

func Test_SignalRFeature_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRFeature_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRFeature_STATUS_ARM, SignalRFeature_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRFeature_STATUS_ARM runs a test to see if a specific instance of SignalRFeature_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRFeature_STATUS_ARM(subject SignalRFeature_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRFeature_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRFeature_STATUS_ARM instances for property testing - lazily instantiated by
// SignalRFeature_STATUS_ARMGenerator()
var signalRFeature_STATUS_ARMGenerator gopter.Gen

// SignalRFeature_STATUS_ARMGenerator returns a generator of SignalRFeature_STATUS_ARM instances for property testing.
func SignalRFeature_STATUS_ARMGenerator() gopter.Gen {
	if signalRFeature_STATUS_ARMGenerator != nil {
		return signalRFeature_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRFeature_STATUS_ARM(generators)
	signalRFeature_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SignalRFeature_STATUS_ARM{}), generators)

	return signalRFeature_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRFeature_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRFeature_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Flag"] = gen.PtrOf(gen.OneConstOf(
		FeatureFlags_STATUS_EnableConnectivityLogs,
		FeatureFlags_STATUS_EnableLiveTrace,
		FeatureFlags_STATUS_EnableMessagingLogs,
		FeatureFlags_STATUS_ServiceMode))
	gens["Properties"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_SignalRNetworkACLs_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRNetworkACLs_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRNetworkACLs_STATUS_ARM, SignalRNetworkACLs_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRNetworkACLs_STATUS_ARM runs a test to see if a specific instance of SignalRNetworkACLs_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRNetworkACLs_STATUS_ARM(subject SignalRNetworkACLs_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRNetworkACLs_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRNetworkACLs_STATUS_ARM instances for property testing - lazily instantiated by
// SignalRNetworkACLs_STATUS_ARMGenerator()
var signalRNetworkACLs_STATUS_ARMGenerator gopter.Gen

// SignalRNetworkACLs_STATUS_ARMGenerator returns a generator of SignalRNetworkACLs_STATUS_ARM instances for property testing.
// We first initialize signalRNetworkACLs_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRNetworkACLs_STATUS_ARMGenerator() gopter.Gen {
	if signalRNetworkACLs_STATUS_ARMGenerator != nil {
		return signalRNetworkACLs_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRNetworkACLs_STATUS_ARM(generators)
	signalRNetworkACLs_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SignalRNetworkACLs_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRNetworkACLs_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSignalRNetworkACLs_STATUS_ARM(generators)
	signalRNetworkACLs_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SignalRNetworkACLs_STATUS_ARM{}), generators)

	return signalRNetworkACLs_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRNetworkACLs_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRNetworkACLs_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DefaultAction"] = gen.PtrOf(gen.OneConstOf(ACLAction_STATUS_Allow, ACLAction_STATUS_Deny))
}

// AddRelatedPropertyGeneratorsForSignalRNetworkACLs_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRNetworkACLs_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoints"] = gen.SliceOf(PrivateEndpointACL_STATUS_ARMGenerator())
	gens["PublicNetwork"] = gen.PtrOf(NetworkACL_STATUS_ARMGenerator())
}

func Test_SignalRTlsSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRTlsSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRTlsSettings_STATUS_ARM, SignalRTlsSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRTlsSettings_STATUS_ARM runs a test to see if a specific instance of SignalRTlsSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRTlsSettings_STATUS_ARM(subject SignalRTlsSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRTlsSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRTlsSettings_STATUS_ARM instances for property testing - lazily instantiated by
// SignalRTlsSettings_STATUS_ARMGenerator()
var signalRTlsSettings_STATUS_ARMGenerator gopter.Gen

// SignalRTlsSettings_STATUS_ARMGenerator returns a generator of SignalRTlsSettings_STATUS_ARM instances for property testing.
func SignalRTlsSettings_STATUS_ARMGenerator() gopter.Gen {
	if signalRTlsSettings_STATUS_ARMGenerator != nil {
		return signalRTlsSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRTlsSettings_STATUS_ARM(generators)
	signalRTlsSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SignalRTlsSettings_STATUS_ARM{}), generators)

	return signalRTlsSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRTlsSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRTlsSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientCertEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_UserAssignedIdentityProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentityProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentityProperty_STATUS_ARM, UserAssignedIdentityProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentityProperty_STATUS_ARM runs a test to see if a specific instance of UserAssignedIdentityProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentityProperty_STATUS_ARM(subject UserAssignedIdentityProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentityProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentityProperty_STATUS_ARM instances for property testing - lazily instantiated by
// UserAssignedIdentityProperty_STATUS_ARMGenerator()
var userAssignedIdentityProperty_STATUS_ARMGenerator gopter.Gen

// UserAssignedIdentityProperty_STATUS_ARMGenerator returns a generator of UserAssignedIdentityProperty_STATUS_ARM instances for property testing.
func UserAssignedIdentityProperty_STATUS_ARMGenerator() gopter.Gen {
	if userAssignedIdentityProperty_STATUS_ARMGenerator != nil {
		return userAssignedIdentityProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentityProperty_STATUS_ARM(generators)
	userAssignedIdentityProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentityProperty_STATUS_ARM{}), generators)

	return userAssignedIdentityProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentityProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentityProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkACL_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkACL_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkACL_STATUS_ARM, NetworkACL_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkACL_STATUS_ARM runs a test to see if a specific instance of NetworkACL_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkACL_STATUS_ARM(subject NetworkACL_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkACL_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkACL_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkACL_STATUS_ARMGenerator()
var networkACL_STATUS_ARMGenerator gopter.Gen

// NetworkACL_STATUS_ARMGenerator returns a generator of NetworkACL_STATUS_ARM instances for property testing.
func NetworkACL_STATUS_ARMGenerator() gopter.Gen {
	if networkACL_STATUS_ARMGenerator != nil {
		return networkACL_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkACL_STATUS_ARM(generators)
	networkACL_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkACL_STATUS_ARM{}), generators)

	return networkACL_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkACL_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkACL_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Allow"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_STATUS_ClientConnection,
		SignalRRequestType_STATUS_RESTAPI,
		SignalRRequestType_STATUS_ServerConnection,
		SignalRRequestType_STATUS_Trace))
	gens["Deny"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_STATUS_ClientConnection,
		SignalRRequestType_STATUS_RESTAPI,
		SignalRRequestType_STATUS_ServerConnection,
		SignalRRequestType_STATUS_Trace))
}

func Test_PrivateEndpointACL_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointACL_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointACL_STATUS_ARM, PrivateEndpointACL_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointACL_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointACL_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointACL_STATUS_ARM(subject PrivateEndpointACL_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointACL_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointACL_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointACL_STATUS_ARMGenerator()
var privateEndpointACL_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointACL_STATUS_ARMGenerator returns a generator of PrivateEndpointACL_STATUS_ARM instances for property testing.
func PrivateEndpointACL_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointACL_STATUS_ARMGenerator != nil {
		return privateEndpointACL_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointACL_STATUS_ARM(generators)
	privateEndpointACL_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointACL_STATUS_ARM{}), generators)

	return privateEndpointACL_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointACL_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointACL_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Allow"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_STATUS_ClientConnection,
		SignalRRequestType_STATUS_RESTAPI,
		SignalRRequestType_STATUS_ServerConnection,
		SignalRRequestType_STATUS_Trace))
	gens["Deny"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_STATUS_ClientConnection,
		SignalRRequestType_STATUS_RESTAPI,
		SignalRRequestType_STATUS_ServerConnection,
		SignalRRequestType_STATUS_Trace))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceLogCategory_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLogCategory_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLogCategory_STATUS_ARM, ResourceLogCategory_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLogCategory_STATUS_ARM runs a test to see if a specific instance of ResourceLogCategory_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLogCategory_STATUS_ARM(subject ResourceLogCategory_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLogCategory_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLogCategory_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceLogCategory_STATUS_ARMGenerator()
var resourceLogCategory_STATUS_ARMGenerator gopter.Gen

// ResourceLogCategory_STATUS_ARMGenerator returns a generator of ResourceLogCategory_STATUS_ARM instances for property testing.
func ResourceLogCategory_STATUS_ARMGenerator() gopter.Gen {
	if resourceLogCategory_STATUS_ARMGenerator != nil {
		return resourceLogCategory_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLogCategory_STATUS_ARM(generators)
	resourceLogCategory_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceLogCategory_STATUS_ARM{}), generators)

	return resourceLogCategory_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceLogCategory_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceLogCategory_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpstreamTemplate_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpstreamTemplate_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpstreamTemplate_STATUS_ARM, UpstreamTemplate_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpstreamTemplate_STATUS_ARM runs a test to see if a specific instance of UpstreamTemplate_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpstreamTemplate_STATUS_ARM(subject UpstreamTemplate_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpstreamTemplate_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpstreamTemplate_STATUS_ARM instances for property testing - lazily instantiated by
// UpstreamTemplate_STATUS_ARMGenerator()
var upstreamTemplate_STATUS_ARMGenerator gopter.Gen

// UpstreamTemplate_STATUS_ARMGenerator returns a generator of UpstreamTemplate_STATUS_ARM instances for property testing.
// We first initialize upstreamTemplate_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpstreamTemplate_STATUS_ARMGenerator() gopter.Gen {
	if upstreamTemplate_STATUS_ARMGenerator != nil {
		return upstreamTemplate_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamTemplate_STATUS_ARM(generators)
	upstreamTemplate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpstreamTemplate_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamTemplate_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUpstreamTemplate_STATUS_ARM(generators)
	upstreamTemplate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpstreamTemplate_STATUS_ARM{}), generators)

	return upstreamTemplate_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpstreamTemplate_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpstreamTemplate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CategoryPattern"] = gen.PtrOf(gen.AlphaString())
	gens["EventPattern"] = gen.PtrOf(gen.AlphaString())
	gens["HubPattern"] = gen.PtrOf(gen.AlphaString())
	gens["UrlTemplate"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUpstreamTemplate_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpstreamTemplate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Auth"] = gen.PtrOf(UpstreamAuthSettings_STATUS_ARMGenerator())
}

func Test_UpstreamAuthSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpstreamAuthSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpstreamAuthSettings_STATUS_ARM, UpstreamAuthSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpstreamAuthSettings_STATUS_ARM runs a test to see if a specific instance of UpstreamAuthSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpstreamAuthSettings_STATUS_ARM(subject UpstreamAuthSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpstreamAuthSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpstreamAuthSettings_STATUS_ARM instances for property testing - lazily instantiated by
// UpstreamAuthSettings_STATUS_ARMGenerator()
var upstreamAuthSettings_STATUS_ARMGenerator gopter.Gen

// UpstreamAuthSettings_STATUS_ARMGenerator returns a generator of UpstreamAuthSettings_STATUS_ARM instances for property testing.
// We first initialize upstreamAuthSettings_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpstreamAuthSettings_STATUS_ARMGenerator() gopter.Gen {
	if upstreamAuthSettings_STATUS_ARMGenerator != nil {
		return upstreamAuthSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamAuthSettings_STATUS_ARM(generators)
	upstreamAuthSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpstreamAuthSettings_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamAuthSettings_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUpstreamAuthSettings_STATUS_ARM(generators)
	upstreamAuthSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpstreamAuthSettings_STATUS_ARM{}), generators)

	return upstreamAuthSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpstreamAuthSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpstreamAuthSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(UpstreamAuthType_STATUS_ManagedIdentity, UpstreamAuthType_STATUS_None))
}

// AddRelatedPropertyGeneratorsForUpstreamAuthSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpstreamAuthSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ManagedIdentity"] = gen.PtrOf(ManagedIdentitySettings_STATUS_ARMGenerator())
}

func Test_ManagedIdentitySettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentitySettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentitySettings_STATUS_ARM, ManagedIdentitySettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentitySettings_STATUS_ARM runs a test to see if a specific instance of ManagedIdentitySettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentitySettings_STATUS_ARM(subject ManagedIdentitySettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentitySettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentitySettings_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedIdentitySettings_STATUS_ARMGenerator()
var managedIdentitySettings_STATUS_ARMGenerator gopter.Gen

// ManagedIdentitySettings_STATUS_ARMGenerator returns a generator of ManagedIdentitySettings_STATUS_ARM instances for property testing.
func ManagedIdentitySettings_STATUS_ARMGenerator() gopter.Gen {
	if managedIdentitySettings_STATUS_ARMGenerator != nil {
		return managedIdentitySettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentitySettings_STATUS_ARM(generators)
	managedIdentitySettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentitySettings_STATUS_ARM{}), generators)

	return managedIdentitySettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentitySettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentitySettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(gen.AlphaString())
}
