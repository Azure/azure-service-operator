// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211001

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SignalRResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRResource_STATUSARM, SignalRResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRResource_STATUSARM runs a test to see if a specific instance of SignalRResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRResource_STATUSARM(subject SignalRResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRResource_STATUSARM instances for property testing - lazily instantiated by
// SignalRResource_STATUSARMGenerator()
var signalRResource_STATUSARMGenerator gopter.Gen

// SignalRResource_STATUSARMGenerator returns a generator of SignalRResource_STATUSARM instances for property testing.
// We first initialize signalRResource_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRResource_STATUSARMGenerator() gopter.Gen {
	if signalRResource_STATUSARMGenerator != nil {
		return signalRResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRResource_STATUSARM(generators)
	signalRResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SignalRResource_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRResource_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSignalRResource_STATUSARM(generators)
	signalRResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SignalRResource_STATUSARM{}), generators)

	return signalRResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.OneConstOf(ServiceKind_STATUS_RawWebSockets, ServiceKind_STATUS_SignalR))
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSignalRResource_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedIdentity_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(SignalRProperties_STATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(ResourceSku_STATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_ManagedIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentity_STATUSARM, ManagedIdentity_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentity_STATUSARM runs a test to see if a specific instance of ManagedIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentity_STATUSARM(subject ManagedIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentity_STATUSARM instances for property testing - lazily instantiated by
// ManagedIdentity_STATUSARMGenerator()
var managedIdentity_STATUSARMGenerator gopter.Gen

// ManagedIdentity_STATUSARMGenerator returns a generator of ManagedIdentity_STATUSARM instances for property testing.
// We first initialize managedIdentity_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedIdentity_STATUSARMGenerator() gopter.Gen {
	if managedIdentity_STATUSARMGenerator != nil {
		return managedIdentity_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentity_STATUSARM(generators)
	managedIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentity_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedIdentity_STATUSARM(generators)
	managedIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentity_STATUSARM{}), generators)

	return managedIdentity_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentity_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedIdentityType_STATUS_None, ManagedIdentityType_STATUS_SystemAssigned, ManagedIdentityType_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedIdentity_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), UserAssignedIdentityProperty_STATUSARMGenerator())
}

func Test_ResourceSku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSku_STATUSARM, ResourceSku_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSku_STATUSARM runs a test to see if a specific instance of ResourceSku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSku_STATUSARM(subject ResourceSku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSku_STATUSARM instances for property testing - lazily instantiated by
// ResourceSku_STATUSARMGenerator()
var resourceSku_STATUSARMGenerator gopter.Gen

// ResourceSku_STATUSARMGenerator returns a generator of ResourceSku_STATUSARM instances for property testing.
func ResourceSku_STATUSARMGenerator() gopter.Gen {
	if resourceSku_STATUSARMGenerator != nil {
		return resourceSku_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceSku_STATUSARM(generators)
	resourceSku_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceSku_STATUSARM{}), generators)

	return resourceSku_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceSku_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceSku_STATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		SignalRSkuTier_STATUS_Basic,
		SignalRSkuTier_STATUS_Free,
		SignalRSkuTier_STATUS_Premium,
		SignalRSkuTier_STATUS_Standard))
}

func Test_SignalRProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRProperties_STATUSARM, SignalRProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRProperties_STATUSARM runs a test to see if a specific instance of SignalRProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRProperties_STATUSARM(subject SignalRProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRProperties_STATUSARM instances for property testing - lazily instantiated by
// SignalRProperties_STATUSARMGenerator()
var signalRProperties_STATUSARMGenerator gopter.Gen

// SignalRProperties_STATUSARMGenerator returns a generator of SignalRProperties_STATUSARM instances for property testing.
// We first initialize signalRProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRProperties_STATUSARMGenerator() gopter.Gen {
	if signalRProperties_STATUSARMGenerator != nil {
		return signalRProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRProperties_STATUSARM(generators)
	signalRProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SignalRProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSignalRProperties_STATUSARM(generators)
	signalRProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SignalRProperties_STATUSARM{}), generators)

	return signalRProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["DisableAadAuth"] = gen.PtrOf(gen.Bool())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["ExternalIP"] = gen.PtrOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HostNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningState_STATUS_Canceled,
		ProvisioningState_STATUS_Creating,
		ProvisioningState_STATUS_Deleting,
		ProvisioningState_STATUS_Failed,
		ProvisioningState_STATUS_Moving,
		ProvisioningState_STATUS_Running,
		ProvisioningState_STATUS_Succeeded,
		ProvisioningState_STATUS_Unknown,
		ProvisioningState_STATUS_Updating))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
	gens["PublicPort"] = gen.PtrOf(gen.Int())
	gens["ServerPort"] = gen.PtrOf(gen.Int())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSignalRProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(SignalRCorsSettings_STATUSARMGenerator())
	gens["Features"] = gen.SliceOf(SignalRFeature_STATUSARMGenerator())
	gens["NetworkACLs"] = gen.PtrOf(SignalRNetworkACLs_STATUSARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator())
	gens["ResourceLogConfiguration"] = gen.PtrOf(ResourceLogConfiguration_STATUSARMGenerator())
	gens["SharedPrivateLinkResources"] = gen.SliceOf(SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator())
	gens["Tls"] = gen.PtrOf(SignalRTlsSettings_STATUSARMGenerator())
	gens["Upstream"] = gen.PtrOf(ServerlessUpstreamSettings_STATUSARMGenerator())
}

func Test_SystemData_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUSARM, SystemData_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUSARM runs a test to see if a specific instance of SystemData_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUSARM(subject SystemData_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUSARM instances for property testing - lazily instantiated by
// SystemData_STATUSARMGenerator()
var systemData_STATUSARMGenerator gopter.Gen

// SystemData_STATUSARMGenerator returns a generator of SystemData_STATUSARM instances for property testing.
func SystemData_STATUSARMGenerator() gopter.Gen {
	if systemData_STATUSARMGenerator != nil {
		return systemData_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUSARM(generators)
	systemData_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUSARM{}), generators)

	return systemData_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUSARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_STATUS_CreatedByType_Application,
		SystemData_STATUS_CreatedByType_Key,
		SystemData_STATUS_CreatedByType_ManagedIdentity,
		SystemData_STATUS_CreatedByType_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_STATUS_LastModifiedByType_Application,
		SystemData_STATUS_LastModifiedByType_Key,
		SystemData_STATUS_LastModifiedByType_ManagedIdentity,
		SystemData_STATUS_LastModifiedByType_User))
}

func Test_PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM, PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM(subject PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator()
var privateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator != nil {
		return privateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM(generators)
	privateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM(generators)
	privateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM{}), generators)

	return privateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnection_STATUS_SignalR_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_ResourceLogConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLogConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLogConfiguration_STATUSARM, ResourceLogConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLogConfiguration_STATUSARM runs a test to see if a specific instance of ResourceLogConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLogConfiguration_STATUSARM(subject ResourceLogConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLogConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLogConfiguration_STATUSARM instances for property testing - lazily instantiated by
// ResourceLogConfiguration_STATUSARMGenerator()
var resourceLogConfiguration_STATUSARMGenerator gopter.Gen

// ResourceLogConfiguration_STATUSARMGenerator returns a generator of ResourceLogConfiguration_STATUSARM instances for property testing.
func ResourceLogConfiguration_STATUSARMGenerator() gopter.Gen {
	if resourceLogConfiguration_STATUSARMGenerator != nil {
		return resourceLogConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceLogConfiguration_STATUSARM(generators)
	resourceLogConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceLogConfiguration_STATUSARM{}), generators)

	return resourceLogConfiguration_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForResourceLogConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceLogConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["Categories"] = gen.SliceOf(ResourceLogCategory_STATUSARMGenerator())
}

func Test_ServerlessUpstreamSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerlessUpstreamSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerlessUpstreamSettings_STATUSARM, ServerlessUpstreamSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerlessUpstreamSettings_STATUSARM runs a test to see if a specific instance of ServerlessUpstreamSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerlessUpstreamSettings_STATUSARM(subject ServerlessUpstreamSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerlessUpstreamSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerlessUpstreamSettings_STATUSARM instances for property testing - lazily instantiated by
// ServerlessUpstreamSettings_STATUSARMGenerator()
var serverlessUpstreamSettings_STATUSARMGenerator gopter.Gen

// ServerlessUpstreamSettings_STATUSARMGenerator returns a generator of ServerlessUpstreamSettings_STATUSARM instances for property testing.
func ServerlessUpstreamSettings_STATUSARMGenerator() gopter.Gen {
	if serverlessUpstreamSettings_STATUSARMGenerator != nil {
		return serverlessUpstreamSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServerlessUpstreamSettings_STATUSARM(generators)
	serverlessUpstreamSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ServerlessUpstreamSettings_STATUSARM{}), generators)

	return serverlessUpstreamSettings_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForServerlessUpstreamSettings_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerlessUpstreamSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["Templates"] = gen.SliceOf(UpstreamTemplate_STATUSARMGenerator())
}

func Test_SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM, SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM runs a test to see if a specific instance of SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM(subject SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator()
var sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator gopter.Gen

// SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator returns a generator of SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM instances for property testing.
// We first initialize sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator != nil {
		return sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM(generators)
	sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM(generators)
	sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM{}), generators)

	return sharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_STATUS_SignalR_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_SignalRCorsSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRCorsSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRCorsSettings_STATUSARM, SignalRCorsSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRCorsSettings_STATUSARM runs a test to see if a specific instance of SignalRCorsSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRCorsSettings_STATUSARM(subject SignalRCorsSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRCorsSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRCorsSettings_STATUSARM instances for property testing - lazily instantiated by
// SignalRCorsSettings_STATUSARMGenerator()
var signalRCorsSettings_STATUSARMGenerator gopter.Gen

// SignalRCorsSettings_STATUSARMGenerator returns a generator of SignalRCorsSettings_STATUSARM instances for property testing.
func SignalRCorsSettings_STATUSARMGenerator() gopter.Gen {
	if signalRCorsSettings_STATUSARMGenerator != nil {
		return signalRCorsSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRCorsSettings_STATUSARM(generators)
	signalRCorsSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SignalRCorsSettings_STATUSARM{}), generators)

	return signalRCorsSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRCorsSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRCorsSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
}

func Test_SignalRFeature_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRFeature_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRFeature_STATUSARM, SignalRFeature_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRFeature_STATUSARM runs a test to see if a specific instance of SignalRFeature_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRFeature_STATUSARM(subject SignalRFeature_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRFeature_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRFeature_STATUSARM instances for property testing - lazily instantiated by
// SignalRFeature_STATUSARMGenerator()
var signalRFeature_STATUSARMGenerator gopter.Gen

// SignalRFeature_STATUSARMGenerator returns a generator of SignalRFeature_STATUSARM instances for property testing.
func SignalRFeature_STATUSARMGenerator() gopter.Gen {
	if signalRFeature_STATUSARMGenerator != nil {
		return signalRFeature_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRFeature_STATUSARM(generators)
	signalRFeature_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SignalRFeature_STATUSARM{}), generators)

	return signalRFeature_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRFeature_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRFeature_STATUSARM(gens map[string]gopter.Gen) {
	gens["Flag"] = gen.PtrOf(gen.OneConstOf(
		FeatureFlags_STATUS_EnableConnectivityLogs,
		FeatureFlags_STATUS_EnableLiveTrace,
		FeatureFlags_STATUS_EnableMessagingLogs,
		FeatureFlags_STATUS_ServiceMode))
	gens["Properties"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_SignalRNetworkACLs_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRNetworkACLs_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRNetworkACLs_STATUSARM, SignalRNetworkACLs_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRNetworkACLs_STATUSARM runs a test to see if a specific instance of SignalRNetworkACLs_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRNetworkACLs_STATUSARM(subject SignalRNetworkACLs_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRNetworkACLs_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRNetworkACLs_STATUSARM instances for property testing - lazily instantiated by
// SignalRNetworkACLs_STATUSARMGenerator()
var signalRNetworkACLs_STATUSARMGenerator gopter.Gen

// SignalRNetworkACLs_STATUSARMGenerator returns a generator of SignalRNetworkACLs_STATUSARM instances for property testing.
// We first initialize signalRNetworkACLs_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRNetworkACLs_STATUSARMGenerator() gopter.Gen {
	if signalRNetworkACLs_STATUSARMGenerator != nil {
		return signalRNetworkACLs_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRNetworkACLs_STATUSARM(generators)
	signalRNetworkACLs_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SignalRNetworkACLs_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRNetworkACLs_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSignalRNetworkACLs_STATUSARM(generators)
	signalRNetworkACLs_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SignalRNetworkACLs_STATUSARM{}), generators)

	return signalRNetworkACLs_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRNetworkACLs_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRNetworkACLs_STATUSARM(gens map[string]gopter.Gen) {
	gens["DefaultAction"] = gen.PtrOf(gen.OneConstOf(ACLAction_STATUS_Allow, ACLAction_STATUS_Deny))
}

// AddRelatedPropertyGeneratorsForSignalRNetworkACLs_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRNetworkACLs_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoints"] = gen.SliceOf(PrivateEndpointACL_STATUSARMGenerator())
	gens["PublicNetwork"] = gen.PtrOf(NetworkACL_STATUSARMGenerator())
}

func Test_SignalRTlsSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRTlsSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRTlsSettings_STATUSARM, SignalRTlsSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRTlsSettings_STATUSARM runs a test to see if a specific instance of SignalRTlsSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRTlsSettings_STATUSARM(subject SignalRTlsSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRTlsSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRTlsSettings_STATUSARM instances for property testing - lazily instantiated by
// SignalRTlsSettings_STATUSARMGenerator()
var signalRTlsSettings_STATUSARMGenerator gopter.Gen

// SignalRTlsSettings_STATUSARMGenerator returns a generator of SignalRTlsSettings_STATUSARM instances for property testing.
func SignalRTlsSettings_STATUSARMGenerator() gopter.Gen {
	if signalRTlsSettings_STATUSARMGenerator != nil {
		return signalRTlsSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRTlsSettings_STATUSARM(generators)
	signalRTlsSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SignalRTlsSettings_STATUSARM{}), generators)

	return signalRTlsSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRTlsSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRTlsSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["ClientCertEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_UserAssignedIdentityProperty_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentityProperty_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentityProperty_STATUSARM, UserAssignedIdentityProperty_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentityProperty_STATUSARM runs a test to see if a specific instance of UserAssignedIdentityProperty_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentityProperty_STATUSARM(subject UserAssignedIdentityProperty_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentityProperty_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentityProperty_STATUSARM instances for property testing - lazily instantiated by
// UserAssignedIdentityProperty_STATUSARMGenerator()
var userAssignedIdentityProperty_STATUSARMGenerator gopter.Gen

// UserAssignedIdentityProperty_STATUSARMGenerator returns a generator of UserAssignedIdentityProperty_STATUSARM instances for property testing.
func UserAssignedIdentityProperty_STATUSARMGenerator() gopter.Gen {
	if userAssignedIdentityProperty_STATUSARMGenerator != nil {
		return userAssignedIdentityProperty_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentityProperty_STATUSARM(generators)
	userAssignedIdentityProperty_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentityProperty_STATUSARM{}), generators)

	return userAssignedIdentityProperty_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentityProperty_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentityProperty_STATUSARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkACL_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkACL_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkACL_STATUSARM, NetworkACL_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkACL_STATUSARM runs a test to see if a specific instance of NetworkACL_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkACL_STATUSARM(subject NetworkACL_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkACL_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkACL_STATUSARM instances for property testing - lazily instantiated by
// NetworkACL_STATUSARMGenerator()
var networkACL_STATUSARMGenerator gopter.Gen

// NetworkACL_STATUSARMGenerator returns a generator of NetworkACL_STATUSARM instances for property testing.
func NetworkACL_STATUSARMGenerator() gopter.Gen {
	if networkACL_STATUSARMGenerator != nil {
		return networkACL_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkACL_STATUSARM(generators)
	networkACL_STATUSARMGenerator = gen.Struct(reflect.TypeOf(NetworkACL_STATUSARM{}), generators)

	return networkACL_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkACL_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkACL_STATUSARM(gens map[string]gopter.Gen) {
	gens["Allow"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_STATUS_ClientConnection,
		SignalRRequestType_STATUS_RESTAPI,
		SignalRRequestType_STATUS_ServerConnection,
		SignalRRequestType_STATUS_Trace))
	gens["Deny"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_STATUS_ClientConnection,
		SignalRRequestType_STATUS_RESTAPI,
		SignalRRequestType_STATUS_ServerConnection,
		SignalRRequestType_STATUS_Trace))
}

func Test_PrivateEndpointACL_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointACL_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointACL_STATUSARM, PrivateEndpointACL_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointACL_STATUSARM runs a test to see if a specific instance of PrivateEndpointACL_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointACL_STATUSARM(subject PrivateEndpointACL_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointACL_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointACL_STATUSARM instances for property testing - lazily instantiated by
// PrivateEndpointACL_STATUSARMGenerator()
var privateEndpointACL_STATUSARMGenerator gopter.Gen

// PrivateEndpointACL_STATUSARMGenerator returns a generator of PrivateEndpointACL_STATUSARM instances for property testing.
func PrivateEndpointACL_STATUSARMGenerator() gopter.Gen {
	if privateEndpointACL_STATUSARMGenerator != nil {
		return privateEndpointACL_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointACL_STATUSARM(generators)
	privateEndpointACL_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointACL_STATUSARM{}), generators)

	return privateEndpointACL_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointACL_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointACL_STATUSARM(gens map[string]gopter.Gen) {
	gens["Allow"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_STATUS_ClientConnection,
		SignalRRequestType_STATUS_RESTAPI,
		SignalRRequestType_STATUS_ServerConnection,
		SignalRRequestType_STATUS_Trace))
	gens["Deny"] = gen.SliceOf(gen.OneConstOf(
		SignalRRequestType_STATUS_ClientConnection,
		SignalRRequestType_STATUS_RESTAPI,
		SignalRRequestType_STATUS_ServerConnection,
		SignalRRequestType_STATUS_Trace))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceLogCategory_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLogCategory_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLogCategory_STATUSARM, ResourceLogCategory_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLogCategory_STATUSARM runs a test to see if a specific instance of ResourceLogCategory_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLogCategory_STATUSARM(subject ResourceLogCategory_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLogCategory_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLogCategory_STATUSARM instances for property testing - lazily instantiated by
// ResourceLogCategory_STATUSARMGenerator()
var resourceLogCategory_STATUSARMGenerator gopter.Gen

// ResourceLogCategory_STATUSARMGenerator returns a generator of ResourceLogCategory_STATUSARM instances for property testing.
func ResourceLogCategory_STATUSARMGenerator() gopter.Gen {
	if resourceLogCategory_STATUSARMGenerator != nil {
		return resourceLogCategory_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLogCategory_STATUSARM(generators)
	resourceLogCategory_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceLogCategory_STATUSARM{}), generators)

	return resourceLogCategory_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceLogCategory_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceLogCategory_STATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpstreamTemplate_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpstreamTemplate_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpstreamTemplate_STATUSARM, UpstreamTemplate_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpstreamTemplate_STATUSARM runs a test to see if a specific instance of UpstreamTemplate_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpstreamTemplate_STATUSARM(subject UpstreamTemplate_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpstreamTemplate_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpstreamTemplate_STATUSARM instances for property testing - lazily instantiated by
// UpstreamTemplate_STATUSARMGenerator()
var upstreamTemplate_STATUSARMGenerator gopter.Gen

// UpstreamTemplate_STATUSARMGenerator returns a generator of UpstreamTemplate_STATUSARM instances for property testing.
// We first initialize upstreamTemplate_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpstreamTemplate_STATUSARMGenerator() gopter.Gen {
	if upstreamTemplate_STATUSARMGenerator != nil {
		return upstreamTemplate_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamTemplate_STATUSARM(generators)
	upstreamTemplate_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UpstreamTemplate_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamTemplate_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForUpstreamTemplate_STATUSARM(generators)
	upstreamTemplate_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UpstreamTemplate_STATUSARM{}), generators)

	return upstreamTemplate_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUpstreamTemplate_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpstreamTemplate_STATUSARM(gens map[string]gopter.Gen) {
	gens["CategoryPattern"] = gen.PtrOf(gen.AlphaString())
	gens["EventPattern"] = gen.PtrOf(gen.AlphaString())
	gens["HubPattern"] = gen.PtrOf(gen.AlphaString())
	gens["UrlTemplate"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUpstreamTemplate_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpstreamTemplate_STATUSARM(gens map[string]gopter.Gen) {
	gens["Auth"] = gen.PtrOf(UpstreamAuthSettings_STATUSARMGenerator())
}

func Test_UpstreamAuthSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpstreamAuthSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpstreamAuthSettings_STATUSARM, UpstreamAuthSettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpstreamAuthSettings_STATUSARM runs a test to see if a specific instance of UpstreamAuthSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpstreamAuthSettings_STATUSARM(subject UpstreamAuthSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpstreamAuthSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpstreamAuthSettings_STATUSARM instances for property testing - lazily instantiated by
// UpstreamAuthSettings_STATUSARMGenerator()
var upstreamAuthSettings_STATUSARMGenerator gopter.Gen

// UpstreamAuthSettings_STATUSARMGenerator returns a generator of UpstreamAuthSettings_STATUSARM instances for property testing.
// We first initialize upstreamAuthSettings_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpstreamAuthSettings_STATUSARMGenerator() gopter.Gen {
	if upstreamAuthSettings_STATUSARMGenerator != nil {
		return upstreamAuthSettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamAuthSettings_STATUSARM(generators)
	upstreamAuthSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UpstreamAuthSettings_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamAuthSettings_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForUpstreamAuthSettings_STATUSARM(generators)
	upstreamAuthSettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UpstreamAuthSettings_STATUSARM{}), generators)

	return upstreamAuthSettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUpstreamAuthSettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpstreamAuthSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(UpstreamAuthType_STATUS_ManagedIdentity, UpstreamAuthType_STATUS_None))
}

// AddRelatedPropertyGeneratorsForUpstreamAuthSettings_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpstreamAuthSettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["ManagedIdentity"] = gen.PtrOf(ManagedIdentitySettings_STATUSARMGenerator())
}

func Test_ManagedIdentitySettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentitySettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentitySettings_STATUSARM, ManagedIdentitySettings_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentitySettings_STATUSARM runs a test to see if a specific instance of ManagedIdentitySettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentitySettings_STATUSARM(subject ManagedIdentitySettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentitySettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentitySettings_STATUSARM instances for property testing - lazily instantiated by
// ManagedIdentitySettings_STATUSARMGenerator()
var managedIdentitySettings_STATUSARMGenerator gopter.Gen

// ManagedIdentitySettings_STATUSARMGenerator returns a generator of ManagedIdentitySettings_STATUSARM instances for property testing.
func ManagedIdentitySettings_STATUSARMGenerator() gopter.Gen {
	if managedIdentitySettings_STATUSARMGenerator != nil {
		return managedIdentitySettings_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentitySettings_STATUSARM(generators)
	managedIdentitySettings_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentitySettings_STATUSARM{}), generators)

	return managedIdentitySettings_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentitySettings_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentitySettings_STATUSARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(gen.AlphaString())
}
