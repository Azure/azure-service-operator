// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211001

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type SignalR_SPECARM struct {
	AzureName string `json:"azureName"`

	//Identity: The managed identity response
	Identity *ManagedIdentity_SpecARM `json:"identity,omitempty"`

	//Kind: The kind of the service - e.g. "SignalR" for
	//"Microsoft.SignalRService/SignalR"
	Kind *ServiceKind_Spec `json:"kind,omitempty"`

	//Location: The GEO location of the resource. e.g. West US | East US | North
	//Central US | South Central US.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name"`

	//Properties: Settings used to provision or configure the resource
	Properties *SignalRProperties_SpecARM `json:"properties,omitempty"`

	//Sku: The billing information of the resource.(e.g. Free, Standard)
	Sku *ResourceSku_SpecARM `json:"sku,omitempty"`

	//Tags: Tags of the service which is a list of key value pairs that describe the
	//resource.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &SignalR_SPECARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-10-01"
func (specarm SignalR_SPECARM) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetName returns the Name of the resource
func (specarm SignalR_SPECARM) GetName() string {
	return specarm.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.SignalRService/signalR"
func (specarm SignalR_SPECARM) GetType() string {
	return "Microsoft.SignalRService/signalR"
}

type ManagedIdentity_SpecARM struct {
	//Type: Represent the identity type: systemAssigned, userAssigned, None
	Type *ManagedIdentityType_Spec `json:"type,omitempty"`
}

type ResourceSku_SpecARM struct {
	//Capacity: Optional, integer. The unit count of the resource. 1 by default.
	//If present, following values are allowed:
	//Free: 1
	//Standard: 1,2,5,10,20,50,100
	Capacity *int `json:"capacity,omitempty"`

	//Name: The name of the SKU. Required.
	//Allowed values: Standard_S1, Free_F1
	Name string `json:"name"`

	//Tier: Optional tier of this particular SKU. 'Standard' or 'Free'.
	//`Basic` is deprecated, use `Standard` instead.
	Tier *SignalRSkuTier_Spec `json:"tier,omitempty"`
}

// +kubebuilder:validation:Enum={"RawWebSockets","SignalR"}
type ServiceKind_Spec string

const (
	ServiceKind_SpecRawWebSockets = ServiceKind_Spec("RawWebSockets")
	ServiceKind_SpecSignalR       = ServiceKind_Spec("SignalR")
)

type SignalRProperties_SpecARM struct {
	//Cors: Cross-Origin Resource Sharing (CORS) settings.
	Cors *SignalRCorsSettings_SpecARM `json:"cors,omitempty"`

	//DisableAadAuth: DisableLocalAuth
	//Enable or disable aad auth
	//When set as true, connection with AuthType=aad won't work.
	DisableAadAuth *bool `json:"disableAadAuth,omitempty"`

	//DisableLocalAuth: DisableLocalAuth
	//Enable or disable local auth with AccessKey
	//When set as true, connection with AccessKey=xxx won't work.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	//Features: List of the featureFlags.
	//FeatureFlags that are not included in the parameters for the update operation
	//will not be modified.
	//And the response will only include featureFlags that are explicitly set.
	//When a featureFlag is not explicitly set, its globally default value will be used
	//But keep in mind, the default value doesn't mean "false". It varies in terms of
	//different FeatureFlags.
	Features []SignalRFeature_SpecARM `json:"features,omitempty"`

	//NetworkACLs: Network ACLs
	NetworkACLs *SignalRNetworkACLs_SpecARM `json:"networkACLs,omitempty"`

	//PublicNetworkAccess: Enable or disable public network access. Default to
	//"Enabled".
	//When it's Enabled, network ACLs still apply.
	//When it's Disabled, public network access is always disabled no matter what you
	//set in network ACLs.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`

	//ResourceLogConfiguration: Resource log configuration of a
	//Microsoft.SignalRService resource.
	//If resourceLogConfiguration isn't null or empty, it will override options
	//"EnableConnectivityLog" and "EnableMessagingLogs" in features.
	//Otherwise, use options "EnableConnectivityLog" and "EnableMessagingLogs" in
	//features.
	ResourceLogConfiguration *ResourceLogConfiguration_SpecARM `json:"resourceLogConfiguration,omitempty"`

	//Tls: TLS settings.
	Tls *SignalRTlsSettings_SpecARM `json:"tls,omitempty"`

	//Upstream: Upstream settings when the service is in server-less mode.
	Upstream *ServerlessUpstreamSettings_SpecARM `json:"upstream,omitempty"`
}

// +kubebuilder:validation:Enum={"None","SystemAssigned","UserAssigned"}
type ManagedIdentityType_Spec string

const (
	ManagedIdentityType_SpecNone           = ManagedIdentityType_Spec("None")
	ManagedIdentityType_SpecSystemAssigned = ManagedIdentityType_Spec("SystemAssigned")
	ManagedIdentityType_SpecUserAssigned   = ManagedIdentityType_Spec("UserAssigned")
)

type ResourceLogConfiguration_SpecARM struct {
	//Categories: Gets or sets the list of category configurations.
	Categories []ResourceLogCategory_SpecARM `json:"categories,omitempty"`
}

type ServerlessUpstreamSettings_SpecARM struct {
	//Templates: Gets or sets the list of Upstream URL templates. Order matters, and
	//the first matching template takes effects.
	Templates []UpstreamTemplate_SpecARM `json:"templates,omitempty"`
}

type SignalRCorsSettings_SpecARM struct {
	//AllowedOrigins: Gets or sets the list of origins that should be allowed to make
	//cross-origin calls (for example: http://example.com:12345). Use "*" to allow
	//all. If omitted, allow all by default.
	AllowedOrigins []string `json:"allowedOrigins,omitempty"`
}

type SignalRFeature_SpecARM struct {
	//Flag: FeatureFlags is the supported features of Azure SignalR service.
	//- ServiceMode: Flag for backend server for SignalR service. Values allowed:
	//"Default": have your own backend server; "Serverless": your application doesn't
	//have a backend server; "Classic": for backward compatibility. Support both
	//Default and Serverless mode but not recommended; "PredefinedOnly": for future
	//use.
	//- EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log
	//category respectively.
	//- EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log
	//category respectively.
	//- EnableLiveTrace: Live Trace allows you to know what's happening inside Azure
	//SignalR service, it will give you live traces in real time, it will be helpful
	//when you developing your own Azure SignalR based web application or
	//self-troubleshooting some issues. Please note that live traces are counted as
	//outbound messages that will be charged. Values allowed: "true"/"false", to
	//enable/disable live trace feature.
	Flag FeatureFlags_Spec `json:"flag"`

	//Properties: Optional properties related to this feature.
	Properties map[string]string `json:"properties,omitempty"`

	//Value: Value of the feature flag. See Azure SignalR service document
	//https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value string `json:"value"`
}

type SignalRNetworkACLs_SpecARM struct {
	//DefaultAction: Default action when no other rule matches
	DefaultAction *ACLAction_Spec `json:"defaultAction,omitempty"`

	//PrivateEndpoints: ACLs for requests from private endpoints
	PrivateEndpoints []PrivateEndpointACL_SpecARM `json:"privateEndpoints,omitempty"`

	//PublicNetwork: ACL for requests from public network
	PublicNetwork *NetworkACL_SpecARM `json:"publicNetwork,omitempty"`
}

// +kubebuilder:validation:Enum={"Basic","Free","Premium","Standard"}
type SignalRSkuTier_Spec string

const (
	SignalRSkuTier_SpecBasic    = SignalRSkuTier_Spec("Basic")
	SignalRSkuTier_SpecFree     = SignalRSkuTier_Spec("Free")
	SignalRSkuTier_SpecPremium  = SignalRSkuTier_Spec("Premium")
	SignalRSkuTier_SpecStandard = SignalRSkuTier_Spec("Standard")
)

type SignalRTlsSettings_SpecARM struct {
	//ClientCertEnabled: Request client certificate during TLS handshake if enabled
	ClientCertEnabled *bool `json:"clientCertEnabled,omitempty"`
}

type NetworkACL_SpecARM struct {
	//Allow: Allowed request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Allow []SignalRRequestType_Spec `json:"allow,omitempty"`

	//Deny: Denied request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Deny []SignalRRequestType_Spec `json:"deny,omitempty"`
}

type PrivateEndpointACL_SpecARM struct {
	//Allow: Allowed request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Allow []SignalRRequestType_Spec `json:"allow,omitempty"`

	//Deny: Denied request types. The value can be one or more of: ClientConnection,
	//ServerConnection, RESTAPI.
	Deny []SignalRRequestType_Spec `json:"deny,omitempty"`

	//Name: Name of the private endpoint connection
	Name string `json:"name"`
}

type ResourceLogCategory_SpecARM struct {
	//Enabled: Indicates whether or the resource log category is enabled.
	//Available values: true, false.
	//Case insensitive.
	Enabled *string `json:"enabled,omitempty"`

	//Name: Gets or sets the resource log category's name.
	//Available values: ConnectivityLogs, MessagingLogs.
	//Case insensitive.
	Name *string `json:"name,omitempty"`
}

type UpstreamTemplate_SpecARM struct {
	//Auth: Gets or sets the auth settings for an upstream. If not set, no auth is
	//used for upstream messages.
	Auth *UpstreamAuthSettings_SpecARM `json:"auth,omitempty"`

	//CategoryPattern: Gets or sets the matching pattern for category names. If not
	//set, it matches any category.
	//There are 3 kind of patterns supported:
	//1. "*", it to matches any category name
	//2. Combine multiple categories with ",", for example "connections,messages", it
	//matches category "connections" and "messages"
	//3. The single category name, for example, "connections", it matches the category
	//"connections"
	CategoryPattern *string `json:"categoryPattern,omitempty"`

	//EventPattern: Gets or sets the matching pattern for event names. If not set, it
	//matches any event.
	//There are 3 kind of patterns supported:
	//1. "*", it to matches any event name
	//2. Combine multiple events with ",", for example "connect,disconnect", it
	//matches event "connect" and "disconnect"
	//3. The single event name, for example, "connect", it matches "connect"
	EventPattern *string `json:"eventPattern,omitempty"`

	//HubPattern: Gets or sets the matching pattern for hub names. If not set, it
	//matches any hub.
	//There are 3 kind of patterns supported:
	//1. "*", it to matches any hub name
	//2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1"
	//and "hub2"
	//3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern *string `json:"hubPattern,omitempty"`

	//UrlTemplate: Gets or sets the Upstream URL template. You can use 3 predefined
	//parameters {hub}, {category} {event} inside the template, the value of the
	//Upstream URL is dynamically calculated when the client request comes in.
	//For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with
	//a client request from hub `chat` connects, it will first POST to this URL:
	//`http://example.com/chat/api/connect`.
	UrlTemplate string `json:"urlTemplate"`
}

type UpstreamAuthSettings_SpecARM struct {
	//ManagedIdentity: Gets or sets the managed identity settings. It's required if
	//the auth type is set to ManagedIdentity.
	ManagedIdentity *ManagedIdentitySettings_SpecARM `json:"managedIdentity,omitempty"`

	//Type: Gets or sets the type of auth. None or ManagedIdentity is supported now.
	Type *UpstreamAuthType_Spec `json:"type,omitempty"`
}

type ManagedIdentitySettings_SpecARM struct {
	//Resource: The Resource indicating the App ID URI of the target resource.
	//It also appears in the aud (audience) claim of the issued token.
	Resource *string `json:"resource,omitempty"`
}
