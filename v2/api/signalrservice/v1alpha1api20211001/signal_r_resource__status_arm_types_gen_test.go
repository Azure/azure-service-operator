// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20211001

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SignalRResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRResource_StatusARM, SignalRResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRResource_StatusARM runs a test to see if a specific instance of SignalRResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRResource_StatusARM(subject SignalRResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRResource_StatusARM instances for property testing - lazily instantiated by
//SignalRResource_StatusARMGenerator()
var signalRResource_statusARMGenerator gopter.Gen

// SignalRResource_StatusARMGenerator returns a generator of SignalRResource_StatusARM instances for property testing.
// We first initialize signalRResource_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRResource_StatusARMGenerator() gopter.Gen {
	if signalRResource_statusARMGenerator != nil {
		return signalRResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRResource_StatusARM(generators)
	signalRResource_statusARMGenerator = gen.Struct(reflect.TypeOf(SignalRResource_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRResource_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSignalRResource_StatusARM(generators)
	signalRResource_statusARMGenerator = gen.Struct(reflect.TypeOf(SignalRResource_StatusARM{}), generators)

	return signalRResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSignalRResource_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRResource_StatusARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedIdentity_StatusARMGenerator())
	gens["Properties"] = gen.PtrOf(SignalRProperties_StatusARMGenerator())
	gens["Sku"] = gen.PtrOf(ResourceSku_StatusARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_StatusARMGenerator())
}

func Test_ManagedIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentity_StatusARM, ManagedIdentity_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentity_StatusARM runs a test to see if a specific instance of ManagedIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentity_StatusARM(subject ManagedIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentity_StatusARM instances for property testing - lazily instantiated by
//ManagedIdentity_StatusARMGenerator()
var managedIdentity_statusARMGenerator gopter.Gen

// ManagedIdentity_StatusARMGenerator returns a generator of ManagedIdentity_StatusARM instances for property testing.
// We first initialize managedIdentity_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedIdentity_StatusARMGenerator() gopter.Gen {
	if managedIdentity_statusARMGenerator != nil {
		return managedIdentity_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentity_StatusARM(generators)
	managedIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentity_StatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedIdentity_StatusARM(generators)
	managedIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentity_StatusARM{}), generators)

	return managedIdentity_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentity_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedIdentity_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), UserAssignedIdentityProperty_StatusARMGenerator())
}

func Test_ResourceSku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceSku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceSku_StatusARM, ResourceSku_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceSku_StatusARM runs a test to see if a specific instance of ResourceSku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceSku_StatusARM(subject ResourceSku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceSku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceSku_StatusARM instances for property testing - lazily instantiated by
//ResourceSku_StatusARMGenerator()
var resourceSku_statusARMGenerator gopter.Gen

// ResourceSku_StatusARMGenerator returns a generator of ResourceSku_StatusARM instances for property testing.
func ResourceSku_StatusARMGenerator() gopter.Gen {
	if resourceSku_statusARMGenerator != nil {
		return resourceSku_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceSku_StatusARM(generators)
	resourceSku_statusARMGenerator = gen.Struct(reflect.TypeOf(ResourceSku_StatusARM{}), generators)

	return resourceSku_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceSku_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceSku_StatusARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_SignalRProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRProperties_StatusARM, SignalRProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRProperties_StatusARM runs a test to see if a specific instance of SignalRProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRProperties_StatusARM(subject SignalRProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRProperties_StatusARM instances for property testing - lazily instantiated by
//SignalRProperties_StatusARMGenerator()
var signalRProperties_statusARMGenerator gopter.Gen

// SignalRProperties_StatusARMGenerator returns a generator of SignalRProperties_StatusARM instances for property testing.
// We first initialize signalRProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRProperties_StatusARMGenerator() gopter.Gen {
	if signalRProperties_statusARMGenerator != nil {
		return signalRProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRProperties_StatusARM(generators)
	signalRProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(SignalRProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSignalRProperties_StatusARM(generators)
	signalRProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(SignalRProperties_StatusARM{}), generators)

	return signalRProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["DisableAadAuth"] = gen.PtrOf(gen.Bool())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["ExternalIP"] = gen.PtrOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HostNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
	gens["PublicPort"] = gen.PtrOf(gen.Int())
	gens["ServerPort"] = gen.PtrOf(gen.Int())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSignalRProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Cors"] = gen.PtrOf(SignalRCorsSettings_StatusARMGenerator())
	gens["Features"] = gen.SliceOf(SignalRFeature_StatusARMGenerator())
	gens["NetworkACLs"] = gen.PtrOf(SignalRNetworkACLs_StatusARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARMGenerator())
	gens["ResourceLogConfiguration"] = gen.PtrOf(ResourceLogConfiguration_StatusARMGenerator())
	gens["SharedPrivateLinkResources"] = gen.SliceOf(SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARMGenerator())
	gens["Tls"] = gen.PtrOf(SignalRTlsSettings_StatusARMGenerator())
	gens["Upstream"] = gen.PtrOf(ServerlessUpstreamSettings_StatusARMGenerator())
}

func Test_SystemData_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_StatusARM, SystemData_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_StatusARM runs a test to see if a specific instance of SystemData_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_StatusARM(subject SystemData_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_StatusARM instances for property testing - lazily instantiated by
//SystemData_StatusARMGenerator()
var systemData_statusARMGenerator gopter.Gen

// SystemData_StatusARMGenerator returns a generator of SystemData_StatusARM instances for property testing.
func SystemData_StatusARMGenerator() gopter.Gen {
	if systemData_statusARMGenerator != nil {
		return systemData_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_StatusARM(generators)
	systemData_statusARMGenerator = gen.Struct(reflect.TypeOf(SystemData_StatusARM{}), generators)

	return systemData_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_StatusARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM, PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM(subject PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARMGenerator()
var privateEndpointConnection_status_signalR_subResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpointConnection_status_signalR_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointConnection_status_signalR_subResourceEmbeddedARMGenerator != nil {
		return privateEndpointConnection_status_signalR_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM(generators)
	privateEndpointConnection_status_signalR_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM(generators)
	privateEndpointConnection_status_signalR_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM{}), generators)

	return privateEndpointConnection_status_signalR_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_StatusARMGenerator())
}

func Test_ResourceLogConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLogConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLogConfiguration_StatusARM, ResourceLogConfiguration_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLogConfiguration_StatusARM runs a test to see if a specific instance of ResourceLogConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLogConfiguration_StatusARM(subject ResourceLogConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLogConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLogConfiguration_StatusARM instances for property testing - lazily instantiated by
//ResourceLogConfiguration_StatusARMGenerator()
var resourceLogConfiguration_statusARMGenerator gopter.Gen

// ResourceLogConfiguration_StatusARMGenerator returns a generator of ResourceLogConfiguration_StatusARM instances for property testing.
func ResourceLogConfiguration_StatusARMGenerator() gopter.Gen {
	if resourceLogConfiguration_statusARMGenerator != nil {
		return resourceLogConfiguration_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceLogConfiguration_StatusARM(generators)
	resourceLogConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(ResourceLogConfiguration_StatusARM{}), generators)

	return resourceLogConfiguration_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForResourceLogConfiguration_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceLogConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["Categories"] = gen.SliceOf(ResourceLogCategory_StatusARMGenerator())
}

func Test_ServerlessUpstreamSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerlessUpstreamSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerlessUpstreamSettings_StatusARM, ServerlessUpstreamSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerlessUpstreamSettings_StatusARM runs a test to see if a specific instance of ServerlessUpstreamSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerlessUpstreamSettings_StatusARM(subject ServerlessUpstreamSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerlessUpstreamSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerlessUpstreamSettings_StatusARM instances for property testing - lazily instantiated by
//ServerlessUpstreamSettings_StatusARMGenerator()
var serverlessUpstreamSettings_statusARMGenerator gopter.Gen

// ServerlessUpstreamSettings_StatusARMGenerator returns a generator of ServerlessUpstreamSettings_StatusARM instances for property testing.
func ServerlessUpstreamSettings_StatusARMGenerator() gopter.Gen {
	if serverlessUpstreamSettings_statusARMGenerator != nil {
		return serverlessUpstreamSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServerlessUpstreamSettings_StatusARM(generators)
	serverlessUpstreamSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(ServerlessUpstreamSettings_StatusARM{}), generators)

	return serverlessUpstreamSettings_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForServerlessUpstreamSettings_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerlessUpstreamSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["Templates"] = gen.SliceOf(UpstreamTemplate_StatusARMGenerator())
}

func Test_SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM, SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM runs a test to see if a specific instance of SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM(subject SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM instances for property testing - lazily
//instantiated by SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARMGenerator()
var sharedPrivateLinkResource_status_signalR_subResourceEmbeddedARMGenerator gopter.Gen

// SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARMGenerator returns a generator of SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM instances for property testing.
// We first initialize sharedPrivateLinkResource_status_signalR_subResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if sharedPrivateLinkResource_status_signalR_subResourceEmbeddedARMGenerator != nil {
		return sharedPrivateLinkResource_status_signalR_subResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM(generators)
	sharedPrivateLinkResource_status_signalR_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM(generators)
	sharedPrivateLinkResource_status_signalR_subResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM{}), generators)

	return sharedPrivateLinkResource_status_signalR_subResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_StatusARMGenerator())
}

func Test_SignalRCorsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRCorsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRCorsSettings_StatusARM, SignalRCorsSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRCorsSettings_StatusARM runs a test to see if a specific instance of SignalRCorsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRCorsSettings_StatusARM(subject SignalRCorsSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRCorsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRCorsSettings_StatusARM instances for property testing - lazily instantiated by
//SignalRCorsSettings_StatusARMGenerator()
var signalRCorsSettings_statusARMGenerator gopter.Gen

// SignalRCorsSettings_StatusARMGenerator returns a generator of SignalRCorsSettings_StatusARM instances for property testing.
func SignalRCorsSettings_StatusARMGenerator() gopter.Gen {
	if signalRCorsSettings_statusARMGenerator != nil {
		return signalRCorsSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRCorsSettings_StatusARM(generators)
	signalRCorsSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(SignalRCorsSettings_StatusARM{}), generators)

	return signalRCorsSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRCorsSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRCorsSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
}

func Test_SignalRFeature_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRFeature_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRFeature_StatusARM, SignalRFeature_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRFeature_StatusARM runs a test to see if a specific instance of SignalRFeature_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRFeature_StatusARM(subject SignalRFeature_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRFeature_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRFeature_StatusARM instances for property testing - lazily instantiated by
//SignalRFeature_StatusARMGenerator()
var signalRFeature_statusARMGenerator gopter.Gen

// SignalRFeature_StatusARMGenerator returns a generator of SignalRFeature_StatusARM instances for property testing.
func SignalRFeature_StatusARMGenerator() gopter.Gen {
	if signalRFeature_statusARMGenerator != nil {
		return signalRFeature_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRFeature_StatusARM(generators)
	signalRFeature_statusARMGenerator = gen.Struct(reflect.TypeOf(SignalRFeature_StatusARM{}), generators)

	return signalRFeature_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRFeature_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRFeature_StatusARM(gens map[string]gopter.Gen) {
	gens["Flag"] = gen.AlphaString()
	gens["Properties"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Value"] = gen.AlphaString()
}

func Test_SignalRNetworkACLs_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRNetworkACLs_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRNetworkACLs_StatusARM, SignalRNetworkACLs_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRNetworkACLs_StatusARM runs a test to see if a specific instance of SignalRNetworkACLs_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRNetworkACLs_StatusARM(subject SignalRNetworkACLs_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRNetworkACLs_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRNetworkACLs_StatusARM instances for property testing - lazily instantiated by
//SignalRNetworkACLs_StatusARMGenerator()
var signalRNetworkACLs_statusARMGenerator gopter.Gen

// SignalRNetworkACLs_StatusARMGenerator returns a generator of SignalRNetworkACLs_StatusARM instances for property testing.
// We first initialize signalRNetworkACLs_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SignalRNetworkACLs_StatusARMGenerator() gopter.Gen {
	if signalRNetworkACLs_statusARMGenerator != nil {
		return signalRNetworkACLs_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRNetworkACLs_StatusARM(generators)
	signalRNetworkACLs_statusARMGenerator = gen.Struct(reflect.TypeOf(SignalRNetworkACLs_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRNetworkACLs_StatusARM(generators)
	AddRelatedPropertyGeneratorsForSignalRNetworkACLs_StatusARM(generators)
	signalRNetworkACLs_statusARMGenerator = gen.Struct(reflect.TypeOf(SignalRNetworkACLs_StatusARM{}), generators)

	return signalRNetworkACLs_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRNetworkACLs_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRNetworkACLs_StatusARM(gens map[string]gopter.Gen) {
	gens["DefaultAction"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSignalRNetworkACLs_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSignalRNetworkACLs_StatusARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoints"] = gen.SliceOf(PrivateEndpointACL_StatusARMGenerator())
	gens["PublicNetwork"] = gen.PtrOf(NetworkACL_StatusARMGenerator())
}

func Test_SignalRTlsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SignalRTlsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSignalRTlsSettings_StatusARM, SignalRTlsSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSignalRTlsSettings_StatusARM runs a test to see if a specific instance of SignalRTlsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSignalRTlsSettings_StatusARM(subject SignalRTlsSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SignalRTlsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SignalRTlsSettings_StatusARM instances for property testing - lazily instantiated by
//SignalRTlsSettings_StatusARMGenerator()
var signalRTlsSettings_statusARMGenerator gopter.Gen

// SignalRTlsSettings_StatusARMGenerator returns a generator of SignalRTlsSettings_StatusARM instances for property testing.
func SignalRTlsSettings_StatusARMGenerator() gopter.Gen {
	if signalRTlsSettings_statusARMGenerator != nil {
		return signalRTlsSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSignalRTlsSettings_StatusARM(generators)
	signalRTlsSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(SignalRTlsSettings_StatusARM{}), generators)

	return signalRTlsSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSignalRTlsSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSignalRTlsSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["ClientCertEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_UserAssignedIdentityProperty_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentityProperty_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentityProperty_StatusARM, UserAssignedIdentityProperty_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentityProperty_StatusARM runs a test to see if a specific instance of UserAssignedIdentityProperty_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentityProperty_StatusARM(subject UserAssignedIdentityProperty_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentityProperty_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentityProperty_StatusARM instances for property testing - lazily instantiated by
//UserAssignedIdentityProperty_StatusARMGenerator()
var userAssignedIdentityProperty_statusARMGenerator gopter.Gen

// UserAssignedIdentityProperty_StatusARMGenerator returns a generator of UserAssignedIdentityProperty_StatusARM instances for property testing.
func UserAssignedIdentityProperty_StatusARMGenerator() gopter.Gen {
	if userAssignedIdentityProperty_statusARMGenerator != nil {
		return userAssignedIdentityProperty_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentityProperty_StatusARM(generators)
	userAssignedIdentityProperty_statusARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentityProperty_StatusARM{}), generators)

	return userAssignedIdentityProperty_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentityProperty_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentityProperty_StatusARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkACL_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkACL_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkACL_StatusARM, NetworkACL_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkACL_StatusARM runs a test to see if a specific instance of NetworkACL_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkACL_StatusARM(subject NetworkACL_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkACL_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkACL_StatusARM instances for property testing - lazily instantiated by
//NetworkACL_StatusARMGenerator()
var networkACL_statusARMGenerator gopter.Gen

// NetworkACL_StatusARMGenerator returns a generator of NetworkACL_StatusARM instances for property testing.
func NetworkACL_StatusARMGenerator() gopter.Gen {
	if networkACL_statusARMGenerator != nil {
		return networkACL_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkACL_StatusARM(generators)
	networkACL_statusARMGenerator = gen.Struct(reflect.TypeOf(NetworkACL_StatusARM{}), generators)

	return networkACL_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkACL_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkACL_StatusARM(gens map[string]gopter.Gen) {
	gens["Allow"] = gen.SliceOf(gen.AlphaString())
	gens["Deny"] = gen.SliceOf(gen.AlphaString())
}

func Test_PrivateEndpointACL_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointACL_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointACL_StatusARM, PrivateEndpointACL_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointACL_StatusARM runs a test to see if a specific instance of PrivateEndpointACL_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointACL_StatusARM(subject PrivateEndpointACL_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointACL_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointACL_StatusARM instances for property testing - lazily instantiated by
//PrivateEndpointACL_StatusARMGenerator()
var privateEndpointACL_statusARMGenerator gopter.Gen

// PrivateEndpointACL_StatusARMGenerator returns a generator of PrivateEndpointACL_StatusARM instances for property testing.
func PrivateEndpointACL_StatusARMGenerator() gopter.Gen {
	if privateEndpointACL_statusARMGenerator != nil {
		return privateEndpointACL_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointACL_StatusARM(generators)
	privateEndpointACL_statusARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointACL_StatusARM{}), generators)

	return privateEndpointACL_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointACL_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointACL_StatusARM(gens map[string]gopter.Gen) {
	gens["Allow"] = gen.SliceOf(gen.AlphaString())
	gens["Deny"] = gen.SliceOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

func Test_ResourceLogCategory_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLogCategory_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLogCategory_StatusARM, ResourceLogCategory_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLogCategory_StatusARM runs a test to see if a specific instance of ResourceLogCategory_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLogCategory_StatusARM(subject ResourceLogCategory_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLogCategory_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLogCategory_StatusARM instances for property testing - lazily instantiated by
//ResourceLogCategory_StatusARMGenerator()
var resourceLogCategory_statusARMGenerator gopter.Gen

// ResourceLogCategory_StatusARMGenerator returns a generator of ResourceLogCategory_StatusARM instances for property testing.
func ResourceLogCategory_StatusARMGenerator() gopter.Gen {
	if resourceLogCategory_statusARMGenerator != nil {
		return resourceLogCategory_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLogCategory_StatusARM(generators)
	resourceLogCategory_statusARMGenerator = gen.Struct(reflect.TypeOf(ResourceLogCategory_StatusARM{}), generators)

	return resourceLogCategory_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceLogCategory_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceLogCategory_StatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpstreamTemplate_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpstreamTemplate_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpstreamTemplate_StatusARM, UpstreamTemplate_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpstreamTemplate_StatusARM runs a test to see if a specific instance of UpstreamTemplate_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpstreamTemplate_StatusARM(subject UpstreamTemplate_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpstreamTemplate_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpstreamTemplate_StatusARM instances for property testing - lazily instantiated by
//UpstreamTemplate_StatusARMGenerator()
var upstreamTemplate_statusARMGenerator gopter.Gen

// UpstreamTemplate_StatusARMGenerator returns a generator of UpstreamTemplate_StatusARM instances for property testing.
// We first initialize upstreamTemplate_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpstreamTemplate_StatusARMGenerator() gopter.Gen {
	if upstreamTemplate_statusARMGenerator != nil {
		return upstreamTemplate_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamTemplate_StatusARM(generators)
	upstreamTemplate_statusARMGenerator = gen.Struct(reflect.TypeOf(UpstreamTemplate_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamTemplate_StatusARM(generators)
	AddRelatedPropertyGeneratorsForUpstreamTemplate_StatusARM(generators)
	upstreamTemplate_statusARMGenerator = gen.Struct(reflect.TypeOf(UpstreamTemplate_StatusARM{}), generators)

	return upstreamTemplate_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForUpstreamTemplate_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpstreamTemplate_StatusARM(gens map[string]gopter.Gen) {
	gens["CategoryPattern"] = gen.PtrOf(gen.AlphaString())
	gens["EventPattern"] = gen.PtrOf(gen.AlphaString())
	gens["HubPattern"] = gen.PtrOf(gen.AlphaString())
	gens["UrlTemplate"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForUpstreamTemplate_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpstreamTemplate_StatusARM(gens map[string]gopter.Gen) {
	gens["Auth"] = gen.PtrOf(UpstreamAuthSettings_StatusARMGenerator())
}

func Test_UpstreamAuthSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpstreamAuthSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpstreamAuthSettings_StatusARM, UpstreamAuthSettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpstreamAuthSettings_StatusARM runs a test to see if a specific instance of UpstreamAuthSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpstreamAuthSettings_StatusARM(subject UpstreamAuthSettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpstreamAuthSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpstreamAuthSettings_StatusARM instances for property testing - lazily instantiated by
//UpstreamAuthSettings_StatusARMGenerator()
var upstreamAuthSettings_statusARMGenerator gopter.Gen

// UpstreamAuthSettings_StatusARMGenerator returns a generator of UpstreamAuthSettings_StatusARM instances for property testing.
// We first initialize upstreamAuthSettings_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpstreamAuthSettings_StatusARMGenerator() gopter.Gen {
	if upstreamAuthSettings_statusARMGenerator != nil {
		return upstreamAuthSettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamAuthSettings_StatusARM(generators)
	upstreamAuthSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(UpstreamAuthSettings_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpstreamAuthSettings_StatusARM(generators)
	AddRelatedPropertyGeneratorsForUpstreamAuthSettings_StatusARM(generators)
	upstreamAuthSettings_statusARMGenerator = gen.Struct(reflect.TypeOf(UpstreamAuthSettings_StatusARM{}), generators)

	return upstreamAuthSettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForUpstreamAuthSettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpstreamAuthSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUpstreamAuthSettings_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpstreamAuthSettings_StatusARM(gens map[string]gopter.Gen) {
	gens["ManagedIdentity"] = gen.PtrOf(ManagedIdentitySettings_StatusARMGenerator())
}

func Test_ManagedIdentitySettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentitySettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentitySettings_StatusARM, ManagedIdentitySettings_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentitySettings_StatusARM runs a test to see if a specific instance of ManagedIdentitySettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentitySettings_StatusARM(subject ManagedIdentitySettings_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentitySettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentitySettings_StatusARM instances for property testing - lazily instantiated by
//ManagedIdentitySettings_StatusARMGenerator()
var managedIdentitySettings_statusARMGenerator gopter.Gen

// ManagedIdentitySettings_StatusARMGenerator returns a generator of ManagedIdentitySettings_StatusARM instances for property testing.
func ManagedIdentitySettings_StatusARMGenerator() gopter.Gen {
	if managedIdentitySettings_statusARMGenerator != nil {
		return managedIdentitySettings_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentitySettings_StatusARM(generators)
	managedIdentitySettings_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentitySettings_StatusARM{}), generators)

	return managedIdentitySettings_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentitySettings_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentitySettings_StatusARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(gen.AlphaString())
}
