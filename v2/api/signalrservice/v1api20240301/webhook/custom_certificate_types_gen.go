// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package webhook

import (
	"context"
	"fmt"
	v20240301 "github.com/Azure/azure-service-operator/v2/api/signalrservice/v1api20240301"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

type CustomCertificate struct {
}

// +kubebuilder:webhook:path=/mutate-signalrservice-azure-com-v1api20240301-customcertificate,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=signalrservice.azure.com,resources=customcertificates,verbs=create;update,versions=v1api20240301,name=default.v1api20240301.customcertificates.signalrservice.azure.com,admissionReviewVersions=v1

var _ webhook.CustomDefaulter = &CustomCertificate{}

// Default applies defaults to the CustomCertificate resource
func (certificate *CustomCertificate) Default(ctx context.Context, obj runtime.Object) error {
	resource, ok := obj.(*v20240301.CustomCertificate)
	if !ok {
		return fmt.Errorf("expected github.com/Azure/azure-service-operator/v2/api/signalrservice/v1api20240301/CustomCertificate, but got %T", obj)
	}
	err := certificate.defaultImpl(ctx, resource)
	if err != nil {
		return err
	}
	var temp any = certificate
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		err = runtimeDefaulter.CustomDefault(ctx, resource)
		if err != nil {
			return err
		}
	}
	return nil
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (certificate *CustomCertificate) defaultAzureName(ctx context.Context, obj *v20240301.CustomCertificate) error {
	if obj.Spec.AzureName == "" {
		obj.Spec.AzureName = obj.Name
	}
	return nil
}

// defaultImpl applies the code generated defaults to the CustomCertificate resource
func (certificate *CustomCertificate) defaultImpl(ctx context.Context, obj *v20240301.CustomCertificate) error {
	err := certificate.defaultAzureName(ctx, obj)
	if err != nil {
		return err
	}
	return nil
}

// +kubebuilder:webhook:path=/validate-signalrservice-azure-com-v1api20240301-customcertificate,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=signalrservice.azure.com,resources=customcertificates,verbs=create;update,versions=v1api20240301,name=validate.v1api20240301.customcertificates.signalrservice.azure.com,admissionReviewVersions=v1

var _ webhook.CustomValidator = &CustomCertificate{}

// ValidateCreate validates the creation of the resource
func (certificate *CustomCertificate) ValidateCreate(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20240301.CustomCertificate)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/v2/api/signalrservice/v1api20240301/CustomCertificate, but got %T", resource)
	}
	validations := certificate.createValidations()
	var temp any = certificate
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20240301.CustomCertificate]); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(ctx, obj, validations)
}

// ValidateDelete validates the deletion of the resource
func (certificate *CustomCertificate) ValidateDelete(ctx context.Context, resource runtime.Object) (admission.Warnings, error) {
	obj, ok := resource.(*v20240301.CustomCertificate)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/v2/api/signalrservice/v1api20240301/CustomCertificate, but got %T", resource)
	}
	validations := certificate.deleteValidations()
	var temp any = certificate
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20240301.CustomCertificate]); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(ctx, obj, validations)
}

// ValidateUpdate validates an update of the resource
func (certificate *CustomCertificate) ValidateUpdate(ctx context.Context, oldResource runtime.Object, newResource runtime.Object) (admission.Warnings, error) {
	newObj, ok := newResource.(*v20240301.CustomCertificate)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/v2/api/signalrservice/v1api20240301/CustomCertificate, but got %T", newResource)
	}
	oldObj, ok := oldResource.(*v20240301.CustomCertificate)
	if !ok {
		return nil, fmt.Errorf("expected github.com/Azure/azure-service-operator/v2/api/signalrservice/v1api20240301/CustomCertificate, but got %T", oldResource)
	}
	validations := certificate.updateValidations()
	var temp any = certificate
	if runtimeValidator, ok := temp.(genruntime.Validator[*v20240301.CustomCertificate]); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(
		ctx,
		oldObj,
		newObj,
		validations)
}

// createValidations validates the creation of the resource
func (certificate *CustomCertificate) createValidations() []func(ctx context.Context, obj *v20240301.CustomCertificate) (admission.Warnings, error) {
	return []func(ctx context.Context, obj *v20240301.CustomCertificate) (admission.Warnings, error){
		certificate.validateResourceReferences,
		certificate.validateOwnerReference,
		certificate.validateSecretDestinations,
		certificate.validateConfigMapDestinations,
		certificate.validateOptionalConfigMapReferences,
	}
}

// deleteValidations validates the deletion of the resource
func (certificate *CustomCertificate) deleteValidations() []func(ctx context.Context, obj *v20240301.CustomCertificate) (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (certificate *CustomCertificate) updateValidations() []func(ctx context.Context, oldObj *v20240301.CustomCertificate, newObj *v20240301.CustomCertificate) (admission.Warnings, error) {
	return []func(ctx context.Context, oldObj *v20240301.CustomCertificate, newObj *v20240301.CustomCertificate) (admission.Warnings, error){
		func(ctx context.Context, oldObj *v20240301.CustomCertificate, newObj *v20240301.CustomCertificate) (admission.Warnings, error) {
			return certificate.validateResourceReferences(ctx, newObj)
		},
		certificate.validateWriteOnceProperties,
		func(ctx context.Context, oldObj *v20240301.CustomCertificate, newObj *v20240301.CustomCertificate) (admission.Warnings, error) {
			return certificate.validateOwnerReference(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20240301.CustomCertificate, newObj *v20240301.CustomCertificate) (admission.Warnings, error) {
			return certificate.validateSecretDestinations(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20240301.CustomCertificate, newObj *v20240301.CustomCertificate) (admission.Warnings, error) {
			return certificate.validateConfigMapDestinations(ctx, newObj)
		},
		func(ctx context.Context, oldObj *v20240301.CustomCertificate, newObj *v20240301.CustomCertificate) (admission.Warnings, error) {
			return certificate.validateOptionalConfigMapReferences(ctx, newObj)
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (certificate *CustomCertificate) validateConfigMapDestinations(ctx context.Context, obj *v20240301.CustomCertificate) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOptionalConfigMapReferences validates all optional configmap reference pairs to ensure that at most 1 is set
func (certificate *CustomCertificate) validateOptionalConfigMapReferences(ctx context.Context, obj *v20240301.CustomCertificate) (admission.Warnings, error) {
	refs, err := reflecthelpers.FindOptionalConfigMapReferences(&obj.Spec)
	if err != nil {
		return nil, err
	}
	return configmaps.ValidateOptionalReferences(refs)
}

// validateOwnerReference validates the owner field
func (certificate *CustomCertificate) validateOwnerReference(ctx context.Context, obj *v20240301.CustomCertificate) (admission.Warnings, error) {
	return genruntime.ValidateOwner(obj)
}

// validateResourceReferences validates all resource references
func (certificate *CustomCertificate) validateResourceReferences(ctx context.Context, obj *v20240301.CustomCertificate) (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&obj.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (certificate *CustomCertificate) validateSecretDestinations(ctx context.Context, obj *v20240301.CustomCertificate) (admission.Warnings, error) {
	if obj.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(obj, nil, obj.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (certificate *CustomCertificate) validateWriteOnceProperties(ctx context.Context, oldObj *v20240301.CustomCertificate, newObj *v20240301.CustomCertificate) (admission.Warnings, error) {
	return genruntime.ValidateWriteOnceProperties(oldObj, newObj)
}
