// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211001

import (
	"fmt"
	v20211001s "github.com/Azure/azure-service-operator/v2/api/signalrservice/v1beta20211001storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/resourceDefinitions/signalR
type SignalR struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SignalR_Spec           `json:"spec,omitempty"`
	Status            SignalRResource_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SignalR{}

// GetConditions returns the conditions of the resource
func (signalR *SignalR) GetConditions() conditions.Conditions {
	return signalR.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (signalR *SignalR) SetConditions(conditions conditions.Conditions) {
	signalR.Status.Conditions = conditions
}

var _ conversion.Convertible = &SignalR{}

// ConvertFrom populates our SignalR from the provided hub SignalR
func (signalR *SignalR) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20211001s.SignalR)
	if !ok {
		return fmt.Errorf("expected signalrservice/v1beta20211001storage/SignalR but received %T instead", hub)
	}

	return signalR.AssignPropertiesFromSignalR(source)
}

// ConvertTo populates the provided hub SignalR from our SignalR
func (signalR *SignalR) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20211001s.SignalR)
	if !ok {
		return fmt.Errorf("expected signalrservice/v1beta20211001storage/SignalR but received %T instead", hub)
	}

	return signalR.AssignPropertiesToSignalR(destination)
}

// +kubebuilder:webhook:path=/mutate-signalrservice-azure-com-v1beta20211001-signalr,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=signalrservice.azure.com,resources=signalrs,verbs=create;update,versions=v1beta20211001,name=default.v1beta20211001.signalrs.signalrservice.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &SignalR{}

// Default applies defaults to the SignalR resource
func (signalR *SignalR) Default() {
	signalR.defaultImpl()
	var temp interface{} = signalR
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (signalR *SignalR) defaultAzureName() {
	if signalR.Spec.AzureName == "" {
		signalR.Spec.AzureName = signalR.Name
	}
}

// defaultImpl applies the code generated defaults to the SignalR resource
func (signalR *SignalR) defaultImpl() { signalR.defaultAzureName() }

var _ genruntime.KubernetesResource = &SignalR{}

// AzureName returns the Azure name of the resource
func (signalR *SignalR) AzureName() string {
	return signalR.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-10-01"
func (signalR SignalR) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (signalR *SignalR) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (signalR *SignalR) GetSpec() genruntime.ConvertibleSpec {
	return &signalR.Spec
}

// GetStatus returns the status of this resource
func (signalR *SignalR) GetStatus() genruntime.ConvertibleStatus {
	return &signalR.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.SignalRService/signalR"
func (signalR *SignalR) GetType() string {
	return "Microsoft.SignalRService/signalR"
}

// NewEmptyStatus returns a new empty (blank) status
func (signalR *SignalR) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SignalRResource_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (signalR *SignalR) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(signalR.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  signalR.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (signalR *SignalR) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SignalRResource_Status); ok {
		signalR.Status = *st
		return nil
	}

	// Convert status to required version
	var st SignalRResource_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	signalR.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-signalrservice-azure-com-v1beta20211001-signalr,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=signalrservice.azure.com,resources=signalrs,verbs=create;update,versions=v1beta20211001,name=validate.v1beta20211001.signalrs.signalrservice.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &SignalR{}

// ValidateCreate validates the creation of the resource
func (signalR *SignalR) ValidateCreate() error {
	validations := signalR.createValidations()
	var temp interface{} = signalR
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (signalR *SignalR) ValidateDelete() error {
	validations := signalR.deleteValidations()
	var temp interface{} = signalR
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (signalR *SignalR) ValidateUpdate(old runtime.Object) error {
	validations := signalR.updateValidations()
	var temp interface{} = signalR
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (signalR *SignalR) createValidations() []func() error {
	return []func() error{signalR.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (signalR *SignalR) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (signalR *SignalR) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return signalR.validateResourceReferences()
		},
		signalR.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (signalR *SignalR) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&signalR.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (signalR *SignalR) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*SignalR)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, signalR)
}

// AssignPropertiesFromSignalR populates our SignalR from the provided source SignalR
func (signalR *SignalR) AssignPropertiesFromSignalR(source *v20211001s.SignalR) error {

	// ObjectMeta
	signalR.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec SignalR_Spec
	err := spec.AssignPropertiesFromSignalRSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSignalRSpec() to populate field Spec")
	}
	signalR.Spec = spec

	// Status
	var status SignalRResource_Status
	err = status.AssignPropertiesFromSignalRResourceStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromSignalRResourceStatus() to populate field Status")
	}
	signalR.Status = status

	// No error
	return nil
}

// AssignPropertiesToSignalR populates the provided destination SignalR from our SignalR
func (signalR *SignalR) AssignPropertiesToSignalR(destination *v20211001s.SignalR) error {

	// ObjectMeta
	destination.ObjectMeta = *signalR.ObjectMeta.DeepCopy()

	// Spec
	var spec v20211001s.SignalR_Spec
	err := signalR.Spec.AssignPropertiesToSignalRSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSignalRSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20211001s.SignalRResource_Status
	err = signalR.Status.AssignPropertiesToSignalRResourceStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSignalRResourceStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (signalR *SignalR) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: signalR.Spec.OriginalVersion(),
		Kind:    "SignalR",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/resourceDefinitions/signalR
type SignalRList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SignalR `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-10-01"}
type APIVersion string

const APIVersionValue = APIVersion("2021-10-01")

type SignalRResource_Status struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition      `json:"conditions,omitempty"`
	Cors       *SignalRCorsSettings_Status `json:"cors,omitempty"`

	// DisableAadAuth: DisableLocalAuth
	// Enable or disable aad auth
	// When set as true, connection with AuthType=aad won't work.
	DisableAadAuth *bool `json:"disableAadAuth,omitempty"`

	// DisableLocalAuth: DisableLocalAuth
	// Enable or disable local auth with AccessKey
	// When set as true, connection with AccessKey=xxx won't work.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// ExternalIP: The publicly accessible IP of the resource.
	ExternalIP *string `json:"externalIP,omitempty"`

	// Features: List of the featureFlags.
	// FeatureFlags that are not included in the parameters for the update operation will not be modified.
	// And the response will only include featureFlags that are explicitly set.
	// When a featureFlag is not explicitly set, its globally default value will be used
	// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
	Features []SignalRFeature_Status `json:"features,omitempty"`

	// HostName: FQDN of the service instance.
	HostName *string `json:"hostName,omitempty"`

	// HostNamePrefix: Deprecated.
	HostNamePrefix *string `json:"hostNamePrefix,omitempty"`

	// Id: Fully qualified resource Id for the resource.
	Id       *string                 `json:"id,omitempty"`
	Identity *ManagedIdentity_Status `json:"identity,omitempty"`
	Kind     *ServiceKind_Status     `json:"kind,omitempty"`

	// Location: The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.
	Location *string `json:"location,omitempty"`

	// Name: The name of the resource.
	Name        *string                    `json:"name,omitempty"`
	NetworkACLs *SignalRNetworkACLs_Status `json:"networkACLs,omitempty"`

	// PrivateEndpointConnections: Private endpoint connections to the resource.
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	ProvisioningState          *ProvisioningState_Status                                      `json:"provisioningState,omitempty"`

	// PublicNetworkAccess: Enable or disable public network access. Default to "Enabled".
	// When it's Enabled, network ACLs still apply.
	// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`

	// PublicPort: The publicly accessible port of the resource which is designed for browser/client side usage.
	PublicPort               *int                             `json:"publicPort,omitempty"`
	ResourceLogConfiguration *ResourceLogConfiguration_Status `json:"resourceLogConfiguration,omitempty"`

	// ServerPort: The publicly accessible port of the resource which is designed for customer server side usage.
	ServerPort *int `json:"serverPort,omitempty"`

	// SharedPrivateLinkResources: The list of shared private link resources.
	SharedPrivateLinkResources []SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded `json:"sharedPrivateLinkResources,omitempty"`
	Sku                        *ResourceSku_Status                                            `json:"sku,omitempty"`
	SystemData                 *SystemData_Status                                             `json:"systemData,omitempty"`

	// Tags: Tags of the service which is a list of key value pairs that describe the resource.
	Tags map[string]string          `json:"tags,omitempty"`
	Tls  *SignalRTlsSettings_Status `json:"tls,omitempty"`

	// Type: The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type     *string                            `json:"type,omitempty"`
	Upstream *ServerlessUpstreamSettings_Status `json:"upstream,omitempty"`

	// Version: Version of the resource. Probably you need the same or higher version of client SDKs.
	Version *string `json:"version,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SignalRResource_Status{}

// ConvertStatusFrom populates our SignalRResource_Status from the provided source
func (resource *SignalRResource_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20211001s.SignalRResource_Status)
	if ok {
		// Populate our instance from source
		return resource.AssignPropertiesFromSignalRResourceStatus(src)
	}

	// Convert to an intermediate form
	src = &v20211001s.SignalRResource_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = resource.AssignPropertiesFromSignalRResourceStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SignalRResource_Status
func (resource *SignalRResource_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20211001s.SignalRResource_Status)
	if ok {
		// Populate destination from our instance
		return resource.AssignPropertiesToSignalRResourceStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v20211001s.SignalRResource_Status{}
	err := resource.AssignPropertiesToSignalRResourceStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SignalRResource_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resource *SignalRResource_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resource *SignalRResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRResource_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 SignalRCorsSettings_Status
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			resource.Cors = &cors
		}
	}

	// Set property ‘DisableAadAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableAadAuth != nil {
			disableAadAuth := *typedInput.Properties.DisableAadAuth
			resource.DisableAadAuth = &disableAadAuth
		}
	}

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableLocalAuth != nil {
			disableLocalAuth := *typedInput.Properties.DisableLocalAuth
			resource.DisableLocalAuth = &disableLocalAuth
		}
	}

	// Set property ‘ExternalIP’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ExternalIP != nil {
			externalIP := *typedInput.Properties.ExternalIP
			resource.ExternalIP = &externalIP
		}
	}

	// Set property ‘Features’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Features {
			var item1 SignalRFeature_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			resource.Features = append(resource.Features, item1)
		}
	}

	// Set property ‘HostName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostName != nil {
			hostName := *typedInput.Properties.HostName
			resource.HostName = &hostName
		}
	}

	// Set property ‘HostNamePrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostNamePrefix != nil {
			hostNamePrefix := *typedInput.Properties.HostNamePrefix
			resource.HostNamePrefix = &hostNamePrefix
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		resource.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 ManagedIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		resource.Identity = &identity
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		resource.Kind = &kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		resource.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		resource.Name = &name
	}

	// Set property ‘NetworkACLs’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkACLs != nil {
			var networkACLs1 SignalRNetworkACLs_Status
			err := networkACLs1.PopulateFromARM(owner, *typedInput.Properties.NetworkACLs)
			if err != nil {
				return err
			}
			networkACLs := networkACLs1
			resource.NetworkACLs = &networkACLs
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			resource.PrivateEndpointConnections = append(resource.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			resource.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			resource.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘PublicPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicPort != nil {
			publicPort := *typedInput.Properties.PublicPort
			resource.PublicPort = &publicPort
		}
	}

	// Set property ‘ResourceLogConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceLogConfiguration != nil {
			var resourceLogConfiguration1 ResourceLogConfiguration_Status
			err := resourceLogConfiguration1.PopulateFromARM(owner, *typedInput.Properties.ResourceLogConfiguration)
			if err != nil {
				return err
			}
			resourceLogConfiguration := resourceLogConfiguration1
			resource.ResourceLogConfiguration = &resourceLogConfiguration
		}
	}

	// Set property ‘ServerPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServerPort != nil {
			serverPort := *typedInput.Properties.ServerPort
			resource.ServerPort = &serverPort
		}
	}

	// Set property ‘SharedPrivateLinkResources’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SharedPrivateLinkResources {
			var item1 SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			resource.SharedPrivateLinkResources = append(resource.SharedPrivateLinkResources, item1)
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 ResourceSku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		resource.Sku = &sku
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		resource.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		resource.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			resource.Tags[key] = value
		}
	}

	// Set property ‘Tls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tls != nil {
			var tls1 SignalRTlsSettings_Status
			err := tls1.PopulateFromARM(owner, *typedInput.Properties.Tls)
			if err != nil {
				return err
			}
			tls := tls1
			resource.Tls = &tls
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		resource.Type = &typeVar
	}

	// Set property ‘Upstream’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Upstream != nil {
			var upstream1 ServerlessUpstreamSettings_Status
			err := upstream1.PopulateFromARM(owner, *typedInput.Properties.Upstream)
			if err != nil {
				return err
			}
			upstream := upstream1
			resource.Upstream = &upstream
		}
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			resource.Version = &version
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRResourceStatus populates our SignalRResource_Status from the provided source SignalRResource_Status
func (resource *SignalRResource_Status) AssignPropertiesFromSignalRResourceStatus(source *v20211001s.SignalRResource_Status) error {

	// Conditions
	resource.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Cors
	if source.Cors != nil {
		var cor SignalRCorsSettings_Status
		err := cor.AssignPropertiesFromSignalRCorsSettingsStatus(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSignalRCorsSettingsStatus() to populate field Cors")
		}
		resource.Cors = &cor
	} else {
		resource.Cors = nil
	}

	// DisableAadAuth
	if source.DisableAadAuth != nil {
		disableAadAuth := *source.DisableAadAuth
		resource.DisableAadAuth = &disableAadAuth
	} else {
		resource.DisableAadAuth = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		resource.DisableLocalAuth = &disableLocalAuth
	} else {
		resource.DisableLocalAuth = nil
	}

	// ExternalIP
	resource.ExternalIP = genruntime.ClonePointerToString(source.ExternalIP)

	// Features
	if source.Features != nil {
		featureList := make([]SignalRFeature_Status, len(source.Features))
		for featureIndex, featureItem := range source.Features {
			// Shadow the loop variable to avoid aliasing
			featureItem := featureItem
			var feature SignalRFeature_Status
			err := feature.AssignPropertiesFromSignalRFeatureStatus(&featureItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSignalRFeatureStatus() to populate field Features")
			}
			featureList[featureIndex] = feature
		}
		resource.Features = featureList
	} else {
		resource.Features = nil
	}

	// HostName
	resource.HostName = genruntime.ClonePointerToString(source.HostName)

	// HostNamePrefix
	resource.HostNamePrefix = genruntime.ClonePointerToString(source.HostNamePrefix)

	// Id
	resource.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity ManagedIdentity_Status
		err := identity.AssignPropertiesFromManagedIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedIdentityStatus() to populate field Identity")
		}
		resource.Identity = &identity
	} else {
		resource.Identity = nil
	}

	// Kind
	if source.Kind != nil {
		kind := ServiceKind_Status(*source.Kind)
		resource.Kind = &kind
	} else {
		resource.Kind = nil
	}

	// Location
	resource.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	resource.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkACLs
	if source.NetworkACLs != nil {
		var networkACL SignalRNetworkACLs_Status
		err := networkACL.AssignPropertiesFromSignalRNetworkACLsStatus(source.NetworkACLs)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSignalRNetworkACLsStatus() to populate field NetworkACLs")
		}
		resource.NetworkACLs = &networkACL
	} else {
		resource.NetworkACLs = nil
	}

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSignalRSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatusSignalRSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		resource.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		resource.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		resource.ProvisioningState = &provisioningState
	} else {
		resource.ProvisioningState = nil
	}

	// PublicNetworkAccess
	resource.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// PublicPort
	resource.PublicPort = genruntime.ClonePointerToInt(source.PublicPort)

	// ResourceLogConfiguration
	if source.ResourceLogConfiguration != nil {
		var resourceLogConfiguration ResourceLogConfiguration_Status
		err := resourceLogConfiguration.AssignPropertiesFromResourceLogConfigurationStatus(source.ResourceLogConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromResourceLogConfigurationStatus() to populate field ResourceLogConfiguration")
		}
		resource.ResourceLogConfiguration = &resourceLogConfiguration
	} else {
		resource.ResourceLogConfiguration = nil
	}

	// ServerPort
	resource.ServerPort = genruntime.ClonePointerToInt(source.ServerPort)

	// SharedPrivateLinkResources
	if source.SharedPrivateLinkResources != nil {
		sharedPrivateLinkResourceList := make([]SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded, len(source.SharedPrivateLinkResources))
		for sharedPrivateLinkResourceIndex, sharedPrivateLinkResourceItem := range source.SharedPrivateLinkResources {
			// Shadow the loop variable to avoid aliasing
			sharedPrivateLinkResourceItem := sharedPrivateLinkResourceItem
			var sharedPrivateLinkResource SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
			err := sharedPrivateLinkResource.AssignPropertiesFromSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded(&sharedPrivateLinkResourceItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded() to populate field SharedPrivateLinkResources")
			}
			sharedPrivateLinkResourceList[sharedPrivateLinkResourceIndex] = sharedPrivateLinkResource
		}
		resource.SharedPrivateLinkResources = sharedPrivateLinkResourceList
	} else {
		resource.SharedPrivateLinkResources = nil
	}

	// Sku
	if source.Sku != nil {
		var sku ResourceSku_Status
		err := sku.AssignPropertiesFromResourceSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromResourceSkuStatus() to populate field Sku")
		}
		resource.Sku = &sku
	} else {
		resource.Sku = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		resource.SystemData = &systemDatum
	} else {
		resource.SystemData = nil
	}

	// Tags
	resource.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Tls
	if source.Tls != nil {
		var tl SignalRTlsSettings_Status
		err := tl.AssignPropertiesFromSignalRTlsSettingsStatus(source.Tls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSignalRTlsSettingsStatus() to populate field Tls")
		}
		resource.Tls = &tl
	} else {
		resource.Tls = nil
	}

	// Type
	resource.Type = genruntime.ClonePointerToString(source.Type)

	// Upstream
	if source.Upstream != nil {
		var upstream ServerlessUpstreamSettings_Status
		err := upstream.AssignPropertiesFromServerlessUpstreamSettingsStatus(source.Upstream)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromServerlessUpstreamSettingsStatus() to populate field Upstream")
		}
		resource.Upstream = &upstream
	} else {
		resource.Upstream = nil
	}

	// Version
	resource.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignPropertiesToSignalRResourceStatus populates the provided destination SignalRResource_Status from our SignalRResource_Status
func (resource *SignalRResource_Status) AssignPropertiesToSignalRResourceStatus(destination *v20211001s.SignalRResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(resource.Conditions)

	// Cors
	if resource.Cors != nil {
		var cor v20211001s.SignalRCorsSettings_Status
		err := resource.Cors.AssignPropertiesToSignalRCorsSettingsStatus(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSignalRCorsSettingsStatus() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DisableAadAuth
	if resource.DisableAadAuth != nil {
		disableAadAuth := *resource.DisableAadAuth
		destination.DisableAadAuth = &disableAadAuth
	} else {
		destination.DisableAadAuth = nil
	}

	// DisableLocalAuth
	if resource.DisableLocalAuth != nil {
		disableLocalAuth := *resource.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// ExternalIP
	destination.ExternalIP = genruntime.ClonePointerToString(resource.ExternalIP)

	// Features
	if resource.Features != nil {
		featureList := make([]v20211001s.SignalRFeature_Status, len(resource.Features))
		for featureIndex, featureItem := range resource.Features {
			// Shadow the loop variable to avoid aliasing
			featureItem := featureItem
			var feature v20211001s.SignalRFeature_Status
			err := featureItem.AssignPropertiesToSignalRFeatureStatus(&feature)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSignalRFeatureStatus() to populate field Features")
			}
			featureList[featureIndex] = feature
		}
		destination.Features = featureList
	} else {
		destination.Features = nil
	}

	// HostName
	destination.HostName = genruntime.ClonePointerToString(resource.HostName)

	// HostNamePrefix
	destination.HostNamePrefix = genruntime.ClonePointerToString(resource.HostNamePrefix)

	// Id
	destination.Id = genruntime.ClonePointerToString(resource.Id)

	// Identity
	if resource.Identity != nil {
		var identity v20211001s.ManagedIdentity_Status
		err := resource.Identity.AssignPropertiesToManagedIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedIdentityStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Kind
	if resource.Kind != nil {
		kind := string(*resource.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(resource.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(resource.Name)

	// NetworkACLs
	if resource.NetworkACLs != nil {
		var networkACL v20211001s.SignalRNetworkACLs_Status
		err := resource.NetworkACLs.AssignPropertiesToSignalRNetworkACLsStatus(&networkACL)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSignalRNetworkACLsStatus() to populate field NetworkACLs")
		}
		destination.NetworkACLs = &networkACL
	} else {
		destination.NetworkACLs = nil
	}

	// PrivateEndpointConnections
	if resource.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20211001s.PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded, len(resource.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range resource.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v20211001s.PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSignalRSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatusSignalRSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if resource.ProvisioningState != nil {
		provisioningState := string(*resource.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(resource.PublicNetworkAccess)

	// PublicPort
	destination.PublicPort = genruntime.ClonePointerToInt(resource.PublicPort)

	// ResourceLogConfiguration
	if resource.ResourceLogConfiguration != nil {
		var resourceLogConfiguration v20211001s.ResourceLogConfiguration_Status
		err := resource.ResourceLogConfiguration.AssignPropertiesToResourceLogConfigurationStatus(&resourceLogConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToResourceLogConfigurationStatus() to populate field ResourceLogConfiguration")
		}
		destination.ResourceLogConfiguration = &resourceLogConfiguration
	} else {
		destination.ResourceLogConfiguration = nil
	}

	// ServerPort
	destination.ServerPort = genruntime.ClonePointerToInt(resource.ServerPort)

	// SharedPrivateLinkResources
	if resource.SharedPrivateLinkResources != nil {
		sharedPrivateLinkResourceList := make([]v20211001s.SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded, len(resource.SharedPrivateLinkResources))
		for sharedPrivateLinkResourceIndex, sharedPrivateLinkResourceItem := range resource.SharedPrivateLinkResources {
			// Shadow the loop variable to avoid aliasing
			sharedPrivateLinkResourceItem := sharedPrivateLinkResourceItem
			var sharedPrivateLinkResource v20211001s.SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
			err := sharedPrivateLinkResourceItem.AssignPropertiesToSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded(&sharedPrivateLinkResource)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded() to populate field SharedPrivateLinkResources")
			}
			sharedPrivateLinkResourceList[sharedPrivateLinkResourceIndex] = sharedPrivateLinkResource
		}
		destination.SharedPrivateLinkResources = sharedPrivateLinkResourceList
	} else {
		destination.SharedPrivateLinkResources = nil
	}

	// Sku
	if resource.Sku != nil {
		var sku v20211001s.ResourceSku_Status
		err := resource.Sku.AssignPropertiesToResourceSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToResourceSkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SystemData
	if resource.SystemData != nil {
		var systemDatum v20211001s.SystemData_Status
		err := resource.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(resource.Tags)

	// Tls
	if resource.Tls != nil {
		var tl v20211001s.SignalRTlsSettings_Status
		err := resource.Tls.AssignPropertiesToSignalRTlsSettingsStatus(&tl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSignalRTlsSettingsStatus() to populate field Tls")
		}
		destination.Tls = &tl
	} else {
		destination.Tls = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(resource.Type)

	// Upstream
	if resource.Upstream != nil {
		var upstream v20211001s.ServerlessUpstreamSettings_Status
		err := resource.Upstream.AssignPropertiesToServerlessUpstreamSettingsStatus(&upstream)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToServerlessUpstreamSettingsStatus() to populate field Upstream")
		}
		destination.Upstream = &upstream
	} else {
		destination.Upstream = nil
	}

	// Version
	destination.Version = genruntime.ClonePointerToString(resource.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SignalR_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Cors: Cross-Origin Resource Sharing (CORS) settings.
	Cors *SignalRCorsSettings `json:"cors,omitempty"`

	// DisableAadAuth: DisableLocalAuth
	// Enable or disable aad auth
	// When set as true, connection with AuthType=aad won't work.
	DisableAadAuth *bool `json:"disableAadAuth,omitempty"`

	// DisableLocalAuth: DisableLocalAuth
	// Enable or disable local auth with AccessKey
	// When set as true, connection with AccessKey=xxx won't work.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Features: List of the featureFlags.
	// FeatureFlags that are not included in the parameters for the update operation will not be modified.
	// And the response will only include featureFlags that are explicitly set.
	// When a featureFlag is not explicitly set, its globally default value will be used
	// But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
	Features []SignalRFeature `json:"features,omitempty"`

	// Identity: A class represent managed identities used for request and response
	Identity *ManagedIdentity `json:"identity,omitempty"`
	Kind     *SignalRSpecKind `json:"kind,omitempty"`

	// Location: The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.
	Location *string `json:"location,omitempty"`

	// NetworkACLs: Network ACLs for the resource
	NetworkACLs *SignalRNetworkACLs `json:"networkACLs,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// PublicNetworkAccess: Enable or disable public network access. Default to "Enabled".
	// When it's Enabled, network ACLs still apply.
	// When it's Disabled, public network access is always disabled no matter what you set in network ACLs.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`

	// ResourceLogConfiguration: Resource log configuration of a Microsoft.SignalRService resource.
	ResourceLogConfiguration *ResourceLogConfiguration `json:"resourceLogConfiguration,omitempty"`

	// Sku: The billing information of the resource.
	Sku *ResourceSku `json:"sku,omitempty"`

	// Tags: Tags of the service which is a list of key value pairs that describe the resource.
	Tags map[string]string `json:"tags,omitempty"`

	// Tls: TLS settings for the resource
	Tls *SignalRTlsSettings `json:"tls,omitempty"`

	// Upstream: The settings for the Upstream when the service is in server-less mode.
	Upstream *ServerlessUpstreamSettings `json:"upstream,omitempty"`
}

var _ genruntime.ARMTransformer = &SignalR_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (signalR *SignalR_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if signalR == nil {
		return nil, nil
	}
	result := &SignalR_SpecARM{}

	// Set property ‘Identity’:
	if signalR.Identity != nil {
		identityARM, err := (*signalR.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identityARM.(*ManagedIdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Kind’:
	if signalR.Kind != nil {
		kind := *signalR.Kind
		result.Kind = &kind
	}

	// Set property ‘Location’:
	if signalR.Location != nil {
		location := *signalR.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if signalR.Cors != nil ||
		signalR.DisableAadAuth != nil ||
		signalR.DisableLocalAuth != nil ||
		signalR.Features != nil ||
		signalR.NetworkACLs != nil ||
		signalR.PublicNetworkAccess != nil ||
		signalR.ResourceLogConfiguration != nil ||
		signalR.Tls != nil ||
		signalR.Upstream != nil {
		result.Properties = &SignalRPropertiesARM{}
	}
	if signalR.Cors != nil {
		corsARM, err := (*signalR.Cors).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cors := *corsARM.(*SignalRCorsSettingsARM)
		result.Properties.Cors = &cors
	}
	if signalR.DisableAadAuth != nil {
		disableAadAuth := *signalR.DisableAadAuth
		result.Properties.DisableAadAuth = &disableAadAuth
	}
	if signalR.DisableLocalAuth != nil {
		disableLocalAuth := *signalR.DisableLocalAuth
		result.Properties.DisableLocalAuth = &disableLocalAuth
	}
	for _, item := range signalR.Features {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Features = append(result.Properties.Features, *itemARM.(*SignalRFeatureARM))
	}
	if signalR.NetworkACLs != nil {
		networkACLsARM, err := (*signalR.NetworkACLs).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkACLs := *networkACLsARM.(*SignalRNetworkACLsARM)
		result.Properties.NetworkACLs = &networkACLs
	}
	if signalR.PublicNetworkAccess != nil {
		publicNetworkAccess := *signalR.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}
	if signalR.ResourceLogConfiguration != nil {
		resourceLogConfigurationARM, err := (*signalR.ResourceLogConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		resourceLogConfiguration := *resourceLogConfigurationARM.(*ResourceLogConfigurationARM)
		result.Properties.ResourceLogConfiguration = &resourceLogConfiguration
	}
	if signalR.Tls != nil {
		tlsARM, err := (*signalR.Tls).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		tls := *tlsARM.(*SignalRTlsSettingsARM)
		result.Properties.Tls = &tls
	}
	if signalR.Upstream != nil {
		upstreamARM, err := (*signalR.Upstream).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		upstream := *upstreamARM.(*ServerlessUpstreamSettingsARM)
		result.Properties.Upstream = &upstream
	}

	// Set property ‘Sku’:
	if signalR.Sku != nil {
		skuARM, err := (*signalR.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*ResourceSkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if signalR.Tags != nil {
		result.Tags = make(map[string]string, len(signalR.Tags))
		for key, value := range signalR.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signalR *SignalR_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalR_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signalR *SignalR_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalR_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalR_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	signalR.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Cors != nil {
			var cors1 SignalRCorsSettings
			err := cors1.PopulateFromARM(owner, *typedInput.Properties.Cors)
			if err != nil {
				return err
			}
			cors := cors1
			signalR.Cors = &cors
		}
	}

	// Set property ‘DisableAadAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableAadAuth != nil {
			disableAadAuth := *typedInput.Properties.DisableAadAuth
			signalR.DisableAadAuth = &disableAadAuth
		}
	}

	// Set property ‘DisableLocalAuth’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableLocalAuth != nil {
			disableLocalAuth := *typedInput.Properties.DisableLocalAuth
			signalR.DisableLocalAuth = &disableLocalAuth
		}
	}

	// Set property ‘Features’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Features {
			var item1 SignalRFeature
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			signalR.Features = append(signalR.Features, item1)
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 ManagedIdentity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		signalR.Identity = &identity
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		signalR.Kind = &kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		signalR.Location = &location
	}

	// Set property ‘NetworkACLs’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkACLs != nil {
			var networkACLs1 SignalRNetworkACLs
			err := networkACLs1.PopulateFromARM(owner, *typedInput.Properties.NetworkACLs)
			if err != nil {
				return err
			}
			networkACLs := networkACLs1
			signalR.NetworkACLs = &networkACLs
		}
	}

	// Set property ‘Owner’:
	signalR.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			signalR.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘ResourceLogConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceLogConfiguration != nil {
			var resourceLogConfiguration1 ResourceLogConfiguration
			err := resourceLogConfiguration1.PopulateFromARM(owner, *typedInput.Properties.ResourceLogConfiguration)
			if err != nil {
				return err
			}
			resourceLogConfiguration := resourceLogConfiguration1
			signalR.ResourceLogConfiguration = &resourceLogConfiguration
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 ResourceSku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		signalR.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		signalR.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			signalR.Tags[key] = value
		}
	}

	// Set property ‘Tls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tls != nil {
			var tls1 SignalRTlsSettings
			err := tls1.PopulateFromARM(owner, *typedInput.Properties.Tls)
			if err != nil {
				return err
			}
			tls := tls1
			signalR.Tls = &tls
		}
	}

	// Set property ‘Upstream’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Upstream != nil {
			var upstream1 ServerlessUpstreamSettings
			err := upstream1.PopulateFromARM(owner, *typedInput.Properties.Upstream)
			if err != nil {
				return err
			}
			upstream := upstream1
			signalR.Upstream = &upstream
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &SignalR_Spec{}

// ConvertSpecFrom populates our SignalR_Spec from the provided source
func (signalR *SignalR_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20211001s.SignalR_Spec)
	if ok {
		// Populate our instance from source
		return signalR.AssignPropertiesFromSignalRSpec(src)
	}

	// Convert to an intermediate form
	src = &v20211001s.SignalR_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = signalR.AssignPropertiesFromSignalRSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our SignalR_Spec
func (signalR *SignalR_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20211001s.SignalR_Spec)
	if ok {
		// Populate destination from our instance
		return signalR.AssignPropertiesToSignalRSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20211001s.SignalR_Spec{}
	err := signalR.AssignPropertiesToSignalRSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromSignalRSpec populates our SignalR_Spec from the provided source SignalR_Spec
func (signalR *SignalR_Spec) AssignPropertiesFromSignalRSpec(source *v20211001s.SignalR_Spec) error {

	// AzureName
	signalR.AzureName = source.AzureName

	// Cors
	if source.Cors != nil {
		var cor SignalRCorsSettings
		err := cor.AssignPropertiesFromSignalRCorsSettings(source.Cors)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSignalRCorsSettings() to populate field Cors")
		}
		signalR.Cors = &cor
	} else {
		signalR.Cors = nil
	}

	// DisableAadAuth
	if source.DisableAadAuth != nil {
		disableAadAuth := *source.DisableAadAuth
		signalR.DisableAadAuth = &disableAadAuth
	} else {
		signalR.DisableAadAuth = nil
	}

	// DisableLocalAuth
	if source.DisableLocalAuth != nil {
		disableLocalAuth := *source.DisableLocalAuth
		signalR.DisableLocalAuth = &disableLocalAuth
	} else {
		signalR.DisableLocalAuth = nil
	}

	// Features
	if source.Features != nil {
		featureList := make([]SignalRFeature, len(source.Features))
		for featureIndex, featureItem := range source.Features {
			// Shadow the loop variable to avoid aliasing
			featureItem := featureItem
			var feature SignalRFeature
			err := feature.AssignPropertiesFromSignalRFeature(&featureItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromSignalRFeature() to populate field Features")
			}
			featureList[featureIndex] = feature
		}
		signalR.Features = featureList
	} else {
		signalR.Features = nil
	}

	// Identity
	if source.Identity != nil {
		var identity ManagedIdentity
		err := identity.AssignPropertiesFromManagedIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedIdentity() to populate field Identity")
		}
		signalR.Identity = &identity
	} else {
		signalR.Identity = nil
	}

	// Kind
	if source.Kind != nil {
		kind := SignalRSpecKind(*source.Kind)
		signalR.Kind = &kind
	} else {
		signalR.Kind = nil
	}

	// Location
	signalR.Location = genruntime.ClonePointerToString(source.Location)

	// NetworkACLs
	if source.NetworkACLs != nil {
		var networkACL SignalRNetworkACLs
		err := networkACL.AssignPropertiesFromSignalRNetworkACLs(source.NetworkACLs)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSignalRNetworkACLs() to populate field NetworkACLs")
		}
		signalR.NetworkACLs = &networkACL
	} else {
		signalR.NetworkACLs = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		signalR.Owner = &owner
	} else {
		signalR.Owner = nil
	}

	// PublicNetworkAccess
	signalR.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// ResourceLogConfiguration
	if source.ResourceLogConfiguration != nil {
		var resourceLogConfiguration ResourceLogConfiguration
		err := resourceLogConfiguration.AssignPropertiesFromResourceLogConfiguration(source.ResourceLogConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromResourceLogConfiguration() to populate field ResourceLogConfiguration")
		}
		signalR.ResourceLogConfiguration = &resourceLogConfiguration
	} else {
		signalR.ResourceLogConfiguration = nil
	}

	// Sku
	if source.Sku != nil {
		var sku ResourceSku
		err := sku.AssignPropertiesFromResourceSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromResourceSku() to populate field Sku")
		}
		signalR.Sku = &sku
	} else {
		signalR.Sku = nil
	}

	// Tags
	signalR.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Tls
	if source.Tls != nil {
		var tl SignalRTlsSettings
		err := tl.AssignPropertiesFromSignalRTlsSettings(source.Tls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSignalRTlsSettings() to populate field Tls")
		}
		signalR.Tls = &tl
	} else {
		signalR.Tls = nil
	}

	// Upstream
	if source.Upstream != nil {
		var upstream ServerlessUpstreamSettings
		err := upstream.AssignPropertiesFromServerlessUpstreamSettings(source.Upstream)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromServerlessUpstreamSettings() to populate field Upstream")
		}
		signalR.Upstream = &upstream
	} else {
		signalR.Upstream = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRSpec populates the provided destination SignalR_Spec from our SignalR_Spec
func (signalR *SignalR_Spec) AssignPropertiesToSignalRSpec(destination *v20211001s.SignalR_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = signalR.AzureName

	// Cors
	if signalR.Cors != nil {
		var cor v20211001s.SignalRCorsSettings
		err := signalR.Cors.AssignPropertiesToSignalRCorsSettings(&cor)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSignalRCorsSettings() to populate field Cors")
		}
		destination.Cors = &cor
	} else {
		destination.Cors = nil
	}

	// DisableAadAuth
	if signalR.DisableAadAuth != nil {
		disableAadAuth := *signalR.DisableAadAuth
		destination.DisableAadAuth = &disableAadAuth
	} else {
		destination.DisableAadAuth = nil
	}

	// DisableLocalAuth
	if signalR.DisableLocalAuth != nil {
		disableLocalAuth := *signalR.DisableLocalAuth
		destination.DisableLocalAuth = &disableLocalAuth
	} else {
		destination.DisableLocalAuth = nil
	}

	// Features
	if signalR.Features != nil {
		featureList := make([]v20211001s.SignalRFeature, len(signalR.Features))
		for featureIndex, featureItem := range signalR.Features {
			// Shadow the loop variable to avoid aliasing
			featureItem := featureItem
			var feature v20211001s.SignalRFeature
			err := featureItem.AssignPropertiesToSignalRFeature(&feature)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToSignalRFeature() to populate field Features")
			}
			featureList[featureIndex] = feature
		}
		destination.Features = featureList
	} else {
		destination.Features = nil
	}

	// Identity
	if signalR.Identity != nil {
		var identity v20211001s.ManagedIdentity
		err := signalR.Identity.AssignPropertiesToManagedIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Kind
	if signalR.Kind != nil {
		kind := string(*signalR.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(signalR.Location)

	// NetworkACLs
	if signalR.NetworkACLs != nil {
		var networkACL v20211001s.SignalRNetworkACLs
		err := signalR.NetworkACLs.AssignPropertiesToSignalRNetworkACLs(&networkACL)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSignalRNetworkACLs() to populate field NetworkACLs")
		}
		destination.NetworkACLs = &networkACL
	} else {
		destination.NetworkACLs = nil
	}

	// OriginalVersion
	destination.OriginalVersion = signalR.OriginalVersion()

	// Owner
	if signalR.Owner != nil {
		owner := signalR.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(signalR.PublicNetworkAccess)

	// ResourceLogConfiguration
	if signalR.ResourceLogConfiguration != nil {
		var resourceLogConfiguration v20211001s.ResourceLogConfiguration
		err := signalR.ResourceLogConfiguration.AssignPropertiesToResourceLogConfiguration(&resourceLogConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToResourceLogConfiguration() to populate field ResourceLogConfiguration")
		}
		destination.ResourceLogConfiguration = &resourceLogConfiguration
	} else {
		destination.ResourceLogConfiguration = nil
	}

	// Sku
	if signalR.Sku != nil {
		var sku v20211001s.ResourceSku
		err := signalR.Sku.AssignPropertiesToResourceSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToResourceSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(signalR.Tags)

	// Tls
	if signalR.Tls != nil {
		var tl v20211001s.SignalRTlsSettings
		err := signalR.Tls.AssignPropertiesToSignalRTlsSettings(&tl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSignalRTlsSettings() to populate field Tls")
		}
		destination.Tls = &tl
	} else {
		destination.Tls = nil
	}

	// Upstream
	if signalR.Upstream != nil {
		var upstream v20211001s.ServerlessUpstreamSettings
		err := signalR.Upstream.AssignPropertiesToServerlessUpstreamSettings(&upstream)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToServerlessUpstreamSettings() to populate field Upstream")
		}
		destination.Upstream = &upstream
	} else {
		destination.Upstream = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (signalR *SignalR_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (signalR *SignalR_Spec) SetAzureName(azureName string) { signalR.AzureName = azureName }

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ManagedIdentity
type ManagedIdentity struct {
	Type *ManagedIdentityType `json:"type,omitempty"`

	// UserAssignedIdentities: Get or set the user assigned identities
	UserAssignedIdentities map[string]v1.JSON `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedIdentity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *ManagedIdentity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	result := &ManagedIdentityARM{}

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if identity.UserAssignedIdentities != nil {
		result.UserAssignedIdentities = make(map[string]v1.JSON, len(identity.UserAssignedIdentities))
		for key, value := range identity.UserAssignedIdentities {
			result.UserAssignedIdentities[key] = *value.DeepCopy()
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *ManagedIdentity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedIdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *ManagedIdentity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedIdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedIdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]v1.JSON, len(typedInput.UserAssignedIdentities))
		for key, value := range typedInput.UserAssignedIdentities {
			identity.UserAssignedIdentities[key] = *value.DeepCopy()
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedIdentity populates our ManagedIdentity from the provided source ManagedIdentity
func (identity *ManagedIdentity) AssignPropertiesFromManagedIdentity(source *v20211001s.ManagedIdentity) error {

	// Type
	if source.Type != nil {
		typeVar := ManagedIdentityType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1.JSON, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			userAssignedIdentityMap[userAssignedIdentityKey] = *userAssignedIdentityValue.DeepCopy()
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedIdentity populates the provided destination ManagedIdentity from our ManagedIdentity
func (identity *ManagedIdentity) AssignPropertiesToManagedIdentity(destination *v20211001s.ManagedIdentity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1.JSON, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			userAssignedIdentityMap[userAssignedIdentityKey] = *userAssignedIdentityValue.DeepCopy()
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ManagedIdentity_Status struct {
	// PrincipalId: Get the principal id for the system assigned identity.
	// Only be used in response.
	PrincipalId *string `json:"principalId,omitempty"`

	// TenantId: Get the tenant id for the system assigned identity.
	// Only be used in response
	TenantId *string                     `json:"tenantId,omitempty"`
	Type     *ManagedIdentityType_Status `json:"type,omitempty"`

	// UserAssignedIdentities: Get or set the user assigned identities
	UserAssignedIdentities map[string]UserAssignedIdentityProperty_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagedIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *ManagedIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *ManagedIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]UserAssignedIdentityProperty_Status, len(typedInput.UserAssignedIdentities))
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserAssignedIdentityProperty_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedIdentityStatus populates our ManagedIdentity_Status from the provided source ManagedIdentity_Status
func (identity *ManagedIdentity_Status) AssignPropertiesFromManagedIdentityStatus(source *v20211001s.ManagedIdentity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := ManagedIdentityType_Status(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserAssignedIdentityProperty_Status, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserAssignedIdentityProperty_Status
			err := userAssignedIdentity.AssignPropertiesFromUserAssignedIdentityPropertyStatus(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUserAssignedIdentityPropertyStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedIdentityStatus populates the provided destination ManagedIdentity_Status from our ManagedIdentity_Status
func (identity *ManagedIdentity_Status) AssignPropertiesToManagedIdentityStatus(destination *v20211001s.ManagedIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v20211001s.UserAssignedIdentityProperty_Status, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v20211001s.UserAssignedIdentityProperty_Status
			err := userAssignedIdentityValue.AssignPropertiesToUserAssignedIdentityPropertyStatus(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUserAssignedIdentityPropertyStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded struct {
	// Id: Fully qualified resource Id for the resource.
	Id         *string            `json:"id,omitempty"`
	SystemData *SystemData_Status `json:"systemData,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SignalR_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		embedded.SystemData = &systemData
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSignalRSubResourceEmbedded populates our PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSignalRSubResourceEmbedded(source *v20211001s.PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		embedded.SystemData = &systemDatum
	} else {
		embedded.SystemData = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSignalRSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded from our PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSignalRSubResourceEmbedded(destination *v20211001s.PrivateEndpointConnection_Status_SignalR_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// SystemData
	if embedded.SystemData != nil {
		var systemDatum v20211001s.SystemData_Status
		err := embedded.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ProvisioningState_Status string

const (
	ProvisioningState_StatusCanceled  = ProvisioningState_Status("Canceled")
	ProvisioningState_StatusCreating  = ProvisioningState_Status("Creating")
	ProvisioningState_StatusDeleting  = ProvisioningState_Status("Deleting")
	ProvisioningState_StatusFailed    = ProvisioningState_Status("Failed")
	ProvisioningState_StatusMoving    = ProvisioningState_Status("Moving")
	ProvisioningState_StatusRunning   = ProvisioningState_Status("Running")
	ProvisioningState_StatusSucceeded = ProvisioningState_Status("Succeeded")
	ProvisioningState_StatusUnknown   = ProvisioningState_Status("Unknown")
	ProvisioningState_StatusUpdating  = ProvisioningState_Status("Updating")
)

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ResourceLogConfiguration
type ResourceLogConfiguration struct {
	// Categories: Gets or sets the list of category configurations.
	Categories []ResourceLogCategory `json:"categories,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceLogConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *ResourceLogConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	result := &ResourceLogConfigurationARM{}

	// Set property ‘Categories’:
	for _, item := range configuration.Categories {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Categories = append(result.Categories, *itemARM.(*ResourceLogCategoryARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *ResourceLogConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceLogConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *ResourceLogConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceLogConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceLogConfigurationARM, got %T", armInput)
	}

	// Set property ‘Categories’:
	for _, item := range typedInput.Categories {
		var item1 ResourceLogCategory
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.Categories = append(configuration.Categories, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceLogConfiguration populates our ResourceLogConfiguration from the provided source ResourceLogConfiguration
func (configuration *ResourceLogConfiguration) AssignPropertiesFromResourceLogConfiguration(source *v20211001s.ResourceLogConfiguration) error {

	// Categories
	if source.Categories != nil {
		categoryList := make([]ResourceLogCategory, len(source.Categories))
		for categoryIndex, categoryItem := range source.Categories {
			// Shadow the loop variable to avoid aliasing
			categoryItem := categoryItem
			var category ResourceLogCategory
			err := category.AssignPropertiesFromResourceLogCategory(&categoryItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceLogCategory() to populate field Categories")
			}
			categoryList[categoryIndex] = category
		}
		configuration.Categories = categoryList
	} else {
		configuration.Categories = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceLogConfiguration populates the provided destination ResourceLogConfiguration from our ResourceLogConfiguration
func (configuration *ResourceLogConfiguration) AssignPropertiesToResourceLogConfiguration(destination *v20211001s.ResourceLogConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Categories
	if configuration.Categories != nil {
		categoryList := make([]v20211001s.ResourceLogCategory, len(configuration.Categories))
		for categoryIndex, categoryItem := range configuration.Categories {
			// Shadow the loop variable to avoid aliasing
			categoryItem := categoryItem
			var category v20211001s.ResourceLogCategory
			err := categoryItem.AssignPropertiesToResourceLogCategory(&category)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceLogCategory() to populate field Categories")
			}
			categoryList[categoryIndex] = category
		}
		destination.Categories = categoryList
	} else {
		destination.Categories = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceLogConfiguration_Status struct {
	// Categories: Gets or sets the list of category configurations.
	Categories []ResourceLogCategory_Status `json:"categories,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceLogConfiguration_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *ResourceLogConfiguration_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceLogConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *ResourceLogConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceLogConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceLogConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘Categories’:
	for _, item := range typedInput.Categories {
		var item1 ResourceLogCategory_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		configuration.Categories = append(configuration.Categories, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceLogConfigurationStatus populates our ResourceLogConfiguration_Status from the provided source ResourceLogConfiguration_Status
func (configuration *ResourceLogConfiguration_Status) AssignPropertiesFromResourceLogConfigurationStatus(source *v20211001s.ResourceLogConfiguration_Status) error {

	// Categories
	if source.Categories != nil {
		categoryList := make([]ResourceLogCategory_Status, len(source.Categories))
		for categoryIndex, categoryItem := range source.Categories {
			// Shadow the loop variable to avoid aliasing
			categoryItem := categoryItem
			var category ResourceLogCategory_Status
			err := category.AssignPropertiesFromResourceLogCategoryStatus(&categoryItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromResourceLogCategoryStatus() to populate field Categories")
			}
			categoryList[categoryIndex] = category
		}
		configuration.Categories = categoryList
	} else {
		configuration.Categories = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceLogConfigurationStatus populates the provided destination ResourceLogConfiguration_Status from our ResourceLogConfiguration_Status
func (configuration *ResourceLogConfiguration_Status) AssignPropertiesToResourceLogConfigurationStatus(destination *v20211001s.ResourceLogConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Categories
	if configuration.Categories != nil {
		categoryList := make([]v20211001s.ResourceLogCategory_Status, len(configuration.Categories))
		for categoryIndex, categoryItem := range configuration.Categories {
			// Shadow the loop variable to avoid aliasing
			categoryItem := categoryItem
			var category v20211001s.ResourceLogCategory_Status
			err := categoryItem.AssignPropertiesToResourceLogCategoryStatus(&category)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToResourceLogCategoryStatus() to populate field Categories")
			}
			categoryList[categoryIndex] = category
		}
		destination.Categories = categoryList
	} else {
		destination.Categories = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ResourceSku
type ResourceSku struct {
	// Capacity: Optional, integer. The unit count of the resource. 1 by default.
	// If present, following values are allowed:
	// Free: 1
	// Standard: 1,2,5,10,20,50,100
	Capacity *int `json:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	// Name: The name of the SKU. Required.
	// Allowed values: Standard_S1, Free_F1
	Name *string          `json:"name,omitempty"`
	Tier *ResourceSkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceSku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resourceSku *ResourceSku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if resourceSku == nil {
		return nil, nil
	}
	result := &ResourceSkuARM{}

	// Set property ‘Capacity’:
	if resourceSku.Capacity != nil {
		capacity := *resourceSku.Capacity
		result.Capacity = &capacity
	}

	// Set property ‘Name’:
	if resourceSku.Name != nil {
		name := *resourceSku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if resourceSku.Tier != nil {
		tier := *resourceSku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceSku *ResourceSku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceSkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceSku *ResourceSku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceSkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceSkuARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		resourceSku.Capacity = &capacity
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		resourceSku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		resourceSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceSku populates our ResourceSku from the provided source ResourceSku
func (resourceSku *ResourceSku) AssignPropertiesFromResourceSku(source *v20211001s.ResourceSku) error {

	// Capacity
	resourceSku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Name
	resourceSku.Name = genruntime.ClonePointerToString(source.Name)

	// Tier
	if source.Tier != nil {
		tier := ResourceSkuTier(*source.Tier)
		resourceSku.Tier = &tier
	} else {
		resourceSku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceSku populates the provided destination ResourceSku from our ResourceSku
func (resourceSku *ResourceSku) AssignPropertiesToResourceSku(destination *v20211001s.ResourceSku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(resourceSku.Capacity)

	// Name
	destination.Name = genruntime.ClonePointerToString(resourceSku.Name)

	// Tier
	if resourceSku.Tier != nil {
		tier := string(*resourceSku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceSku_Status struct {
	// Capacity: Optional, integer. The unit count of the resource. 1 by default.
	// If present, following values are allowed:
	// Free: 1
	// Standard: 1,2,5,10,20,50,100
	Capacity *int `json:"capacity,omitempty"`

	// Family: Not used. Retained for future use.
	Family *string `json:"family,omitempty"`

	// Name: The name of the SKU. Required.
	// Allowed values: Standard_S1, Free_F1
	Name *string `json:"name,omitempty"`

	// Size: Not used. Retained for future use.
	Size *string                `json:"size,omitempty"`
	Tier *SignalRSkuTier_Status `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceSku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceSku *ResourceSku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceSku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceSku *ResourceSku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceSku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceSku_StatusARM, got %T", armInput)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		resourceSku.Capacity = &capacity
	}

	// Set property ‘Family’:
	if typedInput.Family != nil {
		family := *typedInput.Family
		resourceSku.Family = &family
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		resourceSku.Name = &name
	}

	// Set property ‘Size’:
	if typedInput.Size != nil {
		size := *typedInput.Size
		resourceSku.Size = &size
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		resourceSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceSkuStatus populates our ResourceSku_Status from the provided source ResourceSku_Status
func (resourceSku *ResourceSku_Status) AssignPropertiesFromResourceSkuStatus(source *v20211001s.ResourceSku_Status) error {

	// Capacity
	resourceSku.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	resourceSku.Family = genruntime.ClonePointerToString(source.Family)

	// Name
	resourceSku.Name = genruntime.ClonePointerToString(source.Name)

	// Size
	resourceSku.Size = genruntime.ClonePointerToString(source.Size)

	// Tier
	if source.Tier != nil {
		tier := SignalRSkuTier_Status(*source.Tier)
		resourceSku.Tier = &tier
	} else {
		resourceSku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceSkuStatus populates the provided destination ResourceSku_Status from our ResourceSku_Status
func (resourceSku *ResourceSku_Status) AssignPropertiesToResourceSkuStatus(destination *v20211001s.ResourceSku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(resourceSku.Capacity)

	// Family
	destination.Family = genruntime.ClonePointerToString(resourceSku.Family)

	// Name
	destination.Name = genruntime.ClonePointerToString(resourceSku.Name)

	// Size
	destination.Size = genruntime.ClonePointerToString(resourceSku.Size)

	// Tier
	if resourceSku.Tier != nil {
		tier := string(*resourceSku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ServerlessUpstreamSettings
type ServerlessUpstreamSettings struct {
	// Templates: Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates []UpstreamTemplate `json:"templates,omitempty"`
}

var _ genruntime.ARMTransformer = &ServerlessUpstreamSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *ServerlessUpstreamSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &ServerlessUpstreamSettingsARM{}

	// Set property ‘Templates’:
	for _, item := range settings.Templates {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Templates = append(result.Templates, *itemARM.(*UpstreamTemplateARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *ServerlessUpstreamSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServerlessUpstreamSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *ServerlessUpstreamSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServerlessUpstreamSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServerlessUpstreamSettingsARM, got %T", armInput)
	}

	// Set property ‘Templates’:
	for _, item := range typedInput.Templates {
		var item1 UpstreamTemplate
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		settings.Templates = append(settings.Templates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromServerlessUpstreamSettings populates our ServerlessUpstreamSettings from the provided source ServerlessUpstreamSettings
func (settings *ServerlessUpstreamSettings) AssignPropertiesFromServerlessUpstreamSettings(source *v20211001s.ServerlessUpstreamSettings) error {

	// Templates
	if source.Templates != nil {
		templateList := make([]UpstreamTemplate, len(source.Templates))
		for templateIndex, templateItem := range source.Templates {
			// Shadow the loop variable to avoid aliasing
			templateItem := templateItem
			var template UpstreamTemplate
			err := template.AssignPropertiesFromUpstreamTemplate(&templateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUpstreamTemplate() to populate field Templates")
			}
			templateList[templateIndex] = template
		}
		settings.Templates = templateList
	} else {
		settings.Templates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServerlessUpstreamSettings populates the provided destination ServerlessUpstreamSettings from our ServerlessUpstreamSettings
func (settings *ServerlessUpstreamSettings) AssignPropertiesToServerlessUpstreamSettings(destination *v20211001s.ServerlessUpstreamSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Templates
	if settings.Templates != nil {
		templateList := make([]v20211001s.UpstreamTemplate, len(settings.Templates))
		for templateIndex, templateItem := range settings.Templates {
			// Shadow the loop variable to avoid aliasing
			templateItem := templateItem
			var template v20211001s.UpstreamTemplate
			err := templateItem.AssignPropertiesToUpstreamTemplate(&template)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUpstreamTemplate() to populate field Templates")
			}
			templateList[templateIndex] = template
		}
		destination.Templates = templateList
	} else {
		destination.Templates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServerlessUpstreamSettings_Status struct {
	// Templates: Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates []UpstreamTemplate_Status `json:"templates,omitempty"`
}

var _ genruntime.FromARMConverter = &ServerlessUpstreamSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *ServerlessUpstreamSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServerlessUpstreamSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *ServerlessUpstreamSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServerlessUpstreamSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServerlessUpstreamSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘Templates’:
	for _, item := range typedInput.Templates {
		var item1 UpstreamTemplate_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		settings.Templates = append(settings.Templates, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromServerlessUpstreamSettingsStatus populates our ServerlessUpstreamSettings_Status from the provided source ServerlessUpstreamSettings_Status
func (settings *ServerlessUpstreamSettings_Status) AssignPropertiesFromServerlessUpstreamSettingsStatus(source *v20211001s.ServerlessUpstreamSettings_Status) error {

	// Templates
	if source.Templates != nil {
		templateList := make([]UpstreamTemplate_Status, len(source.Templates))
		for templateIndex, templateItem := range source.Templates {
			// Shadow the loop variable to avoid aliasing
			templateItem := templateItem
			var template UpstreamTemplate_Status
			err := template.AssignPropertiesFromUpstreamTemplateStatus(&templateItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUpstreamTemplateStatus() to populate field Templates")
			}
			templateList[templateIndex] = template
		}
		settings.Templates = templateList
	} else {
		settings.Templates = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServerlessUpstreamSettingsStatus populates the provided destination ServerlessUpstreamSettings_Status from our ServerlessUpstreamSettings_Status
func (settings *ServerlessUpstreamSettings_Status) AssignPropertiesToServerlessUpstreamSettingsStatus(destination *v20211001s.ServerlessUpstreamSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Templates
	if settings.Templates != nil {
		templateList := make([]v20211001s.UpstreamTemplate_Status, len(settings.Templates))
		for templateIndex, templateItem := range settings.Templates {
			// Shadow the loop variable to avoid aliasing
			templateItem := templateItem
			var template v20211001s.UpstreamTemplate_Status
			err := templateItem.AssignPropertiesToUpstreamTemplateStatus(&template)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUpstreamTemplateStatus() to populate field Templates")
			}
			templateList[templateIndex] = template
		}
		destination.Templates = templateList
	} else {
		destination.Templates = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded struct {
	// Id: Fully qualified resource Id for the resource.
	Id         *string            `json:"id,omitempty"`
	SystemData *SystemData_Status `json:"systemData,omitempty"`
}

var _ genruntime.FromARMConverter = &SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SharedPrivateLinkResource_Status_SignalR_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		embedded.SystemData = &systemData
	}

	// No error
	return nil
}

// AssignPropertiesFromSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded populates our SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded from the provided source SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
func (embedded *SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) AssignPropertiesFromSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded(source *v20211001s.SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		embedded.SystemData = &systemDatum
	} else {
		embedded.SystemData = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded populates the provided destination SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded from our SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded
func (embedded *SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) AssignPropertiesToSharedPrivateLinkResourceStatusSignalRSubResourceEmbedded(destination *v20211001s.SharedPrivateLinkResource_Status_SignalR_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// SystemData
	if embedded.SystemData != nil {
		var systemDatum v20211001s.SystemData_Status
		err := embedded.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/SignalRCorsSettings
type SignalRCorsSettings struct {
	// AllowedOrigins: Gets or sets the list of origins that should be allowed to make cross-origin calls (for example:
	// http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
	AllowedOrigins []string `json:"allowedOrigins,omitempty"`
}

var _ genruntime.ARMTransformer = &SignalRCorsSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *SignalRCorsSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &SignalRCorsSettingsARM{}

	// Set property ‘AllowedOrigins’:
	for _, item := range settings.AllowedOrigins {
		result.AllowedOrigins = append(result.AllowedOrigins, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *SignalRCorsSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRCorsSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *SignalRCorsSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRCorsSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRCorsSettingsARM, got %T", armInput)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		settings.AllowedOrigins = append(settings.AllowedOrigins, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRCorsSettings populates our SignalRCorsSettings from the provided source SignalRCorsSettings
func (settings *SignalRCorsSettings) AssignPropertiesFromSignalRCorsSettings(source *v20211001s.SignalRCorsSettings) error {

	// AllowedOrigins
	settings.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// No error
	return nil
}

// AssignPropertiesToSignalRCorsSettings populates the provided destination SignalRCorsSettings from our SignalRCorsSettings
func (settings *SignalRCorsSettings) AssignPropertiesToSignalRCorsSettings(destination *v20211001s.SignalRCorsSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(settings.AllowedOrigins)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SignalRCorsSettings_Status struct {
	// AllowedOrigins: Gets or sets the list of origins that should be allowed to make cross-origin calls (for example:
	// http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
	AllowedOrigins []string `json:"allowedOrigins,omitempty"`
}

var _ genruntime.FromARMConverter = &SignalRCorsSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *SignalRCorsSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRCorsSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *SignalRCorsSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRCorsSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRCorsSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowedOrigins’:
	for _, item := range typedInput.AllowedOrigins {
		settings.AllowedOrigins = append(settings.AllowedOrigins, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRCorsSettingsStatus populates our SignalRCorsSettings_Status from the provided source SignalRCorsSettings_Status
func (settings *SignalRCorsSettings_Status) AssignPropertiesFromSignalRCorsSettingsStatus(source *v20211001s.SignalRCorsSettings_Status) error {

	// AllowedOrigins
	settings.AllowedOrigins = genruntime.CloneSliceOfString(source.AllowedOrigins)

	// No error
	return nil
}

// AssignPropertiesToSignalRCorsSettingsStatus populates the provided destination SignalRCorsSettings_Status from our SignalRCorsSettings_Status
func (settings *SignalRCorsSettings_Status) AssignPropertiesToSignalRCorsSettingsStatus(destination *v20211001s.SignalRCorsSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedOrigins
	destination.AllowedOrigins = genruntime.CloneSliceOfString(settings.AllowedOrigins)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/SignalRFeature
type SignalRFeature struct {
	// +kubebuilder:validation:Required
	Flag *SignalRFeatureFlag `json:"flag,omitempty"`

	// Properties: Optional properties related to this feature.
	Properties map[string]string `json:"properties,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=128
	// +kubebuilder:validation:MinLength=1
	// Value: Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for
	// allowed values.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &SignalRFeature{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (feature *SignalRFeature) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if feature == nil {
		return nil, nil
	}
	result := &SignalRFeatureARM{}

	// Set property ‘Flag’:
	if feature.Flag != nil {
		flag := *feature.Flag
		result.Flag = &flag
	}

	// Set property ‘Properties’:
	if feature.Properties != nil {
		result.Properties = make(map[string]string, len(feature.Properties))
		for key, value := range feature.Properties {
			result.Properties[key] = value
		}
	}

	// Set property ‘Value’:
	if feature.Value != nil {
		value := *feature.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (feature *SignalRFeature) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRFeatureARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (feature *SignalRFeature) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRFeatureARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRFeatureARM, got %T", armInput)
	}

	// Set property ‘Flag’:
	if typedInput.Flag != nil {
		flag := *typedInput.Flag
		feature.Flag = &flag
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		feature.Properties = make(map[string]string, len(typedInput.Properties))
		for key, value := range typedInput.Properties {
			feature.Properties[key] = value
		}
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		feature.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRFeature populates our SignalRFeature from the provided source SignalRFeature
func (feature *SignalRFeature) AssignPropertiesFromSignalRFeature(source *v20211001s.SignalRFeature) error {

	// Flag
	if source.Flag != nil {
		flag := SignalRFeatureFlag(*source.Flag)
		feature.Flag = &flag
	} else {
		feature.Flag = nil
	}

	// Properties
	feature.Properties = genruntime.CloneMapOfStringToString(source.Properties)

	// Value
	if source.Value != nil {
		value := *source.Value
		feature.Value = &value
	} else {
		feature.Value = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRFeature populates the provided destination SignalRFeature from our SignalRFeature
func (feature *SignalRFeature) AssignPropertiesToSignalRFeature(destination *v20211001s.SignalRFeature) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Flag
	if feature.Flag != nil {
		flag := string(*feature.Flag)
		destination.Flag = &flag
	} else {
		destination.Flag = nil
	}

	// Properties
	destination.Properties = genruntime.CloneMapOfStringToString(feature.Properties)

	// Value
	if feature.Value != nil {
		value := *feature.Value
		destination.Value = &value
	} else {
		destination.Value = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SignalRFeature_Status struct {
	Flag *FeatureFlags_Status `json:"flag,omitempty"`

	// Properties: Optional properties related to this feature.
	Properties map[string]string `json:"properties,omitempty"`

	// Value: Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for
	// allowed values.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &SignalRFeature_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (feature *SignalRFeature_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRFeature_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (feature *SignalRFeature_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRFeature_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRFeature_StatusARM, got %T", armInput)
	}

	// Set property ‘Flag’:
	if typedInput.Flag != nil {
		flag := *typedInput.Flag
		feature.Flag = &flag
	}

	// Set property ‘Properties’:
	if typedInput.Properties != nil {
		feature.Properties = make(map[string]string, len(typedInput.Properties))
		for key, value := range typedInput.Properties {
			feature.Properties[key] = value
		}
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		feature.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRFeatureStatus populates our SignalRFeature_Status from the provided source SignalRFeature_Status
func (feature *SignalRFeature_Status) AssignPropertiesFromSignalRFeatureStatus(source *v20211001s.SignalRFeature_Status) error {

	// Flag
	if source.Flag != nil {
		flag := FeatureFlags_Status(*source.Flag)
		feature.Flag = &flag
	} else {
		feature.Flag = nil
	}

	// Properties
	feature.Properties = genruntime.CloneMapOfStringToString(source.Properties)

	// Value
	feature.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToSignalRFeatureStatus populates the provided destination SignalRFeature_Status from our SignalRFeature_Status
func (feature *SignalRFeature_Status) AssignPropertiesToSignalRFeatureStatus(destination *v20211001s.SignalRFeature_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Flag
	if feature.Flag != nil {
		flag := string(*feature.Flag)
		destination.Flag = &flag
	} else {
		destination.Flag = nil
	}

	// Properties
	destination.Properties = genruntime.CloneMapOfStringToString(feature.Properties)

	// Value
	destination.Value = genruntime.ClonePointerToString(feature.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/SignalRNetworkACLs
type SignalRNetworkACLs struct {
	DefaultAction *SignalRNetworkACLsDefaultAction `json:"defaultAction,omitempty"`

	// PrivateEndpoints: ACLs for requests from private endpoints
	PrivateEndpoints []PrivateEndpointACL `json:"privateEndpoints,omitempty"`

	// PublicNetwork: Network ACL
	PublicNetwork *NetworkACL `json:"publicNetwork,omitempty"`
}

var _ genruntime.ARMTransformer = &SignalRNetworkACLs{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (acLs *SignalRNetworkACLs) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if acLs == nil {
		return nil, nil
	}
	result := &SignalRNetworkACLsARM{}

	// Set property ‘DefaultAction’:
	if acLs.DefaultAction != nil {
		defaultAction := *acLs.DefaultAction
		result.DefaultAction = &defaultAction
	}

	// Set property ‘PrivateEndpoints’:
	for _, item := range acLs.PrivateEndpoints {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.PrivateEndpoints = append(result.PrivateEndpoints, *itemARM.(*PrivateEndpointACLARM))
	}

	// Set property ‘PublicNetwork’:
	if acLs.PublicNetwork != nil {
		publicNetworkARM, err := (*acLs.PublicNetwork).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		publicNetwork := *publicNetworkARM.(*NetworkACLARM)
		result.PublicNetwork = &publicNetwork
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (acLs *SignalRNetworkACLs) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRNetworkACLsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (acLs *SignalRNetworkACLs) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRNetworkACLsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRNetworkACLsARM, got %T", armInput)
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		acLs.DefaultAction = &defaultAction
	}

	// Set property ‘PrivateEndpoints’:
	for _, item := range typedInput.PrivateEndpoints {
		var item1 PrivateEndpointACL
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		acLs.PrivateEndpoints = append(acLs.PrivateEndpoints, item1)
	}

	// Set property ‘PublicNetwork’:
	if typedInput.PublicNetwork != nil {
		var publicNetwork1 NetworkACL
		err := publicNetwork1.PopulateFromARM(owner, *typedInput.PublicNetwork)
		if err != nil {
			return err
		}
		publicNetwork := publicNetwork1
		acLs.PublicNetwork = &publicNetwork
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRNetworkACLs populates our SignalRNetworkACLs from the provided source SignalRNetworkACLs
func (acLs *SignalRNetworkACLs) AssignPropertiesFromSignalRNetworkACLs(source *v20211001s.SignalRNetworkACLs) error {

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := SignalRNetworkACLsDefaultAction(*source.DefaultAction)
		acLs.DefaultAction = &defaultAction
	} else {
		acLs.DefaultAction = nil
	}

	// PrivateEndpoints
	if source.PrivateEndpoints != nil {
		privateEndpointList := make([]PrivateEndpointACL, len(source.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range source.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint PrivateEndpointACL
			err := privateEndpoint.AssignPropertiesFromPrivateEndpointACL(&privateEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointACL() to populate field PrivateEndpoints")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		acLs.PrivateEndpoints = privateEndpointList
	} else {
		acLs.PrivateEndpoints = nil
	}

	// PublicNetwork
	if source.PublicNetwork != nil {
		var publicNetwork NetworkACL
		err := publicNetwork.AssignPropertiesFromNetworkACL(source.PublicNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkACL() to populate field PublicNetwork")
		}
		acLs.PublicNetwork = &publicNetwork
	} else {
		acLs.PublicNetwork = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRNetworkACLs populates the provided destination SignalRNetworkACLs from our SignalRNetworkACLs
func (acLs *SignalRNetworkACLs) AssignPropertiesToSignalRNetworkACLs(destination *v20211001s.SignalRNetworkACLs) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultAction
	if acLs.DefaultAction != nil {
		defaultAction := string(*acLs.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// PrivateEndpoints
	if acLs.PrivateEndpoints != nil {
		privateEndpointList := make([]v20211001s.PrivateEndpointACL, len(acLs.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range acLs.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint v20211001s.PrivateEndpointACL
			err := privateEndpointItem.AssignPropertiesToPrivateEndpointACL(&privateEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointACL() to populate field PrivateEndpoints")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		destination.PrivateEndpoints = privateEndpointList
	} else {
		destination.PrivateEndpoints = nil
	}

	// PublicNetwork
	if acLs.PublicNetwork != nil {
		var publicNetwork v20211001s.NetworkACL
		err := acLs.PublicNetwork.AssignPropertiesToNetworkACL(&publicNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkACL() to populate field PublicNetwork")
		}
		destination.PublicNetwork = &publicNetwork
	} else {
		destination.PublicNetwork = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SignalRNetworkACLs_Status struct {
	DefaultAction *ACLAction_Status `json:"defaultAction,omitempty"`

	// PrivateEndpoints: ACLs for requests from private endpoints
	PrivateEndpoints []PrivateEndpointACL_Status `json:"privateEndpoints,omitempty"`
	PublicNetwork    *NetworkACL_Status          `json:"publicNetwork,omitempty"`
}

var _ genruntime.FromARMConverter = &SignalRNetworkACLs_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (acLs *SignalRNetworkACLs_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRNetworkACLs_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (acLs *SignalRNetworkACLs_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRNetworkACLs_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRNetworkACLs_StatusARM, got %T", armInput)
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		acLs.DefaultAction = &defaultAction
	}

	// Set property ‘PrivateEndpoints’:
	for _, item := range typedInput.PrivateEndpoints {
		var item1 PrivateEndpointACL_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		acLs.PrivateEndpoints = append(acLs.PrivateEndpoints, item1)
	}

	// Set property ‘PublicNetwork’:
	if typedInput.PublicNetwork != nil {
		var publicNetwork1 NetworkACL_Status
		err := publicNetwork1.PopulateFromARM(owner, *typedInput.PublicNetwork)
		if err != nil {
			return err
		}
		publicNetwork := publicNetwork1
		acLs.PublicNetwork = &publicNetwork
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRNetworkACLsStatus populates our SignalRNetworkACLs_Status from the provided source SignalRNetworkACLs_Status
func (acLs *SignalRNetworkACLs_Status) AssignPropertiesFromSignalRNetworkACLsStatus(source *v20211001s.SignalRNetworkACLs_Status) error {

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := ACLAction_Status(*source.DefaultAction)
		acLs.DefaultAction = &defaultAction
	} else {
		acLs.DefaultAction = nil
	}

	// PrivateEndpoints
	if source.PrivateEndpoints != nil {
		privateEndpointList := make([]PrivateEndpointACL_Status, len(source.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range source.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint PrivateEndpointACL_Status
			err := privateEndpoint.AssignPropertiesFromPrivateEndpointACLStatus(&privateEndpointItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointACLStatus() to populate field PrivateEndpoints")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		acLs.PrivateEndpoints = privateEndpointList
	} else {
		acLs.PrivateEndpoints = nil
	}

	// PublicNetwork
	if source.PublicNetwork != nil {
		var publicNetwork NetworkACL_Status
		err := publicNetwork.AssignPropertiesFromNetworkACLStatus(source.PublicNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkACLStatus() to populate field PublicNetwork")
		}
		acLs.PublicNetwork = &publicNetwork
	} else {
		acLs.PublicNetwork = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRNetworkACLsStatus populates the provided destination SignalRNetworkACLs_Status from our SignalRNetworkACLs_Status
func (acLs *SignalRNetworkACLs_Status) AssignPropertiesToSignalRNetworkACLsStatus(destination *v20211001s.SignalRNetworkACLs_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultAction
	if acLs.DefaultAction != nil {
		defaultAction := string(*acLs.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// PrivateEndpoints
	if acLs.PrivateEndpoints != nil {
		privateEndpointList := make([]v20211001s.PrivateEndpointACL_Status, len(acLs.PrivateEndpoints))
		for privateEndpointIndex, privateEndpointItem := range acLs.PrivateEndpoints {
			// Shadow the loop variable to avoid aliasing
			privateEndpointItem := privateEndpointItem
			var privateEndpoint v20211001s.PrivateEndpointACL_Status
			err := privateEndpointItem.AssignPropertiesToPrivateEndpointACLStatus(&privateEndpoint)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointACLStatus() to populate field PrivateEndpoints")
			}
			privateEndpointList[privateEndpointIndex] = privateEndpoint
		}
		destination.PrivateEndpoints = privateEndpointList
	} else {
		destination.PrivateEndpoints = nil
	}

	// PublicNetwork
	if acLs.PublicNetwork != nil {
		var publicNetwork v20211001s.NetworkACL_Status
		err := acLs.PublicNetwork.AssignPropertiesToNetworkACLStatus(&publicNetwork)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkACLStatus() to populate field PublicNetwork")
		}
		destination.PublicNetwork = &publicNetwork
	} else {
		destination.PublicNetwork = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/SignalRTlsSettings
type SignalRTlsSettings struct {
	// ClientCertEnabled: Request client certificate during TLS handshake if enabled
	ClientCertEnabled *bool `json:"clientCertEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &SignalRTlsSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *SignalRTlsSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &SignalRTlsSettingsARM{}

	// Set property ‘ClientCertEnabled’:
	if settings.ClientCertEnabled != nil {
		clientCertEnabled := *settings.ClientCertEnabled
		result.ClientCertEnabled = &clientCertEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *SignalRTlsSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRTlsSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *SignalRTlsSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRTlsSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRTlsSettingsARM, got %T", armInput)
	}

	// Set property ‘ClientCertEnabled’:
	if typedInput.ClientCertEnabled != nil {
		clientCertEnabled := *typedInput.ClientCertEnabled
		settings.ClientCertEnabled = &clientCertEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRTlsSettings populates our SignalRTlsSettings from the provided source SignalRTlsSettings
func (settings *SignalRTlsSettings) AssignPropertiesFromSignalRTlsSettings(source *v20211001s.SignalRTlsSettings) error {

	// ClientCertEnabled
	if source.ClientCertEnabled != nil {
		clientCertEnabled := *source.ClientCertEnabled
		settings.ClientCertEnabled = &clientCertEnabled
	} else {
		settings.ClientCertEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRTlsSettings populates the provided destination SignalRTlsSettings from our SignalRTlsSettings
func (settings *SignalRTlsSettings) AssignPropertiesToSignalRTlsSettings(destination *v20211001s.SignalRTlsSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientCertEnabled
	if settings.ClientCertEnabled != nil {
		clientCertEnabled := *settings.ClientCertEnabled
		destination.ClientCertEnabled = &clientCertEnabled
	} else {
		destination.ClientCertEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SignalRTlsSettings_Status struct {
	// ClientCertEnabled: Request client certificate during TLS handshake if enabled
	ClientCertEnabled *bool `json:"clientCertEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &SignalRTlsSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *SignalRTlsSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SignalRTlsSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *SignalRTlsSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SignalRTlsSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SignalRTlsSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientCertEnabled’:
	if typedInput.ClientCertEnabled != nil {
		clientCertEnabled := *typedInput.ClientCertEnabled
		settings.ClientCertEnabled = &clientCertEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromSignalRTlsSettingsStatus populates our SignalRTlsSettings_Status from the provided source SignalRTlsSettings_Status
func (settings *SignalRTlsSettings_Status) AssignPropertiesFromSignalRTlsSettingsStatus(source *v20211001s.SignalRTlsSettings_Status) error {

	// ClientCertEnabled
	if source.ClientCertEnabled != nil {
		clientCertEnabled := *source.ClientCertEnabled
		settings.ClientCertEnabled = &clientCertEnabled
	} else {
		settings.ClientCertEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSignalRTlsSettingsStatus populates the provided destination SignalRTlsSettings_Status from our SignalRTlsSettings_Status
func (settings *SignalRTlsSettings_Status) AssignPropertiesToSignalRTlsSettingsStatus(destination *v20211001s.SignalRTlsSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientCertEnabled
	if settings.ClientCertEnabled != nil {
		clientCertEnabled := *settings.ClientCertEnabled
		destination.ClientCertEnabled = &clientCertEnabled
	} else {
		destination.ClientCertEnabled = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_Status struct {
	// CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemDataStatusCreatedByType `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemDataStatusLastModifiedByType `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemDataStatus populates our SystemData_Status from the provided source SystemData_Status
func (data *SystemData_Status) AssignPropertiesFromSystemDataStatus(source *v20211001s.SystemData_Status) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemDataStatusCreatedByType(*source.CreatedByType)
		data.CreatedByType = &createdByType
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemDataStatusLastModifiedByType(*source.LastModifiedByType)
		data.LastModifiedByType = &lastModifiedByType
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemDataStatus populates the provided destination SystemData_Status from our SystemData_Status
func (data *SystemData_Status) AssignPropertiesToSystemDataStatus(destination *v20211001s.SystemData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ACLAction_Status string

const (
	ACLAction_StatusAllow = ACLAction_Status("Allow")
	ACLAction_StatusDeny  = ACLAction_Status("Deny")
)

type FeatureFlags_Status string

const (
	FeatureFlags_StatusEnableConnectivityLogs = FeatureFlags_Status("EnableConnectivityLogs")
	FeatureFlags_StatusEnableLiveTrace        = FeatureFlags_Status("EnableLiveTrace")
	FeatureFlags_StatusEnableMessagingLogs    = FeatureFlags_Status("EnableMessagingLogs")
	FeatureFlags_StatusServiceMode            = FeatureFlags_Status("ServiceMode")
)

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/NetworkACL
type NetworkACL struct {
	// Allow: Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []NetworkACLAllow `json:"allow,omitempty"`

	// Deny: Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []NetworkACLDeny `json:"deny,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkACL{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (networkACL *NetworkACL) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if networkACL == nil {
		return nil, nil
	}
	result := &NetworkACLARM{}

	// Set property ‘Allow’:
	for _, item := range networkACL.Allow {
		result.Allow = append(result.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range networkACL.Deny {
		result.Deny = append(result.Deny, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkACL *NetworkACL) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkACLARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkACL *NetworkACL) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkACLARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkACLARM, got %T", armInput)
	}

	// Set property ‘Allow’:
	for _, item := range typedInput.Allow {
		networkACL.Allow = append(networkACL.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range typedInput.Deny {
		networkACL.Deny = append(networkACL.Deny, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkACL populates our NetworkACL from the provided source NetworkACL
func (networkACL *NetworkACL) AssignPropertiesFromNetworkACL(source *v20211001s.NetworkACL) error {

	// Allow
	if source.Allow != nil {
		allowList := make([]NetworkACLAllow, len(source.Allow))
		for allowIndex, allowItem := range source.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = NetworkACLAllow(allowItem)
		}
		networkACL.Allow = allowList
	} else {
		networkACL.Allow = nil
	}

	// Deny
	if source.Deny != nil {
		denyList := make([]NetworkACLDeny, len(source.Deny))
		for denyIndex, denyItem := range source.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = NetworkACLDeny(denyItem)
		}
		networkACL.Deny = denyList
	} else {
		networkACL.Deny = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkACL populates the provided destination NetworkACL from our NetworkACL
func (networkACL *NetworkACL) AssignPropertiesToNetworkACL(destination *v20211001s.NetworkACL) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Allow
	if networkACL.Allow != nil {
		allowList := make([]string, len(networkACL.Allow))
		for allowIndex, allowItem := range networkACL.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = string(allowItem)
		}
		destination.Allow = allowList
	} else {
		destination.Allow = nil
	}

	// Deny
	if networkACL.Deny != nil {
		denyList := make([]string, len(networkACL.Deny))
		for denyIndex, denyItem := range networkACL.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = string(denyItem)
		}
		destination.Deny = denyList
	} else {
		destination.Deny = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkACL_Status struct {
	// Allow: Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []SignalRRequestType_Status `json:"allow,omitempty"`

	// Deny: Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []SignalRRequestType_Status `json:"deny,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkACL_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkACL *NetworkACL_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkACL_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkACL *NetworkACL_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkACL_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkACL_StatusARM, got %T", armInput)
	}

	// Set property ‘Allow’:
	for _, item := range typedInput.Allow {
		networkACL.Allow = append(networkACL.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range typedInput.Deny {
		networkACL.Deny = append(networkACL.Deny, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkACLStatus populates our NetworkACL_Status from the provided source NetworkACL_Status
func (networkACL *NetworkACL_Status) AssignPropertiesFromNetworkACLStatus(source *v20211001s.NetworkACL_Status) error {

	// Allow
	if source.Allow != nil {
		allowList := make([]SignalRRequestType_Status, len(source.Allow))
		for allowIndex, allowItem := range source.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = SignalRRequestType_Status(allowItem)
		}
		networkACL.Allow = allowList
	} else {
		networkACL.Allow = nil
	}

	// Deny
	if source.Deny != nil {
		denyList := make([]SignalRRequestType_Status, len(source.Deny))
		for denyIndex, denyItem := range source.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = SignalRRequestType_Status(denyItem)
		}
		networkACL.Deny = denyList
	} else {
		networkACL.Deny = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkACLStatus populates the provided destination NetworkACL_Status from our NetworkACL_Status
func (networkACL *NetworkACL_Status) AssignPropertiesToNetworkACLStatus(destination *v20211001s.NetworkACL_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Allow
	if networkACL.Allow != nil {
		allowList := make([]string, len(networkACL.Allow))
		for allowIndex, allowItem := range networkACL.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = string(allowItem)
		}
		destination.Allow = allowList
	} else {
		destination.Allow = nil
	}

	// Deny
	if networkACL.Deny != nil {
		denyList := make([]string, len(networkACL.Deny))
		for denyIndex, denyItem := range networkACL.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = string(denyItem)
		}
		destination.Deny = denyList
	} else {
		destination.Deny = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/PrivateEndpointACL
type PrivateEndpointACL struct {
	// Allow: Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []PrivateEndpointACLAllow `json:"allow,omitempty"`

	// Deny: Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []PrivateEndpointACLDeny `json:"deny,omitempty"`

	// +kubebuilder:validation:Required
	// Name: Name of the private endpoint connection
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &PrivateEndpointACL{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (endpointACL *PrivateEndpointACL) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if endpointACL == nil {
		return nil, nil
	}
	result := &PrivateEndpointACLARM{}

	// Set property ‘Allow’:
	for _, item := range endpointACL.Allow {
		result.Allow = append(result.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range endpointACL.Deny {
		result.Deny = append(result.Deny, item)
	}

	// Set property ‘Name’:
	if endpointACL.Name != nil {
		name := *endpointACL.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpointACL *PrivateEndpointACL) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointACLARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpointACL *PrivateEndpointACL) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointACLARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointACLARM, got %T", armInput)
	}

	// Set property ‘Allow’:
	for _, item := range typedInput.Allow {
		endpointACL.Allow = append(endpointACL.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range typedInput.Deny {
		endpointACL.Deny = append(endpointACL.Deny, item)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		endpointACL.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointACL populates our PrivateEndpointACL from the provided source PrivateEndpointACL
func (endpointACL *PrivateEndpointACL) AssignPropertiesFromPrivateEndpointACL(source *v20211001s.PrivateEndpointACL) error {

	// Allow
	if source.Allow != nil {
		allowList := make([]PrivateEndpointACLAllow, len(source.Allow))
		for allowIndex, allowItem := range source.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = PrivateEndpointACLAllow(allowItem)
		}
		endpointACL.Allow = allowList
	} else {
		endpointACL.Allow = nil
	}

	// Deny
	if source.Deny != nil {
		denyList := make([]PrivateEndpointACLDeny, len(source.Deny))
		for denyIndex, denyItem := range source.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = PrivateEndpointACLDeny(denyItem)
		}
		endpointACL.Deny = denyList
	} else {
		endpointACL.Deny = nil
	}

	// Name
	endpointACL.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointACL populates the provided destination PrivateEndpointACL from our PrivateEndpointACL
func (endpointACL *PrivateEndpointACL) AssignPropertiesToPrivateEndpointACL(destination *v20211001s.PrivateEndpointACL) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Allow
	if endpointACL.Allow != nil {
		allowList := make([]string, len(endpointACL.Allow))
		for allowIndex, allowItem := range endpointACL.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = string(allowItem)
		}
		destination.Allow = allowList
	} else {
		destination.Allow = nil
	}

	// Deny
	if endpointACL.Deny != nil {
		denyList := make([]string, len(endpointACL.Deny))
		for denyIndex, denyItem := range endpointACL.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = string(denyItem)
		}
		destination.Deny = denyList
	} else {
		destination.Deny = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(endpointACL.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointACL_Status struct {
	// Allow: Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []SignalRRequestType_Status `json:"allow,omitempty"`

	// Deny: Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []SignalRRequestType_Status `json:"deny,omitempty"`

	// Name: Name of the private endpoint connection
	Name *string `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointACL_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpointACL *PrivateEndpointACL_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointACL_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpointACL *PrivateEndpointACL_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointACL_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointACL_StatusARM, got %T", armInput)
	}

	// Set property ‘Allow’:
	for _, item := range typedInput.Allow {
		endpointACL.Allow = append(endpointACL.Allow, item)
	}

	// Set property ‘Deny’:
	for _, item := range typedInput.Deny {
		endpointACL.Deny = append(endpointACL.Deny, item)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		endpointACL.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointACLStatus populates our PrivateEndpointACL_Status from the provided source PrivateEndpointACL_Status
func (endpointACL *PrivateEndpointACL_Status) AssignPropertiesFromPrivateEndpointACLStatus(source *v20211001s.PrivateEndpointACL_Status) error {

	// Allow
	if source.Allow != nil {
		allowList := make([]SignalRRequestType_Status, len(source.Allow))
		for allowIndex, allowItem := range source.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = SignalRRequestType_Status(allowItem)
		}
		endpointACL.Allow = allowList
	} else {
		endpointACL.Allow = nil
	}

	// Deny
	if source.Deny != nil {
		denyList := make([]SignalRRequestType_Status, len(source.Deny))
		for denyIndex, denyItem := range source.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = SignalRRequestType_Status(denyItem)
		}
		endpointACL.Deny = denyList
	} else {
		endpointACL.Deny = nil
	}

	// Name
	endpointACL.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointACLStatus populates the provided destination PrivateEndpointACL_Status from our PrivateEndpointACL_Status
func (endpointACL *PrivateEndpointACL_Status) AssignPropertiesToPrivateEndpointACLStatus(destination *v20211001s.PrivateEndpointACL_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Allow
	if endpointACL.Allow != nil {
		allowList := make([]string, len(endpointACL.Allow))
		for allowIndex, allowItem := range endpointACL.Allow {
			// Shadow the loop variable to avoid aliasing
			allowItem := allowItem
			allowList[allowIndex] = string(allowItem)
		}
		destination.Allow = allowList
	} else {
		destination.Allow = nil
	}

	// Deny
	if endpointACL.Deny != nil {
		denyList := make([]string, len(endpointACL.Deny))
		for denyIndex, denyItem := range endpointACL.Deny {
			// Shadow the loop variable to avoid aliasing
			denyItem := denyItem
			denyList[denyIndex] = string(denyItem)
		}
		destination.Deny = denyList
	} else {
		destination.Deny = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(endpointACL.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ResourceLogCategory
type ResourceLogCategory struct {
	// Enabled: Indicates whether or the resource log category is enabled.
	// Available values: true, false.
	// Case insensitive.
	Enabled *string `json:"enabled,omitempty"`

	// Name: Gets or sets the resource log category's name.
	// Available values: ConnectivityLogs, MessagingLogs.
	// Case insensitive.
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceLogCategory{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (category *ResourceLogCategory) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if category == nil {
		return nil, nil
	}
	result := &ResourceLogCategoryARM{}

	// Set property ‘Enabled’:
	if category.Enabled != nil {
		enabled := *category.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘Name’:
	if category.Name != nil {
		name := *category.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (category *ResourceLogCategory) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceLogCategoryARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (category *ResourceLogCategory) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceLogCategoryARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceLogCategoryARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		category.Enabled = &enabled
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		category.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceLogCategory populates our ResourceLogCategory from the provided source ResourceLogCategory
func (category *ResourceLogCategory) AssignPropertiesFromResourceLogCategory(source *v20211001s.ResourceLogCategory) error {

	// Enabled
	category.Enabled = genruntime.ClonePointerToString(source.Enabled)

	// Name
	category.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToResourceLogCategory populates the provided destination ResourceLogCategory from our ResourceLogCategory
func (category *ResourceLogCategory) AssignPropertiesToResourceLogCategory(destination *v20211001s.ResourceLogCategory) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	destination.Enabled = genruntime.ClonePointerToString(category.Enabled)

	// Name
	destination.Name = genruntime.ClonePointerToString(category.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceLogCategory_Status struct {
	// Enabled: Indicates whether or the resource log category is enabled.
	// Available values: true, false.
	// Case insensitive.
	Enabled *string `json:"enabled,omitempty"`

	// Name: Gets or sets the resource log category's name.
	// Available values: ConnectivityLogs, MessagingLogs.
	// Case insensitive.
	Name *string `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceLogCategory_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (category *ResourceLogCategory_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceLogCategory_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (category *ResourceLogCategory_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceLogCategory_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceLogCategory_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		category.Enabled = &enabled
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		category.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceLogCategoryStatus populates our ResourceLogCategory_Status from the provided source ResourceLogCategory_Status
func (category *ResourceLogCategory_Status) AssignPropertiesFromResourceLogCategoryStatus(source *v20211001s.ResourceLogCategory_Status) error {

	// Enabled
	category.Enabled = genruntime.ClonePointerToString(source.Enabled)

	// Name
	category.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToResourceLogCategoryStatus populates the provided destination ResourceLogCategory_Status from our ResourceLogCategory_Status
func (category *ResourceLogCategory_Status) AssignPropertiesToResourceLogCategoryStatus(destination *v20211001s.ResourceLogCategory_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	destination.Enabled = genruntime.ClonePointerToString(category.Enabled)

	// Name
	destination.Name = genruntime.ClonePointerToString(category.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"EnableConnectivityLogs","EnableLiveTrace","EnableMessagingLogs","ServiceMode"}
type SignalRFeatureFlag string

const (
	SignalRFeatureFlagEnableConnectivityLogs = SignalRFeatureFlag("EnableConnectivityLogs")
	SignalRFeatureFlagEnableLiveTrace        = SignalRFeatureFlag("EnableLiveTrace")
	SignalRFeatureFlagEnableMessagingLogs    = SignalRFeatureFlag("EnableMessagingLogs")
	SignalRFeatureFlagServiceMode            = SignalRFeatureFlag("ServiceMode")
)

// +kubebuilder:validation:Enum={"Allow","Deny"}
type SignalRNetworkACLsDefaultAction string

const (
	SignalRNetworkACLsDefaultActionAllow = SignalRNetworkACLsDefaultAction("Allow")
	SignalRNetworkACLsDefaultActionDeny  = SignalRNetworkACLsDefaultAction("Deny")
)

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/UpstreamTemplate
type UpstreamTemplate struct {
	// Auth: Upstream auth settings. If not set, no auth is used for upstream messages.
	Auth *UpstreamAuthSettings `json:"auth,omitempty"`

	// CategoryPattern: Gets or sets the matching pattern for category names. If not set, it matches any category.
	// There are 3 kind of patterns supported:
	// 1. "*", it to matches any category name
	// 2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and
	// "messages"
	// 3. The single category name, for example, "connections", it matches the category "connections"
	CategoryPattern *string `json:"categoryPattern,omitempty"`

	// EventPattern: Gets or sets the matching pattern for event names. If not set, it matches any event.
	// There are 3 kind of patterns supported:
	// 1. "*", it to matches any event name
	// 2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
	// 3. The single event name, for example, "connect", it matches "connect"
	EventPattern *string `json:"eventPattern,omitempty"`

	// HubPattern: Gets or sets the matching pattern for hub names. If not set, it matches any hub.
	// There are 3 kind of patterns supported:
	// 1. "*", it to matches any hub name
	// 2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
	// 3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern *string `json:"hubPattern,omitempty"`

	// +kubebuilder:validation:Required
	// UrlTemplate: Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event}
	// inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
	// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat`
	// connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
	UrlTemplate *string `json:"urlTemplate,omitempty"`
}

var _ genruntime.ARMTransformer = &UpstreamTemplate{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (template *UpstreamTemplate) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if template == nil {
		return nil, nil
	}
	result := &UpstreamTemplateARM{}

	// Set property ‘Auth’:
	if template.Auth != nil {
		authARM, err := (*template.Auth).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		auth := *authARM.(*UpstreamAuthSettingsARM)
		result.Auth = &auth
	}

	// Set property ‘CategoryPattern’:
	if template.CategoryPattern != nil {
		categoryPattern := *template.CategoryPattern
		result.CategoryPattern = &categoryPattern
	}

	// Set property ‘EventPattern’:
	if template.EventPattern != nil {
		eventPattern := *template.EventPattern
		result.EventPattern = &eventPattern
	}

	// Set property ‘HubPattern’:
	if template.HubPattern != nil {
		hubPattern := *template.HubPattern
		result.HubPattern = &hubPattern
	}

	// Set property ‘UrlTemplate’:
	if template.UrlTemplate != nil {
		urlTemplate := *template.UrlTemplate
		result.UrlTemplate = &urlTemplate
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (template *UpstreamTemplate) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpstreamTemplateARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (template *UpstreamTemplate) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpstreamTemplateARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpstreamTemplateARM, got %T", armInput)
	}

	// Set property ‘Auth’:
	if typedInput.Auth != nil {
		var auth1 UpstreamAuthSettings
		err := auth1.PopulateFromARM(owner, *typedInput.Auth)
		if err != nil {
			return err
		}
		auth := auth1
		template.Auth = &auth
	}

	// Set property ‘CategoryPattern’:
	if typedInput.CategoryPattern != nil {
		categoryPattern := *typedInput.CategoryPattern
		template.CategoryPattern = &categoryPattern
	}

	// Set property ‘EventPattern’:
	if typedInput.EventPattern != nil {
		eventPattern := *typedInput.EventPattern
		template.EventPattern = &eventPattern
	}

	// Set property ‘HubPattern’:
	if typedInput.HubPattern != nil {
		hubPattern := *typedInput.HubPattern
		template.HubPattern = &hubPattern
	}

	// Set property ‘UrlTemplate’:
	if typedInput.UrlTemplate != nil {
		urlTemplate := *typedInput.UrlTemplate
		template.UrlTemplate = &urlTemplate
	}

	// No error
	return nil
}

// AssignPropertiesFromUpstreamTemplate populates our UpstreamTemplate from the provided source UpstreamTemplate
func (template *UpstreamTemplate) AssignPropertiesFromUpstreamTemplate(source *v20211001s.UpstreamTemplate) error {

	// Auth
	if source.Auth != nil {
		var auth UpstreamAuthSettings
		err := auth.AssignPropertiesFromUpstreamAuthSettings(source.Auth)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUpstreamAuthSettings() to populate field Auth")
		}
		template.Auth = &auth
	} else {
		template.Auth = nil
	}

	// CategoryPattern
	template.CategoryPattern = genruntime.ClonePointerToString(source.CategoryPattern)

	// EventPattern
	template.EventPattern = genruntime.ClonePointerToString(source.EventPattern)

	// HubPattern
	template.HubPattern = genruntime.ClonePointerToString(source.HubPattern)

	// UrlTemplate
	template.UrlTemplate = genruntime.ClonePointerToString(source.UrlTemplate)

	// No error
	return nil
}

// AssignPropertiesToUpstreamTemplate populates the provided destination UpstreamTemplate from our UpstreamTemplate
func (template *UpstreamTemplate) AssignPropertiesToUpstreamTemplate(destination *v20211001s.UpstreamTemplate) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Auth
	if template.Auth != nil {
		var auth v20211001s.UpstreamAuthSettings
		err := template.Auth.AssignPropertiesToUpstreamAuthSettings(&auth)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUpstreamAuthSettings() to populate field Auth")
		}
		destination.Auth = &auth
	} else {
		destination.Auth = nil
	}

	// CategoryPattern
	destination.CategoryPattern = genruntime.ClonePointerToString(template.CategoryPattern)

	// EventPattern
	destination.EventPattern = genruntime.ClonePointerToString(template.EventPattern)

	// HubPattern
	destination.HubPattern = genruntime.ClonePointerToString(template.HubPattern)

	// UrlTemplate
	destination.UrlTemplate = genruntime.ClonePointerToString(template.UrlTemplate)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UpstreamTemplate_Status struct {
	Auth *UpstreamAuthSettings_Status `json:"auth,omitempty"`

	// CategoryPattern: Gets or sets the matching pattern for category names. If not set, it matches any category.
	// There are 3 kind of patterns supported:
	// 1. "*", it to matches any category name
	// 2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and
	// "messages"
	// 3. The single category name, for example, "connections", it matches the category "connections"
	CategoryPattern *string `json:"categoryPattern,omitempty"`

	// EventPattern: Gets or sets the matching pattern for event names. If not set, it matches any event.
	// There are 3 kind of patterns supported:
	// 1. "*", it to matches any event name
	// 2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect"
	// 3. The single event name, for example, "connect", it matches "connect"
	EventPattern *string `json:"eventPattern,omitempty"`

	// HubPattern: Gets or sets the matching pattern for hub names. If not set, it matches any hub.
	// There are 3 kind of patterns supported:
	// 1. "*", it to matches any hub name
	// 2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
	// 3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern *string `json:"hubPattern,omitempty"`

	// UrlTemplate: Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event}
	// inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
	// For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat`
	// connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
	UrlTemplate *string `json:"urlTemplate,omitempty"`
}

var _ genruntime.FromARMConverter = &UpstreamTemplate_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (template *UpstreamTemplate_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpstreamTemplate_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (template *UpstreamTemplate_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpstreamTemplate_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpstreamTemplate_StatusARM, got %T", armInput)
	}

	// Set property ‘Auth’:
	if typedInput.Auth != nil {
		var auth1 UpstreamAuthSettings_Status
		err := auth1.PopulateFromARM(owner, *typedInput.Auth)
		if err != nil {
			return err
		}
		auth := auth1
		template.Auth = &auth
	}

	// Set property ‘CategoryPattern’:
	if typedInput.CategoryPattern != nil {
		categoryPattern := *typedInput.CategoryPattern
		template.CategoryPattern = &categoryPattern
	}

	// Set property ‘EventPattern’:
	if typedInput.EventPattern != nil {
		eventPattern := *typedInput.EventPattern
		template.EventPattern = &eventPattern
	}

	// Set property ‘HubPattern’:
	if typedInput.HubPattern != nil {
		hubPattern := *typedInput.HubPattern
		template.HubPattern = &hubPattern
	}

	// Set property ‘UrlTemplate’:
	if typedInput.UrlTemplate != nil {
		urlTemplate := *typedInput.UrlTemplate
		template.UrlTemplate = &urlTemplate
	}

	// No error
	return nil
}

// AssignPropertiesFromUpstreamTemplateStatus populates our UpstreamTemplate_Status from the provided source UpstreamTemplate_Status
func (template *UpstreamTemplate_Status) AssignPropertiesFromUpstreamTemplateStatus(source *v20211001s.UpstreamTemplate_Status) error {

	// Auth
	if source.Auth != nil {
		var auth UpstreamAuthSettings_Status
		err := auth.AssignPropertiesFromUpstreamAuthSettingsStatus(source.Auth)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromUpstreamAuthSettingsStatus() to populate field Auth")
		}
		template.Auth = &auth
	} else {
		template.Auth = nil
	}

	// CategoryPattern
	template.CategoryPattern = genruntime.ClonePointerToString(source.CategoryPattern)

	// EventPattern
	template.EventPattern = genruntime.ClonePointerToString(source.EventPattern)

	// HubPattern
	template.HubPattern = genruntime.ClonePointerToString(source.HubPattern)

	// UrlTemplate
	template.UrlTemplate = genruntime.ClonePointerToString(source.UrlTemplate)

	// No error
	return nil
}

// AssignPropertiesToUpstreamTemplateStatus populates the provided destination UpstreamTemplate_Status from our UpstreamTemplate_Status
func (template *UpstreamTemplate_Status) AssignPropertiesToUpstreamTemplateStatus(destination *v20211001s.UpstreamTemplate_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Auth
	if template.Auth != nil {
		var auth v20211001s.UpstreamAuthSettings_Status
		err := template.Auth.AssignPropertiesToUpstreamAuthSettingsStatus(&auth)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToUpstreamAuthSettingsStatus() to populate field Auth")
		}
		destination.Auth = &auth
	} else {
		destination.Auth = nil
	}

	// CategoryPattern
	destination.CategoryPattern = genruntime.ClonePointerToString(template.CategoryPattern)

	// EventPattern
	destination.EventPattern = genruntime.ClonePointerToString(template.EventPattern)

	// HubPattern
	destination.HubPattern = genruntime.ClonePointerToString(template.HubPattern)

	// UrlTemplate
	destination.UrlTemplate = genruntime.ClonePointerToString(template.UrlTemplate)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UserAssignedIdentityProperty_Status struct {
	// ClientId: Get the client id for the user assigned identity
	ClientId *string `json:"clientId,omitempty"`

	// PrincipalId: Get the principal id for the user assigned identity
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentityProperty_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *UserAssignedIdentityProperty_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentityProperty_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *UserAssignedIdentityProperty_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentityProperty_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentityProperty_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		property.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		property.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityPropertyStatus populates our UserAssignedIdentityProperty_Status from the provided source UserAssignedIdentityProperty_Status
func (property *UserAssignedIdentityProperty_Status) AssignPropertiesFromUserAssignedIdentityPropertyStatus(source *v20211001s.UserAssignedIdentityProperty_Status) error {

	// ClientId
	property.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	property.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityPropertyStatus populates the provided destination UserAssignedIdentityProperty_Status from our UserAssignedIdentityProperty_Status
func (property *UserAssignedIdentityProperty_Status) AssignPropertiesToUserAssignedIdentityPropertyStatus(destination *v20211001s.UserAssignedIdentityProperty_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(property.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(property.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ClientConnection","RESTAPI","ServerConnection","Trace"}
type NetworkACLAllow string

const (
	NetworkACLAllowClientConnection = NetworkACLAllow("ClientConnection")
	NetworkACLAllowRESTAPI          = NetworkACLAllow("RESTAPI")
	NetworkACLAllowServerConnection = NetworkACLAllow("ServerConnection")
	NetworkACLAllowTrace            = NetworkACLAllow("Trace")
)

// +kubebuilder:validation:Enum={"ClientConnection","RESTAPI","ServerConnection","Trace"}
type NetworkACLDeny string

const (
	NetworkACLDenyClientConnection = NetworkACLDeny("ClientConnection")
	NetworkACLDenyRESTAPI          = NetworkACLDeny("RESTAPI")
	NetworkACLDenyServerConnection = NetworkACLDeny("ServerConnection")
	NetworkACLDenyTrace            = NetworkACLDeny("Trace")
)

// +kubebuilder:validation:Enum={"ClientConnection","RESTAPI","ServerConnection","Trace"}
type PrivateEndpointACLAllow string

const (
	PrivateEndpointACLAllowClientConnection = PrivateEndpointACLAllow("ClientConnection")
	PrivateEndpointACLAllowRESTAPI          = PrivateEndpointACLAllow("RESTAPI")
	PrivateEndpointACLAllowServerConnection = PrivateEndpointACLAllow("ServerConnection")
	PrivateEndpointACLAllowTrace            = PrivateEndpointACLAllow("Trace")
)

// +kubebuilder:validation:Enum={"ClientConnection","RESTAPI","ServerConnection","Trace"}
type PrivateEndpointACLDeny string

const (
	PrivateEndpointACLDenyClientConnection = PrivateEndpointACLDeny("ClientConnection")
	PrivateEndpointACLDenyRESTAPI          = PrivateEndpointACLDeny("RESTAPI")
	PrivateEndpointACLDenyServerConnection = PrivateEndpointACLDeny("ServerConnection")
	PrivateEndpointACLDenyTrace            = PrivateEndpointACLDeny("Trace")
)

type SignalRRequestType_Status string

const (
	SignalRRequestType_StatusClientConnection = SignalRRequestType_Status("ClientConnection")
	SignalRRequestType_StatusRESTAPI          = SignalRRequestType_Status("RESTAPI")
	SignalRRequestType_StatusServerConnection = SignalRRequestType_Status("ServerConnection")
	SignalRRequestType_StatusTrace            = SignalRRequestType_Status("Trace")
)

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/UpstreamAuthSettings
type UpstreamAuthSettings struct {
	// ManagedIdentity: Managed identity settings for upstream.
	ManagedIdentity *ManagedIdentitySettings  `json:"managedIdentity,omitempty"`
	Type            *UpstreamAuthSettingsType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &UpstreamAuthSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *UpstreamAuthSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &UpstreamAuthSettingsARM{}

	// Set property ‘ManagedIdentity’:
	if settings.ManagedIdentity != nil {
		managedIdentityARM, err := (*settings.ManagedIdentity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		managedIdentity := *managedIdentityARM.(*ManagedIdentitySettingsARM)
		result.ManagedIdentity = &managedIdentity
	}

	// Set property ‘Type’:
	if settings.Type != nil {
		typeVar := *settings.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *UpstreamAuthSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpstreamAuthSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *UpstreamAuthSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpstreamAuthSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpstreamAuthSettingsARM, got %T", armInput)
	}

	// Set property ‘ManagedIdentity’:
	if typedInput.ManagedIdentity != nil {
		var managedIdentity1 ManagedIdentitySettings
		err := managedIdentity1.PopulateFromARM(owner, *typedInput.ManagedIdentity)
		if err != nil {
			return err
		}
		managedIdentity := managedIdentity1
		settings.ManagedIdentity = &managedIdentity
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		settings.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromUpstreamAuthSettings populates our UpstreamAuthSettings from the provided source UpstreamAuthSettings
func (settings *UpstreamAuthSettings) AssignPropertiesFromUpstreamAuthSettings(source *v20211001s.UpstreamAuthSettings) error {

	// ManagedIdentity
	if source.ManagedIdentity != nil {
		var managedIdentity ManagedIdentitySettings
		err := managedIdentity.AssignPropertiesFromManagedIdentitySettings(source.ManagedIdentity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedIdentitySettings() to populate field ManagedIdentity")
		}
		settings.ManagedIdentity = &managedIdentity
	} else {
		settings.ManagedIdentity = nil
	}

	// Type
	if source.Type != nil {
		typeVar := UpstreamAuthSettingsType(*source.Type)
		settings.Type = &typeVar
	} else {
		settings.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUpstreamAuthSettings populates the provided destination UpstreamAuthSettings from our UpstreamAuthSettings
func (settings *UpstreamAuthSettings) AssignPropertiesToUpstreamAuthSettings(destination *v20211001s.UpstreamAuthSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ManagedIdentity
	if settings.ManagedIdentity != nil {
		var managedIdentity v20211001s.ManagedIdentitySettings
		err := settings.ManagedIdentity.AssignPropertiesToManagedIdentitySettings(&managedIdentity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedIdentitySettings() to populate field ManagedIdentity")
		}
		destination.ManagedIdentity = &managedIdentity
	} else {
		destination.ManagedIdentity = nil
	}

	// Type
	if settings.Type != nil {
		typeVar := string(*settings.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UpstreamAuthSettings_Status struct {
	ManagedIdentity *ManagedIdentitySettings_Status `json:"managedIdentity,omitempty"`
	Type            *UpstreamAuthType_Status        `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &UpstreamAuthSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *UpstreamAuthSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UpstreamAuthSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *UpstreamAuthSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UpstreamAuthSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UpstreamAuthSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘ManagedIdentity’:
	if typedInput.ManagedIdentity != nil {
		var managedIdentity1 ManagedIdentitySettings_Status
		err := managedIdentity1.PopulateFromARM(owner, *typedInput.ManagedIdentity)
		if err != nil {
			return err
		}
		managedIdentity := managedIdentity1
		settings.ManagedIdentity = &managedIdentity
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		settings.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromUpstreamAuthSettingsStatus populates our UpstreamAuthSettings_Status from the provided source UpstreamAuthSettings_Status
func (settings *UpstreamAuthSettings_Status) AssignPropertiesFromUpstreamAuthSettingsStatus(source *v20211001s.UpstreamAuthSettings_Status) error {

	// ManagedIdentity
	if source.ManagedIdentity != nil {
		var managedIdentity ManagedIdentitySettings_Status
		err := managedIdentity.AssignPropertiesFromManagedIdentitySettingsStatus(source.ManagedIdentity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromManagedIdentitySettingsStatus() to populate field ManagedIdentity")
		}
		settings.ManagedIdentity = &managedIdentity
	} else {
		settings.ManagedIdentity = nil
	}

	// Type
	if source.Type != nil {
		typeVar := UpstreamAuthType_Status(*source.Type)
		settings.Type = &typeVar
	} else {
		settings.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUpstreamAuthSettingsStatus populates the provided destination UpstreamAuthSettings_Status from our UpstreamAuthSettings_Status
func (settings *UpstreamAuthSettings_Status) AssignPropertiesToUpstreamAuthSettingsStatus(destination *v20211001s.UpstreamAuthSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ManagedIdentity
	if settings.ManagedIdentity != nil {
		var managedIdentity v20211001s.ManagedIdentitySettings_Status
		err := settings.ManagedIdentity.AssignPropertiesToManagedIdentitySettingsStatus(&managedIdentity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToManagedIdentitySettingsStatus() to populate field ManagedIdentity")
		}
		destination.ManagedIdentity = &managedIdentity
	} else {
		destination.ManagedIdentity = nil
	}

	// Type
	if settings.Type != nil {
		typeVar := string(*settings.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-10-01/Microsoft.SignalRService.json#/definitions/ManagedIdentitySettings
type ManagedIdentitySettings struct {
	// Resource: The Resource indicating the App ID URI of the target resource.
	// It also appears in the aud (audience) claim of the issued token.
	Resource *string `json:"resource,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedIdentitySettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *ManagedIdentitySettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &ManagedIdentitySettingsARM{}

	// Set property ‘Resource’:
	if settings.Resource != nil {
		resource := *settings.Resource
		result.Resource = &resource
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *ManagedIdentitySettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedIdentitySettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *ManagedIdentitySettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedIdentitySettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedIdentitySettingsARM, got %T", armInput)
	}

	// Set property ‘Resource’:
	if typedInput.Resource != nil {
		resource := *typedInput.Resource
		settings.Resource = &resource
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedIdentitySettings populates our ManagedIdentitySettings from the provided source ManagedIdentitySettings
func (settings *ManagedIdentitySettings) AssignPropertiesFromManagedIdentitySettings(source *v20211001s.ManagedIdentitySettings) error {

	// Resource
	settings.Resource = genruntime.ClonePointerToString(source.Resource)

	// No error
	return nil
}

// AssignPropertiesToManagedIdentitySettings populates the provided destination ManagedIdentitySettings from our ManagedIdentitySettings
func (settings *ManagedIdentitySettings) AssignPropertiesToManagedIdentitySettings(destination *v20211001s.ManagedIdentitySettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Resource
	destination.Resource = genruntime.ClonePointerToString(settings.Resource)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ManagedIdentitySettings_Status struct {
	// Resource: The Resource indicating the App ID URI of the target resource.
	// It also appears in the aud (audience) claim of the issued token.
	Resource *string `json:"resource,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagedIdentitySettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *ManagedIdentitySettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedIdentitySettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *ManagedIdentitySettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedIdentitySettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedIdentitySettings_StatusARM, got %T", armInput)
	}

	// Set property ‘Resource’:
	if typedInput.Resource != nil {
		resource := *typedInput.Resource
		settings.Resource = &resource
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedIdentitySettingsStatus populates our ManagedIdentitySettings_Status from the provided source ManagedIdentitySettings_Status
func (settings *ManagedIdentitySettings_Status) AssignPropertiesFromManagedIdentitySettingsStatus(source *v20211001s.ManagedIdentitySettings_Status) error {

	// Resource
	settings.Resource = genruntime.ClonePointerToString(source.Resource)

	// No error
	return nil
}

// AssignPropertiesToManagedIdentitySettingsStatus populates the provided destination ManagedIdentitySettings_Status from our ManagedIdentitySettings_Status
func (settings *ManagedIdentitySettings_Status) AssignPropertiesToManagedIdentitySettingsStatus(destination *v20211001s.ManagedIdentitySettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Resource
	destination.Resource = genruntime.ClonePointerToString(settings.Resource)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"ManagedIdentity","None"}
type UpstreamAuthSettingsType string

const (
	UpstreamAuthSettingsTypeManagedIdentity = UpstreamAuthSettingsType("ManagedIdentity")
	UpstreamAuthSettingsTypeNone            = UpstreamAuthSettingsType("None")
)

type UpstreamAuthType_Status string

const (
	UpstreamAuthType_StatusManagedIdentity = UpstreamAuthType_Status("ManagedIdentity")
	UpstreamAuthType_StatusNone            = UpstreamAuthType_Status("None")
)

func init() {
	SchemeBuilder.Register(&SignalR{}, &SignalRList{})
}
