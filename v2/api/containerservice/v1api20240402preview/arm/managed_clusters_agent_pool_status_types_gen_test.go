// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AgentPoolArtifactStreamingProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolArtifactStreamingProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolArtifactStreamingProfile_STATUS, AgentPoolArtifactStreamingProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolArtifactStreamingProfile_STATUS runs a test to see if a specific instance of AgentPoolArtifactStreamingProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolArtifactStreamingProfile_STATUS(subject AgentPoolArtifactStreamingProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolArtifactStreamingProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolArtifactStreamingProfile_STATUS instances for property testing - lazily instantiated by
// AgentPoolArtifactStreamingProfile_STATUSGenerator()
var agentPoolArtifactStreamingProfile_STATUSGenerator gopter.Gen

// AgentPoolArtifactStreamingProfile_STATUSGenerator returns a generator of AgentPoolArtifactStreamingProfile_STATUS instances for property testing.
func AgentPoolArtifactStreamingProfile_STATUSGenerator() gopter.Gen {
	if agentPoolArtifactStreamingProfile_STATUSGenerator != nil {
		return agentPoolArtifactStreamingProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolArtifactStreamingProfile_STATUS(generators)
	agentPoolArtifactStreamingProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(AgentPoolArtifactStreamingProfile_STATUS{}), generators)

	return agentPoolArtifactStreamingProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolArtifactStreamingProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolArtifactStreamingProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_AgentPoolGPUProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolGPUProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolGPUProfile_STATUS, AgentPoolGPUProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolGPUProfile_STATUS runs a test to see if a specific instance of AgentPoolGPUProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolGPUProfile_STATUS(subject AgentPoolGPUProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolGPUProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolGPUProfile_STATUS instances for property testing - lazily instantiated by
// AgentPoolGPUProfile_STATUSGenerator()
var agentPoolGPUProfile_STATUSGenerator gopter.Gen

// AgentPoolGPUProfile_STATUSGenerator returns a generator of AgentPoolGPUProfile_STATUS instances for property testing.
func AgentPoolGPUProfile_STATUSGenerator() gopter.Gen {
	if agentPoolGPUProfile_STATUSGenerator != nil {
		return agentPoolGPUProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolGPUProfile_STATUS(generators)
	agentPoolGPUProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(AgentPoolGPUProfile_STATUS{}), generators)

	return agentPoolGPUProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolGPUProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolGPUProfile_STATUS(gens map[string]gopter.Gen) {
	gens["InstallGPUDriver"] = gen.PtrOf(gen.Bool())
}

func Test_AgentPoolGatewayProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolGatewayProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolGatewayProfile_STATUS, AgentPoolGatewayProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolGatewayProfile_STATUS runs a test to see if a specific instance of AgentPoolGatewayProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolGatewayProfile_STATUS(subject AgentPoolGatewayProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolGatewayProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolGatewayProfile_STATUS instances for property testing - lazily instantiated by
// AgentPoolGatewayProfile_STATUSGenerator()
var agentPoolGatewayProfile_STATUSGenerator gopter.Gen

// AgentPoolGatewayProfile_STATUSGenerator returns a generator of AgentPoolGatewayProfile_STATUS instances for property testing.
func AgentPoolGatewayProfile_STATUSGenerator() gopter.Gen {
	if agentPoolGatewayProfile_STATUSGenerator != nil {
		return agentPoolGatewayProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolGatewayProfile_STATUS(generators)
	agentPoolGatewayProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(AgentPoolGatewayProfile_STATUS{}), generators)

	return agentPoolGatewayProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolGatewayProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolGatewayProfile_STATUS(gens map[string]gopter.Gen) {
	gens["PublicIPPrefixSize"] = gen.PtrOf(gen.Int())
}

func Test_AgentPoolNetworkProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolNetworkProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolNetworkProfile_STATUS, AgentPoolNetworkProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolNetworkProfile_STATUS runs a test to see if a specific instance of AgentPoolNetworkProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolNetworkProfile_STATUS(subject AgentPoolNetworkProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolNetworkProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolNetworkProfile_STATUS instances for property testing - lazily instantiated by
// AgentPoolNetworkProfile_STATUSGenerator()
var agentPoolNetworkProfile_STATUSGenerator gopter.Gen

// AgentPoolNetworkProfile_STATUSGenerator returns a generator of AgentPoolNetworkProfile_STATUS instances for property testing.
// We first initialize agentPoolNetworkProfile_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AgentPoolNetworkProfile_STATUSGenerator() gopter.Gen {
	if agentPoolNetworkProfile_STATUSGenerator != nil {
		return agentPoolNetworkProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolNetworkProfile_STATUS(generators)
	agentPoolNetworkProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(AgentPoolNetworkProfile_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolNetworkProfile_STATUS(generators)
	AddRelatedPropertyGeneratorsForAgentPoolNetworkProfile_STATUS(generators)
	agentPoolNetworkProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(AgentPoolNetworkProfile_STATUS{}), generators)

	return agentPoolNetworkProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolNetworkProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolNetworkProfile_STATUS(gens map[string]gopter.Gen) {
	gens["ApplicationSecurityGroups"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAgentPoolNetworkProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAgentPoolNetworkProfile_STATUS(gens map[string]gopter.Gen) {
	gens["AllowedHostPorts"] = gen.SliceOf(PortRange_STATUSGenerator())
	gens["NodePublicIPTags"] = gen.SliceOf(IPTag_STATUSGenerator())
}

func Test_AgentPoolSecurityProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolSecurityProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolSecurityProfile_STATUS, AgentPoolSecurityProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolSecurityProfile_STATUS runs a test to see if a specific instance of AgentPoolSecurityProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolSecurityProfile_STATUS(subject AgentPoolSecurityProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolSecurityProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolSecurityProfile_STATUS instances for property testing - lazily instantiated by
// AgentPoolSecurityProfile_STATUSGenerator()
var agentPoolSecurityProfile_STATUSGenerator gopter.Gen

// AgentPoolSecurityProfile_STATUSGenerator returns a generator of AgentPoolSecurityProfile_STATUS instances for property testing.
func AgentPoolSecurityProfile_STATUSGenerator() gopter.Gen {
	if agentPoolSecurityProfile_STATUSGenerator != nil {
		return agentPoolSecurityProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolSecurityProfile_STATUS(generators)
	agentPoolSecurityProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(AgentPoolSecurityProfile_STATUS{}), generators)

	return agentPoolSecurityProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolSecurityProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolSecurityProfile_STATUS(gens map[string]gopter.Gen) {
	gens["EnableSecureBoot"] = gen.PtrOf(gen.Bool())
	gens["EnableVTPM"] = gen.PtrOf(gen.Bool())
	gens["SshAccess"] = gen.PtrOf(gen.OneConstOf(AgentPoolSSHAccess_STATUS_Disabled, AgentPoolSSHAccess_STATUS_LocalUser))
}

func Test_AgentPoolUpgradeSettings_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolUpgradeSettings_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolUpgradeSettings_STATUS, AgentPoolUpgradeSettings_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolUpgradeSettings_STATUS runs a test to see if a specific instance of AgentPoolUpgradeSettings_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolUpgradeSettings_STATUS(subject AgentPoolUpgradeSettings_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolUpgradeSettings_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolUpgradeSettings_STATUS instances for property testing - lazily instantiated by
// AgentPoolUpgradeSettings_STATUSGenerator()
var agentPoolUpgradeSettings_STATUSGenerator gopter.Gen

// AgentPoolUpgradeSettings_STATUSGenerator returns a generator of AgentPoolUpgradeSettings_STATUS instances for property testing.
func AgentPoolUpgradeSettings_STATUSGenerator() gopter.Gen {
	if agentPoolUpgradeSettings_STATUSGenerator != nil {
		return agentPoolUpgradeSettings_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettings_STATUS(generators)
	agentPoolUpgradeSettings_STATUSGenerator = gen.Struct(reflect.TypeOf(AgentPoolUpgradeSettings_STATUS{}), generators)

	return agentPoolUpgradeSettings_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettings_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettings_STATUS(gens map[string]gopter.Gen) {
	gens["DrainTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["MaxSurge"] = gen.PtrOf(gen.AlphaString())
	gens["NodeSoakDurationInMinutes"] = gen.PtrOf(gen.Int())
	gens["UndrainableNodeBehavior"] = gen.PtrOf(gen.OneConstOf(AgentPoolUpgradeSettings_UndrainableNodeBehavior_STATUS_Cordon, AgentPoolUpgradeSettings_UndrainableNodeBehavior_STATUS_Schedule))
}

func Test_AgentPoolWindowsProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolWindowsProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolWindowsProfile_STATUS, AgentPoolWindowsProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolWindowsProfile_STATUS runs a test to see if a specific instance of AgentPoolWindowsProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolWindowsProfile_STATUS(subject AgentPoolWindowsProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolWindowsProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolWindowsProfile_STATUS instances for property testing - lazily instantiated by
// AgentPoolWindowsProfile_STATUSGenerator()
var agentPoolWindowsProfile_STATUSGenerator gopter.Gen

// AgentPoolWindowsProfile_STATUSGenerator returns a generator of AgentPoolWindowsProfile_STATUS instances for property testing.
func AgentPoolWindowsProfile_STATUSGenerator() gopter.Gen {
	if agentPoolWindowsProfile_STATUSGenerator != nil {
		return agentPoolWindowsProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolWindowsProfile_STATUS(generators)
	agentPoolWindowsProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(AgentPoolWindowsProfile_STATUS{}), generators)

	return agentPoolWindowsProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolWindowsProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolWindowsProfile_STATUS(gens map[string]gopter.Gen) {
	gens["DisableOutboundNat"] = gen.PtrOf(gen.Bool())
}

func Test_AutoScaleProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoScaleProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoScaleProfile_STATUS, AutoScaleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoScaleProfile_STATUS runs a test to see if a specific instance of AutoScaleProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoScaleProfile_STATUS(subject AutoScaleProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoScaleProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoScaleProfile_STATUS instances for property testing - lazily instantiated by
// AutoScaleProfile_STATUSGenerator()
var autoScaleProfile_STATUSGenerator gopter.Gen

// AutoScaleProfile_STATUSGenerator returns a generator of AutoScaleProfile_STATUS instances for property testing.
func AutoScaleProfile_STATUSGenerator() gopter.Gen {
	if autoScaleProfile_STATUSGenerator != nil {
		return autoScaleProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoScaleProfile_STATUS(generators)
	autoScaleProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(AutoScaleProfile_STATUS{}), generators)

	return autoScaleProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAutoScaleProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoScaleProfile_STATUS(gens map[string]gopter.Gen) {
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Sizes"] = gen.SliceOf(gen.AlphaString())
}

func Test_IPTag_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPTag_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPTag_STATUS, IPTag_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPTag_STATUS runs a test to see if a specific instance of IPTag_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForIPTag_STATUS(subject IPTag_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPTag_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPTag_STATUS instances for property testing - lazily instantiated by IPTag_STATUSGenerator()
var ipTag_STATUSGenerator gopter.Gen

// IPTag_STATUSGenerator returns a generator of IPTag_STATUS instances for property testing.
func IPTag_STATUSGenerator() gopter.Gen {
	if ipTag_STATUSGenerator != nil {
		return ipTag_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPTag_STATUS(generators)
	ipTag_STATUSGenerator = gen.Struct(reflect.TypeOf(IPTag_STATUS{}), generators)

	return ipTag_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForIPTag_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPTag_STATUS(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeletConfig_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeletConfig_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeletConfig_STATUS, KubeletConfig_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeletConfig_STATUS runs a test to see if a specific instance of KubeletConfig_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeletConfig_STATUS(subject KubeletConfig_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeletConfig_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeletConfig_STATUS instances for property testing - lazily instantiated by
// KubeletConfig_STATUSGenerator()
var kubeletConfig_STATUSGenerator gopter.Gen

// KubeletConfig_STATUSGenerator returns a generator of KubeletConfig_STATUS instances for property testing.
func KubeletConfig_STATUSGenerator() gopter.Gen {
	if kubeletConfig_STATUSGenerator != nil {
		return kubeletConfig_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeletConfig_STATUS(generators)
	kubeletConfig_STATUSGenerator = gen.Struct(reflect.TypeOf(KubeletConfig_STATUS{}), generators)

	return kubeletConfig_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForKubeletConfig_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeletConfig_STATUS(gens map[string]gopter.Gen) {
	gens["AllowedUnsafeSysctls"] = gen.SliceOf(gen.AlphaString())
	gens["ContainerLogMaxFiles"] = gen.PtrOf(gen.Int())
	gens["ContainerLogMaxSizeMB"] = gen.PtrOf(gen.Int())
	gens["CpuCfsQuota"] = gen.PtrOf(gen.Bool())
	gens["CpuCfsQuotaPeriod"] = gen.PtrOf(gen.AlphaString())
	gens["CpuManagerPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["FailSwapOn"] = gen.PtrOf(gen.Bool())
	gens["ImageGcHighThreshold"] = gen.PtrOf(gen.Int())
	gens["ImageGcLowThreshold"] = gen.PtrOf(gen.Int())
	gens["PodMaxPids"] = gen.PtrOf(gen.Int())
	gens["TopologyManagerPolicy"] = gen.PtrOf(gen.AlphaString())
}

func Test_LinuxOSConfig_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LinuxOSConfig_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLinuxOSConfig_STATUS, LinuxOSConfig_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLinuxOSConfig_STATUS runs a test to see if a specific instance of LinuxOSConfig_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForLinuxOSConfig_STATUS(subject LinuxOSConfig_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LinuxOSConfig_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LinuxOSConfig_STATUS instances for property testing - lazily instantiated by
// LinuxOSConfig_STATUSGenerator()
var linuxOSConfig_STATUSGenerator gopter.Gen

// LinuxOSConfig_STATUSGenerator returns a generator of LinuxOSConfig_STATUS instances for property testing.
// We first initialize linuxOSConfig_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LinuxOSConfig_STATUSGenerator() gopter.Gen {
	if linuxOSConfig_STATUSGenerator != nil {
		return linuxOSConfig_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxOSConfig_STATUS(generators)
	linuxOSConfig_STATUSGenerator = gen.Struct(reflect.TypeOf(LinuxOSConfig_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxOSConfig_STATUS(generators)
	AddRelatedPropertyGeneratorsForLinuxOSConfig_STATUS(generators)
	linuxOSConfig_STATUSGenerator = gen.Struct(reflect.TypeOf(LinuxOSConfig_STATUS{}), generators)

	return linuxOSConfig_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForLinuxOSConfig_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLinuxOSConfig_STATUS(gens map[string]gopter.Gen) {
	gens["SwapFileSizeMB"] = gen.PtrOf(gen.Int())
	gens["TransparentHugePageDefrag"] = gen.PtrOf(gen.AlphaString())
	gens["TransparentHugePageEnabled"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLinuxOSConfig_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLinuxOSConfig_STATUS(gens map[string]gopter.Gen) {
	gens["Sysctls"] = gen.PtrOf(SysctlConfig_STATUSGenerator())
}

func Test_ManagedClusterAgentPoolProfileProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfileProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfileProperties_STATUS, ManagedClusterAgentPoolProfileProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfileProperties_STATUS runs a test to see if a specific instance of ManagedClusterAgentPoolProfileProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfileProperties_STATUS(subject ManagedClusterAgentPoolProfileProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfileProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfileProperties_STATUS instances for property testing - lazily instantiated by
// ManagedClusterAgentPoolProfileProperties_STATUSGenerator()
var managedClusterAgentPoolProfileProperties_STATUSGenerator gopter.Gen

// ManagedClusterAgentPoolProfileProperties_STATUSGenerator returns a generator of ManagedClusterAgentPoolProfileProperties_STATUS instances for property testing.
func ManagedClusterAgentPoolProfileProperties_STATUSGenerator() gopter.Gen {
	if managedClusterAgentPoolProfileProperties_STATUSGenerator != nil {
		return managedClusterAgentPoolProfileProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_STATUS(generators)
	managedClusterAgentPoolProfileProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfileProperties_STATUS{}), generators)

	return managedClusterAgentPoolProfileProperties_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_STATUS(gens map[string]gopter.Gen) {
	gens["ArtifactStreamingProfile"] = gen.PtrOf(AgentPoolArtifactStreamingProfile_STATUSGenerator())
	gens["CreationData"] = gen.PtrOf(CreationData_STATUSGenerator())
	gens["GatewayProfile"] = gen.PtrOf(AgentPoolGatewayProfile_STATUSGenerator())
	gens["GpuProfile"] = gen.PtrOf(AgentPoolGPUProfile_STATUSGenerator())
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfig_STATUSGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfig_STATUSGenerator())
	gens["NetworkProfile"] = gen.PtrOf(AgentPoolNetworkProfile_STATUSGenerator())
	gens["PowerState"] = gen.PtrOf(PowerState_STATUSGenerator())
	gens["SecurityProfile"] = gen.PtrOf(AgentPoolSecurityProfile_STATUSGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettings_STATUSGenerator())
	gens["VirtualMachineNodesStatus"] = gen.SliceOf(VirtualMachineNodes_STATUSGenerator())
	gens["VirtualMachinesProfile"] = gen.PtrOf(VirtualMachinesProfile_STATUSGenerator())
	gens["WindowsProfile"] = gen.PtrOf(AgentPoolWindowsProfile_STATUSGenerator())
}

func Test_ManagedClusters_AgentPool_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusters_AgentPool_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusters_AgentPool_STATUS, ManagedClusters_AgentPool_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusters_AgentPool_STATUS runs a test to see if a specific instance of ManagedClusters_AgentPool_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusters_AgentPool_STATUS(subject ManagedClusters_AgentPool_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusters_AgentPool_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusters_AgentPool_STATUS instances for property testing - lazily instantiated by
// ManagedClusters_AgentPool_STATUSGenerator()
var managedClusters_AgentPool_STATUSGenerator gopter.Gen

// ManagedClusters_AgentPool_STATUSGenerator returns a generator of ManagedClusters_AgentPool_STATUS instances for property testing.
// We first initialize managedClusters_AgentPool_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusters_AgentPool_STATUSGenerator() gopter.Gen {
	if managedClusters_AgentPool_STATUSGenerator != nil {
		return managedClusters_AgentPool_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusters_AgentPool_STATUS(generators)
	managedClusters_AgentPool_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedClusters_AgentPool_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusters_AgentPool_STATUS(generators)
	AddRelatedPropertyGeneratorsForManagedClusters_AgentPool_STATUS(generators)
	managedClusters_AgentPool_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedClusters_AgentPool_STATUS{}), generators)

	return managedClusters_AgentPool_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusters_AgentPool_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusters_AgentPool_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusters_AgentPool_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusters_AgentPool_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ManagedClusterAgentPoolProfileProperties_STATUSGenerator())
}

func Test_ManualScaleProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManualScaleProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManualScaleProfile_STATUS, ManualScaleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManualScaleProfile_STATUS runs a test to see if a specific instance of ManualScaleProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManualScaleProfile_STATUS(subject ManualScaleProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManualScaleProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManualScaleProfile_STATUS instances for property testing - lazily instantiated by
// ManualScaleProfile_STATUSGenerator()
var manualScaleProfile_STATUSGenerator gopter.Gen

// ManualScaleProfile_STATUSGenerator returns a generator of ManualScaleProfile_STATUS instances for property testing.
func ManualScaleProfile_STATUSGenerator() gopter.Gen {
	if manualScaleProfile_STATUSGenerator != nil {
		return manualScaleProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManualScaleProfile_STATUS(generators)
	manualScaleProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ManualScaleProfile_STATUS{}), generators)

	return manualScaleProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManualScaleProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManualScaleProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Sizes"] = gen.SliceOf(gen.AlphaString())
}

func Test_PortRange_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PortRange_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPortRange_STATUS, PortRange_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPortRange_STATUS runs a test to see if a specific instance of PortRange_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPortRange_STATUS(subject PortRange_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PortRange_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PortRange_STATUS instances for property testing - lazily instantiated by PortRange_STATUSGenerator()
var portRange_STATUSGenerator gopter.Gen

// PortRange_STATUSGenerator returns a generator of PortRange_STATUS instances for property testing.
func PortRange_STATUSGenerator() gopter.Gen {
	if portRange_STATUSGenerator != nil {
		return portRange_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPortRange_STATUS(generators)
	portRange_STATUSGenerator = gen.Struct(reflect.TypeOf(PortRange_STATUS{}), generators)

	return portRange_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPortRange_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPortRange_STATUS(gens map[string]gopter.Gen) {
	gens["PortEnd"] = gen.PtrOf(gen.Int())
	gens["PortStart"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(PortRange_Protocol_STATUS_TCP, PortRange_Protocol_STATUS_UDP))
}

func Test_ScaleProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleProfile_STATUS, ScaleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleProfile_STATUS runs a test to see if a specific instance of ScaleProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleProfile_STATUS(subject ScaleProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleProfile_STATUS instances for property testing - lazily instantiated by
// ScaleProfile_STATUSGenerator()
var scaleProfile_STATUSGenerator gopter.Gen

// ScaleProfile_STATUSGenerator returns a generator of ScaleProfile_STATUS instances for property testing.
func ScaleProfile_STATUSGenerator() gopter.Gen {
	if scaleProfile_STATUSGenerator != nil {
		return scaleProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScaleProfile_STATUS(generators)
	scaleProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ScaleProfile_STATUS{}), generators)

	return scaleProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForScaleProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScaleProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Autoscale"] = gen.SliceOf(AutoScaleProfile_STATUSGenerator())
	gens["Manual"] = gen.SliceOf(ManualScaleProfile_STATUSGenerator())
}

func Test_SysctlConfig_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SysctlConfig_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSysctlConfig_STATUS, SysctlConfig_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSysctlConfig_STATUS runs a test to see if a specific instance of SysctlConfig_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSysctlConfig_STATUS(subject SysctlConfig_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SysctlConfig_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SysctlConfig_STATUS instances for property testing - lazily instantiated by
// SysctlConfig_STATUSGenerator()
var sysctlConfig_STATUSGenerator gopter.Gen

// SysctlConfig_STATUSGenerator returns a generator of SysctlConfig_STATUS instances for property testing.
func SysctlConfig_STATUSGenerator() gopter.Gen {
	if sysctlConfig_STATUSGenerator != nil {
		return sysctlConfig_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSysctlConfig_STATUS(generators)
	sysctlConfig_STATUSGenerator = gen.Struct(reflect.TypeOf(SysctlConfig_STATUS{}), generators)

	return sysctlConfig_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSysctlConfig_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSysctlConfig_STATUS(gens map[string]gopter.Gen) {
	gens["FsAioMaxNr"] = gen.PtrOf(gen.Int())
	gens["FsFileMax"] = gen.PtrOf(gen.Int())
	gens["FsInotifyMaxUserWatches"] = gen.PtrOf(gen.Int())
	gens["FsNrOpen"] = gen.PtrOf(gen.Int())
	gens["KernelThreadsMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreNetdevMaxBacklog"] = gen.PtrOf(gen.Int())
	gens["NetCoreOptmemMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreRmemDefault"] = gen.PtrOf(gen.Int())
	gens["NetCoreRmemMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreSomaxconn"] = gen.PtrOf(gen.Int())
	gens["NetCoreWmemDefault"] = gen.PtrOf(gen.Int())
	gens["NetCoreWmemMax"] = gen.PtrOf(gen.Int())
	gens["NetIpv4IpLocalPortRange"] = gen.PtrOf(gen.AlphaString())
	gens["NetIpv4NeighDefaultGcThresh1"] = gen.PtrOf(gen.Int())
	gens["NetIpv4NeighDefaultGcThresh2"] = gen.PtrOf(gen.Int())
	gens["NetIpv4NeighDefaultGcThresh3"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpFinTimeout"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpKeepaliveProbes"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpKeepaliveTime"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpMaxSynBacklog"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpMaxTwBuckets"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpTwReuse"] = gen.PtrOf(gen.Bool())
	gens["NetIpv4TcpkeepaliveIntvl"] = gen.PtrOf(gen.Int())
	gens["NetNetfilterNfConntrackBuckets"] = gen.PtrOf(gen.Int())
	gens["NetNetfilterNfConntrackMax"] = gen.PtrOf(gen.Int())
	gens["VmMaxMapCount"] = gen.PtrOf(gen.Int())
	gens["VmSwappiness"] = gen.PtrOf(gen.Int())
	gens["VmVfsCachePressure"] = gen.PtrOf(gen.Int())
}

func Test_VirtualMachineNodes_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineNodes_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineNodes_STATUS, VirtualMachineNodes_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineNodes_STATUS runs a test to see if a specific instance of VirtualMachineNodes_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineNodes_STATUS(subject VirtualMachineNodes_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineNodes_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineNodes_STATUS instances for property testing - lazily instantiated by
// VirtualMachineNodes_STATUSGenerator()
var virtualMachineNodes_STATUSGenerator gopter.Gen

// VirtualMachineNodes_STATUSGenerator returns a generator of VirtualMachineNodes_STATUS instances for property testing.
func VirtualMachineNodes_STATUSGenerator() gopter.Gen {
	if virtualMachineNodes_STATUSGenerator != nil {
		return virtualMachineNodes_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineNodes_STATUS(generators)
	virtualMachineNodes_STATUSGenerator = gen.Struct(reflect.TypeOf(VirtualMachineNodes_STATUS{}), generators)

	return virtualMachineNodes_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineNodes_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineNodes_STATUS(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachinesProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachinesProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachinesProfile_STATUS, VirtualMachinesProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachinesProfile_STATUS runs a test to see if a specific instance of VirtualMachinesProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachinesProfile_STATUS(subject VirtualMachinesProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachinesProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachinesProfile_STATUS instances for property testing - lazily instantiated by
// VirtualMachinesProfile_STATUSGenerator()
var virtualMachinesProfile_STATUSGenerator gopter.Gen

// VirtualMachinesProfile_STATUSGenerator returns a generator of VirtualMachinesProfile_STATUS instances for property testing.
func VirtualMachinesProfile_STATUSGenerator() gopter.Gen {
	if virtualMachinesProfile_STATUSGenerator != nil {
		return virtualMachinesProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachinesProfile_STATUS(generators)
	virtualMachinesProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(VirtualMachinesProfile_STATUS{}), generators)

	return virtualMachinesProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachinesProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachinesProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Scale"] = gen.PtrOf(ScaleProfile_STATUSGenerator())
}
