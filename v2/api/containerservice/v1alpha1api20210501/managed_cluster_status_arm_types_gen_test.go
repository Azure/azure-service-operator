// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedCluster_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedCluster_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedCluster_STATUSARM, ManagedCluster_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedCluster_STATUSARM runs a test to see if a specific instance of ManagedCluster_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedCluster_STATUSARM(subject ManagedCluster_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedCluster_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedCluster_STATUSARM instances for property testing - lazily instantiated by
// ManagedCluster_STATUSARMGenerator()
var managedCluster_STATUSARMGenerator gopter.Gen

// ManagedCluster_STATUSARMGenerator returns a generator of ManagedCluster_STATUSARM instances for property testing.
// We first initialize managedCluster_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedCluster_STATUSARMGenerator() gopter.Gen {
	if managedCluster_STATUSARMGenerator != nil {
		return managedCluster_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedCluster_STATUSARM(generators)
	managedCluster_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedCluster_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedCluster_STATUSARM(generators)
	managedCluster_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_STATUSARM{}), generators)

	return managedCluster_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedCluster_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedCluster_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedCluster_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedCluster_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSARMGenerator())
	gens["Identity"] = gen.PtrOf(ManagedClusterIdentity_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(ManagedClusterProperties_STATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(ManagedClusterSKU_STATUSARMGenerator())
}

func Test_ExtendedLocation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_STATUSARM, ExtendedLocation_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_STATUSARM runs a test to see if a specific instance of ExtendedLocation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_STATUSARM(subject ExtendedLocation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUSARM instances for property testing - lazily instantiated by
// ExtendedLocation_STATUSARMGenerator()
var extendedLocation_STATUSARMGenerator gopter.Gen

// ExtendedLocation_STATUSARMGenerator returns a generator of ExtendedLocation_STATUSARM instances for property testing.
func ExtendedLocation_STATUSARMGenerator() gopter.Gen {
	if extendedLocation_STATUSARMGenerator != nil {
		return extendedLocation_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM(generators)
	extendedLocation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUSARM{}), generators)

	return extendedLocation_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_STATUS_EdgeZone))
}

func Test_ManagedClusterIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentity_STATUSARM, ManagedClusterIdentity_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentity_STATUSARM runs a test to see if a specific instance of ManagedClusterIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentity_STATUSARM(subject ManagedClusterIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterIdentity_STATUSARMGenerator()
var managedClusterIdentity_STATUSARMGenerator gopter.Gen

// ManagedClusterIdentity_STATUSARMGenerator returns a generator of ManagedClusterIdentity_STATUSARM instances for property testing.
// We first initialize managedClusterIdentity_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterIdentity_STATUSARMGenerator() gopter.Gen {
	if managedClusterIdentity_STATUSARMGenerator != nil {
		return managedClusterIdentity_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUSARM(generators)
	managedClusterIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterIdentity_STATUSARM(generators)
	managedClusterIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_STATUSARM{}), generators)

	return managedClusterIdentity_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedClusterIdentity_STATUS_Type_None, ManagedClusterIdentity_STATUS_Type_SystemAssigned, ManagedClusterIdentity_STATUS_Type_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedClusterIdentity_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator())
}

func Test_ManagedClusterProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterProperties_STATUSARM, ManagedClusterProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterProperties_STATUSARM runs a test to see if a specific instance of ManagedClusterProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterProperties_STATUSARM(subject ManagedClusterProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterProperties_STATUSARMGenerator()
var managedClusterProperties_STATUSARMGenerator gopter.Gen

// ManagedClusterProperties_STATUSARMGenerator returns a generator of ManagedClusterProperties_STATUSARM instances for property testing.
// We first initialize managedClusterProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterProperties_STATUSARMGenerator() gopter.Gen {
	if managedClusterProperties_STATUSARMGenerator != nil {
		return managedClusterProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUSARM(generators)
	managedClusterProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterProperties_STATUSARM(generators)
	managedClusterProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_STATUSARM{}), generators)

	return managedClusterProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["AzurePortalFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAccounts"] = gen.PtrOf(gen.Bool())
	gens["DiskEncryptionSetID"] = gen.PtrOf(gen.AlphaString())
	gens["DnsPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["EnablePodSecurityPolicy"] = gen.PtrOf(gen.Bool())
	gens["EnableRBAC"] = gen.PtrOf(gen.Bool())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["FqdnSubdomain"] = gen.PtrOf(gen.AlphaString())
	gens["KubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgentPools"] = gen.PtrOf(gen.Int())
	gens["NodeResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["AadProfile"] = gen.PtrOf(ManagedClusterAADProfile_STATUSARMGenerator())
	gens["AgentPoolProfiles"] = gen.SliceOf(ManagedClusterAgentPoolProfile_STATUSARMGenerator())
	gens["ApiServerAccessProfile"] = gen.PtrOf(ManagedClusterAPIServerAccessProfile_STATUSARMGenerator())
	gens["AutoScalerProfile"] = gen.PtrOf(ManagedClusterProperties_STATUS_AutoScalerProfileARMGenerator())
	gens["AutoUpgradeProfile"] = gen.PtrOf(ManagedClusterAutoUpgradeProfile_STATUSARMGenerator())
	gens["HttpProxyConfig"] = gen.PtrOf(ManagedClusterHTTPProxyConfig_STATUSARMGenerator())
	gens["LinuxProfile"] = gen.PtrOf(ContainerServiceLinuxProfile_STATUSARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(ContainerServiceNetworkProfile_STATUSARMGenerator())
	gens["PodIdentityProfile"] = gen.PtrOf(ManagedClusterPodIdentityProfile_STATUSARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerState_STATUSARMGenerator())
	gens["PrivateLinkResources"] = gen.SliceOf(PrivateLinkResource_STATUSARMGenerator())
	gens["ServicePrincipalProfile"] = gen.PtrOf(ManagedClusterServicePrincipalProfile_STATUSARMGenerator())
	gens["WindowsProfile"] = gen.PtrOf(ManagedClusterWindowsProfile_STATUSARMGenerator())
}

func Test_ManagedClusterSKU_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSKU_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSKU_STATUSARM, ManagedClusterSKU_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSKU_STATUSARM runs a test to see if a specific instance of ManagedClusterSKU_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSKU_STATUSARM(subject ManagedClusterSKU_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSKU_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSKU_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterSKU_STATUSARMGenerator()
var managedClusterSKU_STATUSARMGenerator gopter.Gen

// ManagedClusterSKU_STATUSARMGenerator returns a generator of ManagedClusterSKU_STATUSARM instances for property testing.
func ManagedClusterSKU_STATUSARMGenerator() gopter.Gen {
	if managedClusterSKU_STATUSARMGenerator != nil {
		return managedClusterSKU_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSKU_STATUSARM(generators)
	managedClusterSKU_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSKU_STATUSARM{}), generators)

	return managedClusterSKU_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSKU_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSKU_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKU_STATUS_Name_Basic))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKU_STATUS_Tier_Free, ManagedClusterSKU_STATUS_Tier_Paid))
}

func Test_ContainerServiceLinuxProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceLinuxProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceLinuxProfile_STATUSARM, ContainerServiceLinuxProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceLinuxProfile_STATUSARM runs a test to see if a specific instance of ContainerServiceLinuxProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceLinuxProfile_STATUSARM(subject ContainerServiceLinuxProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceLinuxProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceLinuxProfile_STATUSARM instances for property testing - lazily instantiated by
// ContainerServiceLinuxProfile_STATUSARMGenerator()
var containerServiceLinuxProfile_STATUSARMGenerator gopter.Gen

// ContainerServiceLinuxProfile_STATUSARMGenerator returns a generator of ContainerServiceLinuxProfile_STATUSARM instances for property testing.
// We first initialize containerServiceLinuxProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceLinuxProfile_STATUSARMGenerator() gopter.Gen {
	if containerServiceLinuxProfile_STATUSARMGenerator != nil {
		return containerServiceLinuxProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_STATUSARM(generators)
	containerServiceLinuxProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_STATUSARM(generators)
	containerServiceLinuxProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_STATUSARM{}), generators)

	return containerServiceLinuxProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["Ssh"] = gen.PtrOf(ContainerServiceSshConfiguration_STATUSARMGenerator())
}

func Test_ContainerServiceNetworkProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceNetworkProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceNetworkProfile_STATUSARM, ContainerServiceNetworkProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceNetworkProfile_STATUSARM runs a test to see if a specific instance of ContainerServiceNetworkProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceNetworkProfile_STATUSARM(subject ContainerServiceNetworkProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceNetworkProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceNetworkProfile_STATUSARM instances for property testing - lazily instantiated by
// ContainerServiceNetworkProfile_STATUSARMGenerator()
var containerServiceNetworkProfile_STATUSARMGenerator gopter.Gen

// ContainerServiceNetworkProfile_STATUSARMGenerator returns a generator of ContainerServiceNetworkProfile_STATUSARM instances for property testing.
// We first initialize containerServiceNetworkProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceNetworkProfile_STATUSARMGenerator() gopter.Gen {
	if containerServiceNetworkProfile_STATUSARMGenerator != nil {
		return containerServiceNetworkProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_STATUSARM(generators)
	containerServiceNetworkProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_STATUSARM(generators)
	containerServiceNetworkProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_STATUSARM{}), generators)

	return containerServiceNetworkProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["DnsServiceIP"] = gen.PtrOf(gen.AlphaString())
	gens["DockerBridgeCidr"] = gen.PtrOf(gen.AlphaString())
	gens["LoadBalancerSku"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_STATUS_LoadBalancerSku_Basic, ContainerServiceNetworkProfile_STATUS_LoadBalancerSku_Standard))
	gens["NetworkMode"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_STATUS_NetworkMode_Bridge, ContainerServiceNetworkProfile_STATUS_NetworkMode_Transparent))
	gens["NetworkPlugin"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_STATUS_NetworkPlugin_Azure, ContainerServiceNetworkProfile_STATUS_NetworkPlugin_Kubenet))
	gens["NetworkPolicy"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_STATUS_NetworkPolicy_Azure, ContainerServiceNetworkProfile_STATUS_NetworkPolicy_Calico))
	gens["OutboundType"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_STATUS_OutboundType_LoadBalancer, ContainerServiceNetworkProfile_STATUS_OutboundType_UserDefinedRouting))
	gens["PodCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["LoadBalancerProfile"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_STATUSARMGenerator())
}

func Test_ManagedClusterAADProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAADProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAADProfile_STATUSARM, ManagedClusterAADProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAADProfile_STATUSARM runs a test to see if a specific instance of ManagedClusterAADProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAADProfile_STATUSARM(subject ManagedClusterAADProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAADProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAADProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterAADProfile_STATUSARMGenerator()
var managedClusterAADProfile_STATUSARMGenerator gopter.Gen

// ManagedClusterAADProfile_STATUSARMGenerator returns a generator of ManagedClusterAADProfile_STATUSARM instances for property testing.
func ManagedClusterAADProfile_STATUSARMGenerator() gopter.Gen {
	if managedClusterAADProfile_STATUSARMGenerator != nil {
		return managedClusterAADProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAADProfile_STATUSARM(generators)
	managedClusterAADProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAADProfile_STATUSARM{}), generators)

	return managedClusterAADProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAADProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAADProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["AdminGroupObjectIDs"] = gen.SliceOf(gen.AlphaString())
	gens["ClientAppID"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAzureRBAC"] = gen.PtrOf(gen.Bool())
	gens["Managed"] = gen.PtrOf(gen.Bool())
	gens["ServerAppID"] = gen.PtrOf(gen.AlphaString())
	gens["ServerAppSecret"] = gen.PtrOf(gen.AlphaString())
	gens["TenantID"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAgentPoolProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfile_STATUSARM, ManagedClusterAgentPoolProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfile_STATUSARM runs a test to see if a specific instance of ManagedClusterAgentPoolProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfile_STATUSARM(subject ManagedClusterAgentPoolProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterAgentPoolProfile_STATUSARMGenerator()
var managedClusterAgentPoolProfile_STATUSARMGenerator gopter.Gen

// ManagedClusterAgentPoolProfile_STATUSARMGenerator returns a generator of ManagedClusterAgentPoolProfile_STATUSARM instances for property testing.
// We first initialize managedClusterAgentPoolProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfile_STATUSARMGenerator() gopter.Gen {
	if managedClusterAgentPoolProfile_STATUSARMGenerator != nil {
		return managedClusterAgentPoolProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUSARM(generators)
	managedClusterAgentPoolProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUSARM(generators)
	managedClusterAgentPoolProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_STATUSARM{}), generators)

	return managedClusterAgentPoolProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.OneConstOf(
		GPUInstanceProfile_STATUS_MIG1G,
		GPUInstanceProfile_STATUS_MIG2G,
		GPUInstanceProfile_STATUS_MIG3G,
		GPUInstanceProfile_STATUS_MIG4G,
		GPUInstanceProfile_STATUS_MIG7G))
	gens["KubeletDiskType"] = gen.PtrOf(gen.OneConstOf(KubeletDiskType_STATUS_OS, KubeletDiskType_STATUS_Temporary))
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(AgentPoolMode_STATUS_System, AgentPoolMode_STATUS_User))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NodeImageVersion"] = gen.PtrOf(gen.AlphaString())
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodePublicIPPrefixID"] = gen.PtrOf(gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsDiskType"] = gen.PtrOf(gen.OneConstOf(OSDiskType_STATUS_Ephemeral, OSDiskType_STATUS_Managed))
	gens["OsSKU"] = gen.PtrOf(gen.OneConstOf(OSSKU_STATUS_CBLMariner, OSSKU_STATUS_Ubuntu))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(OSType_STATUS_Linux, OSType_STATUS_Windows))
	gens["PodSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.OneConstOf(ScaleSetEvictionPolicy_STATUS_Deallocate, ScaleSetEvictionPolicy_STATUS_Delete))
	gens["ScaleSetPriority"] = gen.PtrOf(gen.OneConstOf(ScaleSetPriority_STATUS_Regular, ScaleSetPriority_STATUS_Spot))
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(AgentPoolType_STATUS_AvailabilitySet, AgentPoolType_STATUS_VirtualMachineScaleSets))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
	gens["VnetSubnetID"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfig_STATUSARMGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfig_STATUSARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerState_STATUSARMGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettings_STATUSARMGenerator())
}

func Test_ManagedClusterAPIServerAccessProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAPIServerAccessProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_STATUSARM, ManagedClusterAPIServerAccessProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_STATUSARM runs a test to see if a specific instance of ManagedClusterAPIServerAccessProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_STATUSARM(subject ManagedClusterAPIServerAccessProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAPIServerAccessProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAPIServerAccessProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterAPIServerAccessProfile_STATUSARMGenerator()
var managedClusterAPIServerAccessProfile_STATUSARMGenerator gopter.Gen

// ManagedClusterAPIServerAccessProfile_STATUSARMGenerator returns a generator of ManagedClusterAPIServerAccessProfile_STATUSARM instances for property testing.
func ManagedClusterAPIServerAccessProfile_STATUSARMGenerator() gopter.Gen {
	if managedClusterAPIServerAccessProfile_STATUSARMGenerator != nil {
		return managedClusterAPIServerAccessProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_STATUSARM(generators)
	managedClusterAPIServerAccessProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAPIServerAccessProfile_STATUSARM{}), generators)

	return managedClusterAPIServerAccessProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["AuthorizedIPRanges"] = gen.SliceOf(gen.AlphaString())
	gens["EnablePrivateCluster"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateClusterPublicFQDN"] = gen.PtrOf(gen.Bool())
	gens["PrivateDNSZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAutoUpgradeProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAutoUpgradeProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_STATUSARM, ManagedClusterAutoUpgradeProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_STATUSARM runs a test to see if a specific instance of ManagedClusterAutoUpgradeProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_STATUSARM(subject ManagedClusterAutoUpgradeProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAutoUpgradeProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAutoUpgradeProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterAutoUpgradeProfile_STATUSARMGenerator()
var managedClusterAutoUpgradeProfile_STATUSARMGenerator gopter.Gen

// ManagedClusterAutoUpgradeProfile_STATUSARMGenerator returns a generator of ManagedClusterAutoUpgradeProfile_STATUSARM instances for property testing.
func ManagedClusterAutoUpgradeProfile_STATUSARMGenerator() gopter.Gen {
	if managedClusterAutoUpgradeProfile_STATUSARMGenerator != nil {
		return managedClusterAutoUpgradeProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_STATUSARM(generators)
	managedClusterAutoUpgradeProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAutoUpgradeProfile_STATUSARM{}), generators)

	return managedClusterAutoUpgradeProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["UpgradeChannel"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterAutoUpgradeProfile_STATUS_UpgradeChannel_NodeImage,
		ManagedClusterAutoUpgradeProfile_STATUS_UpgradeChannel_None,
		ManagedClusterAutoUpgradeProfile_STATUS_UpgradeChannel_Patch,
		ManagedClusterAutoUpgradeProfile_STATUS_UpgradeChannel_Rapid,
		ManagedClusterAutoUpgradeProfile_STATUS_UpgradeChannel_Stable))
}

func Test_ManagedClusterHTTPProxyConfig_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterHTTPProxyConfig_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterHTTPProxyConfig_STATUSARM, ManagedClusterHTTPProxyConfig_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterHTTPProxyConfig_STATUSARM runs a test to see if a specific instance of ManagedClusterHTTPProxyConfig_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterHTTPProxyConfig_STATUSARM(subject ManagedClusterHTTPProxyConfig_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterHTTPProxyConfig_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterHTTPProxyConfig_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterHTTPProxyConfig_STATUSARMGenerator()
var managedClusterHTTPProxyConfig_STATUSARMGenerator gopter.Gen

// ManagedClusterHTTPProxyConfig_STATUSARMGenerator returns a generator of ManagedClusterHTTPProxyConfig_STATUSARM instances for property testing.
func ManagedClusterHTTPProxyConfig_STATUSARMGenerator() gopter.Gen {
	if managedClusterHTTPProxyConfig_STATUSARMGenerator != nil {
		return managedClusterHTTPProxyConfig_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_STATUSARM(generators)
	managedClusterHTTPProxyConfig_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterHTTPProxyConfig_STATUSARM{}), generators)

	return managedClusterHTTPProxyConfig_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_STATUSARM(gens map[string]gopter.Gen) {
	gens["HttpProxy"] = gen.PtrOf(gen.AlphaString())
	gens["HttpsProxy"] = gen.PtrOf(gen.AlphaString())
	gens["NoProxy"] = gen.SliceOf(gen.AlphaString())
	gens["TrustedCa"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM, ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM runs a test to see if a specific instance of ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM(subject ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing - lazily
// instantiated by ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator()
var managedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator gopter.Gen

// ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator returns a generator of ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing.
func ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator() gopter.Gen {
	if managedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator != nil {
		return managedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM(generators)
	managedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM{}), generators)

	return managedClusterIdentity_STATUS_UserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProfile_STATUSARM, ManagedClusterPodIdentityProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProfile_STATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentityProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProfile_STATUSARM(subject ManagedClusterPodIdentityProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentityProfile_STATUSARMGenerator()
var managedClusterPodIdentityProfile_STATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentityProfile_STATUSARMGenerator returns a generator of ManagedClusterPodIdentityProfile_STATUSARM instances for property testing.
// We first initialize managedClusterPodIdentityProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProfile_STATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProfile_STATUSARMGenerator != nil {
		return managedClusterPodIdentityProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUSARM(generators)
	managedClusterPodIdentityProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUSARM(generators)
	managedClusterPodIdentityProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_STATUSARM{}), generators)

	return managedClusterPodIdentityProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["AllowNetworkPluginKubenet"] = gen.PtrOf(gen.Bool())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.SliceOf(ManagedClusterPodIdentity_STATUSARMGenerator())
	gens["UserAssignedIdentityExceptions"] = gen.SliceOf(ManagedClusterPodIdentityException_STATUSARMGenerator())
}

func Test_ManagedClusterProperties_STATUS_AutoScalerProfileARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_STATUS_AutoScalerProfileARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterProperties_STATUS_AutoScalerProfileARM, ManagedClusterProperties_STATUS_AutoScalerProfileARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterProperties_STATUS_AutoScalerProfileARM runs a test to see if a specific instance of ManagedClusterProperties_STATUS_AutoScalerProfileARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterProperties_STATUS_AutoScalerProfileARM(subject ManagedClusterProperties_STATUS_AutoScalerProfileARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_STATUS_AutoScalerProfileARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_STATUS_AutoScalerProfileARM instances for property testing - lazily
// instantiated by ManagedClusterProperties_STATUS_AutoScalerProfileARMGenerator()
var managedClusterProperties_STATUS_AutoScalerProfileARMGenerator gopter.Gen

// ManagedClusterProperties_STATUS_AutoScalerProfileARMGenerator returns a generator of ManagedClusterProperties_STATUS_AutoScalerProfileARM instances for property testing.
func ManagedClusterProperties_STATUS_AutoScalerProfileARMGenerator() gopter.Gen {
	if managedClusterProperties_STATUS_AutoScalerProfileARMGenerator != nil {
		return managedClusterProperties_STATUS_AutoScalerProfileARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUS_AutoScalerProfileARM(generators)
	managedClusterProperties_STATUS_AutoScalerProfileARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_STATUS_AutoScalerProfileARM{}), generators)

	return managedClusterProperties_STATUS_AutoScalerProfileARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUS_AutoScalerProfileARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUS_AutoScalerProfileARM(gens map[string]gopter.Gen) {
	gens["BalanceSimilarNodeGroups"] = gen.PtrOf(gen.AlphaString())
	gens["Expander"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterProperties_STATUS_AutoScalerProfile_Expander_LeastWaste,
		ManagedClusterProperties_STATUS_AutoScalerProfile_Expander_MostPods,
		ManagedClusterProperties_STATUS_AutoScalerProfile_Expander_Priority,
		ManagedClusterProperties_STATUS_AutoScalerProfile_Expander_Random))
	gens["MaxEmptyBulkDelete"] = gen.PtrOf(gen.AlphaString())
	gens["MaxGracefulTerminationSec"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNodeProvisionTime"] = gen.PtrOf(gen.AlphaString())
	gens["MaxTotalUnreadyPercentage"] = gen.PtrOf(gen.AlphaString())
	gens["NewPodScaleUpDelay"] = gen.PtrOf(gen.AlphaString())
	gens["OkTotalUnreadyCount"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterAdd"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterDelete"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterFailure"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnneededTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnreadyTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUtilizationThreshold"] = gen.PtrOf(gen.AlphaString())
	gens["ScanInterval"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithLocalStorage"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithSystemPods"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterServicePrincipalProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterServicePrincipalProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterServicePrincipalProfile_STATUSARM, ManagedClusterServicePrincipalProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterServicePrincipalProfile_STATUSARM runs a test to see if a specific instance of ManagedClusterServicePrincipalProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterServicePrincipalProfile_STATUSARM(subject ManagedClusterServicePrincipalProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterServicePrincipalProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterServicePrincipalProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterServicePrincipalProfile_STATUSARMGenerator()
var managedClusterServicePrincipalProfile_STATUSARMGenerator gopter.Gen

// ManagedClusterServicePrincipalProfile_STATUSARMGenerator returns a generator of ManagedClusterServicePrincipalProfile_STATUSARM instances for property testing.
func ManagedClusterServicePrincipalProfile_STATUSARMGenerator() gopter.Gen {
	if managedClusterServicePrincipalProfile_STATUSARMGenerator != nil {
		return managedClusterServicePrincipalProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_STATUSARM(generators)
	managedClusterServicePrincipalProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterServicePrincipalProfile_STATUSARM{}), generators)

	return managedClusterServicePrincipalProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterWindowsProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterWindowsProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterWindowsProfile_STATUSARM, ManagedClusterWindowsProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterWindowsProfile_STATUSARM runs a test to see if a specific instance of ManagedClusterWindowsProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterWindowsProfile_STATUSARM(subject ManagedClusterWindowsProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterWindowsProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterWindowsProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterWindowsProfile_STATUSARMGenerator()
var managedClusterWindowsProfile_STATUSARMGenerator gopter.Gen

// ManagedClusterWindowsProfile_STATUSARMGenerator returns a generator of ManagedClusterWindowsProfile_STATUSARM instances for property testing.
func ManagedClusterWindowsProfile_STATUSARMGenerator() gopter.Gen {
	if managedClusterWindowsProfile_STATUSARMGenerator != nil {
		return managedClusterWindowsProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_STATUSARM(generators)
	managedClusterWindowsProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWindowsProfile_STATUSARM{}), generators)

	return managedClusterWindowsProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["EnableCSIProxy"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.OneConstOf(ManagedClusterWindowsProfile_STATUS_LicenseType_None, ManagedClusterWindowsProfile_STATUS_LicenseType_Windows_Server))
}

func Test_PrivateLinkResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkResource_STATUSARM, PrivateLinkResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkResource_STATUSARM runs a test to see if a specific instance of PrivateLinkResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkResource_STATUSARM(subject PrivateLinkResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkResource_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkResource_STATUSARMGenerator()
var privateLinkResource_STATUSARMGenerator gopter.Gen

// PrivateLinkResource_STATUSARMGenerator returns a generator of PrivateLinkResource_STATUSARM instances for property testing.
func PrivateLinkResource_STATUSARMGenerator() gopter.Gen {
	if privateLinkResource_STATUSARMGenerator != nil {
		return privateLinkResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkResource_STATUSARM(generators)
	privateLinkResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkResource_STATUSARM{}), generators)

	return privateLinkResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceID"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMembers"] = gen.SliceOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerServiceSshConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshConfiguration_STATUSARM, ContainerServiceSshConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshConfiguration_STATUSARM runs a test to see if a specific instance of ContainerServiceSshConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshConfiguration_STATUSARM(subject ContainerServiceSshConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshConfiguration_STATUSARM instances for property testing - lazily instantiated by
// ContainerServiceSshConfiguration_STATUSARMGenerator()
var containerServiceSshConfiguration_STATUSARMGenerator gopter.Gen

// ContainerServiceSshConfiguration_STATUSARMGenerator returns a generator of ContainerServiceSshConfiguration_STATUSARM instances for property testing.
func ContainerServiceSshConfiguration_STATUSARMGenerator() gopter.Gen {
	if containerServiceSshConfiguration_STATUSARMGenerator != nil {
		return containerServiceSshConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_STATUSARM(generators)
	containerServiceSshConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshConfiguration_STATUSARM{}), generators)

	return containerServiceSshConfiguration_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["PublicKeys"] = gen.SliceOf(ContainerServiceSshPublicKey_STATUSARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUSARM, ManagedClusterLoadBalancerProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUSARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUSARM(subject ManagedClusterLoadBalancerProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterLoadBalancerProfile_STATUSARMGenerator()
var managedClusterLoadBalancerProfile_STATUSARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_STATUSARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_STATUSARM instances for property testing.
// We first initialize managedClusterLoadBalancerProfile_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterLoadBalancerProfile_STATUSARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_STATUSARMGenerator != nil {
		return managedClusterLoadBalancerProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUSARM(generators)
	managedClusterLoadBalancerProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUSARM(generators)
	managedClusterLoadBalancerProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUSARM{}), generators)

	return managedClusterLoadBalancerProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["AllocatedOutboundPorts"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["EffectiveOutboundIPs"] = gen.SliceOf(ResourceReference_STATUSARMGenerator())
	gens["ManagedOutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator())
	gens["OutboundIPPrefixes"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator())
	gens["OutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator())
}

func Test_ManagedClusterPodIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentity_STATUSARM, ManagedClusterPodIdentity_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentity_STATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentity_STATUSARM(subject ManagedClusterPodIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentity_STATUSARMGenerator()
var managedClusterPodIdentity_STATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentity_STATUSARMGenerator returns a generator of ManagedClusterPodIdentity_STATUSARM instances for property testing.
// We first initialize managedClusterPodIdentity_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentity_STATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentity_STATUSARMGenerator != nil {
		return managedClusterPodIdentity_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_STATUSARM(generators)
	managedClusterPodIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_STATUSARM(generators)
	managedClusterPodIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_STATUSARM{}), generators)

	return managedClusterPodIdentity_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["BindingSelector"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterPodIdentity_STATUS_ProvisioningState_Assigned,
		ManagedClusterPodIdentity_STATUS_ProvisioningState_Deleting,
		ManagedClusterPodIdentity_STATUS_ProvisioningState_Failed,
		ManagedClusterPodIdentity_STATUS_ProvisioningState_Updating))
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(UserAssignedIdentity_STATUSARMGenerator())
	gens["ProvisioningInfo"] = gen.PtrOf(ManagedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator())
}

func Test_ManagedClusterPodIdentityException_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityException_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityException_STATUSARM, ManagedClusterPodIdentityException_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityException_STATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentityException_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityException_STATUSARM(subject ManagedClusterPodIdentityException_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityException_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityException_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentityException_STATUSARMGenerator()
var managedClusterPodIdentityException_STATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentityException_STATUSARMGenerator returns a generator of ManagedClusterPodIdentityException_STATUSARM instances for property testing.
func ManagedClusterPodIdentityException_STATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentityException_STATUSARMGenerator != nil {
		return managedClusterPodIdentityException_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_STATUSARM(generators)
	managedClusterPodIdentityException_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityException_STATUSARM{}), generators)

	return managedClusterPodIdentityException_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["PodLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_ContainerServiceSshPublicKey_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshPublicKey_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshPublicKey_STATUSARM, ContainerServiceSshPublicKey_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshPublicKey_STATUSARM runs a test to see if a specific instance of ContainerServiceSshPublicKey_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshPublicKey_STATUSARM(subject ContainerServiceSshPublicKey_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshPublicKey_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshPublicKey_STATUSARM instances for property testing - lazily instantiated by
// ContainerServiceSshPublicKey_STATUSARMGenerator()
var containerServiceSshPublicKey_STATUSARMGenerator gopter.Gen

// ContainerServiceSshPublicKey_STATUSARMGenerator returns a generator of ContainerServiceSshPublicKey_STATUSARM instances for property testing.
func ContainerServiceSshPublicKey_STATUSARMGenerator() gopter.Gen {
	if containerServiceSshPublicKey_STATUSARMGenerator != nil {
		return containerServiceSshPublicKey_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_STATUSARM(generators)
	containerServiceSshPublicKey_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshPublicKey_STATUSARM{}), generators)

	return containerServiceSshPublicKey_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_STATUSARM(gens map[string]gopter.Gen) {
	gens["KeyData"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM, ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM(subject ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator()
var managedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM instances for property testing.
func ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator != nil {
		return managedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM(generators)
	managedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM{}), generators)

	return managedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
}

func Test_ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM, ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM(subject ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator()
var managedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM instances for property testing.
func ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator != nil {
		return managedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM(generators)
	managedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM{}), generators)

	return managedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM(gens map[string]gopter.Gen) {
	gens["PublicIPPrefixes"] = gen.SliceOf(ResourceReference_STATUSARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM, ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM(subject ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator()
var managedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM instances for property testing.
func ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator != nil {
		return managedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM(generators)
	managedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM{}), generators)

	return managedClusterLoadBalancerProfile_STATUS_OutboundIPsARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM(gens map[string]gopter.Gen) {
	gens["PublicIPs"] = gen.SliceOf(ResourceReference_STATUSARMGenerator())
}

func Test_ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentity_STATUS_ProvisioningInfoARM, ManagedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentity_STATUS_ProvisioningInfoARM runs a test to see if a specific instance of ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentity_STATUS_ProvisioningInfoARM(subject ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator()
var managedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator gopter.Gen

// ManagedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator returns a generator of ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM instances for property testing.
func ManagedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator() gopter.Gen {
	if managedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator != nil {
		return managedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ProvisioningInfoARM(generators)
	managedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM{}), generators)

	return managedClusterPodIdentity_STATUS_ProvisioningInfoARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ProvisioningInfoARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ProvisioningInfoARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningError_STATUSARMGenerator())
}

func Test_ResourceReference_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_STATUSARM, ResourceReference_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_STATUSARM runs a test to see if a specific instance of ResourceReference_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_STATUSARM(subject ResourceReference_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_STATUSARM instances for property testing - lazily instantiated by
// ResourceReference_STATUSARMGenerator()
var resourceReference_STATUSARMGenerator gopter.Gen

// ResourceReference_STATUSARMGenerator returns a generator of ResourceReference_STATUSARM instances for property testing.
func ResourceReference_STATUSARMGenerator() gopter.Gen {
	if resourceReference_STATUSARMGenerator != nil {
		return resourceReference_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_STATUSARM(generators)
	resourceReference_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_STATUSARM{}), generators)

	return resourceReference_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_STATUSARM, UserAssignedIdentity_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_STATUSARM runs a test to see if a specific instance of UserAssignedIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_STATUSARM(subject UserAssignedIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_STATUSARM instances for property testing - lazily instantiated by
// UserAssignedIdentity_STATUSARMGenerator()
var userAssignedIdentity_STATUSARMGenerator gopter.Gen

// UserAssignedIdentity_STATUSARMGenerator returns a generator of UserAssignedIdentity_STATUSARM instances for property testing.
func UserAssignedIdentity_STATUSARMGenerator() gopter.Gen {
	if userAssignedIdentity_STATUSARMGenerator != nil {
		return userAssignedIdentity_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUSARM(generators)
	userAssignedIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_STATUSARM{}), generators)

	return userAssignedIdentity_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProvisioningError_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningError_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_STATUSARM, ManagedClusterPodIdentityProvisioningError_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_STATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningError_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_STATUSARM(subject ManagedClusterPodIdentityProvisioningError_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningError_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningError_STATUSARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentityProvisioningError_STATUSARMGenerator()
var managedClusterPodIdentityProvisioningError_STATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningError_STATUSARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningError_STATUSARM instances for property testing.
func ManagedClusterPodIdentityProvisioningError_STATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningError_STATUSARMGenerator != nil {
		return managedClusterPodIdentityProvisioningError_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_STATUSARM(generators)
	managedClusterPodIdentityProvisioningError_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningError_STATUSARM{}), generators)

	return managedClusterPodIdentityProvisioningError_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_STATUSARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM, ManagedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM(subject ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator()
var managedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM instances for property testing.
// We first initialize managedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM(generators)
	managedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM(generators)
	managedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBody_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUSARM(gens map[string]gopter.Gen) {
	gens["Details"] = gen.SliceOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM, ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM(subject ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM instances for property testing -
// lazily instantiated by ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator()
var managedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM instances for property testing.
func ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM(generators)
	managedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}
