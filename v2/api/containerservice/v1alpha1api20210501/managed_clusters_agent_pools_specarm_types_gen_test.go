// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedClustersAgentPools_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClustersAgentPools_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClustersAgentPools_SPECARM, ManagedClustersAgentPools_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClustersAgentPools_SPECARM runs a test to see if a specific instance of ManagedClustersAgentPools_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClustersAgentPools_SPECARM(subject ManagedClustersAgentPools_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClustersAgentPools_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClustersAgentPools_SPECARM instances for property testing - lazily instantiated by
//ManagedClustersAgentPools_SPECARMGenerator()
var managedClustersAgentPools_specarmGenerator gopter.Gen

// ManagedClustersAgentPools_SPECARMGenerator returns a generator of ManagedClustersAgentPools_SPECARM instances for property testing.
// We first initialize managedClustersAgentPools_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClustersAgentPools_SPECARMGenerator() gopter.Gen {
	if managedClustersAgentPools_specarmGenerator != nil {
		return managedClustersAgentPools_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClustersAgentPools_SPECARM(generators)
	managedClustersAgentPools_specarmGenerator = gen.Struct(reflect.TypeOf(ManagedClustersAgentPools_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClustersAgentPools_SPECARM(generators)
	AddRelatedPropertyGeneratorsForManagedClustersAgentPools_SPECARM(generators)
	managedClustersAgentPools_specarmGenerator = gen.Struct(reflect.TypeOf(ManagedClustersAgentPools_SPECARM{}), generators)

	return managedClustersAgentPools_specarmGenerator
}

// AddIndependentPropertyGeneratorsForManagedClustersAgentPools_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClustersAgentPools_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForManagedClustersAgentPools_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClustersAgentPools_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ManagedClusterAgentPoolProfileProperties_SpecARMGenerator())
}

func Test_ManagedClusterAgentPoolProfileProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfileProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfileProperties_SpecARM, ManagedClusterAgentPoolProfileProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfileProperties_SpecARM runs a test to see if a specific instance of ManagedClusterAgentPoolProfileProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfileProperties_SpecARM(subject ManagedClusterAgentPoolProfileProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfileProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfileProperties_SpecARM instances for property testing - lazily instantiated by
//ManagedClusterAgentPoolProfileProperties_SpecARMGenerator()
var managedClusterAgentPoolProfileProperties_specARMGenerator gopter.Gen

// ManagedClusterAgentPoolProfileProperties_SpecARMGenerator returns a generator of ManagedClusterAgentPoolProfileProperties_SpecARM instances for property testing.
// We first initialize managedClusterAgentPoolProfileProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfileProperties_SpecARMGenerator() gopter.Gen {
	if managedClusterAgentPoolProfileProperties_specARMGenerator != nil {
		return managedClusterAgentPoolProfileProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_SpecARM(generators)
	managedClusterAgentPoolProfileProperties_specARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfileProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_SpecARM(generators)
	managedClusterAgentPoolProfileProperties_specARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfileProperties_SpecARM{}), generators)

	return managedClusterAgentPoolProfileProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.OneConstOf(
		GPUInstanceProfile_SpecMIG1G,
		GPUInstanceProfile_SpecMIG2G,
		GPUInstanceProfile_SpecMIG3G,
		GPUInstanceProfile_SpecMIG4G,
		GPUInstanceProfile_SpecMIG7G))
	gens["KubeletDiskType"] = gen.PtrOf(gen.OneConstOf(KubeletDiskType_SpecOS, KubeletDiskType_SpecTemporary))
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(AgentPoolMode_SpecSystem, AgentPoolMode_SpecUser))
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodePublicIPPrefixID"] = gen.PtrOf(gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int().Map(func(result int) ContainerServiceOSDisk_Spec {
		return ContainerServiceOSDisk_Spec(result)
	}))
	gens["OsDiskType"] = gen.PtrOf(gen.OneConstOf(OSDiskType_SpecEphemeral, OSDiskType_SpecManaged))
	gens["OsSKU"] = gen.PtrOf(gen.OneConstOf(OSSKU_SpecCBLMariner, OSSKU_SpecUbuntu))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(OSType_SpecLinux, OSType_SpecWindows))
	gens["PodSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.OneConstOf(ScaleSetEvictionPolicy_SpecDeallocate, ScaleSetEvictionPolicy_SpecDelete))
	gens["ScaleSetPriority"] = gen.PtrOf(gen.OneConstOf(ScaleSetPriority_SpecRegular, ScaleSetPriority_SpecSpot))
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(AgentPoolType_SpecAvailabilitySet, AgentPoolType_SpecVirtualMachineScaleSets))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
	gens["VnetSubnetID"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfig_SpecARMGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfig_SpecARMGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettings_SpecARMGenerator())
}

func Test_AgentPoolUpgradeSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolUpgradeSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolUpgradeSettings_SpecARM, AgentPoolUpgradeSettings_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolUpgradeSettings_SpecARM runs a test to see if a specific instance of AgentPoolUpgradeSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolUpgradeSettings_SpecARM(subject AgentPoolUpgradeSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolUpgradeSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolUpgradeSettings_SpecARM instances for property testing - lazily instantiated by
//AgentPoolUpgradeSettings_SpecARMGenerator()
var agentPoolUpgradeSettings_specARMGenerator gopter.Gen

// AgentPoolUpgradeSettings_SpecARMGenerator returns a generator of AgentPoolUpgradeSettings_SpecARM instances for property testing.
func AgentPoolUpgradeSettings_SpecARMGenerator() gopter.Gen {
	if agentPoolUpgradeSettings_specARMGenerator != nil {
		return agentPoolUpgradeSettings_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettings_SpecARM(generators)
	agentPoolUpgradeSettings_specARMGenerator = gen.Struct(reflect.TypeOf(AgentPoolUpgradeSettings_SpecARM{}), generators)

	return agentPoolUpgradeSettings_specARMGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettings_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettings_SpecARM(gens map[string]gopter.Gen) {
	gens["MaxSurge"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeletConfig_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeletConfig_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeletConfig_SpecARM, KubeletConfig_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeletConfig_SpecARM runs a test to see if a specific instance of KubeletConfig_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeletConfig_SpecARM(subject KubeletConfig_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeletConfig_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeletConfig_SpecARM instances for property testing - lazily instantiated by
//KubeletConfig_SpecARMGenerator()
var kubeletConfig_specARMGenerator gopter.Gen

// KubeletConfig_SpecARMGenerator returns a generator of KubeletConfig_SpecARM instances for property testing.
func KubeletConfig_SpecARMGenerator() gopter.Gen {
	if kubeletConfig_specARMGenerator != nil {
		return kubeletConfig_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeletConfig_SpecARM(generators)
	kubeletConfig_specARMGenerator = gen.Struct(reflect.TypeOf(KubeletConfig_SpecARM{}), generators)

	return kubeletConfig_specARMGenerator
}

// AddIndependentPropertyGeneratorsForKubeletConfig_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeletConfig_SpecARM(gens map[string]gopter.Gen) {
	gens["AllowedUnsafeSysctls"] = gen.SliceOf(gen.AlphaString())
	gens["ContainerLogMaxFiles"] = gen.PtrOf(gen.Int())
	gens["ContainerLogMaxSizeMB"] = gen.PtrOf(gen.Int())
	gens["CpuCfsQuota"] = gen.PtrOf(gen.Bool())
	gens["CpuCfsQuotaPeriod"] = gen.PtrOf(gen.AlphaString())
	gens["CpuManagerPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["FailSwapOn"] = gen.PtrOf(gen.Bool())
	gens["ImageGcHighThreshold"] = gen.PtrOf(gen.Int())
	gens["ImageGcLowThreshold"] = gen.PtrOf(gen.Int())
	gens["PodMaxPids"] = gen.PtrOf(gen.Int())
	gens["TopologyManagerPolicy"] = gen.PtrOf(gen.AlphaString())
}

func Test_LinuxOSConfig_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LinuxOSConfig_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLinuxOSConfig_SpecARM, LinuxOSConfig_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLinuxOSConfig_SpecARM runs a test to see if a specific instance of LinuxOSConfig_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLinuxOSConfig_SpecARM(subject LinuxOSConfig_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LinuxOSConfig_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LinuxOSConfig_SpecARM instances for property testing - lazily instantiated by
//LinuxOSConfig_SpecARMGenerator()
var linuxOSConfig_specARMGenerator gopter.Gen

// LinuxOSConfig_SpecARMGenerator returns a generator of LinuxOSConfig_SpecARM instances for property testing.
// We first initialize linuxOSConfig_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LinuxOSConfig_SpecARMGenerator() gopter.Gen {
	if linuxOSConfig_specARMGenerator != nil {
		return linuxOSConfig_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxOSConfig_SpecARM(generators)
	linuxOSConfig_specARMGenerator = gen.Struct(reflect.TypeOf(LinuxOSConfig_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxOSConfig_SpecARM(generators)
	AddRelatedPropertyGeneratorsForLinuxOSConfig_SpecARM(generators)
	linuxOSConfig_specARMGenerator = gen.Struct(reflect.TypeOf(LinuxOSConfig_SpecARM{}), generators)

	return linuxOSConfig_specARMGenerator
}

// AddIndependentPropertyGeneratorsForLinuxOSConfig_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLinuxOSConfig_SpecARM(gens map[string]gopter.Gen) {
	gens["SwapFileSizeMB"] = gen.PtrOf(gen.Int())
	gens["TransparentHugePageDefrag"] = gen.PtrOf(gen.AlphaString())
	gens["TransparentHugePageEnabled"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLinuxOSConfig_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLinuxOSConfig_SpecARM(gens map[string]gopter.Gen) {
	gens["Sysctls"] = gen.PtrOf(SysctlConfig_SpecARMGenerator())
}

func Test_SysctlConfig_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SysctlConfig_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSysctlConfig_SpecARM, SysctlConfig_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSysctlConfig_SpecARM runs a test to see if a specific instance of SysctlConfig_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSysctlConfig_SpecARM(subject SysctlConfig_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SysctlConfig_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SysctlConfig_SpecARM instances for property testing - lazily instantiated by
//SysctlConfig_SpecARMGenerator()
var sysctlConfig_specARMGenerator gopter.Gen

// SysctlConfig_SpecARMGenerator returns a generator of SysctlConfig_SpecARM instances for property testing.
func SysctlConfig_SpecARMGenerator() gopter.Gen {
	if sysctlConfig_specARMGenerator != nil {
		return sysctlConfig_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSysctlConfig_SpecARM(generators)
	sysctlConfig_specARMGenerator = gen.Struct(reflect.TypeOf(SysctlConfig_SpecARM{}), generators)

	return sysctlConfig_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSysctlConfig_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSysctlConfig_SpecARM(gens map[string]gopter.Gen) {
	gens["FsAioMaxNr"] = gen.PtrOf(gen.Int())
	gens["FsFileMax"] = gen.PtrOf(gen.Int())
	gens["FsInotifyMaxUserWatches"] = gen.PtrOf(gen.Int())
	gens["FsNrOpen"] = gen.PtrOf(gen.Int())
	gens["KernelThreadsMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreNetdevMaxBacklog"] = gen.PtrOf(gen.Int())
	gens["NetCoreOptmemMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreRmemDefault"] = gen.PtrOf(gen.Int())
	gens["NetCoreRmemMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreSomaxconn"] = gen.PtrOf(gen.Int())
	gens["NetCoreWmemDefault"] = gen.PtrOf(gen.Int())
	gens["NetCoreWmemMax"] = gen.PtrOf(gen.Int())
	gens["NetIpv4IpLocalPortRange"] = gen.PtrOf(gen.AlphaString())
	gens["NetIpv4NeighDefaultGcThresh1"] = gen.PtrOf(gen.Int())
	gens["NetIpv4NeighDefaultGcThresh2"] = gen.PtrOf(gen.Int())
	gens["NetIpv4NeighDefaultGcThresh3"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpFinTimeout"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpKeepaliveProbes"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpKeepaliveTime"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpMaxSynBacklog"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpMaxTwBuckets"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpTwReuse"] = gen.PtrOf(gen.Bool())
	gens["NetIpv4TcpkeepaliveIntvl"] = gen.PtrOf(gen.Int())
	gens["NetNetfilterNfConntrackBuckets"] = gen.PtrOf(gen.Int())
	gens["NetNetfilterNfConntrackMax"] = gen.PtrOf(gen.Int())
	gens["VmMaxMapCount"] = gen.PtrOf(gen.Int())
	gens["VmSwappiness"] = gen.PtrOf(gen.Int())
	gens["VmVfsCachePressure"] = gen.PtrOf(gen.Int())
}
