// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedClustersAgentPools_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClustersAgentPools_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClustersAgentPoolsSPECARM, ManagedClustersAgentPoolsSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClustersAgentPoolsSPECARM runs a test to see if a specific instance of ManagedClustersAgentPools_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClustersAgentPoolsSPECARM(subject ManagedClustersAgentPools_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClustersAgentPools_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClustersAgentPools_SPECARM instances for property testing - lazily instantiated by
//ManagedClustersAgentPoolsSPECARMGenerator()
var managedClustersAgentPoolsSPECARMGenerator gopter.Gen

// ManagedClustersAgentPoolsSPECARMGenerator returns a generator of ManagedClustersAgentPools_SPECARM instances for property testing.
// We first initialize managedClustersAgentPoolsSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClustersAgentPoolsSPECARMGenerator() gopter.Gen {
	if managedClustersAgentPoolsSPECARMGenerator != nil {
		return managedClustersAgentPoolsSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClustersAgentPoolsSPECARM(generators)
	managedClustersAgentPoolsSPECARMGenerator = gen.Struct(reflect.TypeOf(ManagedClustersAgentPools_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClustersAgentPoolsSPECARM(generators)
	AddRelatedPropertyGeneratorsForManagedClustersAgentPoolsSPECARM(generators)
	managedClustersAgentPoolsSPECARMGenerator = gen.Struct(reflect.TypeOf(ManagedClustersAgentPools_SPECARM{}), generators)

	return managedClustersAgentPoolsSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClustersAgentPoolsSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClustersAgentPoolsSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForManagedClustersAgentPoolsSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClustersAgentPoolsSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ManagedClusterAgentPoolProfilePropertiesSpecARMGenerator())
}

func Test_ManagedClusterAgentPoolProfileProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfileProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfilePropertiesSpecARM, ManagedClusterAgentPoolProfilePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfilePropertiesSpecARM runs a test to see if a specific instance of ManagedClusterAgentPoolProfileProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfilePropertiesSpecARM(subject ManagedClusterAgentPoolProfileProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfileProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfileProperties_SpecARM instances for property testing - lazily instantiated by
//ManagedClusterAgentPoolProfilePropertiesSpecARMGenerator()
var managedClusterAgentPoolProfilePropertiesSpecARMGenerator gopter.Gen

// ManagedClusterAgentPoolProfilePropertiesSpecARMGenerator returns a generator of ManagedClusterAgentPoolProfileProperties_SpecARM instances for property testing.
// We first initialize managedClusterAgentPoolProfilePropertiesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfilePropertiesSpecARMGenerator() gopter.Gen {
	if managedClusterAgentPoolProfilePropertiesSpecARMGenerator != nil {
		return managedClusterAgentPoolProfilePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSpecARM(generators)
	managedClusterAgentPoolProfilePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfileProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSpecARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSpecARM(generators)
	managedClusterAgentPoolProfilePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfileProperties_SpecARM{}), generators)

	return managedClusterAgentPoolProfilePropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.OneConstOf(
		GPUInstanceProfile_SpecMIG1G,
		GPUInstanceProfile_SpecMIG2G,
		GPUInstanceProfile_SpecMIG3G,
		GPUInstanceProfile_SpecMIG4G,
		GPUInstanceProfile_SpecMIG7G))
	gens["KubeletDiskType"] = gen.PtrOf(gen.OneConstOf(KubeletDiskType_SpecOS, KubeletDiskType_SpecTemporary))
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(AgentPoolMode_SpecSystem, AgentPoolMode_SpecUser))
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodePublicIPPrefixID"] = gen.PtrOf(gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsDiskType"] = gen.PtrOf(gen.OneConstOf(OSDiskType_SpecEphemeral, OSDiskType_SpecManaged))
	gens["OsSKU"] = gen.PtrOf(gen.OneConstOf(OSSKU_SpecCBLMariner, OSSKU_SpecUbuntu))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(OSType_SpecLinux, OSType_SpecWindows))
	gens["PodSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.OneConstOf(ScaleSetEvictionPolicy_SpecDeallocate, ScaleSetEvictionPolicy_SpecDelete))
	gens["ScaleSetPriority"] = gen.PtrOf(gen.OneConstOf(ScaleSetPriority_SpecRegular, ScaleSetPriority_SpecSpot))
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(AgentPoolType_SpecAvailabilitySet, AgentPoolType_SpecVirtualMachineScaleSets))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
	gens["VnetSubnetID"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfigSpecARMGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfigSpecARMGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettingsSpecARMGenerator())
}

func Test_AgentPoolUpgradeSettings_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolUpgradeSettings_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolUpgradeSettingsSpecARM, AgentPoolUpgradeSettingsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolUpgradeSettingsSpecARM runs a test to see if a specific instance of AgentPoolUpgradeSettings_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolUpgradeSettingsSpecARM(subject AgentPoolUpgradeSettings_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolUpgradeSettings_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolUpgradeSettings_SpecARM instances for property testing - lazily instantiated by
//AgentPoolUpgradeSettingsSpecARMGenerator()
var agentPoolUpgradeSettingsSpecARMGenerator gopter.Gen

// AgentPoolUpgradeSettingsSpecARMGenerator returns a generator of AgentPoolUpgradeSettings_SpecARM instances for property testing.
func AgentPoolUpgradeSettingsSpecARMGenerator() gopter.Gen {
	if agentPoolUpgradeSettingsSpecARMGenerator != nil {
		return agentPoolUpgradeSettingsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettingsSpecARM(generators)
	agentPoolUpgradeSettingsSpecARMGenerator = gen.Struct(reflect.TypeOf(AgentPoolUpgradeSettings_SpecARM{}), generators)

	return agentPoolUpgradeSettingsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettingsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettingsSpecARM(gens map[string]gopter.Gen) {
	gens["MaxSurge"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeletConfig_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeletConfig_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeletConfigSpecARM, KubeletConfigSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeletConfigSpecARM runs a test to see if a specific instance of KubeletConfig_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeletConfigSpecARM(subject KubeletConfig_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeletConfig_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeletConfig_SpecARM instances for property testing - lazily instantiated by
//KubeletConfigSpecARMGenerator()
var kubeletConfigSpecARMGenerator gopter.Gen

// KubeletConfigSpecARMGenerator returns a generator of KubeletConfig_SpecARM instances for property testing.
func KubeletConfigSpecARMGenerator() gopter.Gen {
	if kubeletConfigSpecARMGenerator != nil {
		return kubeletConfigSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeletConfigSpecARM(generators)
	kubeletConfigSpecARMGenerator = gen.Struct(reflect.TypeOf(KubeletConfig_SpecARM{}), generators)

	return kubeletConfigSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForKubeletConfigSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeletConfigSpecARM(gens map[string]gopter.Gen) {
	gens["AllowedUnsafeSysctls"] = gen.SliceOf(gen.AlphaString())
	gens["ContainerLogMaxFiles"] = gen.PtrOf(gen.Int())
	gens["ContainerLogMaxSizeMB"] = gen.PtrOf(gen.Int())
	gens["CpuCfsQuota"] = gen.PtrOf(gen.Bool())
	gens["CpuCfsQuotaPeriod"] = gen.PtrOf(gen.AlphaString())
	gens["CpuManagerPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["FailSwapOn"] = gen.PtrOf(gen.Bool())
	gens["ImageGcHighThreshold"] = gen.PtrOf(gen.Int())
	gens["ImageGcLowThreshold"] = gen.PtrOf(gen.Int())
	gens["PodMaxPids"] = gen.PtrOf(gen.Int())
	gens["TopologyManagerPolicy"] = gen.PtrOf(gen.AlphaString())
}

func Test_LinuxOSConfig_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LinuxOSConfig_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLinuxOSConfigSpecARM, LinuxOSConfigSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLinuxOSConfigSpecARM runs a test to see if a specific instance of LinuxOSConfig_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLinuxOSConfigSpecARM(subject LinuxOSConfig_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LinuxOSConfig_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LinuxOSConfig_SpecARM instances for property testing - lazily instantiated by
//LinuxOSConfigSpecARMGenerator()
var linuxOSConfigSpecARMGenerator gopter.Gen

// LinuxOSConfigSpecARMGenerator returns a generator of LinuxOSConfig_SpecARM instances for property testing.
// We first initialize linuxOSConfigSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LinuxOSConfigSpecARMGenerator() gopter.Gen {
	if linuxOSConfigSpecARMGenerator != nil {
		return linuxOSConfigSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxOSConfigSpecARM(generators)
	linuxOSConfigSpecARMGenerator = gen.Struct(reflect.TypeOf(LinuxOSConfig_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxOSConfigSpecARM(generators)
	AddRelatedPropertyGeneratorsForLinuxOSConfigSpecARM(generators)
	linuxOSConfigSpecARMGenerator = gen.Struct(reflect.TypeOf(LinuxOSConfig_SpecARM{}), generators)

	return linuxOSConfigSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForLinuxOSConfigSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLinuxOSConfigSpecARM(gens map[string]gopter.Gen) {
	gens["SwapFileSizeMB"] = gen.PtrOf(gen.Int())
	gens["TransparentHugePageDefrag"] = gen.PtrOf(gen.AlphaString())
	gens["TransparentHugePageEnabled"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLinuxOSConfigSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLinuxOSConfigSpecARM(gens map[string]gopter.Gen) {
	gens["Sysctls"] = gen.PtrOf(SysctlConfigSpecARMGenerator())
}

func Test_SysctlConfig_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SysctlConfig_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSysctlConfigSpecARM, SysctlConfigSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSysctlConfigSpecARM runs a test to see if a specific instance of SysctlConfig_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSysctlConfigSpecARM(subject SysctlConfig_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SysctlConfig_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SysctlConfig_SpecARM instances for property testing - lazily instantiated by
//SysctlConfigSpecARMGenerator()
var sysctlConfigSpecARMGenerator gopter.Gen

// SysctlConfigSpecARMGenerator returns a generator of SysctlConfig_SpecARM instances for property testing.
func SysctlConfigSpecARMGenerator() gopter.Gen {
	if sysctlConfigSpecARMGenerator != nil {
		return sysctlConfigSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSysctlConfigSpecARM(generators)
	sysctlConfigSpecARMGenerator = gen.Struct(reflect.TypeOf(SysctlConfig_SpecARM{}), generators)

	return sysctlConfigSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForSysctlConfigSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSysctlConfigSpecARM(gens map[string]gopter.Gen) {
	gens["FsAioMaxNr"] = gen.PtrOf(gen.Int())
	gens["FsFileMax"] = gen.PtrOf(gen.Int())
	gens["FsInotifyMaxUserWatches"] = gen.PtrOf(gen.Int())
	gens["FsNrOpen"] = gen.PtrOf(gen.Int())
	gens["KernelThreadsMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreNetdevMaxBacklog"] = gen.PtrOf(gen.Int())
	gens["NetCoreOptmemMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreRmemDefault"] = gen.PtrOf(gen.Int())
	gens["NetCoreRmemMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreSomaxconn"] = gen.PtrOf(gen.Int())
	gens["NetCoreWmemDefault"] = gen.PtrOf(gen.Int())
	gens["NetCoreWmemMax"] = gen.PtrOf(gen.Int())
	gens["NetIpv4IpLocalPortRange"] = gen.PtrOf(gen.AlphaString())
	gens["NetIpv4NeighDefaultGcThresh1"] = gen.PtrOf(gen.Int())
	gens["NetIpv4NeighDefaultGcThresh2"] = gen.PtrOf(gen.Int())
	gens["NetIpv4NeighDefaultGcThresh3"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpFinTimeout"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpKeepaliveProbes"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpKeepaliveTime"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpMaxSynBacklog"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpMaxTwBuckets"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpTwReuse"] = gen.PtrOf(gen.Bool())
	gens["NetIpv4TcpkeepaliveIntvl"] = gen.PtrOf(gen.Int())
	gens["NetNetfilterNfConntrackBuckets"] = gen.PtrOf(gen.Int())
	gens["NetNetfilterNfConntrackMax"] = gen.PtrOf(gen.Int())
	gens["VmMaxMapCount"] = gen.PtrOf(gen.Int())
	gens["VmSwappiness"] = gen.PtrOf(gen.Int())
	gens["VmVfsCachePressure"] = gen.PtrOf(gen.Int())
}
