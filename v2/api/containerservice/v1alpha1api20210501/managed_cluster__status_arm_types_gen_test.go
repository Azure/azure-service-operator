// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedCluster_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedCluster_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterStatusARM, ManagedClusterStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterStatusARM runs a test to see if a specific instance of ManagedCluster_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterStatusARM(subject ManagedCluster_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedCluster_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedCluster_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterStatusARMGenerator()
var managedClusterStatusARMGenerator gopter.Gen

// ManagedClusterStatusARMGenerator returns a generator of ManagedCluster_StatusARM instances for property testing.
// We first initialize managedClusterStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterStatusARMGenerator() gopter.Gen {
	if managedClusterStatusARMGenerator != nil {
		return managedClusterStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterStatusARM(generators)
	managedClusterStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterStatusARM(generators)
	managedClusterStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_StatusARM{}), generators)

	return managedClusterStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterStatusARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Identity"] = gen.PtrOf(ManagedClusterIdentityStatusARMGenerator())
	gens["Properties"] = gen.PtrOf(ManagedClusterPropertiesStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(ManagedClusterSKUStatusARMGenerator())
}

func Test_ExtendedLocation_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationStatusARM, ExtendedLocationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationStatusARM runs a test to see if a specific instance of ExtendedLocation_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationStatusARM(subject ExtendedLocation_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_StatusARM instances for property testing - lazily instantiated by
// ExtendedLocationStatusARMGenerator()
var extendedLocationStatusARMGenerator gopter.Gen

// ExtendedLocationStatusARMGenerator returns a generator of ExtendedLocation_StatusARM instances for property testing.
func ExtendedLocationStatusARMGenerator() gopter.Gen {
	if extendedLocationStatusARMGenerator != nil {
		return extendedLocationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationStatusARM(generators)
	extendedLocationStatusARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_StatusARM{}), generators)

	return extendedLocationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_StatusEdgeZone))
}

func Test_ManagedClusterIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentityStatusARM, ManagedClusterIdentityStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentityStatusARM runs a test to see if a specific instance of ManagedClusterIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentityStatusARM(subject ManagedClusterIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterIdentityStatusARMGenerator()
var managedClusterIdentityStatusARMGenerator gopter.Gen

// ManagedClusterIdentityStatusARMGenerator returns a generator of ManagedClusterIdentity_StatusARM instances for property testing.
// We first initialize managedClusterIdentityStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterIdentityStatusARMGenerator() gopter.Gen {
	if managedClusterIdentityStatusARMGenerator != nil {
		return managedClusterIdentityStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentityStatusARM(generators)
	managedClusterIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentityStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterIdentityStatusARM(generators)
	managedClusterIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_StatusARM{}), generators)

	return managedClusterIdentityStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentityStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedClusterIdentityStatusTypeNone, ManagedClusterIdentityStatusTypeSystemAssigned, ManagedClusterIdentityStatusTypeUserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedClusterIdentityStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedClusterIdentityStatusUserAssignedIdentitiesARMGenerator())
}

func Test_ManagedClusterProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPropertiesStatusARM, ManagedClusterPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPropertiesStatusARM runs a test to see if a specific instance of ManagedClusterProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPropertiesStatusARM(subject ManagedClusterProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterPropertiesStatusARMGenerator()
var managedClusterPropertiesStatusARMGenerator gopter.Gen

// ManagedClusterPropertiesStatusARMGenerator returns a generator of ManagedClusterProperties_StatusARM instances for property testing.
// We first initialize managedClusterPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPropertiesStatusARMGenerator() gopter.Gen {
	if managedClusterPropertiesStatusARMGenerator != nil {
		return managedClusterPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPropertiesStatusARM(generators)
	managedClusterPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPropertiesStatusARM(generators)
	managedClusterPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_StatusARM{}), generators)

	return managedClusterPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["AzurePortalFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAccounts"] = gen.PtrOf(gen.Bool())
	gens["DiskEncryptionSetID"] = gen.PtrOf(gen.AlphaString())
	gens["DnsPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["EnablePodSecurityPolicy"] = gen.PtrOf(gen.Bool())
	gens["EnableRBAC"] = gen.PtrOf(gen.Bool())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["FqdnSubdomain"] = gen.PtrOf(gen.AlphaString())
	gens["KubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgentPools"] = gen.PtrOf(gen.Int())
	gens["NodeResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["AadProfile"] = gen.PtrOf(ManagedClusterAADProfileStatusARMGenerator())
	gens["AgentPoolProfiles"] = gen.SliceOf(ManagedClusterAgentPoolProfileStatusARMGenerator())
	gens["ApiServerAccessProfile"] = gen.PtrOf(ManagedClusterAPIServerAccessProfileStatusARMGenerator())
	gens["AutoScalerProfile"] = gen.PtrOf(ManagedClusterPropertiesStatusAutoScalerProfileARMGenerator())
	gens["AutoUpgradeProfile"] = gen.PtrOf(ManagedClusterAutoUpgradeProfileStatusARMGenerator())
	gens["HttpProxyConfig"] = gen.PtrOf(ManagedClusterHTTPProxyConfigStatusARMGenerator())
	gens["LinuxProfile"] = gen.PtrOf(ContainerServiceLinuxProfileStatusARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(ContainerServiceNetworkProfileStatusARMGenerator())
	gens["PodIdentityProfile"] = gen.PtrOf(ManagedClusterPodIdentityProfileStatusARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerStateStatusARMGenerator())
	gens["PrivateLinkResources"] = gen.SliceOf(PrivateLinkResourceStatusARMGenerator())
	gens["ServicePrincipalProfile"] = gen.PtrOf(ManagedClusterServicePrincipalProfileStatusARMGenerator())
	gens["WindowsProfile"] = gen.PtrOf(ManagedClusterWindowsProfileStatusARMGenerator())
}

func Test_ManagedClusterSKU_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSKU_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSKUStatusARM, ManagedClusterSKUStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSKUStatusARM runs a test to see if a specific instance of ManagedClusterSKU_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSKUStatusARM(subject ManagedClusterSKU_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSKU_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSKU_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterSKUStatusARMGenerator()
var managedClusterSKUStatusARMGenerator gopter.Gen

// ManagedClusterSKUStatusARMGenerator returns a generator of ManagedClusterSKU_StatusARM instances for property testing.
func ManagedClusterSKUStatusARMGenerator() gopter.Gen {
	if managedClusterSKUStatusARMGenerator != nil {
		return managedClusterSKUStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSKUStatusARM(generators)
	managedClusterSKUStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSKU_StatusARM{}), generators)

	return managedClusterSKUStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSKUStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSKUStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKUStatusNameBasic))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKUStatusTierFree, ManagedClusterSKUStatusTierPaid))
}

func Test_ContainerServiceLinuxProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceLinuxProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceLinuxProfileStatusARM, ContainerServiceLinuxProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceLinuxProfileStatusARM runs a test to see if a specific instance of ContainerServiceLinuxProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceLinuxProfileStatusARM(subject ContainerServiceLinuxProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceLinuxProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceLinuxProfile_StatusARM instances for property testing - lazily instantiated by
// ContainerServiceLinuxProfileStatusARMGenerator()
var containerServiceLinuxProfileStatusARMGenerator gopter.Gen

// ContainerServiceLinuxProfileStatusARMGenerator returns a generator of ContainerServiceLinuxProfile_StatusARM instances for property testing.
// We first initialize containerServiceLinuxProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceLinuxProfileStatusARMGenerator() gopter.Gen {
	if containerServiceLinuxProfileStatusARMGenerator != nil {
		return containerServiceLinuxProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfileStatusARM(generators)
	containerServiceLinuxProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceLinuxProfileStatusARM(generators)
	containerServiceLinuxProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_StatusARM{}), generators)

	return containerServiceLinuxProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceLinuxProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceLinuxProfileStatusARM(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceLinuxProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceLinuxProfileStatusARM(gens map[string]gopter.Gen) {
	gens["Ssh"] = gen.PtrOf(ContainerServiceSshConfigurationStatusARMGenerator())
}

func Test_ContainerServiceNetworkProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceNetworkProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceNetworkProfileStatusARM, ContainerServiceNetworkProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceNetworkProfileStatusARM runs a test to see if a specific instance of ContainerServiceNetworkProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceNetworkProfileStatusARM(subject ContainerServiceNetworkProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceNetworkProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceNetworkProfile_StatusARM instances for property testing - lazily instantiated by
// ContainerServiceNetworkProfileStatusARMGenerator()
var containerServiceNetworkProfileStatusARMGenerator gopter.Gen

// ContainerServiceNetworkProfileStatusARMGenerator returns a generator of ContainerServiceNetworkProfile_StatusARM instances for property testing.
// We first initialize containerServiceNetworkProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceNetworkProfileStatusARMGenerator() gopter.Gen {
	if containerServiceNetworkProfileStatusARMGenerator != nil {
		return containerServiceNetworkProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfileStatusARM(generators)
	containerServiceNetworkProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceNetworkProfileStatusARM(generators)
	containerServiceNetworkProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_StatusARM{}), generators)

	return containerServiceNetworkProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceNetworkProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceNetworkProfileStatusARM(gens map[string]gopter.Gen) {
	gens["DnsServiceIP"] = gen.PtrOf(gen.AlphaString())
	gens["DockerBridgeCidr"] = gen.PtrOf(gen.AlphaString())
	gens["LoadBalancerSku"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileStatusLoadBalancerSkuBasic, ContainerServiceNetworkProfileStatusLoadBalancerSkuStandard))
	gens["NetworkMode"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileStatusNetworkModeBridge, ContainerServiceNetworkProfileStatusNetworkModeTransparent))
	gens["NetworkPlugin"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileStatusNetworkPluginAzure, ContainerServiceNetworkProfileStatusNetworkPluginKubenet))
	gens["NetworkPolicy"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileStatusNetworkPolicyAzure, ContainerServiceNetworkProfileStatusNetworkPolicyCalico))
	gens["OutboundType"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileStatusOutboundTypeLoadBalancer, ContainerServiceNetworkProfileStatusOutboundTypeUserDefinedRouting))
	gens["PodCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceNetworkProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceNetworkProfileStatusARM(gens map[string]gopter.Gen) {
	gens["LoadBalancerProfile"] = gen.PtrOf(ManagedClusterLoadBalancerProfileStatusARMGenerator())
}

func Test_ManagedClusterAADProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAADProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAADProfileStatusARM, ManagedClusterAADProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAADProfileStatusARM runs a test to see if a specific instance of ManagedClusterAADProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAADProfileStatusARM(subject ManagedClusterAADProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAADProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAADProfile_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterAADProfileStatusARMGenerator()
var managedClusterAADProfileStatusARMGenerator gopter.Gen

// ManagedClusterAADProfileStatusARMGenerator returns a generator of ManagedClusterAADProfile_StatusARM instances for property testing.
func ManagedClusterAADProfileStatusARMGenerator() gopter.Gen {
	if managedClusterAADProfileStatusARMGenerator != nil {
		return managedClusterAADProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAADProfileStatusARM(generators)
	managedClusterAADProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAADProfile_StatusARM{}), generators)

	return managedClusterAADProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAADProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAADProfileStatusARM(gens map[string]gopter.Gen) {
	gens["AdminGroupObjectIDs"] = gen.SliceOf(gen.AlphaString())
	gens["ClientAppID"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAzureRBAC"] = gen.PtrOf(gen.Bool())
	gens["Managed"] = gen.PtrOf(gen.Bool())
	gens["ServerAppID"] = gen.PtrOf(gen.AlphaString())
	gens["ServerAppSecret"] = gen.PtrOf(gen.AlphaString())
	gens["TenantID"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAPIServerAccessProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAPIServerAccessProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAPIServerAccessProfileStatusARM, ManagedClusterAPIServerAccessProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAPIServerAccessProfileStatusARM runs a test to see if a specific instance of ManagedClusterAPIServerAccessProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAPIServerAccessProfileStatusARM(subject ManagedClusterAPIServerAccessProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAPIServerAccessProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAPIServerAccessProfile_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterAPIServerAccessProfileStatusARMGenerator()
var managedClusterAPIServerAccessProfileStatusARMGenerator gopter.Gen

// ManagedClusterAPIServerAccessProfileStatusARMGenerator returns a generator of ManagedClusterAPIServerAccessProfile_StatusARM instances for property testing.
func ManagedClusterAPIServerAccessProfileStatusARMGenerator() gopter.Gen {
	if managedClusterAPIServerAccessProfileStatusARMGenerator != nil {
		return managedClusterAPIServerAccessProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfileStatusARM(generators)
	managedClusterAPIServerAccessProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAPIServerAccessProfile_StatusARM{}), generators)

	return managedClusterAPIServerAccessProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfileStatusARM(gens map[string]gopter.Gen) {
	gens["AuthorizedIPRanges"] = gen.SliceOf(gen.AlphaString())
	gens["EnablePrivateCluster"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateClusterPublicFQDN"] = gen.PtrOf(gen.Bool())
	gens["PrivateDNSZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAgentPoolProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfileStatusARM, ManagedClusterAgentPoolProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfileStatusARM runs a test to see if a specific instance of ManagedClusterAgentPoolProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfileStatusARM(subject ManagedClusterAgentPoolProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfile_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterAgentPoolProfileStatusARMGenerator()
var managedClusterAgentPoolProfileStatusARMGenerator gopter.Gen

// ManagedClusterAgentPoolProfileStatusARMGenerator returns a generator of ManagedClusterAgentPoolProfile_StatusARM instances for property testing.
// We first initialize managedClusterAgentPoolProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfileStatusARMGenerator() gopter.Gen {
	if managedClusterAgentPoolProfileStatusARMGenerator != nil {
		return managedClusterAgentPoolProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileStatusARM(generators)
	managedClusterAgentPoolProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileStatusARM(generators)
	managedClusterAgentPoolProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_StatusARM{}), generators)

	return managedClusterAgentPoolProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileStatusARM(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.OneConstOf(
		GPUInstanceProfile_StatusMIG1G,
		GPUInstanceProfile_StatusMIG2G,
		GPUInstanceProfile_StatusMIG3G,
		GPUInstanceProfile_StatusMIG4G,
		GPUInstanceProfile_StatusMIG7G))
	gens["KubeletDiskType"] = gen.PtrOf(gen.OneConstOf(KubeletDiskType_StatusOS, KubeletDiskType_StatusTemporary))
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(AgentPoolMode_StatusSystem, AgentPoolMode_StatusUser))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NodeImageVersion"] = gen.PtrOf(gen.AlphaString())
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodePublicIPPrefixID"] = gen.PtrOf(gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsDiskType"] = gen.PtrOf(gen.OneConstOf(OSDiskType_StatusEphemeral, OSDiskType_StatusManaged))
	gens["OsSKU"] = gen.PtrOf(gen.OneConstOf(OSSKU_StatusCBLMariner, OSSKU_StatusUbuntu))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(OSType_StatusLinux, OSType_StatusWindows))
	gens["PodSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.OneConstOf(ScaleSetEvictionPolicy_StatusDeallocate, ScaleSetEvictionPolicy_StatusDelete))
	gens["ScaleSetPriority"] = gen.PtrOf(gen.OneConstOf(ScaleSetPriority_StatusRegular, ScaleSetPriority_StatusSpot))
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(AgentPoolType_StatusAvailabilitySet, AgentPoolType_StatusVirtualMachineScaleSets))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
	gens["VnetSubnetID"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileStatusARM(gens map[string]gopter.Gen) {
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfigStatusARMGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfigStatusARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerStateStatusARMGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettingsStatusARMGenerator())
}

func Test_ManagedClusterAutoUpgradeProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAutoUpgradeProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAutoUpgradeProfileStatusARM, ManagedClusterAutoUpgradeProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAutoUpgradeProfileStatusARM runs a test to see if a specific instance of ManagedClusterAutoUpgradeProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAutoUpgradeProfileStatusARM(subject ManagedClusterAutoUpgradeProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAutoUpgradeProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAutoUpgradeProfile_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterAutoUpgradeProfileStatusARMGenerator()
var managedClusterAutoUpgradeProfileStatusARMGenerator gopter.Gen

// ManagedClusterAutoUpgradeProfileStatusARMGenerator returns a generator of ManagedClusterAutoUpgradeProfile_StatusARM instances for property testing.
func ManagedClusterAutoUpgradeProfileStatusARMGenerator() gopter.Gen {
	if managedClusterAutoUpgradeProfileStatusARMGenerator != nil {
		return managedClusterAutoUpgradeProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfileStatusARM(generators)
	managedClusterAutoUpgradeProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAutoUpgradeProfile_StatusARM{}), generators)

	return managedClusterAutoUpgradeProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfileStatusARM(gens map[string]gopter.Gen) {
	gens["UpgradeChannel"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterAutoUpgradeProfileStatusUpgradeChannelNodeImage,
		ManagedClusterAutoUpgradeProfileStatusUpgradeChannelNone,
		ManagedClusterAutoUpgradeProfileStatusUpgradeChannelPatch,
		ManagedClusterAutoUpgradeProfileStatusUpgradeChannelRapid,
		ManagedClusterAutoUpgradeProfileStatusUpgradeChannelStable))
}

func Test_ManagedClusterHTTPProxyConfig_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterHTTPProxyConfig_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterHTTPProxyConfigStatusARM, ManagedClusterHTTPProxyConfigStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterHTTPProxyConfigStatusARM runs a test to see if a specific instance of ManagedClusterHTTPProxyConfig_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterHTTPProxyConfigStatusARM(subject ManagedClusterHTTPProxyConfig_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterHTTPProxyConfig_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterHTTPProxyConfig_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterHTTPProxyConfigStatusARMGenerator()
var managedClusterHTTPProxyConfigStatusARMGenerator gopter.Gen

// ManagedClusterHTTPProxyConfigStatusARMGenerator returns a generator of ManagedClusterHTTPProxyConfig_StatusARM instances for property testing.
func ManagedClusterHTTPProxyConfigStatusARMGenerator() gopter.Gen {
	if managedClusterHTTPProxyConfigStatusARMGenerator != nil {
		return managedClusterHTTPProxyConfigStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfigStatusARM(generators)
	managedClusterHTTPProxyConfigStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterHTTPProxyConfig_StatusARM{}), generators)

	return managedClusterHTTPProxyConfigStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfigStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfigStatusARM(gens map[string]gopter.Gen) {
	gens["HttpProxy"] = gen.PtrOf(gen.AlphaString())
	gens["HttpsProxy"] = gen.PtrOf(gen.AlphaString())
	gens["NoProxy"] = gen.SliceOf(gen.AlphaString())
	gens["TrustedCa"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterIdentity_Status_UserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_Status_UserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentityStatusUserAssignedIdentitiesARM, ManagedClusterIdentityStatusUserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentityStatusUserAssignedIdentitiesARM runs a test to see if a specific instance of ManagedClusterIdentity_Status_UserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentityStatusUserAssignedIdentitiesARM(subject ManagedClusterIdentity_Status_UserAssignedIdentitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_Status_UserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_Status_UserAssignedIdentitiesARM instances for property testing - lazily
// instantiated by ManagedClusterIdentityStatusUserAssignedIdentitiesARMGenerator()
var managedClusterIdentityStatusUserAssignedIdentitiesARMGenerator gopter.Gen

// ManagedClusterIdentityStatusUserAssignedIdentitiesARMGenerator returns a generator of ManagedClusterIdentity_Status_UserAssignedIdentitiesARM instances for property testing.
func ManagedClusterIdentityStatusUserAssignedIdentitiesARMGenerator() gopter.Gen {
	if managedClusterIdentityStatusUserAssignedIdentitiesARMGenerator != nil {
		return managedClusterIdentityStatusUserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentityStatusUserAssignedIdentitiesARM(generators)
	managedClusterIdentityStatusUserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_Status_UserAssignedIdentitiesARM{}), generators)

	return managedClusterIdentityStatusUserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentityStatusUserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentityStatusUserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProfileStatusARM, ManagedClusterPodIdentityProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProfileStatusARM runs a test to see if a specific instance of ManagedClusterPodIdentityProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProfileStatusARM(subject ManagedClusterPodIdentityProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProfile_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentityProfileStatusARMGenerator()
var managedClusterPodIdentityProfileStatusARMGenerator gopter.Gen

// ManagedClusterPodIdentityProfileStatusARMGenerator returns a generator of ManagedClusterPodIdentityProfile_StatusARM instances for property testing.
// We first initialize managedClusterPodIdentityProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProfileStatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProfileStatusARMGenerator != nil {
		return managedClusterPodIdentityProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfileStatusARM(generators)
	managedClusterPodIdentityProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfileStatusARM(generators)
	managedClusterPodIdentityProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_StatusARM{}), generators)

	return managedClusterPodIdentityProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfileStatusARM(gens map[string]gopter.Gen) {
	gens["AllowNetworkPluginKubenet"] = gen.PtrOf(gen.Bool())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfileStatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.SliceOf(ManagedClusterPodIdentityStatusARMGenerator())
	gens["UserAssignedIdentityExceptions"] = gen.SliceOf(ManagedClusterPodIdentityExceptionStatusARMGenerator())
}

func Test_ManagedClusterProperties_Status_AutoScalerProfileARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_Status_AutoScalerProfileARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPropertiesStatusAutoScalerProfileARM, ManagedClusterPropertiesStatusAutoScalerProfileARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPropertiesStatusAutoScalerProfileARM runs a test to see if a specific instance of ManagedClusterProperties_Status_AutoScalerProfileARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPropertiesStatusAutoScalerProfileARM(subject ManagedClusterProperties_Status_AutoScalerProfileARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_Status_AutoScalerProfileARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_Status_AutoScalerProfileARM instances for property testing - lazily
// instantiated by ManagedClusterPropertiesStatusAutoScalerProfileARMGenerator()
var managedClusterPropertiesStatusAutoScalerProfileARMGenerator gopter.Gen

// ManagedClusterPropertiesStatusAutoScalerProfileARMGenerator returns a generator of ManagedClusterProperties_Status_AutoScalerProfileARM instances for property testing.
func ManagedClusterPropertiesStatusAutoScalerProfileARMGenerator() gopter.Gen {
	if managedClusterPropertiesStatusAutoScalerProfileARMGenerator != nil {
		return managedClusterPropertiesStatusAutoScalerProfileARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPropertiesStatusAutoScalerProfileARM(generators)
	managedClusterPropertiesStatusAutoScalerProfileARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_Status_AutoScalerProfileARM{}), generators)

	return managedClusterPropertiesStatusAutoScalerProfileARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPropertiesStatusAutoScalerProfileARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPropertiesStatusAutoScalerProfileARM(gens map[string]gopter.Gen) {
	gens["BalanceSimilarNodeGroups"] = gen.PtrOf(gen.AlphaString())
	gens["Expander"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterPropertiesStatusAutoScalerProfileExpanderLeastWaste,
		ManagedClusterPropertiesStatusAutoScalerProfileExpanderMostPods,
		ManagedClusterPropertiesStatusAutoScalerProfileExpanderPriority,
		ManagedClusterPropertiesStatusAutoScalerProfileExpanderRandom))
	gens["MaxEmptyBulkDelete"] = gen.PtrOf(gen.AlphaString())
	gens["MaxGracefulTerminationSec"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNodeProvisionTime"] = gen.PtrOf(gen.AlphaString())
	gens["MaxTotalUnreadyPercentage"] = gen.PtrOf(gen.AlphaString())
	gens["NewPodScaleUpDelay"] = gen.PtrOf(gen.AlphaString())
	gens["OkTotalUnreadyCount"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterAdd"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterDelete"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterFailure"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnneededTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnreadyTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUtilizationThreshold"] = gen.PtrOf(gen.AlphaString())
	gens["ScanInterval"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithLocalStorage"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithSystemPods"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterServicePrincipalProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterServicePrincipalProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterServicePrincipalProfileStatusARM, ManagedClusterServicePrincipalProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterServicePrincipalProfileStatusARM runs a test to see if a specific instance of ManagedClusterServicePrincipalProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterServicePrincipalProfileStatusARM(subject ManagedClusterServicePrincipalProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterServicePrincipalProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterServicePrincipalProfile_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterServicePrincipalProfileStatusARMGenerator()
var managedClusterServicePrincipalProfileStatusARMGenerator gopter.Gen

// ManagedClusterServicePrincipalProfileStatusARMGenerator returns a generator of ManagedClusterServicePrincipalProfile_StatusARM instances for property testing.
func ManagedClusterServicePrincipalProfileStatusARMGenerator() gopter.Gen {
	if managedClusterServicePrincipalProfileStatusARMGenerator != nil {
		return managedClusterServicePrincipalProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfileStatusARM(generators)
	managedClusterServicePrincipalProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterServicePrincipalProfile_StatusARM{}), generators)

	return managedClusterServicePrincipalProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfileStatusARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterWindowsProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterWindowsProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterWindowsProfileStatusARM, ManagedClusterWindowsProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterWindowsProfileStatusARM runs a test to see if a specific instance of ManagedClusterWindowsProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterWindowsProfileStatusARM(subject ManagedClusterWindowsProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterWindowsProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterWindowsProfile_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterWindowsProfileStatusARMGenerator()
var managedClusterWindowsProfileStatusARMGenerator gopter.Gen

// ManagedClusterWindowsProfileStatusARMGenerator returns a generator of ManagedClusterWindowsProfile_StatusARM instances for property testing.
func ManagedClusterWindowsProfileStatusARMGenerator() gopter.Gen {
	if managedClusterWindowsProfileStatusARMGenerator != nil {
		return managedClusterWindowsProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterWindowsProfileStatusARM(generators)
	managedClusterWindowsProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWindowsProfile_StatusARM{}), generators)

	return managedClusterWindowsProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterWindowsProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterWindowsProfileStatusARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["EnableCSIProxy"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.OneConstOf(ManagedClusterWindowsProfileStatusLicenseTypeNone, ManagedClusterWindowsProfileStatusLicenseTypeWindowsServer))
}

func Test_PrivateLinkResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkResourceStatusARM, PrivateLinkResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkResourceStatusARM runs a test to see if a specific instance of PrivateLinkResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkResourceStatusARM(subject PrivateLinkResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkResource_StatusARM instances for property testing - lazily instantiated by
// PrivateLinkResourceStatusARMGenerator()
var privateLinkResourceStatusARMGenerator gopter.Gen

// PrivateLinkResourceStatusARMGenerator returns a generator of PrivateLinkResource_StatusARM instances for property testing.
func PrivateLinkResourceStatusARMGenerator() gopter.Gen {
	if privateLinkResourceStatusARMGenerator != nil {
		return privateLinkResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkResourceStatusARM(generators)
	privateLinkResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkResource_StatusARM{}), generators)

	return privateLinkResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkResourceStatusARM(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceID"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMembers"] = gen.SliceOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerServiceSshConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshConfigurationStatusARM, ContainerServiceSshConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshConfigurationStatusARM runs a test to see if a specific instance of ContainerServiceSshConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshConfigurationStatusARM(subject ContainerServiceSshConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshConfiguration_StatusARM instances for property testing - lazily instantiated by
// ContainerServiceSshConfigurationStatusARMGenerator()
var containerServiceSshConfigurationStatusARMGenerator gopter.Gen

// ContainerServiceSshConfigurationStatusARMGenerator returns a generator of ContainerServiceSshConfiguration_StatusARM instances for property testing.
func ContainerServiceSshConfigurationStatusARMGenerator() gopter.Gen {
	if containerServiceSshConfigurationStatusARMGenerator != nil {
		return containerServiceSshConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerServiceSshConfigurationStatusARM(generators)
	containerServiceSshConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshConfiguration_StatusARM{}), generators)

	return containerServiceSshConfigurationStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForContainerServiceSshConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceSshConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["PublicKeys"] = gen.SliceOf(ContainerServiceSshPublicKeyStatusARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusARM, ManagedClusterLoadBalancerProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusARM(subject ManagedClusterLoadBalancerProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterLoadBalancerProfileStatusARMGenerator()
var managedClusterLoadBalancerProfileStatusARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfileStatusARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_StatusARM instances for property testing.
// We first initialize managedClusterLoadBalancerProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterLoadBalancerProfileStatusARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfileStatusARMGenerator != nil {
		return managedClusterLoadBalancerProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusARM(generators)
	managedClusterLoadBalancerProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusARM(generators)
	managedClusterLoadBalancerProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_StatusARM{}), generators)

	return managedClusterLoadBalancerProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusARM(gens map[string]gopter.Gen) {
	gens["AllocatedOutboundPorts"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusARM(gens map[string]gopter.Gen) {
	gens["EffectiveOutboundIPs"] = gen.SliceOf(ResourceReferenceStatusARMGenerator())
	gens["ManagedOutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator())
	gens["OutboundIPPrefixes"] = gen.PtrOf(ManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator())
	gens["OutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator())
}

func Test_ManagedClusterPodIdentityException_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityException_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityExceptionStatusARM, ManagedClusterPodIdentityExceptionStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityExceptionStatusARM runs a test to see if a specific instance of ManagedClusterPodIdentityException_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityExceptionStatusARM(subject ManagedClusterPodIdentityException_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityException_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityException_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentityExceptionStatusARMGenerator()
var managedClusterPodIdentityExceptionStatusARMGenerator gopter.Gen

// ManagedClusterPodIdentityExceptionStatusARMGenerator returns a generator of ManagedClusterPodIdentityException_StatusARM instances for property testing.
func ManagedClusterPodIdentityExceptionStatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentityExceptionStatusARMGenerator != nil {
		return managedClusterPodIdentityExceptionStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityExceptionStatusARM(generators)
	managedClusterPodIdentityExceptionStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityException_StatusARM{}), generators)

	return managedClusterPodIdentityExceptionStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityExceptionStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityExceptionStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["PodLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_ManagedClusterPodIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityStatusARM, ManagedClusterPodIdentityStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityStatusARM runs a test to see if a specific instance of ManagedClusterPodIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityStatusARM(subject ManagedClusterPodIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_StatusARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentityStatusARMGenerator()
var managedClusterPodIdentityStatusARMGenerator gopter.Gen

// ManagedClusterPodIdentityStatusARMGenerator returns a generator of ManagedClusterPodIdentity_StatusARM instances for property testing.
// We first initialize managedClusterPodIdentityStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityStatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentityStatusARMGenerator != nil {
		return managedClusterPodIdentityStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityStatusARM(generators)
	managedClusterPodIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityStatusARM(generators)
	managedClusterPodIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_StatusARM{}), generators)

	return managedClusterPodIdentityStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["BindingSelector"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterPodIdentityStatusProvisioningStateAssigned,
		ManagedClusterPodIdentityStatusProvisioningStateDeleting,
		ManagedClusterPodIdentityStatusProvisioningStateFailed,
		ManagedClusterPodIdentityStatusProvisioningStateUpdating))
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(UserAssignedIdentityStatusARMGenerator())
	gens["ProvisioningInfo"] = gen.PtrOf(ManagedClusterPodIdentityStatusProvisioningInfoARMGenerator())
}

func Test_ContainerServiceSshPublicKey_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshPublicKey_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshPublicKeyStatusARM, ContainerServiceSshPublicKeyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshPublicKeyStatusARM runs a test to see if a specific instance of ContainerServiceSshPublicKey_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshPublicKeyStatusARM(subject ContainerServiceSshPublicKey_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshPublicKey_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshPublicKey_StatusARM instances for property testing - lazily instantiated by
// ContainerServiceSshPublicKeyStatusARMGenerator()
var containerServiceSshPublicKeyStatusARMGenerator gopter.Gen

// ContainerServiceSshPublicKeyStatusARMGenerator returns a generator of ContainerServiceSshPublicKey_StatusARM instances for property testing.
func ContainerServiceSshPublicKeyStatusARMGenerator() gopter.Gen {
	if containerServiceSshPublicKeyStatusARMGenerator != nil {
		return containerServiceSshPublicKeyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceSshPublicKeyStatusARM(generators)
	containerServiceSshPublicKeyStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshPublicKey_StatusARM{}), generators)

	return containerServiceSshPublicKeyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceSshPublicKeyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceSshPublicKeyStatusARM(gens map[string]gopter.Gen) {
	gens["KeyData"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARM, ManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARM(subject ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator()
var managedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM instances for property testing.
func ManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator != nil {
		return managedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARM(generators)
	managedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM{}), generators)

	return managedClusterLoadBalancerProfileStatusManagedOutboundIPsARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusManagedOutboundIPsARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
}

func Test_ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARM, ManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARM(subject ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator()
var managedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM instances for property testing.
func ManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator != nil {
		return managedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARM(generators)
	managedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM{}), generators)

	return managedClusterLoadBalancerProfileStatusOutboundIPPrefixesARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusOutboundIPPrefixesARM(gens map[string]gopter.Gen) {
	gens["PublicIPPrefixes"] = gen.SliceOf(ResourceReferenceStatusARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusOutboundIPsARM, ManagedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusOutboundIPsARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfileStatusOutboundIPsARM(subject ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator()
var managedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM instances for property testing.
func ManagedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator != nil {
		return managedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusOutboundIPsARM(generators)
	managedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM{}), generators)

	return managedClusterLoadBalancerProfileStatusOutboundIPsARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusOutboundIPsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileStatusOutboundIPsARM(gens map[string]gopter.Gen) {
	gens["PublicIPs"] = gen.SliceOf(ResourceReferenceStatusARMGenerator())
}

func Test_ManagedClusterPodIdentity_Status_ProvisioningInfoARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_Status_ProvisioningInfoARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityStatusProvisioningInfoARM, ManagedClusterPodIdentityStatusProvisioningInfoARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityStatusProvisioningInfoARM runs a test to see if a specific instance of ManagedClusterPodIdentity_Status_ProvisioningInfoARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityStatusProvisioningInfoARM(subject ManagedClusterPodIdentity_Status_ProvisioningInfoARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_Status_ProvisioningInfoARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_Status_ProvisioningInfoARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentityStatusProvisioningInfoARMGenerator()
var managedClusterPodIdentityStatusProvisioningInfoARMGenerator gopter.Gen

// ManagedClusterPodIdentityStatusProvisioningInfoARMGenerator returns a generator of ManagedClusterPodIdentity_Status_ProvisioningInfoARM instances for property testing.
func ManagedClusterPodIdentityStatusProvisioningInfoARMGenerator() gopter.Gen {
	if managedClusterPodIdentityStatusProvisioningInfoARMGenerator != nil {
		return managedClusterPodIdentityStatusProvisioningInfoARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityStatusProvisioningInfoARM(generators)
	managedClusterPodIdentityStatusProvisioningInfoARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_Status_ProvisioningInfoARM{}), generators)

	return managedClusterPodIdentityStatusProvisioningInfoARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityStatusProvisioningInfoARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityStatusProvisioningInfoARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningErrorStatusARMGenerator())
}

func Test_ResourceReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReferenceStatusARM, ResourceReferenceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReferenceStatusARM runs a test to see if a specific instance of ResourceReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReferenceStatusARM(subject ResourceReference_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_StatusARM instances for property testing - lazily instantiated by
// ResourceReferenceStatusARMGenerator()
var resourceReferenceStatusARMGenerator gopter.Gen

// ResourceReferenceStatusARMGenerator returns a generator of ResourceReference_StatusARM instances for property testing.
func ResourceReferenceStatusARMGenerator() gopter.Gen {
	if resourceReferenceStatusARMGenerator != nil {
		return resourceReferenceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReferenceStatusARM(generators)
	resourceReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_StatusARM{}), generators)

	return resourceReferenceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReferenceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentityStatusARM, UserAssignedIdentityStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentityStatusARM runs a test to see if a specific instance of UserAssignedIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentityStatusARM(subject UserAssignedIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_StatusARM instances for property testing - lazily instantiated by
// UserAssignedIdentityStatusARMGenerator()
var userAssignedIdentityStatusARMGenerator gopter.Gen

// UserAssignedIdentityStatusARMGenerator returns a generator of UserAssignedIdentity_StatusARM instances for property testing.
func UserAssignedIdentityStatusARMGenerator() gopter.Gen {
	if userAssignedIdentityStatusARMGenerator != nil {
		return userAssignedIdentityStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentityStatusARM(generators)
	userAssignedIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_StatusARM{}), generators)

	return userAssignedIdentityStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentityStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProvisioningError_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningError_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorStatusARM, ManagedClusterPodIdentityProvisioningErrorStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorStatusARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningError_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorStatusARM(subject ManagedClusterPodIdentityProvisioningError_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningError_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningError_StatusARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentityProvisioningErrorStatusARMGenerator()
var managedClusterPodIdentityProvisioningErrorStatusARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorStatusARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningError_StatusARM instances for property testing.
func ManagedClusterPodIdentityProvisioningErrorStatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorStatusARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorStatusARM(generators)
	managedClusterPodIdentityProvisioningErrorStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningError_StatusARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorStatusARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodyStatusARM, ManagedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodyStatusARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodyStatusARM(subject ManagedClusterPodIdentityProvisioningErrorBody_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_StatusARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator()
var managedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_StatusARM instances for property testing.
// We first initialize managedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusARM(generators)
	managedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusARM(generators)
	managedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_StatusARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBodyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusARM(gens map[string]gopter.Gen) {
	gens["Details"] = gen.SliceOf(ManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARM, ManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARM(subject ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM instances for property testing -
// lazily instantiated by ManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator()
var managedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM instances for property testing.
func ManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARM(generators)
	managedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodyStatusUnrolledARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}
