// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedCluster_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedCluster_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedCluster_StatusARM, ManagedCluster_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedCluster_StatusARM runs a test to see if a specific instance of ManagedCluster_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedCluster_StatusARM(subject ManagedCluster_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedCluster_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedCluster_StatusARM instances for property testing - lazily instantiated by
//ManagedCluster_StatusARMGenerator()
var managedCluster_statusARMGenerator gopter.Gen

// ManagedCluster_StatusARMGenerator returns a generator of ManagedCluster_StatusARM instances for property testing.
// We first initialize managedCluster_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedCluster_StatusARMGenerator() gopter.Gen {
	if managedCluster_statusARMGenerator != nil {
		return managedCluster_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedCluster_StatusARM(generators)
	managedCluster_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedCluster_StatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedCluster_StatusARM(generators)
	managedCluster_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_StatusARM{}), generators)

	return managedCluster_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedCluster_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedCluster_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedCluster_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedCluster_StatusARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusARMGenerator())
	gens["Identity"] = gen.PtrOf(ManagedClusterIdentity_StatusARMGenerator())
	gens["Properties"] = gen.PtrOf(ManagedClusterProperties_StatusARMGenerator())
	gens["Sku"] = gen.PtrOf(ManagedClusterSKU_StatusARMGenerator())
}

func Test_ExtendedLocation_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_StatusARM, ExtendedLocation_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_StatusARM runs a test to see if a specific instance of ExtendedLocation_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_StatusARM(subject ExtendedLocation_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_StatusARM instances for property testing - lazily instantiated by
//ExtendedLocation_StatusARMGenerator()
var extendedLocation_statusARMGenerator gopter.Gen

// ExtendedLocation_StatusARMGenerator returns a generator of ExtendedLocation_StatusARM instances for property testing.
func ExtendedLocation_StatusARMGenerator() gopter.Gen {
	if extendedLocation_statusARMGenerator != nil {
		return extendedLocation_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_StatusARM(generators)
	extendedLocation_statusARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_StatusARM{}), generators)

	return extendedLocation_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_StatusEdgeZone))
}

func Test_ManagedClusterIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentity_StatusARM, ManagedClusterIdentity_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentity_StatusARM runs a test to see if a specific instance of ManagedClusterIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentity_StatusARM(subject ManagedClusterIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterIdentity_StatusARMGenerator()
var managedClusterIdentity_statusARMGenerator gopter.Gen

// ManagedClusterIdentity_StatusARMGenerator returns a generator of ManagedClusterIdentity_StatusARM instances for property testing.
// We first initialize managedClusterIdentity_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterIdentity_StatusARMGenerator() gopter.Gen {
	if managedClusterIdentity_statusARMGenerator != nil {
		return managedClusterIdentity_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_StatusARM(generators)
	managedClusterIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_StatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterIdentity_StatusARM(generators)
	managedClusterIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_StatusARM{}), generators)

	return managedClusterIdentity_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentity_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedClusterIdentity_Type_StatusNone, ManagedClusterIdentity_Type_StatusSystemAssigned, ManagedClusterIdentity_Type_StatusUserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedClusterIdentity_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedClusterIdentity_UserAssignedIdentities_StatusARMGenerator())
}

func Test_ManagedClusterProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterProperties_StatusARM, ManagedClusterProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterProperties_StatusARM runs a test to see if a specific instance of ManagedClusterProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterProperties_StatusARM(subject ManagedClusterProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterProperties_StatusARMGenerator()
var managedClusterProperties_statusARMGenerator gopter.Gen

// ManagedClusterProperties_StatusARMGenerator returns a generator of ManagedClusterProperties_StatusARM instances for property testing.
// We first initialize managedClusterProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterProperties_StatusARMGenerator() gopter.Gen {
	if managedClusterProperties_statusARMGenerator != nil {
		return managedClusterProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_StatusARM(generators)
	managedClusterProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterProperties_StatusARM(generators)
	managedClusterProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_StatusARM{}), generators)

	return managedClusterProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["AzurePortalFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAccounts"] = gen.PtrOf(gen.Bool())
	gens["DiskEncryptionSetID"] = gen.PtrOf(gen.AlphaString())
	gens["DnsPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["EnablePodSecurityPolicy"] = gen.PtrOf(gen.Bool())
	gens["EnableRBAC"] = gen.PtrOf(gen.Bool())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["FqdnSubdomain"] = gen.PtrOf(gen.AlphaString())
	gens["KubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgentPools"] = gen.PtrOf(gen.Int())
	gens["NodeResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["AadProfile"] = gen.PtrOf(ManagedClusterAADProfile_StatusARMGenerator())
	gens["AgentPoolProfiles"] = gen.SliceOf(ManagedClusterAgentPoolProfile_StatusARMGenerator())
	gens["ApiServerAccessProfile"] = gen.PtrOf(ManagedClusterAPIServerAccessProfile_StatusARMGenerator())
	gens["AutoScalerProfile"] = gen.PtrOf(ManagedClusterProperties_AutoScalerProfile_StatusARMGenerator())
	gens["AutoUpgradeProfile"] = gen.PtrOf(ManagedClusterAutoUpgradeProfile_StatusARMGenerator())
	gens["HttpProxyConfig"] = gen.PtrOf(ManagedClusterHTTPProxyConfig_StatusARMGenerator())
	gens["LinuxProfile"] = gen.PtrOf(ContainerServiceLinuxProfile_StatusARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(ContainerServiceNetworkProfile_StatusARMGenerator())
	gens["PodIdentityProfile"] = gen.PtrOf(ManagedClusterPodIdentityProfile_StatusARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerState_StatusARMGenerator())
	gens["PrivateLinkResources"] = gen.SliceOf(PrivateLinkResource_StatusARMGenerator())
	gens["ServicePrincipalProfile"] = gen.PtrOf(ManagedClusterServicePrincipalProfile_StatusARMGenerator())
	gens["WindowsProfile"] = gen.PtrOf(ManagedClusterWindowsProfile_StatusARMGenerator())
}

func Test_ManagedClusterSKU_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSKU_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSKU_StatusARM, ManagedClusterSKU_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSKU_StatusARM runs a test to see if a specific instance of ManagedClusterSKU_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSKU_StatusARM(subject ManagedClusterSKU_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSKU_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSKU_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterSKU_StatusARMGenerator()
var managedClusterSKU_statusARMGenerator gopter.Gen

// ManagedClusterSKU_StatusARMGenerator returns a generator of ManagedClusterSKU_StatusARM instances for property testing.
func ManagedClusterSKU_StatusARMGenerator() gopter.Gen {
	if managedClusterSKU_statusARMGenerator != nil {
		return managedClusterSKU_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSKU_StatusARM(generators)
	managedClusterSKU_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSKU_StatusARM{}), generators)

	return managedClusterSKU_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSKU_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSKU_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKU_Name_StatusBasic))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKU_Tier_StatusFree, ManagedClusterSKU_Tier_StatusPaid))
}

func Test_ContainerServiceLinuxProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceLinuxProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceLinuxProfile_StatusARM, ContainerServiceLinuxProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceLinuxProfile_StatusARM runs a test to see if a specific instance of ContainerServiceLinuxProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceLinuxProfile_StatusARM(subject ContainerServiceLinuxProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceLinuxProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceLinuxProfile_StatusARM instances for property testing - lazily instantiated by
//ContainerServiceLinuxProfile_StatusARMGenerator()
var containerServiceLinuxProfile_statusARMGenerator gopter.Gen

// ContainerServiceLinuxProfile_StatusARMGenerator returns a generator of ContainerServiceLinuxProfile_StatusARM instances for property testing.
// We first initialize containerServiceLinuxProfile_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceLinuxProfile_StatusARMGenerator() gopter.Gen {
	if containerServiceLinuxProfile_statusARMGenerator != nil {
		return containerServiceLinuxProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_StatusARM(generators)
	containerServiceLinuxProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_StatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_StatusARM(generators)
	containerServiceLinuxProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_StatusARM{}), generators)

	return containerServiceLinuxProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["Ssh"] = ContainerServiceSshConfiguration_StatusARMGenerator()
}

func Test_ContainerServiceNetworkProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceNetworkProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceNetworkProfile_StatusARM, ContainerServiceNetworkProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceNetworkProfile_StatusARM runs a test to see if a specific instance of ContainerServiceNetworkProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceNetworkProfile_StatusARM(subject ContainerServiceNetworkProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceNetworkProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceNetworkProfile_StatusARM instances for property testing - lazily instantiated by
//ContainerServiceNetworkProfile_StatusARMGenerator()
var containerServiceNetworkProfile_statusARMGenerator gopter.Gen

// ContainerServiceNetworkProfile_StatusARMGenerator returns a generator of ContainerServiceNetworkProfile_StatusARM instances for property testing.
// We first initialize containerServiceNetworkProfile_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceNetworkProfile_StatusARMGenerator() gopter.Gen {
	if containerServiceNetworkProfile_statusARMGenerator != nil {
		return containerServiceNetworkProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_StatusARM(generators)
	containerServiceNetworkProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_StatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_StatusARM(generators)
	containerServiceNetworkProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_StatusARM{}), generators)

	return containerServiceNetworkProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["DnsServiceIP"] = gen.PtrOf(gen.AlphaString())
	gens["DockerBridgeCidr"] = gen.PtrOf(gen.AlphaString())
	gens["LoadBalancerSku"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_LoadBalancerSku_StatusBasic, ContainerServiceNetworkProfile_LoadBalancerSku_StatusStandard))
	gens["NetworkMode"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_NetworkMode_StatusBridge, ContainerServiceNetworkProfile_NetworkMode_StatusTransparent))
	gens["NetworkPlugin"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_NetworkPlugin_StatusAzure, ContainerServiceNetworkProfile_NetworkPlugin_StatusKubenet))
	gens["NetworkPolicy"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_NetworkPolicy_StatusAzure, ContainerServiceNetworkProfile_NetworkPolicy_StatusCalico))
	gens["OutboundType"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_OutboundType_StatusLoadBalancer, ContainerServiceNetworkProfile_OutboundType_StatusUserDefinedRouting))
	gens["PodCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["LoadBalancerProfile"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_StatusARMGenerator())
}

func Test_ManagedClusterAADProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAADProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAADProfile_StatusARM, ManagedClusterAADProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAADProfile_StatusARM runs a test to see if a specific instance of ManagedClusterAADProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAADProfile_StatusARM(subject ManagedClusterAADProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAADProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAADProfile_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterAADProfile_StatusARMGenerator()
var managedClusterAADProfile_statusARMGenerator gopter.Gen

// ManagedClusterAADProfile_StatusARMGenerator returns a generator of ManagedClusterAADProfile_StatusARM instances for property testing.
func ManagedClusterAADProfile_StatusARMGenerator() gopter.Gen {
	if managedClusterAADProfile_statusARMGenerator != nil {
		return managedClusterAADProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAADProfile_StatusARM(generators)
	managedClusterAADProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAADProfile_StatusARM{}), generators)

	return managedClusterAADProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAADProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAADProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["AdminGroupObjectIDs"] = gen.SliceOf(gen.AlphaString())
	gens["ClientAppID"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAzureRBAC"] = gen.PtrOf(gen.Bool())
	gens["Managed"] = gen.PtrOf(gen.Bool())
	gens["ServerAppID"] = gen.PtrOf(gen.AlphaString())
	gens["ServerAppSecret"] = gen.PtrOf(gen.AlphaString())
	gens["TenantID"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAPIServerAccessProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAPIServerAccessProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_StatusARM, ManagedClusterAPIServerAccessProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_StatusARM runs a test to see if a specific instance of ManagedClusterAPIServerAccessProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_StatusARM(subject ManagedClusterAPIServerAccessProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAPIServerAccessProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAPIServerAccessProfile_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterAPIServerAccessProfile_StatusARMGenerator()
var managedClusterAPIServerAccessProfile_statusARMGenerator gopter.Gen

// ManagedClusterAPIServerAccessProfile_StatusARMGenerator returns a generator of ManagedClusterAPIServerAccessProfile_StatusARM instances for property testing.
func ManagedClusterAPIServerAccessProfile_StatusARMGenerator() gopter.Gen {
	if managedClusterAPIServerAccessProfile_statusARMGenerator != nil {
		return managedClusterAPIServerAccessProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_StatusARM(generators)
	managedClusterAPIServerAccessProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAPIServerAccessProfile_StatusARM{}), generators)

	return managedClusterAPIServerAccessProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["AuthorizedIPRanges"] = gen.SliceOf(gen.AlphaString())
	gens["EnablePrivateCluster"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateClusterPublicFQDN"] = gen.PtrOf(gen.Bool())
	gens["PrivateDNSZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAgentPoolProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfile_StatusARM, ManagedClusterAgentPoolProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfile_StatusARM runs a test to see if a specific instance of ManagedClusterAgentPoolProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfile_StatusARM(subject ManagedClusterAgentPoolProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfile_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterAgentPoolProfile_StatusARMGenerator()
var managedClusterAgentPoolProfile_statusARMGenerator gopter.Gen

// ManagedClusterAgentPoolProfile_StatusARMGenerator returns a generator of ManagedClusterAgentPoolProfile_StatusARM instances for property testing.
// We first initialize managedClusterAgentPoolProfile_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfile_StatusARMGenerator() gopter.Gen {
	if managedClusterAgentPoolProfile_statusARMGenerator != nil {
		return managedClusterAgentPoolProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_StatusARM(generators)
	managedClusterAgentPoolProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_StatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_StatusARM(generators)
	managedClusterAgentPoolProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_StatusARM{}), generators)

	return managedClusterAgentPoolProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.OneConstOf(
		GPUInstanceProfile_StatusMIG1G,
		GPUInstanceProfile_StatusMIG2G,
		GPUInstanceProfile_StatusMIG3G,
		GPUInstanceProfile_StatusMIG4G,
		GPUInstanceProfile_StatusMIG7G))
	gens["KubeletDiskType"] = gen.PtrOf(gen.OneConstOf(KubeletDiskType_StatusOS, KubeletDiskType_StatusTemporary))
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(AgentPoolMode_StatusSystem, AgentPoolMode_StatusUser))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NodeImageVersion"] = gen.PtrOf(gen.AlphaString())
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodePublicIPPrefixID"] = gen.PtrOf(gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsDiskType"] = gen.PtrOf(gen.OneConstOf(OSDiskType_StatusEphemeral, OSDiskType_StatusManaged))
	gens["OsSKU"] = gen.PtrOf(gen.OneConstOf(OSSKU_StatusCBLMariner, OSSKU_StatusUbuntu))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(OSType_StatusLinux, OSType_StatusWindows))
	gens["PodSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.OneConstOf(ScaleSetEvictionPolicy_StatusDeallocate, ScaleSetEvictionPolicy_StatusDelete))
	gens["ScaleSetPriority"] = gen.PtrOf(gen.OneConstOf(ScaleSetPriority_StatusRegular, ScaleSetPriority_StatusSpot))
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(AgentPoolType_StatusAvailabilitySet, AgentPoolType_StatusVirtualMachineScaleSets))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
	gens["VnetSubnetID"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfig_StatusARMGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfig_StatusARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerState_StatusARMGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettings_StatusARMGenerator())
}

func Test_ManagedClusterAutoUpgradeProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAutoUpgradeProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_StatusARM, ManagedClusterAutoUpgradeProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_StatusARM runs a test to see if a specific instance of ManagedClusterAutoUpgradeProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_StatusARM(subject ManagedClusterAutoUpgradeProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAutoUpgradeProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAutoUpgradeProfile_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterAutoUpgradeProfile_StatusARMGenerator()
var managedClusterAutoUpgradeProfile_statusARMGenerator gopter.Gen

// ManagedClusterAutoUpgradeProfile_StatusARMGenerator returns a generator of ManagedClusterAutoUpgradeProfile_StatusARM instances for property testing.
func ManagedClusterAutoUpgradeProfile_StatusARMGenerator() gopter.Gen {
	if managedClusterAutoUpgradeProfile_statusARMGenerator != nil {
		return managedClusterAutoUpgradeProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_StatusARM(generators)
	managedClusterAutoUpgradeProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAutoUpgradeProfile_StatusARM{}), generators)

	return managedClusterAutoUpgradeProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["UpgradeChannel"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_StatusNodeImage,
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_StatusNone,
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_StatusPatch,
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_StatusRapid,
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_StatusStable))
}

func Test_ManagedClusterHTTPProxyConfig_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterHTTPProxyConfig_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterHTTPProxyConfig_StatusARM, ManagedClusterHTTPProxyConfig_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterHTTPProxyConfig_StatusARM runs a test to see if a specific instance of ManagedClusterHTTPProxyConfig_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterHTTPProxyConfig_StatusARM(subject ManagedClusterHTTPProxyConfig_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterHTTPProxyConfig_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterHTTPProxyConfig_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterHTTPProxyConfig_StatusARMGenerator()
var managedClusterHTTPProxyConfig_statusARMGenerator gopter.Gen

// ManagedClusterHTTPProxyConfig_StatusARMGenerator returns a generator of ManagedClusterHTTPProxyConfig_StatusARM instances for property testing.
func ManagedClusterHTTPProxyConfig_StatusARMGenerator() gopter.Gen {
	if managedClusterHTTPProxyConfig_statusARMGenerator != nil {
		return managedClusterHTTPProxyConfig_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_StatusARM(generators)
	managedClusterHTTPProxyConfig_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterHTTPProxyConfig_StatusARM{}), generators)

	return managedClusterHTTPProxyConfig_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_StatusARM(gens map[string]gopter.Gen) {
	gens["HttpProxy"] = gen.PtrOf(gen.AlphaString())
	gens["HttpsProxy"] = gen.PtrOf(gen.AlphaString())
	gens["NoProxy"] = gen.SliceOf(gen.AlphaString())
	gens["TrustedCa"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterIdentity_UserAssignedIdentities_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_UserAssignedIdentities_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentity_UserAssignedIdentities_StatusARM, ManagedClusterIdentity_UserAssignedIdentities_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentity_UserAssignedIdentities_StatusARM runs a test to see if a specific instance of ManagedClusterIdentity_UserAssignedIdentities_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentity_UserAssignedIdentities_StatusARM(subject ManagedClusterIdentity_UserAssignedIdentities_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_UserAssignedIdentities_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_UserAssignedIdentities_StatusARM instances for property testing - lazily
//instantiated by ManagedClusterIdentity_UserAssignedIdentities_StatusARMGenerator()
var managedClusterIdentity_userAssignedIdentities_statusARMGenerator gopter.Gen

// ManagedClusterIdentity_UserAssignedIdentities_StatusARMGenerator returns a generator of ManagedClusterIdentity_UserAssignedIdentities_StatusARM instances for property testing.
func ManagedClusterIdentity_UserAssignedIdentities_StatusARMGenerator() gopter.Gen {
	if managedClusterIdentity_userAssignedIdentities_statusARMGenerator != nil {
		return managedClusterIdentity_userAssignedIdentities_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_UserAssignedIdentities_StatusARM(generators)
	managedClusterIdentity_userAssignedIdentities_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_UserAssignedIdentities_StatusARM{}), generators)

	return managedClusterIdentity_userAssignedIdentities_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentity_UserAssignedIdentities_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentity_UserAssignedIdentities_StatusARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProfile_StatusARM, ManagedClusterPodIdentityProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProfile_StatusARM runs a test to see if a specific instance of ManagedClusterPodIdentityProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProfile_StatusARM(subject ManagedClusterPodIdentityProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProfile_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterPodIdentityProfile_StatusARMGenerator()
var managedClusterPodIdentityProfile_statusARMGenerator gopter.Gen

// ManagedClusterPodIdentityProfile_StatusARMGenerator returns a generator of ManagedClusterPodIdentityProfile_StatusARM instances for property testing.
// We first initialize managedClusterPodIdentityProfile_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProfile_StatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProfile_statusARMGenerator != nil {
		return managedClusterPodIdentityProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_StatusARM(generators)
	managedClusterPodIdentityProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_StatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_StatusARM(generators)
	managedClusterPodIdentityProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_StatusARM{}), generators)

	return managedClusterPodIdentityProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["AllowNetworkPluginKubenet"] = gen.PtrOf(gen.Bool())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.SliceOf(ManagedClusterPodIdentity_StatusARMGenerator())
	gens["UserAssignedIdentityExceptions"] = gen.SliceOf(ManagedClusterPodIdentityException_StatusARMGenerator())
}

func Test_ManagedClusterProperties_AutoScalerProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_AutoScalerProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_StatusARM, ManagedClusterProperties_AutoScalerProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_StatusARM runs a test to see if a specific instance of ManagedClusterProperties_AutoScalerProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_StatusARM(subject ManagedClusterProperties_AutoScalerProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_AutoScalerProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_AutoScalerProfile_StatusARM instances for property testing - lazily
//instantiated by ManagedClusterProperties_AutoScalerProfile_StatusARMGenerator()
var managedClusterProperties_autoScalerProfile_statusARMGenerator gopter.Gen

// ManagedClusterProperties_AutoScalerProfile_StatusARMGenerator returns a generator of ManagedClusterProperties_AutoScalerProfile_StatusARM instances for property testing.
func ManagedClusterProperties_AutoScalerProfile_StatusARMGenerator() gopter.Gen {
	if managedClusterProperties_autoScalerProfile_statusARMGenerator != nil {
		return managedClusterProperties_autoScalerProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_StatusARM(generators)
	managedClusterProperties_autoScalerProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_AutoScalerProfile_StatusARM{}), generators)

	return managedClusterProperties_autoScalerProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["BalanceSimilarNodeGroups"] = gen.PtrOf(gen.AlphaString())
	gens["Expander"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterProperties_AutoScalerProfile_Expander_StatusLeastWaste,
		ManagedClusterProperties_AutoScalerProfile_Expander_StatusMostPods,
		ManagedClusterProperties_AutoScalerProfile_Expander_StatusPriority,
		ManagedClusterProperties_AutoScalerProfile_Expander_StatusRandom))
	gens["MaxEmptyBulkDelete"] = gen.PtrOf(gen.AlphaString())
	gens["MaxGracefulTerminationSec"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNodeProvisionTime"] = gen.PtrOf(gen.AlphaString())
	gens["MaxTotalUnreadyPercentage"] = gen.PtrOf(gen.AlphaString())
	gens["NewPodScaleUpDelay"] = gen.PtrOf(gen.AlphaString())
	gens["OkTotalUnreadyCount"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterAdd"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterDelete"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterFailure"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnneededTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnreadyTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUtilizationThreshold"] = gen.PtrOf(gen.AlphaString())
	gens["ScanInterval"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithLocalStorage"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithSystemPods"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterServicePrincipalProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterServicePrincipalProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterServicePrincipalProfile_StatusARM, ManagedClusterServicePrincipalProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterServicePrincipalProfile_StatusARM runs a test to see if a specific instance of ManagedClusterServicePrincipalProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterServicePrincipalProfile_StatusARM(subject ManagedClusterServicePrincipalProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterServicePrincipalProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterServicePrincipalProfile_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterServicePrincipalProfile_StatusARMGenerator()
var managedClusterServicePrincipalProfile_statusARMGenerator gopter.Gen

// ManagedClusterServicePrincipalProfile_StatusARMGenerator returns a generator of ManagedClusterServicePrincipalProfile_StatusARM instances for property testing.
func ManagedClusterServicePrincipalProfile_StatusARMGenerator() gopter.Gen {
	if managedClusterServicePrincipalProfile_statusARMGenerator != nil {
		return managedClusterServicePrincipalProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_StatusARM(generators)
	managedClusterServicePrincipalProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterServicePrincipalProfile_StatusARM{}), generators)

	return managedClusterServicePrincipalProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.AlphaString()
	gens["Secret"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterWindowsProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterWindowsProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterWindowsProfile_StatusARM, ManagedClusterWindowsProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterWindowsProfile_StatusARM runs a test to see if a specific instance of ManagedClusterWindowsProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterWindowsProfile_StatusARM(subject ManagedClusterWindowsProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterWindowsProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterWindowsProfile_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterWindowsProfile_StatusARMGenerator()
var managedClusterWindowsProfile_statusARMGenerator gopter.Gen

// ManagedClusterWindowsProfile_StatusARMGenerator returns a generator of ManagedClusterWindowsProfile_StatusARM instances for property testing.
func ManagedClusterWindowsProfile_StatusARMGenerator() gopter.Gen {
	if managedClusterWindowsProfile_statusARMGenerator != nil {
		return managedClusterWindowsProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_StatusARM(generators)
	managedClusterWindowsProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWindowsProfile_StatusARM{}), generators)

	return managedClusterWindowsProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.AlphaString()
	gens["EnableCSIProxy"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.OneConstOf(ManagedClusterWindowsProfile_LicenseType_StatusNone, ManagedClusterWindowsProfile_LicenseType_StatusWindows_Server))
}

func Test_PrivateLinkResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkResource_StatusARM, PrivateLinkResource_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkResource_StatusARM runs a test to see if a specific instance of PrivateLinkResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkResource_StatusARM(subject PrivateLinkResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkResource_StatusARM instances for property testing - lazily instantiated by
//PrivateLinkResource_StatusARMGenerator()
var privateLinkResource_statusARMGenerator gopter.Gen

// PrivateLinkResource_StatusARMGenerator returns a generator of PrivateLinkResource_StatusARM instances for property testing.
func PrivateLinkResource_StatusARMGenerator() gopter.Gen {
	if privateLinkResource_statusARMGenerator != nil {
		return privateLinkResource_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkResource_StatusARM(generators)
	privateLinkResource_statusARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkResource_StatusARM{}), generators)

	return privateLinkResource_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkResource_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkResource_StatusARM(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceID"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMembers"] = gen.SliceOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerServiceSshConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshConfiguration_StatusARM, ContainerServiceSshConfiguration_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshConfiguration_StatusARM runs a test to see if a specific instance of ContainerServiceSshConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshConfiguration_StatusARM(subject ContainerServiceSshConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshConfiguration_StatusARM instances for property testing - lazily instantiated by
//ContainerServiceSshConfiguration_StatusARMGenerator()
var containerServiceSshConfiguration_statusARMGenerator gopter.Gen

// ContainerServiceSshConfiguration_StatusARMGenerator returns a generator of ContainerServiceSshConfiguration_StatusARM instances for property testing.
func ContainerServiceSshConfiguration_StatusARMGenerator() gopter.Gen {
	if containerServiceSshConfiguration_statusARMGenerator != nil {
		return containerServiceSshConfiguration_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_StatusARM(generators)
	containerServiceSshConfiguration_statusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshConfiguration_StatusARM{}), generators)

	return containerServiceSshConfiguration_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_StatusARM(gens map[string]gopter.Gen) {
	gens["PublicKeys"] = gen.SliceOf(ContainerServiceSshPublicKey_StatusARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_StatusARM, ManagedClusterLoadBalancerProfile_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_StatusARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_StatusARM(subject ManagedClusterLoadBalancerProfile_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterLoadBalancerProfile_StatusARMGenerator()
var managedClusterLoadBalancerProfile_statusARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_StatusARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_StatusARM instances for property testing.
// We first initialize managedClusterLoadBalancerProfile_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterLoadBalancerProfile_StatusARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_statusARMGenerator != nil {
		return managedClusterLoadBalancerProfile_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_StatusARM(generators)
	managedClusterLoadBalancerProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_StatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_StatusARM(generators)
	managedClusterLoadBalancerProfile_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_StatusARM{}), generators)

	return managedClusterLoadBalancerProfile_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["AllocatedOutboundPorts"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_StatusARM(gens map[string]gopter.Gen) {
	gens["EffectiveOutboundIPs"] = gen.SliceOf(ResourceReference_StatusARMGenerator())
	gens["ManagedOutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARMGenerator())
	gens["OutboundIPPrefixes"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARMGenerator())
	gens["OutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARMGenerator())
}

func Test_ManagedClusterPodIdentityException_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityException_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityException_StatusARM, ManagedClusterPodIdentityException_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityException_StatusARM runs a test to see if a specific instance of ManagedClusterPodIdentityException_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityException_StatusARM(subject ManagedClusterPodIdentityException_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityException_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityException_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterPodIdentityException_StatusARMGenerator()
var managedClusterPodIdentityException_statusARMGenerator gopter.Gen

// ManagedClusterPodIdentityException_StatusARMGenerator returns a generator of ManagedClusterPodIdentityException_StatusARM instances for property testing.
func ManagedClusterPodIdentityException_StatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentityException_statusARMGenerator != nil {
		return managedClusterPodIdentityException_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_StatusARM(generators)
	managedClusterPodIdentityException_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityException_StatusARM{}), generators)

	return managedClusterPodIdentityException_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
	gens["Namespace"] = gen.AlphaString()
	gens["PodLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_ManagedClusterPodIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentity_StatusARM, ManagedClusterPodIdentity_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentity_StatusARM runs a test to see if a specific instance of ManagedClusterPodIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentity_StatusARM(subject ManagedClusterPodIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_StatusARM instances for property testing - lazily instantiated by
//ManagedClusterPodIdentity_StatusARMGenerator()
var managedClusterPodIdentity_statusARMGenerator gopter.Gen

// ManagedClusterPodIdentity_StatusARMGenerator returns a generator of ManagedClusterPodIdentity_StatusARM instances for property testing.
// We first initialize managedClusterPodIdentity_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentity_StatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentity_statusARMGenerator != nil {
		return managedClusterPodIdentity_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_StatusARM(generators)
	managedClusterPodIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_StatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_StatusARM(generators)
	managedClusterPodIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_StatusARM{}), generators)

	return managedClusterPodIdentity_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["BindingSelector"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Namespace"] = gen.AlphaString()
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterPodIdentity_ProvisioningState_StatusAssigned,
		ManagedClusterPodIdentity_ProvisioningState_StatusDeleting,
		ManagedClusterPodIdentity_ProvisioningState_StatusFailed,
		ManagedClusterPodIdentity_ProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["Identity"] = UserAssignedIdentity_StatusARMGenerator()
	gens["ProvisioningInfo"] = gen.PtrOf(ManagedClusterPodIdentity_ProvisioningInfo_StatusARMGenerator())
}

func Test_ContainerServiceSshPublicKey_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshPublicKey_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshPublicKey_StatusARM, ContainerServiceSshPublicKey_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshPublicKey_StatusARM runs a test to see if a specific instance of ContainerServiceSshPublicKey_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshPublicKey_StatusARM(subject ContainerServiceSshPublicKey_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshPublicKey_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshPublicKey_StatusARM instances for property testing - lazily instantiated by
//ContainerServiceSshPublicKey_StatusARMGenerator()
var containerServiceSshPublicKey_statusARMGenerator gopter.Gen

// ContainerServiceSshPublicKey_StatusARMGenerator returns a generator of ContainerServiceSshPublicKey_StatusARM instances for property testing.
func ContainerServiceSshPublicKey_StatusARMGenerator() gopter.Gen {
	if containerServiceSshPublicKey_statusARMGenerator != nil {
		return containerServiceSshPublicKey_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_StatusARM(generators)
	containerServiceSshPublicKey_statusARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshPublicKey_StatusARM{}), generators)

	return containerServiceSshPublicKey_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_StatusARM(gens map[string]gopter.Gen) {
	gens["KeyData"] = gen.AlphaString()
}

func Test_ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM, ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM(subject ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM instances for property testing - lazily
//instantiated by ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARMGenerator()
var managedClusterLoadBalancerProfile_managedOutboundIPs_statusARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM instances for property testing.
func ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_managedOutboundIPs_statusARMGenerator != nil {
		return managedClusterLoadBalancerProfile_managedOutboundIPs_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM(generators)
	managedClusterLoadBalancerProfile_managedOutboundIPs_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM{}), generators)

	return managedClusterLoadBalancerProfile_managedOutboundIPs_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
}

func Test_ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM, ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM(subject ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM instances for property testing - lazily
//instantiated by ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARMGenerator()
var managedClusterLoadBalancerProfile_outboundIPPrefixes_statusARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM instances for property testing.
func ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_outboundIPPrefixes_statusARMGenerator != nil {
		return managedClusterLoadBalancerProfile_outboundIPPrefixes_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM(generators)
	managedClusterLoadBalancerProfile_outboundIPPrefixes_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM{}), generators)

	return managedClusterLoadBalancerProfile_outboundIPPrefixes_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusARM(gens map[string]gopter.Gen) {
	gens["PublicIPPrefixes"] = gen.SliceOf(ResourceReference_StatusARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM, ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM(subject ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM instances for property testing - lazily
//instantiated by ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARMGenerator()
var managedClusterLoadBalancerProfile_outboundIPs_statusARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM instances for property testing.
func ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_outboundIPs_statusARMGenerator != nil {
		return managedClusterLoadBalancerProfile_outboundIPs_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM(generators)
	managedClusterLoadBalancerProfile_outboundIPs_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM{}), generators)

	return managedClusterLoadBalancerProfile_outboundIPs_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_StatusARM(gens map[string]gopter.Gen) {
	gens["PublicIPs"] = gen.SliceOf(ResourceReference_StatusARMGenerator())
}

func Test_ManagedClusterPodIdentity_ProvisioningInfo_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_ProvisioningInfo_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentity_ProvisioningInfo_StatusARM, ManagedClusterPodIdentity_ProvisioningInfo_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentity_ProvisioningInfo_StatusARM runs a test to see if a specific instance of ManagedClusterPodIdentity_ProvisioningInfo_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentity_ProvisioningInfo_StatusARM(subject ManagedClusterPodIdentity_ProvisioningInfo_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_ProvisioningInfo_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_ProvisioningInfo_StatusARM instances for property testing - lazily
//instantiated by ManagedClusterPodIdentity_ProvisioningInfo_StatusARMGenerator()
var managedClusterPodIdentity_provisioningInfo_statusARMGenerator gopter.Gen

// ManagedClusterPodIdentity_ProvisioningInfo_StatusARMGenerator returns a generator of ManagedClusterPodIdentity_ProvisioningInfo_StatusARM instances for property testing.
func ManagedClusterPodIdentity_ProvisioningInfo_StatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentity_provisioningInfo_statusARMGenerator != nil {
		return managedClusterPodIdentity_provisioningInfo_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_ProvisioningInfo_StatusARM(generators)
	managedClusterPodIdentity_provisioningInfo_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_ProvisioningInfo_StatusARM{}), generators)

	return managedClusterPodIdentity_provisioningInfo_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_ProvisioningInfo_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_ProvisioningInfo_StatusARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningError_StatusARMGenerator())
}

func Test_ResourceReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_StatusARM, ResourceReference_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_StatusARM runs a test to see if a specific instance of ResourceReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_StatusARM(subject ResourceReference_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_StatusARM instances for property testing - lazily instantiated by
//ResourceReference_StatusARMGenerator()
var resourceReference_statusARMGenerator gopter.Gen

// ResourceReference_StatusARMGenerator returns a generator of ResourceReference_StatusARM instances for property testing.
func ResourceReference_StatusARMGenerator() gopter.Gen {
	if resourceReference_statusARMGenerator != nil {
		return resourceReference_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_StatusARM(generators)
	resourceReference_statusARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_StatusARM{}), generators)

	return resourceReference_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_StatusARM, UserAssignedIdentity_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_StatusARM runs a test to see if a specific instance of UserAssignedIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_StatusARM(subject UserAssignedIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_StatusARM instances for property testing - lazily instantiated by
//UserAssignedIdentity_StatusARMGenerator()
var userAssignedIdentity_statusARMGenerator gopter.Gen

// UserAssignedIdentity_StatusARMGenerator returns a generator of UserAssignedIdentity_StatusARM instances for property testing.
func UserAssignedIdentity_StatusARMGenerator() gopter.Gen {
	if userAssignedIdentity_statusARMGenerator != nil {
		return userAssignedIdentity_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_StatusARM(generators)
	userAssignedIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_StatusARM{}), generators)

	return userAssignedIdentity_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProvisioningError_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningError_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_StatusARM, ManagedClusterPodIdentityProvisioningError_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_StatusARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningError_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_StatusARM(subject ManagedClusterPodIdentityProvisioningError_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningError_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningError_StatusARM instances for property testing - lazily
//instantiated by ManagedClusterPodIdentityProvisioningError_StatusARMGenerator()
var managedClusterPodIdentityProvisioningError_statusARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningError_StatusARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningError_StatusARM instances for property testing.
func ManagedClusterPodIdentityProvisioningError_StatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningError_statusARMGenerator != nil {
		return managedClusterPodIdentityProvisioningError_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_StatusARM(generators)
	managedClusterPodIdentityProvisioningError_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningError_StatusARM{}), generators)

	return managedClusterPodIdentityProvisioningError_statusARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_StatusARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningErrorBody_StatusARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_StatusARM, ManagedClusterPodIdentityProvisioningErrorBody_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_StatusARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_StatusARM(subject ManagedClusterPodIdentityProvisioningErrorBody_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_StatusARM instances for property testing - lazily
//instantiated by ManagedClusterPodIdentityProvisioningErrorBody_StatusARMGenerator()
var managedClusterPodIdentityProvisioningErrorBody_statusARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBody_StatusARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_StatusARM instances for property testing.
// We first initialize managedClusterPodIdentityProvisioningErrorBody_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProvisioningErrorBody_StatusARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBody_statusARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBody_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_StatusARM(generators)
	managedClusterPodIdentityProvisioningErrorBody_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_StatusARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_StatusARM(generators)
	managedClusterPodIdentityProvisioningErrorBody_statusARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_StatusARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBody_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_StatusARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_StatusARM(gens map[string]gopter.Gen) {
	gens["Details"] = gen.SliceOf(ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM, ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM(subject ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM instances for property testing -
//lazily instantiated by ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARMGenerator()
var managedClusterPodIdentityProvisioningErrorBody_status_unrolledARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM instances for property testing.
func ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBody_status_unrolledARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBody_status_unrolledARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM(generators)
	managedClusterPodIdentityProvisioningErrorBody_status_unrolledARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBody_status_unrolledARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}
