// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210501

import (
	"fmt"
	v20210501s "github.com/Azure/azure-service-operator/v2/api/containerservice/v1beta20210501storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/resourceDefinitions/managedClusters_agentPools
type ManagedClustersAgentPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedClustersAgentPools_Spec `json:"spec,omitempty"`
	Status            AgentPool_Status               `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ManagedClustersAgentPool{}

// GetConditions returns the conditions of the resource
func (pool *ManagedClustersAgentPool) GetConditions() conditions.Conditions {
	return pool.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (pool *ManagedClustersAgentPool) SetConditions(conditions conditions.Conditions) {
	pool.Status.Conditions = conditions
}

var _ conversion.Convertible = &ManagedClustersAgentPool{}

// ConvertFrom populates our ManagedClustersAgentPool from the provided hub ManagedClustersAgentPool
func (pool *ManagedClustersAgentPool) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210501s.ManagedClustersAgentPool)
	if !ok {
		return fmt.Errorf("expected containerservice/v1beta20210501storage/ManagedClustersAgentPool but received %T instead", hub)
	}

	return pool.AssignPropertiesFromManagedClustersAgentPool(source)
}

// ConvertTo populates the provided hub ManagedClustersAgentPool from our ManagedClustersAgentPool
func (pool *ManagedClustersAgentPool) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210501s.ManagedClustersAgentPool)
	if !ok {
		return fmt.Errorf("expected containerservice/v1beta20210501storage/ManagedClustersAgentPool but received %T instead", hub)
	}

	return pool.AssignPropertiesToManagedClustersAgentPool(destination)
}

// +kubebuilder:webhook:path=/mutate-containerservice-azure-com-v1beta20210501-managedclustersagentpool,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerservice.azure.com,resources=managedclustersagentpools,verbs=create;update,versions=v1beta20210501,name=default.v1beta20210501.managedclustersagentpools.containerservice.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &ManagedClustersAgentPool{}

// Default applies defaults to the ManagedClustersAgentPool resource
func (pool *ManagedClustersAgentPool) Default() {
	pool.defaultImpl()
	var temp interface{} = pool
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (pool *ManagedClustersAgentPool) defaultAzureName() {
	if pool.Spec.AzureName == "" {
		pool.Spec.AzureName = pool.Name
	}
}

// defaultImpl applies the code generated defaults to the ManagedClustersAgentPool resource
func (pool *ManagedClustersAgentPool) defaultImpl() { pool.defaultAzureName() }

var _ genruntime.KubernetesResource = &ManagedClustersAgentPool{}

// AzureName returns the Azure name of the resource
func (pool *ManagedClustersAgentPool) AzureName() string {
	return pool.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-01"
func (pool ManagedClustersAgentPool) GetAPIVersion() string {
	return "2021-05-01"
}

// GetResourceKind returns the kind of the resource
func (pool *ManagedClustersAgentPool) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (pool *ManagedClustersAgentPool) GetSpec() genruntime.ConvertibleSpec {
	return &pool.Spec
}

// GetStatus returns the status of this resource
func (pool *ManagedClustersAgentPool) GetStatus() genruntime.ConvertibleStatus {
	return &pool.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerService/managedClusters/agentPools"
func (pool *ManagedClustersAgentPool) GetType() string {
	return "Microsoft.ContainerService/managedClusters/agentPools"
}

// NewEmptyStatus returns a new empty (blank) status
func (pool *ManagedClustersAgentPool) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &AgentPool_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (pool *ManagedClustersAgentPool) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(pool.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  pool.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (pool *ManagedClustersAgentPool) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*AgentPool_Status); ok {
		pool.Status = *st
		return nil
	}

	// Convert status to required version
	var st AgentPool_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	pool.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-containerservice-azure-com-v1beta20210501-managedclustersagentpool,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerservice.azure.com,resources=managedclustersagentpools,verbs=create;update,versions=v1beta20210501,name=validate.v1beta20210501.managedclustersagentpools.containerservice.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &ManagedClustersAgentPool{}

// ValidateCreate validates the creation of the resource
func (pool *ManagedClustersAgentPool) ValidateCreate() error {
	validations := pool.createValidations()
	var temp interface{} = pool
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (pool *ManagedClustersAgentPool) ValidateDelete() error {
	validations := pool.deleteValidations()
	var temp interface{} = pool
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (pool *ManagedClustersAgentPool) ValidateUpdate(old runtime.Object) error {
	validations := pool.updateValidations()
	var temp interface{} = pool
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (pool *ManagedClustersAgentPool) createValidations() []func() error {
	return []func() error{pool.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (pool *ManagedClustersAgentPool) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (pool *ManagedClustersAgentPool) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return pool.validateResourceReferences()
		},
		pool.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (pool *ManagedClustersAgentPool) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&pool.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (pool *ManagedClustersAgentPool) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*ManagedClustersAgentPool)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, pool)
}

// AssignPropertiesFromManagedClustersAgentPool populates our ManagedClustersAgentPool from the provided source ManagedClustersAgentPool
func (pool *ManagedClustersAgentPool) AssignPropertiesFromManagedClustersAgentPool(source *v20210501s.ManagedClustersAgentPool) error {

	// ObjectMeta
	pool.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec ManagedClustersAgentPools_Spec
	err := spec.AssignPropertiesFromManagedClustersAgentPoolsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromManagedClustersAgentPoolsSpec() to populate field Spec")
	}
	pool.Spec = spec

	// Status
	var status AgentPool_Status
	err = status.AssignPropertiesFromAgentPoolStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromAgentPoolStatus() to populate field Status")
	}
	pool.Status = status

	// No error
	return nil
}

// AssignPropertiesToManagedClustersAgentPool populates the provided destination ManagedClustersAgentPool from our ManagedClustersAgentPool
func (pool *ManagedClustersAgentPool) AssignPropertiesToManagedClustersAgentPool(destination *v20210501s.ManagedClustersAgentPool) error {

	// ObjectMeta
	destination.ObjectMeta = *pool.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210501s.ManagedClustersAgentPools_Spec
	err := pool.Spec.AssignPropertiesToManagedClustersAgentPoolsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToManagedClustersAgentPoolsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210501s.AgentPool_Status
	err = pool.Status.AssignPropertiesToAgentPoolStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToAgentPoolStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (pool *ManagedClustersAgentPool) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: pool.Spec.OriginalVersion(),
		Kind:    "ManagedClustersAgentPool",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/resourceDefinitions/managedClusters_agentPools
type ManagedClustersAgentPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedClustersAgentPool `json:"items"`
}

type AgentPool_Status struct {
	// AvailabilityZones: The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType
	// property is 'VirtualMachineScaleSets'.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Count: Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive)
	// for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
	Count *int `json:"count,omitempty"`

	// EnableAutoScaling: Whether to enable auto-scaler
	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty"`

	// EnableEncryptionAtHost: This is only supported on certain VM sizes and in certain Azure regions. For more information,
	// see: https://docs.microsoft.com/azure/aks/enable-host-encryption
	EnableEncryptionAtHost *bool `json:"enableEncryptionAtHost,omitempty"`

	// EnableFIPS: See [Add a FIPS-enabled node
	// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more
	// details.
	EnableFIPS *bool `json:"enableFIPS,omitempty"`

	// EnableNodePublicIP: Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses.
	// A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine
	// to minimize hops. For more information see [assigning a public IP per
	// node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The
	// default is false.
	EnableNodePublicIP *bool `json:"enableNodePublicIP,omitempty"`

	// EnableUltraSSD: Whether to enable UltraSSD
	EnableUltraSSD *bool `json:"enableUltraSSD,omitempty"`

	// GpuInstanceProfile: GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
	GpuInstanceProfile *GPUInstanceProfile_Status `json:"gpuInstanceProfile,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// KubeletConfig: The Kubelet configuration on the agent pool nodes.
	KubeletConfig   *KubeletConfig_Status   `json:"kubeletConfig,omitempty"`
	KubeletDiskType *KubeletDiskType_Status `json:"kubeletDiskType,omitempty"`

	// LinuxOSConfig: The OS configuration of Linux agent nodes.
	LinuxOSConfig *LinuxOSConfig_Status `json:"linuxOSConfig,omitempty"`

	// MaxCount: The maximum number of nodes for auto-scaling
	MaxCount *int `json:"maxCount,omitempty"`

	// MaxPods: The maximum number of pods that can run on a node.
	MaxPods *int `json:"maxPods,omitempty"`

	// MinCount: The minimum number of nodes for auto-scaling
	MinCount *int                  `json:"minCount,omitempty"`
	Mode     *AgentPoolMode_Status `json:"mode,omitempty"`

	// Name: The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// NodeImageVersion: The version of node image
	NodeImageVersion *string `json:"nodeImageVersion,omitempty"`

	// NodeLabels: The node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	// NodePublicIPPrefixID: This is of the form:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
	NodePublicIPPrefixID *string `json:"nodePublicIPPrefixID,omitempty"`

	// NodeTaints: The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `json:"nodeTaints,omitempty"`

	// OrchestratorVersion: As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes
	// version. The node pool version must have the same major version as the control plane. The node pool minor version must
	// be within two minor versions of the control plane version. The node pool version cannot be greater than the control
	// plane version. For more information see [upgrading a node
	// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
	OrchestratorVersion *string            `json:"orchestratorVersion,omitempty"`
	OsDiskSizeGB        *int               `json:"osDiskSizeGB,omitempty"`
	OsDiskType          *OSDiskType_Status `json:"osDiskType,omitempty"`
	OsSKU               *OSSKU_Status      `json:"osSKU,omitempty"`
	OsType              *OSType_Status     `json:"osType,omitempty"`

	// PodSubnetID: If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is
	// of the form:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	PodSubnetID *string `json:"podSubnetID,omitempty"`

	// PowerState: Describes whether the Agent Pool is Running or Stopped
	PowerState     *PowerState_Status    `json:"powerState,omitempty"`
	PropertiesType *AgentPoolType_Status `json:"properties_type,omitempty"`

	// ProvisioningState: The current deployment or provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// ProximityPlacementGroupID: The ID for Proximity Placement Group.
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupID,omitempty"`

	// ScaleSetEvictionPolicy: This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is
	// 'Delete'.
	ScaleSetEvictionPolicy *ScaleSetEvictionPolicy_Status `json:"scaleSetEvictionPolicy,omitempty"`

	// ScaleSetPriority: The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
	ScaleSetPriority *ScaleSetPriority_Status `json:"scaleSetPriority,omitempty"`

	// SpotMaxPrice: Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any
	// on-demand price. For more details on spot pricing, see [spot VMs
	// pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
	SpotMaxPrice *float64 `json:"spotMaxPrice,omitempty"`

	// Tags: The tags to be persisted on the agent pool virtual machine scale set.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type
	Type *string `json:"type,omitempty"`

	// UpgradeSettings: Settings for upgrading the agentpool
	UpgradeSettings *AgentPoolUpgradeSettings_Status `json:"upgradeSettings,omitempty"`

	// VmSize: VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods
	// might fail to run correctly. For more details on restricted VM sizes, see:
	// https://docs.microsoft.com/azure/aks/quotas-skus-regions
	VmSize *string `json:"vmSize,omitempty"`

	// VnetSubnetID: If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified,
	// this applies to nodes and pods, otherwise it applies to just nodes. This is of the form:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	VnetSubnetID *string `json:"vnetSubnetID,omitempty"`
}

var _ genruntime.ConvertibleStatus = &AgentPool_Status{}

// ConvertStatusFrom populates our AgentPool_Status from the provided source
func (pool *AgentPool_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210501s.AgentPool_Status)
	if ok {
		// Populate our instance from source
		return pool.AssignPropertiesFromAgentPoolStatus(src)
	}

	// Convert to an intermediate form
	src = &v20210501s.AgentPool_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = pool.AssignPropertiesFromAgentPoolStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our AgentPool_Status
func (pool *AgentPool_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210501s.AgentPool_Status)
	if ok {
		// Populate destination from our instance
		return pool.AssignPropertiesToAgentPoolStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v20210501s.AgentPool_Status{}
	err := pool.AssignPropertiesToAgentPoolStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &AgentPool_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (pool *AgentPool_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AgentPool_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (pool *AgentPool_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AgentPool_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AgentPool_StatusARM, got %T", armInput)
	}

	// Set property ‘AvailabilityZones’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AvailabilityZones {
			pool.AvailabilityZones = append(pool.AvailabilityZones, item)
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Count’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Count != nil {
			count := *typedInput.Properties.Count
			pool.Count = &count
		}
	}

	// Set property ‘EnableAutoScaling’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableAutoScaling != nil {
			enableAutoScaling := *typedInput.Properties.EnableAutoScaling
			pool.EnableAutoScaling = &enableAutoScaling
		}
	}

	// Set property ‘EnableEncryptionAtHost’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableEncryptionAtHost != nil {
			enableEncryptionAtHost := *typedInput.Properties.EnableEncryptionAtHost
			pool.EnableEncryptionAtHost = &enableEncryptionAtHost
		}
	}

	// Set property ‘EnableFIPS’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableFIPS != nil {
			enableFIPS := *typedInput.Properties.EnableFIPS
			pool.EnableFIPS = &enableFIPS
		}
	}

	// Set property ‘EnableNodePublicIP’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableNodePublicIP != nil {
			enableNodePublicIP := *typedInput.Properties.EnableNodePublicIP
			pool.EnableNodePublicIP = &enableNodePublicIP
		}
	}

	// Set property ‘EnableUltraSSD’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableUltraSSD != nil {
			enableUltraSSD := *typedInput.Properties.EnableUltraSSD
			pool.EnableUltraSSD = &enableUltraSSD
		}
	}

	// Set property ‘GpuInstanceProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GpuInstanceProfile != nil {
			gpuInstanceProfile := *typedInput.Properties.GpuInstanceProfile
			pool.GpuInstanceProfile = &gpuInstanceProfile
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		pool.Id = &id
	}

	// Set property ‘KubeletConfig’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KubeletConfig != nil {
			var kubeletConfig1 KubeletConfig_Status
			err := kubeletConfig1.PopulateFromARM(owner, *typedInput.Properties.KubeletConfig)
			if err != nil {
				return err
			}
			kubeletConfig := kubeletConfig1
			pool.KubeletConfig = &kubeletConfig
		}
	}

	// Set property ‘KubeletDiskType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KubeletDiskType != nil {
			kubeletDiskType := *typedInput.Properties.KubeletDiskType
			pool.KubeletDiskType = &kubeletDiskType
		}
	}

	// Set property ‘LinuxOSConfig’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinuxOSConfig != nil {
			var linuxOSConfig1 LinuxOSConfig_Status
			err := linuxOSConfig1.PopulateFromARM(owner, *typedInput.Properties.LinuxOSConfig)
			if err != nil {
				return err
			}
			linuxOSConfig := linuxOSConfig1
			pool.LinuxOSConfig = &linuxOSConfig
		}
	}

	// Set property ‘MaxCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxCount != nil {
			maxCount := *typedInput.Properties.MaxCount
			pool.MaxCount = &maxCount
		}
	}

	// Set property ‘MaxPods’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxPods != nil {
			maxPods := *typedInput.Properties.MaxPods
			pool.MaxPods = &maxPods
		}
	}

	// Set property ‘MinCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinCount != nil {
			minCount := *typedInput.Properties.MinCount
			pool.MinCount = &minCount
		}
	}

	// Set property ‘Mode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Mode != nil {
			mode := *typedInput.Properties.Mode
			pool.Mode = &mode
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		pool.Name = &name
	}

	// Set property ‘NodeImageVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NodeImageVersion != nil {
			nodeImageVersion := *typedInput.Properties.NodeImageVersion
			pool.NodeImageVersion = &nodeImageVersion
		}
	}

	// Set property ‘NodeLabels’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NodeLabels != nil {
			pool.NodeLabels = make(map[string]string)
			for key, value := range typedInput.Properties.NodeLabels {
				pool.NodeLabels[key] = value
			}
		}
	}

	// Set property ‘NodePublicIPPrefixID’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NodePublicIPPrefixID != nil {
			nodePublicIPPrefixID := *typedInput.Properties.NodePublicIPPrefixID
			pool.NodePublicIPPrefixID = &nodePublicIPPrefixID
		}
	}

	// Set property ‘NodeTaints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NodeTaints {
			pool.NodeTaints = append(pool.NodeTaints, item)
		}
	}

	// Set property ‘OrchestratorVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OrchestratorVersion != nil {
			orchestratorVersion := *typedInput.Properties.OrchestratorVersion
			pool.OrchestratorVersion = &orchestratorVersion
		}
	}

	// Set property ‘OsDiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsDiskSizeGB != nil {
			osDiskSizeGB := *typedInput.Properties.OsDiskSizeGB
			pool.OsDiskSizeGB = &osDiskSizeGB
		}
	}

	// Set property ‘OsDiskType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsDiskType != nil {
			osDiskType := *typedInput.Properties.OsDiskType
			pool.OsDiskType = &osDiskType
		}
	}

	// Set property ‘OsSKU’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsSKU != nil {
			osSKU := *typedInput.Properties.OsSKU
			pool.OsSKU = &osSKU
		}
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsType != nil {
			osType := *typedInput.Properties.OsType
			pool.OsType = &osType
		}
	}

	// Set property ‘PodSubnetID’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PodSubnetID != nil {
			podSubnetID := *typedInput.Properties.PodSubnetID
			pool.PodSubnetID = &podSubnetID
		}
	}

	// Set property ‘PowerState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PowerState != nil {
			var powerState1 PowerState_Status
			err := powerState1.PopulateFromARM(owner, *typedInput.Properties.PowerState)
			if err != nil {
				return err
			}
			powerState := powerState1
			pool.PowerState = &powerState
		}
	}

	// Set property ‘PropertiesType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Type != nil {
			propertiesType := *typedInput.Properties.Type
			pool.PropertiesType = &propertiesType
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			pool.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ProximityPlacementGroupID’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProximityPlacementGroupID != nil {
			proximityPlacementGroupID := *typedInput.Properties.ProximityPlacementGroupID
			pool.ProximityPlacementGroupID = &proximityPlacementGroupID
		}
	}

	// Set property ‘ScaleSetEvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ScaleSetEvictionPolicy != nil {
			scaleSetEvictionPolicy := *typedInput.Properties.ScaleSetEvictionPolicy
			pool.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
		}
	}

	// Set property ‘ScaleSetPriority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ScaleSetPriority != nil {
			scaleSetPriority := *typedInput.Properties.ScaleSetPriority
			pool.ScaleSetPriority = &scaleSetPriority
		}
	}

	// Set property ‘SpotMaxPrice’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SpotMaxPrice != nil {
			spotMaxPrice := *typedInput.Properties.SpotMaxPrice
			pool.SpotMaxPrice = &spotMaxPrice
		}
	}

	// Set property ‘Tags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tags != nil {
			pool.Tags = make(map[string]string)
			for key, value := range typedInput.Properties.Tags {
				pool.Tags[key] = value
			}
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		pool.Type = &typeVar
	}

	// Set property ‘UpgradeSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpgradeSettings != nil {
			var upgradeSettings1 AgentPoolUpgradeSettings_Status
			err := upgradeSettings1.PopulateFromARM(owner, *typedInput.Properties.UpgradeSettings)
			if err != nil {
				return err
			}
			upgradeSettings := upgradeSettings1
			pool.UpgradeSettings = &upgradeSettings
		}
	}

	// Set property ‘VmSize’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VmSize != nil {
			vmSize := *typedInput.Properties.VmSize
			pool.VmSize = &vmSize
		}
	}

	// Set property ‘VnetSubnetID’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VnetSubnetID != nil {
			vnetSubnetID := *typedInput.Properties.VnetSubnetID
			pool.VnetSubnetID = &vnetSubnetID
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromAgentPoolStatus populates our AgentPool_Status from the provided source AgentPool_Status
func (pool *AgentPool_Status) AssignPropertiesFromAgentPoolStatus(source *v20210501s.AgentPool_Status) error {

	// AvailabilityZones
	pool.AvailabilityZones = genruntime.CloneSliceOfString(source.AvailabilityZones)

	// Conditions
	pool.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Count
	pool.Count = genruntime.ClonePointerToInt(source.Count)

	// EnableAutoScaling
	if source.EnableAutoScaling != nil {
		enableAutoScaling := *source.EnableAutoScaling
		pool.EnableAutoScaling = &enableAutoScaling
	} else {
		pool.EnableAutoScaling = nil
	}

	// EnableEncryptionAtHost
	if source.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *source.EnableEncryptionAtHost
		pool.EnableEncryptionAtHost = &enableEncryptionAtHost
	} else {
		pool.EnableEncryptionAtHost = nil
	}

	// EnableFIPS
	if source.EnableFIPS != nil {
		enableFIPS := *source.EnableFIPS
		pool.EnableFIPS = &enableFIPS
	} else {
		pool.EnableFIPS = nil
	}

	// EnableNodePublicIP
	if source.EnableNodePublicIP != nil {
		enableNodePublicIP := *source.EnableNodePublicIP
		pool.EnableNodePublicIP = &enableNodePublicIP
	} else {
		pool.EnableNodePublicIP = nil
	}

	// EnableUltraSSD
	if source.EnableUltraSSD != nil {
		enableUltraSSD := *source.EnableUltraSSD
		pool.EnableUltraSSD = &enableUltraSSD
	} else {
		pool.EnableUltraSSD = nil
	}

	// GpuInstanceProfile
	if source.GpuInstanceProfile != nil {
		gpuInstanceProfile := GPUInstanceProfile_Status(*source.GpuInstanceProfile)
		pool.GpuInstanceProfile = &gpuInstanceProfile
	} else {
		pool.GpuInstanceProfile = nil
	}

	// Id
	pool.Id = genruntime.ClonePointerToString(source.Id)

	// KubeletConfig
	if source.KubeletConfig != nil {
		var kubeletConfig KubeletConfig_Status
		err := kubeletConfig.AssignPropertiesFromKubeletConfigStatus(source.KubeletConfig)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKubeletConfigStatus() to populate field KubeletConfig")
		}
		pool.KubeletConfig = &kubeletConfig
	} else {
		pool.KubeletConfig = nil
	}

	// KubeletDiskType
	if source.KubeletDiskType != nil {
		kubeletDiskType := KubeletDiskType_Status(*source.KubeletDiskType)
		pool.KubeletDiskType = &kubeletDiskType
	} else {
		pool.KubeletDiskType = nil
	}

	// LinuxOSConfig
	if source.LinuxOSConfig != nil {
		var linuxOSConfig LinuxOSConfig_Status
		err := linuxOSConfig.AssignPropertiesFromLinuxOSConfigStatus(source.LinuxOSConfig)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLinuxOSConfigStatus() to populate field LinuxOSConfig")
		}
		pool.LinuxOSConfig = &linuxOSConfig
	} else {
		pool.LinuxOSConfig = nil
	}

	// MaxCount
	pool.MaxCount = genruntime.ClonePointerToInt(source.MaxCount)

	// MaxPods
	pool.MaxPods = genruntime.ClonePointerToInt(source.MaxPods)

	// MinCount
	pool.MinCount = genruntime.ClonePointerToInt(source.MinCount)

	// Mode
	if source.Mode != nil {
		mode := AgentPoolMode_Status(*source.Mode)
		pool.Mode = &mode
	} else {
		pool.Mode = nil
	}

	// Name
	pool.Name = genruntime.ClonePointerToString(source.Name)

	// NodeImageVersion
	pool.NodeImageVersion = genruntime.ClonePointerToString(source.NodeImageVersion)

	// NodeLabels
	pool.NodeLabels = genruntime.CloneMapOfStringToString(source.NodeLabels)

	// NodePublicIPPrefixID
	pool.NodePublicIPPrefixID = genruntime.ClonePointerToString(source.NodePublicIPPrefixID)

	// NodeTaints
	pool.NodeTaints = genruntime.CloneSliceOfString(source.NodeTaints)

	// OrchestratorVersion
	pool.OrchestratorVersion = genruntime.ClonePointerToString(source.OrchestratorVersion)

	// OsDiskSizeGB
	pool.OsDiskSizeGB = genruntime.ClonePointerToInt(source.OsDiskSizeGB)

	// OsDiskType
	if source.OsDiskType != nil {
		osDiskType := OSDiskType_Status(*source.OsDiskType)
		pool.OsDiskType = &osDiskType
	} else {
		pool.OsDiskType = nil
	}

	// OsSKU
	if source.OsSKU != nil {
		osSKU := OSSKU_Status(*source.OsSKU)
		pool.OsSKU = &osSKU
	} else {
		pool.OsSKU = nil
	}

	// OsType
	if source.OsType != nil {
		osType := OSType_Status(*source.OsType)
		pool.OsType = &osType
	} else {
		pool.OsType = nil
	}

	// PodSubnetID
	pool.PodSubnetID = genruntime.ClonePointerToString(source.PodSubnetID)

	// PowerState
	if source.PowerState != nil {
		var powerState PowerState_Status
		err := powerState.AssignPropertiesFromPowerStateStatus(source.PowerState)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPowerStateStatus() to populate field PowerState")
		}
		pool.PowerState = &powerState
	} else {
		pool.PowerState = nil
	}

	// PropertiesType
	if source.PropertiesType != nil {
		propertiesType := AgentPoolType_Status(*source.PropertiesType)
		pool.PropertiesType = &propertiesType
	} else {
		pool.PropertiesType = nil
	}

	// ProvisioningState
	pool.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ProximityPlacementGroupID
	pool.ProximityPlacementGroupID = genruntime.ClonePointerToString(source.ProximityPlacementGroupID)

	// ScaleSetEvictionPolicy
	if source.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := ScaleSetEvictionPolicy_Status(*source.ScaleSetEvictionPolicy)
		pool.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	} else {
		pool.ScaleSetEvictionPolicy = nil
	}

	// ScaleSetPriority
	if source.ScaleSetPriority != nil {
		scaleSetPriority := ScaleSetPriority_Status(*source.ScaleSetPriority)
		pool.ScaleSetPriority = &scaleSetPriority
	} else {
		pool.ScaleSetPriority = nil
	}

	// SpotMaxPrice
	if source.SpotMaxPrice != nil {
		spotMaxPrice := *source.SpotMaxPrice
		pool.SpotMaxPrice = &spotMaxPrice
	} else {
		pool.SpotMaxPrice = nil
	}

	// Tags
	pool.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	pool.Type = genruntime.ClonePointerToString(source.Type)

	// UpgradeSettings
	if source.UpgradeSettings != nil {
		var upgradeSetting AgentPoolUpgradeSettings_Status
		err := upgradeSetting.AssignPropertiesFromAgentPoolUpgradeSettingsStatus(source.UpgradeSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAgentPoolUpgradeSettingsStatus() to populate field UpgradeSettings")
		}
		pool.UpgradeSettings = &upgradeSetting
	} else {
		pool.UpgradeSettings = nil
	}

	// VmSize
	pool.VmSize = genruntime.ClonePointerToString(source.VmSize)

	// VnetSubnetID
	pool.VnetSubnetID = genruntime.ClonePointerToString(source.VnetSubnetID)

	// No error
	return nil
}

// AssignPropertiesToAgentPoolStatus populates the provided destination AgentPool_Status from our AgentPool_Status
func (pool *AgentPool_Status) AssignPropertiesToAgentPoolStatus(destination *v20210501s.AgentPool_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AvailabilityZones
	destination.AvailabilityZones = genruntime.CloneSliceOfString(pool.AvailabilityZones)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(pool.Conditions)

	// Count
	destination.Count = genruntime.ClonePointerToInt(pool.Count)

	// EnableAutoScaling
	if pool.EnableAutoScaling != nil {
		enableAutoScaling := *pool.EnableAutoScaling
		destination.EnableAutoScaling = &enableAutoScaling
	} else {
		destination.EnableAutoScaling = nil
	}

	// EnableEncryptionAtHost
	if pool.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *pool.EnableEncryptionAtHost
		destination.EnableEncryptionAtHost = &enableEncryptionAtHost
	} else {
		destination.EnableEncryptionAtHost = nil
	}

	// EnableFIPS
	if pool.EnableFIPS != nil {
		enableFIPS := *pool.EnableFIPS
		destination.EnableFIPS = &enableFIPS
	} else {
		destination.EnableFIPS = nil
	}

	// EnableNodePublicIP
	if pool.EnableNodePublicIP != nil {
		enableNodePublicIP := *pool.EnableNodePublicIP
		destination.EnableNodePublicIP = &enableNodePublicIP
	} else {
		destination.EnableNodePublicIP = nil
	}

	// EnableUltraSSD
	if pool.EnableUltraSSD != nil {
		enableUltraSSD := *pool.EnableUltraSSD
		destination.EnableUltraSSD = &enableUltraSSD
	} else {
		destination.EnableUltraSSD = nil
	}

	// GpuInstanceProfile
	if pool.GpuInstanceProfile != nil {
		gpuInstanceProfile := string(*pool.GpuInstanceProfile)
		destination.GpuInstanceProfile = &gpuInstanceProfile
	} else {
		destination.GpuInstanceProfile = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(pool.Id)

	// KubeletConfig
	if pool.KubeletConfig != nil {
		var kubeletConfig v20210501s.KubeletConfig_Status
		err := pool.KubeletConfig.AssignPropertiesToKubeletConfigStatus(&kubeletConfig)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKubeletConfigStatus() to populate field KubeletConfig")
		}
		destination.KubeletConfig = &kubeletConfig
	} else {
		destination.KubeletConfig = nil
	}

	// KubeletDiskType
	if pool.KubeletDiskType != nil {
		kubeletDiskType := string(*pool.KubeletDiskType)
		destination.KubeletDiskType = &kubeletDiskType
	} else {
		destination.KubeletDiskType = nil
	}

	// LinuxOSConfig
	if pool.LinuxOSConfig != nil {
		var linuxOSConfig v20210501s.LinuxOSConfig_Status
		err := pool.LinuxOSConfig.AssignPropertiesToLinuxOSConfigStatus(&linuxOSConfig)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLinuxOSConfigStatus() to populate field LinuxOSConfig")
		}
		destination.LinuxOSConfig = &linuxOSConfig
	} else {
		destination.LinuxOSConfig = nil
	}

	// MaxCount
	destination.MaxCount = genruntime.ClonePointerToInt(pool.MaxCount)

	// MaxPods
	destination.MaxPods = genruntime.ClonePointerToInt(pool.MaxPods)

	// MinCount
	destination.MinCount = genruntime.ClonePointerToInt(pool.MinCount)

	// Mode
	if pool.Mode != nil {
		mode := string(*pool.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(pool.Name)

	// NodeImageVersion
	destination.NodeImageVersion = genruntime.ClonePointerToString(pool.NodeImageVersion)

	// NodeLabels
	destination.NodeLabels = genruntime.CloneMapOfStringToString(pool.NodeLabels)

	// NodePublicIPPrefixID
	destination.NodePublicIPPrefixID = genruntime.ClonePointerToString(pool.NodePublicIPPrefixID)

	// NodeTaints
	destination.NodeTaints = genruntime.CloneSliceOfString(pool.NodeTaints)

	// OrchestratorVersion
	destination.OrchestratorVersion = genruntime.ClonePointerToString(pool.OrchestratorVersion)

	// OsDiskSizeGB
	destination.OsDiskSizeGB = genruntime.ClonePointerToInt(pool.OsDiskSizeGB)

	// OsDiskType
	if pool.OsDiskType != nil {
		osDiskType := string(*pool.OsDiskType)
		destination.OsDiskType = &osDiskType
	} else {
		destination.OsDiskType = nil
	}

	// OsSKU
	if pool.OsSKU != nil {
		osSKU := string(*pool.OsSKU)
		destination.OsSKU = &osSKU
	} else {
		destination.OsSKU = nil
	}

	// OsType
	if pool.OsType != nil {
		osType := string(*pool.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// PodSubnetID
	destination.PodSubnetID = genruntime.ClonePointerToString(pool.PodSubnetID)

	// PowerState
	if pool.PowerState != nil {
		var powerState v20210501s.PowerState_Status
		err := pool.PowerState.AssignPropertiesToPowerStateStatus(&powerState)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPowerStateStatus() to populate field PowerState")
		}
		destination.PowerState = &powerState
	} else {
		destination.PowerState = nil
	}

	// PropertiesType
	if pool.PropertiesType != nil {
		propertiesType := string(*pool.PropertiesType)
		destination.PropertiesType = &propertiesType
	} else {
		destination.PropertiesType = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(pool.ProvisioningState)

	// ProximityPlacementGroupID
	destination.ProximityPlacementGroupID = genruntime.ClonePointerToString(pool.ProximityPlacementGroupID)

	// ScaleSetEvictionPolicy
	if pool.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := string(*pool.ScaleSetEvictionPolicy)
		destination.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	} else {
		destination.ScaleSetEvictionPolicy = nil
	}

	// ScaleSetPriority
	if pool.ScaleSetPriority != nil {
		scaleSetPriority := string(*pool.ScaleSetPriority)
		destination.ScaleSetPriority = &scaleSetPriority
	} else {
		destination.ScaleSetPriority = nil
	}

	// SpotMaxPrice
	if pool.SpotMaxPrice != nil {
		spotMaxPrice := *pool.SpotMaxPrice
		destination.SpotMaxPrice = &spotMaxPrice
	} else {
		destination.SpotMaxPrice = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(pool.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(pool.Type)

	// UpgradeSettings
	if pool.UpgradeSettings != nil {
		var upgradeSetting v20210501s.AgentPoolUpgradeSettings_Status
		err := pool.UpgradeSettings.AssignPropertiesToAgentPoolUpgradeSettingsStatus(&upgradeSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAgentPoolUpgradeSettingsStatus() to populate field UpgradeSettings")
		}
		destination.UpgradeSettings = &upgradeSetting
	} else {
		destination.UpgradeSettings = nil
	}

	// VmSize
	destination.VmSize = genruntime.ClonePointerToString(pool.VmSize)

	// VnetSubnetID
	destination.VnetSubnetID = genruntime.ClonePointerToString(pool.VnetSubnetID)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2021-05-01"}
type ManagedClustersAgentPoolsSpecAPIVersion string

const ManagedClustersAgentPoolsSpecAPIVersion20210501 = ManagedClustersAgentPoolsSpecAPIVersion("2021-05-01")

type ManagedClustersAgentPools_Spec struct {
	// AvailabilityZones: The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType
	// property is 'VirtualMachineScaleSets'.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Count: Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive)
	// for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
	Count *int `json:"count,omitempty"`

	// EnableAutoScaling: Whether to enable auto-scaler
	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty"`

	// EnableEncryptionAtHost: This is only supported on certain VM sizes and in certain Azure regions. For more information,
	// see: https://docs.microsoft.com/azure/aks/enable-host-encryption
	EnableEncryptionAtHost *bool `json:"enableEncryptionAtHost,omitempty"`

	// EnableFIPS: See [Add a FIPS-enabled node
	// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more
	// details.
	EnableFIPS *bool `json:"enableFIPS,omitempty"`

	// EnableNodePublicIP: Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses.
	// A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine
	// to minimize hops. For more information see [assigning a public IP per
	// node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The
	// default is false.
	EnableNodePublicIP *bool `json:"enableNodePublicIP,omitempty"`

	// EnableUltraSSD: Whether to enable UltraSSD
	EnableUltraSSD *bool `json:"enableUltraSSD,omitempty"`

	// GpuInstanceProfile: GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
	GpuInstanceProfile *ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile `json:"gpuInstanceProfile,omitempty"`

	// KubeletConfig: See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for
	// more details.
	KubeletConfig   *KubeletConfig                                           `json:"kubeletConfig,omitempty"`
	KubeletDiskType *ManagedClusterAgentPoolProfilePropertiesKubeletDiskType `json:"kubeletDiskType,omitempty"`

	// LinuxOSConfig: See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for
	// more details.
	LinuxOSConfig *LinuxOSConfig `json:"linuxOSConfig,omitempty"`

	// Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// MaxCount: The maximum number of nodes for auto-scaling
	MaxCount *int `json:"maxCount,omitempty"`

	// MaxPods: The maximum number of pods that can run on a node.
	MaxPods *int `json:"maxPods,omitempty"`

	// MinCount: The minimum number of nodes for auto-scaling
	MinCount *int                                          `json:"minCount,omitempty"`
	Mode     *ManagedClusterAgentPoolProfilePropertiesMode `json:"mode,omitempty"`

	// NodeLabels: The node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	// NodePublicIPPrefixIDReference: This is of the form:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
	NodePublicIPPrefixIDReference *genruntime.ResourceReference `armReference:"NodePublicIPPrefixID" json:"nodePublicIPPrefixIDReference,omitempty"`

	// NodeTaints: The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `json:"nodeTaints,omitempty"`

	// OrchestratorVersion: As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes
	// version. The node pool version must have the same major version as the control plane. The node pool minor version must
	// be within two minor versions of the control plane version. The node pool version cannot be greater than the control
	// plane version. For more information see [upgrading a node
	// pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
	OrchestratorVersion *string `json:"orchestratorVersion,omitempty"`

	// +kubebuilder:validation:Maximum=2048
	// +kubebuilder:validation:Minimum=0
	// OsDiskSizeGB: OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you
	// specify 0, it will apply the default osDisk size according to the vmSize specified.
	OsDiskSizeGB *int                                                `json:"osDiskSizeGB,omitempty"`
	OsDiskType   *ManagedClusterAgentPoolProfilePropertiesOsDiskType `json:"osDiskType,omitempty"`
	OsSKU        *ManagedClusterAgentPoolProfilePropertiesOsSKU      `json:"osSKU,omitempty"`
	OsType       *ManagedClusterAgentPoolProfilePropertiesOsType     `json:"osType,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a containerservice.azure.com/ManagedCluster resource
	Owner *genruntime.KnownResourceReference `group:"containerservice.azure.com" json:"owner,omitempty" kind:"ManagedCluster"`

	// PodSubnetIDReference: If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more
	// details). This is of the form:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	PodSubnetIDReference *genruntime.ResourceReference `armReference:"PodSubnetID" json:"podSubnetIDReference,omitempty"`

	// ProximityPlacementGroupID: The ID for Proximity Placement Group.
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupID,omitempty"`

	// ScaleSetEvictionPolicy: This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is
	// 'Delete'.
	ScaleSetEvictionPolicy *ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy `json:"scaleSetEvictionPolicy,omitempty"`

	// ScaleSetPriority: The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
	ScaleSetPriority *ManagedClusterAgentPoolProfilePropertiesScaleSetPriority `json:"scaleSetPriority,omitempty"`

	// SpotMaxPrice: Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any
	// on-demand price. For more details on spot pricing, see [spot VMs
	// pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
	SpotMaxPrice *float64 `json:"spotMaxPrice,omitempty"`

	// Tags: The tags to be persisted on the agent pool virtual machine scale set.
	Tags map[string]string                             `json:"tags,omitempty"`
	Type *ManagedClusterAgentPoolProfilePropertiesType `json:"type,omitempty"`

	// UpgradeSettings: Settings for upgrading an agentpool
	UpgradeSettings *AgentPoolUpgradeSettings `json:"upgradeSettings,omitempty"`

	// VmSize: VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods
	// might fail to run correctly. For more details on restricted VM sizes, see:
	// https://docs.microsoft.com/azure/aks/quotas-skus-regions
	VmSize *string `json:"vmSize,omitempty"`

	// VnetSubnetIDReference: If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is
	// specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	VnetSubnetIDReference *genruntime.ResourceReference `armReference:"VnetSubnetID" json:"vnetSubnetIDReference,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedClustersAgentPools_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (pools *ManagedClustersAgentPools_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if pools == nil {
		return nil, nil
	}
	var result ManagedClustersAgentPools_SpecARM

	// Set property ‘Location’:
	if pools.Location != nil {
		location := *pools.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if pools.AvailabilityZones != nil ||
		pools.Count != nil ||
		pools.EnableAutoScaling != nil ||
		pools.EnableEncryptionAtHost != nil ||
		pools.EnableFIPS != nil ||
		pools.EnableNodePublicIP != nil ||
		pools.EnableUltraSSD != nil ||
		pools.GpuInstanceProfile != nil ||
		pools.KubeletConfig != nil ||
		pools.KubeletDiskType != nil ||
		pools.LinuxOSConfig != nil ||
		pools.MaxCount != nil ||
		pools.MaxPods != nil ||
		pools.MinCount != nil ||
		pools.Mode != nil ||
		pools.NodeLabels != nil ||
		pools.NodePublicIPPrefixIDReference != nil ||
		pools.NodeTaints != nil ||
		pools.OrchestratorVersion != nil ||
		pools.OsDiskSizeGB != nil ||
		pools.OsDiskType != nil ||
		pools.OsSKU != nil ||
		pools.OsType != nil ||
		pools.PodSubnetIDReference != nil ||
		pools.ProximityPlacementGroupID != nil ||
		pools.ScaleSetEvictionPolicy != nil ||
		pools.ScaleSetPriority != nil ||
		pools.SpotMaxPrice != nil ||
		pools.Tags != nil ||
		pools.Type != nil ||
		pools.UpgradeSettings != nil ||
		pools.VmSize != nil ||
		pools.VnetSubnetIDReference != nil {
		result.Properties = &ManagedClusterAgentPoolProfilePropertiesARM{}
	}
	for _, item := range pools.AvailabilityZones {
		result.Properties.AvailabilityZones = append(result.Properties.AvailabilityZones, item)
	}
	if pools.Count != nil {
		count := *pools.Count
		result.Properties.Count = &count
	}
	if pools.EnableAutoScaling != nil {
		enableAutoScaling := *pools.EnableAutoScaling
		result.Properties.EnableAutoScaling = &enableAutoScaling
	}
	if pools.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *pools.EnableEncryptionAtHost
		result.Properties.EnableEncryptionAtHost = &enableEncryptionAtHost
	}
	if pools.EnableFIPS != nil {
		enableFIPS := *pools.EnableFIPS
		result.Properties.EnableFIPS = &enableFIPS
	}
	if pools.EnableNodePublicIP != nil {
		enableNodePublicIP := *pools.EnableNodePublicIP
		result.Properties.EnableNodePublicIP = &enableNodePublicIP
	}
	if pools.EnableUltraSSD != nil {
		enableUltraSSD := *pools.EnableUltraSSD
		result.Properties.EnableUltraSSD = &enableUltraSSD
	}
	if pools.GpuInstanceProfile != nil {
		gpuInstanceProfile := *pools.GpuInstanceProfile
		result.Properties.GpuInstanceProfile = &gpuInstanceProfile
	}
	if pools.KubeletConfig != nil {
		kubeletConfigARM, err := (*pools.KubeletConfig).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		kubeletConfig := kubeletConfigARM.(KubeletConfigARM)
		result.Properties.KubeletConfig = &kubeletConfig
	}
	if pools.KubeletDiskType != nil {
		kubeletDiskType := *pools.KubeletDiskType
		result.Properties.KubeletDiskType = &kubeletDiskType
	}
	if pools.LinuxOSConfig != nil {
		linuxOSConfigARM, err := (*pools.LinuxOSConfig).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		linuxOSConfig := linuxOSConfigARM.(LinuxOSConfigARM)
		result.Properties.LinuxOSConfig = &linuxOSConfig
	}
	if pools.MaxCount != nil {
		maxCount := *pools.MaxCount
		result.Properties.MaxCount = &maxCount
	}
	if pools.MaxPods != nil {
		maxPods := *pools.MaxPods
		result.Properties.MaxPods = &maxPods
	}
	if pools.MinCount != nil {
		minCount := *pools.MinCount
		result.Properties.MinCount = &minCount
	}
	if pools.Mode != nil {
		mode := *pools.Mode
		result.Properties.Mode = &mode
	}
	if pools.NodeLabels != nil {
		result.Properties.NodeLabels = make(map[string]string)
		for key, value := range pools.NodeLabels {
			result.Properties.NodeLabels[key] = value
		}
	}
	if pools.NodePublicIPPrefixIDReference != nil {
		nodePublicIPPrefixIDARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*pools.NodePublicIPPrefixIDReference)
		if err != nil {
			return nil, err
		}
		nodePublicIPPrefixID := nodePublicIPPrefixIDARMID
		result.Properties.NodePublicIPPrefixID = &nodePublicIPPrefixID
	}
	for _, item := range pools.NodeTaints {
		result.Properties.NodeTaints = append(result.Properties.NodeTaints, item)
	}
	if pools.OrchestratorVersion != nil {
		orchestratorVersion := *pools.OrchestratorVersion
		result.Properties.OrchestratorVersion = &orchestratorVersion
	}
	if pools.OsDiskSizeGB != nil {
		osDiskSizeGB := *pools.OsDiskSizeGB
		result.Properties.OsDiskSizeGB = &osDiskSizeGB
	}
	if pools.OsDiskType != nil {
		osDiskType := *pools.OsDiskType
		result.Properties.OsDiskType = &osDiskType
	}
	if pools.OsSKU != nil {
		osSKU := *pools.OsSKU
		result.Properties.OsSKU = &osSKU
	}
	if pools.OsType != nil {
		osType := *pools.OsType
		result.Properties.OsType = &osType
	}
	if pools.PodSubnetIDReference != nil {
		podSubnetIDARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*pools.PodSubnetIDReference)
		if err != nil {
			return nil, err
		}
		podSubnetID := podSubnetIDARMID
		result.Properties.PodSubnetID = &podSubnetID
	}
	if pools.ProximityPlacementGroupID != nil {
		proximityPlacementGroupID := *pools.ProximityPlacementGroupID
		result.Properties.ProximityPlacementGroupID = &proximityPlacementGroupID
	}
	if pools.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := *pools.ScaleSetEvictionPolicy
		result.Properties.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	}
	if pools.ScaleSetPriority != nil {
		scaleSetPriority := *pools.ScaleSetPriority
		result.Properties.ScaleSetPriority = &scaleSetPriority
	}
	if pools.SpotMaxPrice != nil {
		spotMaxPrice := *pools.SpotMaxPrice
		result.Properties.SpotMaxPrice = &spotMaxPrice
	}
	if pools.Tags != nil {
		result.Properties.Tags = make(map[string]string)
		for key, value := range pools.Tags {
			result.Properties.Tags[key] = value
		}
	}
	if pools.Type != nil {
		typeVar := *pools.Type
		result.Properties.Type = &typeVar
	}
	if pools.UpgradeSettings != nil {
		upgradeSettingsARM, err := (*pools.UpgradeSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		upgradeSettings := upgradeSettingsARM.(AgentPoolUpgradeSettingsARM)
		result.Properties.UpgradeSettings = &upgradeSettings
	}
	if pools.VmSize != nil {
		vmSize := *pools.VmSize
		result.Properties.VmSize = &vmSize
	}
	if pools.VnetSubnetIDReference != nil {
		vnetSubnetIDARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*pools.VnetSubnetIDReference)
		if err != nil {
			return nil, err
		}
		vnetSubnetID := vnetSubnetIDARMID
		result.Properties.VnetSubnetID = &vnetSubnetID
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (pools *ManagedClustersAgentPools_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedClustersAgentPools_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (pools *ManagedClustersAgentPools_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedClustersAgentPools_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedClustersAgentPools_SpecARM, got %T", armInput)
	}

	// Set property ‘AvailabilityZones’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AvailabilityZones {
			pools.AvailabilityZones = append(pools.AvailabilityZones, item)
		}
	}

	// Set property ‘AzureName’:
	pools.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Count’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Count != nil {
			count := *typedInput.Properties.Count
			pools.Count = &count
		}
	}

	// Set property ‘EnableAutoScaling’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableAutoScaling != nil {
			enableAutoScaling := *typedInput.Properties.EnableAutoScaling
			pools.EnableAutoScaling = &enableAutoScaling
		}
	}

	// Set property ‘EnableEncryptionAtHost’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableEncryptionAtHost != nil {
			enableEncryptionAtHost := *typedInput.Properties.EnableEncryptionAtHost
			pools.EnableEncryptionAtHost = &enableEncryptionAtHost
		}
	}

	// Set property ‘EnableFIPS’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableFIPS != nil {
			enableFIPS := *typedInput.Properties.EnableFIPS
			pools.EnableFIPS = &enableFIPS
		}
	}

	// Set property ‘EnableNodePublicIP’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableNodePublicIP != nil {
			enableNodePublicIP := *typedInput.Properties.EnableNodePublicIP
			pools.EnableNodePublicIP = &enableNodePublicIP
		}
	}

	// Set property ‘EnableUltraSSD’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableUltraSSD != nil {
			enableUltraSSD := *typedInput.Properties.EnableUltraSSD
			pools.EnableUltraSSD = &enableUltraSSD
		}
	}

	// Set property ‘GpuInstanceProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GpuInstanceProfile != nil {
			gpuInstanceProfile := *typedInput.Properties.GpuInstanceProfile
			pools.GpuInstanceProfile = &gpuInstanceProfile
		}
	}

	// Set property ‘KubeletConfig’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KubeletConfig != nil {
			var kubeletConfig1 KubeletConfig
			err := kubeletConfig1.PopulateFromARM(owner, *typedInput.Properties.KubeletConfig)
			if err != nil {
				return err
			}
			kubeletConfig := kubeletConfig1
			pools.KubeletConfig = &kubeletConfig
		}
	}

	// Set property ‘KubeletDiskType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KubeletDiskType != nil {
			kubeletDiskType := *typedInput.Properties.KubeletDiskType
			pools.KubeletDiskType = &kubeletDiskType
		}
	}

	// Set property ‘LinuxOSConfig’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinuxOSConfig != nil {
			var linuxOSConfig1 LinuxOSConfig
			err := linuxOSConfig1.PopulateFromARM(owner, *typedInput.Properties.LinuxOSConfig)
			if err != nil {
				return err
			}
			linuxOSConfig := linuxOSConfig1
			pools.LinuxOSConfig = &linuxOSConfig
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		pools.Location = &location
	}

	// Set property ‘MaxCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxCount != nil {
			maxCount := *typedInput.Properties.MaxCount
			pools.MaxCount = &maxCount
		}
	}

	// Set property ‘MaxPods’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxPods != nil {
			maxPods := *typedInput.Properties.MaxPods
			pools.MaxPods = &maxPods
		}
	}

	// Set property ‘MinCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinCount != nil {
			minCount := *typedInput.Properties.MinCount
			pools.MinCount = &minCount
		}
	}

	// Set property ‘Mode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Mode != nil {
			mode := *typedInput.Properties.Mode
			pools.Mode = &mode
		}
	}

	// Set property ‘NodeLabels’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NodeLabels != nil {
			pools.NodeLabels = make(map[string]string)
			for key, value := range typedInput.Properties.NodeLabels {
				pools.NodeLabels[key] = value
			}
		}
	}

	// no assignment for property ‘NodePublicIPPrefixIDReference’

	// Set property ‘NodeTaints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NodeTaints {
			pools.NodeTaints = append(pools.NodeTaints, item)
		}
	}

	// Set property ‘OrchestratorVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OrchestratorVersion != nil {
			orchestratorVersion := *typedInput.Properties.OrchestratorVersion
			pools.OrchestratorVersion = &orchestratorVersion
		}
	}

	// Set property ‘OsDiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsDiskSizeGB != nil {
			osDiskSizeGB := *typedInput.Properties.OsDiskSizeGB
			pools.OsDiskSizeGB = &osDiskSizeGB
		}
	}

	// Set property ‘OsDiskType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsDiskType != nil {
			osDiskType := *typedInput.Properties.OsDiskType
			pools.OsDiskType = &osDiskType
		}
	}

	// Set property ‘OsSKU’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsSKU != nil {
			osSKU := *typedInput.Properties.OsSKU
			pools.OsSKU = &osSKU
		}
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsType != nil {
			osType := *typedInput.Properties.OsType
			pools.OsType = &osType
		}
	}

	// Set property ‘Owner’:
	pools.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// no assignment for property ‘PodSubnetIDReference’

	// Set property ‘ProximityPlacementGroupID’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProximityPlacementGroupID != nil {
			proximityPlacementGroupID := *typedInput.Properties.ProximityPlacementGroupID
			pools.ProximityPlacementGroupID = &proximityPlacementGroupID
		}
	}

	// Set property ‘ScaleSetEvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ScaleSetEvictionPolicy != nil {
			scaleSetEvictionPolicy := *typedInput.Properties.ScaleSetEvictionPolicy
			pools.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
		}
	}

	// Set property ‘ScaleSetPriority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ScaleSetPriority != nil {
			scaleSetPriority := *typedInput.Properties.ScaleSetPriority
			pools.ScaleSetPriority = &scaleSetPriority
		}
	}

	// Set property ‘SpotMaxPrice’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SpotMaxPrice != nil {
			spotMaxPrice := *typedInput.Properties.SpotMaxPrice
			pools.SpotMaxPrice = &spotMaxPrice
		}
	}

	// Set property ‘Tags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tags != nil {
			pools.Tags = make(map[string]string)
			for key, value := range typedInput.Properties.Tags {
				pools.Tags[key] = value
			}
		}
	}

	// Set property ‘Type’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Type != nil {
			typeVar := *typedInput.Properties.Type
			pools.Type = &typeVar
		}
	}

	// Set property ‘UpgradeSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpgradeSettings != nil {
			var upgradeSettings1 AgentPoolUpgradeSettings
			err := upgradeSettings1.PopulateFromARM(owner, *typedInput.Properties.UpgradeSettings)
			if err != nil {
				return err
			}
			upgradeSettings := upgradeSettings1
			pools.UpgradeSettings = &upgradeSettings
		}
	}

	// Set property ‘VmSize’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VmSize != nil {
			vmSize := *typedInput.Properties.VmSize
			pools.VmSize = &vmSize
		}
	}

	// no assignment for property ‘VnetSubnetIDReference’

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &ManagedClustersAgentPools_Spec{}

// ConvertSpecFrom populates our ManagedClustersAgentPools_Spec from the provided source
func (pools *ManagedClustersAgentPools_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210501s.ManagedClustersAgentPools_Spec)
	if ok {
		// Populate our instance from source
		return pools.AssignPropertiesFromManagedClustersAgentPoolsSpec(src)
	}

	// Convert to an intermediate form
	src = &v20210501s.ManagedClustersAgentPools_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = pools.AssignPropertiesFromManagedClustersAgentPoolsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our ManagedClustersAgentPools_Spec
func (pools *ManagedClustersAgentPools_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210501s.ManagedClustersAgentPools_Spec)
	if ok {
		// Populate destination from our instance
		return pools.AssignPropertiesToManagedClustersAgentPoolsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210501s.ManagedClustersAgentPools_Spec{}
	err := pools.AssignPropertiesToManagedClustersAgentPoolsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromManagedClustersAgentPoolsSpec populates our ManagedClustersAgentPools_Spec from the provided source ManagedClustersAgentPools_Spec
func (pools *ManagedClustersAgentPools_Spec) AssignPropertiesFromManagedClustersAgentPoolsSpec(source *v20210501s.ManagedClustersAgentPools_Spec) error {

	// AvailabilityZones
	pools.AvailabilityZones = genruntime.CloneSliceOfString(source.AvailabilityZones)

	// AzureName
	pools.AzureName = source.AzureName

	// Count
	pools.Count = genruntime.ClonePointerToInt(source.Count)

	// EnableAutoScaling
	if source.EnableAutoScaling != nil {
		enableAutoScaling := *source.EnableAutoScaling
		pools.EnableAutoScaling = &enableAutoScaling
	} else {
		pools.EnableAutoScaling = nil
	}

	// EnableEncryptionAtHost
	if source.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *source.EnableEncryptionAtHost
		pools.EnableEncryptionAtHost = &enableEncryptionAtHost
	} else {
		pools.EnableEncryptionAtHost = nil
	}

	// EnableFIPS
	if source.EnableFIPS != nil {
		enableFIPS := *source.EnableFIPS
		pools.EnableFIPS = &enableFIPS
	} else {
		pools.EnableFIPS = nil
	}

	// EnableNodePublicIP
	if source.EnableNodePublicIP != nil {
		enableNodePublicIP := *source.EnableNodePublicIP
		pools.EnableNodePublicIP = &enableNodePublicIP
	} else {
		pools.EnableNodePublicIP = nil
	}

	// EnableUltraSSD
	if source.EnableUltraSSD != nil {
		enableUltraSSD := *source.EnableUltraSSD
		pools.EnableUltraSSD = &enableUltraSSD
	} else {
		pools.EnableUltraSSD = nil
	}

	// GpuInstanceProfile
	if source.GpuInstanceProfile != nil {
		gpuInstanceProfile := ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile(*source.GpuInstanceProfile)
		pools.GpuInstanceProfile = &gpuInstanceProfile
	} else {
		pools.GpuInstanceProfile = nil
	}

	// KubeletConfig
	if source.KubeletConfig != nil {
		var kubeletConfig KubeletConfig
		err := kubeletConfig.AssignPropertiesFromKubeletConfig(source.KubeletConfig)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKubeletConfig() to populate field KubeletConfig")
		}
		pools.KubeletConfig = &kubeletConfig
	} else {
		pools.KubeletConfig = nil
	}

	// KubeletDiskType
	if source.KubeletDiskType != nil {
		kubeletDiskType := ManagedClusterAgentPoolProfilePropertiesKubeletDiskType(*source.KubeletDiskType)
		pools.KubeletDiskType = &kubeletDiskType
	} else {
		pools.KubeletDiskType = nil
	}

	// LinuxOSConfig
	if source.LinuxOSConfig != nil {
		var linuxOSConfig LinuxOSConfig
		err := linuxOSConfig.AssignPropertiesFromLinuxOSConfig(source.LinuxOSConfig)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromLinuxOSConfig() to populate field LinuxOSConfig")
		}
		pools.LinuxOSConfig = &linuxOSConfig
	} else {
		pools.LinuxOSConfig = nil
	}

	// Location
	pools.Location = genruntime.ClonePointerToString(source.Location)

	// MaxCount
	pools.MaxCount = genruntime.ClonePointerToInt(source.MaxCount)

	// MaxPods
	pools.MaxPods = genruntime.ClonePointerToInt(source.MaxPods)

	// MinCount
	pools.MinCount = genruntime.ClonePointerToInt(source.MinCount)

	// Mode
	if source.Mode != nil {
		mode := ManagedClusterAgentPoolProfilePropertiesMode(*source.Mode)
		pools.Mode = &mode
	} else {
		pools.Mode = nil
	}

	// NodeLabels
	pools.NodeLabels = genruntime.CloneMapOfStringToString(source.NodeLabels)

	// NodePublicIPPrefixIDReference
	if source.NodePublicIPPrefixIDReference != nil {
		nodePublicIPPrefixIDReference := source.NodePublicIPPrefixIDReference.Copy()
		pools.NodePublicIPPrefixIDReference = &nodePublicIPPrefixIDReference
	} else {
		pools.NodePublicIPPrefixIDReference = nil
	}

	// NodeTaints
	pools.NodeTaints = genruntime.CloneSliceOfString(source.NodeTaints)

	// OrchestratorVersion
	pools.OrchestratorVersion = genruntime.ClonePointerToString(source.OrchestratorVersion)

	// OsDiskSizeGB
	if source.OsDiskSizeGB != nil {
		osDiskSizeGB := *source.OsDiskSizeGB
		pools.OsDiskSizeGB = &osDiskSizeGB
	} else {
		pools.OsDiskSizeGB = nil
	}

	// OsDiskType
	if source.OsDiskType != nil {
		osDiskType := ManagedClusterAgentPoolProfilePropertiesOsDiskType(*source.OsDiskType)
		pools.OsDiskType = &osDiskType
	} else {
		pools.OsDiskType = nil
	}

	// OsSKU
	if source.OsSKU != nil {
		osSKU := ManagedClusterAgentPoolProfilePropertiesOsSKU(*source.OsSKU)
		pools.OsSKU = &osSKU
	} else {
		pools.OsSKU = nil
	}

	// OsType
	if source.OsType != nil {
		osType := ManagedClusterAgentPoolProfilePropertiesOsType(*source.OsType)
		pools.OsType = &osType
	} else {
		pools.OsType = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		pools.Owner = &owner
	} else {
		pools.Owner = nil
	}

	// PodSubnetIDReference
	if source.PodSubnetIDReference != nil {
		podSubnetIDReference := source.PodSubnetIDReference.Copy()
		pools.PodSubnetIDReference = &podSubnetIDReference
	} else {
		pools.PodSubnetIDReference = nil
	}

	// ProximityPlacementGroupID
	pools.ProximityPlacementGroupID = genruntime.ClonePointerToString(source.ProximityPlacementGroupID)

	// ScaleSetEvictionPolicy
	if source.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy(*source.ScaleSetEvictionPolicy)
		pools.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	} else {
		pools.ScaleSetEvictionPolicy = nil
	}

	// ScaleSetPriority
	if source.ScaleSetPriority != nil {
		scaleSetPriority := ManagedClusterAgentPoolProfilePropertiesScaleSetPriority(*source.ScaleSetPriority)
		pools.ScaleSetPriority = &scaleSetPriority
	} else {
		pools.ScaleSetPriority = nil
	}

	// SpotMaxPrice
	if source.SpotMaxPrice != nil {
		spotMaxPrice := *source.SpotMaxPrice
		pools.SpotMaxPrice = &spotMaxPrice
	} else {
		pools.SpotMaxPrice = nil
	}

	// Tags
	pools.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	if source.Type != nil {
		typeVar := ManagedClusterAgentPoolProfilePropertiesType(*source.Type)
		pools.Type = &typeVar
	} else {
		pools.Type = nil
	}

	// UpgradeSettings
	if source.UpgradeSettings != nil {
		var upgradeSetting AgentPoolUpgradeSettings
		err := upgradeSetting.AssignPropertiesFromAgentPoolUpgradeSettings(source.UpgradeSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAgentPoolUpgradeSettings() to populate field UpgradeSettings")
		}
		pools.UpgradeSettings = &upgradeSetting
	} else {
		pools.UpgradeSettings = nil
	}

	// VmSize
	pools.VmSize = genruntime.ClonePointerToString(source.VmSize)

	// VnetSubnetIDReference
	if source.VnetSubnetIDReference != nil {
		vnetSubnetIDReference := source.VnetSubnetIDReference.Copy()
		pools.VnetSubnetIDReference = &vnetSubnetIDReference
	} else {
		pools.VnetSubnetIDReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedClustersAgentPoolsSpec populates the provided destination ManagedClustersAgentPools_Spec from our ManagedClustersAgentPools_Spec
func (pools *ManagedClustersAgentPools_Spec) AssignPropertiesToManagedClustersAgentPoolsSpec(destination *v20210501s.ManagedClustersAgentPools_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AvailabilityZones
	destination.AvailabilityZones = genruntime.CloneSliceOfString(pools.AvailabilityZones)

	// AzureName
	destination.AzureName = pools.AzureName

	// Count
	destination.Count = genruntime.ClonePointerToInt(pools.Count)

	// EnableAutoScaling
	if pools.EnableAutoScaling != nil {
		enableAutoScaling := *pools.EnableAutoScaling
		destination.EnableAutoScaling = &enableAutoScaling
	} else {
		destination.EnableAutoScaling = nil
	}

	// EnableEncryptionAtHost
	if pools.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *pools.EnableEncryptionAtHost
		destination.EnableEncryptionAtHost = &enableEncryptionAtHost
	} else {
		destination.EnableEncryptionAtHost = nil
	}

	// EnableFIPS
	if pools.EnableFIPS != nil {
		enableFIPS := *pools.EnableFIPS
		destination.EnableFIPS = &enableFIPS
	} else {
		destination.EnableFIPS = nil
	}

	// EnableNodePublicIP
	if pools.EnableNodePublicIP != nil {
		enableNodePublicIP := *pools.EnableNodePublicIP
		destination.EnableNodePublicIP = &enableNodePublicIP
	} else {
		destination.EnableNodePublicIP = nil
	}

	// EnableUltraSSD
	if pools.EnableUltraSSD != nil {
		enableUltraSSD := *pools.EnableUltraSSD
		destination.EnableUltraSSD = &enableUltraSSD
	} else {
		destination.EnableUltraSSD = nil
	}

	// GpuInstanceProfile
	if pools.GpuInstanceProfile != nil {
		gpuInstanceProfile := string(*pools.GpuInstanceProfile)
		destination.GpuInstanceProfile = &gpuInstanceProfile
	} else {
		destination.GpuInstanceProfile = nil
	}

	// KubeletConfig
	if pools.KubeletConfig != nil {
		var kubeletConfig v20210501s.KubeletConfig
		err := pools.KubeletConfig.AssignPropertiesToKubeletConfig(&kubeletConfig)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKubeletConfig() to populate field KubeletConfig")
		}
		destination.KubeletConfig = &kubeletConfig
	} else {
		destination.KubeletConfig = nil
	}

	// KubeletDiskType
	if pools.KubeletDiskType != nil {
		kubeletDiskType := string(*pools.KubeletDiskType)
		destination.KubeletDiskType = &kubeletDiskType
	} else {
		destination.KubeletDiskType = nil
	}

	// LinuxOSConfig
	if pools.LinuxOSConfig != nil {
		var linuxOSConfig v20210501s.LinuxOSConfig
		err := pools.LinuxOSConfig.AssignPropertiesToLinuxOSConfig(&linuxOSConfig)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToLinuxOSConfig() to populate field LinuxOSConfig")
		}
		destination.LinuxOSConfig = &linuxOSConfig
	} else {
		destination.LinuxOSConfig = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(pools.Location)

	// MaxCount
	destination.MaxCount = genruntime.ClonePointerToInt(pools.MaxCount)

	// MaxPods
	destination.MaxPods = genruntime.ClonePointerToInt(pools.MaxPods)

	// MinCount
	destination.MinCount = genruntime.ClonePointerToInt(pools.MinCount)

	// Mode
	if pools.Mode != nil {
		mode := string(*pools.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// NodeLabels
	destination.NodeLabels = genruntime.CloneMapOfStringToString(pools.NodeLabels)

	// NodePublicIPPrefixIDReference
	if pools.NodePublicIPPrefixIDReference != nil {
		nodePublicIPPrefixIDReference := pools.NodePublicIPPrefixIDReference.Copy()
		destination.NodePublicIPPrefixIDReference = &nodePublicIPPrefixIDReference
	} else {
		destination.NodePublicIPPrefixIDReference = nil
	}

	// NodeTaints
	destination.NodeTaints = genruntime.CloneSliceOfString(pools.NodeTaints)

	// OrchestratorVersion
	destination.OrchestratorVersion = genruntime.ClonePointerToString(pools.OrchestratorVersion)

	// OriginalVersion
	destination.OriginalVersion = pools.OriginalVersion()

	// OsDiskSizeGB
	if pools.OsDiskSizeGB != nil {
		osDiskSizeGB := *pools.OsDiskSizeGB
		destination.OsDiskSizeGB = &osDiskSizeGB
	} else {
		destination.OsDiskSizeGB = nil
	}

	// OsDiskType
	if pools.OsDiskType != nil {
		osDiskType := string(*pools.OsDiskType)
		destination.OsDiskType = &osDiskType
	} else {
		destination.OsDiskType = nil
	}

	// OsSKU
	if pools.OsSKU != nil {
		osSKU := string(*pools.OsSKU)
		destination.OsSKU = &osSKU
	} else {
		destination.OsSKU = nil
	}

	// OsType
	if pools.OsType != nil {
		osType := string(*pools.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// Owner
	if pools.Owner != nil {
		owner := pools.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PodSubnetIDReference
	if pools.PodSubnetIDReference != nil {
		podSubnetIDReference := pools.PodSubnetIDReference.Copy()
		destination.PodSubnetIDReference = &podSubnetIDReference
	} else {
		destination.PodSubnetIDReference = nil
	}

	// ProximityPlacementGroupID
	destination.ProximityPlacementGroupID = genruntime.ClonePointerToString(pools.ProximityPlacementGroupID)

	// ScaleSetEvictionPolicy
	if pools.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := string(*pools.ScaleSetEvictionPolicy)
		destination.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	} else {
		destination.ScaleSetEvictionPolicy = nil
	}

	// ScaleSetPriority
	if pools.ScaleSetPriority != nil {
		scaleSetPriority := string(*pools.ScaleSetPriority)
		destination.ScaleSetPriority = &scaleSetPriority
	} else {
		destination.ScaleSetPriority = nil
	}

	// SpotMaxPrice
	if pools.SpotMaxPrice != nil {
		spotMaxPrice := *pools.SpotMaxPrice
		destination.SpotMaxPrice = &spotMaxPrice
	} else {
		destination.SpotMaxPrice = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(pools.Tags)

	// Type
	if pools.Type != nil {
		typeVar := string(*pools.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UpgradeSettings
	if pools.UpgradeSettings != nil {
		var upgradeSetting v20210501s.AgentPoolUpgradeSettings
		err := pools.UpgradeSettings.AssignPropertiesToAgentPoolUpgradeSettings(&upgradeSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAgentPoolUpgradeSettings() to populate field UpgradeSettings")
		}
		destination.UpgradeSettings = &upgradeSetting
	} else {
		destination.UpgradeSettings = nil
	}

	// VmSize
	destination.VmSize = genruntime.ClonePointerToString(pools.VmSize)

	// VnetSubnetIDReference
	if pools.VnetSubnetIDReference != nil {
		vnetSubnetIDReference := pools.VnetSubnetIDReference.Copy()
		destination.VnetSubnetIDReference = &vnetSubnetIDReference
	} else {
		destination.VnetSubnetIDReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (pools *ManagedClustersAgentPools_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (pools *ManagedClustersAgentPools_Spec) SetAzureName(azureName string) {
	pools.AzureName = azureName
}

// Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/definitions/AgentPoolUpgradeSettings
type AgentPoolUpgradeSettings struct {
	// MaxSurge: This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it
	// is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded
	// up. If not specified, the default is 1. For more information, including best practices, see:
	// https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
	MaxSurge *string `json:"maxSurge,omitempty"`
}

var _ genruntime.ARMTransformer = &AgentPoolUpgradeSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *AgentPoolUpgradeSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	var result AgentPoolUpgradeSettingsARM

	// Set property ‘MaxSurge’:
	if settings.MaxSurge != nil {
		maxSurge := *settings.MaxSurge
		result.MaxSurge = &maxSurge
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *AgentPoolUpgradeSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AgentPoolUpgradeSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *AgentPoolUpgradeSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AgentPoolUpgradeSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AgentPoolUpgradeSettingsARM, got %T", armInput)
	}

	// Set property ‘MaxSurge’:
	if typedInput.MaxSurge != nil {
		maxSurge := *typedInput.MaxSurge
		settings.MaxSurge = &maxSurge
	}

	// No error
	return nil
}

// AssignPropertiesFromAgentPoolUpgradeSettings populates our AgentPoolUpgradeSettings from the provided source AgentPoolUpgradeSettings
func (settings *AgentPoolUpgradeSettings) AssignPropertiesFromAgentPoolUpgradeSettings(source *v20210501s.AgentPoolUpgradeSettings) error {

	// MaxSurge
	settings.MaxSurge = genruntime.ClonePointerToString(source.MaxSurge)

	// No error
	return nil
}

// AssignPropertiesToAgentPoolUpgradeSettings populates the provided destination AgentPoolUpgradeSettings from our AgentPoolUpgradeSettings
func (settings *AgentPoolUpgradeSettings) AssignPropertiesToAgentPoolUpgradeSettings(destination *v20210501s.AgentPoolUpgradeSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxSurge
	destination.MaxSurge = genruntime.ClonePointerToString(settings.MaxSurge)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AgentPoolUpgradeSettings_Status struct {
	// MaxSurge: This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it
	// is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded
	// up. If not specified, the default is 1. For more information, including best practices, see:
	// https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
	MaxSurge *string `json:"maxSurge,omitempty"`
}

var _ genruntime.FromARMConverter = &AgentPoolUpgradeSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *AgentPoolUpgradeSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AgentPoolUpgradeSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *AgentPoolUpgradeSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AgentPoolUpgradeSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AgentPoolUpgradeSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘MaxSurge’:
	if typedInput.MaxSurge != nil {
		maxSurge := *typedInput.MaxSurge
		settings.MaxSurge = &maxSurge
	}

	// No error
	return nil
}

// AssignPropertiesFromAgentPoolUpgradeSettingsStatus populates our AgentPoolUpgradeSettings_Status from the provided source AgentPoolUpgradeSettings_Status
func (settings *AgentPoolUpgradeSettings_Status) AssignPropertiesFromAgentPoolUpgradeSettingsStatus(source *v20210501s.AgentPoolUpgradeSettings_Status) error {

	// MaxSurge
	settings.MaxSurge = genruntime.ClonePointerToString(source.MaxSurge)

	// No error
	return nil
}

// AssignPropertiesToAgentPoolUpgradeSettingsStatus populates the provided destination AgentPoolUpgradeSettings_Status from our AgentPoolUpgradeSettings_Status
func (settings *AgentPoolUpgradeSettings_Status) AssignPropertiesToAgentPoolUpgradeSettingsStatus(destination *v20210501s.AgentPoolUpgradeSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxSurge
	destination.MaxSurge = genruntime.ClonePointerToString(settings.MaxSurge)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/definitions/KubeletConfig
type KubeletConfig struct {
	// AllowedUnsafeSysctls: Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty"`

	// +kubebuilder:validation:Minimum=2
	// ContainerLogMaxFiles: The maximum number of container log files that can be present for a container. The number must be
	// ≥ 2.
	ContainerLogMaxFiles *int `json:"containerLogMaxFiles,omitempty"`

	// ContainerLogMaxSizeMB: The maximum size (e.g. 10Mi) of container log file before it is rotated.
	ContainerLogMaxSizeMB *int `json:"containerLogMaxSizeMB,omitempty"`

	// CpuCfsQuota: The default is true.
	CpuCfsQuota *bool `json:"cpuCfsQuota,omitempty"`

	// CpuCfsQuotaPeriod: The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and
	// a unit suffix. For example: '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
	CpuCfsQuotaPeriod *string `json:"cpuCfsQuotaPeriod,omitempty"`

	// CpuManagerPolicy: The default is 'none'. See [Kubernetes CPU management
	// policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more
	// information. Allowed values are 'none' and 'static'.
	CpuManagerPolicy *string `json:"cpuManagerPolicy,omitempty"`

	// FailSwapOn: If set to true it will make the Kubelet fail to start if swap is enabled on the node.
	FailSwapOn *bool `json:"failSwapOn,omitempty"`

	// ImageGcHighThreshold: To disable image garbage collection, set to 100. The default is 85%
	ImageGcHighThreshold *int `json:"imageGcHighThreshold,omitempty"`

	// ImageGcLowThreshold: This cannot be set higher than imageGcHighThreshold. The default is 80%
	ImageGcLowThreshold *int `json:"imageGcLowThreshold,omitempty"`

	// PodMaxPids: The maximum number of processes per pod.
	PodMaxPids *int `json:"podMaxPids,omitempty"`

	// TopologyManagerPolicy: For more information see [Kubernetes Topology
	// Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is 'none'. Allowed values
	// are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
	TopologyManagerPolicy *string `json:"topologyManagerPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &KubeletConfig{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (config *KubeletConfig) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if config == nil {
		return nil, nil
	}
	var result KubeletConfigARM

	// Set property ‘AllowedUnsafeSysctls’:
	for _, item := range config.AllowedUnsafeSysctls {
		result.AllowedUnsafeSysctls = append(result.AllowedUnsafeSysctls, item)
	}

	// Set property ‘ContainerLogMaxFiles’:
	if config.ContainerLogMaxFiles != nil {
		containerLogMaxFiles := *config.ContainerLogMaxFiles
		result.ContainerLogMaxFiles = &containerLogMaxFiles
	}

	// Set property ‘ContainerLogMaxSizeMB’:
	if config.ContainerLogMaxSizeMB != nil {
		containerLogMaxSizeMB := *config.ContainerLogMaxSizeMB
		result.ContainerLogMaxSizeMB = &containerLogMaxSizeMB
	}

	// Set property ‘CpuCfsQuota’:
	if config.CpuCfsQuota != nil {
		cpuCfsQuota := *config.CpuCfsQuota
		result.CpuCfsQuota = &cpuCfsQuota
	}

	// Set property ‘CpuCfsQuotaPeriod’:
	if config.CpuCfsQuotaPeriod != nil {
		cpuCfsQuotaPeriod := *config.CpuCfsQuotaPeriod
		result.CpuCfsQuotaPeriod = &cpuCfsQuotaPeriod
	}

	// Set property ‘CpuManagerPolicy’:
	if config.CpuManagerPolicy != nil {
		cpuManagerPolicy := *config.CpuManagerPolicy
		result.CpuManagerPolicy = &cpuManagerPolicy
	}

	// Set property ‘FailSwapOn’:
	if config.FailSwapOn != nil {
		failSwapOn := *config.FailSwapOn
		result.FailSwapOn = &failSwapOn
	}

	// Set property ‘ImageGcHighThreshold’:
	if config.ImageGcHighThreshold != nil {
		imageGcHighThreshold := *config.ImageGcHighThreshold
		result.ImageGcHighThreshold = &imageGcHighThreshold
	}

	// Set property ‘ImageGcLowThreshold’:
	if config.ImageGcLowThreshold != nil {
		imageGcLowThreshold := *config.ImageGcLowThreshold
		result.ImageGcLowThreshold = &imageGcLowThreshold
	}

	// Set property ‘PodMaxPids’:
	if config.PodMaxPids != nil {
		podMaxPids := *config.PodMaxPids
		result.PodMaxPids = &podMaxPids
	}

	// Set property ‘TopologyManagerPolicy’:
	if config.TopologyManagerPolicy != nil {
		topologyManagerPolicy := *config.TopologyManagerPolicy
		result.TopologyManagerPolicy = &topologyManagerPolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (config *KubeletConfig) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KubeletConfigARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (config *KubeletConfig) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KubeletConfigARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KubeletConfigARM, got %T", armInput)
	}

	// Set property ‘AllowedUnsafeSysctls’:
	for _, item := range typedInput.AllowedUnsafeSysctls {
		config.AllowedUnsafeSysctls = append(config.AllowedUnsafeSysctls, item)
	}

	// Set property ‘ContainerLogMaxFiles’:
	if typedInput.ContainerLogMaxFiles != nil {
		containerLogMaxFiles := *typedInput.ContainerLogMaxFiles
		config.ContainerLogMaxFiles = &containerLogMaxFiles
	}

	// Set property ‘ContainerLogMaxSizeMB’:
	if typedInput.ContainerLogMaxSizeMB != nil {
		containerLogMaxSizeMB := *typedInput.ContainerLogMaxSizeMB
		config.ContainerLogMaxSizeMB = &containerLogMaxSizeMB
	}

	// Set property ‘CpuCfsQuota’:
	if typedInput.CpuCfsQuota != nil {
		cpuCfsQuota := *typedInput.CpuCfsQuota
		config.CpuCfsQuota = &cpuCfsQuota
	}

	// Set property ‘CpuCfsQuotaPeriod’:
	if typedInput.CpuCfsQuotaPeriod != nil {
		cpuCfsQuotaPeriod := *typedInput.CpuCfsQuotaPeriod
		config.CpuCfsQuotaPeriod = &cpuCfsQuotaPeriod
	}

	// Set property ‘CpuManagerPolicy’:
	if typedInput.CpuManagerPolicy != nil {
		cpuManagerPolicy := *typedInput.CpuManagerPolicy
		config.CpuManagerPolicy = &cpuManagerPolicy
	}

	// Set property ‘FailSwapOn’:
	if typedInput.FailSwapOn != nil {
		failSwapOn := *typedInput.FailSwapOn
		config.FailSwapOn = &failSwapOn
	}

	// Set property ‘ImageGcHighThreshold’:
	if typedInput.ImageGcHighThreshold != nil {
		imageGcHighThreshold := *typedInput.ImageGcHighThreshold
		config.ImageGcHighThreshold = &imageGcHighThreshold
	}

	// Set property ‘ImageGcLowThreshold’:
	if typedInput.ImageGcLowThreshold != nil {
		imageGcLowThreshold := *typedInput.ImageGcLowThreshold
		config.ImageGcLowThreshold = &imageGcLowThreshold
	}

	// Set property ‘PodMaxPids’:
	if typedInput.PodMaxPids != nil {
		podMaxPids := *typedInput.PodMaxPids
		config.PodMaxPids = &podMaxPids
	}

	// Set property ‘TopologyManagerPolicy’:
	if typedInput.TopologyManagerPolicy != nil {
		topologyManagerPolicy := *typedInput.TopologyManagerPolicy
		config.TopologyManagerPolicy = &topologyManagerPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromKubeletConfig populates our KubeletConfig from the provided source KubeletConfig
func (config *KubeletConfig) AssignPropertiesFromKubeletConfig(source *v20210501s.KubeletConfig) error {

	// AllowedUnsafeSysctls
	config.AllowedUnsafeSysctls = genruntime.CloneSliceOfString(source.AllowedUnsafeSysctls)

	// ContainerLogMaxFiles
	if source.ContainerLogMaxFiles != nil {
		containerLogMaxFile := *source.ContainerLogMaxFiles
		config.ContainerLogMaxFiles = &containerLogMaxFile
	} else {
		config.ContainerLogMaxFiles = nil
	}

	// ContainerLogMaxSizeMB
	config.ContainerLogMaxSizeMB = genruntime.ClonePointerToInt(source.ContainerLogMaxSizeMB)

	// CpuCfsQuota
	if source.CpuCfsQuota != nil {
		cpuCfsQuotum := *source.CpuCfsQuota
		config.CpuCfsQuota = &cpuCfsQuotum
	} else {
		config.CpuCfsQuota = nil
	}

	// CpuCfsQuotaPeriod
	config.CpuCfsQuotaPeriod = genruntime.ClonePointerToString(source.CpuCfsQuotaPeriod)

	// CpuManagerPolicy
	config.CpuManagerPolicy = genruntime.ClonePointerToString(source.CpuManagerPolicy)

	// FailSwapOn
	if source.FailSwapOn != nil {
		failSwapOn := *source.FailSwapOn
		config.FailSwapOn = &failSwapOn
	} else {
		config.FailSwapOn = nil
	}

	// ImageGcHighThreshold
	config.ImageGcHighThreshold = genruntime.ClonePointerToInt(source.ImageGcHighThreshold)

	// ImageGcLowThreshold
	config.ImageGcLowThreshold = genruntime.ClonePointerToInt(source.ImageGcLowThreshold)

	// PodMaxPids
	config.PodMaxPids = genruntime.ClonePointerToInt(source.PodMaxPids)

	// TopologyManagerPolicy
	config.TopologyManagerPolicy = genruntime.ClonePointerToString(source.TopologyManagerPolicy)

	// No error
	return nil
}

// AssignPropertiesToKubeletConfig populates the provided destination KubeletConfig from our KubeletConfig
func (config *KubeletConfig) AssignPropertiesToKubeletConfig(destination *v20210501s.KubeletConfig) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedUnsafeSysctls
	destination.AllowedUnsafeSysctls = genruntime.CloneSliceOfString(config.AllowedUnsafeSysctls)

	// ContainerLogMaxFiles
	if config.ContainerLogMaxFiles != nil {
		containerLogMaxFile := *config.ContainerLogMaxFiles
		destination.ContainerLogMaxFiles = &containerLogMaxFile
	} else {
		destination.ContainerLogMaxFiles = nil
	}

	// ContainerLogMaxSizeMB
	destination.ContainerLogMaxSizeMB = genruntime.ClonePointerToInt(config.ContainerLogMaxSizeMB)

	// CpuCfsQuota
	if config.CpuCfsQuota != nil {
		cpuCfsQuotum := *config.CpuCfsQuota
		destination.CpuCfsQuota = &cpuCfsQuotum
	} else {
		destination.CpuCfsQuota = nil
	}

	// CpuCfsQuotaPeriod
	destination.CpuCfsQuotaPeriod = genruntime.ClonePointerToString(config.CpuCfsQuotaPeriod)

	// CpuManagerPolicy
	destination.CpuManagerPolicy = genruntime.ClonePointerToString(config.CpuManagerPolicy)

	// FailSwapOn
	if config.FailSwapOn != nil {
		failSwapOn := *config.FailSwapOn
		destination.FailSwapOn = &failSwapOn
	} else {
		destination.FailSwapOn = nil
	}

	// ImageGcHighThreshold
	destination.ImageGcHighThreshold = genruntime.ClonePointerToInt(config.ImageGcHighThreshold)

	// ImageGcLowThreshold
	destination.ImageGcLowThreshold = genruntime.ClonePointerToInt(config.ImageGcLowThreshold)

	// PodMaxPids
	destination.PodMaxPids = genruntime.ClonePointerToInt(config.PodMaxPids)

	// TopologyManagerPolicy
	destination.TopologyManagerPolicy = genruntime.ClonePointerToString(config.TopologyManagerPolicy)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KubeletConfig_Status struct {
	// AllowedUnsafeSysctls: Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty"`

	// ContainerLogMaxFiles: The maximum number of container log files that can be present for a container. The number must be
	// ≥ 2.
	ContainerLogMaxFiles *int `json:"containerLogMaxFiles,omitempty"`

	// ContainerLogMaxSizeMB: The maximum size (e.g. 10Mi) of container log file before it is rotated.
	ContainerLogMaxSizeMB *int `json:"containerLogMaxSizeMB,omitempty"`

	// CpuCfsQuota: The default is true.
	CpuCfsQuota *bool `json:"cpuCfsQuota,omitempty"`

	// CpuCfsQuotaPeriod: The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and
	// a unit suffix. For example: '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
	CpuCfsQuotaPeriod *string `json:"cpuCfsQuotaPeriod,omitempty"`

	// CpuManagerPolicy: The default is 'none'. See [Kubernetes CPU management
	// policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more
	// information. Allowed values are 'none' and 'static'.
	CpuManagerPolicy *string `json:"cpuManagerPolicy,omitempty"`

	// FailSwapOn: If set to true it will make the Kubelet fail to start if swap is enabled on the node.
	FailSwapOn *bool `json:"failSwapOn,omitempty"`

	// ImageGcHighThreshold: To disable image garbage collection, set to 100. The default is 85%
	ImageGcHighThreshold *int `json:"imageGcHighThreshold,omitempty"`

	// ImageGcLowThreshold: This cannot be set higher than imageGcHighThreshold. The default is 80%
	ImageGcLowThreshold *int `json:"imageGcLowThreshold,omitempty"`

	// PodMaxPids: The maximum number of processes per pod.
	PodMaxPids *int `json:"podMaxPids,omitempty"`

	// TopologyManagerPolicy: For more information see [Kubernetes Topology
	// Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is 'none'. Allowed values
	// are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
	TopologyManagerPolicy *string `json:"topologyManagerPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &KubeletConfig_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (config *KubeletConfig_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KubeletConfig_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (config *KubeletConfig_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KubeletConfig_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KubeletConfig_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowedUnsafeSysctls’:
	for _, item := range typedInput.AllowedUnsafeSysctls {
		config.AllowedUnsafeSysctls = append(config.AllowedUnsafeSysctls, item)
	}

	// Set property ‘ContainerLogMaxFiles’:
	if typedInput.ContainerLogMaxFiles != nil {
		containerLogMaxFiles := *typedInput.ContainerLogMaxFiles
		config.ContainerLogMaxFiles = &containerLogMaxFiles
	}

	// Set property ‘ContainerLogMaxSizeMB’:
	if typedInput.ContainerLogMaxSizeMB != nil {
		containerLogMaxSizeMB := *typedInput.ContainerLogMaxSizeMB
		config.ContainerLogMaxSizeMB = &containerLogMaxSizeMB
	}

	// Set property ‘CpuCfsQuota’:
	if typedInput.CpuCfsQuota != nil {
		cpuCfsQuota := *typedInput.CpuCfsQuota
		config.CpuCfsQuota = &cpuCfsQuota
	}

	// Set property ‘CpuCfsQuotaPeriod’:
	if typedInput.CpuCfsQuotaPeriod != nil {
		cpuCfsQuotaPeriod := *typedInput.CpuCfsQuotaPeriod
		config.CpuCfsQuotaPeriod = &cpuCfsQuotaPeriod
	}

	// Set property ‘CpuManagerPolicy’:
	if typedInput.CpuManagerPolicy != nil {
		cpuManagerPolicy := *typedInput.CpuManagerPolicy
		config.CpuManagerPolicy = &cpuManagerPolicy
	}

	// Set property ‘FailSwapOn’:
	if typedInput.FailSwapOn != nil {
		failSwapOn := *typedInput.FailSwapOn
		config.FailSwapOn = &failSwapOn
	}

	// Set property ‘ImageGcHighThreshold’:
	if typedInput.ImageGcHighThreshold != nil {
		imageGcHighThreshold := *typedInput.ImageGcHighThreshold
		config.ImageGcHighThreshold = &imageGcHighThreshold
	}

	// Set property ‘ImageGcLowThreshold’:
	if typedInput.ImageGcLowThreshold != nil {
		imageGcLowThreshold := *typedInput.ImageGcLowThreshold
		config.ImageGcLowThreshold = &imageGcLowThreshold
	}

	// Set property ‘PodMaxPids’:
	if typedInput.PodMaxPids != nil {
		podMaxPids := *typedInput.PodMaxPids
		config.PodMaxPids = &podMaxPids
	}

	// Set property ‘TopologyManagerPolicy’:
	if typedInput.TopologyManagerPolicy != nil {
		topologyManagerPolicy := *typedInput.TopologyManagerPolicy
		config.TopologyManagerPolicy = &topologyManagerPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromKubeletConfigStatus populates our KubeletConfig_Status from the provided source KubeletConfig_Status
func (config *KubeletConfig_Status) AssignPropertiesFromKubeletConfigStatus(source *v20210501s.KubeletConfig_Status) error {

	// AllowedUnsafeSysctls
	config.AllowedUnsafeSysctls = genruntime.CloneSliceOfString(source.AllowedUnsafeSysctls)

	// ContainerLogMaxFiles
	config.ContainerLogMaxFiles = genruntime.ClonePointerToInt(source.ContainerLogMaxFiles)

	// ContainerLogMaxSizeMB
	config.ContainerLogMaxSizeMB = genruntime.ClonePointerToInt(source.ContainerLogMaxSizeMB)

	// CpuCfsQuota
	if source.CpuCfsQuota != nil {
		cpuCfsQuotum := *source.CpuCfsQuota
		config.CpuCfsQuota = &cpuCfsQuotum
	} else {
		config.CpuCfsQuota = nil
	}

	// CpuCfsQuotaPeriod
	config.CpuCfsQuotaPeriod = genruntime.ClonePointerToString(source.CpuCfsQuotaPeriod)

	// CpuManagerPolicy
	config.CpuManagerPolicy = genruntime.ClonePointerToString(source.CpuManagerPolicy)

	// FailSwapOn
	if source.FailSwapOn != nil {
		failSwapOn := *source.FailSwapOn
		config.FailSwapOn = &failSwapOn
	} else {
		config.FailSwapOn = nil
	}

	// ImageGcHighThreshold
	config.ImageGcHighThreshold = genruntime.ClonePointerToInt(source.ImageGcHighThreshold)

	// ImageGcLowThreshold
	config.ImageGcLowThreshold = genruntime.ClonePointerToInt(source.ImageGcLowThreshold)

	// PodMaxPids
	config.PodMaxPids = genruntime.ClonePointerToInt(source.PodMaxPids)

	// TopologyManagerPolicy
	config.TopologyManagerPolicy = genruntime.ClonePointerToString(source.TopologyManagerPolicy)

	// No error
	return nil
}

// AssignPropertiesToKubeletConfigStatus populates the provided destination KubeletConfig_Status from our KubeletConfig_Status
func (config *KubeletConfig_Status) AssignPropertiesToKubeletConfigStatus(destination *v20210501s.KubeletConfig_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedUnsafeSysctls
	destination.AllowedUnsafeSysctls = genruntime.CloneSliceOfString(config.AllowedUnsafeSysctls)

	// ContainerLogMaxFiles
	destination.ContainerLogMaxFiles = genruntime.ClonePointerToInt(config.ContainerLogMaxFiles)

	// ContainerLogMaxSizeMB
	destination.ContainerLogMaxSizeMB = genruntime.ClonePointerToInt(config.ContainerLogMaxSizeMB)

	// CpuCfsQuota
	if config.CpuCfsQuota != nil {
		cpuCfsQuotum := *config.CpuCfsQuota
		destination.CpuCfsQuota = &cpuCfsQuotum
	} else {
		destination.CpuCfsQuota = nil
	}

	// CpuCfsQuotaPeriod
	destination.CpuCfsQuotaPeriod = genruntime.ClonePointerToString(config.CpuCfsQuotaPeriod)

	// CpuManagerPolicy
	destination.CpuManagerPolicy = genruntime.ClonePointerToString(config.CpuManagerPolicy)

	// FailSwapOn
	if config.FailSwapOn != nil {
		failSwapOn := *config.FailSwapOn
		destination.FailSwapOn = &failSwapOn
	} else {
		destination.FailSwapOn = nil
	}

	// ImageGcHighThreshold
	destination.ImageGcHighThreshold = genruntime.ClonePointerToInt(config.ImageGcHighThreshold)

	// ImageGcLowThreshold
	destination.ImageGcLowThreshold = genruntime.ClonePointerToInt(config.ImageGcLowThreshold)

	// PodMaxPids
	destination.PodMaxPids = genruntime.ClonePointerToInt(config.PodMaxPids)

	// TopologyManagerPolicy
	destination.TopologyManagerPolicy = genruntime.ClonePointerToString(config.TopologyManagerPolicy)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/definitions/LinuxOSConfig
type LinuxOSConfig struct {
	// SwapFileSizeMB: The size in MB of a swap file that will be created on each node.
	SwapFileSizeMB *int `json:"swapFileSizeMB,omitempty"`

	// Sysctls: Sysctl settings for Linux agent nodes.
	Sysctls *SysctlConfig `json:"sysctls,omitempty"`

	// TransparentHugePageDefrag: Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'. The default is
	// 'madvise'. For more information see [Transparent
	// Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageDefrag *string `json:"transparentHugePageDefrag,omitempty"`

	// TransparentHugePageEnabled: Valid values are 'always', 'madvise', and 'never'. The default is 'always'. For more
	// information see [Transparent
	// Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageEnabled *string `json:"transparentHugePageEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &LinuxOSConfig{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (config *LinuxOSConfig) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if config == nil {
		return nil, nil
	}
	var result LinuxOSConfigARM

	// Set property ‘SwapFileSizeMB’:
	if config.SwapFileSizeMB != nil {
		swapFileSizeMB := *config.SwapFileSizeMB
		result.SwapFileSizeMB = &swapFileSizeMB
	}

	// Set property ‘Sysctls’:
	if config.Sysctls != nil {
		sysctlsARM, err := (*config.Sysctls).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sysctls := sysctlsARM.(SysctlConfigARM)
		result.Sysctls = &sysctls
	}

	// Set property ‘TransparentHugePageDefrag’:
	if config.TransparentHugePageDefrag != nil {
		transparentHugePageDefrag := *config.TransparentHugePageDefrag
		result.TransparentHugePageDefrag = &transparentHugePageDefrag
	}

	// Set property ‘TransparentHugePageEnabled’:
	if config.TransparentHugePageEnabled != nil {
		transparentHugePageEnabled := *config.TransparentHugePageEnabled
		result.TransparentHugePageEnabled = &transparentHugePageEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (config *LinuxOSConfig) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LinuxOSConfigARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (config *LinuxOSConfig) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LinuxOSConfigARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LinuxOSConfigARM, got %T", armInput)
	}

	// Set property ‘SwapFileSizeMB’:
	if typedInput.SwapFileSizeMB != nil {
		swapFileSizeMB := *typedInput.SwapFileSizeMB
		config.SwapFileSizeMB = &swapFileSizeMB
	}

	// Set property ‘Sysctls’:
	if typedInput.Sysctls != nil {
		var sysctls1 SysctlConfig
		err := sysctls1.PopulateFromARM(owner, *typedInput.Sysctls)
		if err != nil {
			return err
		}
		sysctls := sysctls1
		config.Sysctls = &sysctls
	}

	// Set property ‘TransparentHugePageDefrag’:
	if typedInput.TransparentHugePageDefrag != nil {
		transparentHugePageDefrag := *typedInput.TransparentHugePageDefrag
		config.TransparentHugePageDefrag = &transparentHugePageDefrag
	}

	// Set property ‘TransparentHugePageEnabled’:
	if typedInput.TransparentHugePageEnabled != nil {
		transparentHugePageEnabled := *typedInput.TransparentHugePageEnabled
		config.TransparentHugePageEnabled = &transparentHugePageEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromLinuxOSConfig populates our LinuxOSConfig from the provided source LinuxOSConfig
func (config *LinuxOSConfig) AssignPropertiesFromLinuxOSConfig(source *v20210501s.LinuxOSConfig) error {

	// SwapFileSizeMB
	config.SwapFileSizeMB = genruntime.ClonePointerToInt(source.SwapFileSizeMB)

	// Sysctls
	if source.Sysctls != nil {
		var sysctl SysctlConfig
		err := sysctl.AssignPropertiesFromSysctlConfig(source.Sysctls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSysctlConfig() to populate field Sysctls")
		}
		config.Sysctls = &sysctl
	} else {
		config.Sysctls = nil
	}

	// TransparentHugePageDefrag
	config.TransparentHugePageDefrag = genruntime.ClonePointerToString(source.TransparentHugePageDefrag)

	// TransparentHugePageEnabled
	config.TransparentHugePageEnabled = genruntime.ClonePointerToString(source.TransparentHugePageEnabled)

	// No error
	return nil
}

// AssignPropertiesToLinuxOSConfig populates the provided destination LinuxOSConfig from our LinuxOSConfig
func (config *LinuxOSConfig) AssignPropertiesToLinuxOSConfig(destination *v20210501s.LinuxOSConfig) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SwapFileSizeMB
	destination.SwapFileSizeMB = genruntime.ClonePointerToInt(config.SwapFileSizeMB)

	// Sysctls
	if config.Sysctls != nil {
		var sysctl v20210501s.SysctlConfig
		err := config.Sysctls.AssignPropertiesToSysctlConfig(&sysctl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSysctlConfig() to populate field Sysctls")
		}
		destination.Sysctls = &sysctl
	} else {
		destination.Sysctls = nil
	}

	// TransparentHugePageDefrag
	destination.TransparentHugePageDefrag = genruntime.ClonePointerToString(config.TransparentHugePageDefrag)

	// TransparentHugePageEnabled
	destination.TransparentHugePageEnabled = genruntime.ClonePointerToString(config.TransparentHugePageEnabled)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type LinuxOSConfig_Status struct {
	// SwapFileSizeMB: The size in MB of a swap file that will be created on each node.
	SwapFileSizeMB *int `json:"swapFileSizeMB,omitempty"`

	// Sysctls: Sysctl settings for Linux agent nodes.
	Sysctls *SysctlConfig_Status `json:"sysctls,omitempty"`

	// TransparentHugePageDefrag: Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'. The default is
	// 'madvise'. For more information see [Transparent
	// Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageDefrag *string `json:"transparentHugePageDefrag,omitempty"`

	// TransparentHugePageEnabled: Valid values are 'always', 'madvise', and 'never'. The default is 'always'. For more
	// information see [Transparent
	// Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageEnabled *string `json:"transparentHugePageEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &LinuxOSConfig_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (config *LinuxOSConfig_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LinuxOSConfig_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (config *LinuxOSConfig_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LinuxOSConfig_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LinuxOSConfig_StatusARM, got %T", armInput)
	}

	// Set property ‘SwapFileSizeMB’:
	if typedInput.SwapFileSizeMB != nil {
		swapFileSizeMB := *typedInput.SwapFileSizeMB
		config.SwapFileSizeMB = &swapFileSizeMB
	}

	// Set property ‘Sysctls’:
	if typedInput.Sysctls != nil {
		var sysctls1 SysctlConfig_Status
		err := sysctls1.PopulateFromARM(owner, *typedInput.Sysctls)
		if err != nil {
			return err
		}
		sysctls := sysctls1
		config.Sysctls = &sysctls
	}

	// Set property ‘TransparentHugePageDefrag’:
	if typedInput.TransparentHugePageDefrag != nil {
		transparentHugePageDefrag := *typedInput.TransparentHugePageDefrag
		config.TransparentHugePageDefrag = &transparentHugePageDefrag
	}

	// Set property ‘TransparentHugePageEnabled’:
	if typedInput.TransparentHugePageEnabled != nil {
		transparentHugePageEnabled := *typedInput.TransparentHugePageEnabled
		config.TransparentHugePageEnabled = &transparentHugePageEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromLinuxOSConfigStatus populates our LinuxOSConfig_Status from the provided source LinuxOSConfig_Status
func (config *LinuxOSConfig_Status) AssignPropertiesFromLinuxOSConfigStatus(source *v20210501s.LinuxOSConfig_Status) error {

	// SwapFileSizeMB
	config.SwapFileSizeMB = genruntime.ClonePointerToInt(source.SwapFileSizeMB)

	// Sysctls
	if source.Sysctls != nil {
		var sysctl SysctlConfig_Status
		err := sysctl.AssignPropertiesFromSysctlConfigStatus(source.Sysctls)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSysctlConfigStatus() to populate field Sysctls")
		}
		config.Sysctls = &sysctl
	} else {
		config.Sysctls = nil
	}

	// TransparentHugePageDefrag
	config.TransparentHugePageDefrag = genruntime.ClonePointerToString(source.TransparentHugePageDefrag)

	// TransparentHugePageEnabled
	config.TransparentHugePageEnabled = genruntime.ClonePointerToString(source.TransparentHugePageEnabled)

	// No error
	return nil
}

// AssignPropertiesToLinuxOSConfigStatus populates the provided destination LinuxOSConfig_Status from our LinuxOSConfig_Status
func (config *LinuxOSConfig_Status) AssignPropertiesToLinuxOSConfigStatus(destination *v20210501s.LinuxOSConfig_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SwapFileSizeMB
	destination.SwapFileSizeMB = genruntime.ClonePointerToInt(config.SwapFileSizeMB)

	// Sysctls
	if config.Sysctls != nil {
		var sysctl v20210501s.SysctlConfig_Status
		err := config.Sysctls.AssignPropertiesToSysctlConfigStatus(&sysctl)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSysctlConfigStatus() to populate field Sysctls")
		}
		destination.Sysctls = &sysctl
	} else {
		destination.Sysctls = nil
	}

	// TransparentHugePageDefrag
	destination.TransparentHugePageDefrag = genruntime.ClonePointerToString(config.TransparentHugePageDefrag)

	// TransparentHugePageEnabled
	destination.TransparentHugePageEnabled = genruntime.ClonePointerToString(config.TransparentHugePageEnabled)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"MIG1g","MIG2g","MIG3g","MIG4g","MIG7g"}
type ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile string

const (
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG1G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG1g")
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG2G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG2g")
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG3G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG3g")
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG4G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG4g")
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG7G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG7g")
)

// +kubebuilder:validation:Enum={"OS","Temporary"}
type ManagedClusterAgentPoolProfilePropertiesKubeletDiskType string

const (
	ManagedClusterAgentPoolProfilePropertiesKubeletDiskTypeOS        = ManagedClusterAgentPoolProfilePropertiesKubeletDiskType("OS")
	ManagedClusterAgentPoolProfilePropertiesKubeletDiskTypeTemporary = ManagedClusterAgentPoolProfilePropertiesKubeletDiskType("Temporary")
)

// +kubebuilder:validation:Enum={"System","User"}
type ManagedClusterAgentPoolProfilePropertiesMode string

const (
	ManagedClusterAgentPoolProfilePropertiesModeSystem = ManagedClusterAgentPoolProfilePropertiesMode("System")
	ManagedClusterAgentPoolProfilePropertiesModeUser   = ManagedClusterAgentPoolProfilePropertiesMode("User")
)

// +kubebuilder:validation:Enum={"Ephemeral","Managed"}
type ManagedClusterAgentPoolProfilePropertiesOsDiskType string

const (
	ManagedClusterAgentPoolProfilePropertiesOsDiskTypeEphemeral = ManagedClusterAgentPoolProfilePropertiesOsDiskType("Ephemeral")
	ManagedClusterAgentPoolProfilePropertiesOsDiskTypeManaged   = ManagedClusterAgentPoolProfilePropertiesOsDiskType("Managed")
)

// +kubebuilder:validation:Enum={"CBLMariner","Ubuntu"}
type ManagedClusterAgentPoolProfilePropertiesOsSKU string

const (
	ManagedClusterAgentPoolProfilePropertiesOsSKUCBLMariner = ManagedClusterAgentPoolProfilePropertiesOsSKU("CBLMariner")
	ManagedClusterAgentPoolProfilePropertiesOsSKUUbuntu     = ManagedClusterAgentPoolProfilePropertiesOsSKU("Ubuntu")
)

// +kubebuilder:validation:Enum={"Linux","Windows"}
type ManagedClusterAgentPoolProfilePropertiesOsType string

const (
	ManagedClusterAgentPoolProfilePropertiesOsTypeLinux   = ManagedClusterAgentPoolProfilePropertiesOsType("Linux")
	ManagedClusterAgentPoolProfilePropertiesOsTypeWindows = ManagedClusterAgentPoolProfilePropertiesOsType("Windows")
)

// +kubebuilder:validation:Enum={"Deallocate","Delete"}
type ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy string

const (
	ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicyDeallocate = ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy("Deallocate")
	ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicyDelete     = ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy("Delete")
)

// +kubebuilder:validation:Enum={"Regular","Spot"}
type ManagedClusterAgentPoolProfilePropertiesScaleSetPriority string

const (
	ManagedClusterAgentPoolProfilePropertiesScaleSetPriorityRegular = ManagedClusterAgentPoolProfilePropertiesScaleSetPriority("Regular")
	ManagedClusterAgentPoolProfilePropertiesScaleSetPrioritySpot    = ManagedClusterAgentPoolProfilePropertiesScaleSetPriority("Spot")
)

// +kubebuilder:validation:Enum={"AvailabilitySet","VirtualMachineScaleSets"}
type ManagedClusterAgentPoolProfilePropertiesType string

const (
	ManagedClusterAgentPoolProfilePropertiesTypeAvailabilitySet         = ManagedClusterAgentPoolProfilePropertiesType("AvailabilitySet")
	ManagedClusterAgentPoolProfilePropertiesTypeVirtualMachineScaleSets = ManagedClusterAgentPoolProfilePropertiesType("VirtualMachineScaleSets")
)

// Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/definitions/SysctlConfig
type SysctlConfig struct {
	// FsAioMaxNr: Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int `json:"fsAioMaxNr,omitempty"`

	// FsFileMax: Sysctl setting fs.file-max.
	FsFileMax *int `json:"fsFileMax,omitempty"`

	// FsInotifyMaxUserWatches: Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int `json:"fsInotifyMaxUserWatches,omitempty"`

	// FsNrOpen: Sysctl setting fs.nr_open.
	FsNrOpen *int `json:"fsNrOpen,omitempty"`

	// KernelThreadsMax: Sysctl setting kernel.threads-max.
	KernelThreadsMax *int `json:"kernelThreadsMax,omitempty"`

	// NetCoreNetdevMaxBacklog: Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int `json:"netCoreNetdevMaxBacklog,omitempty"`

	// NetCoreOptmemMax: Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int `json:"netCoreOptmemMax,omitempty"`

	// NetCoreRmemDefault: Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int `json:"netCoreRmemDefault,omitempty"`

	// NetCoreRmemMax: Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int `json:"netCoreRmemMax,omitempty"`

	// NetCoreSomaxconn: Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int `json:"netCoreSomaxconn,omitempty"`

	// NetCoreWmemDefault: Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int `json:"netCoreWmemDefault,omitempty"`

	// NetCoreWmemMax: Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int `json:"netCoreWmemMax,omitempty"`

	// NetIpv4IpLocalPortRange: Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `json:"netIpv4IpLocalPortRange,omitempty"`

	// NetIpv4NeighDefaultGcThresh1: Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int `json:"netIpv4NeighDefaultGcThresh1,omitempty"`

	// NetIpv4NeighDefaultGcThresh2: Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int `json:"netIpv4NeighDefaultGcThresh2,omitempty"`

	// NetIpv4NeighDefaultGcThresh3: Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int `json:"netIpv4NeighDefaultGcThresh3,omitempty"`

	// NetIpv4TcpFinTimeout: Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int `json:"netIpv4TcpFinTimeout,omitempty"`

	// NetIpv4TcpKeepaliveProbes: Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int `json:"netIpv4TcpKeepaliveProbes,omitempty"`

	// NetIpv4TcpKeepaliveTime: Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int `json:"netIpv4TcpKeepaliveTime,omitempty"`

	// NetIpv4TcpMaxSynBacklog: Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int `json:"netIpv4TcpMaxSynBacklog,omitempty"`

	// NetIpv4TcpMaxTwBuckets: Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int `json:"netIpv4TcpMaxTwBuckets,omitempty"`

	// NetIpv4TcpTwReuse: Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `json:"netIpv4TcpTwReuse,omitempty"`

	// NetIpv4TcpkeepaliveIntvl: Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int `json:"netIpv4TcpkeepaliveIntvl,omitempty"`

	// NetNetfilterNfConntrackBuckets: Sysctl setting net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int `json:"netNetfilterNfConntrackBuckets,omitempty"`

	// NetNetfilterNfConntrackMax: Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int `json:"netNetfilterNfConntrackMax,omitempty"`

	// VmMaxMapCount: Sysctl setting vm.max_map_count.
	VmMaxMapCount *int `json:"vmMaxMapCount,omitempty"`

	// VmSwappiness: Sysctl setting vm.swappiness.
	VmSwappiness *int `json:"vmSwappiness,omitempty"`

	// VmVfsCachePressure: Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int `json:"vmVfsCachePressure,omitempty"`
}

var _ genruntime.ARMTransformer = &SysctlConfig{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (config *SysctlConfig) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if config == nil {
		return nil, nil
	}
	var result SysctlConfigARM

	// Set property ‘FsAioMaxNr’:
	if config.FsAioMaxNr != nil {
		fsAioMaxNr := *config.FsAioMaxNr
		result.FsAioMaxNr = &fsAioMaxNr
	}

	// Set property ‘FsFileMax’:
	if config.FsFileMax != nil {
		fsFileMax := *config.FsFileMax
		result.FsFileMax = &fsFileMax
	}

	// Set property ‘FsInotifyMaxUserWatches’:
	if config.FsInotifyMaxUserWatches != nil {
		fsInotifyMaxUserWatches := *config.FsInotifyMaxUserWatches
		result.FsInotifyMaxUserWatches = &fsInotifyMaxUserWatches
	}

	// Set property ‘FsNrOpen’:
	if config.FsNrOpen != nil {
		fsNrOpen := *config.FsNrOpen
		result.FsNrOpen = &fsNrOpen
	}

	// Set property ‘KernelThreadsMax’:
	if config.KernelThreadsMax != nil {
		kernelThreadsMax := *config.KernelThreadsMax
		result.KernelThreadsMax = &kernelThreadsMax
	}

	// Set property ‘NetCoreNetdevMaxBacklog’:
	if config.NetCoreNetdevMaxBacklog != nil {
		netCoreNetdevMaxBacklog := *config.NetCoreNetdevMaxBacklog
		result.NetCoreNetdevMaxBacklog = &netCoreNetdevMaxBacklog
	}

	// Set property ‘NetCoreOptmemMax’:
	if config.NetCoreOptmemMax != nil {
		netCoreOptmemMax := *config.NetCoreOptmemMax
		result.NetCoreOptmemMax = &netCoreOptmemMax
	}

	// Set property ‘NetCoreRmemDefault’:
	if config.NetCoreRmemDefault != nil {
		netCoreRmemDefault := *config.NetCoreRmemDefault
		result.NetCoreRmemDefault = &netCoreRmemDefault
	}

	// Set property ‘NetCoreRmemMax’:
	if config.NetCoreRmemMax != nil {
		netCoreRmemMax := *config.NetCoreRmemMax
		result.NetCoreRmemMax = &netCoreRmemMax
	}

	// Set property ‘NetCoreSomaxconn’:
	if config.NetCoreSomaxconn != nil {
		netCoreSomaxconn := *config.NetCoreSomaxconn
		result.NetCoreSomaxconn = &netCoreSomaxconn
	}

	// Set property ‘NetCoreWmemDefault’:
	if config.NetCoreWmemDefault != nil {
		netCoreWmemDefault := *config.NetCoreWmemDefault
		result.NetCoreWmemDefault = &netCoreWmemDefault
	}

	// Set property ‘NetCoreWmemMax’:
	if config.NetCoreWmemMax != nil {
		netCoreWmemMax := *config.NetCoreWmemMax
		result.NetCoreWmemMax = &netCoreWmemMax
	}

	// Set property ‘NetIpv4IpLocalPortRange’:
	if config.NetIpv4IpLocalPortRange != nil {
		netIpv4IpLocalPortRange := *config.NetIpv4IpLocalPortRange
		result.NetIpv4IpLocalPortRange = &netIpv4IpLocalPortRange
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh1’:
	if config.NetIpv4NeighDefaultGcThresh1 != nil {
		netIpv4NeighDefaultGcThresh1 := *config.NetIpv4NeighDefaultGcThresh1
		result.NetIpv4NeighDefaultGcThresh1 = &netIpv4NeighDefaultGcThresh1
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh2’:
	if config.NetIpv4NeighDefaultGcThresh2 != nil {
		netIpv4NeighDefaultGcThresh2 := *config.NetIpv4NeighDefaultGcThresh2
		result.NetIpv4NeighDefaultGcThresh2 = &netIpv4NeighDefaultGcThresh2
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh3’:
	if config.NetIpv4NeighDefaultGcThresh3 != nil {
		netIpv4NeighDefaultGcThresh3 := *config.NetIpv4NeighDefaultGcThresh3
		result.NetIpv4NeighDefaultGcThresh3 = &netIpv4NeighDefaultGcThresh3
	}

	// Set property ‘NetIpv4TcpFinTimeout’:
	if config.NetIpv4TcpFinTimeout != nil {
		netIpv4TcpFinTimeout := *config.NetIpv4TcpFinTimeout
		result.NetIpv4TcpFinTimeout = &netIpv4TcpFinTimeout
	}

	// Set property ‘NetIpv4TcpKeepaliveProbes’:
	if config.NetIpv4TcpKeepaliveProbes != nil {
		netIpv4TcpKeepaliveProbes := *config.NetIpv4TcpKeepaliveProbes
		result.NetIpv4TcpKeepaliveProbes = &netIpv4TcpKeepaliveProbes
	}

	// Set property ‘NetIpv4TcpKeepaliveTime’:
	if config.NetIpv4TcpKeepaliveTime != nil {
		netIpv4TcpKeepaliveTime := *config.NetIpv4TcpKeepaliveTime
		result.NetIpv4TcpKeepaliveTime = &netIpv4TcpKeepaliveTime
	}

	// Set property ‘NetIpv4TcpMaxSynBacklog’:
	if config.NetIpv4TcpMaxSynBacklog != nil {
		netIpv4TcpMaxSynBacklog := *config.NetIpv4TcpMaxSynBacklog
		result.NetIpv4TcpMaxSynBacklog = &netIpv4TcpMaxSynBacklog
	}

	// Set property ‘NetIpv4TcpMaxTwBuckets’:
	if config.NetIpv4TcpMaxTwBuckets != nil {
		netIpv4TcpMaxTwBuckets := *config.NetIpv4TcpMaxTwBuckets
		result.NetIpv4TcpMaxTwBuckets = &netIpv4TcpMaxTwBuckets
	}

	// Set property ‘NetIpv4TcpTwReuse’:
	if config.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *config.NetIpv4TcpTwReuse
		result.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	}

	// Set property ‘NetIpv4TcpkeepaliveIntvl’:
	if config.NetIpv4TcpkeepaliveIntvl != nil {
		netIpv4TcpkeepaliveIntvl := *config.NetIpv4TcpkeepaliveIntvl
		result.NetIpv4TcpkeepaliveIntvl = &netIpv4TcpkeepaliveIntvl
	}

	// Set property ‘NetNetfilterNfConntrackBuckets’:
	if config.NetNetfilterNfConntrackBuckets != nil {
		netNetfilterNfConntrackBuckets := *config.NetNetfilterNfConntrackBuckets
		result.NetNetfilterNfConntrackBuckets = &netNetfilterNfConntrackBuckets
	}

	// Set property ‘NetNetfilterNfConntrackMax’:
	if config.NetNetfilterNfConntrackMax != nil {
		netNetfilterNfConntrackMax := *config.NetNetfilterNfConntrackMax
		result.NetNetfilterNfConntrackMax = &netNetfilterNfConntrackMax
	}

	// Set property ‘VmMaxMapCount’:
	if config.VmMaxMapCount != nil {
		vmMaxMapCount := *config.VmMaxMapCount
		result.VmMaxMapCount = &vmMaxMapCount
	}

	// Set property ‘VmSwappiness’:
	if config.VmSwappiness != nil {
		vmSwappiness := *config.VmSwappiness
		result.VmSwappiness = &vmSwappiness
	}

	// Set property ‘VmVfsCachePressure’:
	if config.VmVfsCachePressure != nil {
		vmVfsCachePressure := *config.VmVfsCachePressure
		result.VmVfsCachePressure = &vmVfsCachePressure
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (config *SysctlConfig) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SysctlConfigARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (config *SysctlConfig) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SysctlConfigARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SysctlConfigARM, got %T", armInput)
	}

	// Set property ‘FsAioMaxNr’:
	if typedInput.FsAioMaxNr != nil {
		fsAioMaxNr := *typedInput.FsAioMaxNr
		config.FsAioMaxNr = &fsAioMaxNr
	}

	// Set property ‘FsFileMax’:
	if typedInput.FsFileMax != nil {
		fsFileMax := *typedInput.FsFileMax
		config.FsFileMax = &fsFileMax
	}

	// Set property ‘FsInotifyMaxUserWatches’:
	if typedInput.FsInotifyMaxUserWatches != nil {
		fsInotifyMaxUserWatches := *typedInput.FsInotifyMaxUserWatches
		config.FsInotifyMaxUserWatches = &fsInotifyMaxUserWatches
	}

	// Set property ‘FsNrOpen’:
	if typedInput.FsNrOpen != nil {
		fsNrOpen := *typedInput.FsNrOpen
		config.FsNrOpen = &fsNrOpen
	}

	// Set property ‘KernelThreadsMax’:
	if typedInput.KernelThreadsMax != nil {
		kernelThreadsMax := *typedInput.KernelThreadsMax
		config.KernelThreadsMax = &kernelThreadsMax
	}

	// Set property ‘NetCoreNetdevMaxBacklog’:
	if typedInput.NetCoreNetdevMaxBacklog != nil {
		netCoreNetdevMaxBacklog := *typedInput.NetCoreNetdevMaxBacklog
		config.NetCoreNetdevMaxBacklog = &netCoreNetdevMaxBacklog
	}

	// Set property ‘NetCoreOptmemMax’:
	if typedInput.NetCoreOptmemMax != nil {
		netCoreOptmemMax := *typedInput.NetCoreOptmemMax
		config.NetCoreOptmemMax = &netCoreOptmemMax
	}

	// Set property ‘NetCoreRmemDefault’:
	if typedInput.NetCoreRmemDefault != nil {
		netCoreRmemDefault := *typedInput.NetCoreRmemDefault
		config.NetCoreRmemDefault = &netCoreRmemDefault
	}

	// Set property ‘NetCoreRmemMax’:
	if typedInput.NetCoreRmemMax != nil {
		netCoreRmemMax := *typedInput.NetCoreRmemMax
		config.NetCoreRmemMax = &netCoreRmemMax
	}

	// Set property ‘NetCoreSomaxconn’:
	if typedInput.NetCoreSomaxconn != nil {
		netCoreSomaxconn := *typedInput.NetCoreSomaxconn
		config.NetCoreSomaxconn = &netCoreSomaxconn
	}

	// Set property ‘NetCoreWmemDefault’:
	if typedInput.NetCoreWmemDefault != nil {
		netCoreWmemDefault := *typedInput.NetCoreWmemDefault
		config.NetCoreWmemDefault = &netCoreWmemDefault
	}

	// Set property ‘NetCoreWmemMax’:
	if typedInput.NetCoreWmemMax != nil {
		netCoreWmemMax := *typedInput.NetCoreWmemMax
		config.NetCoreWmemMax = &netCoreWmemMax
	}

	// Set property ‘NetIpv4IpLocalPortRange’:
	if typedInput.NetIpv4IpLocalPortRange != nil {
		netIpv4IpLocalPortRange := *typedInput.NetIpv4IpLocalPortRange
		config.NetIpv4IpLocalPortRange = &netIpv4IpLocalPortRange
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh1’:
	if typedInput.NetIpv4NeighDefaultGcThresh1 != nil {
		netIpv4NeighDefaultGcThresh1 := *typedInput.NetIpv4NeighDefaultGcThresh1
		config.NetIpv4NeighDefaultGcThresh1 = &netIpv4NeighDefaultGcThresh1
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh2’:
	if typedInput.NetIpv4NeighDefaultGcThresh2 != nil {
		netIpv4NeighDefaultGcThresh2 := *typedInput.NetIpv4NeighDefaultGcThresh2
		config.NetIpv4NeighDefaultGcThresh2 = &netIpv4NeighDefaultGcThresh2
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh3’:
	if typedInput.NetIpv4NeighDefaultGcThresh3 != nil {
		netIpv4NeighDefaultGcThresh3 := *typedInput.NetIpv4NeighDefaultGcThresh3
		config.NetIpv4NeighDefaultGcThresh3 = &netIpv4NeighDefaultGcThresh3
	}

	// Set property ‘NetIpv4TcpFinTimeout’:
	if typedInput.NetIpv4TcpFinTimeout != nil {
		netIpv4TcpFinTimeout := *typedInput.NetIpv4TcpFinTimeout
		config.NetIpv4TcpFinTimeout = &netIpv4TcpFinTimeout
	}

	// Set property ‘NetIpv4TcpKeepaliveProbes’:
	if typedInput.NetIpv4TcpKeepaliveProbes != nil {
		netIpv4TcpKeepaliveProbes := *typedInput.NetIpv4TcpKeepaliveProbes
		config.NetIpv4TcpKeepaliveProbes = &netIpv4TcpKeepaliveProbes
	}

	// Set property ‘NetIpv4TcpKeepaliveTime’:
	if typedInput.NetIpv4TcpKeepaliveTime != nil {
		netIpv4TcpKeepaliveTime := *typedInput.NetIpv4TcpKeepaliveTime
		config.NetIpv4TcpKeepaliveTime = &netIpv4TcpKeepaliveTime
	}

	// Set property ‘NetIpv4TcpMaxSynBacklog’:
	if typedInput.NetIpv4TcpMaxSynBacklog != nil {
		netIpv4TcpMaxSynBacklog := *typedInput.NetIpv4TcpMaxSynBacklog
		config.NetIpv4TcpMaxSynBacklog = &netIpv4TcpMaxSynBacklog
	}

	// Set property ‘NetIpv4TcpMaxTwBuckets’:
	if typedInput.NetIpv4TcpMaxTwBuckets != nil {
		netIpv4TcpMaxTwBuckets := *typedInput.NetIpv4TcpMaxTwBuckets
		config.NetIpv4TcpMaxTwBuckets = &netIpv4TcpMaxTwBuckets
	}

	// Set property ‘NetIpv4TcpTwReuse’:
	if typedInput.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *typedInput.NetIpv4TcpTwReuse
		config.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	}

	// Set property ‘NetIpv4TcpkeepaliveIntvl’:
	if typedInput.NetIpv4TcpkeepaliveIntvl != nil {
		netIpv4TcpkeepaliveIntvl := *typedInput.NetIpv4TcpkeepaliveIntvl
		config.NetIpv4TcpkeepaliveIntvl = &netIpv4TcpkeepaliveIntvl
	}

	// Set property ‘NetNetfilterNfConntrackBuckets’:
	if typedInput.NetNetfilterNfConntrackBuckets != nil {
		netNetfilterNfConntrackBuckets := *typedInput.NetNetfilterNfConntrackBuckets
		config.NetNetfilterNfConntrackBuckets = &netNetfilterNfConntrackBuckets
	}

	// Set property ‘NetNetfilterNfConntrackMax’:
	if typedInput.NetNetfilterNfConntrackMax != nil {
		netNetfilterNfConntrackMax := *typedInput.NetNetfilterNfConntrackMax
		config.NetNetfilterNfConntrackMax = &netNetfilterNfConntrackMax
	}

	// Set property ‘VmMaxMapCount’:
	if typedInput.VmMaxMapCount != nil {
		vmMaxMapCount := *typedInput.VmMaxMapCount
		config.VmMaxMapCount = &vmMaxMapCount
	}

	// Set property ‘VmSwappiness’:
	if typedInput.VmSwappiness != nil {
		vmSwappiness := *typedInput.VmSwappiness
		config.VmSwappiness = &vmSwappiness
	}

	// Set property ‘VmVfsCachePressure’:
	if typedInput.VmVfsCachePressure != nil {
		vmVfsCachePressure := *typedInput.VmVfsCachePressure
		config.VmVfsCachePressure = &vmVfsCachePressure
	}

	// No error
	return nil
}

// AssignPropertiesFromSysctlConfig populates our SysctlConfig from the provided source SysctlConfig
func (config *SysctlConfig) AssignPropertiesFromSysctlConfig(source *v20210501s.SysctlConfig) error {

	// FsAioMaxNr
	config.FsAioMaxNr = genruntime.ClonePointerToInt(source.FsAioMaxNr)

	// FsFileMax
	config.FsFileMax = genruntime.ClonePointerToInt(source.FsFileMax)

	// FsInotifyMaxUserWatches
	config.FsInotifyMaxUserWatches = genruntime.ClonePointerToInt(source.FsInotifyMaxUserWatches)

	// FsNrOpen
	config.FsNrOpen = genruntime.ClonePointerToInt(source.FsNrOpen)

	// KernelThreadsMax
	config.KernelThreadsMax = genruntime.ClonePointerToInt(source.KernelThreadsMax)

	// NetCoreNetdevMaxBacklog
	config.NetCoreNetdevMaxBacklog = genruntime.ClonePointerToInt(source.NetCoreNetdevMaxBacklog)

	// NetCoreOptmemMax
	config.NetCoreOptmemMax = genruntime.ClonePointerToInt(source.NetCoreOptmemMax)

	// NetCoreRmemDefault
	config.NetCoreRmemDefault = genruntime.ClonePointerToInt(source.NetCoreRmemDefault)

	// NetCoreRmemMax
	config.NetCoreRmemMax = genruntime.ClonePointerToInt(source.NetCoreRmemMax)

	// NetCoreSomaxconn
	config.NetCoreSomaxconn = genruntime.ClonePointerToInt(source.NetCoreSomaxconn)

	// NetCoreWmemDefault
	config.NetCoreWmemDefault = genruntime.ClonePointerToInt(source.NetCoreWmemDefault)

	// NetCoreWmemMax
	config.NetCoreWmemMax = genruntime.ClonePointerToInt(source.NetCoreWmemMax)

	// NetIpv4IpLocalPortRange
	config.NetIpv4IpLocalPortRange = genruntime.ClonePointerToString(source.NetIpv4IpLocalPortRange)

	// NetIpv4NeighDefaultGcThresh1
	config.NetIpv4NeighDefaultGcThresh1 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh1)

	// NetIpv4NeighDefaultGcThresh2
	config.NetIpv4NeighDefaultGcThresh2 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh2)

	// NetIpv4NeighDefaultGcThresh3
	config.NetIpv4NeighDefaultGcThresh3 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh3)

	// NetIpv4TcpFinTimeout
	config.NetIpv4TcpFinTimeout = genruntime.ClonePointerToInt(source.NetIpv4TcpFinTimeout)

	// NetIpv4TcpKeepaliveProbes
	config.NetIpv4TcpKeepaliveProbes = genruntime.ClonePointerToInt(source.NetIpv4TcpKeepaliveProbes)

	// NetIpv4TcpKeepaliveTime
	config.NetIpv4TcpKeepaliveTime = genruntime.ClonePointerToInt(source.NetIpv4TcpKeepaliveTime)

	// NetIpv4TcpMaxSynBacklog
	config.NetIpv4TcpMaxSynBacklog = genruntime.ClonePointerToInt(source.NetIpv4TcpMaxSynBacklog)

	// NetIpv4TcpMaxTwBuckets
	config.NetIpv4TcpMaxTwBuckets = genruntime.ClonePointerToInt(source.NetIpv4TcpMaxTwBuckets)

	// NetIpv4TcpTwReuse
	if source.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *source.NetIpv4TcpTwReuse
		config.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	} else {
		config.NetIpv4TcpTwReuse = nil
	}

	// NetIpv4TcpkeepaliveIntvl
	config.NetIpv4TcpkeepaliveIntvl = genruntime.ClonePointerToInt(source.NetIpv4TcpkeepaliveIntvl)

	// NetNetfilterNfConntrackBuckets
	config.NetNetfilterNfConntrackBuckets = genruntime.ClonePointerToInt(source.NetNetfilterNfConntrackBuckets)

	// NetNetfilterNfConntrackMax
	config.NetNetfilterNfConntrackMax = genruntime.ClonePointerToInt(source.NetNetfilterNfConntrackMax)

	// VmMaxMapCount
	config.VmMaxMapCount = genruntime.ClonePointerToInt(source.VmMaxMapCount)

	// VmSwappiness
	config.VmSwappiness = genruntime.ClonePointerToInt(source.VmSwappiness)

	// VmVfsCachePressure
	config.VmVfsCachePressure = genruntime.ClonePointerToInt(source.VmVfsCachePressure)

	// No error
	return nil
}

// AssignPropertiesToSysctlConfig populates the provided destination SysctlConfig from our SysctlConfig
func (config *SysctlConfig) AssignPropertiesToSysctlConfig(destination *v20210501s.SysctlConfig) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FsAioMaxNr
	destination.FsAioMaxNr = genruntime.ClonePointerToInt(config.FsAioMaxNr)

	// FsFileMax
	destination.FsFileMax = genruntime.ClonePointerToInt(config.FsFileMax)

	// FsInotifyMaxUserWatches
	destination.FsInotifyMaxUserWatches = genruntime.ClonePointerToInt(config.FsInotifyMaxUserWatches)

	// FsNrOpen
	destination.FsNrOpen = genruntime.ClonePointerToInt(config.FsNrOpen)

	// KernelThreadsMax
	destination.KernelThreadsMax = genruntime.ClonePointerToInt(config.KernelThreadsMax)

	// NetCoreNetdevMaxBacklog
	destination.NetCoreNetdevMaxBacklog = genruntime.ClonePointerToInt(config.NetCoreNetdevMaxBacklog)

	// NetCoreOptmemMax
	destination.NetCoreOptmemMax = genruntime.ClonePointerToInt(config.NetCoreOptmemMax)

	// NetCoreRmemDefault
	destination.NetCoreRmemDefault = genruntime.ClonePointerToInt(config.NetCoreRmemDefault)

	// NetCoreRmemMax
	destination.NetCoreRmemMax = genruntime.ClonePointerToInt(config.NetCoreRmemMax)

	// NetCoreSomaxconn
	destination.NetCoreSomaxconn = genruntime.ClonePointerToInt(config.NetCoreSomaxconn)

	// NetCoreWmemDefault
	destination.NetCoreWmemDefault = genruntime.ClonePointerToInt(config.NetCoreWmemDefault)

	// NetCoreWmemMax
	destination.NetCoreWmemMax = genruntime.ClonePointerToInt(config.NetCoreWmemMax)

	// NetIpv4IpLocalPortRange
	destination.NetIpv4IpLocalPortRange = genruntime.ClonePointerToString(config.NetIpv4IpLocalPortRange)

	// NetIpv4NeighDefaultGcThresh1
	destination.NetIpv4NeighDefaultGcThresh1 = genruntime.ClonePointerToInt(config.NetIpv4NeighDefaultGcThresh1)

	// NetIpv4NeighDefaultGcThresh2
	destination.NetIpv4NeighDefaultGcThresh2 = genruntime.ClonePointerToInt(config.NetIpv4NeighDefaultGcThresh2)

	// NetIpv4NeighDefaultGcThresh3
	destination.NetIpv4NeighDefaultGcThresh3 = genruntime.ClonePointerToInt(config.NetIpv4NeighDefaultGcThresh3)

	// NetIpv4TcpFinTimeout
	destination.NetIpv4TcpFinTimeout = genruntime.ClonePointerToInt(config.NetIpv4TcpFinTimeout)

	// NetIpv4TcpKeepaliveProbes
	destination.NetIpv4TcpKeepaliveProbes = genruntime.ClonePointerToInt(config.NetIpv4TcpKeepaliveProbes)

	// NetIpv4TcpKeepaliveTime
	destination.NetIpv4TcpKeepaliveTime = genruntime.ClonePointerToInt(config.NetIpv4TcpKeepaliveTime)

	// NetIpv4TcpMaxSynBacklog
	destination.NetIpv4TcpMaxSynBacklog = genruntime.ClonePointerToInt(config.NetIpv4TcpMaxSynBacklog)

	// NetIpv4TcpMaxTwBuckets
	destination.NetIpv4TcpMaxTwBuckets = genruntime.ClonePointerToInt(config.NetIpv4TcpMaxTwBuckets)

	// NetIpv4TcpTwReuse
	if config.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *config.NetIpv4TcpTwReuse
		destination.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	} else {
		destination.NetIpv4TcpTwReuse = nil
	}

	// NetIpv4TcpkeepaliveIntvl
	destination.NetIpv4TcpkeepaliveIntvl = genruntime.ClonePointerToInt(config.NetIpv4TcpkeepaliveIntvl)

	// NetNetfilterNfConntrackBuckets
	destination.NetNetfilterNfConntrackBuckets = genruntime.ClonePointerToInt(config.NetNetfilterNfConntrackBuckets)

	// NetNetfilterNfConntrackMax
	destination.NetNetfilterNfConntrackMax = genruntime.ClonePointerToInt(config.NetNetfilterNfConntrackMax)

	// VmMaxMapCount
	destination.VmMaxMapCount = genruntime.ClonePointerToInt(config.VmMaxMapCount)

	// VmSwappiness
	destination.VmSwappiness = genruntime.ClonePointerToInt(config.VmSwappiness)

	// VmVfsCachePressure
	destination.VmVfsCachePressure = genruntime.ClonePointerToInt(config.VmVfsCachePressure)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SysctlConfig_Status struct {
	// FsAioMaxNr: Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int `json:"fsAioMaxNr,omitempty"`

	// FsFileMax: Sysctl setting fs.file-max.
	FsFileMax *int `json:"fsFileMax,omitempty"`

	// FsInotifyMaxUserWatches: Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int `json:"fsInotifyMaxUserWatches,omitempty"`

	// FsNrOpen: Sysctl setting fs.nr_open.
	FsNrOpen *int `json:"fsNrOpen,omitempty"`

	// KernelThreadsMax: Sysctl setting kernel.threads-max.
	KernelThreadsMax *int `json:"kernelThreadsMax,omitempty"`

	// NetCoreNetdevMaxBacklog: Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int `json:"netCoreNetdevMaxBacklog,omitempty"`

	// NetCoreOptmemMax: Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int `json:"netCoreOptmemMax,omitempty"`

	// NetCoreRmemDefault: Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int `json:"netCoreRmemDefault,omitempty"`

	// NetCoreRmemMax: Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int `json:"netCoreRmemMax,omitempty"`

	// NetCoreSomaxconn: Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int `json:"netCoreSomaxconn,omitempty"`

	// NetCoreWmemDefault: Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int `json:"netCoreWmemDefault,omitempty"`

	// NetCoreWmemMax: Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int `json:"netCoreWmemMax,omitempty"`

	// NetIpv4IpLocalPortRange: Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `json:"netIpv4IpLocalPortRange,omitempty"`

	// NetIpv4NeighDefaultGcThresh1: Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int `json:"netIpv4NeighDefaultGcThresh1,omitempty"`

	// NetIpv4NeighDefaultGcThresh2: Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int `json:"netIpv4NeighDefaultGcThresh2,omitempty"`

	// NetIpv4NeighDefaultGcThresh3: Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int `json:"netIpv4NeighDefaultGcThresh3,omitempty"`

	// NetIpv4TcpFinTimeout: Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int `json:"netIpv4TcpFinTimeout,omitempty"`

	// NetIpv4TcpKeepaliveProbes: Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int `json:"netIpv4TcpKeepaliveProbes,omitempty"`

	// NetIpv4TcpKeepaliveTime: Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int `json:"netIpv4TcpKeepaliveTime,omitempty"`

	// NetIpv4TcpMaxSynBacklog: Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int `json:"netIpv4TcpMaxSynBacklog,omitempty"`

	// NetIpv4TcpMaxTwBuckets: Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int `json:"netIpv4TcpMaxTwBuckets,omitempty"`

	// NetIpv4TcpTwReuse: Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `json:"netIpv4TcpTwReuse,omitempty"`

	// NetIpv4TcpkeepaliveIntvl: Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int `json:"netIpv4TcpkeepaliveIntvl,omitempty"`

	// NetNetfilterNfConntrackBuckets: Sysctl setting net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int `json:"netNetfilterNfConntrackBuckets,omitempty"`

	// NetNetfilterNfConntrackMax: Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int `json:"netNetfilterNfConntrackMax,omitempty"`

	// VmMaxMapCount: Sysctl setting vm.max_map_count.
	VmMaxMapCount *int `json:"vmMaxMapCount,omitempty"`

	// VmSwappiness: Sysctl setting vm.swappiness.
	VmSwappiness *int `json:"vmSwappiness,omitempty"`

	// VmVfsCachePressure: Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int `json:"vmVfsCachePressure,omitempty"`
}

var _ genruntime.FromARMConverter = &SysctlConfig_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (config *SysctlConfig_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SysctlConfig_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (config *SysctlConfig_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SysctlConfig_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SysctlConfig_StatusARM, got %T", armInput)
	}

	// Set property ‘FsAioMaxNr’:
	if typedInput.FsAioMaxNr != nil {
		fsAioMaxNr := *typedInput.FsAioMaxNr
		config.FsAioMaxNr = &fsAioMaxNr
	}

	// Set property ‘FsFileMax’:
	if typedInput.FsFileMax != nil {
		fsFileMax := *typedInput.FsFileMax
		config.FsFileMax = &fsFileMax
	}

	// Set property ‘FsInotifyMaxUserWatches’:
	if typedInput.FsInotifyMaxUserWatches != nil {
		fsInotifyMaxUserWatches := *typedInput.FsInotifyMaxUserWatches
		config.FsInotifyMaxUserWatches = &fsInotifyMaxUserWatches
	}

	// Set property ‘FsNrOpen’:
	if typedInput.FsNrOpen != nil {
		fsNrOpen := *typedInput.FsNrOpen
		config.FsNrOpen = &fsNrOpen
	}

	// Set property ‘KernelThreadsMax’:
	if typedInput.KernelThreadsMax != nil {
		kernelThreadsMax := *typedInput.KernelThreadsMax
		config.KernelThreadsMax = &kernelThreadsMax
	}

	// Set property ‘NetCoreNetdevMaxBacklog’:
	if typedInput.NetCoreNetdevMaxBacklog != nil {
		netCoreNetdevMaxBacklog := *typedInput.NetCoreNetdevMaxBacklog
		config.NetCoreNetdevMaxBacklog = &netCoreNetdevMaxBacklog
	}

	// Set property ‘NetCoreOptmemMax’:
	if typedInput.NetCoreOptmemMax != nil {
		netCoreOptmemMax := *typedInput.NetCoreOptmemMax
		config.NetCoreOptmemMax = &netCoreOptmemMax
	}

	// Set property ‘NetCoreRmemDefault’:
	if typedInput.NetCoreRmemDefault != nil {
		netCoreRmemDefault := *typedInput.NetCoreRmemDefault
		config.NetCoreRmemDefault = &netCoreRmemDefault
	}

	// Set property ‘NetCoreRmemMax’:
	if typedInput.NetCoreRmemMax != nil {
		netCoreRmemMax := *typedInput.NetCoreRmemMax
		config.NetCoreRmemMax = &netCoreRmemMax
	}

	// Set property ‘NetCoreSomaxconn’:
	if typedInput.NetCoreSomaxconn != nil {
		netCoreSomaxconn := *typedInput.NetCoreSomaxconn
		config.NetCoreSomaxconn = &netCoreSomaxconn
	}

	// Set property ‘NetCoreWmemDefault’:
	if typedInput.NetCoreWmemDefault != nil {
		netCoreWmemDefault := *typedInput.NetCoreWmemDefault
		config.NetCoreWmemDefault = &netCoreWmemDefault
	}

	// Set property ‘NetCoreWmemMax’:
	if typedInput.NetCoreWmemMax != nil {
		netCoreWmemMax := *typedInput.NetCoreWmemMax
		config.NetCoreWmemMax = &netCoreWmemMax
	}

	// Set property ‘NetIpv4IpLocalPortRange’:
	if typedInput.NetIpv4IpLocalPortRange != nil {
		netIpv4IpLocalPortRange := *typedInput.NetIpv4IpLocalPortRange
		config.NetIpv4IpLocalPortRange = &netIpv4IpLocalPortRange
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh1’:
	if typedInput.NetIpv4NeighDefaultGcThresh1 != nil {
		netIpv4NeighDefaultGcThresh1 := *typedInput.NetIpv4NeighDefaultGcThresh1
		config.NetIpv4NeighDefaultGcThresh1 = &netIpv4NeighDefaultGcThresh1
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh2’:
	if typedInput.NetIpv4NeighDefaultGcThresh2 != nil {
		netIpv4NeighDefaultGcThresh2 := *typedInput.NetIpv4NeighDefaultGcThresh2
		config.NetIpv4NeighDefaultGcThresh2 = &netIpv4NeighDefaultGcThresh2
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh3’:
	if typedInput.NetIpv4NeighDefaultGcThresh3 != nil {
		netIpv4NeighDefaultGcThresh3 := *typedInput.NetIpv4NeighDefaultGcThresh3
		config.NetIpv4NeighDefaultGcThresh3 = &netIpv4NeighDefaultGcThresh3
	}

	// Set property ‘NetIpv4TcpFinTimeout’:
	if typedInput.NetIpv4TcpFinTimeout != nil {
		netIpv4TcpFinTimeout := *typedInput.NetIpv4TcpFinTimeout
		config.NetIpv4TcpFinTimeout = &netIpv4TcpFinTimeout
	}

	// Set property ‘NetIpv4TcpKeepaliveProbes’:
	if typedInput.NetIpv4TcpKeepaliveProbes != nil {
		netIpv4TcpKeepaliveProbes := *typedInput.NetIpv4TcpKeepaliveProbes
		config.NetIpv4TcpKeepaliveProbes = &netIpv4TcpKeepaliveProbes
	}

	// Set property ‘NetIpv4TcpKeepaliveTime’:
	if typedInput.NetIpv4TcpKeepaliveTime != nil {
		netIpv4TcpKeepaliveTime := *typedInput.NetIpv4TcpKeepaliveTime
		config.NetIpv4TcpKeepaliveTime = &netIpv4TcpKeepaliveTime
	}

	// Set property ‘NetIpv4TcpMaxSynBacklog’:
	if typedInput.NetIpv4TcpMaxSynBacklog != nil {
		netIpv4TcpMaxSynBacklog := *typedInput.NetIpv4TcpMaxSynBacklog
		config.NetIpv4TcpMaxSynBacklog = &netIpv4TcpMaxSynBacklog
	}

	// Set property ‘NetIpv4TcpMaxTwBuckets’:
	if typedInput.NetIpv4TcpMaxTwBuckets != nil {
		netIpv4TcpMaxTwBuckets := *typedInput.NetIpv4TcpMaxTwBuckets
		config.NetIpv4TcpMaxTwBuckets = &netIpv4TcpMaxTwBuckets
	}

	// Set property ‘NetIpv4TcpTwReuse’:
	if typedInput.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *typedInput.NetIpv4TcpTwReuse
		config.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	}

	// Set property ‘NetIpv4TcpkeepaliveIntvl’:
	if typedInput.NetIpv4TcpkeepaliveIntvl != nil {
		netIpv4TcpkeepaliveIntvl := *typedInput.NetIpv4TcpkeepaliveIntvl
		config.NetIpv4TcpkeepaliveIntvl = &netIpv4TcpkeepaliveIntvl
	}

	// Set property ‘NetNetfilterNfConntrackBuckets’:
	if typedInput.NetNetfilterNfConntrackBuckets != nil {
		netNetfilterNfConntrackBuckets := *typedInput.NetNetfilterNfConntrackBuckets
		config.NetNetfilterNfConntrackBuckets = &netNetfilterNfConntrackBuckets
	}

	// Set property ‘NetNetfilterNfConntrackMax’:
	if typedInput.NetNetfilterNfConntrackMax != nil {
		netNetfilterNfConntrackMax := *typedInput.NetNetfilterNfConntrackMax
		config.NetNetfilterNfConntrackMax = &netNetfilterNfConntrackMax
	}

	// Set property ‘VmMaxMapCount’:
	if typedInput.VmMaxMapCount != nil {
		vmMaxMapCount := *typedInput.VmMaxMapCount
		config.VmMaxMapCount = &vmMaxMapCount
	}

	// Set property ‘VmSwappiness’:
	if typedInput.VmSwappiness != nil {
		vmSwappiness := *typedInput.VmSwappiness
		config.VmSwappiness = &vmSwappiness
	}

	// Set property ‘VmVfsCachePressure’:
	if typedInput.VmVfsCachePressure != nil {
		vmVfsCachePressure := *typedInput.VmVfsCachePressure
		config.VmVfsCachePressure = &vmVfsCachePressure
	}

	// No error
	return nil
}

// AssignPropertiesFromSysctlConfigStatus populates our SysctlConfig_Status from the provided source SysctlConfig_Status
func (config *SysctlConfig_Status) AssignPropertiesFromSysctlConfigStatus(source *v20210501s.SysctlConfig_Status) error {

	// FsAioMaxNr
	config.FsAioMaxNr = genruntime.ClonePointerToInt(source.FsAioMaxNr)

	// FsFileMax
	config.FsFileMax = genruntime.ClonePointerToInt(source.FsFileMax)

	// FsInotifyMaxUserWatches
	config.FsInotifyMaxUserWatches = genruntime.ClonePointerToInt(source.FsInotifyMaxUserWatches)

	// FsNrOpen
	config.FsNrOpen = genruntime.ClonePointerToInt(source.FsNrOpen)

	// KernelThreadsMax
	config.KernelThreadsMax = genruntime.ClonePointerToInt(source.KernelThreadsMax)

	// NetCoreNetdevMaxBacklog
	config.NetCoreNetdevMaxBacklog = genruntime.ClonePointerToInt(source.NetCoreNetdevMaxBacklog)

	// NetCoreOptmemMax
	config.NetCoreOptmemMax = genruntime.ClonePointerToInt(source.NetCoreOptmemMax)

	// NetCoreRmemDefault
	config.NetCoreRmemDefault = genruntime.ClonePointerToInt(source.NetCoreRmemDefault)

	// NetCoreRmemMax
	config.NetCoreRmemMax = genruntime.ClonePointerToInt(source.NetCoreRmemMax)

	// NetCoreSomaxconn
	config.NetCoreSomaxconn = genruntime.ClonePointerToInt(source.NetCoreSomaxconn)

	// NetCoreWmemDefault
	config.NetCoreWmemDefault = genruntime.ClonePointerToInt(source.NetCoreWmemDefault)

	// NetCoreWmemMax
	config.NetCoreWmemMax = genruntime.ClonePointerToInt(source.NetCoreWmemMax)

	// NetIpv4IpLocalPortRange
	config.NetIpv4IpLocalPortRange = genruntime.ClonePointerToString(source.NetIpv4IpLocalPortRange)

	// NetIpv4NeighDefaultGcThresh1
	config.NetIpv4NeighDefaultGcThresh1 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh1)

	// NetIpv4NeighDefaultGcThresh2
	config.NetIpv4NeighDefaultGcThresh2 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh2)

	// NetIpv4NeighDefaultGcThresh3
	config.NetIpv4NeighDefaultGcThresh3 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh3)

	// NetIpv4TcpFinTimeout
	config.NetIpv4TcpFinTimeout = genruntime.ClonePointerToInt(source.NetIpv4TcpFinTimeout)

	// NetIpv4TcpKeepaliveProbes
	config.NetIpv4TcpKeepaliveProbes = genruntime.ClonePointerToInt(source.NetIpv4TcpKeepaliveProbes)

	// NetIpv4TcpKeepaliveTime
	config.NetIpv4TcpKeepaliveTime = genruntime.ClonePointerToInt(source.NetIpv4TcpKeepaliveTime)

	// NetIpv4TcpMaxSynBacklog
	config.NetIpv4TcpMaxSynBacklog = genruntime.ClonePointerToInt(source.NetIpv4TcpMaxSynBacklog)

	// NetIpv4TcpMaxTwBuckets
	config.NetIpv4TcpMaxTwBuckets = genruntime.ClonePointerToInt(source.NetIpv4TcpMaxTwBuckets)

	// NetIpv4TcpTwReuse
	if source.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *source.NetIpv4TcpTwReuse
		config.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	} else {
		config.NetIpv4TcpTwReuse = nil
	}

	// NetIpv4TcpkeepaliveIntvl
	config.NetIpv4TcpkeepaliveIntvl = genruntime.ClonePointerToInt(source.NetIpv4TcpkeepaliveIntvl)

	// NetNetfilterNfConntrackBuckets
	config.NetNetfilterNfConntrackBuckets = genruntime.ClonePointerToInt(source.NetNetfilterNfConntrackBuckets)

	// NetNetfilterNfConntrackMax
	config.NetNetfilterNfConntrackMax = genruntime.ClonePointerToInt(source.NetNetfilterNfConntrackMax)

	// VmMaxMapCount
	config.VmMaxMapCount = genruntime.ClonePointerToInt(source.VmMaxMapCount)

	// VmSwappiness
	config.VmSwappiness = genruntime.ClonePointerToInt(source.VmSwappiness)

	// VmVfsCachePressure
	config.VmVfsCachePressure = genruntime.ClonePointerToInt(source.VmVfsCachePressure)

	// No error
	return nil
}

// AssignPropertiesToSysctlConfigStatus populates the provided destination SysctlConfig_Status from our SysctlConfig_Status
func (config *SysctlConfig_Status) AssignPropertiesToSysctlConfigStatus(destination *v20210501s.SysctlConfig_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FsAioMaxNr
	destination.FsAioMaxNr = genruntime.ClonePointerToInt(config.FsAioMaxNr)

	// FsFileMax
	destination.FsFileMax = genruntime.ClonePointerToInt(config.FsFileMax)

	// FsInotifyMaxUserWatches
	destination.FsInotifyMaxUserWatches = genruntime.ClonePointerToInt(config.FsInotifyMaxUserWatches)

	// FsNrOpen
	destination.FsNrOpen = genruntime.ClonePointerToInt(config.FsNrOpen)

	// KernelThreadsMax
	destination.KernelThreadsMax = genruntime.ClonePointerToInt(config.KernelThreadsMax)

	// NetCoreNetdevMaxBacklog
	destination.NetCoreNetdevMaxBacklog = genruntime.ClonePointerToInt(config.NetCoreNetdevMaxBacklog)

	// NetCoreOptmemMax
	destination.NetCoreOptmemMax = genruntime.ClonePointerToInt(config.NetCoreOptmemMax)

	// NetCoreRmemDefault
	destination.NetCoreRmemDefault = genruntime.ClonePointerToInt(config.NetCoreRmemDefault)

	// NetCoreRmemMax
	destination.NetCoreRmemMax = genruntime.ClonePointerToInt(config.NetCoreRmemMax)

	// NetCoreSomaxconn
	destination.NetCoreSomaxconn = genruntime.ClonePointerToInt(config.NetCoreSomaxconn)

	// NetCoreWmemDefault
	destination.NetCoreWmemDefault = genruntime.ClonePointerToInt(config.NetCoreWmemDefault)

	// NetCoreWmemMax
	destination.NetCoreWmemMax = genruntime.ClonePointerToInt(config.NetCoreWmemMax)

	// NetIpv4IpLocalPortRange
	destination.NetIpv4IpLocalPortRange = genruntime.ClonePointerToString(config.NetIpv4IpLocalPortRange)

	// NetIpv4NeighDefaultGcThresh1
	destination.NetIpv4NeighDefaultGcThresh1 = genruntime.ClonePointerToInt(config.NetIpv4NeighDefaultGcThresh1)

	// NetIpv4NeighDefaultGcThresh2
	destination.NetIpv4NeighDefaultGcThresh2 = genruntime.ClonePointerToInt(config.NetIpv4NeighDefaultGcThresh2)

	// NetIpv4NeighDefaultGcThresh3
	destination.NetIpv4NeighDefaultGcThresh3 = genruntime.ClonePointerToInt(config.NetIpv4NeighDefaultGcThresh3)

	// NetIpv4TcpFinTimeout
	destination.NetIpv4TcpFinTimeout = genruntime.ClonePointerToInt(config.NetIpv4TcpFinTimeout)

	// NetIpv4TcpKeepaliveProbes
	destination.NetIpv4TcpKeepaliveProbes = genruntime.ClonePointerToInt(config.NetIpv4TcpKeepaliveProbes)

	// NetIpv4TcpKeepaliveTime
	destination.NetIpv4TcpKeepaliveTime = genruntime.ClonePointerToInt(config.NetIpv4TcpKeepaliveTime)

	// NetIpv4TcpMaxSynBacklog
	destination.NetIpv4TcpMaxSynBacklog = genruntime.ClonePointerToInt(config.NetIpv4TcpMaxSynBacklog)

	// NetIpv4TcpMaxTwBuckets
	destination.NetIpv4TcpMaxTwBuckets = genruntime.ClonePointerToInt(config.NetIpv4TcpMaxTwBuckets)

	// NetIpv4TcpTwReuse
	if config.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *config.NetIpv4TcpTwReuse
		destination.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	} else {
		destination.NetIpv4TcpTwReuse = nil
	}

	// NetIpv4TcpkeepaliveIntvl
	destination.NetIpv4TcpkeepaliveIntvl = genruntime.ClonePointerToInt(config.NetIpv4TcpkeepaliveIntvl)

	// NetNetfilterNfConntrackBuckets
	destination.NetNetfilterNfConntrackBuckets = genruntime.ClonePointerToInt(config.NetNetfilterNfConntrackBuckets)

	// NetNetfilterNfConntrackMax
	destination.NetNetfilterNfConntrackMax = genruntime.ClonePointerToInt(config.NetNetfilterNfConntrackMax)

	// VmMaxMapCount
	destination.VmMaxMapCount = genruntime.ClonePointerToInt(config.VmMaxMapCount)

	// VmSwappiness
	destination.VmSwappiness = genruntime.ClonePointerToInt(config.VmSwappiness)

	// VmVfsCachePressure
	destination.VmVfsCachePressure = genruntime.ClonePointerToInt(config.VmVfsCachePressure)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&ManagedClustersAgentPool{}, &ManagedClustersAgentPoolList{})
}
