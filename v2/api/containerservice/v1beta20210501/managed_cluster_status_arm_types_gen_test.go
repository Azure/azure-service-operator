// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedCluster_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedCluster_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSTATUSARM, ManagedClusterSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSTATUSARM runs a test to see if a specific instance of ManagedCluster_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSTATUSARM(subject ManagedCluster_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedCluster_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedCluster_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterSTATUSARMGenerator()
var managedClusterSTATUSARMGenerator gopter.Gen

// ManagedClusterSTATUSARMGenerator returns a generator of ManagedCluster_STATUSARM instances for property testing.
// We first initialize managedClusterSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterSTATUSARMGenerator() gopter.Gen {
	if managedClusterSTATUSARMGenerator != nil {
		return managedClusterSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSTATUSARM(generators)
	managedClusterSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterSTATUSARM(generators)
	managedClusterSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_STATUSARM{}), generators)

	return managedClusterSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterSTATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
	gens["Identity"] = gen.PtrOf(ManagedClusterIdentitySTATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(ManagedClusterPropertiesSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(ManagedClusterSKUSTATUSARMGenerator())
}

func Test_ExtendedLocation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationSTATUSARM, ExtendedLocationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationSTATUSARM runs a test to see if a specific instance of ExtendedLocation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationSTATUSARM(subject ExtendedLocation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUSARM instances for property testing - lazily instantiated by
// ExtendedLocationSTATUSARMGenerator()
var extendedLocationSTATUSARMGenerator gopter.Gen

// ExtendedLocationSTATUSARMGenerator returns a generator of ExtendedLocation_STATUSARM instances for property testing.
func ExtendedLocationSTATUSARMGenerator() gopter.Gen {
	if extendedLocationSTATUSARMGenerator != nil {
		return extendedLocationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationSTATUSARM(generators)
	extendedLocationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUSARM{}), generators)

	return extendedLocationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_STATUS_EdgeZone))
}

func Test_ManagedClusterIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentitySTATUSARM, ManagedClusterIdentitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentitySTATUSARM runs a test to see if a specific instance of ManagedClusterIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentitySTATUSARM(subject ManagedClusterIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterIdentitySTATUSARMGenerator()
var managedClusterIdentitySTATUSARMGenerator gopter.Gen

// ManagedClusterIdentitySTATUSARMGenerator returns a generator of ManagedClusterIdentity_STATUSARM instances for property testing.
// We first initialize managedClusterIdentitySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterIdentitySTATUSARMGenerator() gopter.Gen {
	if managedClusterIdentitySTATUSARMGenerator != nil {
		return managedClusterIdentitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentitySTATUSARM(generators)
	managedClusterIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentitySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterIdentitySTATUSARM(generators)
	managedClusterIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_STATUSARM{}), generators)

	return managedClusterIdentitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedClusterIdentitySTATUSType_None, ManagedClusterIdentitySTATUSType_SystemAssigned, ManagedClusterIdentitySTATUSType_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedClusterIdentitySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator())
}

func Test_ManagedClusterProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPropertiesSTATUSARM, ManagedClusterPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPropertiesSTATUSARM runs a test to see if a specific instance of ManagedClusterProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPropertiesSTATUSARM(subject ManagedClusterProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterPropertiesSTATUSARMGenerator()
var managedClusterPropertiesSTATUSARMGenerator gopter.Gen

// ManagedClusterPropertiesSTATUSARMGenerator returns a generator of ManagedClusterProperties_STATUSARM instances for property testing.
// We first initialize managedClusterPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPropertiesSTATUSARMGenerator() gopter.Gen {
	if managedClusterPropertiesSTATUSARMGenerator != nil {
		return managedClusterPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPropertiesSTATUSARM(generators)
	managedClusterPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPropertiesSTATUSARM(generators)
	managedClusterPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_STATUSARM{}), generators)

	return managedClusterPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AzurePortalFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAccounts"] = gen.PtrOf(gen.Bool())
	gens["DiskEncryptionSetID"] = gen.PtrOf(gen.AlphaString())
	gens["DnsPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["EnablePodSecurityPolicy"] = gen.PtrOf(gen.Bool())
	gens["EnableRBAC"] = gen.PtrOf(gen.Bool())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["FqdnSubdomain"] = gen.PtrOf(gen.AlphaString())
	gens["KubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgentPools"] = gen.PtrOf(gen.Int())
	gens["NodeResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AadProfile"] = gen.PtrOf(ManagedClusterAADProfileSTATUSARMGenerator())
	gens["AgentPoolProfiles"] = gen.SliceOf(ManagedClusterAgentPoolProfileSTATUSARMGenerator())
	gens["ApiServerAccessProfile"] = gen.PtrOf(ManagedClusterAPIServerAccessProfileSTATUSARMGenerator())
	gens["AutoScalerProfile"] = gen.PtrOf(ManagedClusterPropertiesSTATUSAutoScalerProfileARMGenerator())
	gens["AutoUpgradeProfile"] = gen.PtrOf(ManagedClusterAutoUpgradeProfileSTATUSARMGenerator())
	gens["HttpProxyConfig"] = gen.PtrOf(ManagedClusterHTTPProxyConfigSTATUSARMGenerator())
	gens["LinuxProfile"] = gen.PtrOf(ContainerServiceLinuxProfileSTATUSARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(ContainerServiceNetworkProfileSTATUSARMGenerator())
	gens["PodIdentityProfile"] = gen.PtrOf(ManagedClusterPodIdentityProfileSTATUSARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerStateSTATUSARMGenerator())
	gens["PrivateLinkResources"] = gen.SliceOf(PrivateLinkResourceSTATUSARMGenerator())
	gens["ServicePrincipalProfile"] = gen.PtrOf(ManagedClusterServicePrincipalProfileSTATUSARMGenerator())
	gens["WindowsProfile"] = gen.PtrOf(ManagedClusterWindowsProfileSTATUSARMGenerator())
}

func Test_ManagedClusterSKU_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSKU_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSKUSTATUSARM, ManagedClusterSKUSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSKUSTATUSARM runs a test to see if a specific instance of ManagedClusterSKU_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSKUSTATUSARM(subject ManagedClusterSKU_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSKU_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSKU_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterSKUSTATUSARMGenerator()
var managedClusterSKUSTATUSARMGenerator gopter.Gen

// ManagedClusterSKUSTATUSARMGenerator returns a generator of ManagedClusterSKU_STATUSARM instances for property testing.
func ManagedClusterSKUSTATUSARMGenerator() gopter.Gen {
	if managedClusterSKUSTATUSARMGenerator != nil {
		return managedClusterSKUSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSKUSTATUSARM(generators)
	managedClusterSKUSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSKU_STATUSARM{}), generators)

	return managedClusterSKUSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSKUSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSKUSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKUSTATUSName_Basic))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKUSTATUSTier_Free, ManagedClusterSKUSTATUSTier_Paid))
}

func Test_ContainerServiceLinuxProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceLinuxProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceLinuxProfileSTATUSARM, ContainerServiceLinuxProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceLinuxProfileSTATUSARM runs a test to see if a specific instance of ContainerServiceLinuxProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceLinuxProfileSTATUSARM(subject ContainerServiceLinuxProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceLinuxProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceLinuxProfile_STATUSARM instances for property testing - lazily instantiated by
// ContainerServiceLinuxProfileSTATUSARMGenerator()
var containerServiceLinuxProfileSTATUSARMGenerator gopter.Gen

// ContainerServiceLinuxProfileSTATUSARMGenerator returns a generator of ContainerServiceLinuxProfile_STATUSARM instances for property testing.
// We first initialize containerServiceLinuxProfileSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceLinuxProfileSTATUSARMGenerator() gopter.Gen {
	if containerServiceLinuxProfileSTATUSARMGenerator != nil {
		return containerServiceLinuxProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfileSTATUSARM(generators)
	containerServiceLinuxProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfileSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceLinuxProfileSTATUSARM(generators)
	containerServiceLinuxProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_STATUSARM{}), generators)

	return containerServiceLinuxProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceLinuxProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceLinuxProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceLinuxProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceLinuxProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["Ssh"] = gen.PtrOf(ContainerServiceSshConfigurationSTATUSARMGenerator())
}

func Test_ContainerServiceNetworkProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceNetworkProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceNetworkProfileSTATUSARM, ContainerServiceNetworkProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceNetworkProfileSTATUSARM runs a test to see if a specific instance of ContainerServiceNetworkProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceNetworkProfileSTATUSARM(subject ContainerServiceNetworkProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceNetworkProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceNetworkProfile_STATUSARM instances for property testing - lazily instantiated by
// ContainerServiceNetworkProfileSTATUSARMGenerator()
var containerServiceNetworkProfileSTATUSARMGenerator gopter.Gen

// ContainerServiceNetworkProfileSTATUSARMGenerator returns a generator of ContainerServiceNetworkProfile_STATUSARM instances for property testing.
// We first initialize containerServiceNetworkProfileSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceNetworkProfileSTATUSARMGenerator() gopter.Gen {
	if containerServiceNetworkProfileSTATUSARMGenerator != nil {
		return containerServiceNetworkProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfileSTATUSARM(generators)
	containerServiceNetworkProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfileSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceNetworkProfileSTATUSARM(generators)
	containerServiceNetworkProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_STATUSARM{}), generators)

	return containerServiceNetworkProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceNetworkProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceNetworkProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["DnsServiceIP"] = gen.PtrOf(gen.AlphaString())
	gens["DockerBridgeCidr"] = gen.PtrOf(gen.AlphaString())
	gens["LoadBalancerSku"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileSTATUSLoadBalancerSku_Basic, ContainerServiceNetworkProfileSTATUSLoadBalancerSku_Standard))
	gens["NetworkMode"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileSTATUSNetworkMode_Bridge, ContainerServiceNetworkProfileSTATUSNetworkMode_Transparent))
	gens["NetworkPlugin"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileSTATUSNetworkPlugin_Azure, ContainerServiceNetworkProfileSTATUSNetworkPlugin_Kubenet))
	gens["NetworkPolicy"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileSTATUSNetworkPolicy_Azure, ContainerServiceNetworkProfileSTATUSNetworkPolicy_Calico))
	gens["OutboundType"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfileSTATUSOutboundType_LoadBalancer, ContainerServiceNetworkProfileSTATUSOutboundType_UserDefinedRouting))
	gens["PodCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceNetworkProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceNetworkProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["LoadBalancerProfile"] = gen.PtrOf(ManagedClusterLoadBalancerProfileSTATUSARMGenerator())
}

func Test_ManagedClusterAADProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAADProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAADProfileSTATUSARM, ManagedClusterAADProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAADProfileSTATUSARM runs a test to see if a specific instance of ManagedClusterAADProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAADProfileSTATUSARM(subject ManagedClusterAADProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAADProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAADProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterAADProfileSTATUSARMGenerator()
var managedClusterAADProfileSTATUSARMGenerator gopter.Gen

// ManagedClusterAADProfileSTATUSARMGenerator returns a generator of ManagedClusterAADProfile_STATUSARM instances for property testing.
func ManagedClusterAADProfileSTATUSARMGenerator() gopter.Gen {
	if managedClusterAADProfileSTATUSARMGenerator != nil {
		return managedClusterAADProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAADProfileSTATUSARM(generators)
	managedClusterAADProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAADProfile_STATUSARM{}), generators)

	return managedClusterAADProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAADProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAADProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["AdminGroupObjectIDs"] = gen.SliceOf(gen.AlphaString())
	gens["ClientAppID"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAzureRBAC"] = gen.PtrOf(gen.Bool())
	gens["Managed"] = gen.PtrOf(gen.Bool())
	gens["ServerAppID"] = gen.PtrOf(gen.AlphaString())
	gens["ServerAppSecret"] = gen.PtrOf(gen.AlphaString())
	gens["TenantID"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAgentPoolProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfileSTATUSARM, ManagedClusterAgentPoolProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfileSTATUSARM runs a test to see if a specific instance of ManagedClusterAgentPoolProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfileSTATUSARM(subject ManagedClusterAgentPoolProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterAgentPoolProfileSTATUSARMGenerator()
var managedClusterAgentPoolProfileSTATUSARMGenerator gopter.Gen

// ManagedClusterAgentPoolProfileSTATUSARMGenerator returns a generator of ManagedClusterAgentPoolProfile_STATUSARM instances for property testing.
// We first initialize managedClusterAgentPoolProfileSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfileSTATUSARMGenerator() gopter.Gen {
	if managedClusterAgentPoolProfileSTATUSARMGenerator != nil {
		return managedClusterAgentPoolProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileSTATUSARM(generators)
	managedClusterAgentPoolProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileSTATUSARM(generators)
	managedClusterAgentPoolProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_STATUSARM{}), generators)

	return managedClusterAgentPoolProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.OneConstOf(
		GPUInstanceProfile_STATUS_MIG1G,
		GPUInstanceProfile_STATUS_MIG2G,
		GPUInstanceProfile_STATUS_MIG3G,
		GPUInstanceProfile_STATUS_MIG4G,
		GPUInstanceProfile_STATUS_MIG7G))
	gens["KubeletDiskType"] = gen.PtrOf(gen.OneConstOf(KubeletDiskType_STATUS_OS, KubeletDiskType_STATUS_Temporary))
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(AgentPoolMode_STATUS_System, AgentPoolMode_STATUS_User))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NodeImageVersion"] = gen.PtrOf(gen.AlphaString())
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodePublicIPPrefixID"] = gen.PtrOf(gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsDiskType"] = gen.PtrOf(gen.OneConstOf(OSDiskType_STATUS_Ephemeral, OSDiskType_STATUS_Managed))
	gens["OsSKU"] = gen.PtrOf(gen.OneConstOf(OSSKU_STATUS_CBLMariner, OSSKU_STATUS_Ubuntu))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(OSType_STATUS_Linux, OSType_STATUS_Windows))
	gens["PodSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.OneConstOf(ScaleSetEvictionPolicy_STATUS_Deallocate, ScaleSetEvictionPolicy_STATUS_Delete))
	gens["ScaleSetPriority"] = gen.PtrOf(gen.OneConstOf(ScaleSetPriority_STATUS_Regular, ScaleSetPriority_STATUS_Spot))
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(AgentPoolType_STATUS_AvailabilitySet, AgentPoolType_STATUS_VirtualMachineScaleSets))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
	gens["VnetSubnetID"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfigSTATUSARMGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfigSTATUSARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerStateSTATUSARMGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettingsSTATUSARMGenerator())
}

func Test_ManagedClusterAPIServerAccessProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAPIServerAccessProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAPIServerAccessProfileSTATUSARM, ManagedClusterAPIServerAccessProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAPIServerAccessProfileSTATUSARM runs a test to see if a specific instance of ManagedClusterAPIServerAccessProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAPIServerAccessProfileSTATUSARM(subject ManagedClusterAPIServerAccessProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAPIServerAccessProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAPIServerAccessProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterAPIServerAccessProfileSTATUSARMGenerator()
var managedClusterAPIServerAccessProfileSTATUSARMGenerator gopter.Gen

// ManagedClusterAPIServerAccessProfileSTATUSARMGenerator returns a generator of ManagedClusterAPIServerAccessProfile_STATUSARM instances for property testing.
func ManagedClusterAPIServerAccessProfileSTATUSARMGenerator() gopter.Gen {
	if managedClusterAPIServerAccessProfileSTATUSARMGenerator != nil {
		return managedClusterAPIServerAccessProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfileSTATUSARM(generators)
	managedClusterAPIServerAccessProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAPIServerAccessProfile_STATUSARM{}), generators)

	return managedClusterAPIServerAccessProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["AuthorizedIPRanges"] = gen.SliceOf(gen.AlphaString())
	gens["EnablePrivateCluster"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateClusterPublicFQDN"] = gen.PtrOf(gen.Bool())
	gens["PrivateDNSZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAutoUpgradeProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAutoUpgradeProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAutoUpgradeProfileSTATUSARM, ManagedClusterAutoUpgradeProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAutoUpgradeProfileSTATUSARM runs a test to see if a specific instance of ManagedClusterAutoUpgradeProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAutoUpgradeProfileSTATUSARM(subject ManagedClusterAutoUpgradeProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAutoUpgradeProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAutoUpgradeProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterAutoUpgradeProfileSTATUSARMGenerator()
var managedClusterAutoUpgradeProfileSTATUSARMGenerator gopter.Gen

// ManagedClusterAutoUpgradeProfileSTATUSARMGenerator returns a generator of ManagedClusterAutoUpgradeProfile_STATUSARM instances for property testing.
func ManagedClusterAutoUpgradeProfileSTATUSARMGenerator() gopter.Gen {
	if managedClusterAutoUpgradeProfileSTATUSARMGenerator != nil {
		return managedClusterAutoUpgradeProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfileSTATUSARM(generators)
	managedClusterAutoUpgradeProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAutoUpgradeProfile_STATUSARM{}), generators)

	return managedClusterAutoUpgradeProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["UpgradeChannel"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterAutoUpgradeProfileSTATUSUpgradeChannel_NodeImage,
		ManagedClusterAutoUpgradeProfileSTATUSUpgradeChannel_None,
		ManagedClusterAutoUpgradeProfileSTATUSUpgradeChannel_Patch,
		ManagedClusterAutoUpgradeProfileSTATUSUpgradeChannel_Rapid,
		ManagedClusterAutoUpgradeProfileSTATUSUpgradeChannel_Stable))
}

func Test_ManagedClusterHTTPProxyConfig_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterHTTPProxyConfig_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterHTTPProxyConfigSTATUSARM, ManagedClusterHTTPProxyConfigSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterHTTPProxyConfigSTATUSARM runs a test to see if a specific instance of ManagedClusterHTTPProxyConfig_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterHTTPProxyConfigSTATUSARM(subject ManagedClusterHTTPProxyConfig_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterHTTPProxyConfig_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterHTTPProxyConfig_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterHTTPProxyConfigSTATUSARMGenerator()
var managedClusterHTTPProxyConfigSTATUSARMGenerator gopter.Gen

// ManagedClusterHTTPProxyConfigSTATUSARMGenerator returns a generator of ManagedClusterHTTPProxyConfig_STATUSARM instances for property testing.
func ManagedClusterHTTPProxyConfigSTATUSARMGenerator() gopter.Gen {
	if managedClusterHTTPProxyConfigSTATUSARMGenerator != nil {
		return managedClusterHTTPProxyConfigSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfigSTATUSARM(generators)
	managedClusterHTTPProxyConfigSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterHTTPProxyConfig_STATUSARM{}), generators)

	return managedClusterHTTPProxyConfigSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfigSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfigSTATUSARM(gens map[string]gopter.Gen) {
	gens["HttpProxy"] = gen.PtrOf(gen.AlphaString())
	gens["HttpsProxy"] = gen.PtrOf(gen.AlphaString())
	gens["NoProxy"] = gen.SliceOf(gen.AlphaString())
	gens["TrustedCa"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentitySTATUSUserAssignedIdentitiesARM, ManagedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentitySTATUSUserAssignedIdentitiesARM runs a test to see if a specific instance of ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentitySTATUSUserAssignedIdentitiesARM(subject ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing - lazily
// instantiated by ManagedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator()
var managedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator gopter.Gen

// ManagedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator returns a generator of ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing.
func ManagedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator() gopter.Gen {
	if managedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator != nil {
		return managedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentitySTATUSUserAssignedIdentitiesARM(generators)
	managedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_STATUS_UserAssignedIdentitiesARM{}), generators)

	return managedClusterIdentitySTATUSUserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentitySTATUSUserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentitySTATUSUserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProfileSTATUSARM, ManagedClusterPodIdentityProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProfileSTATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentityProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProfileSTATUSARM(subject ManagedClusterPodIdentityProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentityProfileSTATUSARMGenerator()
var managedClusterPodIdentityProfileSTATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentityProfileSTATUSARMGenerator returns a generator of ManagedClusterPodIdentityProfile_STATUSARM instances for property testing.
// We first initialize managedClusterPodIdentityProfileSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProfileSTATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProfileSTATUSARMGenerator != nil {
		return managedClusterPodIdentityProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfileSTATUSARM(generators)
	managedClusterPodIdentityProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfileSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfileSTATUSARM(generators)
	managedClusterPodIdentityProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_STATUSARM{}), generators)

	return managedClusterPodIdentityProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["AllowNetworkPluginKubenet"] = gen.PtrOf(gen.Bool())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.SliceOf(ManagedClusterPodIdentitySTATUSARMGenerator())
	gens["UserAssignedIdentityExceptions"] = gen.SliceOf(ManagedClusterPodIdentityExceptionSTATUSARMGenerator())
}

func Test_ManagedClusterProperties_STATUS_AutoScalerProfileARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_STATUS_AutoScalerProfileARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPropertiesSTATUSAutoScalerProfileARM, ManagedClusterPropertiesSTATUSAutoScalerProfileARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPropertiesSTATUSAutoScalerProfileARM runs a test to see if a specific instance of ManagedClusterProperties_STATUS_AutoScalerProfileARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPropertiesSTATUSAutoScalerProfileARM(subject ManagedClusterProperties_STATUS_AutoScalerProfileARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_STATUS_AutoScalerProfileARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_STATUS_AutoScalerProfileARM instances for property testing - lazily
// instantiated by ManagedClusterPropertiesSTATUSAutoScalerProfileARMGenerator()
var managedClusterPropertiesSTATUSAutoScalerProfileARMGenerator gopter.Gen

// ManagedClusterPropertiesSTATUSAutoScalerProfileARMGenerator returns a generator of ManagedClusterProperties_STATUS_AutoScalerProfileARM instances for property testing.
func ManagedClusterPropertiesSTATUSAutoScalerProfileARMGenerator() gopter.Gen {
	if managedClusterPropertiesSTATUSAutoScalerProfileARMGenerator != nil {
		return managedClusterPropertiesSTATUSAutoScalerProfileARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPropertiesSTATUSAutoScalerProfileARM(generators)
	managedClusterPropertiesSTATUSAutoScalerProfileARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_STATUS_AutoScalerProfileARM{}), generators)

	return managedClusterPropertiesSTATUSAutoScalerProfileARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPropertiesSTATUSAutoScalerProfileARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPropertiesSTATUSAutoScalerProfileARM(gens map[string]gopter.Gen) {
	gens["BalanceSimilarNodeGroups"] = gen.PtrOf(gen.AlphaString())
	gens["Expander"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterPropertiesSTATUSAutoScalerProfileExpander_LeastWaste,
		ManagedClusterPropertiesSTATUSAutoScalerProfileExpander_MostPods,
		ManagedClusterPropertiesSTATUSAutoScalerProfileExpander_Priority,
		ManagedClusterPropertiesSTATUSAutoScalerProfileExpander_Random))
	gens["MaxEmptyBulkDelete"] = gen.PtrOf(gen.AlphaString())
	gens["MaxGracefulTerminationSec"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNodeProvisionTime"] = gen.PtrOf(gen.AlphaString())
	gens["MaxTotalUnreadyPercentage"] = gen.PtrOf(gen.AlphaString())
	gens["NewPodScaleUpDelay"] = gen.PtrOf(gen.AlphaString())
	gens["OkTotalUnreadyCount"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterAdd"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterDelete"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterFailure"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnneededTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnreadyTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUtilizationThreshold"] = gen.PtrOf(gen.AlphaString())
	gens["ScanInterval"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithLocalStorage"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithSystemPods"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterServicePrincipalProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterServicePrincipalProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterServicePrincipalProfileSTATUSARM, ManagedClusterServicePrincipalProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterServicePrincipalProfileSTATUSARM runs a test to see if a specific instance of ManagedClusterServicePrincipalProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterServicePrincipalProfileSTATUSARM(subject ManagedClusterServicePrincipalProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterServicePrincipalProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterServicePrincipalProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterServicePrincipalProfileSTATUSARMGenerator()
var managedClusterServicePrincipalProfileSTATUSARMGenerator gopter.Gen

// ManagedClusterServicePrincipalProfileSTATUSARMGenerator returns a generator of ManagedClusterServicePrincipalProfile_STATUSARM instances for property testing.
func ManagedClusterServicePrincipalProfileSTATUSARMGenerator() gopter.Gen {
	if managedClusterServicePrincipalProfileSTATUSARMGenerator != nil {
		return managedClusterServicePrincipalProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfileSTATUSARM(generators)
	managedClusterServicePrincipalProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterServicePrincipalProfile_STATUSARM{}), generators)

	return managedClusterServicePrincipalProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterWindowsProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterWindowsProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterWindowsProfileSTATUSARM, ManagedClusterWindowsProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterWindowsProfileSTATUSARM runs a test to see if a specific instance of ManagedClusterWindowsProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterWindowsProfileSTATUSARM(subject ManagedClusterWindowsProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterWindowsProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterWindowsProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterWindowsProfileSTATUSARMGenerator()
var managedClusterWindowsProfileSTATUSARMGenerator gopter.Gen

// ManagedClusterWindowsProfileSTATUSARMGenerator returns a generator of ManagedClusterWindowsProfile_STATUSARM instances for property testing.
func ManagedClusterWindowsProfileSTATUSARMGenerator() gopter.Gen {
	if managedClusterWindowsProfileSTATUSARMGenerator != nil {
		return managedClusterWindowsProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterWindowsProfileSTATUSARM(generators)
	managedClusterWindowsProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWindowsProfile_STATUSARM{}), generators)

	return managedClusterWindowsProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterWindowsProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterWindowsProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["EnableCSIProxy"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.OneConstOf(ManagedClusterWindowsProfileSTATUSLicenseType_None, ManagedClusterWindowsProfileSTATUSLicenseType_WindowsServer))
}

func Test_PrivateLinkResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkResourceSTATUSARM, PrivateLinkResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkResourceSTATUSARM runs a test to see if a specific instance of PrivateLinkResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkResourceSTATUSARM(subject PrivateLinkResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkResource_STATUSARM instances for property testing - lazily instantiated by
// PrivateLinkResourceSTATUSARMGenerator()
var privateLinkResourceSTATUSARMGenerator gopter.Gen

// PrivateLinkResourceSTATUSARMGenerator returns a generator of PrivateLinkResource_STATUSARM instances for property testing.
func PrivateLinkResourceSTATUSARMGenerator() gopter.Gen {
	if privateLinkResourceSTATUSARMGenerator != nil {
		return privateLinkResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkResourceSTATUSARM(generators)
	privateLinkResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkResource_STATUSARM{}), generators)

	return privateLinkResourceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkResourceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceID"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMembers"] = gen.SliceOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerServiceSshConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshConfigurationSTATUSARM, ContainerServiceSshConfigurationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshConfigurationSTATUSARM runs a test to see if a specific instance of ContainerServiceSshConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshConfigurationSTATUSARM(subject ContainerServiceSshConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshConfiguration_STATUSARM instances for property testing - lazily instantiated by
// ContainerServiceSshConfigurationSTATUSARMGenerator()
var containerServiceSshConfigurationSTATUSARMGenerator gopter.Gen

// ContainerServiceSshConfigurationSTATUSARMGenerator returns a generator of ContainerServiceSshConfiguration_STATUSARM instances for property testing.
func ContainerServiceSshConfigurationSTATUSARMGenerator() gopter.Gen {
	if containerServiceSshConfigurationSTATUSARMGenerator != nil {
		return containerServiceSshConfigurationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerServiceSshConfigurationSTATUSARM(generators)
	containerServiceSshConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshConfiguration_STATUSARM{}), generators)

	return containerServiceSshConfigurationSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForContainerServiceSshConfigurationSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceSshConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["PublicKeys"] = gen.SliceOf(ContainerServiceSshPublicKeySTATUSARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSARM, ManagedClusterLoadBalancerProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSARM(subject ManagedClusterLoadBalancerProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterLoadBalancerProfileSTATUSARMGenerator()
var managedClusterLoadBalancerProfileSTATUSARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfileSTATUSARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_STATUSARM instances for property testing.
// We first initialize managedClusterLoadBalancerProfileSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterLoadBalancerProfileSTATUSARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfileSTATUSARMGenerator != nil {
		return managedClusterLoadBalancerProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSARM(generators)
	managedClusterLoadBalancerProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSARM(generators)
	managedClusterLoadBalancerProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUSARM{}), generators)

	return managedClusterLoadBalancerProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["AllocatedOutboundPorts"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["EffectiveOutboundIPs"] = gen.SliceOf(ResourceReferenceSTATUSARMGenerator())
	gens["ManagedOutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator())
	gens["OutboundIPPrefixes"] = gen.PtrOf(ManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator())
	gens["OutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator())
}

func Test_ManagedClusterPodIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentitySTATUSARM, ManagedClusterPodIdentitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentitySTATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentitySTATUSARM(subject ManagedClusterPodIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentitySTATUSARMGenerator()
var managedClusterPodIdentitySTATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentitySTATUSARMGenerator returns a generator of ManagedClusterPodIdentity_STATUSARM instances for property testing.
// We first initialize managedClusterPodIdentitySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentitySTATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentitySTATUSARMGenerator != nil {
		return managedClusterPodIdentitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentitySTATUSARM(generators)
	managedClusterPodIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentitySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentitySTATUSARM(generators)
	managedClusterPodIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_STATUSARM{}), generators)

	return managedClusterPodIdentitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["BindingSelector"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterPodIdentitySTATUSProvisioningState_Assigned,
		ManagedClusterPodIdentitySTATUSProvisioningState_Deleting,
		ManagedClusterPodIdentitySTATUSProvisioningState_Failed,
		ManagedClusterPodIdentitySTATUSProvisioningState_Updating))
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentitySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(UserAssignedIdentitySTATUSARMGenerator())
	gens["ProvisioningInfo"] = gen.PtrOf(ManagedClusterPodIdentitySTATUSProvisioningInfoARMGenerator())
}

func Test_ManagedClusterPodIdentityException_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityException_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityExceptionSTATUSARM, ManagedClusterPodIdentityExceptionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityExceptionSTATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentityException_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityExceptionSTATUSARM(subject ManagedClusterPodIdentityException_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityException_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityException_STATUSARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentityExceptionSTATUSARMGenerator()
var managedClusterPodIdentityExceptionSTATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentityExceptionSTATUSARMGenerator returns a generator of ManagedClusterPodIdentityException_STATUSARM instances for property testing.
func ManagedClusterPodIdentityExceptionSTATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentityExceptionSTATUSARMGenerator != nil {
		return managedClusterPodIdentityExceptionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityExceptionSTATUSARM(generators)
	managedClusterPodIdentityExceptionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityException_STATUSARM{}), generators)

	return managedClusterPodIdentityExceptionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityExceptionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityExceptionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["PodLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_ContainerServiceSshPublicKey_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshPublicKey_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshPublicKeySTATUSARM, ContainerServiceSshPublicKeySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshPublicKeySTATUSARM runs a test to see if a specific instance of ContainerServiceSshPublicKey_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshPublicKeySTATUSARM(subject ContainerServiceSshPublicKey_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshPublicKey_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshPublicKey_STATUSARM instances for property testing - lazily instantiated by
// ContainerServiceSshPublicKeySTATUSARMGenerator()
var containerServiceSshPublicKeySTATUSARMGenerator gopter.Gen

// ContainerServiceSshPublicKeySTATUSARMGenerator returns a generator of ContainerServiceSshPublicKey_STATUSARM instances for property testing.
func ContainerServiceSshPublicKeySTATUSARMGenerator() gopter.Gen {
	if containerServiceSshPublicKeySTATUSARMGenerator != nil {
		return containerServiceSshPublicKeySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceSshPublicKeySTATUSARM(generators)
	containerServiceSshPublicKeySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshPublicKey_STATUSARM{}), generators)

	return containerServiceSshPublicKeySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceSshPublicKeySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceSshPublicKeySTATUSARM(gens map[string]gopter.Gen) {
	gens["KeyData"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARM, ManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARM(subject ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator()
var managedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM instances for property testing.
func ManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator != nil {
		return managedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARM(generators)
	managedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUS_ManagedOutboundIPsARM{}), generators)

	return managedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSManagedOutboundIPsARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
}

func Test_ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARM, ManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARM(subject ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator()
var managedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM instances for property testing.
func ManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator != nil {
		return managedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARM(generators)
	managedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUS_OutboundIPPrefixesARM{}), generators)

	return managedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSOutboundIPPrefixesARM(gens map[string]gopter.Gen) {
	gens["PublicIPPrefixes"] = gen.SliceOf(ResourceReferenceSTATUSARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSOutboundIPsARM, ManagedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSOutboundIPsARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfileSTATUSOutboundIPsARM(subject ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator()
var managedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM instances for property testing.
func ManagedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator != nil {
		return managedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSOutboundIPsARM(generators)
	managedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUS_OutboundIPsARM{}), generators)

	return managedClusterLoadBalancerProfileSTATUSOutboundIPsARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSOutboundIPsARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfileSTATUSOutboundIPsARM(gens map[string]gopter.Gen) {
	gens["PublicIPs"] = gen.SliceOf(ResourceReferenceSTATUSARMGenerator())
}

func Test_ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentitySTATUSProvisioningInfoARM, ManagedClusterPodIdentitySTATUSProvisioningInfoARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentitySTATUSProvisioningInfoARM runs a test to see if a specific instance of ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentitySTATUSProvisioningInfoARM(subject ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentitySTATUSProvisioningInfoARMGenerator()
var managedClusterPodIdentitySTATUSProvisioningInfoARMGenerator gopter.Gen

// ManagedClusterPodIdentitySTATUSProvisioningInfoARMGenerator returns a generator of ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM instances for property testing.
func ManagedClusterPodIdentitySTATUSProvisioningInfoARMGenerator() gopter.Gen {
	if managedClusterPodIdentitySTATUSProvisioningInfoARMGenerator != nil {
		return managedClusterPodIdentitySTATUSProvisioningInfoARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentitySTATUSProvisioningInfoARM(generators)
	managedClusterPodIdentitySTATUSProvisioningInfoARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_STATUS_ProvisioningInfoARM{}), generators)

	return managedClusterPodIdentitySTATUSProvisioningInfoARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentitySTATUSProvisioningInfoARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentitySTATUSProvisioningInfoARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningErrorSTATUSARMGenerator())
}

func Test_ResourceReference_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReferenceSTATUSARM, ResourceReferenceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReferenceSTATUSARM runs a test to see if a specific instance of ResourceReference_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReferenceSTATUSARM(subject ResourceReference_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_STATUSARM instances for property testing - lazily instantiated by
// ResourceReferenceSTATUSARMGenerator()
var resourceReferenceSTATUSARMGenerator gopter.Gen

// ResourceReferenceSTATUSARMGenerator returns a generator of ResourceReference_STATUSARM instances for property testing.
func ResourceReferenceSTATUSARMGenerator() gopter.Gen {
	if resourceReferenceSTATUSARMGenerator != nil {
		return resourceReferenceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReferenceSTATUSARM(generators)
	resourceReferenceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_STATUSARM{}), generators)

	return resourceReferenceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReferenceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReferenceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentitySTATUSARM, UserAssignedIdentitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentitySTATUSARM runs a test to see if a specific instance of UserAssignedIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentitySTATUSARM(subject UserAssignedIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_STATUSARM instances for property testing - lazily instantiated by
// UserAssignedIdentitySTATUSARMGenerator()
var userAssignedIdentitySTATUSARMGenerator gopter.Gen

// UserAssignedIdentitySTATUSARMGenerator returns a generator of UserAssignedIdentity_STATUSARM instances for property testing.
func UserAssignedIdentitySTATUSARMGenerator() gopter.Gen {
	if userAssignedIdentitySTATUSARMGenerator != nil {
		return userAssignedIdentitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentitySTATUSARM(generators)
	userAssignedIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_STATUSARM{}), generators)

	return userAssignedIdentitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProvisioningError_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningError_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorSTATUSARM, ManagedClusterPodIdentityProvisioningErrorSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorSTATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningError_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorSTATUSARM(subject ManagedClusterPodIdentityProvisioningError_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningError_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningError_STATUSARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentityProvisioningErrorSTATUSARMGenerator()
var managedClusterPodIdentityProvisioningErrorSTATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorSTATUSARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningError_STATUSARM instances for property testing.
func ManagedClusterPodIdentityProvisioningErrorSTATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorSTATUSARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorSTATUSARM(generators)
	managedClusterPodIdentityProvisioningErrorSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningError_STATUSARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorSTATUSARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM, ManagedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM(subject ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator()
var managedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM instances for property testing.
// We first initialize managedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM(generators)
	managedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM(generators)
	managedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUSARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBodySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSARM(gens map[string]gopter.Gen) {
	gens["Details"] = gen.SliceOf(ManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARM, ManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARM(subject ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM instances for property testing -
// lazily instantiated by ManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator()
var managedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM instances for property testing.
func ManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARM(generators)
	managedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUS_UnrolledARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBodySTATUSUnrolledARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}
