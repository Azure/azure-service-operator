// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AgentPool_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPool_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolSTATUSARM, AgentPoolSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolSTATUSARM runs a test to see if a specific instance of AgentPool_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolSTATUSARM(subject AgentPool_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPool_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPool_STATUSARM instances for property testing - lazily instantiated by AgentPoolSTATUSARMGenerator()
var agentPoolSTATUSARMGenerator gopter.Gen

// AgentPoolSTATUSARMGenerator returns a generator of AgentPool_STATUSARM instances for property testing.
// We first initialize agentPoolSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AgentPoolSTATUSARMGenerator() gopter.Gen {
	if agentPoolSTATUSARMGenerator != nil {
		return agentPoolSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolSTATUSARM(generators)
	agentPoolSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AgentPool_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForAgentPoolSTATUSARM(generators)
	agentPoolSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AgentPool_STATUSARM{}), generators)

	return agentPoolSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAgentPoolSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAgentPoolSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ManagedClusterAgentPoolProfilePropertiesSTATUSARMGenerator())
}

func Test_ManagedClusterAgentPoolProfileProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfileProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfilePropertiesSTATUSARM, ManagedClusterAgentPoolProfilePropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfilePropertiesSTATUSARM runs a test to see if a specific instance of ManagedClusterAgentPoolProfileProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfilePropertiesSTATUSARM(subject ManagedClusterAgentPoolProfileProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfileProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfileProperties_STATUSARM instances for property testing - lazily instantiated
// by ManagedClusterAgentPoolProfilePropertiesSTATUSARMGenerator()
var managedClusterAgentPoolProfilePropertiesSTATUSARMGenerator gopter.Gen

// ManagedClusterAgentPoolProfilePropertiesSTATUSARMGenerator returns a generator of ManagedClusterAgentPoolProfileProperties_STATUSARM instances for property testing.
// We first initialize managedClusterAgentPoolProfilePropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfilePropertiesSTATUSARMGenerator() gopter.Gen {
	if managedClusterAgentPoolProfilePropertiesSTATUSARMGenerator != nil {
		return managedClusterAgentPoolProfilePropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSTATUSARM(generators)
	managedClusterAgentPoolProfilePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfileProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSTATUSARM(generators)
	managedClusterAgentPoolProfilePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfileProperties_STATUSARM{}), generators)

	return managedClusterAgentPoolProfilePropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.OneConstOf(
		GPUInstanceProfile_STATUS_MIG1G,
		GPUInstanceProfile_STATUS_MIG2G,
		GPUInstanceProfile_STATUS_MIG3G,
		GPUInstanceProfile_STATUS_MIG4G,
		GPUInstanceProfile_STATUS_MIG7G))
	gens["KubeletDiskType"] = gen.PtrOf(gen.OneConstOf(KubeletDiskType_STATUS_OS, KubeletDiskType_STATUS_Temporary))
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(AgentPoolMode_STATUS_System, AgentPoolMode_STATUS_User))
	gens["NodeImageVersion"] = gen.PtrOf(gen.AlphaString())
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodePublicIPPrefixID"] = gen.PtrOf(gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsDiskType"] = gen.PtrOf(gen.OneConstOf(OSDiskType_STATUS_Ephemeral, OSDiskType_STATUS_Managed))
	gens["OsSKU"] = gen.PtrOf(gen.OneConstOf(OSSKU_STATUS_CBLMariner, OSSKU_STATUS_Ubuntu))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(OSType_STATUS_Linux, OSType_STATUS_Windows))
	gens["PodSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.OneConstOf(ScaleSetEvictionPolicy_STATUS_Deallocate, ScaleSetEvictionPolicy_STATUS_Delete))
	gens["ScaleSetPriority"] = gen.PtrOf(gen.OneConstOf(ScaleSetPriority_STATUS_Regular, ScaleSetPriority_STATUS_Spot))
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(AgentPoolType_STATUS_AvailabilitySet, AgentPoolType_STATUS_VirtualMachineScaleSets))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
	gens["VnetSubnetID"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfilePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfigSTATUSARMGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfigSTATUSARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerStateSTATUSARMGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettingsSTATUSARMGenerator())
}

func Test_AgentPoolUpgradeSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AgentPoolUpgradeSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAgentPoolUpgradeSettingsSTATUSARM, AgentPoolUpgradeSettingsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAgentPoolUpgradeSettingsSTATUSARM runs a test to see if a specific instance of AgentPoolUpgradeSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAgentPoolUpgradeSettingsSTATUSARM(subject AgentPoolUpgradeSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AgentPoolUpgradeSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AgentPoolUpgradeSettings_STATUSARM instances for property testing - lazily instantiated by
// AgentPoolUpgradeSettingsSTATUSARMGenerator()
var agentPoolUpgradeSettingsSTATUSARMGenerator gopter.Gen

// AgentPoolUpgradeSettingsSTATUSARMGenerator returns a generator of AgentPoolUpgradeSettings_STATUSARM instances for property testing.
func AgentPoolUpgradeSettingsSTATUSARMGenerator() gopter.Gen {
	if agentPoolUpgradeSettingsSTATUSARMGenerator != nil {
		return agentPoolUpgradeSettingsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettingsSTATUSARM(generators)
	agentPoolUpgradeSettingsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AgentPoolUpgradeSettings_STATUSARM{}), generators)

	return agentPoolUpgradeSettingsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettingsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAgentPoolUpgradeSettingsSTATUSARM(gens map[string]gopter.Gen) {
	gens["MaxSurge"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeletConfig_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeletConfig_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeletConfigSTATUSARM, KubeletConfigSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeletConfigSTATUSARM runs a test to see if a specific instance of KubeletConfig_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeletConfigSTATUSARM(subject KubeletConfig_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeletConfig_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeletConfig_STATUSARM instances for property testing - lazily instantiated by
// KubeletConfigSTATUSARMGenerator()
var kubeletConfigSTATUSARMGenerator gopter.Gen

// KubeletConfigSTATUSARMGenerator returns a generator of KubeletConfig_STATUSARM instances for property testing.
func KubeletConfigSTATUSARMGenerator() gopter.Gen {
	if kubeletConfigSTATUSARMGenerator != nil {
		return kubeletConfigSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeletConfigSTATUSARM(generators)
	kubeletConfigSTATUSARMGenerator = gen.Struct(reflect.TypeOf(KubeletConfig_STATUSARM{}), generators)

	return kubeletConfigSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForKubeletConfigSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeletConfigSTATUSARM(gens map[string]gopter.Gen) {
	gens["AllowedUnsafeSysctls"] = gen.SliceOf(gen.AlphaString())
	gens["ContainerLogMaxFiles"] = gen.PtrOf(gen.Int())
	gens["ContainerLogMaxSizeMB"] = gen.PtrOf(gen.Int())
	gens["CpuCfsQuota"] = gen.PtrOf(gen.Bool())
	gens["CpuCfsQuotaPeriod"] = gen.PtrOf(gen.AlphaString())
	gens["CpuManagerPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["FailSwapOn"] = gen.PtrOf(gen.Bool())
	gens["ImageGcHighThreshold"] = gen.PtrOf(gen.Int())
	gens["ImageGcLowThreshold"] = gen.PtrOf(gen.Int())
	gens["PodMaxPids"] = gen.PtrOf(gen.Int())
	gens["TopologyManagerPolicy"] = gen.PtrOf(gen.AlphaString())
}

func Test_LinuxOSConfig_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LinuxOSConfig_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLinuxOSConfigSTATUSARM, LinuxOSConfigSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLinuxOSConfigSTATUSARM runs a test to see if a specific instance of LinuxOSConfig_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLinuxOSConfigSTATUSARM(subject LinuxOSConfig_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LinuxOSConfig_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LinuxOSConfig_STATUSARM instances for property testing - lazily instantiated by
// LinuxOSConfigSTATUSARMGenerator()
var linuxOSConfigSTATUSARMGenerator gopter.Gen

// LinuxOSConfigSTATUSARMGenerator returns a generator of LinuxOSConfig_STATUSARM instances for property testing.
// We first initialize linuxOSConfigSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LinuxOSConfigSTATUSARMGenerator() gopter.Gen {
	if linuxOSConfigSTATUSARMGenerator != nil {
		return linuxOSConfigSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxOSConfigSTATUSARM(generators)
	linuxOSConfigSTATUSARMGenerator = gen.Struct(reflect.TypeOf(LinuxOSConfig_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxOSConfigSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForLinuxOSConfigSTATUSARM(generators)
	linuxOSConfigSTATUSARMGenerator = gen.Struct(reflect.TypeOf(LinuxOSConfig_STATUSARM{}), generators)

	return linuxOSConfigSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForLinuxOSConfigSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLinuxOSConfigSTATUSARM(gens map[string]gopter.Gen) {
	gens["SwapFileSizeMB"] = gen.PtrOf(gen.Int())
	gens["TransparentHugePageDefrag"] = gen.PtrOf(gen.AlphaString())
	gens["TransparentHugePageEnabled"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForLinuxOSConfigSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLinuxOSConfigSTATUSARM(gens map[string]gopter.Gen) {
	gens["Sysctls"] = gen.PtrOf(SysctlConfigSTATUSARMGenerator())
}

func Test_PowerState_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PowerState_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPowerStateSTATUSARM, PowerStateSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPowerStateSTATUSARM runs a test to see if a specific instance of PowerState_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPowerStateSTATUSARM(subject PowerState_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PowerState_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PowerState_STATUSARM instances for property testing - lazily instantiated by
// PowerStateSTATUSARMGenerator()
var powerStateSTATUSARMGenerator gopter.Gen

// PowerStateSTATUSARMGenerator returns a generator of PowerState_STATUSARM instances for property testing.
func PowerStateSTATUSARMGenerator() gopter.Gen {
	if powerStateSTATUSARMGenerator != nil {
		return powerStateSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPowerStateSTATUSARM(generators)
	powerStateSTATUSARMGenerator = gen.Struct(reflect.TypeOf(PowerState_STATUSARM{}), generators)

	return powerStateSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPowerStateSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPowerStateSTATUSARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.OneConstOf(PowerStateSTATUSCode_Running, PowerStateSTATUSCode_Stopped))
}

func Test_SysctlConfig_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SysctlConfig_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSysctlConfigSTATUSARM, SysctlConfigSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSysctlConfigSTATUSARM runs a test to see if a specific instance of SysctlConfig_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSysctlConfigSTATUSARM(subject SysctlConfig_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SysctlConfig_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SysctlConfig_STATUSARM instances for property testing - lazily instantiated by
// SysctlConfigSTATUSARMGenerator()
var sysctlConfigSTATUSARMGenerator gopter.Gen

// SysctlConfigSTATUSARMGenerator returns a generator of SysctlConfig_STATUSARM instances for property testing.
func SysctlConfigSTATUSARMGenerator() gopter.Gen {
	if sysctlConfigSTATUSARMGenerator != nil {
		return sysctlConfigSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSysctlConfigSTATUSARM(generators)
	sysctlConfigSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SysctlConfig_STATUSARM{}), generators)

	return sysctlConfigSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSysctlConfigSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSysctlConfigSTATUSARM(gens map[string]gopter.Gen) {
	gens["FsAioMaxNr"] = gen.PtrOf(gen.Int())
	gens["FsFileMax"] = gen.PtrOf(gen.Int())
	gens["FsInotifyMaxUserWatches"] = gen.PtrOf(gen.Int())
	gens["FsNrOpen"] = gen.PtrOf(gen.Int())
	gens["KernelThreadsMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreNetdevMaxBacklog"] = gen.PtrOf(gen.Int())
	gens["NetCoreOptmemMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreRmemDefault"] = gen.PtrOf(gen.Int())
	gens["NetCoreRmemMax"] = gen.PtrOf(gen.Int())
	gens["NetCoreSomaxconn"] = gen.PtrOf(gen.Int())
	gens["NetCoreWmemDefault"] = gen.PtrOf(gen.Int())
	gens["NetCoreWmemMax"] = gen.PtrOf(gen.Int())
	gens["NetIpv4IpLocalPortRange"] = gen.PtrOf(gen.AlphaString())
	gens["NetIpv4NeighDefaultGcThresh1"] = gen.PtrOf(gen.Int())
	gens["NetIpv4NeighDefaultGcThresh2"] = gen.PtrOf(gen.Int())
	gens["NetIpv4NeighDefaultGcThresh3"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpFinTimeout"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpKeepaliveProbes"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpKeepaliveTime"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpMaxSynBacklog"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpMaxTwBuckets"] = gen.PtrOf(gen.Int())
	gens["NetIpv4TcpTwReuse"] = gen.PtrOf(gen.Bool())
	gens["NetIpv4TcpkeepaliveIntvl"] = gen.PtrOf(gen.Int())
	gens["NetNetfilterNfConntrackBuckets"] = gen.PtrOf(gen.Int())
	gens["NetNetfilterNfConntrackMax"] = gen.PtrOf(gen.Int())
	gens["VmMaxMapCount"] = gen.PtrOf(gen.Int())
	gens["VmSwappiness"] = gen.PtrOf(gen.Int())
	gens["VmVfsCachePressure"] = gen.PtrOf(gen.Int())
}
