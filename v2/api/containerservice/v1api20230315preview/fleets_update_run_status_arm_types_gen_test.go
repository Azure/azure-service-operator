// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230315preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ErrorAdditionalInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorAdditionalInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorAdditionalInfo_STATUS_ARM, ErrorAdditionalInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorAdditionalInfo_STATUS_ARM runs a test to see if a specific instance of ErrorAdditionalInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorAdditionalInfo_STATUS_ARM(subject ErrorAdditionalInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorAdditionalInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorAdditionalInfo_STATUS_ARM instances for property testing - lazily instantiated by
// ErrorAdditionalInfo_STATUS_ARMGenerator()
var errorAdditionalInfo_STATUS_ARMGenerator gopter.Gen

// ErrorAdditionalInfo_STATUS_ARMGenerator returns a generator of ErrorAdditionalInfo_STATUS_ARM instances for property testing.
func ErrorAdditionalInfo_STATUS_ARMGenerator() gopter.Gen {
	if errorAdditionalInfo_STATUS_ARMGenerator != nil {
		return errorAdditionalInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorAdditionalInfo_STATUS_ARM(generators)
	errorAdditionalInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorAdditionalInfo_STATUS_ARM{}), generators)

	return errorAdditionalInfo_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForErrorAdditionalInfo_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorAdditionalInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ErrorDetail_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorDetail_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorDetail_STATUS_ARM, ErrorDetail_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorDetail_STATUS_ARM runs a test to see if a specific instance of ErrorDetail_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorDetail_STATUS_ARM(subject ErrorDetail_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorDetail_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorDetail_STATUS_ARM instances for property testing - lazily instantiated by
// ErrorDetail_STATUS_ARMGenerator()
var errorDetail_STATUS_ARMGenerator gopter.Gen

// ErrorDetail_STATUS_ARMGenerator returns a generator of ErrorDetail_STATUS_ARM instances for property testing.
// We first initialize errorDetail_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ErrorDetail_STATUS_ARMGenerator() gopter.Gen {
	if errorDetail_STATUS_ARMGenerator != nil {
		return errorDetail_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetail_STATUS_ARM(generators)
	errorDetail_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetail_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForErrorDetail_STATUS_ARM(generators)
	errorDetail_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_ARM{}), generators)

	return errorDetail_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForErrorDetail_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorDetail_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForErrorDetail_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorDetail_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdditionalInfo"] = gen.SliceOf(ErrorAdditionalInfo_STATUS_ARMGenerator())
	gens["Details"] = gen.SliceOf(ErrorDetail_STATUS_Unrolled_ARMGenerator())
}

func Test_ErrorDetail_STATUS_Unrolled_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorDetail_STATUS_Unrolled_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorDetail_STATUS_Unrolled_ARM, ErrorDetail_STATUS_Unrolled_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorDetail_STATUS_Unrolled_ARM runs a test to see if a specific instance of ErrorDetail_STATUS_Unrolled_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorDetail_STATUS_Unrolled_ARM(subject ErrorDetail_STATUS_Unrolled_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorDetail_STATUS_Unrolled_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorDetail_STATUS_Unrolled_ARM instances for property testing - lazily instantiated by
// ErrorDetail_STATUS_Unrolled_ARMGenerator()
var errorDetail_STATUS_Unrolled_ARMGenerator gopter.Gen

// ErrorDetail_STATUS_Unrolled_ARMGenerator returns a generator of ErrorDetail_STATUS_Unrolled_ARM instances for property testing.
// We first initialize errorDetail_STATUS_Unrolled_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ErrorDetail_STATUS_Unrolled_ARMGenerator() gopter.Gen {
	if errorDetail_STATUS_Unrolled_ARMGenerator != nil {
		return errorDetail_STATUS_Unrolled_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(generators)
	errorDetail_STATUS_Unrolled_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_Unrolled_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(generators)
	AddRelatedPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(generators)
	errorDetail_STATUS_Unrolled_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_Unrolled_ARM{}), generators)

	return errorDetail_STATUS_Unrolled_ARMGenerator
}

// AddIndependentPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(gens map[string]gopter.Gen) {
	gens["AdditionalInfo"] = gen.SliceOf(ErrorAdditionalInfo_STATUS_ARMGenerator())
}

func Test_Fleets_UpdateRun_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Fleets_UpdateRun_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFleets_UpdateRun_STATUS_ARM, Fleets_UpdateRun_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFleets_UpdateRun_STATUS_ARM runs a test to see if a specific instance of Fleets_UpdateRun_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFleets_UpdateRun_STATUS_ARM(subject Fleets_UpdateRun_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Fleets_UpdateRun_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Fleets_UpdateRun_STATUS_ARM instances for property testing - lazily instantiated by
// Fleets_UpdateRun_STATUS_ARMGenerator()
var fleets_UpdateRun_STATUS_ARMGenerator gopter.Gen

// Fleets_UpdateRun_STATUS_ARMGenerator returns a generator of Fleets_UpdateRun_STATUS_ARM instances for property testing.
// We first initialize fleets_UpdateRun_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Fleets_UpdateRun_STATUS_ARMGenerator() gopter.Gen {
	if fleets_UpdateRun_STATUS_ARMGenerator != nil {
		return fleets_UpdateRun_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFleets_UpdateRun_STATUS_ARM(generators)
	fleets_UpdateRun_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Fleets_UpdateRun_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFleets_UpdateRun_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFleets_UpdateRun_STATUS_ARM(generators)
	fleets_UpdateRun_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Fleets_UpdateRun_STATUS_ARM{}), generators)

	return fleets_UpdateRun_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFleets_UpdateRun_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFleets_UpdateRun_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ETag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFleets_UpdateRun_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFleets_UpdateRun_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(UpdateRunProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_ManagedClusterUpdate_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterUpdate_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterUpdate_STATUS_ARM, ManagedClusterUpdate_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterUpdate_STATUS_ARM runs a test to see if a specific instance of ManagedClusterUpdate_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterUpdate_STATUS_ARM(subject ManagedClusterUpdate_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterUpdate_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterUpdate_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterUpdate_STATUS_ARMGenerator()
var managedClusterUpdate_STATUS_ARMGenerator gopter.Gen

// ManagedClusterUpdate_STATUS_ARMGenerator returns a generator of ManagedClusterUpdate_STATUS_ARM instances for property testing.
func ManagedClusterUpdate_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterUpdate_STATUS_ARMGenerator != nil {
		return managedClusterUpdate_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterUpdate_STATUS_ARM(generators)
	managedClusterUpdate_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterUpdate_STATUS_ARM{}), generators)

	return managedClusterUpdate_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterUpdate_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterUpdate_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Upgrade"] = gen.PtrOf(ManagedClusterUpgradeSpec_STATUS_ARMGenerator())
}

func Test_ManagedClusterUpgradeSpec_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterUpgradeSpec_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterUpgradeSpec_STATUS_ARM, ManagedClusterUpgradeSpec_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterUpgradeSpec_STATUS_ARM runs a test to see if a specific instance of ManagedClusterUpgradeSpec_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterUpgradeSpec_STATUS_ARM(subject ManagedClusterUpgradeSpec_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterUpgradeSpec_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterUpgradeSpec_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterUpgradeSpec_STATUS_ARMGenerator()
var managedClusterUpgradeSpec_STATUS_ARMGenerator gopter.Gen

// ManagedClusterUpgradeSpec_STATUS_ARMGenerator returns a generator of ManagedClusterUpgradeSpec_STATUS_ARM instances for property testing.
func ManagedClusterUpgradeSpec_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterUpgradeSpec_STATUS_ARMGenerator != nil {
		return managedClusterUpgradeSpec_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterUpgradeSpec_STATUS_ARM(generators)
	managedClusterUpgradeSpec_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterUpgradeSpec_STATUS_ARM{}), generators)

	return managedClusterUpgradeSpec_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterUpgradeSpec_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterUpgradeSpec_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["KubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedClusterUpgradeType_STATUS_ARM_Full, ManagedClusterUpgradeType_STATUS_ARM_NodeImageOnly))
}

func Test_MemberUpdateStatus_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MemberUpdateStatus_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMemberUpdateStatus_STATUS_ARM, MemberUpdateStatus_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMemberUpdateStatus_STATUS_ARM runs a test to see if a specific instance of MemberUpdateStatus_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMemberUpdateStatus_STATUS_ARM(subject MemberUpdateStatus_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MemberUpdateStatus_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MemberUpdateStatus_STATUS_ARM instances for property testing - lazily instantiated by
// MemberUpdateStatus_STATUS_ARMGenerator()
var memberUpdateStatus_STATUS_ARMGenerator gopter.Gen

// MemberUpdateStatus_STATUS_ARMGenerator returns a generator of MemberUpdateStatus_STATUS_ARM instances for property testing.
// We first initialize memberUpdateStatus_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func MemberUpdateStatus_STATUS_ARMGenerator() gopter.Gen {
	if memberUpdateStatus_STATUS_ARMGenerator != nil {
		return memberUpdateStatus_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMemberUpdateStatus_STATUS_ARM(generators)
	memberUpdateStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MemberUpdateStatus_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMemberUpdateStatus_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForMemberUpdateStatus_STATUS_ARM(generators)
	memberUpdateStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MemberUpdateStatus_STATUS_ARM{}), generators)

	return memberUpdateStatus_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMemberUpdateStatus_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMemberUpdateStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClusterResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OperationId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForMemberUpdateStatus_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMemberUpdateStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(UpdateStatus_STATUS_ARMGenerator())
}

func Test_UpdateGroupStatus_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateGroupStatus_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateGroupStatus_STATUS_ARM, UpdateGroupStatus_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateGroupStatus_STATUS_ARM runs a test to see if a specific instance of UpdateGroupStatus_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateGroupStatus_STATUS_ARM(subject UpdateGroupStatus_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateGroupStatus_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateGroupStatus_STATUS_ARM instances for property testing - lazily instantiated by
// UpdateGroupStatus_STATUS_ARMGenerator()
var updateGroupStatus_STATUS_ARMGenerator gopter.Gen

// UpdateGroupStatus_STATUS_ARMGenerator returns a generator of UpdateGroupStatus_STATUS_ARM instances for property testing.
// We first initialize updateGroupStatus_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpdateGroupStatus_STATUS_ARMGenerator() gopter.Gen {
	if updateGroupStatus_STATUS_ARMGenerator != nil {
		return updateGroupStatus_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateGroupStatus_STATUS_ARM(generators)
	updateGroupStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateGroupStatus_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateGroupStatus_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUpdateGroupStatus_STATUS_ARM(generators)
	updateGroupStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateGroupStatus_STATUS_ARM{}), generators)

	return updateGroupStatus_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateGroupStatus_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateGroupStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUpdateGroupStatus_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateGroupStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Members"] = gen.SliceOf(MemberUpdateStatus_STATUS_ARMGenerator())
	gens["Status"] = gen.PtrOf(UpdateStatus_STATUS_ARMGenerator())
}

func Test_UpdateGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateGroup_STATUS_ARM, UpdateGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateGroup_STATUS_ARM runs a test to see if a specific instance of UpdateGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateGroup_STATUS_ARM(subject UpdateGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateGroup_STATUS_ARM instances for property testing - lazily instantiated by
// UpdateGroup_STATUS_ARMGenerator()
var updateGroup_STATUS_ARMGenerator gopter.Gen

// UpdateGroup_STATUS_ARMGenerator returns a generator of UpdateGroup_STATUS_ARM instances for property testing.
func UpdateGroup_STATUS_ARMGenerator() gopter.Gen {
	if updateGroup_STATUS_ARMGenerator != nil {
		return updateGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateGroup_STATUS_ARM(generators)
	updateGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateGroup_STATUS_ARM{}), generators)

	return updateGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpdateRunProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateRunProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateRunProperties_STATUS_ARM, UpdateRunProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateRunProperties_STATUS_ARM runs a test to see if a specific instance of UpdateRunProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateRunProperties_STATUS_ARM(subject UpdateRunProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateRunProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateRunProperties_STATUS_ARM instances for property testing - lazily instantiated by
// UpdateRunProperties_STATUS_ARMGenerator()
var updateRunProperties_STATUS_ARMGenerator gopter.Gen

// UpdateRunProperties_STATUS_ARMGenerator returns a generator of UpdateRunProperties_STATUS_ARM instances for property testing.
// We first initialize updateRunProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpdateRunProperties_STATUS_ARMGenerator() gopter.Gen {
	if updateRunProperties_STATUS_ARMGenerator != nil {
		return updateRunProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateRunProperties_STATUS_ARM(generators)
	updateRunProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateRunProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateRunProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUpdateRunProperties_STATUS_ARM(generators)
	updateRunProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateRunProperties_STATUS_ARM{}), generators)

	return updateRunProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateRunProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateRunProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(UpdateRunProvisioningState_STATUS_ARM_Canceled, UpdateRunProvisioningState_STATUS_ARM_Failed, UpdateRunProvisioningState_STATUS_ARM_Succeeded))
}

// AddRelatedPropertyGeneratorsForUpdateRunProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateRunProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ManagedClusterUpdate"] = gen.PtrOf(ManagedClusterUpdate_STATUS_ARMGenerator())
	gens["Status"] = gen.PtrOf(UpdateRunStatus_STATUS_ARMGenerator())
	gens["Strategy"] = gen.PtrOf(UpdateRunStrategy_STATUS_ARMGenerator())
}

func Test_UpdateRunStatus_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateRunStatus_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateRunStatus_STATUS_ARM, UpdateRunStatus_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateRunStatus_STATUS_ARM runs a test to see if a specific instance of UpdateRunStatus_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateRunStatus_STATUS_ARM(subject UpdateRunStatus_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateRunStatus_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateRunStatus_STATUS_ARM instances for property testing - lazily instantiated by
// UpdateRunStatus_STATUS_ARMGenerator()
var updateRunStatus_STATUS_ARMGenerator gopter.Gen

// UpdateRunStatus_STATUS_ARMGenerator returns a generator of UpdateRunStatus_STATUS_ARM instances for property testing.
func UpdateRunStatus_STATUS_ARMGenerator() gopter.Gen {
	if updateRunStatus_STATUS_ARMGenerator != nil {
		return updateRunStatus_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUpdateRunStatus_STATUS_ARM(generators)
	updateRunStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateRunStatus_STATUS_ARM{}), generators)

	return updateRunStatus_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForUpdateRunStatus_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateRunStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Stages"] = gen.SliceOf(UpdateStageStatus_STATUS_ARMGenerator())
	gens["Status"] = gen.PtrOf(UpdateStatus_STATUS_ARMGenerator())
}

func Test_UpdateRunStrategy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateRunStrategy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateRunStrategy_STATUS_ARM, UpdateRunStrategy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateRunStrategy_STATUS_ARM runs a test to see if a specific instance of UpdateRunStrategy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateRunStrategy_STATUS_ARM(subject UpdateRunStrategy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateRunStrategy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateRunStrategy_STATUS_ARM instances for property testing - lazily instantiated by
// UpdateRunStrategy_STATUS_ARMGenerator()
var updateRunStrategy_STATUS_ARMGenerator gopter.Gen

// UpdateRunStrategy_STATUS_ARMGenerator returns a generator of UpdateRunStrategy_STATUS_ARM instances for property testing.
func UpdateRunStrategy_STATUS_ARMGenerator() gopter.Gen {
	if updateRunStrategy_STATUS_ARMGenerator != nil {
		return updateRunStrategy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUpdateRunStrategy_STATUS_ARM(generators)
	updateRunStrategy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateRunStrategy_STATUS_ARM{}), generators)

	return updateRunStrategy_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForUpdateRunStrategy_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateRunStrategy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Stages"] = gen.SliceOf(UpdateStage_STATUS_ARMGenerator())
}

func Test_UpdateStageStatus_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateStageStatus_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateStageStatus_STATUS_ARM, UpdateStageStatus_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateStageStatus_STATUS_ARM runs a test to see if a specific instance of UpdateStageStatus_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateStageStatus_STATUS_ARM(subject UpdateStageStatus_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateStageStatus_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateStageStatus_STATUS_ARM instances for property testing - lazily instantiated by
// UpdateStageStatus_STATUS_ARMGenerator()
var updateStageStatus_STATUS_ARMGenerator gopter.Gen

// UpdateStageStatus_STATUS_ARMGenerator returns a generator of UpdateStageStatus_STATUS_ARM instances for property testing.
// We first initialize updateStageStatus_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpdateStageStatus_STATUS_ARMGenerator() gopter.Gen {
	if updateStageStatus_STATUS_ARMGenerator != nil {
		return updateStageStatus_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateStageStatus_STATUS_ARM(generators)
	updateStageStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateStageStatus_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateStageStatus_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUpdateStageStatus_STATUS_ARM(generators)
	updateStageStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateStageStatus_STATUS_ARM{}), generators)

	return updateStageStatus_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateStageStatus_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateStageStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUpdateStageStatus_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateStageStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AfterStageWaitStatus"] = gen.PtrOf(WaitStatus_STATUS_ARMGenerator())
	gens["Groups"] = gen.SliceOf(UpdateGroupStatus_STATUS_ARMGenerator())
	gens["Status"] = gen.PtrOf(UpdateStatus_STATUS_ARMGenerator())
}

func Test_UpdateStage_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateStage_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateStage_STATUS_ARM, UpdateStage_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateStage_STATUS_ARM runs a test to see if a specific instance of UpdateStage_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateStage_STATUS_ARM(subject UpdateStage_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateStage_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateStage_STATUS_ARM instances for property testing - lazily instantiated by
// UpdateStage_STATUS_ARMGenerator()
var updateStage_STATUS_ARMGenerator gopter.Gen

// UpdateStage_STATUS_ARMGenerator returns a generator of UpdateStage_STATUS_ARM instances for property testing.
// We first initialize updateStage_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpdateStage_STATUS_ARMGenerator() gopter.Gen {
	if updateStage_STATUS_ARMGenerator != nil {
		return updateStage_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateStage_STATUS_ARM(generators)
	updateStage_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateStage_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateStage_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUpdateStage_STATUS_ARM(generators)
	updateStage_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateStage_STATUS_ARM{}), generators)

	return updateStage_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateStage_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateStage_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AfterStageWaitInSeconds"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUpdateStage_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateStage_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Groups"] = gen.SliceOf(UpdateGroup_STATUS_ARMGenerator())
}

func Test_UpdateStatus_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateStatus_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateStatus_STATUS_ARM, UpdateStatus_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateStatus_STATUS_ARM runs a test to see if a specific instance of UpdateStatus_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateStatus_STATUS_ARM(subject UpdateStatus_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateStatus_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateStatus_STATUS_ARM instances for property testing - lazily instantiated by
// UpdateStatus_STATUS_ARMGenerator()
var updateStatus_STATUS_ARMGenerator gopter.Gen

// UpdateStatus_STATUS_ARMGenerator returns a generator of UpdateStatus_STATUS_ARM instances for property testing.
// We first initialize updateStatus_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpdateStatus_STATUS_ARMGenerator() gopter.Gen {
	if updateStatus_STATUS_ARMGenerator != nil {
		return updateStatus_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateStatus_STATUS_ARM(generators)
	updateStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateStatus_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateStatus_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUpdateStatus_STATUS_ARM(generators)
	updateStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateStatus_STATUS_ARM{}), generators)

	return updateStatus_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateStatus_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CompletedTime"] = gen.PtrOf(gen.AlphaString())
	gens["StartTime"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(
		UpdateState_STATUS_ARM_Completed,
		UpdateState_STATUS_ARM_Failed,
		UpdateState_STATUS_ARM_NotStarted,
		UpdateState_STATUS_ARM_Running,
		UpdateState_STATUS_ARM_Stopped,
		UpdateState_STATUS_ARM_Stopping))
}

// AddRelatedPropertyGeneratorsForUpdateStatus_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ErrorDetail_STATUS_ARMGenerator())
}

func Test_WaitStatus_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WaitStatus_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWaitStatus_STATUS_ARM, WaitStatus_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWaitStatus_STATUS_ARM runs a test to see if a specific instance of WaitStatus_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWaitStatus_STATUS_ARM(subject WaitStatus_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WaitStatus_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WaitStatus_STATUS_ARM instances for property testing - lazily instantiated by
// WaitStatus_STATUS_ARMGenerator()
var waitStatus_STATUS_ARMGenerator gopter.Gen

// WaitStatus_STATUS_ARMGenerator returns a generator of WaitStatus_STATUS_ARM instances for property testing.
// We first initialize waitStatus_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WaitStatus_STATUS_ARMGenerator() gopter.Gen {
	if waitStatus_STATUS_ARMGenerator != nil {
		return waitStatus_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWaitStatus_STATUS_ARM(generators)
	waitStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WaitStatus_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWaitStatus_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForWaitStatus_STATUS_ARM(generators)
	waitStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WaitStatus_STATUS_ARM{}), generators)

	return waitStatus_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWaitStatus_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWaitStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["WaitDurationInSeconds"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForWaitStatus_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWaitStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(UpdateStatus_STATUS_ARMGenerator())
}
