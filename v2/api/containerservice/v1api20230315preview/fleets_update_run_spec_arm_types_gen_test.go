// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230315preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Fleets_UpdateRun_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Fleets_UpdateRun_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFleets_UpdateRun_Spec_ARM, Fleets_UpdateRun_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFleets_UpdateRun_Spec_ARM runs a test to see if a specific instance of Fleets_UpdateRun_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFleets_UpdateRun_Spec_ARM(subject Fleets_UpdateRun_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Fleets_UpdateRun_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Fleets_UpdateRun_Spec_ARM instances for property testing - lazily instantiated by
// Fleets_UpdateRun_Spec_ARMGenerator()
var fleets_UpdateRun_Spec_ARMGenerator gopter.Gen

// Fleets_UpdateRun_Spec_ARMGenerator returns a generator of Fleets_UpdateRun_Spec_ARM instances for property testing.
// We first initialize fleets_UpdateRun_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Fleets_UpdateRun_Spec_ARMGenerator() gopter.Gen {
	if fleets_UpdateRun_Spec_ARMGenerator != nil {
		return fleets_UpdateRun_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFleets_UpdateRun_Spec_ARM(generators)
	fleets_UpdateRun_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Fleets_UpdateRun_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFleets_UpdateRun_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForFleets_UpdateRun_Spec_ARM(generators)
	fleets_UpdateRun_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Fleets_UpdateRun_Spec_ARM{}), generators)

	return fleets_UpdateRun_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFleets_UpdateRun_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFleets_UpdateRun_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForFleets_UpdateRun_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFleets_UpdateRun_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(UpdateRunProperties_ARMGenerator())
}

func Test_UpdateRunProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateRunProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateRunProperties_ARM, UpdateRunProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateRunProperties_ARM runs a test to see if a specific instance of UpdateRunProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateRunProperties_ARM(subject UpdateRunProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateRunProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateRunProperties_ARM instances for property testing - lazily instantiated by
// UpdateRunProperties_ARMGenerator()
var updateRunProperties_ARMGenerator gopter.Gen

// UpdateRunProperties_ARMGenerator returns a generator of UpdateRunProperties_ARM instances for property testing.
func UpdateRunProperties_ARMGenerator() gopter.Gen {
	if updateRunProperties_ARMGenerator != nil {
		return updateRunProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUpdateRunProperties_ARM(generators)
	updateRunProperties_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateRunProperties_ARM{}), generators)

	return updateRunProperties_ARMGenerator
}

// AddRelatedPropertyGeneratorsForUpdateRunProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateRunProperties_ARM(gens map[string]gopter.Gen) {
	gens["ManagedClusterUpdate"] = gen.PtrOf(ManagedClusterUpdate_ARMGenerator())
	gens["Strategy"] = gen.PtrOf(UpdateRunStrategy_ARMGenerator())
}

func Test_ManagedClusterUpdate_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterUpdate_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterUpdate_ARM, ManagedClusterUpdate_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterUpdate_ARM runs a test to see if a specific instance of ManagedClusterUpdate_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterUpdate_ARM(subject ManagedClusterUpdate_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterUpdate_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterUpdate_ARM instances for property testing - lazily instantiated by
// ManagedClusterUpdate_ARMGenerator()
var managedClusterUpdate_ARMGenerator gopter.Gen

// ManagedClusterUpdate_ARMGenerator returns a generator of ManagedClusterUpdate_ARM instances for property testing.
func ManagedClusterUpdate_ARMGenerator() gopter.Gen {
	if managedClusterUpdate_ARMGenerator != nil {
		return managedClusterUpdate_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterUpdate_ARM(generators)
	managedClusterUpdate_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterUpdate_ARM{}), generators)

	return managedClusterUpdate_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterUpdate_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterUpdate_ARM(gens map[string]gopter.Gen) {
	gens["Upgrade"] = gen.PtrOf(ManagedClusterUpgradeSpec_ARMGenerator())
}

func Test_UpdateRunStrategy_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateRunStrategy_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateRunStrategy_ARM, UpdateRunStrategy_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateRunStrategy_ARM runs a test to see if a specific instance of UpdateRunStrategy_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateRunStrategy_ARM(subject UpdateRunStrategy_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateRunStrategy_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateRunStrategy_ARM instances for property testing - lazily instantiated by
// UpdateRunStrategy_ARMGenerator()
var updateRunStrategy_ARMGenerator gopter.Gen

// UpdateRunStrategy_ARMGenerator returns a generator of UpdateRunStrategy_ARM instances for property testing.
func UpdateRunStrategy_ARMGenerator() gopter.Gen {
	if updateRunStrategy_ARMGenerator != nil {
		return updateRunStrategy_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUpdateRunStrategy_ARM(generators)
	updateRunStrategy_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateRunStrategy_ARM{}), generators)

	return updateRunStrategy_ARMGenerator
}

// AddRelatedPropertyGeneratorsForUpdateRunStrategy_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateRunStrategy_ARM(gens map[string]gopter.Gen) {
	gens["Stages"] = gen.SliceOf(UpdateStage_ARMGenerator())
}

func Test_ManagedClusterUpgradeSpec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterUpgradeSpec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterUpgradeSpec_ARM, ManagedClusterUpgradeSpec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterUpgradeSpec_ARM runs a test to see if a specific instance of ManagedClusterUpgradeSpec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterUpgradeSpec_ARM(subject ManagedClusterUpgradeSpec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterUpgradeSpec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterUpgradeSpec_ARM instances for property testing - lazily instantiated by
// ManagedClusterUpgradeSpec_ARMGenerator()
var managedClusterUpgradeSpec_ARMGenerator gopter.Gen

// ManagedClusterUpgradeSpec_ARMGenerator returns a generator of ManagedClusterUpgradeSpec_ARM instances for property testing.
func ManagedClusterUpgradeSpec_ARMGenerator() gopter.Gen {
	if managedClusterUpgradeSpec_ARMGenerator != nil {
		return managedClusterUpgradeSpec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterUpgradeSpec_ARM(generators)
	managedClusterUpgradeSpec_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterUpgradeSpec_ARM{}), generators)

	return managedClusterUpgradeSpec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterUpgradeSpec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterUpgradeSpec_ARM(gens map[string]gopter.Gen) {
	gens["KubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedClusterUpgradeType_Full, ManagedClusterUpgradeType_NodeImageOnly))
}

func Test_UpdateStage_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateStage_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateStage_ARM, UpdateStage_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateStage_ARM runs a test to see if a specific instance of UpdateStage_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateStage_ARM(subject UpdateStage_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateStage_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateStage_ARM instances for property testing - lazily instantiated by UpdateStage_ARMGenerator()
var updateStage_ARMGenerator gopter.Gen

// UpdateStage_ARMGenerator returns a generator of UpdateStage_ARM instances for property testing.
// We first initialize updateStage_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpdateStage_ARMGenerator() gopter.Gen {
	if updateStage_ARMGenerator != nil {
		return updateStage_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateStage_ARM(generators)
	updateStage_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateStage_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateStage_ARM(generators)
	AddRelatedPropertyGeneratorsForUpdateStage_ARM(generators)
	updateStage_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateStage_ARM{}), generators)

	return updateStage_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateStage_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateStage_ARM(gens map[string]gopter.Gen) {
	gens["AfterStageWaitInSeconds"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUpdateStage_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpdateStage_ARM(gens map[string]gopter.Gen) {
	gens["Groups"] = gen.SliceOf(UpdateGroup_ARMGenerator())
}

func Test_UpdateGroup_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpdateGroup_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpdateGroup_ARM, UpdateGroup_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpdateGroup_ARM runs a test to see if a specific instance of UpdateGroup_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpdateGroup_ARM(subject UpdateGroup_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UpdateGroup_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UpdateGroup_ARM instances for property testing - lazily instantiated by UpdateGroup_ARMGenerator()
var updateGroup_ARMGenerator gopter.Gen

// UpdateGroup_ARMGenerator returns a generator of UpdateGroup_ARM instances for property testing.
func UpdateGroup_ARMGenerator() gopter.Gen {
	if updateGroup_ARMGenerator != nil {
		return updateGroup_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpdateGroup_ARM(generators)
	updateGroup_ARMGenerator = gen.Struct(reflect.TypeOf(UpdateGroup_ARM{}), generators)

	return updateGroup_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUpdateGroup_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpdateGroup_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}
