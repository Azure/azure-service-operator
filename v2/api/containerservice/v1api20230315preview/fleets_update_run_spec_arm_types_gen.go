// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230315preview

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Fleets_UpdateRun_Spec_ARM struct {
	Name string `json:"name,omitempty"`

	// Properties: The resource-specific properties for this resource.
	Properties *UpdateRunProperties_ARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Fleets_UpdateRun_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-03-15-preview"
func (updateRun Fleets_UpdateRun_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (updateRun *Fleets_UpdateRun_Spec_ARM) GetName() string {
	return updateRun.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerService/fleets/updateRuns"
func (updateRun *Fleets_UpdateRun_Spec_ARM) GetType() string {
	return "Microsoft.ContainerService/fleets/updateRuns"
}

// The properties of the UpdateRun.
type UpdateRunProperties_ARM struct {
	// ManagedClusterUpdate: The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be
	// modified until the run is started.
	ManagedClusterUpdate *ManagedClusterUpdate_ARM `json:"managedClusterUpdate,omitempty"`

	// Strategy: The strategy defines the order in which the clusters will be updated.
	// If not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single
	// UpdateGroup targeting all members.
	// The strategy of the UpdateRun can be modified until the run is started.
	Strategy *UpdateRunStrategy_ARM `json:"strategy,omitempty"`
}

// The update to be applied to the ManagedClusters.
type ManagedClusterUpdate_ARM struct {
	// Upgrade: The upgrade to apply to the ManagedClusters.
	Upgrade *ManagedClusterUpgradeSpec_ARM `json:"upgrade,omitempty"`
}

// The UpdateRunStrategy configures the sequence of Stages and Groups in which the clusters will be updated.
type UpdateRunStrategy_ARM struct {
	// Stages: The list of stages that compose this update run.
	Stages []UpdateStage_ARM `json:"stages,omitempty"`
}

// The upgrade to apply to a ManagedCluster.
type ManagedClusterUpgradeSpec_ARM struct {
	// KubernetesVersion: The Kubernetes version to upgrade the member clusters to.
	KubernetesVersion *string `json:"kubernetesVersion,omitempty"`

	// Type: The upgrade type.
	// Full requires the KubernetesVersion property to be set.
	// NodeImageOnly requires the KubernetesVersion property not to be set.
	Type *ManagedClusterUpgradeType `json:"type,omitempty"`
}

// Contains the groups to be updated by an UpdateRun.
// Update order:
// - Sequential between stages: Stages run sequentially.
// The previous stage must complete before the next one starts.
// - Parallel within a stage: Groups within a stage run in
// parallel.
// - Sequential within a group: Clusters within a group are updated sequentially.
type UpdateStage_ARM struct {
	// AfterStageWaitInSeconds: The time in seconds to wait at the end of this stage before starting the next one. Defaults to
	// 0 seconds if unspecified.
	AfterStageWaitInSeconds *int `json:"afterStageWaitInSeconds,omitempty"`

	// Groups: A list of group names that compose the stage.
	// The groups will be updated in parallel. Each group name can only appear once in the UpdateRun.
	Groups []UpdateGroup_ARM `json:"groups,omitempty"`

	// Name: The name of the stage. Must be unique within the UpdateRun.
	Name *string `json:"name,omitempty"`
}

// A group to be updated.
type UpdateGroup_ARM struct {
	// Name: The name of the Fleet member group to update.
	// It should match the name of an existing FleetMember group.
	// A group can only appear once across all UpdateStages in the UpdateRun.
	Name *string `json:"name,omitempty"`
}
