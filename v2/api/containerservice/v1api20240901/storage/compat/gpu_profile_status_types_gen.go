// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package compat

import (
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20250801/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/rotisserie/eris"
)

// Storage version of v1api20240402preview.AgentPoolGPUProfile_STATUS
type GPUProfile_STATUS struct {
	InstallGPUDriver *bool                  `json:"installGPUDriver,omitempty"`
	PropertyBag      genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_GPUProfile_STATUS populates our GPUProfile_STATUS from the provided source GPUProfile_STATUS
func (profile *GPUProfile_STATUS) AssignProperties_From_GPUProfile_STATUS(source *storage.GPUProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Driver
	if source.Driver != nil {
		propertyBag.Add("Driver", *source.Driver)
	} else {
		propertyBag.Remove("Driver")
	}

	// InstallGPUDriver
	if propertyBag.Contains("InstallGPUDriver") {
		var installGPUDriver bool
		err := propertyBag.Pull("InstallGPUDriver", &installGPUDriver)
		if err != nil {
			return eris.Wrap(err, "pulling 'InstallGPUDriver' from propertyBag")
		}

		profile.InstallGPUDriver = &installGPUDriver
	} else {
		profile.InstallGPUDriver = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		profile.PropertyBag = propertyBag
	} else {
		profile.PropertyBag = nil
	}

	// Invoke the augmentConversionForGPUProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForGPUProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesFrom(source)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_GPUProfile_STATUS populates the provided destination GPUProfile_STATUS from our GPUProfile_STATUS
func (profile *GPUProfile_STATUS) AssignProperties_To_GPUProfile_STATUS(destination *storage.GPUProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(profile.PropertyBag)

	// Driver
	if propertyBag.Contains("Driver") {
		var driver string
		err := propertyBag.Pull("Driver", &driver)
		if err != nil {
			return eris.Wrap(err, "pulling 'Driver' from propertyBag")
		}

		destination.Driver = &driver
	} else {
		destination.Driver = nil
	}

	// InstallGPUDriver
	if profile.InstallGPUDriver != nil {
		propertyBag.Add("InstallGPUDriver", *profile.InstallGPUDriver)
	} else {
		propertyBag.Remove("InstallGPUDriver")
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForGPUProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForGPUProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesTo(destination)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForGPUProfile_STATUS interface {
	AssignPropertiesFrom(src *storage.GPUProfile_STATUS) error
	AssignPropertiesTo(dst *storage.GPUProfile_STATUS) error
}
