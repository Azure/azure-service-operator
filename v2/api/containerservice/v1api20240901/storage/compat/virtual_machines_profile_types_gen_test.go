// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package compat

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20250801/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AutoScaleProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoScaleProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoScaleProfile, AutoScaleProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoScaleProfile runs a test to see if a specific instance of AutoScaleProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoScaleProfile(subject AutoScaleProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoScaleProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoScaleProfile instances for property testing - lazily instantiated by AutoScaleProfileGenerator()
var autoScaleProfileGenerator gopter.Gen

// AutoScaleProfileGenerator returns a generator of AutoScaleProfile instances for property testing.
func AutoScaleProfileGenerator() gopter.Gen {
	if autoScaleProfileGenerator != nil {
		return autoScaleProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoScaleProfile(generators)
	autoScaleProfileGenerator = gen.Struct(reflect.TypeOf(AutoScaleProfile{}), generators)

	return autoScaleProfileGenerator
}

// AddIndependentPropertyGeneratorsForAutoScaleProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoScaleProfile(gens map[string]gopter.Gen) {
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Sizes"] = gen.SliceOf(gen.AlphaString())
}

func Test_ManualScaleProfile_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManualScaleProfile to ManualScaleProfile via AssignProperties_To_ManualScaleProfile & AssignProperties_From_ManualScaleProfile returns original",
		prop.ForAll(RunPropertyAssignmentTestForManualScaleProfile, ManualScaleProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManualScaleProfile tests if a specific instance of ManualScaleProfile can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForManualScaleProfile(subject ManualScaleProfile) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ManualScaleProfile
	err := copied.AssignProperties_To_ManualScaleProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManualScaleProfile
	err = actual.AssignProperties_From_ManualScaleProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManualScaleProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManualScaleProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManualScaleProfile, ManualScaleProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManualScaleProfile runs a test to see if a specific instance of ManualScaleProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForManualScaleProfile(subject ManualScaleProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManualScaleProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManualScaleProfile instances for property testing - lazily instantiated by ManualScaleProfileGenerator()
var manualScaleProfileGenerator gopter.Gen

// ManualScaleProfileGenerator returns a generator of ManualScaleProfile instances for property testing.
func ManualScaleProfileGenerator() gopter.Gen {
	if manualScaleProfileGenerator != nil {
		return manualScaleProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManualScaleProfile(generators)
	manualScaleProfileGenerator = gen.Struct(reflect.TypeOf(ManualScaleProfile{}), generators)

	return manualScaleProfileGenerator
}

// AddIndependentPropertyGeneratorsForManualScaleProfile is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManualScaleProfile(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Sizes"] = gen.SliceOf(gen.AlphaString())
}

func Test_ScaleProfile_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ScaleProfile to ScaleProfile via AssignProperties_To_ScaleProfile & AssignProperties_From_ScaleProfile returns original",
		prop.ForAll(RunPropertyAssignmentTestForScaleProfile, ScaleProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForScaleProfile tests if a specific instance of ScaleProfile can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForScaleProfile(subject ScaleProfile) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ScaleProfile
	err := copied.AssignProperties_To_ScaleProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ScaleProfile
	err = actual.AssignProperties_From_ScaleProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ScaleProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleProfile, ScaleProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleProfile runs a test to see if a specific instance of ScaleProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleProfile(subject ScaleProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleProfile instances for property testing - lazily instantiated by ScaleProfileGenerator()
var scaleProfileGenerator gopter.Gen

// ScaleProfileGenerator returns a generator of ScaleProfile instances for property testing.
func ScaleProfileGenerator() gopter.Gen {
	if scaleProfileGenerator != nil {
		return scaleProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScaleProfile(generators)
	scaleProfileGenerator = gen.Struct(reflect.TypeOf(ScaleProfile{}), generators)

	return scaleProfileGenerator
}

// AddRelatedPropertyGeneratorsForScaleProfile is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScaleProfile(gens map[string]gopter.Gen) {
	gens["Autoscale"] = gen.SliceOf(AutoScaleProfileGenerator())
	gens["Manual"] = gen.SliceOf(ManualScaleProfileGenerator())
}

func Test_VirtualMachinesProfile_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualMachinesProfile to VirtualMachinesProfile via AssignProperties_To_VirtualMachinesProfile & AssignProperties_From_VirtualMachinesProfile returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualMachinesProfile, VirtualMachinesProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualMachinesProfile tests if a specific instance of VirtualMachinesProfile can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForVirtualMachinesProfile(subject VirtualMachinesProfile) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.VirtualMachinesProfile
	err := copied.AssignProperties_To_VirtualMachinesProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualMachinesProfile
	err = actual.AssignProperties_From_VirtualMachinesProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualMachinesProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachinesProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachinesProfile, VirtualMachinesProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachinesProfile runs a test to see if a specific instance of VirtualMachinesProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachinesProfile(subject VirtualMachinesProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachinesProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachinesProfile instances for property testing - lazily instantiated by
// VirtualMachinesProfileGenerator()
var virtualMachinesProfileGenerator gopter.Gen

// VirtualMachinesProfileGenerator returns a generator of VirtualMachinesProfile instances for property testing.
func VirtualMachinesProfileGenerator() gopter.Gen {
	if virtualMachinesProfileGenerator != nil {
		return virtualMachinesProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachinesProfile(generators)
	virtualMachinesProfileGenerator = gen.Struct(reflect.TypeOf(VirtualMachinesProfile{}), generators)

	return virtualMachinesProfileGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachinesProfile is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachinesProfile(gens map[string]gopter.Gen) {
	gens["Scale"] = gen.PtrOf(ScaleProfileGenerator())
}
