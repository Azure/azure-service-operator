// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package compat

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20250801/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AutoScaleProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoScaleProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoScaleProfile_STATUS, AutoScaleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoScaleProfile_STATUS runs a test to see if a specific instance of AutoScaleProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoScaleProfile_STATUS(subject AutoScaleProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoScaleProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoScaleProfile_STATUS instances for property testing - lazily instantiated by
// AutoScaleProfile_STATUSGenerator()
var autoScaleProfile_STATUSGenerator gopter.Gen

// AutoScaleProfile_STATUSGenerator returns a generator of AutoScaleProfile_STATUS instances for property testing.
func AutoScaleProfile_STATUSGenerator() gopter.Gen {
	if autoScaleProfile_STATUSGenerator != nil {
		return autoScaleProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoScaleProfile_STATUS(generators)
	autoScaleProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(AutoScaleProfile_STATUS{}), generators)

	return autoScaleProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAutoScaleProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoScaleProfile_STATUS(gens map[string]gopter.Gen) {
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Sizes"] = gen.SliceOf(gen.AlphaString())
}

func Test_ManualScaleProfile_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManualScaleProfile_STATUS to ManualScaleProfile_STATUS via AssignProperties_To_ManualScaleProfile_STATUS & AssignProperties_From_ManualScaleProfile_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManualScaleProfile_STATUS, ManualScaleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManualScaleProfile_STATUS tests if a specific instance of ManualScaleProfile_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForManualScaleProfile_STATUS(subject ManualScaleProfile_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ManualScaleProfile_STATUS
	err := copied.AssignProperties_To_ManualScaleProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManualScaleProfile_STATUS
	err = actual.AssignProperties_From_ManualScaleProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManualScaleProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManualScaleProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManualScaleProfile_STATUS, ManualScaleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManualScaleProfile_STATUS runs a test to see if a specific instance of ManualScaleProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManualScaleProfile_STATUS(subject ManualScaleProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManualScaleProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManualScaleProfile_STATUS instances for property testing - lazily instantiated by
// ManualScaleProfile_STATUSGenerator()
var manualScaleProfile_STATUSGenerator gopter.Gen

// ManualScaleProfile_STATUSGenerator returns a generator of ManualScaleProfile_STATUS instances for property testing.
func ManualScaleProfile_STATUSGenerator() gopter.Gen {
	if manualScaleProfile_STATUSGenerator != nil {
		return manualScaleProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManualScaleProfile_STATUS(generators)
	manualScaleProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ManualScaleProfile_STATUS{}), generators)

	return manualScaleProfile_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManualScaleProfile_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManualScaleProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Sizes"] = gen.SliceOf(gen.AlphaString())
}

func Test_ScaleProfile_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ScaleProfile_STATUS to ScaleProfile_STATUS via AssignProperties_To_ScaleProfile_STATUS & AssignProperties_From_ScaleProfile_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForScaleProfile_STATUS, ScaleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForScaleProfile_STATUS tests if a specific instance of ScaleProfile_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForScaleProfile_STATUS(subject ScaleProfile_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ScaleProfile_STATUS
	err := copied.AssignProperties_To_ScaleProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ScaleProfile_STATUS
	err = actual.AssignProperties_From_ScaleProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ScaleProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleProfile_STATUS, ScaleProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleProfile_STATUS runs a test to see if a specific instance of ScaleProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleProfile_STATUS(subject ScaleProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleProfile_STATUS instances for property testing - lazily instantiated by
// ScaleProfile_STATUSGenerator()
var scaleProfile_STATUSGenerator gopter.Gen

// ScaleProfile_STATUSGenerator returns a generator of ScaleProfile_STATUS instances for property testing.
func ScaleProfile_STATUSGenerator() gopter.Gen {
	if scaleProfile_STATUSGenerator != nil {
		return scaleProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScaleProfile_STATUS(generators)
	scaleProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(ScaleProfile_STATUS{}), generators)

	return scaleProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForScaleProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScaleProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Autoscale"] = gen.SliceOf(AutoScaleProfile_STATUSGenerator())
	gens["Manual"] = gen.SliceOf(ManualScaleProfile_STATUSGenerator())
}

func Test_VirtualMachinesProfile_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualMachinesProfile_STATUS to VirtualMachinesProfile_STATUS via AssignProperties_To_VirtualMachinesProfile_STATUS & AssignProperties_From_VirtualMachinesProfile_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualMachinesProfile_STATUS, VirtualMachinesProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualMachinesProfile_STATUS tests if a specific instance of VirtualMachinesProfile_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForVirtualMachinesProfile_STATUS(subject VirtualMachinesProfile_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.VirtualMachinesProfile_STATUS
	err := copied.AssignProperties_To_VirtualMachinesProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualMachinesProfile_STATUS
	err = actual.AssignProperties_From_VirtualMachinesProfile_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualMachinesProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachinesProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachinesProfile_STATUS, VirtualMachinesProfile_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachinesProfile_STATUS runs a test to see if a specific instance of VirtualMachinesProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachinesProfile_STATUS(subject VirtualMachinesProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachinesProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachinesProfile_STATUS instances for property testing - lazily instantiated by
// VirtualMachinesProfile_STATUSGenerator()
var virtualMachinesProfile_STATUSGenerator gopter.Gen

// VirtualMachinesProfile_STATUSGenerator returns a generator of VirtualMachinesProfile_STATUS instances for property testing.
func VirtualMachinesProfile_STATUSGenerator() gopter.Gen {
	if virtualMachinesProfile_STATUSGenerator != nil {
		return virtualMachinesProfile_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachinesProfile_STATUS(generators)
	virtualMachinesProfile_STATUSGenerator = gen.Struct(reflect.TypeOf(VirtualMachinesProfile_STATUS{}), generators)

	return virtualMachinesProfile_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachinesProfile_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachinesProfile_STATUS(gens map[string]gopter.Gen) {
	gens["Scale"] = gen.PtrOf(ScaleProfile_STATUSGenerator())
}
