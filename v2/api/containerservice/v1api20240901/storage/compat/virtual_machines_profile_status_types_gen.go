// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package compat

import (
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20250801/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/rotisserie/eris"
)

// Storage version of v1api20240402preview.VirtualMachinesProfile_STATUS
// Specifications on VirtualMachines agent pool.
type VirtualMachinesProfile_STATUS struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Scale       *ScaleProfile_STATUS   `json:"scale,omitempty"`
}

// AssignProperties_From_VirtualMachinesProfile_STATUS populates our VirtualMachinesProfile_STATUS from the provided source VirtualMachinesProfile_STATUS
func (profile *VirtualMachinesProfile_STATUS) AssignProperties_From_VirtualMachinesProfile_STATUS(source *storage.VirtualMachinesProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Scale
	if source.Scale != nil {
		var scale ScaleProfile_STATUS
		err := scale.AssignProperties_From_ScaleProfile_STATUS(source.Scale)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_ScaleProfile_STATUS() to populate field Scale")
		}
		profile.Scale = &scale
	} else {
		profile.Scale = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		profile.PropertyBag = propertyBag
	} else {
		profile.PropertyBag = nil
	}

	// Invoke the augmentConversionForVirtualMachinesProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForVirtualMachinesProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesFrom(source)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_VirtualMachinesProfile_STATUS populates the provided destination VirtualMachinesProfile_STATUS from our VirtualMachinesProfile_STATUS
func (profile *VirtualMachinesProfile_STATUS) AssignProperties_To_VirtualMachinesProfile_STATUS(destination *storage.VirtualMachinesProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(profile.PropertyBag)

	// Scale
	if profile.Scale != nil {
		var scale storage.ScaleProfile_STATUS
		err := profile.Scale.AssignProperties_To_ScaleProfile_STATUS(&scale)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_ScaleProfile_STATUS() to populate field Scale")
		}
		destination.Scale = &scale
	} else {
		destination.Scale = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForVirtualMachinesProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForVirtualMachinesProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesTo(destination)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForVirtualMachinesProfile_STATUS interface {
	AssignPropertiesFrom(src *storage.VirtualMachinesProfile_STATUS) error
	AssignPropertiesTo(dst *storage.VirtualMachinesProfile_STATUS) error
}

// Storage version of v1api20240402preview.ScaleProfile_STATUS
// Specifications on how to scale a VirtualMachines agent pool.
type ScaleProfile_STATUS struct {
	Autoscale   []AutoScaleProfile_STATUS   `json:"autoscale,omitempty"`
	Manual      []ManualScaleProfile_STATUS `json:"manual,omitempty"`
	PropertyBag genruntime.PropertyBag      `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_ScaleProfile_STATUS populates our ScaleProfile_STATUS from the provided source ScaleProfile_STATUS
func (profile *ScaleProfile_STATUS) AssignProperties_From_ScaleProfile_STATUS(source *storage.ScaleProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Autoscale
	if propertyBag.Contains("Autoscale") {
		var autoscale []AutoScaleProfile_STATUS
		err := propertyBag.Pull("Autoscale", &autoscale)
		if err != nil {
			return eris.Wrap(err, "pulling 'Autoscale' from propertyBag")
		}

		profile.Autoscale = autoscale
	} else {
		profile.Autoscale = nil
	}

	// Manual
	if source.Manual != nil {
		manualList := make([]ManualScaleProfile_STATUS, len(source.Manual))
		for manualIndex, manualItem := range source.Manual {
			var manual ManualScaleProfile_STATUS
			err := manual.AssignProperties_From_ManualScaleProfile_STATUS(&manualItem)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_From_ManualScaleProfile_STATUS() to populate field Manual")
			}
			manualList[manualIndex] = manual
		}
		profile.Manual = manualList
	} else {
		profile.Manual = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		profile.PropertyBag = propertyBag
	} else {
		profile.PropertyBag = nil
	}

	// Invoke the augmentConversionForScaleProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForScaleProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesFrom(source)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_ScaleProfile_STATUS populates the provided destination ScaleProfile_STATUS from our ScaleProfile_STATUS
func (profile *ScaleProfile_STATUS) AssignProperties_To_ScaleProfile_STATUS(destination *storage.ScaleProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(profile.PropertyBag)

	// Autoscale
	if len(profile.Autoscale) > 0 {
		propertyBag.Add("Autoscale", profile.Autoscale)
	} else {
		propertyBag.Remove("Autoscale")
	}

	// Manual
	if profile.Manual != nil {
		manualList := make([]storage.ManualScaleProfile_STATUS, len(profile.Manual))
		for manualIndex, manualItem := range profile.Manual {
			var manual storage.ManualScaleProfile_STATUS
			err := manualItem.AssignProperties_To_ManualScaleProfile_STATUS(&manual)
			if err != nil {
				return eris.Wrap(err, "calling AssignProperties_To_ManualScaleProfile_STATUS() to populate field Manual")
			}
			manualList[manualIndex] = manual
		}
		destination.Manual = manualList
	} else {
		destination.Manual = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForScaleProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForScaleProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesTo(destination)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForScaleProfile_STATUS interface {
	AssignPropertiesFrom(src *storage.ScaleProfile_STATUS) error
	AssignPropertiesTo(dst *storage.ScaleProfile_STATUS) error
}

// Storage version of v1api20240402preview.AutoScaleProfile_STATUS
// Specifications on auto-scaling.
type AutoScaleProfile_STATUS struct {
	MaxCount    *int                   `json:"maxCount,omitempty"`
	MinCount    *int                   `json:"minCount,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Sizes       []string               `json:"sizes,omitempty"`
}

// Storage version of v1api20240402preview.ManualScaleProfile_STATUS
// Specifications on number of machines.
type ManualScaleProfile_STATUS struct {
	Count       *int                   `json:"count,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Sizes       []string               `json:"sizes,omitempty"`
}

// AssignProperties_From_ManualScaleProfile_STATUS populates our ManualScaleProfile_STATUS from the provided source ManualScaleProfile_STATUS
func (profile *ManualScaleProfile_STATUS) AssignProperties_From_ManualScaleProfile_STATUS(source *storage.ManualScaleProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Count
	profile.Count = genruntime.ClonePointerToInt(source.Count)

	// Size
	if source.Size != nil {
		propertyBag.Add("Size", *source.Size)
	} else {
		propertyBag.Remove("Size")
	}

	// Sizes
	if propertyBag.Contains("Sizes") {
		var size []string
		err := propertyBag.Pull("Sizes", &size)
		if err != nil {
			return eris.Wrap(err, "pulling 'Sizes' from propertyBag")
		}

		profile.Sizes = size
	} else {
		profile.Sizes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		profile.PropertyBag = propertyBag
	} else {
		profile.PropertyBag = nil
	}

	// Invoke the augmentConversionForManualScaleProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForManualScaleProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesFrom(source)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_ManualScaleProfile_STATUS populates the provided destination ManualScaleProfile_STATUS from our ManualScaleProfile_STATUS
func (profile *ManualScaleProfile_STATUS) AssignProperties_To_ManualScaleProfile_STATUS(destination *storage.ManualScaleProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(profile.PropertyBag)

	// Count
	destination.Count = genruntime.ClonePointerToInt(profile.Count)

	// Size
	if propertyBag.Contains("Size") {
		var size string
		err := propertyBag.Pull("Size", &size)
		if err != nil {
			return eris.Wrap(err, "pulling 'Size' from propertyBag")
		}

		destination.Size = &size
	} else {
		destination.Size = nil
	}

	// Sizes
	if len(profile.Sizes) > 0 {
		propertyBag.Add("Sizes", profile.Sizes)
	} else {
		propertyBag.Remove("Sizes")
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForManualScaleProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForManualScaleProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesTo(destination)
		if err != nil {
			return eris.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForManualScaleProfile_STATUS interface {
	AssignPropertiesFrom(src *storage.ManualScaleProfile_STATUS) error
	AssignPropertiesTo(dst *storage.ManualScaleProfile_STATUS) error
}
