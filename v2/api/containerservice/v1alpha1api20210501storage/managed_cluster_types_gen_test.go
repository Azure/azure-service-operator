// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedCluster_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedCluster via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedCluster, ManagedClusterGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedCluster runs a test to see if a specific instance of ManagedCluster round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedCluster(subject ManagedCluster) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedCluster
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedCluster instances for property testing - lazily instantiated by ManagedClusterGenerator()
var managedClusterGenerator gopter.Gen

// ManagedClusterGenerator returns a generator of ManagedCluster instances for property testing.
func ManagedClusterGenerator() gopter.Gen {
	if managedClusterGenerator != nil {
		return managedClusterGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedCluster(generators)
	managedClusterGenerator = gen.Struct(reflect.TypeOf(ManagedCluster{}), generators)

	return managedClusterGenerator
}

// AddRelatedPropertyGeneratorsForManagedCluster is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedCluster(gens map[string]gopter.Gen) {
	gens["Spec"] = ManagedClusters_SPECGenerator()
	gens["Status"] = ManagedCluster_StatusGenerator()
}

func Test_ManagedCluster_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedCluster_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedCluster_Status, ManagedCluster_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedCluster_Status runs a test to see if a specific instance of ManagedCluster_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedCluster_Status(subject ManagedCluster_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedCluster_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedCluster_Status instances for property testing - lazily instantiated by
//ManagedCluster_StatusGenerator()
var managedCluster_statusGenerator gopter.Gen

// ManagedCluster_StatusGenerator returns a generator of ManagedCluster_Status instances for property testing.
// We first initialize managedCluster_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedCluster_StatusGenerator() gopter.Gen {
	if managedCluster_statusGenerator != nil {
		return managedCluster_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedCluster_Status(generators)
	managedCluster_statusGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedCluster_Status(generators)
	AddRelatedPropertyGeneratorsForManagedCluster_Status(generators)
	managedCluster_statusGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_Status{}), generators)

	return managedCluster_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedCluster_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedCluster_Status(gens map[string]gopter.Gen) {
	gens["AzurePortalFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAccounts"] = gen.PtrOf(gen.Bool())
	gens["DiskEncryptionSetID"] = gen.PtrOf(gen.AlphaString())
	gens["DnsPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["EnablePodSecurityPolicy"] = gen.PtrOf(gen.Bool())
	gens["EnableRBAC"] = gen.PtrOf(gen.Bool())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["FqdnSubdomain"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["KubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgentPools"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NodeResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedCluster_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedCluster_Status(gens map[string]gopter.Gen) {
	gens["AadProfile"] = gen.PtrOf(ManagedClusterAADProfile_StatusGenerator())
	gens["AgentPoolProfiles"] = gen.SliceOf(ManagedClusterAgentPoolProfile_StatusGenerator())
	gens["ApiServerAccessProfile"] = gen.PtrOf(ManagedClusterAPIServerAccessProfile_StatusGenerator())
	gens["AutoScalerProfile"] = gen.PtrOf(ManagedClusterProperties_AutoScalerProfile_StatusGenerator())
	gens["AutoUpgradeProfile"] = gen.PtrOf(ManagedClusterAutoUpgradeProfile_StatusGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_StatusGenerator())
	gens["HttpProxyConfig"] = gen.PtrOf(ManagedClusterHTTPProxyConfig_StatusGenerator())
	gens["Identity"] = gen.PtrOf(ManagedClusterIdentity_StatusGenerator())
	gens["LinuxProfile"] = gen.PtrOf(ContainerServiceLinuxProfile_StatusGenerator())
	gens["NetworkProfile"] = gen.PtrOf(ContainerServiceNetworkProfile_StatusGenerator())
	gens["PodIdentityProfile"] = gen.PtrOf(ManagedClusterPodIdentityProfile_StatusGenerator())
	gens["PowerState"] = gen.PtrOf(PowerState_StatusGenerator())
	gens["PrivateLinkResources"] = gen.SliceOf(PrivateLinkResource_StatusGenerator())
	gens["ServicePrincipalProfile"] = gen.PtrOf(ManagedClusterServicePrincipalProfile_StatusGenerator())
	gens["Sku"] = gen.PtrOf(ManagedClusterSKU_StatusGenerator())
	gens["WindowsProfile"] = gen.PtrOf(ManagedClusterWindowsProfile_StatusGenerator())
}

func Test_ManagedClusters_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusters_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusters_SPEC, ManagedClusters_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusters_SPEC runs a test to see if a specific instance of ManagedClusters_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusters_SPEC(subject ManagedClusters_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusters_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusters_SPEC instances for property testing - lazily instantiated by
//ManagedClusters_SPECGenerator()
var managedClusters_specGenerator gopter.Gen

// ManagedClusters_SPECGenerator returns a generator of ManagedClusters_SPEC instances for property testing.
// We first initialize managedClusters_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusters_SPECGenerator() gopter.Gen {
	if managedClusters_specGenerator != nil {
		return managedClusters_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusters_SPEC(generators)
	managedClusters_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusters_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusters_SPEC(generators)
	AddRelatedPropertyGeneratorsForManagedClusters_SPEC(generators)
	managedClusters_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusters_SPEC{}), generators)

	return managedClusters_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusters_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusters_SPEC(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["DisableLocalAccounts"] = gen.PtrOf(gen.Bool())
	gens["DnsPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["EnablePodSecurityPolicy"] = gen.PtrOf(gen.Bool())
	gens["EnableRBAC"] = gen.PtrOf(gen.Bool())
	gens["FqdnSubdomain"] = gen.PtrOf(gen.AlphaString())
	gens["KubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["NodeResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusters_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusters_SPEC(gens map[string]gopter.Gen) {
	gens["AadProfile"] = gen.PtrOf(ManagedClusterAADProfile_SpecGenerator())
	gens["AgentPoolProfiles"] = gen.SliceOf(ManagedClusterAgentPoolProfile_SpecGenerator())
	gens["ApiServerAccessProfile"] = gen.PtrOf(ManagedClusterAPIServerAccessProfile_SpecGenerator())
	gens["AutoScalerProfile"] = gen.PtrOf(ManagedClusterProperties_AutoScalerProfile_SpecGenerator())
	gens["AutoUpgradeProfile"] = gen.PtrOf(ManagedClusterAutoUpgradeProfile_SpecGenerator())
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_SpecGenerator())
	gens["HttpProxyConfig"] = gen.PtrOf(ManagedClusterHTTPProxyConfig_SpecGenerator())
	gens["Identity"] = gen.PtrOf(ManagedClusterIdentity_SpecGenerator())
	gens["LinuxProfile"] = gen.PtrOf(ContainerServiceLinuxProfile_SpecGenerator())
	gens["NetworkProfile"] = gen.PtrOf(ContainerServiceNetworkProfile_SpecGenerator())
	gens["PodIdentityProfile"] = gen.PtrOf(ManagedClusterPodIdentityProfile_SpecGenerator())
	gens["PrivateLinkResources"] = gen.SliceOf(PrivateLinkResource_SpecGenerator())
	gens["ServicePrincipalProfile"] = gen.PtrOf(ManagedClusterServicePrincipalProfile_SpecGenerator())
	gens["Sku"] = gen.PtrOf(ManagedClusterSKU_SpecGenerator())
	gens["WindowsProfile"] = gen.PtrOf(ManagedClusterWindowsProfile_SpecGenerator())
}

func Test_ContainerServiceLinuxProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceLinuxProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceLinuxProfile_Spec, ContainerServiceLinuxProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceLinuxProfile_Spec runs a test to see if a specific instance of ContainerServiceLinuxProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceLinuxProfile_Spec(subject ContainerServiceLinuxProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceLinuxProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceLinuxProfile_Spec instances for property testing - lazily instantiated by
//ContainerServiceLinuxProfile_SpecGenerator()
var containerServiceLinuxProfile_specGenerator gopter.Gen

// ContainerServiceLinuxProfile_SpecGenerator returns a generator of ContainerServiceLinuxProfile_Spec instances for property testing.
// We first initialize containerServiceLinuxProfile_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceLinuxProfile_SpecGenerator() gopter.Gen {
	if containerServiceLinuxProfile_specGenerator != nil {
		return containerServiceLinuxProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_Spec(generators)
	containerServiceLinuxProfile_specGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_Spec(generators)
	AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_Spec(generators)
	containerServiceLinuxProfile_specGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_Spec{}), generators)

	return containerServiceLinuxProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_Spec(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_Spec(gens map[string]gopter.Gen) {
	gens["Ssh"] = gen.PtrOf(ContainerServiceSshConfiguration_SpecGenerator())
}

func Test_ContainerServiceLinuxProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceLinuxProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceLinuxProfile_Status, ContainerServiceLinuxProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceLinuxProfile_Status runs a test to see if a specific instance of ContainerServiceLinuxProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceLinuxProfile_Status(subject ContainerServiceLinuxProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceLinuxProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceLinuxProfile_Status instances for property testing - lazily instantiated by
//ContainerServiceLinuxProfile_StatusGenerator()
var containerServiceLinuxProfile_statusGenerator gopter.Gen

// ContainerServiceLinuxProfile_StatusGenerator returns a generator of ContainerServiceLinuxProfile_Status instances for property testing.
// We first initialize containerServiceLinuxProfile_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceLinuxProfile_StatusGenerator() gopter.Gen {
	if containerServiceLinuxProfile_statusGenerator != nil {
		return containerServiceLinuxProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_Status(generators)
	containerServiceLinuxProfile_statusGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_Status(generators)
	AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_Status(generators)
	containerServiceLinuxProfile_statusGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_Status{}), generators)

	return containerServiceLinuxProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_Status(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_Status(gens map[string]gopter.Gen) {
	gens["Ssh"] = gen.PtrOf(ContainerServiceSshConfiguration_StatusGenerator())
}

func Test_ContainerServiceNetworkProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceNetworkProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceNetworkProfile_Spec, ContainerServiceNetworkProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceNetworkProfile_Spec runs a test to see if a specific instance of ContainerServiceNetworkProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceNetworkProfile_Spec(subject ContainerServiceNetworkProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceNetworkProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceNetworkProfile_Spec instances for property testing - lazily instantiated by
//ContainerServiceNetworkProfile_SpecGenerator()
var containerServiceNetworkProfile_specGenerator gopter.Gen

// ContainerServiceNetworkProfile_SpecGenerator returns a generator of ContainerServiceNetworkProfile_Spec instances for property testing.
// We first initialize containerServiceNetworkProfile_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceNetworkProfile_SpecGenerator() gopter.Gen {
	if containerServiceNetworkProfile_specGenerator != nil {
		return containerServiceNetworkProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_Spec(generators)
	containerServiceNetworkProfile_specGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_Spec(generators)
	AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_Spec(generators)
	containerServiceNetworkProfile_specGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_Spec{}), generators)

	return containerServiceNetworkProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_Spec(gens map[string]gopter.Gen) {
	gens["DnsServiceIP"] = gen.PtrOf(gen.AlphaString())
	gens["DockerBridgeCidr"] = gen.PtrOf(gen.AlphaString())
	gens["LoadBalancerSku"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkMode"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkPlugin"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["OutboundType"] = gen.PtrOf(gen.AlphaString())
	gens["PodCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_Spec(gens map[string]gopter.Gen) {
	gens["LoadBalancerProfile"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_SpecGenerator())
}

func Test_ContainerServiceNetworkProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceNetworkProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceNetworkProfile_Status, ContainerServiceNetworkProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceNetworkProfile_Status runs a test to see if a specific instance of ContainerServiceNetworkProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceNetworkProfile_Status(subject ContainerServiceNetworkProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceNetworkProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceNetworkProfile_Status instances for property testing - lazily instantiated by
//ContainerServiceNetworkProfile_StatusGenerator()
var containerServiceNetworkProfile_statusGenerator gopter.Gen

// ContainerServiceNetworkProfile_StatusGenerator returns a generator of ContainerServiceNetworkProfile_Status instances for property testing.
// We first initialize containerServiceNetworkProfile_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceNetworkProfile_StatusGenerator() gopter.Gen {
	if containerServiceNetworkProfile_statusGenerator != nil {
		return containerServiceNetworkProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_Status(generators)
	containerServiceNetworkProfile_statusGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_Status(generators)
	AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_Status(generators)
	containerServiceNetworkProfile_statusGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_Status{}), generators)

	return containerServiceNetworkProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_Status(gens map[string]gopter.Gen) {
	gens["DnsServiceIP"] = gen.PtrOf(gen.AlphaString())
	gens["DockerBridgeCidr"] = gen.PtrOf(gen.AlphaString())
	gens["LoadBalancerSku"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkMode"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkPlugin"] = gen.PtrOf(gen.AlphaString())
	gens["NetworkPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["OutboundType"] = gen.PtrOf(gen.AlphaString())
	gens["PodCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_Status(gens map[string]gopter.Gen) {
	gens["LoadBalancerProfile"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_StatusGenerator())
}

func Test_ExtendedLocation_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_Spec, ExtendedLocation_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_Spec runs a test to see if a specific instance of ExtendedLocation_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_Spec(subject ExtendedLocation_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_Spec instances for property testing - lazily instantiated by
//ExtendedLocation_SpecGenerator()
var extendedLocation_specGenerator gopter.Gen

// ExtendedLocation_SpecGenerator returns a generator of ExtendedLocation_Spec instances for property testing.
func ExtendedLocation_SpecGenerator() gopter.Gen {
	if extendedLocation_specGenerator != nil {
		return extendedLocation_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_Spec(generators)
	extendedLocation_specGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_Spec{}), generators)

	return extendedLocation_specGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExtendedLocation_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_Status, ExtendedLocation_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_Status runs a test to see if a specific instance of ExtendedLocation_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_Status(subject ExtendedLocation_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_Status instances for property testing - lazily instantiated by
//ExtendedLocation_StatusGenerator()
var extendedLocation_statusGenerator gopter.Gen

// ExtendedLocation_StatusGenerator returns a generator of ExtendedLocation_Status instances for property testing.
func ExtendedLocation_StatusGenerator() gopter.Gen {
	if extendedLocation_statusGenerator != nil {
		return extendedLocation_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_Status(generators)
	extendedLocation_statusGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_Status{}), generators)

	return extendedLocation_statusGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_Status(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAADProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAADProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAADProfile_Spec, ManagedClusterAADProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAADProfile_Spec runs a test to see if a specific instance of ManagedClusterAADProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAADProfile_Spec(subject ManagedClusterAADProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAADProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAADProfile_Spec instances for property testing - lazily instantiated by
//ManagedClusterAADProfile_SpecGenerator()
var managedClusterAADProfile_specGenerator gopter.Gen

// ManagedClusterAADProfile_SpecGenerator returns a generator of ManagedClusterAADProfile_Spec instances for property testing.
func ManagedClusterAADProfile_SpecGenerator() gopter.Gen {
	if managedClusterAADProfile_specGenerator != nil {
		return managedClusterAADProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAADProfile_Spec(generators)
	managedClusterAADProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAADProfile_Spec{}), generators)

	return managedClusterAADProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAADProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAADProfile_Spec(gens map[string]gopter.Gen) {
	gens["AdminGroupObjectIDs"] = gen.SliceOf(gen.AlphaString())
	gens["ClientAppID"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAzureRBAC"] = gen.PtrOf(gen.Bool())
	gens["Managed"] = gen.PtrOf(gen.Bool())
	gens["ServerAppID"] = gen.PtrOf(gen.AlphaString())
	gens["ServerAppSecret"] = gen.PtrOf(gen.AlphaString())
	gens["TenantID"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAADProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAADProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAADProfile_Status, ManagedClusterAADProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAADProfile_Status runs a test to see if a specific instance of ManagedClusterAADProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAADProfile_Status(subject ManagedClusterAADProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAADProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAADProfile_Status instances for property testing - lazily instantiated by
//ManagedClusterAADProfile_StatusGenerator()
var managedClusterAADProfile_statusGenerator gopter.Gen

// ManagedClusterAADProfile_StatusGenerator returns a generator of ManagedClusterAADProfile_Status instances for property testing.
func ManagedClusterAADProfile_StatusGenerator() gopter.Gen {
	if managedClusterAADProfile_statusGenerator != nil {
		return managedClusterAADProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAADProfile_Status(generators)
	managedClusterAADProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAADProfile_Status{}), generators)

	return managedClusterAADProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAADProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAADProfile_Status(gens map[string]gopter.Gen) {
	gens["AdminGroupObjectIDs"] = gen.SliceOf(gen.AlphaString())
	gens["ClientAppID"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAzureRBAC"] = gen.PtrOf(gen.Bool())
	gens["Managed"] = gen.PtrOf(gen.Bool())
	gens["ServerAppID"] = gen.PtrOf(gen.AlphaString())
	gens["ServerAppSecret"] = gen.PtrOf(gen.AlphaString())
	gens["TenantID"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAPIServerAccessProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAPIServerAccessProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_Spec, ManagedClusterAPIServerAccessProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_Spec runs a test to see if a specific instance of ManagedClusterAPIServerAccessProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_Spec(subject ManagedClusterAPIServerAccessProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAPIServerAccessProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAPIServerAccessProfile_Spec instances for property testing - lazily instantiated by
//ManagedClusterAPIServerAccessProfile_SpecGenerator()
var managedClusterAPIServerAccessProfile_specGenerator gopter.Gen

// ManagedClusterAPIServerAccessProfile_SpecGenerator returns a generator of ManagedClusterAPIServerAccessProfile_Spec instances for property testing.
func ManagedClusterAPIServerAccessProfile_SpecGenerator() gopter.Gen {
	if managedClusterAPIServerAccessProfile_specGenerator != nil {
		return managedClusterAPIServerAccessProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_Spec(generators)
	managedClusterAPIServerAccessProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAPIServerAccessProfile_Spec{}), generators)

	return managedClusterAPIServerAccessProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_Spec(gens map[string]gopter.Gen) {
	gens["AuthorizedIPRanges"] = gen.SliceOf(gen.AlphaString())
	gens["EnablePrivateCluster"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateClusterPublicFQDN"] = gen.PtrOf(gen.Bool())
	gens["PrivateDNSZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAPIServerAccessProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAPIServerAccessProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_Status, ManagedClusterAPIServerAccessProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_Status runs a test to see if a specific instance of ManagedClusterAPIServerAccessProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_Status(subject ManagedClusterAPIServerAccessProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAPIServerAccessProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAPIServerAccessProfile_Status instances for property testing - lazily instantiated by
//ManagedClusterAPIServerAccessProfile_StatusGenerator()
var managedClusterAPIServerAccessProfile_statusGenerator gopter.Gen

// ManagedClusterAPIServerAccessProfile_StatusGenerator returns a generator of ManagedClusterAPIServerAccessProfile_Status instances for property testing.
func ManagedClusterAPIServerAccessProfile_StatusGenerator() gopter.Gen {
	if managedClusterAPIServerAccessProfile_statusGenerator != nil {
		return managedClusterAPIServerAccessProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_Status(generators)
	managedClusterAPIServerAccessProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAPIServerAccessProfile_Status{}), generators)

	return managedClusterAPIServerAccessProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_Status(gens map[string]gopter.Gen) {
	gens["AuthorizedIPRanges"] = gen.SliceOf(gen.AlphaString())
	gens["EnablePrivateCluster"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateClusterPublicFQDN"] = gen.PtrOf(gen.Bool())
	gens["PrivateDNSZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAgentPoolProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfile_Spec, ManagedClusterAgentPoolProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfile_Spec runs a test to see if a specific instance of ManagedClusterAgentPoolProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfile_Spec(subject ManagedClusterAgentPoolProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfile_Spec instances for property testing - lazily instantiated by
//ManagedClusterAgentPoolProfile_SpecGenerator()
var managedClusterAgentPoolProfile_specGenerator gopter.Gen

// ManagedClusterAgentPoolProfile_SpecGenerator returns a generator of ManagedClusterAgentPoolProfile_Spec instances for property testing.
// We first initialize managedClusterAgentPoolProfile_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfile_SpecGenerator() gopter.Gen {
	if managedClusterAgentPoolProfile_specGenerator != nil {
		return managedClusterAgentPoolProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_Spec(generators)
	managedClusterAgentPoolProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_Spec(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_Spec(generators)
	managedClusterAgentPoolProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_Spec{}), generators)

	return managedClusterAgentPoolProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_Spec(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.AlphaString())
	gens["KubeletDiskType"] = gen.PtrOf(gen.AlphaString())
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsDiskType"] = gen.PtrOf(gen.AlphaString())
	gens["OsSKU"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetPriority"] = gen.PtrOf(gen.AlphaString())
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_Spec(gens map[string]gopter.Gen) {
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfig_SpecGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfig_SpecGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettings_SpecGenerator())
}

func Test_ManagedClusterAgentPoolProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfile_Status, ManagedClusterAgentPoolProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfile_Status runs a test to see if a specific instance of ManagedClusterAgentPoolProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfile_Status(subject ManagedClusterAgentPoolProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfile_Status instances for property testing - lazily instantiated by
//ManagedClusterAgentPoolProfile_StatusGenerator()
var managedClusterAgentPoolProfile_statusGenerator gopter.Gen

// ManagedClusterAgentPoolProfile_StatusGenerator returns a generator of ManagedClusterAgentPoolProfile_Status instances for property testing.
// We first initialize managedClusterAgentPoolProfile_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfile_StatusGenerator() gopter.Gen {
	if managedClusterAgentPoolProfile_statusGenerator != nil {
		return managedClusterAgentPoolProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_Status(generators)
	managedClusterAgentPoolProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_Status(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_Status(generators)
	managedClusterAgentPoolProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_Status{}), generators)

	return managedClusterAgentPoolProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_Status(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.AlphaString())
	gens["KubeletDiskType"] = gen.PtrOf(gen.AlphaString())
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NodeImageVersion"] = gen.PtrOf(gen.AlphaString())
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodePublicIPPrefixID"] = gen.PtrOf(gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsDiskType"] = gen.PtrOf(gen.AlphaString())
	gens["OsSKU"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.AlphaString())
	gens["PodSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleSetPriority"] = gen.PtrOf(gen.AlphaString())
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
	gens["VnetSubnetID"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_Status(gens map[string]gopter.Gen) {
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfig_StatusGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfig_StatusGenerator())
	gens["PowerState"] = gen.PtrOf(PowerState_StatusGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettings_StatusGenerator())
}

func Test_ManagedClusterAutoUpgradeProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAutoUpgradeProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_Spec, ManagedClusterAutoUpgradeProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_Spec runs a test to see if a specific instance of ManagedClusterAutoUpgradeProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_Spec(subject ManagedClusterAutoUpgradeProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAutoUpgradeProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAutoUpgradeProfile_Spec instances for property testing - lazily instantiated by
//ManagedClusterAutoUpgradeProfile_SpecGenerator()
var managedClusterAutoUpgradeProfile_specGenerator gopter.Gen

// ManagedClusterAutoUpgradeProfile_SpecGenerator returns a generator of ManagedClusterAutoUpgradeProfile_Spec instances for property testing.
func ManagedClusterAutoUpgradeProfile_SpecGenerator() gopter.Gen {
	if managedClusterAutoUpgradeProfile_specGenerator != nil {
		return managedClusterAutoUpgradeProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_Spec(generators)
	managedClusterAutoUpgradeProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAutoUpgradeProfile_Spec{}), generators)

	return managedClusterAutoUpgradeProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_Spec(gens map[string]gopter.Gen) {
	gens["UpgradeChannel"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAutoUpgradeProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAutoUpgradeProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_Status, ManagedClusterAutoUpgradeProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_Status runs a test to see if a specific instance of ManagedClusterAutoUpgradeProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_Status(subject ManagedClusterAutoUpgradeProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAutoUpgradeProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAutoUpgradeProfile_Status instances for property testing - lazily instantiated by
//ManagedClusterAutoUpgradeProfile_StatusGenerator()
var managedClusterAutoUpgradeProfile_statusGenerator gopter.Gen

// ManagedClusterAutoUpgradeProfile_StatusGenerator returns a generator of ManagedClusterAutoUpgradeProfile_Status instances for property testing.
func ManagedClusterAutoUpgradeProfile_StatusGenerator() gopter.Gen {
	if managedClusterAutoUpgradeProfile_statusGenerator != nil {
		return managedClusterAutoUpgradeProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_Status(generators)
	managedClusterAutoUpgradeProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAutoUpgradeProfile_Status{}), generators)

	return managedClusterAutoUpgradeProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_Status(gens map[string]gopter.Gen) {
	gens["UpgradeChannel"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterHTTPProxyConfig_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterHTTPProxyConfig_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterHTTPProxyConfig_Spec, ManagedClusterHTTPProxyConfig_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterHTTPProxyConfig_Spec runs a test to see if a specific instance of ManagedClusterHTTPProxyConfig_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterHTTPProxyConfig_Spec(subject ManagedClusterHTTPProxyConfig_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterHTTPProxyConfig_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterHTTPProxyConfig_Spec instances for property testing - lazily instantiated by
//ManagedClusterHTTPProxyConfig_SpecGenerator()
var managedClusterHTTPProxyConfig_specGenerator gopter.Gen

// ManagedClusterHTTPProxyConfig_SpecGenerator returns a generator of ManagedClusterHTTPProxyConfig_Spec instances for property testing.
func ManagedClusterHTTPProxyConfig_SpecGenerator() gopter.Gen {
	if managedClusterHTTPProxyConfig_specGenerator != nil {
		return managedClusterHTTPProxyConfig_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_Spec(generators)
	managedClusterHTTPProxyConfig_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterHTTPProxyConfig_Spec{}), generators)

	return managedClusterHTTPProxyConfig_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_Spec(gens map[string]gopter.Gen) {
	gens["HttpProxy"] = gen.PtrOf(gen.AlphaString())
	gens["HttpsProxy"] = gen.PtrOf(gen.AlphaString())
	gens["NoProxy"] = gen.SliceOf(gen.AlphaString())
	gens["TrustedCa"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterHTTPProxyConfig_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterHTTPProxyConfig_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterHTTPProxyConfig_Status, ManagedClusterHTTPProxyConfig_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterHTTPProxyConfig_Status runs a test to see if a specific instance of ManagedClusterHTTPProxyConfig_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterHTTPProxyConfig_Status(subject ManagedClusterHTTPProxyConfig_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterHTTPProxyConfig_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterHTTPProxyConfig_Status instances for property testing - lazily instantiated by
//ManagedClusterHTTPProxyConfig_StatusGenerator()
var managedClusterHTTPProxyConfig_statusGenerator gopter.Gen

// ManagedClusterHTTPProxyConfig_StatusGenerator returns a generator of ManagedClusterHTTPProxyConfig_Status instances for property testing.
func ManagedClusterHTTPProxyConfig_StatusGenerator() gopter.Gen {
	if managedClusterHTTPProxyConfig_statusGenerator != nil {
		return managedClusterHTTPProxyConfig_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_Status(generators)
	managedClusterHTTPProxyConfig_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterHTTPProxyConfig_Status{}), generators)

	return managedClusterHTTPProxyConfig_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_Status(gens map[string]gopter.Gen) {
	gens["HttpProxy"] = gen.PtrOf(gen.AlphaString())
	gens["HttpsProxy"] = gen.PtrOf(gen.AlphaString())
	gens["NoProxy"] = gen.SliceOf(gen.AlphaString())
	gens["TrustedCa"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterIdentity_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentity_Spec, ManagedClusterIdentity_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentity_Spec runs a test to see if a specific instance of ManagedClusterIdentity_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentity_Spec(subject ManagedClusterIdentity_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_Spec instances for property testing - lazily instantiated by
//ManagedClusterIdentity_SpecGenerator()
var managedClusterIdentity_specGenerator gopter.Gen

// ManagedClusterIdentity_SpecGenerator returns a generator of ManagedClusterIdentity_Spec instances for property testing.
func ManagedClusterIdentity_SpecGenerator() gopter.Gen {
	if managedClusterIdentity_specGenerator != nil {
		return managedClusterIdentity_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_Spec(generators)
	managedClusterIdentity_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_Spec{}), generators)

	return managedClusterIdentity_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentity_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentity_Spec(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterIdentity_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentity_Status, ManagedClusterIdentity_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentity_Status runs a test to see if a specific instance of ManagedClusterIdentity_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentity_Status(subject ManagedClusterIdentity_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_Status instances for property testing - lazily instantiated by
//ManagedClusterIdentity_StatusGenerator()
var managedClusterIdentity_statusGenerator gopter.Gen

// ManagedClusterIdentity_StatusGenerator returns a generator of ManagedClusterIdentity_Status instances for property testing.
// We first initialize managedClusterIdentity_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterIdentity_StatusGenerator() gopter.Gen {
	if managedClusterIdentity_statusGenerator != nil {
		return managedClusterIdentity_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_Status(generators)
	managedClusterIdentity_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_Status(generators)
	AddRelatedPropertyGeneratorsForManagedClusterIdentity_Status(generators)
	managedClusterIdentity_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_Status{}), generators)

	return managedClusterIdentity_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentity_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentity_Status(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterIdentity_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterIdentity_Status(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedClusterIdentity_UserAssignedIdentities_StatusGenerator())
}

func Test_ManagedClusterPodIdentityProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProfile_Spec, ManagedClusterPodIdentityProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProfile_Spec runs a test to see if a specific instance of ManagedClusterPodIdentityProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProfile_Spec(subject ManagedClusterPodIdentityProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProfile_Spec instances for property testing - lazily instantiated by
//ManagedClusterPodIdentityProfile_SpecGenerator()
var managedClusterPodIdentityProfile_specGenerator gopter.Gen

// ManagedClusterPodIdentityProfile_SpecGenerator returns a generator of ManagedClusterPodIdentityProfile_Spec instances for property testing.
// We first initialize managedClusterPodIdentityProfile_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProfile_SpecGenerator() gopter.Gen {
	if managedClusterPodIdentityProfile_specGenerator != nil {
		return managedClusterPodIdentityProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_Spec(generators)
	managedClusterPodIdentityProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_Spec(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_Spec(generators)
	managedClusterPodIdentityProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_Spec{}), generators)

	return managedClusterPodIdentityProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_Spec(gens map[string]gopter.Gen) {
	gens["AllowNetworkPluginKubenet"] = gen.PtrOf(gen.Bool())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_Spec(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.SliceOf(ManagedClusterPodIdentity_SpecGenerator())
	gens["UserAssignedIdentityExceptions"] = gen.SliceOf(ManagedClusterPodIdentityException_SpecGenerator())
}

func Test_ManagedClusterPodIdentityProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProfile_Status, ManagedClusterPodIdentityProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProfile_Status runs a test to see if a specific instance of ManagedClusterPodIdentityProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProfile_Status(subject ManagedClusterPodIdentityProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProfile_Status instances for property testing - lazily instantiated by
//ManagedClusterPodIdentityProfile_StatusGenerator()
var managedClusterPodIdentityProfile_statusGenerator gopter.Gen

// ManagedClusterPodIdentityProfile_StatusGenerator returns a generator of ManagedClusterPodIdentityProfile_Status instances for property testing.
// We first initialize managedClusterPodIdentityProfile_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProfile_StatusGenerator() gopter.Gen {
	if managedClusterPodIdentityProfile_statusGenerator != nil {
		return managedClusterPodIdentityProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_Status(generators)
	managedClusterPodIdentityProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_Status(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_Status(generators)
	managedClusterPodIdentityProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_Status{}), generators)

	return managedClusterPodIdentityProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_Status(gens map[string]gopter.Gen) {
	gens["AllowNetworkPluginKubenet"] = gen.PtrOf(gen.Bool())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_Status(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.SliceOf(ManagedClusterPodIdentity_StatusGenerator())
	gens["UserAssignedIdentityExceptions"] = gen.SliceOf(ManagedClusterPodIdentityException_StatusGenerator())
}

func Test_ManagedClusterProperties_AutoScalerProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_AutoScalerProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_Spec, ManagedClusterProperties_AutoScalerProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_Spec runs a test to see if a specific instance of ManagedClusterProperties_AutoScalerProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_Spec(subject ManagedClusterProperties_AutoScalerProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_AutoScalerProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_AutoScalerProfile_Spec instances for property testing - lazily instantiated by
//ManagedClusterProperties_AutoScalerProfile_SpecGenerator()
var managedClusterProperties_autoScalerProfile_specGenerator gopter.Gen

// ManagedClusterProperties_AutoScalerProfile_SpecGenerator returns a generator of ManagedClusterProperties_AutoScalerProfile_Spec instances for property testing.
func ManagedClusterProperties_AutoScalerProfile_SpecGenerator() gopter.Gen {
	if managedClusterProperties_autoScalerProfile_specGenerator != nil {
		return managedClusterProperties_autoScalerProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_Spec(generators)
	managedClusterProperties_autoScalerProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_AutoScalerProfile_Spec{}), generators)

	return managedClusterProperties_autoScalerProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_Spec(gens map[string]gopter.Gen) {
	gens["BalanceSimilarNodeGroups"] = gen.PtrOf(gen.AlphaString())
	gens["Expander"] = gen.PtrOf(gen.AlphaString())
	gens["MaxEmptyBulkDelete"] = gen.PtrOf(gen.AlphaString())
	gens["MaxGracefulTerminationSec"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNodeProvisionTime"] = gen.PtrOf(gen.AlphaString())
	gens["MaxTotalUnreadyPercentage"] = gen.PtrOf(gen.AlphaString())
	gens["NewPodScaleUpDelay"] = gen.PtrOf(gen.AlphaString())
	gens["OkTotalUnreadyCount"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterAdd"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterDelete"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterFailure"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnneededTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnreadyTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUtilizationThreshold"] = gen.PtrOf(gen.AlphaString())
	gens["ScanInterval"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithLocalStorage"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithSystemPods"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterProperties_AutoScalerProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_AutoScalerProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_Status, ManagedClusterProperties_AutoScalerProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_Status runs a test to see if a specific instance of ManagedClusterProperties_AutoScalerProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_Status(subject ManagedClusterProperties_AutoScalerProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_AutoScalerProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_AutoScalerProfile_Status instances for property testing - lazily instantiated
//by ManagedClusterProperties_AutoScalerProfile_StatusGenerator()
var managedClusterProperties_autoScalerProfile_statusGenerator gopter.Gen

// ManagedClusterProperties_AutoScalerProfile_StatusGenerator returns a generator of ManagedClusterProperties_AutoScalerProfile_Status instances for property testing.
func ManagedClusterProperties_AutoScalerProfile_StatusGenerator() gopter.Gen {
	if managedClusterProperties_autoScalerProfile_statusGenerator != nil {
		return managedClusterProperties_autoScalerProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_Status(generators)
	managedClusterProperties_autoScalerProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_AutoScalerProfile_Status{}), generators)

	return managedClusterProperties_autoScalerProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_Status(gens map[string]gopter.Gen) {
	gens["BalanceSimilarNodeGroups"] = gen.PtrOf(gen.AlphaString())
	gens["Expander"] = gen.PtrOf(gen.AlphaString())
	gens["MaxEmptyBulkDelete"] = gen.PtrOf(gen.AlphaString())
	gens["MaxGracefulTerminationSec"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNodeProvisionTime"] = gen.PtrOf(gen.AlphaString())
	gens["MaxTotalUnreadyPercentage"] = gen.PtrOf(gen.AlphaString())
	gens["NewPodScaleUpDelay"] = gen.PtrOf(gen.AlphaString())
	gens["OkTotalUnreadyCount"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterAdd"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterDelete"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterFailure"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnneededTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnreadyTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUtilizationThreshold"] = gen.PtrOf(gen.AlphaString())
	gens["ScanInterval"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithLocalStorage"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithSystemPods"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterSKU_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSKU_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSKU_Spec, ManagedClusterSKU_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSKU_Spec runs a test to see if a specific instance of ManagedClusterSKU_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSKU_Spec(subject ManagedClusterSKU_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSKU_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSKU_Spec instances for property testing - lazily instantiated by
//ManagedClusterSKU_SpecGenerator()
var managedClusterSKU_specGenerator gopter.Gen

// ManagedClusterSKU_SpecGenerator returns a generator of ManagedClusterSKU_Spec instances for property testing.
func ManagedClusterSKU_SpecGenerator() gopter.Gen {
	if managedClusterSKU_specGenerator != nil {
		return managedClusterSKU_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSKU_Spec(generators)
	managedClusterSKU_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSKU_Spec{}), generators)

	return managedClusterSKU_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSKU_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSKU_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterSKU_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSKU_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSKU_Status, ManagedClusterSKU_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSKU_Status runs a test to see if a specific instance of ManagedClusterSKU_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSKU_Status(subject ManagedClusterSKU_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSKU_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSKU_Status instances for property testing - lazily instantiated by
//ManagedClusterSKU_StatusGenerator()
var managedClusterSKU_statusGenerator gopter.Gen

// ManagedClusterSKU_StatusGenerator returns a generator of ManagedClusterSKU_Status instances for property testing.
func ManagedClusterSKU_StatusGenerator() gopter.Gen {
	if managedClusterSKU_statusGenerator != nil {
		return managedClusterSKU_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSKU_Status(generators)
	managedClusterSKU_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSKU_Status{}), generators)

	return managedClusterSKU_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSKU_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSKU_Status(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterServicePrincipalProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterServicePrincipalProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterServicePrincipalProfile_Spec, ManagedClusterServicePrincipalProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterServicePrincipalProfile_Spec runs a test to see if a specific instance of ManagedClusterServicePrincipalProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterServicePrincipalProfile_Spec(subject ManagedClusterServicePrincipalProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterServicePrincipalProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterServicePrincipalProfile_Spec instances for property testing - lazily instantiated by
//ManagedClusterServicePrincipalProfile_SpecGenerator()
var managedClusterServicePrincipalProfile_specGenerator gopter.Gen

// ManagedClusterServicePrincipalProfile_SpecGenerator returns a generator of ManagedClusterServicePrincipalProfile_Spec instances for property testing.
func ManagedClusterServicePrincipalProfile_SpecGenerator() gopter.Gen {
	if managedClusterServicePrincipalProfile_specGenerator != nil {
		return managedClusterServicePrincipalProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_Spec(generators)
	managedClusterServicePrincipalProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterServicePrincipalProfile_Spec{}), generators)

	return managedClusterServicePrincipalProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_Spec(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterServicePrincipalProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterServicePrincipalProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterServicePrincipalProfile_Status, ManagedClusterServicePrincipalProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterServicePrincipalProfile_Status runs a test to see if a specific instance of ManagedClusterServicePrincipalProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterServicePrincipalProfile_Status(subject ManagedClusterServicePrincipalProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterServicePrincipalProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterServicePrincipalProfile_Status instances for property testing - lazily instantiated by
//ManagedClusterServicePrincipalProfile_StatusGenerator()
var managedClusterServicePrincipalProfile_statusGenerator gopter.Gen

// ManagedClusterServicePrincipalProfile_StatusGenerator returns a generator of ManagedClusterServicePrincipalProfile_Status instances for property testing.
func ManagedClusterServicePrincipalProfile_StatusGenerator() gopter.Gen {
	if managedClusterServicePrincipalProfile_statusGenerator != nil {
		return managedClusterServicePrincipalProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_Status(generators)
	managedClusterServicePrincipalProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterServicePrincipalProfile_Status{}), generators)

	return managedClusterServicePrincipalProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_Status(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterWindowsProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterWindowsProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterWindowsProfile_Spec, ManagedClusterWindowsProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterWindowsProfile_Spec runs a test to see if a specific instance of ManagedClusterWindowsProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterWindowsProfile_Spec(subject ManagedClusterWindowsProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterWindowsProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterWindowsProfile_Spec instances for property testing - lazily instantiated by
//ManagedClusterWindowsProfile_SpecGenerator()
var managedClusterWindowsProfile_specGenerator gopter.Gen

// ManagedClusterWindowsProfile_SpecGenerator returns a generator of ManagedClusterWindowsProfile_Spec instances for property testing.
func ManagedClusterWindowsProfile_SpecGenerator() gopter.Gen {
	if managedClusterWindowsProfile_specGenerator != nil {
		return managedClusterWindowsProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_Spec(generators)
	managedClusterWindowsProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWindowsProfile_Spec{}), generators)

	return managedClusterWindowsProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_Spec(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["EnableCSIProxy"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterWindowsProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterWindowsProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterWindowsProfile_Status, ManagedClusterWindowsProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterWindowsProfile_Status runs a test to see if a specific instance of ManagedClusterWindowsProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterWindowsProfile_Status(subject ManagedClusterWindowsProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterWindowsProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterWindowsProfile_Status instances for property testing - lazily instantiated by
//ManagedClusterWindowsProfile_StatusGenerator()
var managedClusterWindowsProfile_statusGenerator gopter.Gen

// ManagedClusterWindowsProfile_StatusGenerator returns a generator of ManagedClusterWindowsProfile_Status instances for property testing.
func ManagedClusterWindowsProfile_StatusGenerator() gopter.Gen {
	if managedClusterWindowsProfile_statusGenerator != nil {
		return managedClusterWindowsProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_Status(generators)
	managedClusterWindowsProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWindowsProfile_Status{}), generators)

	return managedClusterWindowsProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_Status(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["EnableCSIProxy"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
}

func Test_PowerState_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PowerState_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPowerState_Status, PowerState_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPowerState_Status runs a test to see if a specific instance of PowerState_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForPowerState_Status(subject PowerState_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PowerState_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PowerState_Status instances for property testing - lazily instantiated by PowerState_StatusGenerator()
var powerState_statusGenerator gopter.Gen

// PowerState_StatusGenerator returns a generator of PowerState_Status instances for property testing.
func PowerState_StatusGenerator() gopter.Gen {
	if powerState_statusGenerator != nil {
		return powerState_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPowerState_Status(generators)
	powerState_statusGenerator = gen.Struct(reflect.TypeOf(PowerState_Status{}), generators)

	return powerState_statusGenerator
}

// AddIndependentPropertyGeneratorsForPowerState_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPowerState_Status(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateLinkResource_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkResource_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkResource_Spec, PrivateLinkResource_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkResource_Spec runs a test to see if a specific instance of PrivateLinkResource_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkResource_Spec(subject PrivateLinkResource_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkResource_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkResource_Spec instances for property testing - lazily instantiated by
//PrivateLinkResource_SpecGenerator()
var privateLinkResource_specGenerator gopter.Gen

// PrivateLinkResource_SpecGenerator returns a generator of PrivateLinkResource_Spec instances for property testing.
func PrivateLinkResource_SpecGenerator() gopter.Gen {
	if privateLinkResource_specGenerator != nil {
		return privateLinkResource_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkResource_Spec(generators)
	privateLinkResource_specGenerator = gen.Struct(reflect.TypeOf(PrivateLinkResource_Spec{}), generators)

	return privateLinkResource_specGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkResource_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkResource_Spec(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMembers"] = gen.SliceOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateLinkResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkResource_Status, PrivateLinkResource_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkResource_Status runs a test to see if a specific instance of PrivateLinkResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkResource_Status(subject PrivateLinkResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkResource_Status instances for property testing - lazily instantiated by
//PrivateLinkResource_StatusGenerator()
var privateLinkResource_statusGenerator gopter.Gen

// PrivateLinkResource_StatusGenerator returns a generator of PrivateLinkResource_Status instances for property testing.
func PrivateLinkResource_StatusGenerator() gopter.Gen {
	if privateLinkResource_statusGenerator != nil {
		return privateLinkResource_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkResource_Status(generators)
	privateLinkResource_statusGenerator = gen.Struct(reflect.TypeOf(PrivateLinkResource_Status{}), generators)

	return privateLinkResource_statusGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkResource_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkResource_Status(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceID"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMembers"] = gen.SliceOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerServiceSshConfiguration_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshConfiguration_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshConfiguration_Spec, ContainerServiceSshConfiguration_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshConfiguration_Spec runs a test to see if a specific instance of ContainerServiceSshConfiguration_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshConfiguration_Spec(subject ContainerServiceSshConfiguration_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshConfiguration_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshConfiguration_Spec instances for property testing - lazily instantiated by
//ContainerServiceSshConfiguration_SpecGenerator()
var containerServiceSshConfiguration_specGenerator gopter.Gen

// ContainerServiceSshConfiguration_SpecGenerator returns a generator of ContainerServiceSshConfiguration_Spec instances for property testing.
func ContainerServiceSshConfiguration_SpecGenerator() gopter.Gen {
	if containerServiceSshConfiguration_specGenerator != nil {
		return containerServiceSshConfiguration_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_Spec(generators)
	containerServiceSshConfiguration_specGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshConfiguration_Spec{}), generators)

	return containerServiceSshConfiguration_specGenerator
}

// AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_Spec(gens map[string]gopter.Gen) {
	gens["PublicKeys"] = gen.SliceOf(ContainerServiceSshPublicKey_SpecGenerator())
}

func Test_ContainerServiceSshConfiguration_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshConfiguration_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshConfiguration_Status, ContainerServiceSshConfiguration_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshConfiguration_Status runs a test to see if a specific instance of ContainerServiceSshConfiguration_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshConfiguration_Status(subject ContainerServiceSshConfiguration_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshConfiguration_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshConfiguration_Status instances for property testing - lazily instantiated by
//ContainerServiceSshConfiguration_StatusGenerator()
var containerServiceSshConfiguration_statusGenerator gopter.Gen

// ContainerServiceSshConfiguration_StatusGenerator returns a generator of ContainerServiceSshConfiguration_Status instances for property testing.
func ContainerServiceSshConfiguration_StatusGenerator() gopter.Gen {
	if containerServiceSshConfiguration_statusGenerator != nil {
		return containerServiceSshConfiguration_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_Status(generators)
	containerServiceSshConfiguration_statusGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshConfiguration_Status{}), generators)

	return containerServiceSshConfiguration_statusGenerator
}

// AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_Status(gens map[string]gopter.Gen) {
	gens["PublicKeys"] = gen.SliceOf(ContainerServiceSshPublicKey_StatusGenerator())
}

func Test_ManagedClusterIdentity_UserAssignedIdentities_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_UserAssignedIdentities_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentity_UserAssignedIdentities_Status, ManagedClusterIdentity_UserAssignedIdentities_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentity_UserAssignedIdentities_Status runs a test to see if a specific instance of ManagedClusterIdentity_UserAssignedIdentities_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentity_UserAssignedIdentities_Status(subject ManagedClusterIdentity_UserAssignedIdentities_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_UserAssignedIdentities_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_UserAssignedIdentities_Status instances for property testing - lazily
//instantiated by ManagedClusterIdentity_UserAssignedIdentities_StatusGenerator()
var managedClusterIdentity_userAssignedIdentities_statusGenerator gopter.Gen

// ManagedClusterIdentity_UserAssignedIdentities_StatusGenerator returns a generator of ManagedClusterIdentity_UserAssignedIdentities_Status instances for property testing.
func ManagedClusterIdentity_UserAssignedIdentities_StatusGenerator() gopter.Gen {
	if managedClusterIdentity_userAssignedIdentities_statusGenerator != nil {
		return managedClusterIdentity_userAssignedIdentities_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_UserAssignedIdentities_Status(generators)
	managedClusterIdentity_userAssignedIdentities_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_UserAssignedIdentities_Status{}), generators)

	return managedClusterIdentity_userAssignedIdentities_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentity_UserAssignedIdentities_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentity_UserAssignedIdentities_Status(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterLoadBalancerProfile_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_Spec, ManagedClusterLoadBalancerProfile_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_Spec runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_Spec(subject ManagedClusterLoadBalancerProfile_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_Spec instances for property testing - lazily instantiated by
//ManagedClusterLoadBalancerProfile_SpecGenerator()
var managedClusterLoadBalancerProfile_specGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_SpecGenerator returns a generator of ManagedClusterLoadBalancerProfile_Spec instances for property testing.
// We first initialize managedClusterLoadBalancerProfile_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterLoadBalancerProfile_SpecGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_specGenerator != nil {
		return managedClusterLoadBalancerProfile_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_Spec(generators)
	managedClusterLoadBalancerProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_Spec(generators)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_Spec(generators)
	managedClusterLoadBalancerProfile_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_Spec{}), generators)

	return managedClusterLoadBalancerProfile_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_Spec(gens map[string]gopter.Gen) {
	gens["AllocatedOutboundPorts"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_Spec(gens map[string]gopter.Gen) {
	gens["EffectiveOutboundIPs"] = gen.SliceOf(ResourceReference_SpecGenerator())
	gens["ManagedOutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_SpecGenerator())
	gens["OutboundIPPrefixes"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_SpecGenerator())
	gens["OutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_OutboundIPs_SpecGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_Status, ManagedClusterLoadBalancerProfile_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_Status runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_Status(subject ManagedClusterLoadBalancerProfile_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_Status instances for property testing - lazily instantiated by
//ManagedClusterLoadBalancerProfile_StatusGenerator()
var managedClusterLoadBalancerProfile_statusGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_StatusGenerator returns a generator of ManagedClusterLoadBalancerProfile_Status instances for property testing.
// We first initialize managedClusterLoadBalancerProfile_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterLoadBalancerProfile_StatusGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_statusGenerator != nil {
		return managedClusterLoadBalancerProfile_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_Status(generators)
	managedClusterLoadBalancerProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_Status(generators)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_Status(generators)
	managedClusterLoadBalancerProfile_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_Status{}), generators)

	return managedClusterLoadBalancerProfile_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_Status(gens map[string]gopter.Gen) {
	gens["AllocatedOutboundPorts"] = gen.PtrOf(gen.Int())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_Status(gens map[string]gopter.Gen) {
	gens["EffectiveOutboundIPs"] = gen.SliceOf(ResourceReference_StatusGenerator())
	gens["ManagedOutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusGenerator())
	gens["OutboundIPPrefixes"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusGenerator())
	gens["OutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_OutboundIPs_StatusGenerator())
}

func Test_ManagedClusterPodIdentityException_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityException_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityException_Spec, ManagedClusterPodIdentityException_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityException_Spec runs a test to see if a specific instance of ManagedClusterPodIdentityException_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityException_Spec(subject ManagedClusterPodIdentityException_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityException_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityException_Spec instances for property testing - lazily instantiated by
//ManagedClusterPodIdentityException_SpecGenerator()
var managedClusterPodIdentityException_specGenerator gopter.Gen

// ManagedClusterPodIdentityException_SpecGenerator returns a generator of ManagedClusterPodIdentityException_Spec instances for property testing.
func ManagedClusterPodIdentityException_SpecGenerator() gopter.Gen {
	if managedClusterPodIdentityException_specGenerator != nil {
		return managedClusterPodIdentityException_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_Spec(generators)
	managedClusterPodIdentityException_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityException_Spec{}), generators)

	return managedClusterPodIdentityException_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["PodLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_ManagedClusterPodIdentityException_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityException_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityException_Status, ManagedClusterPodIdentityException_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityException_Status runs a test to see if a specific instance of ManagedClusterPodIdentityException_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityException_Status(subject ManagedClusterPodIdentityException_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityException_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityException_Status instances for property testing - lazily instantiated by
//ManagedClusterPodIdentityException_StatusGenerator()
var managedClusterPodIdentityException_statusGenerator gopter.Gen

// ManagedClusterPodIdentityException_StatusGenerator returns a generator of ManagedClusterPodIdentityException_Status instances for property testing.
func ManagedClusterPodIdentityException_StatusGenerator() gopter.Gen {
	if managedClusterPodIdentityException_statusGenerator != nil {
		return managedClusterPodIdentityException_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_Status(generators)
	managedClusterPodIdentityException_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityException_Status{}), generators)

	return managedClusterPodIdentityException_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_Status(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["PodLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_ManagedClusterPodIdentity_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentity_Spec, ManagedClusterPodIdentity_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentity_Spec runs a test to see if a specific instance of ManagedClusterPodIdentity_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentity_Spec(subject ManagedClusterPodIdentity_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_Spec instances for property testing - lazily instantiated by
//ManagedClusterPodIdentity_SpecGenerator()
var managedClusterPodIdentity_specGenerator gopter.Gen

// ManagedClusterPodIdentity_SpecGenerator returns a generator of ManagedClusterPodIdentity_Spec instances for property testing.
// We first initialize managedClusterPodIdentity_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentity_SpecGenerator() gopter.Gen {
	if managedClusterPodIdentity_specGenerator != nil {
		return managedClusterPodIdentity_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_Spec(generators)
	managedClusterPodIdentity_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_Spec(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_Spec(generators)
	managedClusterPodIdentity_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_Spec{}), generators)

	return managedClusterPodIdentity_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_Spec(gens map[string]gopter.Gen) {
	gens["BindingSelector"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_Spec(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(UserAssignedIdentity_SpecGenerator())
}

func Test_ManagedClusterPodIdentity_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentity_Status, ManagedClusterPodIdentity_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentity_Status runs a test to see if a specific instance of ManagedClusterPodIdentity_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentity_Status(subject ManagedClusterPodIdentity_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_Status instances for property testing - lazily instantiated by
//ManagedClusterPodIdentity_StatusGenerator()
var managedClusterPodIdentity_statusGenerator gopter.Gen

// ManagedClusterPodIdentity_StatusGenerator returns a generator of ManagedClusterPodIdentity_Status instances for property testing.
// We first initialize managedClusterPodIdentity_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentity_StatusGenerator() gopter.Gen {
	if managedClusterPodIdentity_statusGenerator != nil {
		return managedClusterPodIdentity_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_Status(generators)
	managedClusterPodIdentity_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_Status(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_Status(generators)
	managedClusterPodIdentity_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_Status{}), generators)

	return managedClusterPodIdentity_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_Status(gens map[string]gopter.Gen) {
	gens["BindingSelector"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_Status(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(UserAssignedIdentity_StatusGenerator())
	gens["ProvisioningInfo"] = gen.PtrOf(ManagedClusterPodIdentity_ProvisioningInfo_StatusGenerator())
}

func Test_ContainerServiceSshPublicKey_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshPublicKey_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshPublicKey_Spec, ContainerServiceSshPublicKey_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshPublicKey_Spec runs a test to see if a specific instance of ContainerServiceSshPublicKey_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshPublicKey_Spec(subject ContainerServiceSshPublicKey_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshPublicKey_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshPublicKey_Spec instances for property testing - lazily instantiated by
//ContainerServiceSshPublicKey_SpecGenerator()
var containerServiceSshPublicKey_specGenerator gopter.Gen

// ContainerServiceSshPublicKey_SpecGenerator returns a generator of ContainerServiceSshPublicKey_Spec instances for property testing.
func ContainerServiceSshPublicKey_SpecGenerator() gopter.Gen {
	if containerServiceSshPublicKey_specGenerator != nil {
		return containerServiceSshPublicKey_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_Spec(generators)
	containerServiceSshPublicKey_specGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshPublicKey_Spec{}), generators)

	return containerServiceSshPublicKey_specGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_Spec(gens map[string]gopter.Gen) {
	gens["KeyData"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerServiceSshPublicKey_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshPublicKey_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshPublicKey_Status, ContainerServiceSshPublicKey_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshPublicKey_Status runs a test to see if a specific instance of ContainerServiceSshPublicKey_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshPublicKey_Status(subject ContainerServiceSshPublicKey_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshPublicKey_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshPublicKey_Status instances for property testing - lazily instantiated by
//ContainerServiceSshPublicKey_StatusGenerator()
var containerServiceSshPublicKey_statusGenerator gopter.Gen

// ContainerServiceSshPublicKey_StatusGenerator returns a generator of ContainerServiceSshPublicKey_Status instances for property testing.
func ContainerServiceSshPublicKey_StatusGenerator() gopter.Gen {
	if containerServiceSshPublicKey_statusGenerator != nil {
		return containerServiceSshPublicKey_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_Status(generators)
	containerServiceSshPublicKey_statusGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshPublicKey_Status{}), generators)

	return containerServiceSshPublicKey_statusGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_Status(gens map[string]gopter.Gen) {
	gens["KeyData"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec, ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec(subject ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec instances for property testing - lazily
//instantiated by ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_SpecGenerator()
var managedClusterLoadBalancerProfile_managedOutboundIPs_specGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_SpecGenerator returns a generator of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec instances for property testing.
func ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_SpecGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_managedOutboundIPs_specGenerator != nil {
		return managedClusterLoadBalancerProfile_managedOutboundIPs_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec(generators)
	managedClusterLoadBalancerProfile_managedOutboundIPs_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec{}), generators)

	return managedClusterLoadBalancerProfile_managedOutboundIPs_specGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Spec(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
}

func Test_ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status, ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status(subject ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status instances for property testing - lazily
//instantiated by ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusGenerator()
var managedClusterLoadBalancerProfile_managedOutboundIPs_statusGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusGenerator returns a generator of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status instances for property testing.
func ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_StatusGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_managedOutboundIPs_statusGenerator != nil {
		return managedClusterLoadBalancerProfile_managedOutboundIPs_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status(generators)
	managedClusterLoadBalancerProfile_managedOutboundIPs_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status{}), generators)

	return managedClusterLoadBalancerProfile_managedOutboundIPs_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_Status(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
}

func Test_ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec, ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec(subject ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec instances for property testing - lazily
//instantiated by ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_SpecGenerator()
var managedClusterLoadBalancerProfile_outboundIPPrefixes_specGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_SpecGenerator returns a generator of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec instances for property testing.
func ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_SpecGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_outboundIPPrefixes_specGenerator != nil {
		return managedClusterLoadBalancerProfile_outboundIPPrefixes_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec(generators)
	managedClusterLoadBalancerProfile_outboundIPPrefixes_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec{}), generators)

	return managedClusterLoadBalancerProfile_outboundIPPrefixes_specGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Spec(gens map[string]gopter.Gen) {
	gens["PublicIPPrefixes"] = gen.SliceOf(ResourceReference_SpecGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status, ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status(subject ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status instances for property testing - lazily
//instantiated by ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusGenerator()
var managedClusterLoadBalancerProfile_outboundIPPrefixes_statusGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusGenerator returns a generator of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status instances for property testing.
func ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_StatusGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_outboundIPPrefixes_statusGenerator != nil {
		return managedClusterLoadBalancerProfile_outboundIPPrefixes_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status(generators)
	managedClusterLoadBalancerProfile_outboundIPPrefixes_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status{}), generators)

	return managedClusterLoadBalancerProfile_outboundIPPrefixes_statusGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_Status(gens map[string]gopter.Gen) {
	gens["PublicIPPrefixes"] = gen.SliceOf(ResourceReference_StatusGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_OutboundIPs_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_OutboundIPs_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_Spec, ManagedClusterLoadBalancerProfile_OutboundIPs_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_Spec runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_OutboundIPs_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_Spec(subject ManagedClusterLoadBalancerProfile_OutboundIPs_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_OutboundIPs_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_OutboundIPs_Spec instances for property testing - lazily instantiated
//by ManagedClusterLoadBalancerProfile_OutboundIPs_SpecGenerator()
var managedClusterLoadBalancerProfile_outboundIPs_specGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_OutboundIPs_SpecGenerator returns a generator of ManagedClusterLoadBalancerProfile_OutboundIPs_Spec instances for property testing.
func ManagedClusterLoadBalancerProfile_OutboundIPs_SpecGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_outboundIPs_specGenerator != nil {
		return managedClusterLoadBalancerProfile_outboundIPs_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_Spec(generators)
	managedClusterLoadBalancerProfile_outboundIPs_specGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_OutboundIPs_Spec{}), generators)

	return managedClusterLoadBalancerProfile_outboundIPs_specGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_Spec(gens map[string]gopter.Gen) {
	gens["PublicIPs"] = gen.SliceOf(ResourceReference_SpecGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_OutboundIPs_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_OutboundIPs_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_Status, ManagedClusterLoadBalancerProfile_OutboundIPs_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_Status runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_OutboundIPs_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_Status(subject ManagedClusterLoadBalancerProfile_OutboundIPs_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_OutboundIPs_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_OutboundIPs_Status instances for property testing - lazily
//instantiated by ManagedClusterLoadBalancerProfile_OutboundIPs_StatusGenerator()
var managedClusterLoadBalancerProfile_outboundIPs_statusGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_OutboundIPs_StatusGenerator returns a generator of ManagedClusterLoadBalancerProfile_OutboundIPs_Status instances for property testing.
func ManagedClusterLoadBalancerProfile_OutboundIPs_StatusGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_outboundIPs_statusGenerator != nil {
		return managedClusterLoadBalancerProfile_outboundIPs_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_Status(generators)
	managedClusterLoadBalancerProfile_outboundIPs_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_OutboundIPs_Status{}), generators)

	return managedClusterLoadBalancerProfile_outboundIPs_statusGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_Status(gens map[string]gopter.Gen) {
	gens["PublicIPs"] = gen.SliceOf(ResourceReference_StatusGenerator())
}

func Test_ManagedClusterPodIdentity_ProvisioningInfo_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_ProvisioningInfo_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentity_ProvisioningInfo_Status, ManagedClusterPodIdentity_ProvisioningInfo_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentity_ProvisioningInfo_Status runs a test to see if a specific instance of ManagedClusterPodIdentity_ProvisioningInfo_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentity_ProvisioningInfo_Status(subject ManagedClusterPodIdentity_ProvisioningInfo_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_ProvisioningInfo_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_ProvisioningInfo_Status instances for property testing - lazily instantiated
//by ManagedClusterPodIdentity_ProvisioningInfo_StatusGenerator()
var managedClusterPodIdentity_provisioningInfo_statusGenerator gopter.Gen

// ManagedClusterPodIdentity_ProvisioningInfo_StatusGenerator returns a generator of ManagedClusterPodIdentity_ProvisioningInfo_Status instances for property testing.
func ManagedClusterPodIdentity_ProvisioningInfo_StatusGenerator() gopter.Gen {
	if managedClusterPodIdentity_provisioningInfo_statusGenerator != nil {
		return managedClusterPodIdentity_provisioningInfo_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_ProvisioningInfo_Status(generators)
	managedClusterPodIdentity_provisioningInfo_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_ProvisioningInfo_Status{}), generators)

	return managedClusterPodIdentity_provisioningInfo_statusGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_ProvisioningInfo_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_ProvisioningInfo_Status(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningError_StatusGenerator())
}

func Test_ResourceReference_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_Spec, ResourceReference_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_Spec runs a test to see if a specific instance of ResourceReference_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_Spec(subject ResourceReference_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_Spec instances for property testing - lazily instantiated by
//ResourceReference_SpecGenerator()
var resourceReference_specGenerator gopter.Gen

// ResourceReference_SpecGenerator returns a generator of ResourceReference_Spec instances for property testing.
func ResourceReference_SpecGenerator() gopter.Gen {
	if resourceReference_specGenerator != nil {
		return resourceReference_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	resourceReference_specGenerator = gen.Struct(reflect.TypeOf(ResourceReference_Spec{}), generators)

	return resourceReference_specGenerator
}

func Test_ResourceReference_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_Status, ResourceReference_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_Status runs a test to see if a specific instance of ResourceReference_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_Status(subject ResourceReference_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_Status instances for property testing - lazily instantiated by
//ResourceReference_StatusGenerator()
var resourceReference_statusGenerator gopter.Gen

// ResourceReference_StatusGenerator returns a generator of ResourceReference_Status instances for property testing.
func ResourceReference_StatusGenerator() gopter.Gen {
	if resourceReference_statusGenerator != nil {
		return resourceReference_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_Status(generators)
	resourceReference_statusGenerator = gen.Struct(reflect.TypeOf(ResourceReference_Status{}), generators)

	return resourceReference_statusGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_Status(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentity_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_Spec, UserAssignedIdentity_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_Spec runs a test to see if a specific instance of UserAssignedIdentity_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_Spec(subject UserAssignedIdentity_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_Spec instances for property testing - lazily instantiated by
//UserAssignedIdentity_SpecGenerator()
var userAssignedIdentity_specGenerator gopter.Gen

// UserAssignedIdentity_SpecGenerator returns a generator of UserAssignedIdentity_Spec instances for property testing.
func UserAssignedIdentity_SpecGenerator() gopter.Gen {
	if userAssignedIdentity_specGenerator != nil {
		return userAssignedIdentity_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_Spec(generators)
	userAssignedIdentity_specGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_Spec{}), generators)

	return userAssignedIdentity_specGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_Spec(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentity_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_Status, UserAssignedIdentity_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_Status runs a test to see if a specific instance of UserAssignedIdentity_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_Status(subject UserAssignedIdentity_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_Status instances for property testing - lazily instantiated by
//UserAssignedIdentity_StatusGenerator()
var userAssignedIdentity_statusGenerator gopter.Gen

// UserAssignedIdentity_StatusGenerator returns a generator of UserAssignedIdentity_Status instances for property testing.
func UserAssignedIdentity_StatusGenerator() gopter.Gen {
	if userAssignedIdentity_statusGenerator != nil {
		return userAssignedIdentity_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_Status(generators)
	userAssignedIdentity_statusGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_Status{}), generators)

	return userAssignedIdentity_statusGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_Status(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProvisioningError_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningError_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_Status, ManagedClusterPodIdentityProvisioningError_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_Status runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningError_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_Status(subject ManagedClusterPodIdentityProvisioningError_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningError_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningError_Status instances for property testing - lazily instantiated
//by ManagedClusterPodIdentityProvisioningError_StatusGenerator()
var managedClusterPodIdentityProvisioningError_statusGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningError_StatusGenerator returns a generator of ManagedClusterPodIdentityProvisioningError_Status instances for property testing.
func ManagedClusterPodIdentityProvisioningError_StatusGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningError_statusGenerator != nil {
		return managedClusterPodIdentityProvisioningError_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_Status(generators)
	managedClusterPodIdentityProvisioningError_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningError_Status{}), generators)

	return managedClusterPodIdentityProvisioningError_statusGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_Status(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningErrorBody_StatusGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_Status, ManagedClusterPodIdentityProvisioningErrorBody_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_Status runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_Status(subject ManagedClusterPodIdentityProvisioningErrorBody_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_Status instances for property testing - lazily
//instantiated by ManagedClusterPodIdentityProvisioningErrorBody_StatusGenerator()
var managedClusterPodIdentityProvisioningErrorBody_statusGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBody_StatusGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_Status instances for property testing.
// We first initialize managedClusterPodIdentityProvisioningErrorBody_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProvisioningErrorBody_StatusGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBody_statusGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBody_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status(generators)
	managedClusterPodIdentityProvisioningErrorBody_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status(generators)
	managedClusterPodIdentityProvisioningErrorBody_statusGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_Status{}), generators)

	return managedClusterPodIdentityProvisioningErrorBody_statusGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status(gens map[string]gopter.Gen) {
	gens["Details"] = gen.SliceOf(ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled, ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled(subject ManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled instances for property testing - lazily
//instantiated by ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledGenerator()
var managedClusterPodIdentityProvisioningErrorBody_status_unrolledGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled instances for property testing.
func ManagedClusterPodIdentityProvisioningErrorBody_Status_UnrolledGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBody_status_unrolledGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBody_status_unrolledGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled(generators)
	managedClusterPodIdentityProvisioningErrorBody_status_unrolledGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled{}), generators)

	return managedClusterPodIdentityProvisioningErrorBody_status_unrolledGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_Status_Unrolled(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}
