// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedCluster_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedCluster_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedCluster_STATUS_ARM, ManagedCluster_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedCluster_STATUS_ARM runs a test to see if a specific instance of ManagedCluster_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedCluster_STATUS_ARM(subject ManagedCluster_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedCluster_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedCluster_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedCluster_STATUS_ARMGenerator()
var managedCluster_STATUS_ARMGenerator gopter.Gen

// ManagedCluster_STATUS_ARMGenerator returns a generator of ManagedCluster_STATUS_ARM instances for property testing.
// We first initialize managedCluster_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedCluster_STATUS_ARMGenerator() gopter.Gen {
	if managedCluster_STATUS_ARMGenerator != nil {
		return managedCluster_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedCluster_STATUS_ARM(generators)
	managedCluster_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedCluster_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedCluster_STATUS_ARM(generators)
	managedCluster_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedCluster_STATUS_ARM{}), generators)

	return managedCluster_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedCluster_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedCluster_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedCluster_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedCluster_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Identity"] = gen.PtrOf(ManagedClusterIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(ManagedClusterProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(ManagedClusterSKU_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_ExtendedLocation_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_STATUS_ARM, ExtendedLocation_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_STATUS_ARM runs a test to see if a specific instance of ExtendedLocation_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_STATUS_ARM(subject ExtendedLocation_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUS_ARM instances for property testing - lazily instantiated by
// ExtendedLocation_STATUS_ARMGenerator()
var extendedLocation_STATUS_ARMGenerator gopter.Gen

// ExtendedLocation_STATUS_ARMGenerator returns a generator of ExtendedLocation_STATUS_ARM instances for property testing.
func ExtendedLocation_STATUS_ARMGenerator() gopter.Gen {
	if extendedLocation_STATUS_ARMGenerator != nil {
		return extendedLocation_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_STATUS_ARM(generators)
	extendedLocation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUS_ARM{}), generators)

	return extendedLocation_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_STATUS_EdgeZone))
}

func Test_ManagedClusterIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentity_STATUS_ARM, ManagedClusterIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentity_STATUS_ARM runs a test to see if a specific instance of ManagedClusterIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentity_STATUS_ARM(subject ManagedClusterIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterIdentity_STATUS_ARMGenerator()
var managedClusterIdentity_STATUS_ARMGenerator gopter.Gen

// ManagedClusterIdentity_STATUS_ARMGenerator returns a generator of ManagedClusterIdentity_STATUS_ARM instances for property testing.
// We first initialize managedClusterIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterIdentity_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterIdentity_STATUS_ARMGenerator != nil {
		return managedClusterIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUS_ARM(generators)
	managedClusterIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterIdentity_STATUS_ARM(generators)
	managedClusterIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_STATUS_ARM{}), generators)

	return managedClusterIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ManagedClusterIdentity_Type_STATUS_None, ManagedClusterIdentity_Type_STATUS_SystemAssigned, ManagedClusterIdentity_Type_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedClusterIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator())
}

func Test_ManagedClusterProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterProperties_STATUS_ARM, ManagedClusterProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterProperties_STATUS_ARM runs a test to see if a specific instance of ManagedClusterProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterProperties_STATUS_ARM(subject ManagedClusterProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterProperties_STATUS_ARMGenerator()
var managedClusterProperties_STATUS_ARMGenerator gopter.Gen

// ManagedClusterProperties_STATUS_ARMGenerator returns a generator of ManagedClusterProperties_STATUS_ARM instances for property testing.
// We first initialize managedClusterProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterProperties_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterProperties_STATUS_ARMGenerator != nil {
		return managedClusterProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUS_ARM(generators)
	managedClusterProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterProperties_STATUS_ARM(generators)
	managedClusterProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_STATUS_ARM{}), generators)

	return managedClusterProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AzurePortalFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["CurrentKubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAccounts"] = gen.PtrOf(gen.Bool())
	gens["DiskEncryptionSetID"] = gen.PtrOf(gen.AlphaString())
	gens["DnsPrefix"] = gen.PtrOf(gen.AlphaString())
	gens["EnablePodSecurityPolicy"] = gen.PtrOf(gen.Bool())
	gens["EnableRBAC"] = gen.PtrOf(gen.Bool())
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["FqdnSubdomain"] = gen.PtrOf(gen.AlphaString())
	gens["KubernetesVersion"] = gen.PtrOf(gen.AlphaString())
	gens["MaxAgentPools"] = gen.PtrOf(gen.Int())
	gens["NodeResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateFQDN"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(ManagedClusterProperties_PublicNetworkAccess_STATUS_Disabled, ManagedClusterProperties_PublicNetworkAccess_STATUS_Enabled))
}

// AddRelatedPropertyGeneratorsForManagedClusterProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AadProfile"] = gen.PtrOf(ManagedClusterAADProfile_STATUS_ARMGenerator())
	gens["AddonProfiles"] = gen.MapOf(gen.AlphaString(), ManagedClusterAddonProfile_STATUS_ARMGenerator())
	gens["AgentPoolProfiles"] = gen.SliceOf(ManagedClusterAgentPoolProfile_STATUS_ARMGenerator())
	gens["ApiServerAccessProfile"] = gen.PtrOf(ManagedClusterAPIServerAccessProfile_STATUS_ARMGenerator())
	gens["AutoScalerProfile"] = gen.PtrOf(ManagedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator())
	gens["AutoUpgradeProfile"] = gen.PtrOf(ManagedClusterAutoUpgradeProfile_STATUS_ARMGenerator())
	gens["AzureMonitorProfile"] = gen.PtrOf(ManagedClusterAzureMonitorProfile_STATUS_ARMGenerator())
	gens["HttpProxyConfig"] = gen.PtrOf(ManagedClusterHTTPProxyConfig_STATUS_ARMGenerator())
	gens["IdentityProfile"] = gen.MapOf(gen.AlphaString(), UserAssignedIdentity_STATUS_ARMGenerator())
	gens["LinuxProfile"] = gen.PtrOf(ContainerServiceLinuxProfile_STATUS_ARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(ContainerServiceNetworkProfile_STATUS_ARMGenerator())
	gens["OidcIssuerProfile"] = gen.PtrOf(ManagedClusterOIDCIssuerProfile_STATUS_ARMGenerator())
	gens["PodIdentityProfile"] = gen.PtrOf(ManagedClusterPodIdentityProfile_STATUS_ARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerState_STATUS_ARMGenerator())
	gens["PrivateLinkResources"] = gen.SliceOf(PrivateLinkResource_STATUS_ARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(ManagedClusterSecurityProfile_STATUS_ARMGenerator())
	gens["ServicePrincipalProfile"] = gen.PtrOf(ManagedClusterServicePrincipalProfile_STATUS_ARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(ManagedClusterStorageProfile_STATUS_ARMGenerator())
	gens["WindowsProfile"] = gen.PtrOf(ManagedClusterWindowsProfile_STATUS_ARMGenerator())
	gens["WorkloadAutoScalerProfile"] = gen.PtrOf(ManagedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator())
}

func Test_ManagedClusterSKU_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSKU_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSKU_STATUS_ARM, ManagedClusterSKU_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSKU_STATUS_ARM runs a test to see if a specific instance of ManagedClusterSKU_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSKU_STATUS_ARM(subject ManagedClusterSKU_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSKU_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSKU_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterSKU_STATUS_ARMGenerator()
var managedClusterSKU_STATUS_ARMGenerator gopter.Gen

// ManagedClusterSKU_STATUS_ARMGenerator returns a generator of ManagedClusterSKU_STATUS_ARM instances for property testing.
func ManagedClusterSKU_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterSKU_STATUS_ARMGenerator != nil {
		return managedClusterSKU_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSKU_STATUS_ARM(generators)
	managedClusterSKU_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSKU_STATUS_ARM{}), generators)

	return managedClusterSKU_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSKU_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSKU_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKU_Name_STATUS_Base))
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(ManagedClusterSKU_Tier_STATUS_Free, ManagedClusterSKU_Tier_STATUS_Standard))
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}

func Test_ContainerServiceLinuxProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceLinuxProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceLinuxProfile_STATUS_ARM, ContainerServiceLinuxProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceLinuxProfile_STATUS_ARM runs a test to see if a specific instance of ContainerServiceLinuxProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceLinuxProfile_STATUS_ARM(subject ContainerServiceLinuxProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceLinuxProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceLinuxProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerServiceLinuxProfile_STATUS_ARMGenerator()
var containerServiceLinuxProfile_STATUS_ARMGenerator gopter.Gen

// ContainerServiceLinuxProfile_STATUS_ARMGenerator returns a generator of ContainerServiceLinuxProfile_STATUS_ARM instances for property testing.
// We first initialize containerServiceLinuxProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceLinuxProfile_STATUS_ARMGenerator() gopter.Gen {
	if containerServiceLinuxProfile_STATUS_ARMGenerator != nil {
		return containerServiceLinuxProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_STATUS_ARM(generators)
	containerServiceLinuxProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_STATUS_ARM(generators)
	containerServiceLinuxProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceLinuxProfile_STATUS_ARM{}), generators)

	return containerServiceLinuxProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceLinuxProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceLinuxProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Ssh"] = gen.PtrOf(ContainerServiceSshConfiguration_STATUS_ARMGenerator())
}

func Test_ContainerServiceNetworkProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceNetworkProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceNetworkProfile_STATUS_ARM, ContainerServiceNetworkProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceNetworkProfile_STATUS_ARM runs a test to see if a specific instance of ContainerServiceNetworkProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceNetworkProfile_STATUS_ARM(subject ContainerServiceNetworkProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceNetworkProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceNetworkProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerServiceNetworkProfile_STATUS_ARMGenerator()
var containerServiceNetworkProfile_STATUS_ARMGenerator gopter.Gen

// ContainerServiceNetworkProfile_STATUS_ARMGenerator returns a generator of ContainerServiceNetworkProfile_STATUS_ARM instances for property testing.
// We first initialize containerServiceNetworkProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerServiceNetworkProfile_STATUS_ARMGenerator() gopter.Gen {
	if containerServiceNetworkProfile_STATUS_ARMGenerator != nil {
		return containerServiceNetworkProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_STATUS_ARM(generators)
	containerServiceNetworkProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_STATUS_ARM(generators)
	containerServiceNetworkProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceNetworkProfile_STATUS_ARM{}), generators)

	return containerServiceNetworkProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceNetworkProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DnsServiceIP"] = gen.PtrOf(gen.AlphaString())
	gens["DockerBridgeCidr"] = gen.PtrOf(gen.AlphaString())
	gens["IpFamilies"] = gen.SliceOf(gen.OneConstOf(ContainerServiceNetworkProfile_IpFamilies_STATUS_IPv4, ContainerServiceNetworkProfile_IpFamilies_STATUS_IPv6))
	gens["LoadBalancerSku"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_LoadBalancerSku_STATUS_Basic, ContainerServiceNetworkProfile_LoadBalancerSku_STATUS_Standard))
	gens["NetworkDataplane"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_NetworkDataplane_STATUS_Azure, ContainerServiceNetworkProfile_NetworkDataplane_STATUS_Cilium))
	gens["NetworkMode"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_NetworkMode_STATUS_Bridge, ContainerServiceNetworkProfile_NetworkMode_STATUS_Transparent))
	gens["NetworkPlugin"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_NetworkPlugin_STATUS_Azure, ContainerServiceNetworkProfile_NetworkPlugin_STATUS_Kubenet, ContainerServiceNetworkProfile_NetworkPlugin_STATUS_None))
	gens["NetworkPluginMode"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_NetworkPluginMode_STATUS_Overlay))
	gens["NetworkPolicy"] = gen.PtrOf(gen.OneConstOf(ContainerServiceNetworkProfile_NetworkPolicy_STATUS_Azure, ContainerServiceNetworkProfile_NetworkPolicy_STATUS_Calico, ContainerServiceNetworkProfile_NetworkPolicy_STATUS_Cilium))
	gens["OutboundType"] = gen.PtrOf(gen.OneConstOf(
		ContainerServiceNetworkProfile_OutboundType_STATUS_LoadBalancer,
		ContainerServiceNetworkProfile_OutboundType_STATUS_ManagedNATGateway,
		ContainerServiceNetworkProfile_OutboundType_STATUS_UserAssignedNATGateway,
		ContainerServiceNetworkProfile_OutboundType_STATUS_UserDefinedRouting))
	gens["PodCidr"] = gen.PtrOf(gen.AlphaString())
	gens["PodCidrs"] = gen.SliceOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidrs"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceNetworkProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LoadBalancerProfile"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_STATUS_ARMGenerator())
	gens["NatGatewayProfile"] = gen.PtrOf(ManagedClusterNATGatewayProfile_STATUS_ARMGenerator())
}

func Test_ManagedClusterAADProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAADProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAADProfile_STATUS_ARM, ManagedClusterAADProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAADProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterAADProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAADProfile_STATUS_ARM(subject ManagedClusterAADProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAADProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAADProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterAADProfile_STATUS_ARMGenerator()
var managedClusterAADProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterAADProfile_STATUS_ARMGenerator returns a generator of ManagedClusterAADProfile_STATUS_ARM instances for property testing.
func ManagedClusterAADProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterAADProfile_STATUS_ARMGenerator != nil {
		return managedClusterAADProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAADProfile_STATUS_ARM(generators)
	managedClusterAADProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAADProfile_STATUS_ARM{}), generators)

	return managedClusterAADProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAADProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAADProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdminGroupObjectIDs"] = gen.SliceOf(gen.AlphaString())
	gens["ClientAppID"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAzureRBAC"] = gen.PtrOf(gen.Bool())
	gens["Managed"] = gen.PtrOf(gen.Bool())
	gens["ServerAppID"] = gen.PtrOf(gen.AlphaString())
	gens["ServerAppSecret"] = gen.PtrOf(gen.AlphaString())
	gens["TenantID"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAddonProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAddonProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAddonProfile_STATUS_ARM, ManagedClusterAddonProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAddonProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterAddonProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAddonProfile_STATUS_ARM(subject ManagedClusterAddonProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAddonProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAddonProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterAddonProfile_STATUS_ARMGenerator()
var managedClusterAddonProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterAddonProfile_STATUS_ARMGenerator returns a generator of ManagedClusterAddonProfile_STATUS_ARM instances for property testing.
// We first initialize managedClusterAddonProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAddonProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterAddonProfile_STATUS_ARMGenerator != nil {
		return managedClusterAddonProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAddonProfile_STATUS_ARM(generators)
	managedClusterAddonProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAddonProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAddonProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAddonProfile_STATUS_ARM(generators)
	managedClusterAddonProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAddonProfile_STATUS_ARM{}), generators)

	return managedClusterAddonProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAddonProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAddonProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Config"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedClusterAddonProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAddonProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(UserAssignedIdentity_STATUS_ARMGenerator())
}

func Test_ManagedClusterAgentPoolProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAgentPoolProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAgentPoolProfile_STATUS_ARM, ManagedClusterAgentPoolProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAgentPoolProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterAgentPoolProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAgentPoolProfile_STATUS_ARM(subject ManagedClusterAgentPoolProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAgentPoolProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAgentPoolProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterAgentPoolProfile_STATUS_ARMGenerator()
var managedClusterAgentPoolProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterAgentPoolProfile_STATUS_ARMGenerator returns a generator of ManagedClusterAgentPoolProfile_STATUS_ARM instances for property testing.
// We first initialize managedClusterAgentPoolProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAgentPoolProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterAgentPoolProfile_STATUS_ARMGenerator != nil {
		return managedClusterAgentPoolProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUS_ARM(generators)
	managedClusterAgentPoolProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUS_ARM(generators)
	managedClusterAgentPoolProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAgentPoolProfile_STATUS_ARM{}), generators)

	return managedClusterAgentPoolProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AvailabilityZones"] = gen.SliceOf(gen.AlphaString())
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["CurrentOrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["EnableAutoScaling"] = gen.PtrOf(gen.Bool())
	gens["EnableEncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["EnableFIPS"] = gen.PtrOf(gen.Bool())
	gens["EnableNodePublicIP"] = gen.PtrOf(gen.Bool())
	gens["EnableUltraSSD"] = gen.PtrOf(gen.Bool())
	gens["GpuInstanceProfile"] = gen.PtrOf(gen.OneConstOf(
		GPUInstanceProfile_STATUS_MIG1G,
		GPUInstanceProfile_STATUS_MIG2G,
		GPUInstanceProfile_STATUS_MIG3G,
		GPUInstanceProfile_STATUS_MIG4G,
		GPUInstanceProfile_STATUS_MIG7G))
	gens["HostGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["KubeletDiskType"] = gen.PtrOf(gen.OneConstOf(KubeletDiskType_STATUS_OS, KubeletDiskType_STATUS_Temporary))
	gens["MaxCount"] = gen.PtrOf(gen.Int())
	gens["MaxPods"] = gen.PtrOf(gen.Int())
	gens["MinCount"] = gen.PtrOf(gen.Int())
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(AgentPoolMode_STATUS_System, AgentPoolMode_STATUS_User))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NodeImageVersion"] = gen.PtrOf(gen.AlphaString())
	gens["NodeLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["NodePublicIPPrefixID"] = gen.PtrOf(gen.AlphaString())
	gens["NodeTaints"] = gen.SliceOf(gen.AlphaString())
	gens["OrchestratorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["OsDiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["OsDiskType"] = gen.PtrOf(gen.OneConstOf(OSDiskType_STATUS_Ephemeral, OSDiskType_STATUS_Managed))
	gens["OsSKU"] = gen.PtrOf(gen.OneConstOf(
		OSSKU_STATUS_CBLMariner,
		OSSKU_STATUS_Ubuntu,
		OSSKU_STATUS_Windows2019,
		OSSKU_STATUS_Windows2022))
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(OSType_STATUS_Linux, OSType_STATUS_Windows))
	gens["PodSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ProximityPlacementGroupID"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownMode"] = gen.PtrOf(gen.OneConstOf(ScaleDownMode_STATUS_Deallocate, ScaleDownMode_STATUS_Delete))
	gens["ScaleSetEvictionPolicy"] = gen.PtrOf(gen.OneConstOf(ScaleSetEvictionPolicy_STATUS_Deallocate, ScaleSetEvictionPolicy_STATUS_Delete))
	gens["ScaleSetPriority"] = gen.PtrOf(gen.OneConstOf(ScaleSetPriority_STATUS_Regular, ScaleSetPriority_STATUS_Spot))
	gens["SpotMaxPrice"] = gen.PtrOf(gen.Float64())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(AgentPoolType_STATUS_AvailabilitySet, AgentPoolType_STATUS_VirtualMachineScaleSets))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
	gens["VnetSubnetID"] = gen.PtrOf(gen.AlphaString())
	gens["WorkloadRuntime"] = gen.PtrOf(gen.OneConstOf(WorkloadRuntime_STATUS_OCIContainer, WorkloadRuntime_STATUS_WasmWasi))
}

// AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAgentPoolProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreationData"] = gen.PtrOf(CreationData_STATUS_ARMGenerator())
	gens["KubeletConfig"] = gen.PtrOf(KubeletConfig_STATUS_ARMGenerator())
	gens["LinuxOSConfig"] = gen.PtrOf(LinuxOSConfig_STATUS_ARMGenerator())
	gens["PowerState"] = gen.PtrOf(PowerState_STATUS_ARMGenerator())
	gens["UpgradeSettings"] = gen.PtrOf(AgentPoolUpgradeSettings_STATUS_ARMGenerator())
}

func Test_ManagedClusterAPIServerAccessProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAPIServerAccessProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_STATUS_ARM, ManagedClusterAPIServerAccessProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterAPIServerAccessProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAPIServerAccessProfile_STATUS_ARM(subject ManagedClusterAPIServerAccessProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAPIServerAccessProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAPIServerAccessProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterAPIServerAccessProfile_STATUS_ARMGenerator()
var managedClusterAPIServerAccessProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterAPIServerAccessProfile_STATUS_ARMGenerator returns a generator of ManagedClusterAPIServerAccessProfile_STATUS_ARM instances for property testing.
func ManagedClusterAPIServerAccessProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterAPIServerAccessProfile_STATUS_ARMGenerator != nil {
		return managedClusterAPIServerAccessProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_STATUS_ARM(generators)
	managedClusterAPIServerAccessProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAPIServerAccessProfile_STATUS_ARM{}), generators)

	return managedClusterAPIServerAccessProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAPIServerAccessProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthorizedIPRanges"] = gen.SliceOf(gen.AlphaString())
	gens["DisableRunCommand"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateCluster"] = gen.PtrOf(gen.Bool())
	gens["EnablePrivateClusterPublicFQDN"] = gen.PtrOf(gen.Bool())
	gens["PrivateDNSZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAutoUpgradeProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAutoUpgradeProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_STATUS_ARM, ManagedClusterAutoUpgradeProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterAutoUpgradeProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAutoUpgradeProfile_STATUS_ARM(subject ManagedClusterAutoUpgradeProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAutoUpgradeProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAutoUpgradeProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterAutoUpgradeProfile_STATUS_ARMGenerator()
var managedClusterAutoUpgradeProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterAutoUpgradeProfile_STATUS_ARMGenerator returns a generator of ManagedClusterAutoUpgradeProfile_STATUS_ARM instances for property testing.
func ManagedClusterAutoUpgradeProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterAutoUpgradeProfile_STATUS_ARMGenerator != nil {
		return managedClusterAutoUpgradeProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_STATUS_ARM(generators)
	managedClusterAutoUpgradeProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAutoUpgradeProfile_STATUS_ARM{}), generators)

	return managedClusterAutoUpgradeProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAutoUpgradeProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UpgradeChannel"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_STATUS_NodeImage,
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_STATUS_None,
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_STATUS_Patch,
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_STATUS_Rapid,
		ManagedClusterAutoUpgradeProfile_UpgradeChannel_STATUS_Stable))
}

func Test_ManagedClusterAzureMonitorProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAzureMonitorProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAzureMonitorProfile_STATUS_ARM, ManagedClusterAzureMonitorProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAzureMonitorProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterAzureMonitorProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAzureMonitorProfile_STATUS_ARM(subject ManagedClusterAzureMonitorProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAzureMonitorProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAzureMonitorProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterAzureMonitorProfile_STATUS_ARMGenerator()
var managedClusterAzureMonitorProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterAzureMonitorProfile_STATUS_ARMGenerator returns a generator of ManagedClusterAzureMonitorProfile_STATUS_ARM instances for property testing.
func ManagedClusterAzureMonitorProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterAzureMonitorProfile_STATUS_ARMGenerator != nil {
		return managedClusterAzureMonitorProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterAzureMonitorProfile_STATUS_ARM(generators)
	managedClusterAzureMonitorProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAzureMonitorProfile_STATUS_ARM{}), generators)

	return managedClusterAzureMonitorProfile_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterAzureMonitorProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAzureMonitorProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Metrics"] = gen.PtrOf(ManagedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator())
}

func Test_ManagedClusterHTTPProxyConfig_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterHTTPProxyConfig_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterHTTPProxyConfig_STATUS_ARM, ManagedClusterHTTPProxyConfig_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterHTTPProxyConfig_STATUS_ARM runs a test to see if a specific instance of ManagedClusterHTTPProxyConfig_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterHTTPProxyConfig_STATUS_ARM(subject ManagedClusterHTTPProxyConfig_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterHTTPProxyConfig_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterHTTPProxyConfig_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterHTTPProxyConfig_STATUS_ARMGenerator()
var managedClusterHTTPProxyConfig_STATUS_ARMGenerator gopter.Gen

// ManagedClusterHTTPProxyConfig_STATUS_ARMGenerator returns a generator of ManagedClusterHTTPProxyConfig_STATUS_ARM instances for property testing.
func ManagedClusterHTTPProxyConfig_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterHTTPProxyConfig_STATUS_ARMGenerator != nil {
		return managedClusterHTTPProxyConfig_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_STATUS_ARM(generators)
	managedClusterHTTPProxyConfig_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterHTTPProxyConfig_STATUS_ARM{}), generators)

	return managedClusterHTTPProxyConfig_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterHTTPProxyConfig_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HttpProxy"] = gen.PtrOf(gen.AlphaString())
	gens["HttpsProxy"] = gen.PtrOf(gen.AlphaString())
	gens["NoProxy"] = gen.SliceOf(gen.AlphaString())
	gens["TrustedCa"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM, ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM runs a test to see if a specific instance of ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM(subject ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator()
var managedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator gopter.Gen

// ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator returns a generator of ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing.
func ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator != nil {
		return managedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM(generators)
	managedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM{}), generators)

	return managedClusterIdentity_UserAssignedIdentities_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterIdentity_UserAssignedIdentities_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterOIDCIssuerProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterOIDCIssuerProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterOIDCIssuerProfile_STATUS_ARM, ManagedClusterOIDCIssuerProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterOIDCIssuerProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterOIDCIssuerProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterOIDCIssuerProfile_STATUS_ARM(subject ManagedClusterOIDCIssuerProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterOIDCIssuerProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterOIDCIssuerProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterOIDCIssuerProfile_STATUS_ARMGenerator()
var managedClusterOIDCIssuerProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterOIDCIssuerProfile_STATUS_ARMGenerator returns a generator of ManagedClusterOIDCIssuerProfile_STATUS_ARM instances for property testing.
func ManagedClusterOIDCIssuerProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterOIDCIssuerProfile_STATUS_ARMGenerator != nil {
		return managedClusterOIDCIssuerProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterOIDCIssuerProfile_STATUS_ARM(generators)
	managedClusterOIDCIssuerProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterOIDCIssuerProfile_STATUS_ARM{}), generators)

	return managedClusterOIDCIssuerProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterOIDCIssuerProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterOIDCIssuerProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["IssuerURL"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProfile_STATUS_ARM, ManagedClusterPodIdentityProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterPodIdentityProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProfile_STATUS_ARM(subject ManagedClusterPodIdentityProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentityProfile_STATUS_ARMGenerator()
var managedClusterPodIdentityProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterPodIdentityProfile_STATUS_ARMGenerator returns a generator of ManagedClusterPodIdentityProfile_STATUS_ARM instances for property testing.
// We first initialize managedClusterPodIdentityProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProfile_STATUS_ARMGenerator != nil {
		return managedClusterPodIdentityProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUS_ARM(generators)
	managedClusterPodIdentityProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUS_ARM(generators)
	managedClusterPodIdentityProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProfile_STATUS_ARM{}), generators)

	return managedClusterPodIdentityProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowNetworkPluginKubenet"] = gen.PtrOf(gen.Bool())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.SliceOf(ManagedClusterPodIdentity_STATUS_ARMGenerator())
	gens["UserAssignedIdentityExceptions"] = gen.SliceOf(ManagedClusterPodIdentityException_STATUS_ARMGenerator())
}

func Test_ManagedClusterProperties_AutoScalerProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterProperties_AutoScalerProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_STATUS_ARM, ManagedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterProperties_AutoScalerProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterProperties_AutoScalerProfile_STATUS_ARM(subject ManagedClusterProperties_AutoScalerProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterProperties_AutoScalerProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterProperties_AutoScalerProfile_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator()
var managedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator returns a generator of ManagedClusterProperties_AutoScalerProfile_STATUS_ARM instances for property testing.
func ManagedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator != nil {
		return managedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_STATUS_ARM(generators)
	managedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterProperties_AutoScalerProfile_STATUS_ARM{}), generators)

	return managedClusterProperties_AutoScalerProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterProperties_AutoScalerProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BalanceSimilarNodeGroups"] = gen.PtrOf(gen.AlphaString())
	gens["Expander"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterProperties_AutoScalerProfile_Expander_STATUS_LeastWaste,
		ManagedClusterProperties_AutoScalerProfile_Expander_STATUS_MostPods,
		ManagedClusterProperties_AutoScalerProfile_Expander_STATUS_Priority,
		ManagedClusterProperties_AutoScalerProfile_Expander_STATUS_Random))
	gens["MaxEmptyBulkDelete"] = gen.PtrOf(gen.AlphaString())
	gens["MaxGracefulTerminationSec"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNodeProvisionTime"] = gen.PtrOf(gen.AlphaString())
	gens["MaxTotalUnreadyPercentage"] = gen.PtrOf(gen.AlphaString())
	gens["NewPodScaleUpDelay"] = gen.PtrOf(gen.AlphaString())
	gens["OkTotalUnreadyCount"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterAdd"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterDelete"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownDelayAfterFailure"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnneededTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUnreadyTime"] = gen.PtrOf(gen.AlphaString())
	gens["ScaleDownUtilizationThreshold"] = gen.PtrOf(gen.AlphaString())
	gens["ScanInterval"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithLocalStorage"] = gen.PtrOf(gen.AlphaString())
	gens["SkipNodesWithSystemPods"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterSecurityProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSecurityProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSecurityProfile_STATUS_ARM, ManagedClusterSecurityProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSecurityProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterSecurityProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSecurityProfile_STATUS_ARM(subject ManagedClusterSecurityProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSecurityProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSecurityProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterSecurityProfile_STATUS_ARMGenerator()
var managedClusterSecurityProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterSecurityProfile_STATUS_ARMGenerator returns a generator of ManagedClusterSecurityProfile_STATUS_ARM instances for property testing.
func ManagedClusterSecurityProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterSecurityProfile_STATUS_ARMGenerator != nil {
		return managedClusterSecurityProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterSecurityProfile_STATUS_ARM(generators)
	managedClusterSecurityProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSecurityProfile_STATUS_ARM{}), generators)

	return managedClusterSecurityProfile_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterSecurityProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterSecurityProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AzureKeyVaultKms"] = gen.PtrOf(AzureKeyVaultKms_STATUS_ARMGenerator())
	gens["Defender"] = gen.PtrOf(ManagedClusterSecurityProfileDefender_STATUS_ARMGenerator())
	gens["ImageCleaner"] = gen.PtrOf(ManagedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator())
	gens["WorkloadIdentity"] = gen.PtrOf(ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator())
}

func Test_ManagedClusterServicePrincipalProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterServicePrincipalProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterServicePrincipalProfile_STATUS_ARM, ManagedClusterServicePrincipalProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterServicePrincipalProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterServicePrincipalProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterServicePrincipalProfile_STATUS_ARM(subject ManagedClusterServicePrincipalProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterServicePrincipalProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterServicePrincipalProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterServicePrincipalProfile_STATUS_ARMGenerator()
var managedClusterServicePrincipalProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterServicePrincipalProfile_STATUS_ARMGenerator returns a generator of ManagedClusterServicePrincipalProfile_STATUS_ARM instances for property testing.
func ManagedClusterServicePrincipalProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterServicePrincipalProfile_STATUS_ARMGenerator != nil {
		return managedClusterServicePrincipalProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_STATUS_ARM(generators)
	managedClusterServicePrincipalProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterServicePrincipalProfile_STATUS_ARM{}), generators)

	return managedClusterServicePrincipalProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterServicePrincipalProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterStorageProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterStorageProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterStorageProfile_STATUS_ARM, ManagedClusterStorageProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterStorageProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterStorageProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterStorageProfile_STATUS_ARM(subject ManagedClusterStorageProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterStorageProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterStorageProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterStorageProfile_STATUS_ARMGenerator()
var managedClusterStorageProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterStorageProfile_STATUS_ARMGenerator returns a generator of ManagedClusterStorageProfile_STATUS_ARM instances for property testing.
func ManagedClusterStorageProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterStorageProfile_STATUS_ARMGenerator != nil {
		return managedClusterStorageProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterStorageProfile_STATUS_ARM(generators)
	managedClusterStorageProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterStorageProfile_STATUS_ARM{}), generators)

	return managedClusterStorageProfile_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterStorageProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterStorageProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BlobCSIDriver"] = gen.PtrOf(ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator())
	gens["DiskCSIDriver"] = gen.PtrOf(ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator())
	gens["FileCSIDriver"] = gen.PtrOf(ManagedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator())
	gens["SnapshotController"] = gen.PtrOf(ManagedClusterStorageProfileSnapshotController_STATUS_ARMGenerator())
}

func Test_ManagedClusterWindowsProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterWindowsProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterWindowsProfile_STATUS_ARM, ManagedClusterWindowsProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterWindowsProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterWindowsProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterWindowsProfile_STATUS_ARM(subject ManagedClusterWindowsProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterWindowsProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterWindowsProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterWindowsProfile_STATUS_ARMGenerator()
var managedClusterWindowsProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterWindowsProfile_STATUS_ARMGenerator returns a generator of ManagedClusterWindowsProfile_STATUS_ARM instances for property testing.
// We first initialize managedClusterWindowsProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterWindowsProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterWindowsProfile_STATUS_ARMGenerator != nil {
		return managedClusterWindowsProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_STATUS_ARM(generators)
	managedClusterWindowsProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWindowsProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterWindowsProfile_STATUS_ARM(generators)
	managedClusterWindowsProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWindowsProfile_STATUS_ARM{}), generators)

	return managedClusterWindowsProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterWindowsProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["EnableCSIProxy"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.OneConstOf(ManagedClusterWindowsProfile_LicenseType_STATUS_None, ManagedClusterWindowsProfile_LicenseType_STATUS_Windows_Server))
}

// AddRelatedPropertyGeneratorsForManagedClusterWindowsProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterWindowsProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["GmsaProfile"] = gen.PtrOf(WindowsGmsaProfile_STATUS_ARMGenerator())
}

func Test_ManagedClusterWorkloadAutoScalerProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterWorkloadAutoScalerProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterWorkloadAutoScalerProfile_STATUS_ARM, ManagedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterWorkloadAutoScalerProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterWorkloadAutoScalerProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterWorkloadAutoScalerProfile_STATUS_ARM(subject ManagedClusterWorkloadAutoScalerProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterWorkloadAutoScalerProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterWorkloadAutoScalerProfile_STATUS_ARM instances for property testing - lazily instantiated
// by ManagedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator()
var managedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator returns a generator of ManagedClusterWorkloadAutoScalerProfile_STATUS_ARM instances for property testing.
func ManagedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator != nil {
		return managedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterWorkloadAutoScalerProfile_STATUS_ARM(generators)
	managedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWorkloadAutoScalerProfile_STATUS_ARM{}), generators)

	return managedClusterWorkloadAutoScalerProfile_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterWorkloadAutoScalerProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterWorkloadAutoScalerProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Keda"] = gen.PtrOf(ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator())
}

func Test_PowerState_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PowerState_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPowerState_STATUS_ARM, PowerState_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPowerState_STATUS_ARM runs a test to see if a specific instance of PowerState_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPowerState_STATUS_ARM(subject PowerState_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PowerState_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PowerState_STATUS_ARM instances for property testing - lazily instantiated by
// PowerState_STATUS_ARMGenerator()
var powerState_STATUS_ARMGenerator gopter.Gen

// PowerState_STATUS_ARMGenerator returns a generator of PowerState_STATUS_ARM instances for property testing.
func PowerState_STATUS_ARMGenerator() gopter.Gen {
	if powerState_STATUS_ARMGenerator != nil {
		return powerState_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPowerState_STATUS_ARM(generators)
	powerState_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PowerState_STATUS_ARM{}), generators)

	return powerState_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPowerState_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPowerState_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.OneConstOf(PowerState_Code_STATUS_Running, PowerState_Code_STATUS_Stopped))
}

func Test_PrivateLinkResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkResource_STATUS_ARM, PrivateLinkResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkResource_STATUS_ARM runs a test to see if a specific instance of PrivateLinkResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkResource_STATUS_ARM(subject PrivateLinkResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkResource_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateLinkResource_STATUS_ARMGenerator()
var privateLinkResource_STATUS_ARMGenerator gopter.Gen

// PrivateLinkResource_STATUS_ARMGenerator returns a generator of PrivateLinkResource_STATUS_ARM instances for property testing.
func PrivateLinkResource_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkResource_STATUS_ARMGenerator != nil {
		return privateLinkResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkResource_STATUS_ARM(generators)
	privateLinkResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkResource_STATUS_ARM{}), generators)

	return privateLinkResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkServiceID"] = gen.PtrOf(gen.AlphaString())
	gens["RequiredMembers"] = gen.SliceOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_STATUS_ARM, UserAssignedIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_STATUS_ARM runs a test to see if a specific instance of UserAssignedIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_STATUS_ARM(subject UserAssignedIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// UserAssignedIdentity_STATUS_ARMGenerator()
var userAssignedIdentity_STATUS_ARMGenerator gopter.Gen

// UserAssignedIdentity_STATUS_ARMGenerator returns a generator of UserAssignedIdentity_STATUS_ARM instances for property testing.
func UserAssignedIdentity_STATUS_ARMGenerator() gopter.Gen {
	if userAssignedIdentity_STATUS_ARMGenerator != nil {
		return userAssignedIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS_ARM(generators)
	userAssignedIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_STATUS_ARM{}), generators)

	return userAssignedIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_AzureKeyVaultKms_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureKeyVaultKms_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureKeyVaultKms_STATUS_ARM, AzureKeyVaultKms_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureKeyVaultKms_STATUS_ARM runs a test to see if a specific instance of AzureKeyVaultKms_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureKeyVaultKms_STATUS_ARM(subject AzureKeyVaultKms_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureKeyVaultKms_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureKeyVaultKms_STATUS_ARM instances for property testing - lazily instantiated by
// AzureKeyVaultKms_STATUS_ARMGenerator()
var azureKeyVaultKms_STATUS_ARMGenerator gopter.Gen

// AzureKeyVaultKms_STATUS_ARMGenerator returns a generator of AzureKeyVaultKms_STATUS_ARM instances for property testing.
func AzureKeyVaultKms_STATUS_ARMGenerator() gopter.Gen {
	if azureKeyVaultKms_STATUS_ARMGenerator != nil {
		return azureKeyVaultKms_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureKeyVaultKms_STATUS_ARM(generators)
	azureKeyVaultKms_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureKeyVaultKms_STATUS_ARM{}), generators)

	return azureKeyVaultKms_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureKeyVaultKms_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureKeyVaultKms_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVaultNetworkAccess"] = gen.PtrOf(gen.OneConstOf(AzureKeyVaultKms_KeyVaultNetworkAccess_STATUS_Private, AzureKeyVaultKms_KeyVaultNetworkAccess_STATUS_Public))
	gens["KeyVaultResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerServiceSshConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshConfiguration_STATUS_ARM, ContainerServiceSshConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshConfiguration_STATUS_ARM runs a test to see if a specific instance of ContainerServiceSshConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshConfiguration_STATUS_ARM(subject ContainerServiceSshConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerServiceSshConfiguration_STATUS_ARMGenerator()
var containerServiceSshConfiguration_STATUS_ARMGenerator gopter.Gen

// ContainerServiceSshConfiguration_STATUS_ARMGenerator returns a generator of ContainerServiceSshConfiguration_STATUS_ARM instances for property testing.
func ContainerServiceSshConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if containerServiceSshConfiguration_STATUS_ARMGenerator != nil {
		return containerServiceSshConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_STATUS_ARM(generators)
	containerServiceSshConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshConfiguration_STATUS_ARM{}), generators)

	return containerServiceSshConfiguration_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerServiceSshConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PublicKeys"] = gen.SliceOf(ContainerServiceSshPublicKey_STATUS_ARMGenerator())
}

func Test_ManagedClusterAzureMonitorProfileMetrics_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAzureMonitorProfileMetrics_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM, ManagedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM runs a test to see if a specific instance of ManagedClusterAzureMonitorProfileMetrics_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM(subject ManagedClusterAzureMonitorProfileMetrics_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAzureMonitorProfileMetrics_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAzureMonitorProfileMetrics_STATUS_ARM instances for property testing - lazily instantiated
// by ManagedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator()
var managedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator gopter.Gen

// ManagedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator returns a generator of ManagedClusterAzureMonitorProfileMetrics_STATUS_ARM instances for property testing.
// We first initialize managedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator != nil {
		return managedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM(generators)
	managedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAzureMonitorProfileMetrics_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM(generators)
	managedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAzureMonitorProfileMetrics_STATUS_ARM{}), generators)

	return managedClusterAzureMonitorProfileMetrics_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterAzureMonitorProfileMetrics_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["KubeStateMetrics"] = gen.PtrOf(ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_ARM, ManagedClusterLoadBalancerProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_STATUS_ARM(subject ManagedClusterLoadBalancerProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterLoadBalancerProfile_STATUS_ARMGenerator()
var managedClusterLoadBalancerProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_STATUS_ARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_STATUS_ARM instances for property testing.
// We first initialize managedClusterLoadBalancerProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterLoadBalancerProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_STATUS_ARMGenerator != nil {
		return managedClusterLoadBalancerProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ARM(generators)
	managedClusterLoadBalancerProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ARM(generators)
	managedClusterLoadBalancerProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_STATUS_ARM{}), generators)

	return managedClusterLoadBalancerProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllocatedOutboundPorts"] = gen.PtrOf(gen.Int())
	gens["EnableMultipleStandardLoadBalancers"] = gen.PtrOf(gen.Bool())
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EffectiveOutboundIPs"] = gen.SliceOf(ResourceReference_STATUS_ARMGenerator())
	gens["ManagedOutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator())
	gens["OutboundIPPrefixes"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator())
	gens["OutboundIPs"] = gen.PtrOf(ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator())
}

func Test_ManagedClusterNATGatewayProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterNATGatewayProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterNATGatewayProfile_STATUS_ARM, ManagedClusterNATGatewayProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterNATGatewayProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterNATGatewayProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterNATGatewayProfile_STATUS_ARM(subject ManagedClusterNATGatewayProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterNATGatewayProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterNATGatewayProfile_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterNATGatewayProfile_STATUS_ARMGenerator()
var managedClusterNATGatewayProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterNATGatewayProfile_STATUS_ARMGenerator returns a generator of ManagedClusterNATGatewayProfile_STATUS_ARM instances for property testing.
// We first initialize managedClusterNATGatewayProfile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterNATGatewayProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterNATGatewayProfile_STATUS_ARMGenerator != nil {
		return managedClusterNATGatewayProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterNATGatewayProfile_STATUS_ARM(generators)
	managedClusterNATGatewayProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterNATGatewayProfile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterNATGatewayProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterNATGatewayProfile_STATUS_ARM(generators)
	managedClusterNATGatewayProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterNATGatewayProfile_STATUS_ARM{}), generators)

	return managedClusterNATGatewayProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterNATGatewayProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterNATGatewayProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForManagedClusterNATGatewayProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterNATGatewayProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EffectiveOutboundIPs"] = gen.SliceOf(ResourceReference_STATUS_ARMGenerator())
	gens["ManagedOutboundIPProfile"] = gen.PtrOf(ManagedClusterManagedOutboundIPProfile_STATUS_ARMGenerator())
}

func Test_ManagedClusterPodIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentity_STATUS_ARM, ManagedClusterPodIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentity_STATUS_ARM runs a test to see if a specific instance of ManagedClusterPodIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentity_STATUS_ARM(subject ManagedClusterPodIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentity_STATUS_ARMGenerator()
var managedClusterPodIdentity_STATUS_ARMGenerator gopter.Gen

// ManagedClusterPodIdentity_STATUS_ARMGenerator returns a generator of ManagedClusterPodIdentity_STATUS_ARM instances for property testing.
// We first initialize managedClusterPodIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentity_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterPodIdentity_STATUS_ARMGenerator != nil {
		return managedClusterPodIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ARM(generators)
	managedClusterPodIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ARM(generators)
	managedClusterPodIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_STATUS_ARM{}), generators)

	return managedClusterPodIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BindingSelector"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ManagedClusterPodIdentity_ProvisioningState_STATUS_Assigned,
		ManagedClusterPodIdentity_ProvisioningState_STATUS_Canceled,
		ManagedClusterPodIdentity_ProvisioningState_STATUS_Deleting,
		ManagedClusterPodIdentity_ProvisioningState_STATUS_Failed,
		ManagedClusterPodIdentity_ProvisioningState_STATUS_Succeeded,
		ManagedClusterPodIdentity_ProvisioningState_STATUS_Updating))
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(UserAssignedIdentity_STATUS_ARMGenerator())
	gens["ProvisioningInfo"] = gen.PtrOf(ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator())
}

func Test_ManagedClusterPodIdentityException_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityException_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityException_STATUS_ARM, ManagedClusterPodIdentityException_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityException_STATUS_ARM runs a test to see if a specific instance of ManagedClusterPodIdentityException_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityException_STATUS_ARM(subject ManagedClusterPodIdentityException_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityException_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityException_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterPodIdentityException_STATUS_ARMGenerator()
var managedClusterPodIdentityException_STATUS_ARMGenerator gopter.Gen

// ManagedClusterPodIdentityException_STATUS_ARMGenerator returns a generator of ManagedClusterPodIdentityException_STATUS_ARM instances for property testing.
func ManagedClusterPodIdentityException_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterPodIdentityException_STATUS_ARMGenerator != nil {
		return managedClusterPodIdentityException_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_STATUS_ARM(generators)
	managedClusterPodIdentityException_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityException_STATUS_ARM{}), generators)

	return managedClusterPodIdentityException_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityException_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["PodLabels"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_ManagedClusterSecurityProfileDefender_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSecurityProfileDefender_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSecurityProfileDefender_STATUS_ARM, ManagedClusterSecurityProfileDefender_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSecurityProfileDefender_STATUS_ARM runs a test to see if a specific instance of ManagedClusterSecurityProfileDefender_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSecurityProfileDefender_STATUS_ARM(subject ManagedClusterSecurityProfileDefender_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSecurityProfileDefender_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSecurityProfileDefender_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedClusterSecurityProfileDefender_STATUS_ARMGenerator()
var managedClusterSecurityProfileDefender_STATUS_ARMGenerator gopter.Gen

// ManagedClusterSecurityProfileDefender_STATUS_ARMGenerator returns a generator of ManagedClusterSecurityProfileDefender_STATUS_ARM instances for property testing.
// We first initialize managedClusterSecurityProfileDefender_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterSecurityProfileDefender_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterSecurityProfileDefender_STATUS_ARMGenerator != nil {
		return managedClusterSecurityProfileDefender_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileDefender_STATUS_ARM(generators)
	managedClusterSecurityProfileDefender_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSecurityProfileDefender_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileDefender_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterSecurityProfileDefender_STATUS_ARM(generators)
	managedClusterSecurityProfileDefender_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSecurityProfileDefender_STATUS_ARM{}), generators)

	return managedClusterSecurityProfileDefender_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileDefender_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileDefender_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LogAnalyticsWorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterSecurityProfileDefender_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterSecurityProfileDefender_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["SecurityMonitoring"] = gen.PtrOf(ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator())
}

func Test_ManagedClusterSecurityProfileImageCleaner_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSecurityProfileImageCleaner_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSecurityProfileImageCleaner_STATUS_ARM, ManagedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSecurityProfileImageCleaner_STATUS_ARM runs a test to see if a specific instance of ManagedClusterSecurityProfileImageCleaner_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSecurityProfileImageCleaner_STATUS_ARM(subject ManagedClusterSecurityProfileImageCleaner_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSecurityProfileImageCleaner_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSecurityProfileImageCleaner_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator()
var managedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator gopter.Gen

// ManagedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator returns a generator of ManagedClusterSecurityProfileImageCleaner_STATUS_ARM instances for property testing.
func ManagedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator != nil {
		return managedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileImageCleaner_STATUS_ARM(generators)
	managedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSecurityProfileImageCleaner_STATUS_ARM{}), generators)

	return managedClusterSecurityProfileImageCleaner_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileImageCleaner_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileImageCleaner_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["IntervalHours"] = gen.PtrOf(gen.Int())
}

func Test_ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM, ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM runs a test to see if a specific instance of ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM(subject ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator()
var managedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator gopter.Gen

// ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator returns a generator of ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM instances for property testing.
func ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator != nil {
		return managedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM(generators)
	managedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM{}), generators)

	return managedClusterSecurityProfileWorkloadIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileWorkloadIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM, ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM runs a test to see if a specific instance of ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM(subject ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator()
var managedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator gopter.Gen

// ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator returns a generator of ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM instances for property testing.
func ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator != nil {
		return managedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM(generators)
	managedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM{}), generators)

	return managedClusterStorageProfileBlobCSIDriver_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterStorageProfileBlobCSIDriver_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM, ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM runs a test to see if a specific instance of ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM(subject ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator()
var managedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator gopter.Gen

// ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator returns a generator of ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM instances for property testing.
func ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator != nil {
		return managedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM(generators)
	managedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM{}), generators)

	return managedClusterStorageProfileDiskCSIDriver_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterStorageProfileDiskCSIDriver_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_ManagedClusterStorageProfileFileCSIDriver_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterStorageProfileFileCSIDriver_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterStorageProfileFileCSIDriver_STATUS_ARM, ManagedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterStorageProfileFileCSIDriver_STATUS_ARM runs a test to see if a specific instance of ManagedClusterStorageProfileFileCSIDriver_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterStorageProfileFileCSIDriver_STATUS_ARM(subject ManagedClusterStorageProfileFileCSIDriver_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterStorageProfileFileCSIDriver_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterStorageProfileFileCSIDriver_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator()
var managedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator gopter.Gen

// ManagedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator returns a generator of ManagedClusterStorageProfileFileCSIDriver_STATUS_ARM instances for property testing.
func ManagedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator != nil {
		return managedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterStorageProfileFileCSIDriver_STATUS_ARM(generators)
	managedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterStorageProfileFileCSIDriver_STATUS_ARM{}), generators)

	return managedClusterStorageProfileFileCSIDriver_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterStorageProfileFileCSIDriver_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterStorageProfileFileCSIDriver_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_ManagedClusterStorageProfileSnapshotController_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterStorageProfileSnapshotController_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterStorageProfileSnapshotController_STATUS_ARM, ManagedClusterStorageProfileSnapshotController_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterStorageProfileSnapshotController_STATUS_ARM runs a test to see if a specific instance of ManagedClusterStorageProfileSnapshotController_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterStorageProfileSnapshotController_STATUS_ARM(subject ManagedClusterStorageProfileSnapshotController_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterStorageProfileSnapshotController_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterStorageProfileSnapshotController_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterStorageProfileSnapshotController_STATUS_ARMGenerator()
var managedClusterStorageProfileSnapshotController_STATUS_ARMGenerator gopter.Gen

// ManagedClusterStorageProfileSnapshotController_STATUS_ARMGenerator returns a generator of ManagedClusterStorageProfileSnapshotController_STATUS_ARM instances for property testing.
func ManagedClusterStorageProfileSnapshotController_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterStorageProfileSnapshotController_STATUS_ARMGenerator != nil {
		return managedClusterStorageProfileSnapshotController_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterStorageProfileSnapshotController_STATUS_ARM(generators)
	managedClusterStorageProfileSnapshotController_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterStorageProfileSnapshotController_STATUS_ARM{}), generators)

	return managedClusterStorageProfileSnapshotController_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterStorageProfileSnapshotController_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterStorageProfileSnapshotController_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM, ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM runs a test to see if a specific instance of ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM(subject ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator()
var managedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator gopter.Gen

// ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator returns a generator of ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM instances for property testing.
func ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator != nil {
		return managedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM(generators)
	managedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM{}), generators)

	return managedClusterWorkloadAutoScalerProfileKeda_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterWorkloadAutoScalerProfileKeda_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_WindowsGmsaProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WindowsGmsaProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWindowsGmsaProfile_STATUS_ARM, WindowsGmsaProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWindowsGmsaProfile_STATUS_ARM runs a test to see if a specific instance of WindowsGmsaProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWindowsGmsaProfile_STATUS_ARM(subject WindowsGmsaProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WindowsGmsaProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WindowsGmsaProfile_STATUS_ARM instances for property testing - lazily instantiated by
// WindowsGmsaProfile_STATUS_ARMGenerator()
var windowsGmsaProfile_STATUS_ARMGenerator gopter.Gen

// WindowsGmsaProfile_STATUS_ARMGenerator returns a generator of WindowsGmsaProfile_STATUS_ARM instances for property testing.
func WindowsGmsaProfile_STATUS_ARMGenerator() gopter.Gen {
	if windowsGmsaProfile_STATUS_ARMGenerator != nil {
		return windowsGmsaProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWindowsGmsaProfile_STATUS_ARM(generators)
	windowsGmsaProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WindowsGmsaProfile_STATUS_ARM{}), generators)

	return windowsGmsaProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWindowsGmsaProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWindowsGmsaProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DnsServer"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["RootDomainName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerServiceSshPublicKey_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerServiceSshPublicKey_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerServiceSshPublicKey_STATUS_ARM, ContainerServiceSshPublicKey_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerServiceSshPublicKey_STATUS_ARM runs a test to see if a specific instance of ContainerServiceSshPublicKey_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerServiceSshPublicKey_STATUS_ARM(subject ContainerServiceSshPublicKey_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerServiceSshPublicKey_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerServiceSshPublicKey_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerServiceSshPublicKey_STATUS_ARMGenerator()
var containerServiceSshPublicKey_STATUS_ARMGenerator gopter.Gen

// ContainerServiceSshPublicKey_STATUS_ARMGenerator returns a generator of ContainerServiceSshPublicKey_STATUS_ARM instances for property testing.
func ContainerServiceSshPublicKey_STATUS_ARMGenerator() gopter.Gen {
	if containerServiceSshPublicKey_STATUS_ARMGenerator != nil {
		return containerServiceSshPublicKey_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_STATUS_ARM(generators)
	containerServiceSshPublicKey_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerServiceSshPublicKey_STATUS_ARM{}), generators)

	return containerServiceSshPublicKey_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerServiceSshPublicKey_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["KeyData"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM, ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM runs a test to see if a specific instance of ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM(subject ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator()
var managedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator gopter.Gen

// ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator returns a generator of ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM instances for property testing.
func ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator != nil {
		return managedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM(generators)
	managedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM{}), generators)

	return managedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterAzureMonitorProfileKubeStateMetrics_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MetricAnnotationsAllowList"] = gen.PtrOf(gen.AlphaString())
	gens["MetricLabelsAllowlist"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM, ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM(subject ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator()
var managedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM instances for property testing.
func ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator != nil {
		return managedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM(generators)
	managedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM{}), generators)

	return managedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterLoadBalancerProfile_ManagedOutboundIPs_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["CountIPv6"] = gen.PtrOf(gen.Int())
}

func Test_ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM, ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM(subject ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator()
var managedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM instances for property testing.
func ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator != nil {
		return managedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM(generators)
	managedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM{}), generators)

	return managedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPPrefixes_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PublicIPPrefixes"] = gen.SliceOf(ResourceReference_STATUS_ARMGenerator())
}

func Test_ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM, ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM runs a test to see if a specific instance of ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM(subject ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator()
var managedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator gopter.Gen

// ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator returns a generator of ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM instances for property testing.
func ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator != nil {
		return managedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM(generators)
	managedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM{}), generators)

	return managedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterLoadBalancerProfile_OutboundIPs_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PublicIPs"] = gen.SliceOf(ResourceReference_STATUS_ARMGenerator())
}

func Test_ManagedClusterManagedOutboundIPProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterManagedOutboundIPProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterManagedOutboundIPProfile_STATUS_ARM, ManagedClusterManagedOutboundIPProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterManagedOutboundIPProfile_STATUS_ARM runs a test to see if a specific instance of ManagedClusterManagedOutboundIPProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterManagedOutboundIPProfile_STATUS_ARM(subject ManagedClusterManagedOutboundIPProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterManagedOutboundIPProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterManagedOutboundIPProfile_STATUS_ARM instances for property testing - lazily instantiated
// by ManagedClusterManagedOutboundIPProfile_STATUS_ARMGenerator()
var managedClusterManagedOutboundIPProfile_STATUS_ARMGenerator gopter.Gen

// ManagedClusterManagedOutboundIPProfile_STATUS_ARMGenerator returns a generator of ManagedClusterManagedOutboundIPProfile_STATUS_ARM instances for property testing.
func ManagedClusterManagedOutboundIPProfile_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterManagedOutboundIPProfile_STATUS_ARMGenerator != nil {
		return managedClusterManagedOutboundIPProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterManagedOutboundIPProfile_STATUS_ARM(generators)
	managedClusterManagedOutboundIPProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterManagedOutboundIPProfile_STATUS_ARM{}), generators)

	return managedClusterManagedOutboundIPProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterManagedOutboundIPProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterManagedOutboundIPProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
}

func Test_ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM, ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM runs a test to see if a specific instance of ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM(subject ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator()
var managedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator gopter.Gen

// ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator returns a generator of ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM instances for property testing.
func ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator != nil {
		return managedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM(generators)
	managedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM{}), generators)

	return managedClusterPodIdentity_ProvisioningInfo_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentity_ProvisioningInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningError_STATUS_ARMGenerator())
}

func Test_ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM, ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM runs a test to see if a specific instance of ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM(subject ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM instances for property testing -
// lazily instantiated by ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator()
var managedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator gopter.Gen

// ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator returns a generator of ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM instances for property testing.
func ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator != nil {
		return managedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM(generators)
	managedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM{}), generators)

	return managedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterSecurityProfileDefenderSecurityMonitoring_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_ResourceReference_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_STATUS_ARM, ResourceReference_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_STATUS_ARM runs a test to see if a specific instance of ResourceReference_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_STATUS_ARM(subject ResourceReference_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceReference_STATUS_ARMGenerator()
var resourceReference_STATUS_ARMGenerator gopter.Gen

// ResourceReference_STATUS_ARMGenerator returns a generator of ResourceReference_STATUS_ARM instances for property testing.
func ResourceReference_STATUS_ARMGenerator() gopter.Gen {
	if resourceReference_STATUS_ARMGenerator != nil {
		return resourceReference_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM(generators)
	resourceReference_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_STATUS_ARM{}), generators)

	return resourceReference_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedClusterPodIdentityProvisioningError_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningError_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_STATUS_ARM, ManagedClusterPodIdentityProvisioningError_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_STATUS_ARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningError_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningError_STATUS_ARM(subject ManagedClusterPodIdentityProvisioningError_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningError_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningError_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentityProvisioningError_STATUS_ARMGenerator()
var managedClusterPodIdentityProvisioningError_STATUS_ARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningError_STATUS_ARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningError_STATUS_ARM instances for property testing.
func ManagedClusterPodIdentityProvisioningError_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningError_STATUS_ARMGenerator != nil {
		return managedClusterPodIdentityProvisioningError_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_STATUS_ARM(generators)
	managedClusterPodIdentityProvisioningError_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningError_STATUS_ARM{}), generators)

	return managedClusterPodIdentityProvisioningError_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningError_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM, ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM(subject ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator()
var managedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM instances for property testing.
// We first initialize managedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM(generators)
	managedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM(generators)
	managedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBody_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Details"] = gen.SliceOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator())
}

func Test_ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM, ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM runs a test to see if a specific instance of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM(subject ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM instances for property testing -
// lazily instantiated by ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator()
var managedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator gopter.Gen

// ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator returns a generator of ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM instances for property testing.
func ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator() gopter.Gen {
	if managedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator != nil {
		return managedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM(generators)
	managedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM{}), generators)

	return managedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedClusterPodIdentityProvisioningErrorBody_STATUS_Unrolled_ARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}
