// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=containerservice.azure.com,resources=fleetsautoupgradeprofiles,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=containerservice.azure.com,resources={fleetsautoupgradeprofiles/status,fleetsautoupgradeprofiles/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,containerservice}
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20250301.FleetsAutoUpgradeProfile
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/stable/2025-03-01/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/autoUpgradeProfiles/{autoUpgradeProfileName}
type FleetsAutoUpgradeProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FleetsAutoUpgradeProfile_Spec   `json:"spec,omitempty"`
	Status            FleetsAutoUpgradeProfile_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &FleetsAutoUpgradeProfile{}

// GetConditions returns the conditions of the resource
func (profile *FleetsAutoUpgradeProfile) GetConditions() conditions.Conditions {
	return profile.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (profile *FleetsAutoUpgradeProfile) SetConditions(conditions conditions.Conditions) {
	profile.Status.Conditions = conditions
}

var _ configmaps.Exporter = &FleetsAutoUpgradeProfile{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (profile *FleetsAutoUpgradeProfile) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if profile.Spec.OperatorSpec == nil {
		return nil
	}
	return profile.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &FleetsAutoUpgradeProfile{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (profile *FleetsAutoUpgradeProfile) SecretDestinationExpressions() []*core.DestinationExpression {
	if profile.Spec.OperatorSpec == nil {
		return nil
	}
	return profile.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.KubernetesResource = &FleetsAutoUpgradeProfile{}

// AzureName returns the Azure name of the resource
func (profile *FleetsAutoUpgradeProfile) AzureName() string {
	return profile.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2025-03-01"
func (profile FleetsAutoUpgradeProfile) GetAPIVersion() string {
	return "2025-03-01"
}

// GetResourceScope returns the scope of the resource
func (profile *FleetsAutoUpgradeProfile) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (profile *FleetsAutoUpgradeProfile) GetSpec() genruntime.ConvertibleSpec {
	return &profile.Spec
}

// GetStatus returns the status of this resource
func (profile *FleetsAutoUpgradeProfile) GetStatus() genruntime.ConvertibleStatus {
	return &profile.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (profile *FleetsAutoUpgradeProfile) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerService/fleets/autoUpgradeProfiles"
func (profile *FleetsAutoUpgradeProfile) GetType() string {
	return "Microsoft.ContainerService/fleets/autoUpgradeProfiles"
}

// NewEmptyStatus returns a new empty (blank) status
func (profile *FleetsAutoUpgradeProfile) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &FleetsAutoUpgradeProfile_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (profile *FleetsAutoUpgradeProfile) Owner() *genruntime.ResourceReference {
	if profile.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(profile.Spec)
	return profile.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (profile *FleetsAutoUpgradeProfile) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*FleetsAutoUpgradeProfile_STATUS); ok {
		profile.Status = *st
		return nil
	}

	// Convert status to required version
	var st FleetsAutoUpgradeProfile_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	profile.Status = st
	return nil
}

// Hub marks that this FleetsAutoUpgradeProfile is the hub type for conversion
func (profile *FleetsAutoUpgradeProfile) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (profile *FleetsAutoUpgradeProfile) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: profile.Spec.OriginalVersion,
		Kind:    "FleetsAutoUpgradeProfile",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20250301.FleetsAutoUpgradeProfile
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/stable/2025-03-01/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/autoUpgradeProfiles/{autoUpgradeProfileName}
type FleetsAutoUpgradeProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FleetsAutoUpgradeProfile `json:"items"`
}

// Storage version of v1api20250301.FleetsAutoUpgradeProfile_Spec
type FleetsAutoUpgradeProfile_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName          string                                `json:"azureName,omitempty"`
	Channel            *string                               `json:"channel,omitempty"`
	Disabled           *bool                                 `json:"disabled,omitempty"`
	NodeImageSelection *AutoUpgradeNodeImageSelection        `json:"nodeImageSelection,omitempty"`
	OperatorSpec       *FleetsAutoUpgradeProfileOperatorSpec `json:"operatorSpec,omitempty"`
	OriginalVersion    string                                `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a containerservice.azure.com/Fleet resource
	Owner       *genruntime.KnownResourceReference `group:"containerservice.azure.com" json:"owner,omitempty" kind:"Fleet"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`

	// UpdateStrategyReference: The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade
	// will run on all clusters which are members of the fleet.
	UpdateStrategyReference *genruntime.ResourceReference `armReference:"UpdateStrategyId" json:"updateStrategyReference,omitempty"`
}

var _ genruntime.ConvertibleSpec = &FleetsAutoUpgradeProfile_Spec{}

// ConvertSpecFrom populates our FleetsAutoUpgradeProfile_Spec from the provided source
func (profile *FleetsAutoUpgradeProfile_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == profile {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(profile)
}

// ConvertSpecTo populates the provided destination from our FleetsAutoUpgradeProfile_Spec
func (profile *FleetsAutoUpgradeProfile_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == profile {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(profile)
}

// Storage version of v1api20250301.FleetsAutoUpgradeProfile_STATUS
type FleetsAutoUpgradeProfile_STATUS struct {
	AutoUpgradeProfileStatus *AutoUpgradeProfileStatus_STATUS      `json:"autoUpgradeProfileStatus,omitempty"`
	Channel                  *string                               `json:"channel,omitempty"`
	Conditions               []conditions.Condition                `json:"conditions,omitempty"`
	Disabled                 *bool                                 `json:"disabled,omitempty"`
	ETag                     *string                               `json:"eTag,omitempty"`
	Id                       *string                               `json:"id,omitempty"`
	Name                     *string                               `json:"name,omitempty"`
	NodeImageSelection       *AutoUpgradeNodeImageSelection_STATUS `json:"nodeImageSelection,omitempty"`
	PropertyBag              genruntime.PropertyBag                `json:"$propertyBag,omitempty"`
	ProvisioningState        *string                               `json:"provisioningState,omitempty"`
	SystemData               *SystemData_STATUS                    `json:"systemData,omitempty"`
	Type                     *string                               `json:"type,omitempty"`
	UpdateStrategyId         *string                               `json:"updateStrategyId,omitempty"`
}

var _ genruntime.ConvertibleStatus = &FleetsAutoUpgradeProfile_STATUS{}

// ConvertStatusFrom populates our FleetsAutoUpgradeProfile_STATUS from the provided source
func (profile *FleetsAutoUpgradeProfile_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == profile {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(profile)
}

// ConvertStatusTo populates the provided destination from our FleetsAutoUpgradeProfile_STATUS
func (profile *FleetsAutoUpgradeProfile_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == profile {
		return eris.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(profile)
}

// Storage version of v1api20250301.AutoUpgradeNodeImageSelection
// The node image upgrade to be applied to the target clusters in auto upgrade.
type AutoUpgradeNodeImageSelection struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// Storage version of v1api20250301.AutoUpgradeNodeImageSelection_STATUS
// The node image upgrade to be applied to the target clusters in auto upgrade.
type AutoUpgradeNodeImageSelection_STATUS struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// Storage version of v1api20250301.AutoUpgradeProfileStatus_STATUS
// AutoUpgradeProfileStatus is the status of an auto upgrade profile.
type AutoUpgradeProfileStatus_STATUS struct {
	LastTriggerError           *ErrorDetail_STATUS    `json:"lastTriggerError,omitempty"`
	LastTriggerStatus          *string                `json:"lastTriggerStatus,omitempty"`
	LastTriggerUpgradeVersions []string               `json:"lastTriggerUpgradeVersions,omitempty"`
	LastTriggeredAt            *string                `json:"lastTriggeredAt,omitempty"`
	PropertyBag                genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20250301.FleetsAutoUpgradeProfileOperatorSpec
// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type FleetsAutoUpgradeProfileOperatorSpec struct {
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`
	PropertyBag          genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	SecretExpressions    []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

func init() {
	SchemeBuilder.Register(&FleetsAutoUpgradeProfile{}, &FleetsAutoUpgradeProfileList{})
}
