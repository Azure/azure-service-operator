// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20250301

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20250301/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/containerservice/v1api20250301/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,containerservice}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/stable/2025-03-01/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateStrategies/{updateStrategyName}
type FleetsUpdateStrategy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FleetsUpdateStrategy_Spec   `json:"spec,omitempty"`
	Status            FleetsUpdateStrategy_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &FleetsUpdateStrategy{}

// GetConditions returns the conditions of the resource
func (strategy *FleetsUpdateStrategy) GetConditions() conditions.Conditions {
	return strategy.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (strategy *FleetsUpdateStrategy) SetConditions(conditions conditions.Conditions) {
	strategy.Status.Conditions = conditions
}

var _ conversion.Convertible = &FleetsUpdateStrategy{}

// ConvertFrom populates our FleetsUpdateStrategy from the provided hub FleetsUpdateStrategy
func (strategy *FleetsUpdateStrategy) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.FleetsUpdateStrategy)
	if !ok {
		return fmt.Errorf("expected containerservice/v1api20250301/storage/FleetsUpdateStrategy but received %T instead", hub)
	}

	return strategy.AssignProperties_From_FleetsUpdateStrategy(source)
}

// ConvertTo populates the provided hub FleetsUpdateStrategy from our FleetsUpdateStrategy
func (strategy *FleetsUpdateStrategy) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.FleetsUpdateStrategy)
	if !ok {
		return fmt.Errorf("expected containerservice/v1api20250301/storage/FleetsUpdateStrategy but received %T instead", hub)
	}

	return strategy.AssignProperties_To_FleetsUpdateStrategy(destination)
}

var _ configmaps.Exporter = &FleetsUpdateStrategy{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (strategy *FleetsUpdateStrategy) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if strategy.Spec.OperatorSpec == nil {
		return nil
	}
	return strategy.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &FleetsUpdateStrategy{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (strategy *FleetsUpdateStrategy) SecretDestinationExpressions() []*core.DestinationExpression {
	if strategy.Spec.OperatorSpec == nil {
		return nil
	}
	return strategy.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &FleetsUpdateStrategy{}

// InitializeSpec initializes the spec for this resource from the given status
func (strategy *FleetsUpdateStrategy) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*FleetsUpdateStrategy_STATUS); ok {
		return strategy.Spec.Initialize_From_FleetsUpdateStrategy_STATUS(s)
	}

	return fmt.Errorf("expected Status of type FleetsUpdateStrategy_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &FleetsUpdateStrategy{}

// AzureName returns the Azure name of the resource
func (strategy *FleetsUpdateStrategy) AzureName() string {
	return strategy.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2025-03-01"
func (strategy FleetsUpdateStrategy) GetAPIVersion() string {
	return "2025-03-01"
}

// GetResourceScope returns the scope of the resource
func (strategy *FleetsUpdateStrategy) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (strategy *FleetsUpdateStrategy) GetSpec() genruntime.ConvertibleSpec {
	return &strategy.Spec
}

// GetStatus returns the status of this resource
func (strategy *FleetsUpdateStrategy) GetStatus() genruntime.ConvertibleStatus {
	return &strategy.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (strategy *FleetsUpdateStrategy) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerService/fleets/updateStrategies"
func (strategy *FleetsUpdateStrategy) GetType() string {
	return "Microsoft.ContainerService/fleets/updateStrategies"
}

// NewEmptyStatus returns a new empty (blank) status
func (strategy *FleetsUpdateStrategy) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &FleetsUpdateStrategy_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (strategy *FleetsUpdateStrategy) Owner() *genruntime.ResourceReference {
	if strategy.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(strategy.Spec)
	return strategy.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (strategy *FleetsUpdateStrategy) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*FleetsUpdateStrategy_STATUS); ok {
		strategy.Status = *st
		return nil
	}

	// Convert status to required version
	var st FleetsUpdateStrategy_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	strategy.Status = st
	return nil
}

// AssignProperties_From_FleetsUpdateStrategy populates our FleetsUpdateStrategy from the provided source FleetsUpdateStrategy
func (strategy *FleetsUpdateStrategy) AssignProperties_From_FleetsUpdateStrategy(source *storage.FleetsUpdateStrategy) error {

	// ObjectMeta
	strategy.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FleetsUpdateStrategy_Spec
	err := spec.AssignProperties_From_FleetsUpdateStrategy_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_FleetsUpdateStrategy_Spec() to populate field Spec")
	}
	strategy.Spec = spec

	// Status
	var status FleetsUpdateStrategy_STATUS
	err = status.AssignProperties_From_FleetsUpdateStrategy_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_FleetsUpdateStrategy_STATUS() to populate field Status")
	}
	strategy.Status = status

	// No error
	return nil
}

// AssignProperties_To_FleetsUpdateStrategy populates the provided destination FleetsUpdateStrategy from our FleetsUpdateStrategy
func (strategy *FleetsUpdateStrategy) AssignProperties_To_FleetsUpdateStrategy(destination *storage.FleetsUpdateStrategy) error {

	// ObjectMeta
	destination.ObjectMeta = *strategy.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.FleetsUpdateStrategy_Spec
	err := strategy.Spec.AssignProperties_To_FleetsUpdateStrategy_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_FleetsUpdateStrategy_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.FleetsUpdateStrategy_STATUS
	err = strategy.Status.AssignProperties_To_FleetsUpdateStrategy_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_FleetsUpdateStrategy_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (strategy *FleetsUpdateStrategy) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: strategy.Spec.OriginalVersion(),
		Kind:    "FleetsUpdateStrategy",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /containerservice/resource-manager/Microsoft.ContainerService/fleet/stable/2025-03-01/fleets.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateStrategies/{updateStrategyName}
type FleetsUpdateStrategyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FleetsUpdateStrategy `json:"items"`
}

type FleetsUpdateStrategy_Spec struct {
	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *FleetsUpdateStrategyOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a containerservice.azure.com/Fleet resource
	Owner *genruntime.KnownResourceReference `group:"containerservice.azure.com" json:"owner,omitempty" kind:"Fleet"`

	// +kubebuilder:validation:Required
	// Strategy: Defines the update sequence of the clusters.
	Strategy *UpdateRunStrategy `json:"strategy,omitempty"`
}

var _ genruntime.ARMTransformer = &FleetsUpdateStrategy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (strategy *FleetsUpdateStrategy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if strategy == nil {
		return nil, nil
	}
	result := &arm.FleetsUpdateStrategy_Spec{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if strategy.Strategy != nil {
		result.Properties = &arm.FleetUpdateStrategyProperties{}
	}
	if strategy.Strategy != nil {
		strategy_ARM, err := strategy.Strategy.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		strategy1 := *strategy_ARM.(*arm.UpdateRunStrategy)
		result.Properties.Strategy = &strategy1
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (strategy *FleetsUpdateStrategy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.FleetsUpdateStrategy_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (strategy *FleetsUpdateStrategy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.FleetsUpdateStrategy_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.FleetsUpdateStrategy_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	strategy.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	strategy.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Strategy":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Strategy != nil {
			var strategy2 UpdateRunStrategy
			err := strategy2.PopulateFromARM(owner, *typedInput.Properties.Strategy)
			if err != nil {
				return err
			}
			strategy1 := strategy2
			strategy.Strategy = &strategy1
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FleetsUpdateStrategy_Spec{}

// ConvertSpecFrom populates our FleetsUpdateStrategy_Spec from the provided source
func (strategy *FleetsUpdateStrategy_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.FleetsUpdateStrategy_Spec)
	if ok {
		// Populate our instance from source
		return strategy.AssignProperties_From_FleetsUpdateStrategy_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.FleetsUpdateStrategy_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = strategy.AssignProperties_From_FleetsUpdateStrategy_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FleetsUpdateStrategy_Spec
func (strategy *FleetsUpdateStrategy_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.FleetsUpdateStrategy_Spec)
	if ok {
		// Populate destination from our instance
		return strategy.AssignProperties_To_FleetsUpdateStrategy_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.FleetsUpdateStrategy_Spec{}
	err := strategy.AssignProperties_To_FleetsUpdateStrategy_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_FleetsUpdateStrategy_Spec populates our FleetsUpdateStrategy_Spec from the provided source FleetsUpdateStrategy_Spec
func (strategy *FleetsUpdateStrategy_Spec) AssignProperties_From_FleetsUpdateStrategy_Spec(source *storage.FleetsUpdateStrategy_Spec) error {

	// AzureName
	strategy.AzureName = source.AzureName

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec FleetsUpdateStrategyOperatorSpec
		err := operatorSpec.AssignProperties_From_FleetsUpdateStrategyOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_FleetsUpdateStrategyOperatorSpec() to populate field OperatorSpec")
		}
		strategy.OperatorSpec = &operatorSpec
	} else {
		strategy.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		strategy.Owner = &owner
	} else {
		strategy.Owner = nil
	}

	// Strategy
	if source.Strategy != nil {
		var strategyLocal UpdateRunStrategy
		err := strategyLocal.AssignProperties_From_UpdateRunStrategy(source.Strategy)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_UpdateRunStrategy() to populate field Strategy")
		}
		strategy.Strategy = &strategyLocal
	} else {
		strategy.Strategy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FleetsUpdateStrategy_Spec populates the provided destination FleetsUpdateStrategy_Spec from our FleetsUpdateStrategy_Spec
func (strategy *FleetsUpdateStrategy_Spec) AssignProperties_To_FleetsUpdateStrategy_Spec(destination *storage.FleetsUpdateStrategy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = strategy.AzureName

	// OperatorSpec
	if strategy.OperatorSpec != nil {
		var operatorSpec storage.FleetsUpdateStrategyOperatorSpec
		err := strategy.OperatorSpec.AssignProperties_To_FleetsUpdateStrategyOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_FleetsUpdateStrategyOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = strategy.OriginalVersion()

	// Owner
	if strategy.Owner != nil {
		owner := strategy.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Strategy
	if strategy.Strategy != nil {
		var strategyLocal storage.UpdateRunStrategy
		err := strategy.Strategy.AssignProperties_To_UpdateRunStrategy(&strategyLocal)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_UpdateRunStrategy() to populate field Strategy")
		}
		destination.Strategy = &strategyLocal
	} else {
		destination.Strategy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_FleetsUpdateStrategy_STATUS populates our FleetsUpdateStrategy_Spec from the provided source FleetsUpdateStrategy_STATUS
func (strategy *FleetsUpdateStrategy_Spec) Initialize_From_FleetsUpdateStrategy_STATUS(source *FleetsUpdateStrategy_STATUS) error {

	// Strategy
	if source.Strategy != nil {
		var strategyLocal UpdateRunStrategy
		err := strategyLocal.Initialize_From_UpdateRunStrategy_STATUS(source.Strategy)
		if err != nil {
			return eris.Wrap(err, "calling Initialize_From_UpdateRunStrategy_STATUS() to populate field Strategy")
		}
		strategy.Strategy = &strategyLocal
	} else {
		strategy.Strategy = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (strategy *FleetsUpdateStrategy_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (strategy *FleetsUpdateStrategy_Spec) SetAzureName(azureName string) {
	strategy.AzureName = azureName
}

type FleetsUpdateStrategy_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// ETag: If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.
	// Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in
	// the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header
	// fields.
	ETag *string `json:"eTag,omitempty"`

	// Id: Fully qualified resource ID for the resource. E.g.
	// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the UpdateStrategy resource.
	ProvisioningState *FleetUpdateStrategyProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Strategy: Defines the update sequence of the clusters.
	Strategy *UpdateRunStrategy_STATUS `json:"strategy,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &FleetsUpdateStrategy_STATUS{}

// ConvertStatusFrom populates our FleetsUpdateStrategy_STATUS from the provided source
func (strategy *FleetsUpdateStrategy_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.FleetsUpdateStrategy_STATUS)
	if ok {
		// Populate our instance from source
		return strategy.AssignProperties_From_FleetsUpdateStrategy_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.FleetsUpdateStrategy_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = strategy.AssignProperties_From_FleetsUpdateStrategy_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our FleetsUpdateStrategy_STATUS
func (strategy *FleetsUpdateStrategy_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.FleetsUpdateStrategy_STATUS)
	if ok {
		// Populate destination from our instance
		return strategy.AssignProperties_To_FleetsUpdateStrategy_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.FleetsUpdateStrategy_STATUS{}
	err := strategy.AssignProperties_To_FleetsUpdateStrategy_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &FleetsUpdateStrategy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (strategy *FleetsUpdateStrategy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.FleetsUpdateStrategy_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (strategy *FleetsUpdateStrategy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.FleetsUpdateStrategy_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.FleetsUpdateStrategy_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "ETag":
	if typedInput.ETag != nil {
		eTag := *typedInput.ETag
		strategy.ETag = &eTag
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		strategy.Id = &id
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		strategy.Name = &name
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			var temp string
			temp = string(*typedInput.Properties.ProvisioningState)
			provisioningState := FleetUpdateStrategyProvisioningState_STATUS(temp)
			strategy.ProvisioningState = &provisioningState
		}
	}

	// Set property "Strategy":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Strategy != nil {
			var strategy2 UpdateRunStrategy_STATUS
			err := strategy2.PopulateFromARM(owner, *typedInput.Properties.Strategy)
			if err != nil {
				return err
			}
			strategy1 := strategy2
			strategy.Strategy = &strategy1
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		strategy.SystemData = &systemData
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		strategy.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_FleetsUpdateStrategy_STATUS populates our FleetsUpdateStrategy_STATUS from the provided source FleetsUpdateStrategy_STATUS
func (strategy *FleetsUpdateStrategy_STATUS) AssignProperties_From_FleetsUpdateStrategy_STATUS(source *storage.FleetsUpdateStrategy_STATUS) error {

	// Conditions
	strategy.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ETag
	strategy.ETag = genruntime.ClonePointerToString(source.ETag)

	// Id
	strategy.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	strategy.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		provisioningStateTemp := genruntime.ToEnum(provisioningState, fleetUpdateStrategyProvisioningState_STATUS_Values)
		strategy.ProvisioningState = &provisioningStateTemp
	} else {
		strategy.ProvisioningState = nil
	}

	// Strategy
	if source.Strategy != nil {
		var strategyLocal UpdateRunStrategy_STATUS
		err := strategyLocal.AssignProperties_From_UpdateRunStrategy_STATUS(source.Strategy)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_UpdateRunStrategy_STATUS() to populate field Strategy")
		}
		strategy.Strategy = &strategyLocal
	} else {
		strategy.Strategy = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		strategy.SystemData = &systemDatum
	} else {
		strategy.SystemData = nil
	}

	// Type
	strategy.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_FleetsUpdateStrategy_STATUS populates the provided destination FleetsUpdateStrategy_STATUS from our FleetsUpdateStrategy_STATUS
func (strategy *FleetsUpdateStrategy_STATUS) AssignProperties_To_FleetsUpdateStrategy_STATUS(destination *storage.FleetsUpdateStrategy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(strategy.Conditions)

	// ETag
	destination.ETag = genruntime.ClonePointerToString(strategy.ETag)

	// Id
	destination.Id = genruntime.ClonePointerToString(strategy.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(strategy.Name)

	// ProvisioningState
	if strategy.ProvisioningState != nil {
		provisioningState := string(*strategy.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Strategy
	if strategy.Strategy != nil {
		var strategyLocal storage.UpdateRunStrategy_STATUS
		err := strategy.Strategy.AssignProperties_To_UpdateRunStrategy_STATUS(&strategyLocal)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_UpdateRunStrategy_STATUS() to populate field Strategy")
		}
		destination.Strategy = &strategyLocal
	} else {
		destination.Strategy = nil
	}

	// SystemData
	if strategy.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := strategy.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(strategy.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type FleetsUpdateStrategyOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_FleetsUpdateStrategyOperatorSpec populates our FleetsUpdateStrategyOperatorSpec from the provided source FleetsUpdateStrategyOperatorSpec
func (operator *FleetsUpdateStrategyOperatorSpec) AssignProperties_From_FleetsUpdateStrategyOperatorSpec(source *storage.FleetsUpdateStrategyOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FleetsUpdateStrategyOperatorSpec populates the provided destination FleetsUpdateStrategyOperatorSpec from our FleetsUpdateStrategyOperatorSpec
func (operator *FleetsUpdateStrategyOperatorSpec) AssignProperties_To_FleetsUpdateStrategyOperatorSpec(destination *storage.FleetsUpdateStrategyOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// The provisioning state of the UpdateStrategy resource.
type FleetUpdateStrategyProvisioningState_STATUS string

const (
	FleetUpdateStrategyProvisioningState_STATUS_Canceled  = FleetUpdateStrategyProvisioningState_STATUS("Canceled")
	FleetUpdateStrategyProvisioningState_STATUS_Failed    = FleetUpdateStrategyProvisioningState_STATUS("Failed")
	FleetUpdateStrategyProvisioningState_STATUS_Succeeded = FleetUpdateStrategyProvisioningState_STATUS("Succeeded")
)

// Mapping from string to FleetUpdateStrategyProvisioningState_STATUS
var fleetUpdateStrategyProvisioningState_STATUS_Values = map[string]FleetUpdateStrategyProvisioningState_STATUS{
	"canceled":  FleetUpdateStrategyProvisioningState_STATUS_Canceled,
	"failed":    FleetUpdateStrategyProvisioningState_STATUS_Failed,
	"succeeded": FleetUpdateStrategyProvisioningState_STATUS_Succeeded,
}

func init() {
	SchemeBuilder.Register(&FleetsUpdateStrategy{}, &FleetsUpdateStrategyList{})
}
