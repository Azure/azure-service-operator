// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230101

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type BackupVault_Spec_ARM struct {
	// Identity: Input Managed Identity Details
	Identity *DppIdentityDetails_ARM `json:"identity,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: BackupVaultResource properties
	Properties *BackupVaultSpec_ARM `json:"properties,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &BackupVault_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-01-01"
func (vault BackupVault_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (vault *BackupVault_Spec_ARM) GetName() string {
	return vault.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DataProtection/backupVaults"
func (vault *BackupVault_Spec_ARM) GetType() string {
	return "Microsoft.DataProtection/backupVaults"
}

// Backup Vault
type BackupVaultSpec_ARM struct {
	// FeatureSettings: Feature Settings
	FeatureSettings *FeatureSettings_ARM `json:"featureSettings,omitempty"`

	// MonitoringSettings: Monitoring Settings
	MonitoringSettings *MonitoringSettings_ARM `json:"monitoringSettings,omitempty"`

	// SecuritySettings: Security Settings
	SecuritySettings *SecuritySettings_ARM `json:"securitySettings,omitempty"`

	// StorageSettings: Storage Settings
	StorageSettings []StorageSetting_ARM `json:"storageSettings,omitempty"`
}

// Identity details
type DppIdentityDetails_ARM struct {
	// Type: The identityType which can be either SystemAssigned or None
	Type *string `json:"type,omitempty"`
}

// Class containing feature settings of vault
type FeatureSettings_ARM struct {
	// CrossSubscriptionRestoreSettings: CrossSubscriptionRestore Settings
	CrossSubscriptionRestoreSettings *CrossSubscriptionRestoreSettings_ARM `json:"crossSubscriptionRestoreSettings,omitempty"`
}

// Monitoring Settings
type MonitoringSettings_ARM struct {
	// AzureMonitorAlertSettings: Settings for Azure Monitor based alerts
	AzureMonitorAlertSettings *AzureMonitorAlertSettings_ARM `json:"azureMonitorAlertSettings,omitempty"`
}

// Class containing security settings of vault
type SecuritySettings_ARM struct {
	// ImmutabilitySettings: Immutability Settings at vault level
	ImmutabilitySettings *ImmutabilitySettings_ARM `json:"immutabilitySettings,omitempty"`

	// SoftDeleteSettings: Soft delete related settings
	SoftDeleteSettings *SoftDeleteSettings_ARM `json:"softDeleteSettings,omitempty"`
}

// Storage setting
type StorageSetting_ARM struct {
	// DatastoreType: Gets or sets the type of the datastore.
	DatastoreType *StorageSetting_DatastoreType `json:"datastoreType,omitempty"`

	// Type: Gets or sets the type.
	Type *StorageSetting_Type `json:"type,omitempty"`
}

// Settings for Azure Monitor based alerts
type AzureMonitorAlertSettings_ARM struct {
	AlertsForAllJobFailures *AzureMonitorAlertSettings_AlertsForAllJobFailures `json:"alertsForAllJobFailures,omitempty"`
}

// CrossSubscriptionRestore Settings
type CrossSubscriptionRestoreSettings_ARM struct {
	// State: CrossSubscriptionRestore state
	State *CrossSubscriptionRestoreSettings_State `json:"state,omitempty"`
}

// Immutability Settings at vault level
type ImmutabilitySettings_ARM struct {
	// State: Immutability state
	State *ImmutabilitySettings_State `json:"state,omitempty"`
}

// Soft delete related settings
type SoftDeleteSettings_ARM struct {
	// RetentionDurationInDays: Soft delete retention duration
	RetentionDurationInDays *float64 `json:"retentionDurationInDays,omitempty"`

	// State: State of soft delete
	State *SoftDeleteSettings_State `json:"state,omitempty"`
}

// +kubebuilder:validation:Enum={"ArchiveStore","OperationalStore","VaultStore"}
type StorageSetting_DatastoreType string

const (
	StorageSetting_DatastoreType_ArchiveStore     = StorageSetting_DatastoreType("ArchiveStore")
	StorageSetting_DatastoreType_OperationalStore = StorageSetting_DatastoreType("OperationalStore")
	StorageSetting_DatastoreType_VaultStore       = StorageSetting_DatastoreType("VaultStore")
)

// +kubebuilder:validation:Enum={"GeoRedundant","LocallyRedundant","ZoneRedundant"}
type StorageSetting_Type string

const (
	StorageSetting_Type_GeoRedundant     = StorageSetting_Type("GeoRedundant")
	StorageSetting_Type_LocallyRedundant = StorageSetting_Type("LocallyRedundant")
	StorageSetting_Type_ZoneRedundant    = StorageSetting_Type("ZoneRedundant")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type AzureMonitorAlertSettings_AlertsForAllJobFailures string

const (
	AzureMonitorAlertSettings_AlertsForAllJobFailures_Disabled = AzureMonitorAlertSettings_AlertsForAllJobFailures("Disabled")
	AzureMonitorAlertSettings_AlertsForAllJobFailures_Enabled  = AzureMonitorAlertSettings_AlertsForAllJobFailures("Enabled")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled","PermanentlyDisabled"}
type CrossSubscriptionRestoreSettings_State string

const (
	CrossSubscriptionRestoreSettings_State_Disabled            = CrossSubscriptionRestoreSettings_State("Disabled")
	CrossSubscriptionRestoreSettings_State_Enabled             = CrossSubscriptionRestoreSettings_State("Enabled")
	CrossSubscriptionRestoreSettings_State_PermanentlyDisabled = CrossSubscriptionRestoreSettings_State("PermanentlyDisabled")
)

// +kubebuilder:validation:Enum={"Disabled","Locked","Unlocked"}
type ImmutabilitySettings_State string

const (
	ImmutabilitySettings_State_Disabled = ImmutabilitySettings_State("Disabled")
	ImmutabilitySettings_State_Locked   = ImmutabilitySettings_State("Locked")
	ImmutabilitySettings_State_Unlocked = ImmutabilitySettings_State("Unlocked")
)

// +kubebuilder:validation:Enum={"AlwaysOn","Off","On"}
type SoftDeleteSettings_State string

const (
	SoftDeleteSettings_State_AlwaysOn = SoftDeleteSettings_State("AlwaysOn")
	SoftDeleteSettings_State_Off      = SoftDeleteSettings_State("Off")
	SoftDeleteSettings_State_On       = SoftDeleteSettings_State("On")
)
