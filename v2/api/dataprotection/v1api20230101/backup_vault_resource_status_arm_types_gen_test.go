// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AzureMonitorAlertSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureMonitorAlertSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureMonitorAlertSettings_STATUS_ARM, AzureMonitorAlertSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureMonitorAlertSettings_STATUS_ARM runs a test to see if a specific instance of AzureMonitorAlertSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureMonitorAlertSettings_STATUS_ARM(subject AzureMonitorAlertSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureMonitorAlertSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureMonitorAlertSettings_STATUS_ARM instances for property testing - lazily instantiated by
// AzureMonitorAlertSettings_STATUS_ARMGenerator()
var azureMonitorAlertSettings_STATUS_ARMGenerator gopter.Gen

// AzureMonitorAlertSettings_STATUS_ARMGenerator returns a generator of AzureMonitorAlertSettings_STATUS_ARM instances for property testing.
func AzureMonitorAlertSettings_STATUS_ARMGenerator() gopter.Gen {
	if azureMonitorAlertSettings_STATUS_ARMGenerator != nil {
		return azureMonitorAlertSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureMonitorAlertSettings_STATUS_ARM(generators)
	azureMonitorAlertSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureMonitorAlertSettings_STATUS_ARM{}), generators)

	return azureMonitorAlertSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureMonitorAlertSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureMonitorAlertSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AlertsForAllJobFailures"] = gen.PtrOf(gen.OneConstOf(AzureMonitorAlertSettings_AlertsForAllJobFailures_STATUS_Disabled, AzureMonitorAlertSettings_AlertsForAllJobFailures_STATUS_Enabled))
}

func Test_BackupVaultResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupVaultResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupVaultResource_STATUS_ARM, BackupVaultResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupVaultResource_STATUS_ARM runs a test to see if a specific instance of BackupVaultResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupVaultResource_STATUS_ARM(subject BackupVaultResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupVaultResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupVaultResource_STATUS_ARM instances for property testing - lazily instantiated by
// BackupVaultResource_STATUS_ARMGenerator()
var backupVaultResource_STATUS_ARMGenerator gopter.Gen

// BackupVaultResource_STATUS_ARMGenerator returns a generator of BackupVaultResource_STATUS_ARM instances for property testing.
// We first initialize backupVaultResource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackupVaultResource_STATUS_ARMGenerator() gopter.Gen {
	if backupVaultResource_STATUS_ARMGenerator != nil {
		return backupVaultResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupVaultResource_STATUS_ARM(generators)
	backupVaultResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupVaultResource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupVaultResource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForBackupVaultResource_STATUS_ARM(generators)
	backupVaultResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupVaultResource_STATUS_ARM{}), generators)

	return backupVaultResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackupVaultResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackupVaultResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ETag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBackupVaultResource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackupVaultResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(DppIdentityDetails_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(BackupVault_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_BackupVault_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupVault_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupVault_STATUS_ARM, BackupVault_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupVault_STATUS_ARM runs a test to see if a specific instance of BackupVault_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupVault_STATUS_ARM(subject BackupVault_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupVault_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupVault_STATUS_ARM instances for property testing - lazily instantiated by
// BackupVault_STATUS_ARMGenerator()
var backupVault_STATUS_ARMGenerator gopter.Gen

// BackupVault_STATUS_ARMGenerator returns a generator of BackupVault_STATUS_ARM instances for property testing.
// We first initialize backupVault_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackupVault_STATUS_ARMGenerator() gopter.Gen {
	if backupVault_STATUS_ARMGenerator != nil {
		return backupVault_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupVault_STATUS_ARM(generators)
	backupVault_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupVault_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupVault_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForBackupVault_STATUS_ARM(generators)
	backupVault_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupVault_STATUS_ARM{}), generators)

	return backupVault_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackupVault_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackupVault_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IsVaultProtectedByResourceGuard"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		BackupVault_ProvisioningState_STATUS_Failed,
		BackupVault_ProvisioningState_STATUS_Provisioning,
		BackupVault_ProvisioningState_STATUS_Succeeded,
		BackupVault_ProvisioningState_STATUS_Unknown,
		BackupVault_ProvisioningState_STATUS_Updating))
	gens["ResourceMoveState"] = gen.PtrOf(gen.OneConstOf(
		BackupVault_ResourceMoveState_STATUS_CommitFailed,
		BackupVault_ResourceMoveState_STATUS_CommitTimedout,
		BackupVault_ResourceMoveState_STATUS_CriticalFailure,
		BackupVault_ResourceMoveState_STATUS_Failed,
		BackupVault_ResourceMoveState_STATUS_InProgress,
		BackupVault_ResourceMoveState_STATUS_MoveSucceeded,
		BackupVault_ResourceMoveState_STATUS_PartialSuccess,
		BackupVault_ResourceMoveState_STATUS_PrepareFailed,
		BackupVault_ResourceMoveState_STATUS_PrepareTimedout,
		BackupVault_ResourceMoveState_STATUS_Unknown))
}

// AddRelatedPropertyGeneratorsForBackupVault_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackupVault_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["FeatureSettings"] = gen.PtrOf(FeatureSettings_STATUS_ARMGenerator())
	gens["MonitoringSettings"] = gen.PtrOf(MonitoringSettings_STATUS_ARMGenerator())
	gens["ResourceMoveDetails"] = gen.PtrOf(ResourceMoveDetails_STATUS_ARMGenerator())
	gens["SecuritySettings"] = gen.PtrOf(SecuritySettings_STATUS_ARMGenerator())
	gens["StorageSettings"] = gen.SliceOf(StorageSetting_STATUS_ARMGenerator())
}

func Test_CrossSubscriptionRestoreSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CrossSubscriptionRestoreSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCrossSubscriptionRestoreSettings_STATUS_ARM, CrossSubscriptionRestoreSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCrossSubscriptionRestoreSettings_STATUS_ARM runs a test to see if a specific instance of CrossSubscriptionRestoreSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCrossSubscriptionRestoreSettings_STATUS_ARM(subject CrossSubscriptionRestoreSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CrossSubscriptionRestoreSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CrossSubscriptionRestoreSettings_STATUS_ARM instances for property testing - lazily instantiated by
// CrossSubscriptionRestoreSettings_STATUS_ARMGenerator()
var crossSubscriptionRestoreSettings_STATUS_ARMGenerator gopter.Gen

// CrossSubscriptionRestoreSettings_STATUS_ARMGenerator returns a generator of CrossSubscriptionRestoreSettings_STATUS_ARM instances for property testing.
func CrossSubscriptionRestoreSettings_STATUS_ARMGenerator() gopter.Gen {
	if crossSubscriptionRestoreSettings_STATUS_ARMGenerator != nil {
		return crossSubscriptionRestoreSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCrossSubscriptionRestoreSettings_STATUS_ARM(generators)
	crossSubscriptionRestoreSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CrossSubscriptionRestoreSettings_STATUS_ARM{}), generators)

	return crossSubscriptionRestoreSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCrossSubscriptionRestoreSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCrossSubscriptionRestoreSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.OneConstOf(CrossSubscriptionRestoreSettings_State_STATUS_Disabled, CrossSubscriptionRestoreSettings_State_STATUS_Enabled, CrossSubscriptionRestoreSettings_State_STATUS_PermanentlyDisabled))
}

func Test_DppIdentityDetails_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DppIdentityDetails_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDppIdentityDetails_STATUS_ARM, DppIdentityDetails_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDppIdentityDetails_STATUS_ARM runs a test to see if a specific instance of DppIdentityDetails_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDppIdentityDetails_STATUS_ARM(subject DppIdentityDetails_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DppIdentityDetails_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DppIdentityDetails_STATUS_ARM instances for property testing - lazily instantiated by
// DppIdentityDetails_STATUS_ARMGenerator()
var dppIdentityDetails_STATUS_ARMGenerator gopter.Gen

// DppIdentityDetails_STATUS_ARMGenerator returns a generator of DppIdentityDetails_STATUS_ARM instances for property testing.
func DppIdentityDetails_STATUS_ARMGenerator() gopter.Gen {
	if dppIdentityDetails_STATUS_ARMGenerator != nil {
		return dppIdentityDetails_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDppIdentityDetails_STATUS_ARM(generators)
	dppIdentityDetails_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DppIdentityDetails_STATUS_ARM{}), generators)

	return dppIdentityDetails_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDppIdentityDetails_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDppIdentityDetails_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_FeatureSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FeatureSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFeatureSettings_STATUS_ARM, FeatureSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFeatureSettings_STATUS_ARM runs a test to see if a specific instance of FeatureSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFeatureSettings_STATUS_ARM(subject FeatureSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FeatureSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FeatureSettings_STATUS_ARM instances for property testing - lazily instantiated by
// FeatureSettings_STATUS_ARMGenerator()
var featureSettings_STATUS_ARMGenerator gopter.Gen

// FeatureSettings_STATUS_ARMGenerator returns a generator of FeatureSettings_STATUS_ARM instances for property testing.
func FeatureSettings_STATUS_ARMGenerator() gopter.Gen {
	if featureSettings_STATUS_ARMGenerator != nil {
		return featureSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForFeatureSettings_STATUS_ARM(generators)
	featureSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FeatureSettings_STATUS_ARM{}), generators)

	return featureSettings_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForFeatureSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFeatureSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CrossSubscriptionRestoreSettings"] = gen.PtrOf(CrossSubscriptionRestoreSettings_STATUS_ARMGenerator())
}

func Test_ImmutabilitySettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmutabilitySettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmutabilitySettings_STATUS_ARM, ImmutabilitySettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmutabilitySettings_STATUS_ARM runs a test to see if a specific instance of ImmutabilitySettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmutabilitySettings_STATUS_ARM(subject ImmutabilitySettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmutabilitySettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmutabilitySettings_STATUS_ARM instances for property testing - lazily instantiated by
// ImmutabilitySettings_STATUS_ARMGenerator()
var immutabilitySettings_STATUS_ARMGenerator gopter.Gen

// ImmutabilitySettings_STATUS_ARMGenerator returns a generator of ImmutabilitySettings_STATUS_ARM instances for property testing.
func ImmutabilitySettings_STATUS_ARMGenerator() gopter.Gen {
	if immutabilitySettings_STATUS_ARMGenerator != nil {
		return immutabilitySettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmutabilitySettings_STATUS_ARM(generators)
	immutabilitySettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ImmutabilitySettings_STATUS_ARM{}), generators)

	return immutabilitySettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForImmutabilitySettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmutabilitySettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.OneConstOf(ImmutabilitySettings_State_STATUS_Disabled, ImmutabilitySettings_State_STATUS_Locked, ImmutabilitySettings_State_STATUS_Unlocked))
}

func Test_MonitoringSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MonitoringSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMonitoringSettings_STATUS_ARM, MonitoringSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMonitoringSettings_STATUS_ARM runs a test to see if a specific instance of MonitoringSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMonitoringSettings_STATUS_ARM(subject MonitoringSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MonitoringSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MonitoringSettings_STATUS_ARM instances for property testing - lazily instantiated by
// MonitoringSettings_STATUS_ARMGenerator()
var monitoringSettings_STATUS_ARMGenerator gopter.Gen

// MonitoringSettings_STATUS_ARMGenerator returns a generator of MonitoringSettings_STATUS_ARM instances for property testing.
func MonitoringSettings_STATUS_ARMGenerator() gopter.Gen {
	if monitoringSettings_STATUS_ARMGenerator != nil {
		return monitoringSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForMonitoringSettings_STATUS_ARM(generators)
	monitoringSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(MonitoringSettings_STATUS_ARM{}), generators)

	return monitoringSettings_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForMonitoringSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForMonitoringSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AzureMonitorAlertSettings"] = gen.PtrOf(AzureMonitorAlertSettings_STATUS_ARMGenerator())
}

func Test_ResourceMoveDetails_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceMoveDetails_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceMoveDetails_STATUS_ARM, ResourceMoveDetails_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceMoveDetails_STATUS_ARM runs a test to see if a specific instance of ResourceMoveDetails_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceMoveDetails_STATUS_ARM(subject ResourceMoveDetails_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceMoveDetails_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceMoveDetails_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceMoveDetails_STATUS_ARMGenerator()
var resourceMoveDetails_STATUS_ARMGenerator gopter.Gen

// ResourceMoveDetails_STATUS_ARMGenerator returns a generator of ResourceMoveDetails_STATUS_ARM instances for property testing.
func ResourceMoveDetails_STATUS_ARMGenerator() gopter.Gen {
	if resourceMoveDetails_STATUS_ARMGenerator != nil {
		return resourceMoveDetails_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceMoveDetails_STATUS_ARM(generators)
	resourceMoveDetails_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceMoveDetails_STATUS_ARM{}), generators)

	return resourceMoveDetails_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceMoveDetails_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceMoveDetails_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CompletionTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["OperationId"] = gen.PtrOf(gen.AlphaString())
	gens["SourceResourcePath"] = gen.PtrOf(gen.AlphaString())
	gens["StartTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["TargetResourcePath"] = gen.PtrOf(gen.AlphaString())
}

func Test_SecuritySettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecuritySettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecuritySettings_STATUS_ARM, SecuritySettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecuritySettings_STATUS_ARM runs a test to see if a specific instance of SecuritySettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecuritySettings_STATUS_ARM(subject SecuritySettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecuritySettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecuritySettings_STATUS_ARM instances for property testing - lazily instantiated by
// SecuritySettings_STATUS_ARMGenerator()
var securitySettings_STATUS_ARMGenerator gopter.Gen

// SecuritySettings_STATUS_ARMGenerator returns a generator of SecuritySettings_STATUS_ARM instances for property testing.
func SecuritySettings_STATUS_ARMGenerator() gopter.Gen {
	if securitySettings_STATUS_ARMGenerator != nil {
		return securitySettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSecuritySettings_STATUS_ARM(generators)
	securitySettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SecuritySettings_STATUS_ARM{}), generators)

	return securitySettings_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForSecuritySettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecuritySettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ImmutabilitySettings"] = gen.PtrOf(ImmutabilitySettings_STATUS_ARMGenerator())
	gens["SoftDeleteSettings"] = gen.PtrOf(SoftDeleteSettings_STATUS_ARMGenerator())
}

func Test_SoftDeleteSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SoftDeleteSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSoftDeleteSettings_STATUS_ARM, SoftDeleteSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSoftDeleteSettings_STATUS_ARM runs a test to see if a specific instance of SoftDeleteSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSoftDeleteSettings_STATUS_ARM(subject SoftDeleteSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SoftDeleteSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SoftDeleteSettings_STATUS_ARM instances for property testing - lazily instantiated by
// SoftDeleteSettings_STATUS_ARMGenerator()
var softDeleteSettings_STATUS_ARMGenerator gopter.Gen

// SoftDeleteSettings_STATUS_ARMGenerator returns a generator of SoftDeleteSettings_STATUS_ARM instances for property testing.
func SoftDeleteSettings_STATUS_ARMGenerator() gopter.Gen {
	if softDeleteSettings_STATUS_ARMGenerator != nil {
		return softDeleteSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSoftDeleteSettings_STATUS_ARM(generators)
	softDeleteSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SoftDeleteSettings_STATUS_ARM{}), generators)

	return softDeleteSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSoftDeleteSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSoftDeleteSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RetentionDurationInDays"] = gen.PtrOf(gen.Float64())
	gens["State"] = gen.PtrOf(gen.OneConstOf(SoftDeleteSettings_State_STATUS_AlwaysOn, SoftDeleteSettings_State_STATUS_Off, SoftDeleteSettings_State_STATUS_On))
}

func Test_StorageSetting_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageSetting_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageSetting_STATUS_ARM, StorageSetting_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageSetting_STATUS_ARM runs a test to see if a specific instance of StorageSetting_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageSetting_STATUS_ARM(subject StorageSetting_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageSetting_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageSetting_STATUS_ARM instances for property testing - lazily instantiated by
// StorageSetting_STATUS_ARMGenerator()
var storageSetting_STATUS_ARMGenerator gopter.Gen

// StorageSetting_STATUS_ARMGenerator returns a generator of StorageSetting_STATUS_ARM instances for property testing.
func StorageSetting_STATUS_ARMGenerator() gopter.Gen {
	if storageSetting_STATUS_ARMGenerator != nil {
		return storageSetting_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorageSetting_STATUS_ARM(generators)
	storageSetting_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageSetting_STATUS_ARM{}), generators)

	return storageSetting_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStorageSetting_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorageSetting_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DatastoreType"] = gen.PtrOf(gen.OneConstOf(StorageSetting_DatastoreType_STATUS_ArchiveStore, StorageSetting_DatastoreType_STATUS_OperationalStore, StorageSetting_DatastoreType_STATUS_VaultStore))
	gens["Type"] = gen.PtrOf(gen.OneConstOf(StorageSetting_Type_STATUS_GeoRedundant, StorageSetting_Type_STATUS_LocallyRedundant, StorageSetting_Type_STATUS_ZoneRedundant))
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}
