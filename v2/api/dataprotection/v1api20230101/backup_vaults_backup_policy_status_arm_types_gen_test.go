// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AbsoluteDeleteOption_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AbsoluteDeleteOption_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAbsoluteDeleteOption_STATUS_ARM, AbsoluteDeleteOption_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAbsoluteDeleteOption_STATUS_ARM runs a test to see if a specific instance of AbsoluteDeleteOption_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAbsoluteDeleteOption_STATUS_ARM(subject AbsoluteDeleteOption_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AbsoluteDeleteOption_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AbsoluteDeleteOption_STATUS_ARM instances for property testing - lazily instantiated by
// AbsoluteDeleteOption_STATUS_ARMGenerator()
var absoluteDeleteOption_STATUS_ARMGenerator gopter.Gen

// AbsoluteDeleteOption_STATUS_ARMGenerator returns a generator of AbsoluteDeleteOption_STATUS_ARM instances for property testing.
func AbsoluteDeleteOption_STATUS_ARMGenerator() gopter.Gen {
	if absoluteDeleteOption_STATUS_ARMGenerator != nil {
		return absoluteDeleteOption_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAbsoluteDeleteOption_STATUS_ARM(generators)
	absoluteDeleteOption_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AbsoluteDeleteOption_STATUS_ARM{}), generators)

	return absoluteDeleteOption_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAbsoluteDeleteOption_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAbsoluteDeleteOption_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Duration"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectType"] = gen.OneConstOf(AbsoluteDeleteOption_ObjectType_STATUS_ARM_AbsoluteDeleteOption)
}

func Test_AdhocBasedTaggingCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdhocBasedTaggingCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdhocBasedTaggingCriteria_STATUS_ARM, AdhocBasedTaggingCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdhocBasedTaggingCriteria_STATUS_ARM runs a test to see if a specific instance of AdhocBasedTaggingCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdhocBasedTaggingCriteria_STATUS_ARM(subject AdhocBasedTaggingCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdhocBasedTaggingCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdhocBasedTaggingCriteria_STATUS_ARM instances for property testing - lazily instantiated by
// AdhocBasedTaggingCriteria_STATUS_ARMGenerator()
var adhocBasedTaggingCriteria_STATUS_ARMGenerator gopter.Gen

// AdhocBasedTaggingCriteria_STATUS_ARMGenerator returns a generator of AdhocBasedTaggingCriteria_STATUS_ARM instances for property testing.
func AdhocBasedTaggingCriteria_STATUS_ARMGenerator() gopter.Gen {
	if adhocBasedTaggingCriteria_STATUS_ARMGenerator != nil {
		return adhocBasedTaggingCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAdhocBasedTaggingCriteria_STATUS_ARM(generators)
	adhocBasedTaggingCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AdhocBasedTaggingCriteria_STATUS_ARM{}), generators)

	return adhocBasedTaggingCriteria_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForAdhocBasedTaggingCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAdhocBasedTaggingCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["TagInfo"] = gen.PtrOf(RetentionTag_STATUS_ARMGenerator())
}

func Test_AdhocBasedTriggerContext_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdhocBasedTriggerContext_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdhocBasedTriggerContext_STATUS_ARM, AdhocBasedTriggerContext_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdhocBasedTriggerContext_STATUS_ARM runs a test to see if a specific instance of AdhocBasedTriggerContext_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdhocBasedTriggerContext_STATUS_ARM(subject AdhocBasedTriggerContext_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdhocBasedTriggerContext_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdhocBasedTriggerContext_STATUS_ARM instances for property testing - lazily instantiated by
// AdhocBasedTriggerContext_STATUS_ARMGenerator()
var adhocBasedTriggerContext_STATUS_ARMGenerator gopter.Gen

// AdhocBasedTriggerContext_STATUS_ARMGenerator returns a generator of AdhocBasedTriggerContext_STATUS_ARM instances for property testing.
// We first initialize adhocBasedTriggerContext_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AdhocBasedTriggerContext_STATUS_ARMGenerator() gopter.Gen {
	if adhocBasedTriggerContext_STATUS_ARMGenerator != nil {
		return adhocBasedTriggerContext_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdhocBasedTriggerContext_STATUS_ARM(generators)
	adhocBasedTriggerContext_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AdhocBasedTriggerContext_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdhocBasedTriggerContext_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAdhocBasedTriggerContext_STATUS_ARM(generators)
	adhocBasedTriggerContext_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AdhocBasedTriggerContext_STATUS_ARM{}), generators)

	return adhocBasedTriggerContext_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAdhocBasedTriggerContext_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdhocBasedTriggerContext_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ObjectType"] = gen.OneConstOf(AdhocBasedTriggerContext_ObjectType_STATUS_ARM_AdhocBasedTriggerContext)
}

// AddRelatedPropertyGeneratorsForAdhocBasedTriggerContext_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAdhocBasedTriggerContext_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["TaggingCriteria"] = gen.PtrOf(AdhocBasedTaggingCriteria_STATUS_ARMGenerator())
}

func Test_AzureBackupParams_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureBackupParams_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureBackupParams_STATUS_ARM, AzureBackupParams_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureBackupParams_STATUS_ARM runs a test to see if a specific instance of AzureBackupParams_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureBackupParams_STATUS_ARM(subject AzureBackupParams_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureBackupParams_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureBackupParams_STATUS_ARM instances for property testing - lazily instantiated by
// AzureBackupParams_STATUS_ARMGenerator()
var azureBackupParams_STATUS_ARMGenerator gopter.Gen

// AzureBackupParams_STATUS_ARMGenerator returns a generator of AzureBackupParams_STATUS_ARM instances for property testing.
func AzureBackupParams_STATUS_ARMGenerator() gopter.Gen {
	if azureBackupParams_STATUS_ARMGenerator != nil {
		return azureBackupParams_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureBackupParams_STATUS_ARM(generators)
	azureBackupParams_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureBackupParams_STATUS_ARM{}), generators)

	return azureBackupParams_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureBackupParams_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureBackupParams_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BackupType"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectType"] = gen.OneConstOf(AzureBackupParams_ObjectType_STATUS_ARM_AzureBackupParams)
}

func Test_AzureBackupRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureBackupRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureBackupRule_STATUS_ARM, AzureBackupRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureBackupRule_STATUS_ARM runs a test to see if a specific instance of AzureBackupRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureBackupRule_STATUS_ARM(subject AzureBackupRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureBackupRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureBackupRule_STATUS_ARM instances for property testing - lazily instantiated by
// AzureBackupRule_STATUS_ARMGenerator()
var azureBackupRule_STATUS_ARMGenerator gopter.Gen

// AzureBackupRule_STATUS_ARMGenerator returns a generator of AzureBackupRule_STATUS_ARM instances for property testing.
// We first initialize azureBackupRule_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AzureBackupRule_STATUS_ARMGenerator() gopter.Gen {
	if azureBackupRule_STATUS_ARMGenerator != nil {
		return azureBackupRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureBackupRule_STATUS_ARM(generators)
	azureBackupRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureBackupRule_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureBackupRule_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAzureBackupRule_STATUS_ARM(generators)
	azureBackupRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureBackupRule_STATUS_ARM{}), generators)

	return azureBackupRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureBackupRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureBackupRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectType"] = gen.OneConstOf(AzureBackupRule_ObjectType_STATUS_ARM_AzureBackupRule)
}

// AddRelatedPropertyGeneratorsForAzureBackupRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAzureBackupRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BackupParameters"] = gen.PtrOf(BackupParameters_STATUS_ARMGenerator())
	gens["DataStore"] = gen.PtrOf(DataStoreInfoBase_STATUS_ARMGenerator())
	gens["Trigger"] = gen.PtrOf(TriggerContext_STATUS_ARMGenerator())
}

func Test_AzureRetentionRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureRetentionRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureRetentionRule_STATUS_ARM, AzureRetentionRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureRetentionRule_STATUS_ARM runs a test to see if a specific instance of AzureRetentionRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureRetentionRule_STATUS_ARM(subject AzureRetentionRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureRetentionRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureRetentionRule_STATUS_ARM instances for property testing - lazily instantiated by
// AzureRetentionRule_STATUS_ARMGenerator()
var azureRetentionRule_STATUS_ARMGenerator gopter.Gen

// AzureRetentionRule_STATUS_ARMGenerator returns a generator of AzureRetentionRule_STATUS_ARM instances for property testing.
// We first initialize azureRetentionRule_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AzureRetentionRule_STATUS_ARMGenerator() gopter.Gen {
	if azureRetentionRule_STATUS_ARMGenerator != nil {
		return azureRetentionRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureRetentionRule_STATUS_ARM(generators)
	azureRetentionRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureRetentionRule_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureRetentionRule_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAzureRetentionRule_STATUS_ARM(generators)
	azureRetentionRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureRetentionRule_STATUS_ARM{}), generators)

	return azureRetentionRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureRetentionRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureRetentionRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IsDefault"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectType"] = gen.OneConstOf(AzureRetentionRule_ObjectType_STATUS_ARM_AzureRetentionRule)
}

// AddRelatedPropertyGeneratorsForAzureRetentionRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAzureRetentionRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Lifecycles"] = gen.SliceOf(SourceLifeCycle_STATUS_ARMGenerator())
}

func Test_BackupCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupCriteria_STATUS_ARM, BackupCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupCriteria_STATUS_ARM runs a test to see if a specific instance of BackupCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupCriteria_STATUS_ARM(subject BackupCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupCriteria_STATUS_ARM instances for property testing - lazily instantiated by
// BackupCriteria_STATUS_ARMGenerator()
var backupCriteria_STATUS_ARMGenerator gopter.Gen

// BackupCriteria_STATUS_ARMGenerator returns a generator of BackupCriteria_STATUS_ARM instances for property testing.
func BackupCriteria_STATUS_ARMGenerator() gopter.Gen {
	if backupCriteria_STATUS_ARMGenerator != nil {
		return backupCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForBackupCriteria_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(BackupCriteria_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	backupCriteria_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return backupCriteria_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForBackupCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackupCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ScheduleBasedBackupCriteria"] = ScheduleBasedBackupCriteria_STATUS_ARMGenerator().Map(func(it ScheduleBasedBackupCriteria_STATUS_ARM) *ScheduleBasedBackupCriteria_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_BackupParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupParameters_STATUS_ARM, BackupParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupParameters_STATUS_ARM runs a test to see if a specific instance of BackupParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupParameters_STATUS_ARM(subject BackupParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupParameters_STATUS_ARM instances for property testing - lazily instantiated by
// BackupParameters_STATUS_ARMGenerator()
var backupParameters_STATUS_ARMGenerator gopter.Gen

// BackupParameters_STATUS_ARMGenerator returns a generator of BackupParameters_STATUS_ARM instances for property testing.
func BackupParameters_STATUS_ARMGenerator() gopter.Gen {
	if backupParameters_STATUS_ARMGenerator != nil {
		return backupParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForBackupParameters_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(BackupParameters_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	backupParameters_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return backupParameters_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForBackupParameters_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackupParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AzureBackupParams"] = AzureBackupParams_STATUS_ARMGenerator().Map(func(it AzureBackupParams_STATUS_ARM) *AzureBackupParams_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_BackupPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupPolicy_STATUS_ARM, BackupPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupPolicy_STATUS_ARM runs a test to see if a specific instance of BackupPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupPolicy_STATUS_ARM(subject BackupPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// BackupPolicy_STATUS_ARMGenerator()
var backupPolicy_STATUS_ARMGenerator gopter.Gen

// BackupPolicy_STATUS_ARMGenerator returns a generator of BackupPolicy_STATUS_ARM instances for property testing.
// We first initialize backupPolicy_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackupPolicy_STATUS_ARMGenerator() gopter.Gen {
	if backupPolicy_STATUS_ARMGenerator != nil {
		return backupPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupPolicy_STATUS_ARM(generators)
	backupPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupPolicy_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupPolicy_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForBackupPolicy_STATUS_ARM(generators)
	backupPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupPolicy_STATUS_ARM{}), generators)

	return backupPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackupPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackupPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DatasourceTypes"] = gen.SliceOf(gen.AlphaString())
	gens["ObjectType"] = gen.OneConstOf(BackupPolicy_ObjectType_STATUS_ARM_BackupPolicy)
}

// AddRelatedPropertyGeneratorsForBackupPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackupPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PolicyRules"] = gen.SliceOf(BasePolicyRule_STATUS_ARMGenerator())
}

func Test_BackupSchedule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupSchedule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupSchedule_STATUS_ARM, BackupSchedule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupSchedule_STATUS_ARM runs a test to see if a specific instance of BackupSchedule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupSchedule_STATUS_ARM(subject BackupSchedule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupSchedule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupSchedule_STATUS_ARM instances for property testing - lazily instantiated by
// BackupSchedule_STATUS_ARMGenerator()
var backupSchedule_STATUS_ARMGenerator gopter.Gen

// BackupSchedule_STATUS_ARMGenerator returns a generator of BackupSchedule_STATUS_ARM instances for property testing.
func BackupSchedule_STATUS_ARMGenerator() gopter.Gen {
	if backupSchedule_STATUS_ARMGenerator != nil {
		return backupSchedule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupSchedule_STATUS_ARM(generators)
	backupSchedule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupSchedule_STATUS_ARM{}), generators)

	return backupSchedule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackupSchedule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackupSchedule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RepeatingTimeIntervals"] = gen.SliceOf(gen.AlphaString())
	gens["TimeZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackupVaultsBackupPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackupVaultsBackupPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackupVaultsBackupPolicy_STATUS_ARM, BackupVaultsBackupPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackupVaultsBackupPolicy_STATUS_ARM runs a test to see if a specific instance of BackupVaultsBackupPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackupVaultsBackupPolicy_STATUS_ARM(subject BackupVaultsBackupPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackupVaultsBackupPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackupVaultsBackupPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// BackupVaultsBackupPolicy_STATUS_ARMGenerator()
var backupVaultsBackupPolicy_STATUS_ARMGenerator gopter.Gen

// BackupVaultsBackupPolicy_STATUS_ARMGenerator returns a generator of BackupVaultsBackupPolicy_STATUS_ARM instances for property testing.
// We first initialize backupVaultsBackupPolicy_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackupVaultsBackupPolicy_STATUS_ARMGenerator() gopter.Gen {
	if backupVaultsBackupPolicy_STATUS_ARMGenerator != nil {
		return backupVaultsBackupPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupVaultsBackupPolicy_STATUS_ARM(generators)
	backupVaultsBackupPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupVaultsBackupPolicy_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackupVaultsBackupPolicy_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForBackupVaultsBackupPolicy_STATUS_ARM(generators)
	backupVaultsBackupPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackupVaultsBackupPolicy_STATUS_ARM{}), generators)

	return backupVaultsBackupPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackupVaultsBackupPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackupVaultsBackupPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBackupVaultsBackupPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackupVaultsBackupPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(BaseBackupPolicy_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_BaseBackupPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BaseBackupPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBaseBackupPolicy_STATUS_ARM, BaseBackupPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBaseBackupPolicy_STATUS_ARM runs a test to see if a specific instance of BaseBackupPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBaseBackupPolicy_STATUS_ARM(subject BaseBackupPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BaseBackupPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BaseBackupPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// BaseBackupPolicy_STATUS_ARMGenerator()
var baseBackupPolicy_STATUS_ARMGenerator gopter.Gen

// BaseBackupPolicy_STATUS_ARMGenerator returns a generator of BaseBackupPolicy_STATUS_ARM instances for property testing.
func BaseBackupPolicy_STATUS_ARMGenerator() gopter.Gen {
	if baseBackupPolicy_STATUS_ARMGenerator != nil {
		return baseBackupPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForBaseBackupPolicy_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(BaseBackupPolicy_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	baseBackupPolicy_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return baseBackupPolicy_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForBaseBackupPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBaseBackupPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BackupPolicy"] = BackupPolicy_STATUS_ARMGenerator().Map(func(it BackupPolicy_STATUS_ARM) *BackupPolicy_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_BasePolicyRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BasePolicyRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBasePolicyRule_STATUS_ARM, BasePolicyRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBasePolicyRule_STATUS_ARM runs a test to see if a specific instance of BasePolicyRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBasePolicyRule_STATUS_ARM(subject BasePolicyRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BasePolicyRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BasePolicyRule_STATUS_ARM instances for property testing - lazily instantiated by
// BasePolicyRule_STATUS_ARMGenerator()
var basePolicyRule_STATUS_ARMGenerator gopter.Gen

// BasePolicyRule_STATUS_ARMGenerator returns a generator of BasePolicyRule_STATUS_ARM instances for property testing.
func BasePolicyRule_STATUS_ARMGenerator() gopter.Gen {
	if basePolicyRule_STATUS_ARMGenerator != nil {
		return basePolicyRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForBasePolicyRule_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(BasePolicyRule_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	basePolicyRule_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return basePolicyRule_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForBasePolicyRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBasePolicyRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AzureBackup"] = AzureBackupRule_STATUS_ARMGenerator().Map(func(it AzureBackupRule_STATUS_ARM) *AzureBackupRule_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["AzureRetention"] = AzureRetentionRule_STATUS_ARMGenerator().Map(func(it AzureRetentionRule_STATUS_ARM) *AzureRetentionRule_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_CopyOnExpiryOption_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CopyOnExpiryOption_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCopyOnExpiryOption_STATUS_ARM, CopyOnExpiryOption_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCopyOnExpiryOption_STATUS_ARM runs a test to see if a specific instance of CopyOnExpiryOption_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCopyOnExpiryOption_STATUS_ARM(subject CopyOnExpiryOption_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CopyOnExpiryOption_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CopyOnExpiryOption_STATUS_ARM instances for property testing - lazily instantiated by
// CopyOnExpiryOption_STATUS_ARMGenerator()
var copyOnExpiryOption_STATUS_ARMGenerator gopter.Gen

// CopyOnExpiryOption_STATUS_ARMGenerator returns a generator of CopyOnExpiryOption_STATUS_ARM instances for property testing.
func CopyOnExpiryOption_STATUS_ARMGenerator() gopter.Gen {
	if copyOnExpiryOption_STATUS_ARMGenerator != nil {
		return copyOnExpiryOption_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCopyOnExpiryOption_STATUS_ARM(generators)
	copyOnExpiryOption_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CopyOnExpiryOption_STATUS_ARM{}), generators)

	return copyOnExpiryOption_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCopyOnExpiryOption_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCopyOnExpiryOption_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ObjectType"] = gen.OneConstOf(CopyOnExpiryOption_ObjectType_STATUS_ARM_CopyOnExpiryOption)
}

func Test_CopyOption_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CopyOption_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCopyOption_STATUS_ARM, CopyOption_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCopyOption_STATUS_ARM runs a test to see if a specific instance of CopyOption_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCopyOption_STATUS_ARM(subject CopyOption_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CopyOption_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CopyOption_STATUS_ARM instances for property testing - lazily instantiated by
// CopyOption_STATUS_ARMGenerator()
var copyOption_STATUS_ARMGenerator gopter.Gen

// CopyOption_STATUS_ARMGenerator returns a generator of CopyOption_STATUS_ARM instances for property testing.
func CopyOption_STATUS_ARMGenerator() gopter.Gen {
	if copyOption_STATUS_ARMGenerator != nil {
		return copyOption_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCopyOption_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(CopyOption_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	copyOption_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return copyOption_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForCopyOption_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCopyOption_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CopyOnExpiry"] = CopyOnExpiryOption_STATUS_ARMGenerator().Map(func(it CopyOnExpiryOption_STATUS_ARM) *CopyOnExpiryOption_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["CustomCopy"] = CustomCopyOption_STATUS_ARMGenerator().Map(func(it CustomCopyOption_STATUS_ARM) *CustomCopyOption_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["ImmediateCopy"] = ImmediateCopyOption_STATUS_ARMGenerator().Map(func(it ImmediateCopyOption_STATUS_ARM) *ImmediateCopyOption_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_CustomCopyOption_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomCopyOption_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomCopyOption_STATUS_ARM, CustomCopyOption_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomCopyOption_STATUS_ARM runs a test to see if a specific instance of CustomCopyOption_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomCopyOption_STATUS_ARM(subject CustomCopyOption_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomCopyOption_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomCopyOption_STATUS_ARM instances for property testing - lazily instantiated by
// CustomCopyOption_STATUS_ARMGenerator()
var customCopyOption_STATUS_ARMGenerator gopter.Gen

// CustomCopyOption_STATUS_ARMGenerator returns a generator of CustomCopyOption_STATUS_ARM instances for property testing.
func CustomCopyOption_STATUS_ARMGenerator() gopter.Gen {
	if customCopyOption_STATUS_ARMGenerator != nil {
		return customCopyOption_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomCopyOption_STATUS_ARM(generators)
	customCopyOption_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CustomCopyOption_STATUS_ARM{}), generators)

	return customCopyOption_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomCopyOption_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomCopyOption_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Duration"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectType"] = gen.OneConstOf(CustomCopyOption_ObjectType_STATUS_ARM_CustomCopyOption)
}

func Test_DataStoreInfoBase_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataStoreInfoBase_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataStoreInfoBase_STATUS_ARM, DataStoreInfoBase_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataStoreInfoBase_STATUS_ARM runs a test to see if a specific instance of DataStoreInfoBase_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDataStoreInfoBase_STATUS_ARM(subject DataStoreInfoBase_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataStoreInfoBase_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataStoreInfoBase_STATUS_ARM instances for property testing - lazily instantiated by
// DataStoreInfoBase_STATUS_ARMGenerator()
var dataStoreInfoBase_STATUS_ARMGenerator gopter.Gen

// DataStoreInfoBase_STATUS_ARMGenerator returns a generator of DataStoreInfoBase_STATUS_ARM instances for property testing.
func DataStoreInfoBase_STATUS_ARMGenerator() gopter.Gen {
	if dataStoreInfoBase_STATUS_ARMGenerator != nil {
		return dataStoreInfoBase_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataStoreInfoBase_STATUS_ARM(generators)
	dataStoreInfoBase_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DataStoreInfoBase_STATUS_ARM{}), generators)

	return dataStoreInfoBase_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDataStoreInfoBase_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataStoreInfoBase_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DataStoreType"] = gen.PtrOf(gen.OneConstOf(DataStoreInfoBase_DataStoreType_STATUS_ARM_ArchiveStore, DataStoreInfoBase_DataStoreType_STATUS_ARM_OperationalStore, DataStoreInfoBase_DataStoreType_STATUS_ARM_VaultStore))
	gens["ObjectType"] = gen.PtrOf(gen.AlphaString())
}

func Test_Day_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Day_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDay_STATUS_ARM, Day_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDay_STATUS_ARM runs a test to see if a specific instance of Day_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDay_STATUS_ARM(subject Day_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Day_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Day_STATUS_ARM instances for property testing - lazily instantiated by Day_STATUS_ARMGenerator()
var day_STATUS_ARMGenerator gopter.Gen

// Day_STATUS_ARMGenerator returns a generator of Day_STATUS_ARM instances for property testing.
func Day_STATUS_ARMGenerator() gopter.Gen {
	if day_STATUS_ARMGenerator != nil {
		return day_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDay_STATUS_ARM(generators)
	day_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Day_STATUS_ARM{}), generators)

	return day_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDay_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDay_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Date"] = gen.PtrOf(gen.Int())
	gens["IsLast"] = gen.PtrOf(gen.Bool())
}

func Test_DeleteOption_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeleteOption_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeleteOption_STATUS_ARM, DeleteOption_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeleteOption_STATUS_ARM runs a test to see if a specific instance of DeleteOption_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeleteOption_STATUS_ARM(subject DeleteOption_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeleteOption_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeleteOption_STATUS_ARM instances for property testing - lazily instantiated by
// DeleteOption_STATUS_ARMGenerator()
var deleteOption_STATUS_ARMGenerator gopter.Gen

// DeleteOption_STATUS_ARMGenerator returns a generator of DeleteOption_STATUS_ARM instances for property testing.
func DeleteOption_STATUS_ARMGenerator() gopter.Gen {
	if deleteOption_STATUS_ARMGenerator != nil {
		return deleteOption_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDeleteOption_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(DeleteOption_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	deleteOption_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return deleteOption_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForDeleteOption_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeleteOption_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AbsoluteDeleteOption"] = AbsoluteDeleteOption_STATUS_ARMGenerator().Map(func(it AbsoluteDeleteOption_STATUS_ARM) *AbsoluteDeleteOption_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_ImmediateCopyOption_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImmediateCopyOption_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImmediateCopyOption_STATUS_ARM, ImmediateCopyOption_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImmediateCopyOption_STATUS_ARM runs a test to see if a specific instance of ImmediateCopyOption_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImmediateCopyOption_STATUS_ARM(subject ImmediateCopyOption_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImmediateCopyOption_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImmediateCopyOption_STATUS_ARM instances for property testing - lazily instantiated by
// ImmediateCopyOption_STATUS_ARMGenerator()
var immediateCopyOption_STATUS_ARMGenerator gopter.Gen

// ImmediateCopyOption_STATUS_ARMGenerator returns a generator of ImmediateCopyOption_STATUS_ARM instances for property testing.
func ImmediateCopyOption_STATUS_ARMGenerator() gopter.Gen {
	if immediateCopyOption_STATUS_ARMGenerator != nil {
		return immediateCopyOption_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImmediateCopyOption_STATUS_ARM(generators)
	immediateCopyOption_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ImmediateCopyOption_STATUS_ARM{}), generators)

	return immediateCopyOption_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForImmediateCopyOption_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImmediateCopyOption_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ObjectType"] = gen.OneConstOf(ImmediateCopyOption_ObjectType_STATUS_ARM_ImmediateCopyOption)
}

func Test_RetentionTag_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RetentionTag_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRetentionTag_STATUS_ARM, RetentionTag_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRetentionTag_STATUS_ARM runs a test to see if a specific instance of RetentionTag_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRetentionTag_STATUS_ARM(subject RetentionTag_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RetentionTag_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RetentionTag_STATUS_ARM instances for property testing - lazily instantiated by
// RetentionTag_STATUS_ARMGenerator()
var retentionTag_STATUS_ARMGenerator gopter.Gen

// RetentionTag_STATUS_ARMGenerator returns a generator of RetentionTag_STATUS_ARM instances for property testing.
func RetentionTag_STATUS_ARMGenerator() gopter.Gen {
	if retentionTag_STATUS_ARMGenerator != nil {
		return retentionTag_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRetentionTag_STATUS_ARM(generators)
	retentionTag_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RetentionTag_STATUS_ARM{}), generators)

	return retentionTag_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRetentionTag_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRetentionTag_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ETag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["TagName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScheduleBasedBackupCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleBasedBackupCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleBasedBackupCriteria_STATUS_ARM, ScheduleBasedBackupCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleBasedBackupCriteria_STATUS_ARM runs a test to see if a specific instance of ScheduleBasedBackupCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleBasedBackupCriteria_STATUS_ARM(subject ScheduleBasedBackupCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleBasedBackupCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleBasedBackupCriteria_STATUS_ARM instances for property testing - lazily instantiated by
// ScheduleBasedBackupCriteria_STATUS_ARMGenerator()
var scheduleBasedBackupCriteria_STATUS_ARMGenerator gopter.Gen

// ScheduleBasedBackupCriteria_STATUS_ARMGenerator returns a generator of ScheduleBasedBackupCriteria_STATUS_ARM instances for property testing.
// We first initialize scheduleBasedBackupCriteria_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ScheduleBasedBackupCriteria_STATUS_ARMGenerator() gopter.Gen {
	if scheduleBasedBackupCriteria_STATUS_ARMGenerator != nil {
		return scheduleBasedBackupCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleBasedBackupCriteria_STATUS_ARM(generators)
	scheduleBasedBackupCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ScheduleBasedBackupCriteria_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleBasedBackupCriteria_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForScheduleBasedBackupCriteria_STATUS_ARM(generators)
	scheduleBasedBackupCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ScheduleBasedBackupCriteria_STATUS_ARM{}), generators)

	return scheduleBasedBackupCriteria_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForScheduleBasedBackupCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleBasedBackupCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AbsoluteCriteria"] = gen.SliceOf(gen.OneConstOf(
		ScheduleBasedBackupCriteria_AbsoluteCriteria_STATUS_ARM_AllBackup,
		ScheduleBasedBackupCriteria_AbsoluteCriteria_STATUS_ARM_FirstOfDay,
		ScheduleBasedBackupCriteria_AbsoluteCriteria_STATUS_ARM_FirstOfMonth,
		ScheduleBasedBackupCriteria_AbsoluteCriteria_STATUS_ARM_FirstOfWeek,
		ScheduleBasedBackupCriteria_AbsoluteCriteria_STATUS_ARM_FirstOfYear))
	gens["DaysOfTheWeek"] = gen.SliceOf(gen.OneConstOf(
		ScheduleBasedBackupCriteria_DaysOfTheWeek_STATUS_ARM_Friday,
		ScheduleBasedBackupCriteria_DaysOfTheWeek_STATUS_ARM_Monday,
		ScheduleBasedBackupCriteria_DaysOfTheWeek_STATUS_ARM_Saturday,
		ScheduleBasedBackupCriteria_DaysOfTheWeek_STATUS_ARM_Sunday,
		ScheduleBasedBackupCriteria_DaysOfTheWeek_STATUS_ARM_Thursday,
		ScheduleBasedBackupCriteria_DaysOfTheWeek_STATUS_ARM_Tuesday,
		ScheduleBasedBackupCriteria_DaysOfTheWeek_STATUS_ARM_Wednesday))
	gens["MonthsOfYear"] = gen.SliceOf(gen.OneConstOf(
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_April,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_August,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_December,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_February,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_January,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_July,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_June,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_March,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_May,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_November,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_October,
		ScheduleBasedBackupCriteria_MonthsOfYear_STATUS_ARM_September))
	gens["ObjectType"] = gen.OneConstOf(ScheduleBasedBackupCriteria_ObjectType_STATUS_ARM_ScheduleBasedBackupCriteria)
	gens["ScheduleTimes"] = gen.SliceOf(gen.AlphaString())
	gens["WeeksOfTheMonth"] = gen.SliceOf(gen.OneConstOf(
		ScheduleBasedBackupCriteria_WeeksOfTheMonth_STATUS_ARM_First,
		ScheduleBasedBackupCriteria_WeeksOfTheMonth_STATUS_ARM_Fourth,
		ScheduleBasedBackupCriteria_WeeksOfTheMonth_STATUS_ARM_Last,
		ScheduleBasedBackupCriteria_WeeksOfTheMonth_STATUS_ARM_Second,
		ScheduleBasedBackupCriteria_WeeksOfTheMonth_STATUS_ARM_Third))
}

// AddRelatedPropertyGeneratorsForScheduleBasedBackupCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduleBasedBackupCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DaysOfMonth"] = gen.SliceOf(Day_STATUS_ARMGenerator())
}

func Test_ScheduleBasedTriggerContext_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduleBasedTriggerContext_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduleBasedTriggerContext_STATUS_ARM, ScheduleBasedTriggerContext_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduleBasedTriggerContext_STATUS_ARM runs a test to see if a specific instance of ScheduleBasedTriggerContext_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduleBasedTriggerContext_STATUS_ARM(subject ScheduleBasedTriggerContext_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScheduleBasedTriggerContext_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScheduleBasedTriggerContext_STATUS_ARM instances for property testing - lazily instantiated by
// ScheduleBasedTriggerContext_STATUS_ARMGenerator()
var scheduleBasedTriggerContext_STATUS_ARMGenerator gopter.Gen

// ScheduleBasedTriggerContext_STATUS_ARMGenerator returns a generator of ScheduleBasedTriggerContext_STATUS_ARM instances for property testing.
// We first initialize scheduleBasedTriggerContext_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ScheduleBasedTriggerContext_STATUS_ARMGenerator() gopter.Gen {
	if scheduleBasedTriggerContext_STATUS_ARMGenerator != nil {
		return scheduleBasedTriggerContext_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleBasedTriggerContext_STATUS_ARM(generators)
	scheduleBasedTriggerContext_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ScheduleBasedTriggerContext_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScheduleBasedTriggerContext_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForScheduleBasedTriggerContext_STATUS_ARM(generators)
	scheduleBasedTriggerContext_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ScheduleBasedTriggerContext_STATUS_ARM{}), generators)

	return scheduleBasedTriggerContext_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForScheduleBasedTriggerContext_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScheduleBasedTriggerContext_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ObjectType"] = gen.OneConstOf(ScheduleBasedTriggerContext_ObjectType_STATUS_ARM_ScheduleBasedTriggerContext)
}

// AddRelatedPropertyGeneratorsForScheduleBasedTriggerContext_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduleBasedTriggerContext_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Schedule"] = gen.PtrOf(BackupSchedule_STATUS_ARMGenerator())
	gens["TaggingCriteria"] = gen.SliceOf(TaggingCriteria_STATUS_ARMGenerator())
}

func Test_SourceLifeCycle_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SourceLifeCycle_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSourceLifeCycle_STATUS_ARM, SourceLifeCycle_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSourceLifeCycle_STATUS_ARM runs a test to see if a specific instance of SourceLifeCycle_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSourceLifeCycle_STATUS_ARM(subject SourceLifeCycle_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SourceLifeCycle_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SourceLifeCycle_STATUS_ARM instances for property testing - lazily instantiated by
// SourceLifeCycle_STATUS_ARMGenerator()
var sourceLifeCycle_STATUS_ARMGenerator gopter.Gen

// SourceLifeCycle_STATUS_ARMGenerator returns a generator of SourceLifeCycle_STATUS_ARM instances for property testing.
func SourceLifeCycle_STATUS_ARMGenerator() gopter.Gen {
	if sourceLifeCycle_STATUS_ARMGenerator != nil {
		return sourceLifeCycle_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSourceLifeCycle_STATUS_ARM(generators)
	sourceLifeCycle_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SourceLifeCycle_STATUS_ARM{}), generators)

	return sourceLifeCycle_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForSourceLifeCycle_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSourceLifeCycle_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DeleteAfter"] = gen.PtrOf(DeleteOption_STATUS_ARMGenerator())
	gens["SourceDataStore"] = gen.PtrOf(DataStoreInfoBase_STATUS_ARMGenerator())
	gens["TargetDataStoreCopySettings"] = gen.SliceOf(TargetCopySetting_STATUS_ARMGenerator())
}

func Test_TaggingCriteria_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TaggingCriteria_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTaggingCriteria_STATUS_ARM, TaggingCriteria_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTaggingCriteria_STATUS_ARM runs a test to see if a specific instance of TaggingCriteria_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTaggingCriteria_STATUS_ARM(subject TaggingCriteria_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TaggingCriteria_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TaggingCriteria_STATUS_ARM instances for property testing - lazily instantiated by
// TaggingCriteria_STATUS_ARMGenerator()
var taggingCriteria_STATUS_ARMGenerator gopter.Gen

// TaggingCriteria_STATUS_ARMGenerator returns a generator of TaggingCriteria_STATUS_ARM instances for property testing.
// We first initialize taggingCriteria_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func TaggingCriteria_STATUS_ARMGenerator() gopter.Gen {
	if taggingCriteria_STATUS_ARMGenerator != nil {
		return taggingCriteria_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTaggingCriteria_STATUS_ARM(generators)
	taggingCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(TaggingCriteria_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTaggingCriteria_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForTaggingCriteria_STATUS_ARM(generators)
	taggingCriteria_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(TaggingCriteria_STATUS_ARM{}), generators)

	return taggingCriteria_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForTaggingCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTaggingCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IsDefault"] = gen.PtrOf(gen.Bool())
	gens["TaggingPriority"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForTaggingCriteria_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTaggingCriteria_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Criteria"] = gen.SliceOf(BackupCriteria_STATUS_ARMGenerator())
	gens["TagInfo"] = gen.PtrOf(RetentionTag_STATUS_ARMGenerator())
}

func Test_TargetCopySetting_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TargetCopySetting_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTargetCopySetting_STATUS_ARM, TargetCopySetting_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTargetCopySetting_STATUS_ARM runs a test to see if a specific instance of TargetCopySetting_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTargetCopySetting_STATUS_ARM(subject TargetCopySetting_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TargetCopySetting_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TargetCopySetting_STATUS_ARM instances for property testing - lazily instantiated by
// TargetCopySetting_STATUS_ARMGenerator()
var targetCopySetting_STATUS_ARMGenerator gopter.Gen

// TargetCopySetting_STATUS_ARMGenerator returns a generator of TargetCopySetting_STATUS_ARM instances for property testing.
func TargetCopySetting_STATUS_ARMGenerator() gopter.Gen {
	if targetCopySetting_STATUS_ARMGenerator != nil {
		return targetCopySetting_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForTargetCopySetting_STATUS_ARM(generators)
	targetCopySetting_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(TargetCopySetting_STATUS_ARM{}), generators)

	return targetCopySetting_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForTargetCopySetting_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTargetCopySetting_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CopyAfter"] = gen.PtrOf(CopyOption_STATUS_ARMGenerator())
	gens["DataStore"] = gen.PtrOf(DataStoreInfoBase_STATUS_ARMGenerator())
}

func Test_TriggerContext_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TriggerContext_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTriggerContext_STATUS_ARM, TriggerContext_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTriggerContext_STATUS_ARM runs a test to see if a specific instance of TriggerContext_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTriggerContext_STATUS_ARM(subject TriggerContext_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual TriggerContext_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of TriggerContext_STATUS_ARM instances for property testing - lazily instantiated by
// TriggerContext_STATUS_ARMGenerator()
var triggerContext_STATUS_ARMGenerator gopter.Gen

// TriggerContext_STATUS_ARMGenerator returns a generator of TriggerContext_STATUS_ARM instances for property testing.
func TriggerContext_STATUS_ARMGenerator() gopter.Gen {
	if triggerContext_STATUS_ARMGenerator != nil {
		return triggerContext_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForTriggerContext_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(TriggerContext_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	triggerContext_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return triggerContext_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForTriggerContext_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForTriggerContext_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Adhoc"] = AdhocBasedTriggerContext_STATUS_ARMGenerator().Map(func(it AdhocBasedTriggerContext_STATUS_ARM) *AdhocBasedTriggerContext_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["Schedule"] = ScheduleBasedTriggerContext_STATUS_ARMGenerator().Map(func(it ScheduleBasedTriggerContext_STATUS_ARM) *ScheduleBasedTriggerContext_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}
