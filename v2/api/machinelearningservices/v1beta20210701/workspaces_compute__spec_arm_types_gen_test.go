// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_WorkspacesCompute_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspacesCompute_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspacesCompute_SpecARM, WorkspacesCompute_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspacesCompute_SpecARM runs a test to see if a specific instance of WorkspacesCompute_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspacesCompute_SpecARM(subject WorkspacesCompute_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspacesCompute_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspacesCompute_SpecARM instances for property testing - lazily instantiated by
// WorkspacesCompute_SpecARMGenerator()
var workspacesCompute_SpecARMGenerator gopter.Gen

// WorkspacesCompute_SpecARMGenerator returns a generator of WorkspacesCompute_SpecARM instances for property testing.
// We first initialize workspacesCompute_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspacesCompute_SpecARMGenerator() gopter.Gen {
	if workspacesCompute_SpecARMGenerator != nil {
		return workspacesCompute_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesCompute_SpecARM(generators)
	workspacesCompute_SpecARMGenerator = gen.Struct(reflect.TypeOf(WorkspacesCompute_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesCompute_SpecARM(generators)
	AddRelatedPropertyGeneratorsForWorkspacesCompute_SpecARM(generators)
	workspacesCompute_SpecARMGenerator = gen.Struct(reflect.TypeOf(WorkspacesCompute_SpecARM{}), generators)

	return workspacesCompute_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspacesCompute_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspacesCompute_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspacesCompute_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspacesCompute_SpecARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(IdentityARMGenerator())
	gens["Properties"] = gen.PtrOf(ComputeARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataARMGenerator())
}

func Test_ComputeARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeARM, ComputeARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeARM runs a test to see if a specific instance of ComputeARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeARM(subject ComputeARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeARM instances for property testing - lazily instantiated by ComputeARMGenerator()
var computeARMGenerator gopter.Gen

// ComputeARMGenerator returns a generator of ComputeARM instances for property testing.
func ComputeARMGenerator() gopter.Gen {
	if computeARMGenerator != nil {
		return computeARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeARM(generators)
	computeARMGenerator = gen.Struct(reflect.TypeOf(ComputeARM{}), generators)

	return computeARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(
		ComputeType_AKS,
		ComputeType_AmlCompute,
		ComputeType_ComputeInstance,
		ComputeType_DataFactory,
		ComputeType_DataLakeAnalytics,
		ComputeType_Databricks,
		ComputeType_HDInsight,
		ComputeType_Kubernetes,
		ComputeType_SynapseSpark,
		ComputeType_VirtualMachine))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}
