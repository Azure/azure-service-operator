// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_WorkspaceConnection_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnection_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnection_STATUSARM, WorkspaceConnection_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnection_STATUSARM runs a test to see if a specific instance of WorkspaceConnection_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnection_STATUSARM(subject WorkspaceConnection_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnection_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnection_STATUSARM instances for property testing - lazily instantiated by
// WorkspaceConnection_STATUSARMGenerator()
var workspaceConnection_STATUSARMGenerator gopter.Gen

// WorkspaceConnection_STATUSARMGenerator returns a generator of WorkspaceConnection_STATUSARM instances for property testing.
// We first initialize workspaceConnection_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspaceConnection_STATUSARMGenerator() gopter.Gen {
	if workspaceConnection_STATUSARMGenerator != nil {
		return workspaceConnection_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnection_STATUSARM(generators)
	workspaceConnection_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnection_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnection_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForWorkspaceConnection_STATUSARM(generators)
	workspaceConnection_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnection_STATUSARM{}), generators)

	return workspaceConnection_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnection_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnection_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspaceConnection_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaceConnection_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WorkspaceConnectionProps_STATUSARMGenerator())
}

func Test_WorkspaceConnectionProps_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionProps_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionProps_STATUSARM, WorkspaceConnectionProps_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionProps_STATUSARM runs a test to see if a specific instance of WorkspaceConnectionProps_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionProps_STATUSARM(subject WorkspaceConnectionProps_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionProps_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionProps_STATUSARM instances for property testing - lazily instantiated by
// WorkspaceConnectionProps_STATUSARMGenerator()
var workspaceConnectionProps_STATUSARMGenerator gopter.Gen

// WorkspaceConnectionProps_STATUSARMGenerator returns a generator of WorkspaceConnectionProps_STATUSARM instances for property testing.
func WorkspaceConnectionProps_STATUSARMGenerator() gopter.Gen {
	if workspaceConnectionProps_STATUSARMGenerator != nil {
		return workspaceConnectionProps_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionProps_STATUSARM(generators)
	workspaceConnectionProps_STATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionProps_STATUSARM{}), generators)

	return workspaceConnectionProps_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionProps_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionProps_STATUSARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.PtrOf(gen.AlphaString())
	gens["Category"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(WorkspaceConnectionProps_STATUS_ValueFormat_JSON))
}
