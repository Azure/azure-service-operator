// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Workspace_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspace_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceSTATUSARM, WorkspaceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceSTATUSARM runs a test to see if a specific instance of Workspace_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceSTATUSARM(subject Workspace_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspace_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspace_STATUSARM instances for property testing - lazily instantiated by WorkspaceSTATUSARMGenerator()
var workspaceSTATUSARMGenerator gopter.Gen

// WorkspaceSTATUSARMGenerator returns a generator of Workspace_STATUSARM instances for property testing.
// We first initialize workspaceSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspaceSTATUSARMGenerator() gopter.Gen {
	if workspaceSTATUSARMGenerator != nil {
		return workspaceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceSTATUSARM(generators)
	workspaceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Workspace_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForWorkspaceSTATUSARM(generators)
	workspaceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Workspace_STATUSARM{}), generators)

	return workspaceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspaceSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(IdentitySTATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(WorkspacePropertiesSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuSTATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_WorkspaceProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspacePropertiesSTATUSARM, WorkspacePropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspacePropertiesSTATUSARM runs a test to see if a specific instance of WorkspaceProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspacePropertiesSTATUSARM(subject WorkspaceProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceProperties_STATUSARM instances for property testing - lazily instantiated by
// WorkspacePropertiesSTATUSARMGenerator()
var workspacePropertiesSTATUSARMGenerator gopter.Gen

// WorkspacePropertiesSTATUSARMGenerator returns a generator of WorkspaceProperties_STATUSARM instances for property testing.
// We first initialize workspacePropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspacePropertiesSTATUSARMGenerator() gopter.Gen {
	if workspacePropertiesSTATUSARMGenerator != nil {
		return workspacePropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacePropertiesSTATUSARM(generators)
	workspacePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacePropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForWorkspacePropertiesSTATUSARM(generators)
	workspacePropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_STATUSARM{}), generators)

	return workspacePropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspacePropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspacePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["AllowPublicAccessWhenBehindVnet"] = gen.PtrOf(gen.Bool())
	gens["ApplicationInsights"] = gen.PtrOf(gen.AlphaString())
	gens["ContainerRegistry"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DiscoveryUrl"] = gen.PtrOf(gen.AlphaString())
	gens["FriendlyName"] = gen.PtrOf(gen.AlphaString())
	gens["HbiWorkspace"] = gen.PtrOf(gen.Bool())
	gens["ImageBuildCompute"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVault"] = gen.PtrOf(gen.AlphaString())
	gens["MlFlowTrackingUri"] = gen.PtrOf(gen.AlphaString())
	gens["PrimaryUserAssignedIdentity"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkCount"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		WorkspacePropertiesSTATUSProvisioningState_Canceled,
		WorkspacePropertiesSTATUSProvisioningState_Creating,
		WorkspacePropertiesSTATUSProvisioningState_Deleting,
		WorkspacePropertiesSTATUSProvisioningState_Failed,
		WorkspacePropertiesSTATUSProvisioningState_Succeeded,
		WorkspacePropertiesSTATUSProvisioningState_Unknown,
		WorkspacePropertiesSTATUSProvisioningState_Updating))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(WorkspacePropertiesSTATUSPublicNetworkAccess_Disabled, WorkspacePropertiesSTATUSPublicNetworkAccess_Enabled))
	gens["ServiceProvisionedResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccount"] = gen.PtrOf(gen.AlphaString())
	gens["StorageHnsEnabled"] = gen.PtrOf(gen.Bool())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspacePropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspacePropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Encryption"] = gen.PtrOf(EncryptionPropertySTATUSARMGenerator())
	gens["NotebookInfo"] = gen.PtrOf(NotebookResourceInfoSTATUSARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator())
	gens["ServiceManagedResourcesSettings"] = gen.PtrOf(ServiceManagedResourcesSettingsSTATUSARMGenerator())
	gens["SharedPrivateLinkResources"] = gen.SliceOf(SharedPrivateLinkResourceSTATUSARMGenerator())
}

func Test_EncryptionProperty_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionProperty_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionPropertySTATUSARM, EncryptionPropertySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionPropertySTATUSARM runs a test to see if a specific instance of EncryptionProperty_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionPropertySTATUSARM(subject EncryptionProperty_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionProperty_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionProperty_STATUSARM instances for property testing - lazily instantiated by
// EncryptionPropertySTATUSARMGenerator()
var encryptionPropertySTATUSARMGenerator gopter.Gen

// EncryptionPropertySTATUSARMGenerator returns a generator of EncryptionProperty_STATUSARM instances for property testing.
// We first initialize encryptionPropertySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EncryptionPropertySTATUSARMGenerator() gopter.Gen {
	if encryptionPropertySTATUSARMGenerator != nil {
		return encryptionPropertySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionPropertySTATUSARM(generators)
	encryptionPropertySTATUSARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperty_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionPropertySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForEncryptionPropertySTATUSARM(generators)
	encryptionPropertySTATUSARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperty_STATUSARM{}), generators)

	return encryptionPropertySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionPropertySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionPropertySTATUSARM(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(gen.OneConstOf(EncryptionPropertySTATUSStatus_Disabled, EncryptionPropertySTATUSStatus_Enabled))
}

// AddRelatedPropertyGeneratorsForEncryptionPropertySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionPropertySTATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(IdentityForCmkSTATUSARMGenerator())
	gens["KeyVaultProperties"] = gen.PtrOf(KeyVaultPropertiesSTATUSARMGenerator())
}

func Test_NotebookResourceInfo_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NotebookResourceInfo_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNotebookResourceInfoSTATUSARM, NotebookResourceInfoSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNotebookResourceInfoSTATUSARM runs a test to see if a specific instance of NotebookResourceInfo_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNotebookResourceInfoSTATUSARM(subject NotebookResourceInfo_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NotebookResourceInfo_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NotebookResourceInfo_STATUSARM instances for property testing - lazily instantiated by
// NotebookResourceInfoSTATUSARMGenerator()
var notebookResourceInfoSTATUSARMGenerator gopter.Gen

// NotebookResourceInfoSTATUSARMGenerator returns a generator of NotebookResourceInfo_STATUSARM instances for property testing.
// We first initialize notebookResourceInfoSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NotebookResourceInfoSTATUSARMGenerator() gopter.Gen {
	if notebookResourceInfoSTATUSARMGenerator != nil {
		return notebookResourceInfoSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotebookResourceInfoSTATUSARM(generators)
	notebookResourceInfoSTATUSARMGenerator = gen.Struct(reflect.TypeOf(NotebookResourceInfo_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotebookResourceInfoSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForNotebookResourceInfoSTATUSARM(generators)
	notebookResourceInfoSTATUSARMGenerator = gen.Struct(reflect.TypeOf(NotebookResourceInfo_STATUSARM{}), generators)

	return notebookResourceInfoSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNotebookResourceInfoSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNotebookResourceInfoSTATUSARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNotebookResourceInfoSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNotebookResourceInfoSTATUSARM(gens map[string]gopter.Gen) {
	gens["NotebookPreparationError"] = gen.PtrOf(NotebookPreparationErrorSTATUSARMGenerator())
}

func Test_PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM, PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM(subject PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM instances for property testing - lazily
// instantiated by PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator()
var privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator gopter.Gen

// PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator returns a generator of PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM instances for property testing.
// We first initialize privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator() gopter.Gen {
	if privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator != nil {
		return privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM(generators)
	privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM(generators)
	privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_SubResourceEmbeddedARM{}), generators)

	return privateEndpointConnectionSTATUSSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnectionSTATUSSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(IdentitySTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuSTATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_ServiceManagedResourcesSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceManagedResourcesSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceManagedResourcesSettingsSTATUSARM, ServiceManagedResourcesSettingsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceManagedResourcesSettingsSTATUSARM runs a test to see if a specific instance of ServiceManagedResourcesSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceManagedResourcesSettingsSTATUSARM(subject ServiceManagedResourcesSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceManagedResourcesSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceManagedResourcesSettings_STATUSARM instances for property testing - lazily instantiated by
// ServiceManagedResourcesSettingsSTATUSARMGenerator()
var serviceManagedResourcesSettingsSTATUSARMGenerator gopter.Gen

// ServiceManagedResourcesSettingsSTATUSARMGenerator returns a generator of ServiceManagedResourcesSettings_STATUSARM instances for property testing.
func ServiceManagedResourcesSettingsSTATUSARMGenerator() gopter.Gen {
	if serviceManagedResourcesSettingsSTATUSARMGenerator != nil {
		return serviceManagedResourcesSettingsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServiceManagedResourcesSettingsSTATUSARM(generators)
	serviceManagedResourcesSettingsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ServiceManagedResourcesSettings_STATUSARM{}), generators)

	return serviceManagedResourcesSettingsSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForServiceManagedResourcesSettingsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceManagedResourcesSettingsSTATUSARM(gens map[string]gopter.Gen) {
	gens["CosmosDb"] = gen.PtrOf(CosmosDbSettingsSTATUSARMGenerator())
}

func Test_SharedPrivateLinkResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResourceSTATUSARM, SharedPrivateLinkResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResourceSTATUSARM runs a test to see if a specific instance of SharedPrivateLinkResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResourceSTATUSARM(subject SharedPrivateLinkResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResource_STATUSARM instances for property testing - lazily instantiated by
// SharedPrivateLinkResourceSTATUSARMGenerator()
var sharedPrivateLinkResourceSTATUSARMGenerator gopter.Gen

// SharedPrivateLinkResourceSTATUSARMGenerator returns a generator of SharedPrivateLinkResource_STATUSARM instances for property testing.
// We first initialize sharedPrivateLinkResourceSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SharedPrivateLinkResourceSTATUSARMGenerator() gopter.Gen {
	if sharedPrivateLinkResourceSTATUSARMGenerator != nil {
		return sharedPrivateLinkResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceSTATUSARM(generators)
	sharedPrivateLinkResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceSTATUSARM(generators)
	sharedPrivateLinkResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_STATUSARM{}), generators)

	return sharedPrivateLinkResourceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SharedPrivateLinkResourcePropertySTATUSARMGenerator())
}

func Test_CosmosDbSettings_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CosmosDbSettings_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCosmosDbSettingsSTATUSARM, CosmosDbSettingsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCosmosDbSettingsSTATUSARM runs a test to see if a specific instance of CosmosDbSettings_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCosmosDbSettingsSTATUSARM(subject CosmosDbSettings_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CosmosDbSettings_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CosmosDbSettings_STATUSARM instances for property testing - lazily instantiated by
// CosmosDbSettingsSTATUSARMGenerator()
var cosmosDbSettingsSTATUSARMGenerator gopter.Gen

// CosmosDbSettingsSTATUSARMGenerator returns a generator of CosmosDbSettings_STATUSARM instances for property testing.
func CosmosDbSettingsSTATUSARMGenerator() gopter.Gen {
	if cosmosDbSettingsSTATUSARMGenerator != nil {
		return cosmosDbSettingsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCosmosDbSettingsSTATUSARM(generators)
	cosmosDbSettingsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(CosmosDbSettings_STATUSARM{}), generators)

	return cosmosDbSettingsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCosmosDbSettingsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCosmosDbSettingsSTATUSARM(gens map[string]gopter.Gen) {
	gens["CollectionsThroughput"] = gen.PtrOf(gen.Int())
}

func Test_IdentityForCmk_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IdentityForCmk_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIdentityForCmkSTATUSARM, IdentityForCmkSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIdentityForCmkSTATUSARM runs a test to see if a specific instance of IdentityForCmk_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIdentityForCmkSTATUSARM(subject IdentityForCmk_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IdentityForCmk_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IdentityForCmk_STATUSARM instances for property testing - lazily instantiated by
// IdentityForCmkSTATUSARMGenerator()
var identityForCmkSTATUSARMGenerator gopter.Gen

// IdentityForCmkSTATUSARMGenerator returns a generator of IdentityForCmk_STATUSARM instances for property testing.
func IdentityForCmkSTATUSARMGenerator() gopter.Gen {
	if identityForCmkSTATUSARMGenerator != nil {
		return identityForCmkSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIdentityForCmkSTATUSARM(generators)
	identityForCmkSTATUSARMGenerator = gen.Struct(reflect.TypeOf(IdentityForCmk_STATUSARM{}), generators)

	return identityForCmkSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIdentityForCmkSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIdentityForCmkSTATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentity"] = gen.PtrOf(gen.AlphaString())
}

func Test_KeyVaultProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultPropertiesSTATUSARM, KeyVaultPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultPropertiesSTATUSARM runs a test to see if a specific instance of KeyVaultProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultPropertiesSTATUSARM(subject KeyVaultProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultProperties_STATUSARM instances for property testing - lazily instantiated by
// KeyVaultPropertiesSTATUSARMGenerator()
var keyVaultPropertiesSTATUSARMGenerator gopter.Gen

// KeyVaultPropertiesSTATUSARMGenerator returns a generator of KeyVaultProperties_STATUSARM instances for property testing.
func KeyVaultPropertiesSTATUSARMGenerator() gopter.Gen {
	if keyVaultPropertiesSTATUSARMGenerator != nil {
		return keyVaultPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultPropertiesSTATUSARM(generators)
	keyVaultPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultProperties_STATUSARM{}), generators)

	return keyVaultPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["IdentityClientId"] = gen.PtrOf(gen.AlphaString())
	gens["KeyIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVaultArmId"] = gen.PtrOf(gen.AlphaString())
}

func Test_NotebookPreparationError_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NotebookPreparationError_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNotebookPreparationErrorSTATUSARM, NotebookPreparationErrorSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNotebookPreparationErrorSTATUSARM runs a test to see if a specific instance of NotebookPreparationError_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNotebookPreparationErrorSTATUSARM(subject NotebookPreparationError_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NotebookPreparationError_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NotebookPreparationError_STATUSARM instances for property testing - lazily instantiated by
// NotebookPreparationErrorSTATUSARMGenerator()
var notebookPreparationErrorSTATUSARMGenerator gopter.Gen

// NotebookPreparationErrorSTATUSARMGenerator returns a generator of NotebookPreparationError_STATUSARM instances for property testing.
func NotebookPreparationErrorSTATUSARMGenerator() gopter.Gen {
	if notebookPreparationErrorSTATUSARMGenerator != nil {
		return notebookPreparationErrorSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotebookPreparationErrorSTATUSARM(generators)
	notebookPreparationErrorSTATUSARMGenerator = gen.Struct(reflect.TypeOf(NotebookPreparationError_STATUSARM{}), generators)

	return notebookPreparationErrorSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForNotebookPreparationErrorSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNotebookPreparationErrorSTATUSARM(gens map[string]gopter.Gen) {
	gens["ErrorMessage"] = gen.PtrOf(gen.AlphaString())
	gens["StatusCode"] = gen.PtrOf(gen.Int())
}

func Test_SharedPrivateLinkResourceProperty_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResourceProperty_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResourcePropertySTATUSARM, SharedPrivateLinkResourcePropertySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResourcePropertySTATUSARM runs a test to see if a specific instance of SharedPrivateLinkResourceProperty_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResourcePropertySTATUSARM(subject SharedPrivateLinkResourceProperty_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResourceProperty_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResourceProperty_STATUSARM instances for property testing - lazily instantiated by
// SharedPrivateLinkResourcePropertySTATUSARMGenerator()
var sharedPrivateLinkResourcePropertySTATUSARMGenerator gopter.Gen

// SharedPrivateLinkResourcePropertySTATUSARMGenerator returns a generator of SharedPrivateLinkResourceProperty_STATUSARM instances for property testing.
func SharedPrivateLinkResourcePropertySTATUSARMGenerator() gopter.Gen {
	if sharedPrivateLinkResourcePropertySTATUSARMGenerator != nil {
		return sharedPrivateLinkResourcePropertySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourcePropertySTATUSARM(generators)
	sharedPrivateLinkResourcePropertySTATUSARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResourceProperty_STATUSARM{}), generators)

	return sharedPrivateLinkResourcePropertySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResourcePropertySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResourcePropertySTATUSARM(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["RequestMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointServiceConnectionStatus_STATUS_Approved,
		PrivateEndpointServiceConnectionStatus_STATUS_Disconnected,
		PrivateEndpointServiceConnectionStatus_STATUS_Pending,
		PrivateEndpointServiceConnectionStatus_STATUS_Rejected,
		PrivateEndpointServiceConnectionStatus_STATUS_Timeout))
}
