// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210701

import (
	"encoding/json"
	v20210701s "github.com/Azure/azure-service-operator/v2/api/machinelearningservices/v1beta20210701storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_WorkspacesCompute_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WorkspacesCompute to hub returns original",
		prop.ForAll(RunResourceConversionTestForWorkspacesCompute, WorkspacesComputeGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForWorkspacesCompute tests if a specific instance of WorkspacesCompute round trips to the hub storage version and back losslessly
func RunResourceConversionTestForWorkspacesCompute(subject WorkspacesCompute) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20210701s.WorkspacesCompute
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual WorkspacesCompute
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WorkspacesCompute_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WorkspacesCompute to WorkspacesCompute via AssignPropertiesToWorkspacesCompute & AssignPropertiesFromWorkspacesCompute returns original",
		prop.ForAll(RunPropertyAssignmentTestForWorkspacesCompute, WorkspacesComputeGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWorkspacesCompute tests if a specific instance of WorkspacesCompute can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForWorkspacesCompute(subject WorkspacesCompute) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.WorkspacesCompute
	err := copied.AssignPropertiesToWorkspacesCompute(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WorkspacesCompute
	err = actual.AssignPropertiesFromWorkspacesCompute(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WorkspacesCompute_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspacesCompute via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspacesCompute, WorkspacesComputeGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspacesCompute runs a test to see if a specific instance of WorkspacesCompute round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspacesCompute(subject WorkspacesCompute) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspacesCompute
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspacesCompute instances for property testing - lazily instantiated by WorkspacesComputeGenerator()
var workspacesComputeGenerator gopter.Gen

// WorkspacesComputeGenerator returns a generator of WorkspacesCompute instances for property testing.
func WorkspacesComputeGenerator() gopter.Gen {
	if workspacesComputeGenerator != nil {
		return workspacesComputeGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForWorkspacesCompute(generators)
	workspacesComputeGenerator = gen.Struct(reflect.TypeOf(WorkspacesCompute{}), generators)

	return workspacesComputeGenerator
}

// AddRelatedPropertyGeneratorsForWorkspacesCompute is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspacesCompute(gens map[string]gopter.Gen) {
	gens["Spec"] = WorkspacesComputesSpecGenerator()
	gens["Status"] = ComputeResourceStatusGenerator()
}

func Test_ComputeResource_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ComputeResource_Status to ComputeResource_Status via AssignPropertiesToComputeResourceStatus & AssignPropertiesFromComputeResourceStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeResourceStatus, ComputeResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeResourceStatus tests if a specific instance of ComputeResource_Status can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeResourceStatus(subject ComputeResource_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ComputeResource_Status
	err := copied.AssignPropertiesToComputeResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ComputeResource_Status
	err = actual.AssignPropertiesFromComputeResourceStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ComputeResource_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeResource_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeResourceStatus, ComputeResourceStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeResourceStatus runs a test to see if a specific instance of ComputeResource_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeResourceStatus(subject ComputeResource_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeResource_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeResource_Status instances for property testing - lazily instantiated by
// ComputeResourceStatusGenerator()
var computeResourceStatusGenerator gopter.Gen

// ComputeResourceStatusGenerator returns a generator of ComputeResource_Status instances for property testing.
// We first initialize computeResourceStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeResourceStatusGenerator() gopter.Gen {
	if computeResourceStatusGenerator != nil {
		return computeResourceStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeResourceStatus(generators)
	computeResourceStatusGenerator = gen.Struct(reflect.TypeOf(ComputeResource_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeResourceStatus(generators)
	AddRelatedPropertyGeneratorsForComputeResourceStatus(generators)
	computeResourceStatusGenerator = gen.Struct(reflect.TypeOf(ComputeResource_Status{}), generators)

	return computeResourceStatusGenerator
}

// AddIndependentPropertyGeneratorsForComputeResourceStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeResourceStatus(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForComputeResourceStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeResourceStatus(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(IdentityStatusGenerator())
	gens["Properties"] = gen.PtrOf(ComputeStatusGenerator())
	gens["Sku"] = gen.PtrOf(SkuStatusGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataStatusGenerator())
}

func Test_WorkspacesComputes_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from WorkspacesComputes_Spec to WorkspacesComputes_Spec via AssignPropertiesToWorkspacesComputesSpec & AssignPropertiesFromWorkspacesComputesSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForWorkspacesComputesSpec, WorkspacesComputesSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForWorkspacesComputesSpec tests if a specific instance of WorkspacesComputes_Spec can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForWorkspacesComputesSpec(subject WorkspacesComputes_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.WorkspacesComputes_Spec
	err := copied.AssignPropertiesToWorkspacesComputesSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual WorkspacesComputes_Spec
	err = actual.AssignPropertiesFromWorkspacesComputesSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_WorkspacesComputes_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspacesComputes_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspacesComputesSpec, WorkspacesComputesSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspacesComputesSpec runs a test to see if a specific instance of WorkspacesComputes_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspacesComputesSpec(subject WorkspacesComputes_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspacesComputes_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspacesComputes_Spec instances for property testing - lazily instantiated by
// WorkspacesComputesSpecGenerator()
var workspacesComputesSpecGenerator gopter.Gen

// WorkspacesComputesSpecGenerator returns a generator of WorkspacesComputes_Spec instances for property testing.
// We first initialize workspacesComputesSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspacesComputesSpecGenerator() gopter.Gen {
	if workspacesComputesSpecGenerator != nil {
		return workspacesComputesSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesComputesSpec(generators)
	workspacesComputesSpecGenerator = gen.Struct(reflect.TypeOf(WorkspacesComputes_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspacesComputesSpec(generators)
	AddRelatedPropertyGeneratorsForWorkspacesComputesSpec(generators)
	workspacesComputesSpecGenerator = gen.Struct(reflect.TypeOf(WorkspacesComputes_Spec{}), generators)

	return workspacesComputesSpecGenerator
}

// AddIndependentPropertyGeneratorsForWorkspacesComputesSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspacesComputesSpec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspacesComputesSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspacesComputesSpec(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(IdentityGenerator())
	gens["Properties"] = gen.PtrOf(ComputeGenerator())
	gens["Sku"] = gen.PtrOf(SkuGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataGenerator())
}

func Test_Compute_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute to Compute via AssignPropertiesToCompute & AssignPropertiesFromCompute returns original",
		prop.ForAll(RunPropertyAssignmentTestForCompute, ComputeGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCompute tests if a specific instance of Compute can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForCompute(subject Compute) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute
	err := copied.AssignPropertiesToCompute(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute
	err = actual.AssignPropertiesFromCompute(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCompute, ComputeGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCompute runs a test to see if a specific instance of Compute round trips to JSON and back losslessly
func RunJSONSerializationTestForCompute(subject Compute) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute instances for property testing - lazily instantiated by ComputeGenerator()
var computeGenerator gopter.Gen

// ComputeGenerator returns a generator of Compute instances for property testing.
func ComputeGenerator() gopter.Gen {
	if computeGenerator != nil {
		return computeGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCompute(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(Compute{}), map[string]gopter.Gen{
			propName: propGen,
		}))
	}
	computeGenerator = gen.OneGenOf(gens...)

	return computeGenerator
}

// AddRelatedPropertyGeneratorsForCompute is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCompute(gens map[string]gopter.Gen) {
	gens["AKS"] = ComputeAKSGenerator().Map(func(it Compute_AKS) *Compute_AKS {
		return &it
	}) // generate one case for OneOf type
	gens["AmlCompute"] = ComputeAmlComputeGenerator().Map(func(it Compute_AmlCompute) *Compute_AmlCompute {
		return &it
	}) // generate one case for OneOf type
	gens["ComputeInstance"] = ComputeComputeInstanceGenerator().Map(func(it Compute_ComputeInstance) *Compute_ComputeInstance {
		return &it
	}) // generate one case for OneOf type
	gens["DataFactory"] = ComputeDataFactoryGenerator().Map(func(it Compute_DataFactory) *Compute_DataFactory {
		return &it
	}) // generate one case for OneOf type
	gens["DataLakeAnalytics"] = ComputeDataLakeAnalyticsGenerator().Map(func(it Compute_DataLakeAnalytics) *Compute_DataLakeAnalytics {
		return &it
	}) // generate one case for OneOf type
	gens["Databricks"] = ComputeDatabricksGenerator().Map(func(it Compute_Databricks) *Compute_Databricks {
		return &it
	}) // generate one case for OneOf type
	gens["HDInsight"] = ComputeHDInsightGenerator().Map(func(it Compute_HDInsight) *Compute_HDInsight {
		return &it
	}) // generate one case for OneOf type
	gens["SynapseSpark"] = ComputeSynapseSparkGenerator().Map(func(it Compute_SynapseSpark) *Compute_SynapseSpark {
		return &it
	}) // generate one case for OneOf type
	gens["VirtualMachine"] = ComputeVirtualMachineGenerator().Map(func(it Compute_VirtualMachine) *Compute_VirtualMachine {
		return &it
	}) // generate one case for OneOf type
}

func Test_Compute_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_Status to Compute_Status via AssignPropertiesToComputeStatus & AssignPropertiesFromComputeStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeStatus, ComputeStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeStatus tests if a specific instance of Compute_Status can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeStatus(subject Compute_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_Status
	err := copied.AssignPropertiesToComputeStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_Status
	err = actual.AssignPropertiesFromComputeStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeStatus, ComputeStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeStatus runs a test to see if a specific instance of Compute_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeStatus(subject Compute_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_Status instances for property testing - lazily instantiated by ComputeStatusGenerator()
var computeStatusGenerator gopter.Gen

// ComputeStatusGenerator returns a generator of Compute_Status instances for property testing.
// We first initialize computeStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeStatusGenerator() gopter.Gen {
	if computeStatusGenerator != nil {
		return computeStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeStatus(generators)
	computeStatusGenerator = gen.Struct(reflect.TypeOf(Compute_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeStatus(generators)
	AddRelatedPropertyGeneratorsForComputeStatus(generators)
	computeStatusGenerator = gen.Struct(reflect.TypeOf(Compute_Status{}), generators)

	return computeStatusGenerator
}

// AddIndependentPropertyGeneratorsForComputeStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeStatus(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(
		ComputeType_StatusAKS,
		ComputeType_StatusAmlCompute,
		ComputeType_StatusComputeInstance,
		ComputeType_StatusDataFactory,
		ComputeType_StatusDataLakeAnalytics,
		ComputeType_StatusDatabricks,
		ComputeType_StatusHDInsight,
		ComputeType_StatusKubernetes,
		ComputeType_StatusSynapseSpark,
		ComputeType_StatusVirtualMachine))
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ComputeStatusProvisioningStateCanceled,
		ComputeStatusProvisioningStateCreating,
		ComputeStatusProvisioningStateDeleting,
		ComputeStatusProvisioningStateFailed,
		ComputeStatusProvisioningStateSucceeded,
		ComputeStatusProvisioningStateUnknown,
		ComputeStatusProvisioningStateUpdating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForComputeStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeStatus(gens map[string]gopter.Gen) {
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponseStatusGenerator())
}

func Test_Compute_AKS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_AKS to Compute_AKS via AssignPropertiesToComputeAKS & AssignPropertiesFromComputeAKS returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeAKS, ComputeAKSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeAKS tests if a specific instance of Compute_AKS can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeAKS(subject Compute_AKS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_AKS
	err := copied.AssignPropertiesToComputeAKS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_AKS
	err = actual.AssignPropertiesFromComputeAKS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_AKS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_AKS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeAKS, ComputeAKSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeAKS runs a test to see if a specific instance of Compute_AKS round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeAKS(subject Compute_AKS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_AKS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_AKS instances for property testing - lazily instantiated by ComputeAKSGenerator()
var computeAKSGenerator gopter.Gen

// ComputeAKSGenerator returns a generator of Compute_AKS instances for property testing.
// We first initialize computeAKSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeAKSGenerator() gopter.Gen {
	if computeAKSGenerator != nil {
		return computeAKSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeAKS(generators)
	computeAKSGenerator = gen.Struct(reflect.TypeOf(Compute_AKS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeAKS(generators)
	AddRelatedPropertyGeneratorsForComputeAKS(generators)
	computeAKSGenerator = gen.Struct(reflect.TypeOf(Compute_AKS{}), generators)

	return computeAKSGenerator
}

// AddIndependentPropertyGeneratorsForComputeAKS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeAKS(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(ComputeAKSComputeTypeAKS))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForComputeAKS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeAKS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AKSPropertiesGenerator())
}

func Test_Compute_AmlCompute_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_AmlCompute to Compute_AmlCompute via AssignPropertiesToComputeAmlCompute & AssignPropertiesFromComputeAmlCompute returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeAmlCompute, ComputeAmlComputeGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeAmlCompute tests if a specific instance of Compute_AmlCompute can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeAmlCompute(subject Compute_AmlCompute) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_AmlCompute
	err := copied.AssignPropertiesToComputeAmlCompute(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_AmlCompute
	err = actual.AssignPropertiesFromComputeAmlCompute(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_AmlCompute_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_AmlCompute via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeAmlCompute, ComputeAmlComputeGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeAmlCompute runs a test to see if a specific instance of Compute_AmlCompute round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeAmlCompute(subject Compute_AmlCompute) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_AmlCompute
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_AmlCompute instances for property testing - lazily instantiated by ComputeAmlComputeGenerator()
var computeAmlComputeGenerator gopter.Gen

// ComputeAmlComputeGenerator returns a generator of Compute_AmlCompute instances for property testing.
// We first initialize computeAmlComputeGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeAmlComputeGenerator() gopter.Gen {
	if computeAmlComputeGenerator != nil {
		return computeAmlComputeGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeAmlCompute(generators)
	computeAmlComputeGenerator = gen.Struct(reflect.TypeOf(Compute_AmlCompute{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeAmlCompute(generators)
	AddRelatedPropertyGeneratorsForComputeAmlCompute(generators)
	computeAmlComputeGenerator = gen.Struct(reflect.TypeOf(Compute_AmlCompute{}), generators)

	return computeAmlComputeGenerator
}

// AddIndependentPropertyGeneratorsForComputeAmlCompute is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeAmlCompute(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(ComputeAmlComputeComputeTypeAmlCompute))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForComputeAmlCompute is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeAmlCompute(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AmlComputePropertiesGenerator())
}

func Test_Compute_ComputeInstance_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_ComputeInstance to Compute_ComputeInstance via AssignPropertiesToComputeComputeInstance & AssignPropertiesFromComputeComputeInstance returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeComputeInstance, ComputeComputeInstanceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeComputeInstance tests if a specific instance of Compute_ComputeInstance can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeComputeInstance(subject Compute_ComputeInstance) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_ComputeInstance
	err := copied.AssignPropertiesToComputeComputeInstance(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_ComputeInstance
	err = actual.AssignPropertiesFromComputeComputeInstance(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_ComputeInstance_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_ComputeInstance via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeComputeInstance, ComputeComputeInstanceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeComputeInstance runs a test to see if a specific instance of Compute_ComputeInstance round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeComputeInstance(subject Compute_ComputeInstance) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_ComputeInstance
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_ComputeInstance instances for property testing - lazily instantiated by
// ComputeComputeInstanceGenerator()
var computeComputeInstanceGenerator gopter.Gen

// ComputeComputeInstanceGenerator returns a generator of Compute_ComputeInstance instances for property testing.
// We first initialize computeComputeInstanceGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeComputeInstanceGenerator() gopter.Gen {
	if computeComputeInstanceGenerator != nil {
		return computeComputeInstanceGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeComputeInstance(generators)
	computeComputeInstanceGenerator = gen.Struct(reflect.TypeOf(Compute_ComputeInstance{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeComputeInstance(generators)
	AddRelatedPropertyGeneratorsForComputeComputeInstance(generators)
	computeComputeInstanceGenerator = gen.Struct(reflect.TypeOf(Compute_ComputeInstance{}), generators)

	return computeComputeInstanceGenerator
}

// AddIndependentPropertyGeneratorsForComputeComputeInstance is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeComputeInstance(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(ComputeComputeInstanceComputeTypeComputeInstance))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForComputeComputeInstance is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeComputeInstance(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ComputeInstancePropertiesGenerator())
}

func Test_Compute_DataFactory_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_DataFactory to Compute_DataFactory via AssignPropertiesToComputeDataFactory & AssignPropertiesFromComputeDataFactory returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeDataFactory, ComputeDataFactoryGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeDataFactory tests if a specific instance of Compute_DataFactory can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeDataFactory(subject Compute_DataFactory) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_DataFactory
	err := copied.AssignPropertiesToComputeDataFactory(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_DataFactory
	err = actual.AssignPropertiesFromComputeDataFactory(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_DataFactory_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_DataFactory via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeDataFactory, ComputeDataFactoryGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeDataFactory runs a test to see if a specific instance of Compute_DataFactory round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeDataFactory(subject Compute_DataFactory) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_DataFactory
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_DataFactory instances for property testing - lazily instantiated by ComputeDataFactoryGenerator()
var computeDataFactoryGenerator gopter.Gen

// ComputeDataFactoryGenerator returns a generator of Compute_DataFactory instances for property testing.
func ComputeDataFactoryGenerator() gopter.Gen {
	if computeDataFactoryGenerator != nil {
		return computeDataFactoryGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeDataFactory(generators)
	computeDataFactoryGenerator = gen.Struct(reflect.TypeOf(Compute_DataFactory{}), generators)

	return computeDataFactoryGenerator
}

// AddIndependentPropertyGeneratorsForComputeDataFactory is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeDataFactory(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(ComputeDataFactoryComputeTypeDataFactory))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
}

func Test_Compute_DataLakeAnalytics_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_DataLakeAnalytics to Compute_DataLakeAnalytics via AssignPropertiesToComputeDataLakeAnalytics & AssignPropertiesFromComputeDataLakeAnalytics returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeDataLakeAnalytics, ComputeDataLakeAnalyticsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeDataLakeAnalytics tests if a specific instance of Compute_DataLakeAnalytics can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeDataLakeAnalytics(subject Compute_DataLakeAnalytics) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_DataLakeAnalytics
	err := copied.AssignPropertiesToComputeDataLakeAnalytics(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_DataLakeAnalytics
	err = actual.AssignPropertiesFromComputeDataLakeAnalytics(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_DataLakeAnalytics_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_DataLakeAnalytics via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeDataLakeAnalytics, ComputeDataLakeAnalyticsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeDataLakeAnalytics runs a test to see if a specific instance of Compute_DataLakeAnalytics round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeDataLakeAnalytics(subject Compute_DataLakeAnalytics) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_DataLakeAnalytics
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_DataLakeAnalytics instances for property testing - lazily instantiated by
// ComputeDataLakeAnalyticsGenerator()
var computeDataLakeAnalyticsGenerator gopter.Gen

// ComputeDataLakeAnalyticsGenerator returns a generator of Compute_DataLakeAnalytics instances for property testing.
// We first initialize computeDataLakeAnalyticsGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeDataLakeAnalyticsGenerator() gopter.Gen {
	if computeDataLakeAnalyticsGenerator != nil {
		return computeDataLakeAnalyticsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeDataLakeAnalytics(generators)
	computeDataLakeAnalyticsGenerator = gen.Struct(reflect.TypeOf(Compute_DataLakeAnalytics{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeDataLakeAnalytics(generators)
	AddRelatedPropertyGeneratorsForComputeDataLakeAnalytics(generators)
	computeDataLakeAnalyticsGenerator = gen.Struct(reflect.TypeOf(Compute_DataLakeAnalytics{}), generators)

	return computeDataLakeAnalyticsGenerator
}

// AddIndependentPropertyGeneratorsForComputeDataLakeAnalytics is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeDataLakeAnalytics(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(ComputeDataLakeAnalyticsComputeTypeDataLakeAnalytics))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForComputeDataLakeAnalytics is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeDataLakeAnalytics(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DataLakeAnalyticsPropertiesGenerator())
}

func Test_Compute_Databricks_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_Databricks to Compute_Databricks via AssignPropertiesToComputeDatabricks & AssignPropertiesFromComputeDatabricks returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeDatabricks, ComputeDatabricksGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeDatabricks tests if a specific instance of Compute_Databricks can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeDatabricks(subject Compute_Databricks) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_Databricks
	err := copied.AssignPropertiesToComputeDatabricks(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_Databricks
	err = actual.AssignPropertiesFromComputeDatabricks(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_Databricks_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_Databricks via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeDatabricks, ComputeDatabricksGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeDatabricks runs a test to see if a specific instance of Compute_Databricks round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeDatabricks(subject Compute_Databricks) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_Databricks
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_Databricks instances for property testing - lazily instantiated by ComputeDatabricksGenerator()
var computeDatabricksGenerator gopter.Gen

// ComputeDatabricksGenerator returns a generator of Compute_Databricks instances for property testing.
// We first initialize computeDatabricksGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeDatabricksGenerator() gopter.Gen {
	if computeDatabricksGenerator != nil {
		return computeDatabricksGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeDatabricks(generators)
	computeDatabricksGenerator = gen.Struct(reflect.TypeOf(Compute_Databricks{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeDatabricks(generators)
	AddRelatedPropertyGeneratorsForComputeDatabricks(generators)
	computeDatabricksGenerator = gen.Struct(reflect.TypeOf(Compute_Databricks{}), generators)

	return computeDatabricksGenerator
}

// AddIndependentPropertyGeneratorsForComputeDatabricks is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeDatabricks(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(ComputeDatabricksComputeTypeDatabricks))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForComputeDatabricks is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeDatabricks(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DatabricksPropertiesGenerator())
}

func Test_Compute_HDInsight_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_HDInsight to Compute_HDInsight via AssignPropertiesToComputeHDInsight & AssignPropertiesFromComputeHDInsight returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeHDInsight, ComputeHDInsightGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeHDInsight tests if a specific instance of Compute_HDInsight can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeHDInsight(subject Compute_HDInsight) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_HDInsight
	err := copied.AssignPropertiesToComputeHDInsight(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_HDInsight
	err = actual.AssignPropertiesFromComputeHDInsight(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_HDInsight_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_HDInsight via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeHDInsight, ComputeHDInsightGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeHDInsight runs a test to see if a specific instance of Compute_HDInsight round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeHDInsight(subject Compute_HDInsight) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_HDInsight
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_HDInsight instances for property testing - lazily instantiated by ComputeHDInsightGenerator()
var computeHDInsightGenerator gopter.Gen

// ComputeHDInsightGenerator returns a generator of Compute_HDInsight instances for property testing.
// We first initialize computeHDInsightGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeHDInsightGenerator() gopter.Gen {
	if computeHDInsightGenerator != nil {
		return computeHDInsightGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeHDInsight(generators)
	computeHDInsightGenerator = gen.Struct(reflect.TypeOf(Compute_HDInsight{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeHDInsight(generators)
	AddRelatedPropertyGeneratorsForComputeHDInsight(generators)
	computeHDInsightGenerator = gen.Struct(reflect.TypeOf(Compute_HDInsight{}), generators)

	return computeHDInsightGenerator
}

// AddIndependentPropertyGeneratorsForComputeHDInsight is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeHDInsight(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(ComputeHDInsightComputeTypeHDInsight))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForComputeHDInsight is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeHDInsight(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(HDInsightPropertiesGenerator())
}

func Test_Compute_SynapseSpark_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_SynapseSpark to Compute_SynapseSpark via AssignPropertiesToComputeSynapseSpark & AssignPropertiesFromComputeSynapseSpark returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeSynapseSpark, ComputeSynapseSparkGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeSynapseSpark tests if a specific instance of Compute_SynapseSpark can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeSynapseSpark(subject Compute_SynapseSpark) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_SynapseSpark
	err := copied.AssignPropertiesToComputeSynapseSpark(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_SynapseSpark
	err = actual.AssignPropertiesFromComputeSynapseSpark(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_SynapseSpark_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_SynapseSpark via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeSynapseSpark, ComputeSynapseSparkGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeSynapseSpark runs a test to see if a specific instance of Compute_SynapseSpark round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeSynapseSpark(subject Compute_SynapseSpark) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_SynapseSpark
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_SynapseSpark instances for property testing - lazily instantiated by
// ComputeSynapseSparkGenerator()
var computeSynapseSparkGenerator gopter.Gen

// ComputeSynapseSparkGenerator returns a generator of Compute_SynapseSpark instances for property testing.
// We first initialize computeSynapseSparkGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeSynapseSparkGenerator() gopter.Gen {
	if computeSynapseSparkGenerator != nil {
		return computeSynapseSparkGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeSynapseSpark(generators)
	computeSynapseSparkGenerator = gen.Struct(reflect.TypeOf(Compute_SynapseSpark{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeSynapseSpark(generators)
	AddRelatedPropertyGeneratorsForComputeSynapseSpark(generators)
	computeSynapseSparkGenerator = gen.Struct(reflect.TypeOf(Compute_SynapseSpark{}), generators)

	return computeSynapseSparkGenerator
}

// AddIndependentPropertyGeneratorsForComputeSynapseSpark is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeSynapseSpark(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(ComputeSynapseSparkComputeTypeSynapseSpark))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForComputeSynapseSpark is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeSynapseSpark(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SynapseSparkPropertiesGenerator())
}

func Test_Compute_VirtualMachine_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Compute_VirtualMachine to Compute_VirtualMachine via AssignPropertiesToComputeVirtualMachine & AssignPropertiesFromComputeVirtualMachine returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeVirtualMachine, ComputeVirtualMachineGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeVirtualMachine tests if a specific instance of Compute_VirtualMachine can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeVirtualMachine(subject Compute_VirtualMachine) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.Compute_VirtualMachine
	err := copied.AssignPropertiesToComputeVirtualMachine(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Compute_VirtualMachine
	err = actual.AssignPropertiesFromComputeVirtualMachine(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Compute_VirtualMachine_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_VirtualMachine via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeVirtualMachine, ComputeVirtualMachineGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeVirtualMachine runs a test to see if a specific instance of Compute_VirtualMachine round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeVirtualMachine(subject Compute_VirtualMachine) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_VirtualMachine
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_VirtualMachine instances for property testing - lazily instantiated by
// ComputeVirtualMachineGenerator()
var computeVirtualMachineGenerator gopter.Gen

// ComputeVirtualMachineGenerator returns a generator of Compute_VirtualMachine instances for property testing.
// We first initialize computeVirtualMachineGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeVirtualMachineGenerator() gopter.Gen {
	if computeVirtualMachineGenerator != nil {
		return computeVirtualMachineGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeVirtualMachine(generators)
	computeVirtualMachineGenerator = gen.Struct(reflect.TypeOf(Compute_VirtualMachine{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeVirtualMachine(generators)
	AddRelatedPropertyGeneratorsForComputeVirtualMachine(generators)
	computeVirtualMachineGenerator = gen.Struct(reflect.TypeOf(Compute_VirtualMachine{}), generators)

	return computeVirtualMachineGenerator
}

// AddIndependentPropertyGeneratorsForComputeVirtualMachine is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeVirtualMachine(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(ComputeVirtualMachineComputeTypeVirtualMachine))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForComputeVirtualMachine is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeVirtualMachine(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachinePropertiesGenerator())
}

func Test_ErrorResponse_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ErrorResponse_Status to ErrorResponse_Status via AssignPropertiesToErrorResponseStatus & AssignPropertiesFromErrorResponseStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForErrorResponseStatus, ErrorResponseStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForErrorResponseStatus tests if a specific instance of ErrorResponse_Status can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForErrorResponseStatus(subject ErrorResponse_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ErrorResponse_Status
	err := copied.AssignPropertiesToErrorResponseStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ErrorResponse_Status
	err = actual.AssignPropertiesFromErrorResponseStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ErrorResponse_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorResponse_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorResponseStatus, ErrorResponseStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorResponseStatus runs a test to see if a specific instance of ErrorResponse_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorResponseStatus(subject ErrorResponse_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorResponse_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorResponse_Status instances for property testing - lazily instantiated by
// ErrorResponseStatusGenerator()
var errorResponseStatusGenerator gopter.Gen

// ErrorResponseStatusGenerator returns a generator of ErrorResponse_Status instances for property testing.
func ErrorResponseStatusGenerator() gopter.Gen {
	if errorResponseStatusGenerator != nil {
		return errorResponseStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForErrorResponseStatus(generators)
	errorResponseStatusGenerator = gen.Struct(reflect.TypeOf(ErrorResponse_Status{}), generators)

	return errorResponseStatusGenerator
}

// AddRelatedPropertyGeneratorsForErrorResponseStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorResponseStatus(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ErrorDetailStatusGenerator())
}

func Test_AKSProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AKSProperties to AKSProperties via AssignPropertiesToAKSProperties & AssignPropertiesFromAKSProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForAKSProperties, AKSPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAKSProperties tests if a specific instance of AKSProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForAKSProperties(subject AKSProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.AKSProperties
	err := copied.AssignPropertiesToAKSProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AKSProperties
	err = actual.AssignPropertiesFromAKSProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AKSProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AKSProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAKSProperties, AKSPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAKSProperties runs a test to see if a specific instance of AKSProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForAKSProperties(subject AKSProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AKSProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AKSProperties instances for property testing - lazily instantiated by AKSPropertiesGenerator()
var aksPropertiesGenerator gopter.Gen

// AKSPropertiesGenerator returns a generator of AKSProperties instances for property testing.
// We first initialize aksPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AKSPropertiesGenerator() gopter.Gen {
	if aksPropertiesGenerator != nil {
		return aksPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAKSProperties(generators)
	aksPropertiesGenerator = gen.Struct(reflect.TypeOf(AKSProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAKSProperties(generators)
	AddRelatedPropertyGeneratorsForAKSProperties(generators)
	aksPropertiesGenerator = gen.Struct(reflect.TypeOf(AKSProperties{}), generators)

	return aksPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForAKSProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAKSProperties(gens map[string]gopter.Gen) {
	gens["AgentCount"] = gen.PtrOf(gen.Int())
	gens["AgentVmSize"] = gen.PtrOf(gen.AlphaString())
	gens["ClusterFqdn"] = gen.PtrOf(gen.AlphaString())
	gens["ClusterPurpose"] = gen.PtrOf(gen.OneConstOf(AKSPropertiesClusterPurposeDenseProd, AKSPropertiesClusterPurposeDevTest, AKSPropertiesClusterPurposeFastProd))
	gens["LoadBalancerSubnet"] = gen.PtrOf(gen.AlphaString())
	gens["LoadBalancerType"] = gen.PtrOf(gen.OneConstOf(AKSPropertiesLoadBalancerTypeInternalLoadBalancer, AKSPropertiesLoadBalancerTypePublicIp))
}

// AddRelatedPropertyGeneratorsForAKSProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAKSProperties(gens map[string]gopter.Gen) {
	gens["AksNetworkingConfiguration"] = gen.PtrOf(AksNetworkingConfigurationGenerator())
	gens["SslConfiguration"] = gen.PtrOf(SslConfigurationGenerator())
}

func Test_AmlComputeProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AmlComputeProperties to AmlComputeProperties via AssignPropertiesToAmlComputeProperties & AssignPropertiesFromAmlComputeProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForAmlComputeProperties, AmlComputePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAmlComputeProperties tests if a specific instance of AmlComputeProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForAmlComputeProperties(subject AmlComputeProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.AmlComputeProperties
	err := copied.AssignPropertiesToAmlComputeProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AmlComputeProperties
	err = actual.AssignPropertiesFromAmlComputeProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AmlComputeProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AmlComputeProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAmlComputeProperties, AmlComputePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAmlComputeProperties runs a test to see if a specific instance of AmlComputeProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForAmlComputeProperties(subject AmlComputeProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AmlComputeProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AmlComputeProperties instances for property testing - lazily instantiated by
// AmlComputePropertiesGenerator()
var amlComputePropertiesGenerator gopter.Gen

// AmlComputePropertiesGenerator returns a generator of AmlComputeProperties instances for property testing.
// We first initialize amlComputePropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AmlComputePropertiesGenerator() gopter.Gen {
	if amlComputePropertiesGenerator != nil {
		return amlComputePropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAmlComputeProperties(generators)
	amlComputePropertiesGenerator = gen.Struct(reflect.TypeOf(AmlComputeProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAmlComputeProperties(generators)
	AddRelatedPropertyGeneratorsForAmlComputeProperties(generators)
	amlComputePropertiesGenerator = gen.Struct(reflect.TypeOf(AmlComputeProperties{}), generators)

	return amlComputePropertiesGenerator
}

// AddIndependentPropertyGeneratorsForAmlComputeProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAmlComputeProperties(gens map[string]gopter.Gen) {
	gens["EnableNodePublicIp"] = gen.PtrOf(gen.Bool())
	gens["IsolatedNetwork"] = gen.PtrOf(gen.Bool())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(AmlComputePropertiesOsTypeLinux, AmlComputePropertiesOsTypeWindows))
	gens["RemoteLoginPortPublicAccess"] = gen.PtrOf(gen.OneConstOf(AmlComputePropertiesRemoteLoginPortPublicAccessDisabled, AmlComputePropertiesRemoteLoginPortPublicAccessEnabled, AmlComputePropertiesRemoteLoginPortPublicAccessNotSpecified))
	gens["VmPriority"] = gen.PtrOf(gen.OneConstOf(AmlComputePropertiesVmPriorityDedicated, AmlComputePropertiesVmPriorityLowPriority))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAmlComputeProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAmlComputeProperties(gens map[string]gopter.Gen) {
	gens["ScaleSettings"] = gen.PtrOf(ScaleSettingsGenerator())
	gens["Subnet"] = gen.PtrOf(ResourceIdGenerator())
	gens["UserAccountCredentials"] = gen.PtrOf(UserAccountCredentialsGenerator())
	gens["VirtualMachineImage"] = gen.PtrOf(VirtualMachineImageGenerator())
}

func Test_ComputeInstanceProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ComputeInstanceProperties to ComputeInstanceProperties via AssignPropertiesToComputeInstanceProperties & AssignPropertiesFromComputeInstanceProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeInstanceProperties, ComputeInstancePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeInstanceProperties tests if a specific instance of ComputeInstanceProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeInstanceProperties(subject ComputeInstanceProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ComputeInstanceProperties
	err := copied.AssignPropertiesToComputeInstanceProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ComputeInstanceProperties
	err = actual.AssignPropertiesFromComputeInstanceProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ComputeInstanceProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeInstanceProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeInstanceProperties, ComputeInstancePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeInstanceProperties runs a test to see if a specific instance of ComputeInstanceProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeInstanceProperties(subject ComputeInstanceProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeInstanceProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeInstanceProperties instances for property testing - lazily instantiated by
// ComputeInstancePropertiesGenerator()
var computeInstancePropertiesGenerator gopter.Gen

// ComputeInstancePropertiesGenerator returns a generator of ComputeInstanceProperties instances for property testing.
// We first initialize computeInstancePropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeInstancePropertiesGenerator() gopter.Gen {
	if computeInstancePropertiesGenerator != nil {
		return computeInstancePropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceProperties(generators)
	computeInstancePropertiesGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceProperties(generators)
	AddRelatedPropertyGeneratorsForComputeInstanceProperties(generators)
	computeInstancePropertiesGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceProperties{}), generators)

	return computeInstancePropertiesGenerator
}

// AddIndependentPropertyGeneratorsForComputeInstanceProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeInstanceProperties(gens map[string]gopter.Gen) {
	gens["ApplicationSharingPolicy"] = gen.PtrOf(gen.OneConstOf(ComputeInstancePropertiesApplicationSharingPolicyPersonal, ComputeInstancePropertiesApplicationSharingPolicyShared))
	gens["ComputeInstanceAuthorizationType"] = gen.PtrOf(gen.OneConstOf(ComputeInstancePropertiesComputeInstanceAuthorizationTypePersonal))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForComputeInstanceProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeInstanceProperties(gens map[string]gopter.Gen) {
	gens["PersonalComputeInstanceSettings"] = gen.PtrOf(PersonalComputeInstanceSettingsGenerator())
	gens["SetupScripts"] = gen.PtrOf(SetupScriptsGenerator())
	gens["SshSettings"] = gen.PtrOf(ComputeInstanceSshSettingsGenerator())
	gens["Subnet"] = gen.PtrOf(ResourceIdGenerator())
}

func Test_DataLakeAnalyticsProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DataLakeAnalyticsProperties to DataLakeAnalyticsProperties via AssignPropertiesToDataLakeAnalyticsProperties & AssignPropertiesFromDataLakeAnalyticsProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForDataLakeAnalyticsProperties, DataLakeAnalyticsPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDataLakeAnalyticsProperties tests if a specific instance of DataLakeAnalyticsProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForDataLakeAnalyticsProperties(subject DataLakeAnalyticsProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.DataLakeAnalyticsProperties
	err := copied.AssignPropertiesToDataLakeAnalyticsProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DataLakeAnalyticsProperties
	err = actual.AssignPropertiesFromDataLakeAnalyticsProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DataLakeAnalyticsProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataLakeAnalyticsProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataLakeAnalyticsProperties, DataLakeAnalyticsPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataLakeAnalyticsProperties runs a test to see if a specific instance of DataLakeAnalyticsProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForDataLakeAnalyticsProperties(subject DataLakeAnalyticsProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataLakeAnalyticsProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataLakeAnalyticsProperties instances for property testing - lazily instantiated by
// DataLakeAnalyticsPropertiesGenerator()
var dataLakeAnalyticsPropertiesGenerator gopter.Gen

// DataLakeAnalyticsPropertiesGenerator returns a generator of DataLakeAnalyticsProperties instances for property testing.
func DataLakeAnalyticsPropertiesGenerator() gopter.Gen {
	if dataLakeAnalyticsPropertiesGenerator != nil {
		return dataLakeAnalyticsPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataLakeAnalyticsProperties(generators)
	dataLakeAnalyticsPropertiesGenerator = gen.Struct(reflect.TypeOf(DataLakeAnalyticsProperties{}), generators)

	return dataLakeAnalyticsPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForDataLakeAnalyticsProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataLakeAnalyticsProperties(gens map[string]gopter.Gen) {
	gens["DataLakeStoreAccountName"] = gen.PtrOf(gen.AlphaString())
}

func Test_DatabricksProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from DatabricksProperties to DatabricksProperties via AssignPropertiesToDatabricksProperties & AssignPropertiesFromDatabricksProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForDatabricksProperties, DatabricksPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForDatabricksProperties tests if a specific instance of DatabricksProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForDatabricksProperties(subject DatabricksProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.DatabricksProperties
	err := copied.AssignPropertiesToDatabricksProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual DatabricksProperties
	err = actual.AssignPropertiesFromDatabricksProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_DatabricksProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabricksProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabricksProperties, DatabricksPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabricksProperties runs a test to see if a specific instance of DatabricksProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabricksProperties(subject DatabricksProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabricksProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabricksProperties instances for property testing - lazily instantiated by
// DatabricksPropertiesGenerator()
var databricksPropertiesGenerator gopter.Gen

// DatabricksPropertiesGenerator returns a generator of DatabricksProperties instances for property testing.
func DatabricksPropertiesGenerator() gopter.Gen {
	if databricksPropertiesGenerator != nil {
		return databricksPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabricksProperties(generators)
	databricksPropertiesGenerator = gen.Struct(reflect.TypeOf(DatabricksProperties{}), generators)

	return databricksPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForDatabricksProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabricksProperties(gens map[string]gopter.Gen) {
	gens["DatabricksAccessToken"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceUrl"] = gen.PtrOf(gen.AlphaString())
}

func Test_ErrorDetail_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ErrorDetail_Status to ErrorDetail_Status via AssignPropertiesToErrorDetailStatus & AssignPropertiesFromErrorDetailStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForErrorDetailStatus, ErrorDetailStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForErrorDetailStatus tests if a specific instance of ErrorDetail_Status can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForErrorDetailStatus(subject ErrorDetail_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ErrorDetail_Status
	err := copied.AssignPropertiesToErrorDetailStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ErrorDetail_Status
	err = actual.AssignPropertiesFromErrorDetailStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ErrorDetail_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorDetail_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorDetailStatus, ErrorDetailStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorDetailStatus runs a test to see if a specific instance of ErrorDetail_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorDetailStatus(subject ErrorDetail_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorDetail_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorDetail_Status instances for property testing - lazily instantiated by ErrorDetailStatusGenerator()
var errorDetailStatusGenerator gopter.Gen

// ErrorDetailStatusGenerator returns a generator of ErrorDetail_Status instances for property testing.
// We first initialize errorDetailStatusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ErrorDetailStatusGenerator() gopter.Gen {
	if errorDetailStatusGenerator != nil {
		return errorDetailStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetailStatus(generators)
	errorDetailStatusGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetailStatus(generators)
	AddRelatedPropertyGeneratorsForErrorDetailStatus(generators)
	errorDetailStatusGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_Status{}), generators)

	return errorDetailStatusGenerator
}

// AddIndependentPropertyGeneratorsForErrorDetailStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorDetailStatus(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForErrorDetailStatus is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorDetailStatus(gens map[string]gopter.Gen) {
	gens["AdditionalInfo"] = gen.SliceOf(ErrorAdditionalInfoStatusGenerator())
	gens["Details"] = gen.SliceOf(ErrorDetailStatusUnrolledGenerator())
}

func Test_HDInsightProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HDInsightProperties to HDInsightProperties via AssignPropertiesToHDInsightProperties & AssignPropertiesFromHDInsightProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForHDInsightProperties, HDInsightPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHDInsightProperties tests if a specific instance of HDInsightProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForHDInsightProperties(subject HDInsightProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.HDInsightProperties
	err := copied.AssignPropertiesToHDInsightProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HDInsightProperties
	err = actual.AssignPropertiesFromHDInsightProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HDInsightProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HDInsightProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHDInsightProperties, HDInsightPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHDInsightProperties runs a test to see if a specific instance of HDInsightProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForHDInsightProperties(subject HDInsightProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HDInsightProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HDInsightProperties instances for property testing - lazily instantiated by
// HDInsightPropertiesGenerator()
var hdInsightPropertiesGenerator gopter.Gen

// HDInsightPropertiesGenerator returns a generator of HDInsightProperties instances for property testing.
// We first initialize hdInsightPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HDInsightPropertiesGenerator() gopter.Gen {
	if hdInsightPropertiesGenerator != nil {
		return hdInsightPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHDInsightProperties(generators)
	hdInsightPropertiesGenerator = gen.Struct(reflect.TypeOf(HDInsightProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHDInsightProperties(generators)
	AddRelatedPropertyGeneratorsForHDInsightProperties(generators)
	hdInsightPropertiesGenerator = gen.Struct(reflect.TypeOf(HDInsightProperties{}), generators)

	return hdInsightPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForHDInsightProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHDInsightProperties(gens map[string]gopter.Gen) {
	gens["Address"] = gen.PtrOf(gen.AlphaString())
	gens["SshPort"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForHDInsightProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHDInsightProperties(gens map[string]gopter.Gen) {
	gens["AdministratorAccount"] = gen.PtrOf(VirtualMachineSshCredentialsGenerator())
}

func Test_SynapseSparkProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SynapseSparkProperties to SynapseSparkProperties via AssignPropertiesToSynapseSparkProperties & AssignPropertiesFromSynapseSparkProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForSynapseSparkProperties, SynapseSparkPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSynapseSparkProperties tests if a specific instance of SynapseSparkProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForSynapseSparkProperties(subject SynapseSparkProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.SynapseSparkProperties
	err := copied.AssignPropertiesToSynapseSparkProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SynapseSparkProperties
	err = actual.AssignPropertiesFromSynapseSparkProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SynapseSparkProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SynapseSparkProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSynapseSparkProperties, SynapseSparkPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSynapseSparkProperties runs a test to see if a specific instance of SynapseSparkProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForSynapseSparkProperties(subject SynapseSparkProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SynapseSparkProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SynapseSparkProperties instances for property testing - lazily instantiated by
// SynapseSparkPropertiesGenerator()
var synapseSparkPropertiesGenerator gopter.Gen

// SynapseSparkPropertiesGenerator returns a generator of SynapseSparkProperties instances for property testing.
// We first initialize synapseSparkPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SynapseSparkPropertiesGenerator() gopter.Gen {
	if synapseSparkPropertiesGenerator != nil {
		return synapseSparkPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSynapseSparkProperties(generators)
	synapseSparkPropertiesGenerator = gen.Struct(reflect.TypeOf(SynapseSparkProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSynapseSparkProperties(generators)
	AddRelatedPropertyGeneratorsForSynapseSparkProperties(generators)
	synapseSparkPropertiesGenerator = gen.Struct(reflect.TypeOf(SynapseSparkProperties{}), generators)

	return synapseSparkPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForSynapseSparkProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSynapseSparkProperties(gens map[string]gopter.Gen) {
	gens["NodeCount"] = gen.PtrOf(gen.Int())
	gens["NodeSize"] = gen.PtrOf(gen.AlphaString())
	gens["NodeSizeFamily"] = gen.PtrOf(gen.AlphaString())
	gens["PoolName"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SparkVersion"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSynapseSparkProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSynapseSparkProperties(gens map[string]gopter.Gen) {
	gens["AutoPauseProperties"] = gen.PtrOf(AutoPausePropertiesGenerator())
	gens["AutoScaleProperties"] = gen.PtrOf(AutoScalePropertiesGenerator())
}

func Test_VirtualMachineProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualMachineProperties to VirtualMachineProperties via AssignPropertiesToVirtualMachineProperties & AssignPropertiesFromVirtualMachineProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualMachineProperties, VirtualMachinePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualMachineProperties tests if a specific instance of VirtualMachineProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForVirtualMachineProperties(subject VirtualMachineProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.VirtualMachineProperties
	err := copied.AssignPropertiesToVirtualMachineProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualMachineProperties
	err = actual.AssignPropertiesFromVirtualMachineProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualMachineProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineProperties, VirtualMachinePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineProperties runs a test to see if a specific instance of VirtualMachineProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineProperties(subject VirtualMachineProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineProperties instances for property testing - lazily instantiated by
// VirtualMachinePropertiesGenerator()
var virtualMachinePropertiesGenerator gopter.Gen

// VirtualMachinePropertiesGenerator returns a generator of VirtualMachineProperties instances for property testing.
// We first initialize virtualMachinePropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachinePropertiesGenerator() gopter.Gen {
	if virtualMachinePropertiesGenerator != nil {
		return virtualMachinePropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineProperties(generators)
	virtualMachinePropertiesGenerator = gen.Struct(reflect.TypeOf(VirtualMachineProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineProperties(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineProperties(generators)
	virtualMachinePropertiesGenerator = gen.Struct(reflect.TypeOf(VirtualMachineProperties{}), generators)

	return virtualMachinePropertiesGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineProperties(gens map[string]gopter.Gen) {
	gens["Address"] = gen.PtrOf(gen.AlphaString())
	gens["IsNotebookInstanceCompute"] = gen.PtrOf(gen.Bool())
	gens["SshPort"] = gen.PtrOf(gen.Int())
	gens["VirtualMachineSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineProperties(gens map[string]gopter.Gen) {
	gens["AdministratorAccount"] = gen.PtrOf(VirtualMachineSshCredentialsGenerator())
}

func Test_AksNetworkingConfiguration_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AksNetworkingConfiguration to AksNetworkingConfiguration via AssignPropertiesToAksNetworkingConfiguration & AssignPropertiesFromAksNetworkingConfiguration returns original",
		prop.ForAll(RunPropertyAssignmentTestForAksNetworkingConfiguration, AksNetworkingConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAksNetworkingConfiguration tests if a specific instance of AksNetworkingConfiguration can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForAksNetworkingConfiguration(subject AksNetworkingConfiguration) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.AksNetworkingConfiguration
	err := copied.AssignPropertiesToAksNetworkingConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AksNetworkingConfiguration
	err = actual.AssignPropertiesFromAksNetworkingConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AksNetworkingConfiguration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AksNetworkingConfiguration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAksNetworkingConfiguration, AksNetworkingConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAksNetworkingConfiguration runs a test to see if a specific instance of AksNetworkingConfiguration round trips to JSON and back losslessly
func RunJSONSerializationTestForAksNetworkingConfiguration(subject AksNetworkingConfiguration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AksNetworkingConfiguration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AksNetworkingConfiguration instances for property testing - lazily instantiated by
// AksNetworkingConfigurationGenerator()
var aksNetworkingConfigurationGenerator gopter.Gen

// AksNetworkingConfigurationGenerator returns a generator of AksNetworkingConfiguration instances for property testing.
func AksNetworkingConfigurationGenerator() gopter.Gen {
	if aksNetworkingConfigurationGenerator != nil {
		return aksNetworkingConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAksNetworkingConfiguration(generators)
	aksNetworkingConfigurationGenerator = gen.Struct(reflect.TypeOf(AksNetworkingConfiguration{}), generators)

	return aksNetworkingConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForAksNetworkingConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAksNetworkingConfiguration(gens map[string]gopter.Gen) {
	gens["DnsServiceIP"] = gen.PtrOf(gen.AlphaString())
	gens["DockerBridgeCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
}

func Test_AutoPauseProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoPauseProperties to AutoPauseProperties via AssignPropertiesToAutoPauseProperties & AssignPropertiesFromAutoPauseProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoPauseProperties, AutoPausePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoPauseProperties tests if a specific instance of AutoPauseProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForAutoPauseProperties(subject AutoPauseProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.AutoPauseProperties
	err := copied.AssignPropertiesToAutoPauseProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoPauseProperties
	err = actual.AssignPropertiesFromAutoPauseProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoPauseProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoPauseProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoPauseProperties, AutoPausePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoPauseProperties runs a test to see if a specific instance of AutoPauseProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoPauseProperties(subject AutoPauseProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoPauseProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoPauseProperties instances for property testing - lazily instantiated by
// AutoPausePropertiesGenerator()
var autoPausePropertiesGenerator gopter.Gen

// AutoPausePropertiesGenerator returns a generator of AutoPauseProperties instances for property testing.
func AutoPausePropertiesGenerator() gopter.Gen {
	if autoPausePropertiesGenerator != nil {
		return autoPausePropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoPauseProperties(generators)
	autoPausePropertiesGenerator = gen.Struct(reflect.TypeOf(AutoPauseProperties{}), generators)

	return autoPausePropertiesGenerator
}

// AddIndependentPropertyGeneratorsForAutoPauseProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoPauseProperties(gens map[string]gopter.Gen) {
	gens["DelayInMinutes"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutoScaleProperties_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AutoScaleProperties to AutoScaleProperties via AssignPropertiesToAutoScaleProperties & AssignPropertiesFromAutoScaleProperties returns original",
		prop.ForAll(RunPropertyAssignmentTestForAutoScaleProperties, AutoScalePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAutoScaleProperties tests if a specific instance of AutoScaleProperties can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForAutoScaleProperties(subject AutoScaleProperties) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.AutoScaleProperties
	err := copied.AssignPropertiesToAutoScaleProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AutoScaleProperties
	err = actual.AssignPropertiesFromAutoScaleProperties(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AutoScaleProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoScaleProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoScaleProperties, AutoScalePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoScaleProperties runs a test to see if a specific instance of AutoScaleProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoScaleProperties(subject AutoScaleProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoScaleProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoScaleProperties instances for property testing - lazily instantiated by
// AutoScalePropertiesGenerator()
var autoScalePropertiesGenerator gopter.Gen

// AutoScalePropertiesGenerator returns a generator of AutoScaleProperties instances for property testing.
func AutoScalePropertiesGenerator() gopter.Gen {
	if autoScalePropertiesGenerator != nil {
		return autoScalePropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoScaleProperties(generators)
	autoScalePropertiesGenerator = gen.Struct(reflect.TypeOf(AutoScaleProperties{}), generators)

	return autoScalePropertiesGenerator
}

// AddIndependentPropertyGeneratorsForAutoScaleProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoScaleProperties(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["MaxNodeCount"] = gen.PtrOf(gen.Int())
	gens["MinNodeCount"] = gen.PtrOf(gen.Int())
}

func Test_ComputeInstanceSshSettings_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ComputeInstanceSshSettings to ComputeInstanceSshSettings via AssignPropertiesToComputeInstanceSshSettings & AssignPropertiesFromComputeInstanceSshSettings returns original",
		prop.ForAll(RunPropertyAssignmentTestForComputeInstanceSshSettings, ComputeInstanceSshSettingsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForComputeInstanceSshSettings tests if a specific instance of ComputeInstanceSshSettings can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForComputeInstanceSshSettings(subject ComputeInstanceSshSettings) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ComputeInstanceSshSettings
	err := copied.AssignPropertiesToComputeInstanceSshSettings(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ComputeInstanceSshSettings
	err = actual.AssignPropertiesFromComputeInstanceSshSettings(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ComputeInstanceSshSettings_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeInstanceSshSettings via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeInstanceSshSettings, ComputeInstanceSshSettingsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeInstanceSshSettings runs a test to see if a specific instance of ComputeInstanceSshSettings round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeInstanceSshSettings(subject ComputeInstanceSshSettings) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeInstanceSshSettings
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeInstanceSshSettings instances for property testing - lazily instantiated by
// ComputeInstanceSshSettingsGenerator()
var computeInstanceSshSettingsGenerator gopter.Gen

// ComputeInstanceSshSettingsGenerator returns a generator of ComputeInstanceSshSettings instances for property testing.
func ComputeInstanceSshSettingsGenerator() gopter.Gen {
	if computeInstanceSshSettingsGenerator != nil {
		return computeInstanceSshSettingsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceSshSettings(generators)
	computeInstanceSshSettingsGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceSshSettings{}), generators)

	return computeInstanceSshSettingsGenerator
}

// AddIndependentPropertyGeneratorsForComputeInstanceSshSettings is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeInstanceSshSettings(gens map[string]gopter.Gen) {
	gens["AdminPublicKey"] = gen.PtrOf(gen.AlphaString())
	gens["SshPublicAccess"] = gen.PtrOf(gen.OneConstOf(ComputeInstanceSshSettingsSshPublicAccessDisabled, ComputeInstanceSshSettingsSshPublicAccessEnabled))
}

func Test_ErrorAdditionalInfo_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ErrorAdditionalInfo_Status to ErrorAdditionalInfo_Status via AssignPropertiesToErrorAdditionalInfoStatus & AssignPropertiesFromErrorAdditionalInfoStatus returns original",
		prop.ForAll(RunPropertyAssignmentTestForErrorAdditionalInfoStatus, ErrorAdditionalInfoStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForErrorAdditionalInfoStatus tests if a specific instance of ErrorAdditionalInfo_Status can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForErrorAdditionalInfoStatus(subject ErrorAdditionalInfo_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ErrorAdditionalInfo_Status
	err := copied.AssignPropertiesToErrorAdditionalInfoStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ErrorAdditionalInfo_Status
	err = actual.AssignPropertiesFromErrorAdditionalInfoStatus(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ErrorAdditionalInfo_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorAdditionalInfo_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorAdditionalInfoStatus, ErrorAdditionalInfoStatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorAdditionalInfoStatus runs a test to see if a specific instance of ErrorAdditionalInfo_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorAdditionalInfoStatus(subject ErrorAdditionalInfo_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorAdditionalInfo_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorAdditionalInfo_Status instances for property testing - lazily instantiated by
// ErrorAdditionalInfoStatusGenerator()
var errorAdditionalInfoStatusGenerator gopter.Gen

// ErrorAdditionalInfoStatusGenerator returns a generator of ErrorAdditionalInfo_Status instances for property testing.
func ErrorAdditionalInfoStatusGenerator() gopter.Gen {
	if errorAdditionalInfoStatusGenerator != nil {
		return errorAdditionalInfoStatusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorAdditionalInfoStatus(generators)
	errorAdditionalInfoStatusGenerator = gen.Struct(reflect.TypeOf(ErrorAdditionalInfo_Status{}), generators)

	return errorAdditionalInfoStatusGenerator
}

// AddIndependentPropertyGeneratorsForErrorAdditionalInfoStatus is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorAdditionalInfoStatus(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ErrorDetail_Status_Unrolled_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ErrorDetail_Status_Unrolled to ErrorDetail_Status_Unrolled via AssignPropertiesToErrorDetailStatusUnrolled & AssignPropertiesFromErrorDetailStatusUnrolled returns original",
		prop.ForAll(RunPropertyAssignmentTestForErrorDetailStatusUnrolled, ErrorDetailStatusUnrolledGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForErrorDetailStatusUnrolled tests if a specific instance of ErrorDetail_Status_Unrolled can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForErrorDetailStatusUnrolled(subject ErrorDetail_Status_Unrolled) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ErrorDetail_Status_Unrolled
	err := copied.AssignPropertiesToErrorDetailStatusUnrolled(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ErrorDetail_Status_Unrolled
	err = actual.AssignPropertiesFromErrorDetailStatusUnrolled(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ErrorDetail_Status_Unrolled_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorDetail_Status_Unrolled via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorDetailStatusUnrolled, ErrorDetailStatusUnrolledGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorDetailStatusUnrolled runs a test to see if a specific instance of ErrorDetail_Status_Unrolled round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorDetailStatusUnrolled(subject ErrorDetail_Status_Unrolled) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorDetail_Status_Unrolled
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorDetail_Status_Unrolled instances for property testing - lazily instantiated by
// ErrorDetailStatusUnrolledGenerator()
var errorDetailStatusUnrolledGenerator gopter.Gen

// ErrorDetailStatusUnrolledGenerator returns a generator of ErrorDetail_Status_Unrolled instances for property testing.
// We first initialize errorDetailStatusUnrolledGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ErrorDetailStatusUnrolledGenerator() gopter.Gen {
	if errorDetailStatusUnrolledGenerator != nil {
		return errorDetailStatusUnrolledGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetailStatusUnrolled(generators)
	errorDetailStatusUnrolledGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_Status_Unrolled{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetailStatusUnrolled(generators)
	AddRelatedPropertyGeneratorsForErrorDetailStatusUnrolled(generators)
	errorDetailStatusUnrolledGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_Status_Unrolled{}), generators)

	return errorDetailStatusUnrolledGenerator
}

// AddIndependentPropertyGeneratorsForErrorDetailStatusUnrolled is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorDetailStatusUnrolled(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForErrorDetailStatusUnrolled is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorDetailStatusUnrolled(gens map[string]gopter.Gen) {
	gens["AdditionalInfo"] = gen.SliceOf(ErrorAdditionalInfoStatusGenerator())
}

func Test_PersonalComputeInstanceSettings_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PersonalComputeInstanceSettings to PersonalComputeInstanceSettings via AssignPropertiesToPersonalComputeInstanceSettings & AssignPropertiesFromPersonalComputeInstanceSettings returns original",
		prop.ForAll(RunPropertyAssignmentTestForPersonalComputeInstanceSettings, PersonalComputeInstanceSettingsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPersonalComputeInstanceSettings tests if a specific instance of PersonalComputeInstanceSettings can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForPersonalComputeInstanceSettings(subject PersonalComputeInstanceSettings) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.PersonalComputeInstanceSettings
	err := copied.AssignPropertiesToPersonalComputeInstanceSettings(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PersonalComputeInstanceSettings
	err = actual.AssignPropertiesFromPersonalComputeInstanceSettings(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PersonalComputeInstanceSettings_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PersonalComputeInstanceSettings via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPersonalComputeInstanceSettings, PersonalComputeInstanceSettingsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPersonalComputeInstanceSettings runs a test to see if a specific instance of PersonalComputeInstanceSettings round trips to JSON and back losslessly
func RunJSONSerializationTestForPersonalComputeInstanceSettings(subject PersonalComputeInstanceSettings) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PersonalComputeInstanceSettings
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PersonalComputeInstanceSettings instances for property testing - lazily instantiated by
// PersonalComputeInstanceSettingsGenerator()
var personalComputeInstanceSettingsGenerator gopter.Gen

// PersonalComputeInstanceSettingsGenerator returns a generator of PersonalComputeInstanceSettings instances for property testing.
func PersonalComputeInstanceSettingsGenerator() gopter.Gen {
	if personalComputeInstanceSettingsGenerator != nil {
		return personalComputeInstanceSettingsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPersonalComputeInstanceSettings(generators)
	personalComputeInstanceSettingsGenerator = gen.Struct(reflect.TypeOf(PersonalComputeInstanceSettings{}), generators)

	return personalComputeInstanceSettingsGenerator
}

// AddRelatedPropertyGeneratorsForPersonalComputeInstanceSettings is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPersonalComputeInstanceSettings(gens map[string]gopter.Gen) {
	gens["AssignedUser"] = gen.PtrOf(AssignedUserGenerator())
}

func Test_ResourceId_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ResourceId to ResourceId via AssignPropertiesToResourceId & AssignPropertiesFromResourceId returns original",
		prop.ForAll(RunPropertyAssignmentTestForResourceId, ResourceIdGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForResourceId tests if a specific instance of ResourceId can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForResourceId(subject ResourceId) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ResourceId
	err := copied.AssignPropertiesToResourceId(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ResourceId
	err = actual.AssignPropertiesFromResourceId(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ResourceId_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceId via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceId, ResourceIdGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceId runs a test to see if a specific instance of ResourceId round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceId(subject ResourceId) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceId
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceId instances for property testing - lazily instantiated by ResourceIdGenerator()
var resourceIdGenerator gopter.Gen

// ResourceIdGenerator returns a generator of ResourceId instances for property testing.
func ResourceIdGenerator() gopter.Gen {
	if resourceIdGenerator != nil {
		return resourceIdGenerator
	}

	generators := make(map[string]gopter.Gen)
	resourceIdGenerator = gen.Struct(reflect.TypeOf(ResourceId{}), generators)

	return resourceIdGenerator
}

func Test_ScaleSettings_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ScaleSettings to ScaleSettings via AssignPropertiesToScaleSettings & AssignPropertiesFromScaleSettings returns original",
		prop.ForAll(RunPropertyAssignmentTestForScaleSettings, ScaleSettingsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForScaleSettings tests if a specific instance of ScaleSettings can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForScaleSettings(subject ScaleSettings) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ScaleSettings
	err := copied.AssignPropertiesToScaleSettings(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ScaleSettings
	err = actual.AssignPropertiesFromScaleSettings(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ScaleSettings_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleSettings via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleSettings, ScaleSettingsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleSettings runs a test to see if a specific instance of ScaleSettings round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleSettings(subject ScaleSettings) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleSettings
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleSettings instances for property testing - lazily instantiated by ScaleSettingsGenerator()
var scaleSettingsGenerator gopter.Gen

// ScaleSettingsGenerator returns a generator of ScaleSettings instances for property testing.
func ScaleSettingsGenerator() gopter.Gen {
	if scaleSettingsGenerator != nil {
		return scaleSettingsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleSettings(generators)
	scaleSettingsGenerator = gen.Struct(reflect.TypeOf(ScaleSettings{}), generators)

	return scaleSettingsGenerator
}

// AddIndependentPropertyGeneratorsForScaleSettings is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleSettings(gens map[string]gopter.Gen) {
	gens["MaxNodeCount"] = gen.PtrOf(gen.Int())
	gens["MinNodeCount"] = gen.PtrOf(gen.Int())
	gens["NodeIdleTimeBeforeScaleDown"] = gen.PtrOf(gen.AlphaString())
}

func Test_SetupScripts_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SetupScripts to SetupScripts via AssignPropertiesToSetupScripts & AssignPropertiesFromSetupScripts returns original",
		prop.ForAll(RunPropertyAssignmentTestForSetupScripts, SetupScriptsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSetupScripts tests if a specific instance of SetupScripts can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForSetupScripts(subject SetupScripts) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.SetupScripts
	err := copied.AssignPropertiesToSetupScripts(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SetupScripts
	err = actual.AssignPropertiesFromSetupScripts(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SetupScripts_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SetupScripts via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSetupScripts, SetupScriptsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSetupScripts runs a test to see if a specific instance of SetupScripts round trips to JSON and back losslessly
func RunJSONSerializationTestForSetupScripts(subject SetupScripts) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SetupScripts
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SetupScripts instances for property testing - lazily instantiated by SetupScriptsGenerator()
var setupScriptsGenerator gopter.Gen

// SetupScriptsGenerator returns a generator of SetupScripts instances for property testing.
func SetupScriptsGenerator() gopter.Gen {
	if setupScriptsGenerator != nil {
		return setupScriptsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSetupScripts(generators)
	setupScriptsGenerator = gen.Struct(reflect.TypeOf(SetupScripts{}), generators)

	return setupScriptsGenerator
}

// AddRelatedPropertyGeneratorsForSetupScripts is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSetupScripts(gens map[string]gopter.Gen) {
	gens["Scripts"] = gen.PtrOf(ScriptsToExecuteGenerator())
}

func Test_SslConfiguration_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SslConfiguration to SslConfiguration via AssignPropertiesToSslConfiguration & AssignPropertiesFromSslConfiguration returns original",
		prop.ForAll(RunPropertyAssignmentTestForSslConfiguration, SslConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSslConfiguration tests if a specific instance of SslConfiguration can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForSslConfiguration(subject SslConfiguration) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.SslConfiguration
	err := copied.AssignPropertiesToSslConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SslConfiguration
	err = actual.AssignPropertiesFromSslConfiguration(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SslConfiguration_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SslConfiguration via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSslConfiguration, SslConfigurationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSslConfiguration runs a test to see if a specific instance of SslConfiguration round trips to JSON and back losslessly
func RunJSONSerializationTestForSslConfiguration(subject SslConfiguration) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SslConfiguration
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SslConfiguration instances for property testing - lazily instantiated by SslConfigurationGenerator()
var sslConfigurationGenerator gopter.Gen

// SslConfigurationGenerator returns a generator of SslConfiguration instances for property testing.
func SslConfigurationGenerator() gopter.Gen {
	if sslConfigurationGenerator != nil {
		return sslConfigurationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSslConfiguration(generators)
	sslConfigurationGenerator = gen.Struct(reflect.TypeOf(SslConfiguration{}), generators)

	return sslConfigurationGenerator
}

// AddIndependentPropertyGeneratorsForSslConfiguration is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSslConfiguration(gens map[string]gopter.Gen) {
	gens["Cert"] = gen.PtrOf(gen.AlphaString())
	gens["Cname"] = gen.PtrOf(gen.AlphaString())
	gens["Key"] = gen.PtrOf(gen.AlphaString())
	gens["LeafDomainLabel"] = gen.PtrOf(gen.AlphaString())
	gens["OverwriteExistingDomain"] = gen.PtrOf(gen.Bool())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(SslConfigurationStatusAuto, SslConfigurationStatusDisabled, SslConfigurationStatusEnabled))
}

func Test_UserAccountCredentials_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from UserAccountCredentials to UserAccountCredentials via AssignPropertiesToUserAccountCredentials & AssignPropertiesFromUserAccountCredentials returns original",
		prop.ForAll(RunPropertyAssignmentTestForUserAccountCredentials, UserAccountCredentialsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForUserAccountCredentials tests if a specific instance of UserAccountCredentials can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForUserAccountCredentials(subject UserAccountCredentials) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.UserAccountCredentials
	err := copied.AssignPropertiesToUserAccountCredentials(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual UserAccountCredentials
	err = actual.AssignPropertiesFromUserAccountCredentials(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_UserAccountCredentials_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAccountCredentials via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAccountCredentials, UserAccountCredentialsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAccountCredentials runs a test to see if a specific instance of UserAccountCredentials round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAccountCredentials(subject UserAccountCredentials) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAccountCredentials
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAccountCredentials instances for property testing - lazily instantiated by
// UserAccountCredentialsGenerator()
var userAccountCredentialsGenerator gopter.Gen

// UserAccountCredentialsGenerator returns a generator of UserAccountCredentials instances for property testing.
func UserAccountCredentialsGenerator() gopter.Gen {
	if userAccountCredentialsGenerator != nil {
		return userAccountCredentialsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAccountCredentials(generators)
	userAccountCredentialsGenerator = gen.Struct(reflect.TypeOf(UserAccountCredentials{}), generators)

	return userAccountCredentialsGenerator
}

// AddIndependentPropertyGeneratorsForUserAccountCredentials is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAccountCredentials(gens map[string]gopter.Gen) {
	gens["AdminUserName"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineImage_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualMachineImage to VirtualMachineImage via AssignPropertiesToVirtualMachineImage & AssignPropertiesFromVirtualMachineImage returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualMachineImage, VirtualMachineImageGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualMachineImage tests if a specific instance of VirtualMachineImage can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForVirtualMachineImage(subject VirtualMachineImage) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.VirtualMachineImage
	err := copied.AssignPropertiesToVirtualMachineImage(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualMachineImage
	err = actual.AssignPropertiesFromVirtualMachineImage(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualMachineImage_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineImage via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineImage, VirtualMachineImageGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineImage runs a test to see if a specific instance of VirtualMachineImage round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineImage(subject VirtualMachineImage) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineImage
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineImage instances for property testing - lazily instantiated by
// VirtualMachineImageGenerator()
var virtualMachineImageGenerator gopter.Gen

// VirtualMachineImageGenerator returns a generator of VirtualMachineImage instances for property testing.
func VirtualMachineImageGenerator() gopter.Gen {
	if virtualMachineImageGenerator != nil {
		return virtualMachineImageGenerator
	}

	generators := make(map[string]gopter.Gen)
	virtualMachineImageGenerator = gen.Struct(reflect.TypeOf(VirtualMachineImage{}), generators)

	return virtualMachineImageGenerator
}

func Test_VirtualMachineSshCredentials_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from VirtualMachineSshCredentials to VirtualMachineSshCredentials via AssignPropertiesToVirtualMachineSshCredentials & AssignPropertiesFromVirtualMachineSshCredentials returns original",
		prop.ForAll(RunPropertyAssignmentTestForVirtualMachineSshCredentials, VirtualMachineSshCredentialsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForVirtualMachineSshCredentials tests if a specific instance of VirtualMachineSshCredentials can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForVirtualMachineSshCredentials(subject VirtualMachineSshCredentials) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.VirtualMachineSshCredentials
	err := copied.AssignPropertiesToVirtualMachineSshCredentials(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual VirtualMachineSshCredentials
	err = actual.AssignPropertiesFromVirtualMachineSshCredentials(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_VirtualMachineSshCredentials_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineSshCredentials via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineSshCredentials, VirtualMachineSshCredentialsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineSshCredentials runs a test to see if a specific instance of VirtualMachineSshCredentials round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineSshCredentials(subject VirtualMachineSshCredentials) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineSshCredentials
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineSshCredentials instances for property testing - lazily instantiated by
// VirtualMachineSshCredentialsGenerator()
var virtualMachineSshCredentialsGenerator gopter.Gen

// VirtualMachineSshCredentialsGenerator returns a generator of VirtualMachineSshCredentials instances for property testing.
func VirtualMachineSshCredentialsGenerator() gopter.Gen {
	if virtualMachineSshCredentialsGenerator != nil {
		return virtualMachineSshCredentialsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineSshCredentials(generators)
	virtualMachineSshCredentialsGenerator = gen.Struct(reflect.TypeOf(VirtualMachineSshCredentials{}), generators)

	return virtualMachineSshCredentialsGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineSshCredentials is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineSshCredentials(gens map[string]gopter.Gen) {
	gens["PrivateKeyData"] = gen.PtrOf(gen.AlphaString())
	gens["PublicKeyData"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_AssignedUser_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AssignedUser to AssignedUser via AssignPropertiesToAssignedUser & AssignPropertiesFromAssignedUser returns original",
		prop.ForAll(RunPropertyAssignmentTestForAssignedUser, AssignedUserGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAssignedUser tests if a specific instance of AssignedUser can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForAssignedUser(subject AssignedUser) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.AssignedUser
	err := copied.AssignPropertiesToAssignedUser(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AssignedUser
	err = actual.AssignPropertiesFromAssignedUser(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AssignedUser_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AssignedUser via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAssignedUser, AssignedUserGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAssignedUser runs a test to see if a specific instance of AssignedUser round trips to JSON and back losslessly
func RunJSONSerializationTestForAssignedUser(subject AssignedUser) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AssignedUser
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AssignedUser instances for property testing - lazily instantiated by AssignedUserGenerator()
var assignedUserGenerator gopter.Gen

// AssignedUserGenerator returns a generator of AssignedUser instances for property testing.
func AssignedUserGenerator() gopter.Gen {
	if assignedUserGenerator != nil {
		return assignedUserGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAssignedUser(generators)
	assignedUserGenerator = gen.Struct(reflect.TypeOf(AssignedUser{}), generators)

	return assignedUserGenerator
}

// AddIndependentPropertyGeneratorsForAssignedUser is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAssignedUser(gens map[string]gopter.Gen) {
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScriptsToExecute_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ScriptsToExecute to ScriptsToExecute via AssignPropertiesToScriptsToExecute & AssignPropertiesFromScriptsToExecute returns original",
		prop.ForAll(RunPropertyAssignmentTestForScriptsToExecute, ScriptsToExecuteGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForScriptsToExecute tests if a specific instance of ScriptsToExecute can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForScriptsToExecute(subject ScriptsToExecute) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ScriptsToExecute
	err := copied.AssignPropertiesToScriptsToExecute(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ScriptsToExecute
	err = actual.AssignPropertiesFromScriptsToExecute(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ScriptsToExecute_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScriptsToExecute via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScriptsToExecute, ScriptsToExecuteGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScriptsToExecute runs a test to see if a specific instance of ScriptsToExecute round trips to JSON and back losslessly
func RunJSONSerializationTestForScriptsToExecute(subject ScriptsToExecute) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScriptsToExecute
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScriptsToExecute instances for property testing - lazily instantiated by ScriptsToExecuteGenerator()
var scriptsToExecuteGenerator gopter.Gen

// ScriptsToExecuteGenerator returns a generator of ScriptsToExecute instances for property testing.
func ScriptsToExecuteGenerator() gopter.Gen {
	if scriptsToExecuteGenerator != nil {
		return scriptsToExecuteGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScriptsToExecute(generators)
	scriptsToExecuteGenerator = gen.Struct(reflect.TypeOf(ScriptsToExecute{}), generators)

	return scriptsToExecuteGenerator
}

// AddRelatedPropertyGeneratorsForScriptsToExecute is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScriptsToExecute(gens map[string]gopter.Gen) {
	gens["CreationScript"] = gen.PtrOf(ScriptReferenceGenerator())
	gens["StartupScript"] = gen.PtrOf(ScriptReferenceGenerator())
}

func Test_ScriptReference_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ScriptReference to ScriptReference via AssignPropertiesToScriptReference & AssignPropertiesFromScriptReference returns original",
		prop.ForAll(RunPropertyAssignmentTestForScriptReference, ScriptReferenceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForScriptReference tests if a specific instance of ScriptReference can be assigned to v1beta20210701storage and back losslessly
func RunPropertyAssignmentTestForScriptReference(subject ScriptReference) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20210701s.ScriptReference
	err := copied.AssignPropertiesToScriptReference(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ScriptReference
	err = actual.AssignPropertiesFromScriptReference(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ScriptReference_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScriptReference via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScriptReference, ScriptReferenceGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScriptReference runs a test to see if a specific instance of ScriptReference round trips to JSON and back losslessly
func RunJSONSerializationTestForScriptReference(subject ScriptReference) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScriptReference
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScriptReference instances for property testing - lazily instantiated by ScriptReferenceGenerator()
var scriptReferenceGenerator gopter.Gen

// ScriptReferenceGenerator returns a generator of ScriptReference instances for property testing.
func ScriptReferenceGenerator() gopter.Gen {
	if scriptReferenceGenerator != nil {
		return scriptReferenceGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScriptReference(generators)
	scriptReferenceGenerator = gen.Struct(reflect.TypeOf(ScriptReference{}), generators)

	return scriptReferenceGenerator
}

// AddIndependentPropertyGeneratorsForScriptReference is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScriptReference(gens map[string]gopter.Gen) {
	gens["ScriptArguments"] = gen.PtrOf(gen.AlphaString())
	gens["ScriptData"] = gen.PtrOf(gen.AlphaString())
	gens["ScriptSource"] = gen.PtrOf(gen.AlphaString())
	gens["Timeout"] = gen.PtrOf(gen.AlphaString())
}
