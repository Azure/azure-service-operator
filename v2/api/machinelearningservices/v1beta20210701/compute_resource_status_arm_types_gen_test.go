// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ComputeResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeResourceSTATUSARM, ComputeResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeResourceSTATUSARM runs a test to see if a specific instance of ComputeResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeResourceSTATUSARM(subject ComputeResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeResource_STATUSARM instances for property testing - lazily instantiated by
// ComputeResourceSTATUSARMGenerator()
var computeResourceSTATUSARMGenerator gopter.Gen

// ComputeResourceSTATUSARMGenerator returns a generator of ComputeResource_STATUSARM instances for property testing.
// We first initialize computeResourceSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeResourceSTATUSARMGenerator() gopter.Gen {
	if computeResourceSTATUSARMGenerator != nil {
		return computeResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeResourceSTATUSARM(generators)
	computeResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ComputeResource_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeResourceSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForComputeResourceSTATUSARM(generators)
	computeResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ComputeResource_STATUSARM{}), generators)

	return computeResourceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeResourceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForComputeResourceSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(IdentitySTATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(ComputeSTATUSARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuSTATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_Compute_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeSTATUSARM, ComputeSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeSTATUSARM runs a test to see if a specific instance of Compute_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeSTATUSARM(subject Compute_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_STATUSARM instances for property testing - lazily instantiated by ComputeSTATUSARMGenerator()
var computeSTATUSARMGenerator gopter.Gen

// ComputeSTATUSARMGenerator returns a generator of Compute_STATUSARM instances for property testing.
// We first initialize computeSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeSTATUSARMGenerator() gopter.Gen {
	if computeSTATUSARMGenerator != nil {
		return computeSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeSTATUSARM(generators)
	computeSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Compute_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForComputeSTATUSARM(generators)
	computeSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Compute_STATUSARM{}), generators)

	return computeSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeSTATUSARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(
		ComputeType_STATUS_AKS,
		ComputeType_STATUS_AmlCompute,
		ComputeType_STATUS_ComputeInstance,
		ComputeType_STATUS_DataFactory,
		ComputeType_STATUS_DataLakeAnalytics,
		ComputeType_STATUS_Databricks,
		ComputeType_STATUS_HDInsight,
		ComputeType_STATUS_Kubernetes,
		ComputeType_STATUS_SynapseSpark,
		ComputeType_STATUS_VirtualMachine))
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ComputeSTATUSProvisioningState_Canceled,
		ComputeSTATUSProvisioningState_Creating,
		ComputeSTATUSProvisioningState_Deleting,
		ComputeSTATUSProvisioningState_Failed,
		ComputeSTATUSProvisioningState_Succeeded,
		ComputeSTATUSProvisioningState_Unknown,
		ComputeSTATUSProvisioningState_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForComputeSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeSTATUSARM(gens map[string]gopter.Gen) {
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponseSTATUSARMGenerator())
}

func Test_Identity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Identity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIdentitySTATUSARM, IdentitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIdentitySTATUSARM runs a test to see if a specific instance of Identity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIdentitySTATUSARM(subject Identity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Identity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Identity_STATUSARM instances for property testing - lazily instantiated by IdentitySTATUSARMGenerator()
var identitySTATUSARMGenerator gopter.Gen

// IdentitySTATUSARMGenerator returns a generator of Identity_STATUSARM instances for property testing.
// We first initialize identitySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IdentitySTATUSARMGenerator() gopter.Gen {
	if identitySTATUSARMGenerator != nil {
		return identitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIdentitySTATUSARM(generators)
	identitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(Identity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIdentitySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForIdentitySTATUSARM(generators)
	identitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(Identity_STATUSARM{}), generators)

	return identitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIdentitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		IdentitySTATUSType_None,
		IdentitySTATUSType_SystemAssigned,
		IdentitySTATUSType_SystemAssignedUserAssigned,
		IdentitySTATUSType_UserAssigned))
}

// AddRelatedPropertyGeneratorsForIdentitySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), UserAssignedIdentitySTATUSARMGenerator())
}

func Test_Sku_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuSTATUSARM, SkuSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuSTATUSARM runs a test to see if a specific instance of Sku_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuSTATUSARM(subject Sku_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUSARM instances for property testing - lazily instantiated by SkuSTATUSARMGenerator()
var skuSTATUSARMGenerator gopter.Gen

// SkuSTATUSARMGenerator returns a generator of Sku_STATUSARM instances for property testing.
func SkuSTATUSARMGenerator() gopter.Gen {
	if skuSTATUSARMGenerator != nil {
		return skuSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuSTATUSARM(generators)
	skuSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUSARM{}), generators)

	return skuSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemDataSTATUSARM, SystemDataSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemDataSTATUSARM runs a test to see if a specific instance of SystemData_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemDataSTATUSARM(subject SystemData_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUSARM instances for property testing - lazily instantiated by
// SystemDataSTATUSARMGenerator()
var systemDataSTATUSARMGenerator gopter.Gen

// SystemDataSTATUSARMGenerator returns a generator of SystemData_STATUSARM instances for property testing.
func SystemDataSTATUSARMGenerator() gopter.Gen {
	if systemDataSTATUSARMGenerator != nil {
		return systemDataSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemDataSTATUSARM(generators)
	systemDataSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUSARM{}), generators)

	return systemDataSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemDataSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemDataSTATUSARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemDataSTATUSCreatedByType_Application,
		SystemDataSTATUSCreatedByType_Key,
		SystemDataSTATUSCreatedByType_ManagedIdentity,
		SystemDataSTATUSCreatedByType_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemDataSTATUSLastModifiedByType_Application,
		SystemDataSTATUSLastModifiedByType_Key,
		SystemDataSTATUSLastModifiedByType_ManagedIdentity,
		SystemDataSTATUSLastModifiedByType_User))
}

func Test_ErrorResponse_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorResponse_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorResponseSTATUSARM, ErrorResponseSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorResponseSTATUSARM runs a test to see if a specific instance of ErrorResponse_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorResponseSTATUSARM(subject ErrorResponse_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorResponse_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorResponse_STATUSARM instances for property testing - lazily instantiated by
// ErrorResponseSTATUSARMGenerator()
var errorResponseSTATUSARMGenerator gopter.Gen

// ErrorResponseSTATUSARMGenerator returns a generator of ErrorResponse_STATUSARM instances for property testing.
func ErrorResponseSTATUSARMGenerator() gopter.Gen {
	if errorResponseSTATUSARMGenerator != nil {
		return errorResponseSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForErrorResponseSTATUSARM(generators)
	errorResponseSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ErrorResponse_STATUSARM{}), generators)

	return errorResponseSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForErrorResponseSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorResponseSTATUSARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ErrorDetailSTATUSARMGenerator())
}

func Test_UserAssignedIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentitySTATUSARM, UserAssignedIdentitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentitySTATUSARM runs a test to see if a specific instance of UserAssignedIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentitySTATUSARM(subject UserAssignedIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_STATUSARM instances for property testing - lazily instantiated by
// UserAssignedIdentitySTATUSARMGenerator()
var userAssignedIdentitySTATUSARMGenerator gopter.Gen

// UserAssignedIdentitySTATUSARMGenerator returns a generator of UserAssignedIdentity_STATUSARM instances for property testing.
func UserAssignedIdentitySTATUSARMGenerator() gopter.Gen {
	if userAssignedIdentitySTATUSARMGenerator != nil {
		return userAssignedIdentitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentitySTATUSARM(generators)
	userAssignedIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_STATUSARM{}), generators)

	return userAssignedIdentitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ErrorDetail_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorDetail_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorDetailSTATUSARM, ErrorDetailSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorDetailSTATUSARM runs a test to see if a specific instance of ErrorDetail_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorDetailSTATUSARM(subject ErrorDetail_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorDetail_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorDetail_STATUSARM instances for property testing - lazily instantiated by
// ErrorDetailSTATUSARMGenerator()
var errorDetailSTATUSARMGenerator gopter.Gen

// ErrorDetailSTATUSARMGenerator returns a generator of ErrorDetail_STATUSARM instances for property testing.
// We first initialize errorDetailSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ErrorDetailSTATUSARMGenerator() gopter.Gen {
	if errorDetailSTATUSARMGenerator != nil {
		return errorDetailSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetailSTATUSARM(generators)
	errorDetailSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetailSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForErrorDetailSTATUSARM(generators)
	errorDetailSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUSARM{}), generators)

	return errorDetailSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForErrorDetailSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorDetailSTATUSARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForErrorDetailSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorDetailSTATUSARM(gens map[string]gopter.Gen) {
	gens["AdditionalInfo"] = gen.SliceOf(ErrorAdditionalInfoSTATUSARMGenerator())
	gens["Details"] = gen.SliceOf(ErrorDetailSTATUSUnrolledARMGenerator())
}

func Test_ErrorAdditionalInfo_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorAdditionalInfo_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorAdditionalInfoSTATUSARM, ErrorAdditionalInfoSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorAdditionalInfoSTATUSARM runs a test to see if a specific instance of ErrorAdditionalInfo_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorAdditionalInfoSTATUSARM(subject ErrorAdditionalInfo_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorAdditionalInfo_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorAdditionalInfo_STATUSARM instances for property testing - lazily instantiated by
// ErrorAdditionalInfoSTATUSARMGenerator()
var errorAdditionalInfoSTATUSARMGenerator gopter.Gen

// ErrorAdditionalInfoSTATUSARMGenerator returns a generator of ErrorAdditionalInfo_STATUSARM instances for property testing.
func ErrorAdditionalInfoSTATUSARMGenerator() gopter.Gen {
	if errorAdditionalInfoSTATUSARMGenerator != nil {
		return errorAdditionalInfoSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorAdditionalInfoSTATUSARM(generators)
	errorAdditionalInfoSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ErrorAdditionalInfo_STATUSARM{}), generators)

	return errorAdditionalInfoSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForErrorAdditionalInfoSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorAdditionalInfoSTATUSARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ErrorDetail_STATUS_UnrolledARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorDetail_STATUS_UnrolledARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorDetailSTATUSUnrolledARM, ErrorDetailSTATUSUnrolledARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorDetailSTATUSUnrolledARM runs a test to see if a specific instance of ErrorDetail_STATUS_UnrolledARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorDetailSTATUSUnrolledARM(subject ErrorDetail_STATUS_UnrolledARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorDetail_STATUS_UnrolledARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorDetail_STATUS_UnrolledARM instances for property testing - lazily instantiated by
// ErrorDetailSTATUSUnrolledARMGenerator()
var errorDetailSTATUSUnrolledARMGenerator gopter.Gen

// ErrorDetailSTATUSUnrolledARMGenerator returns a generator of ErrorDetail_STATUS_UnrolledARM instances for property testing.
// We first initialize errorDetailSTATUSUnrolledARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ErrorDetailSTATUSUnrolledARMGenerator() gopter.Gen {
	if errorDetailSTATUSUnrolledARMGenerator != nil {
		return errorDetailSTATUSUnrolledARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetailSTATUSUnrolledARM(generators)
	errorDetailSTATUSUnrolledARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_UnrolledARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetailSTATUSUnrolledARM(generators)
	AddRelatedPropertyGeneratorsForErrorDetailSTATUSUnrolledARM(generators)
	errorDetailSTATUSUnrolledARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_UnrolledARM{}), generators)

	return errorDetailSTATUSUnrolledARMGenerator
}

// AddIndependentPropertyGeneratorsForErrorDetailSTATUSUnrolledARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorDetailSTATUSUnrolledARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForErrorDetailSTATUSUnrolledARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorDetailSTATUSUnrolledARM(gens map[string]gopter.Gen) {
	gens["AdditionalInfo"] = gen.SliceOf(ErrorAdditionalInfoSTATUSARMGenerator())
}
