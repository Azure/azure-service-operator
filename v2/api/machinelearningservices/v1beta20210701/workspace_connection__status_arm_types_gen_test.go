// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_WorkspaceConnection_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnection_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionStatusARM, WorkspaceConnectionStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionStatusARM runs a test to see if a specific instance of WorkspaceConnection_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionStatusARM(subject WorkspaceConnection_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnection_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnection_StatusARM instances for property testing - lazily instantiated by
// WorkspaceConnectionStatusARMGenerator()
var workspaceConnectionStatusARMGenerator gopter.Gen

// WorkspaceConnectionStatusARMGenerator returns a generator of WorkspaceConnection_StatusARM instances for property testing.
// We first initialize workspaceConnectionStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspaceConnectionStatusARMGenerator() gopter.Gen {
	if workspaceConnectionStatusARMGenerator != nil {
		return workspaceConnectionStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionStatusARM(generators)
	workspaceConnectionStatusARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnection_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionStatusARM(generators)
	AddRelatedPropertyGeneratorsForWorkspaceConnectionStatusARM(generators)
	workspaceConnectionStatusARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnection_StatusARM{}), generators)

	return workspaceConnectionStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspaceConnectionStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaceConnectionStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WorkspaceConnectionPropsStatusARMGenerator())
}

func Test_WorkspaceConnectionProps_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionProps_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionPropsStatusARM, WorkspaceConnectionPropsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionPropsStatusARM runs a test to see if a specific instance of WorkspaceConnectionProps_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionPropsStatusARM(subject WorkspaceConnectionProps_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionProps_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionProps_StatusARM instances for property testing - lazily instantiated by
// WorkspaceConnectionPropsStatusARMGenerator()
var workspaceConnectionPropsStatusARMGenerator gopter.Gen

// WorkspaceConnectionPropsStatusARMGenerator returns a generator of WorkspaceConnectionProps_StatusARM instances for property testing.
func WorkspaceConnectionPropsStatusARMGenerator() gopter.Gen {
	if workspaceConnectionPropsStatusARMGenerator != nil {
		return workspaceConnectionPropsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionPropsStatusARM(generators)
	workspaceConnectionPropsStatusARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionProps_StatusARM{}), generators)

	return workspaceConnectionPropsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionPropsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionPropsStatusARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.PtrOf(gen.AlphaString())
	gens["Category"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(WorkspaceConnectionPropsStatusValueFormat_JSON))
}
