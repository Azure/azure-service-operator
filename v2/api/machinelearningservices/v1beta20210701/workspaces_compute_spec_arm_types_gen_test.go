// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Workspaces_Compute_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspaces_Compute_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaces_Compute_Spec_ARM, Workspaces_Compute_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaces_Compute_Spec_ARM runs a test to see if a specific instance of Workspaces_Compute_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaces_Compute_Spec_ARM(subject Workspaces_Compute_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspaces_Compute_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspaces_Compute_Spec_ARM instances for property testing - lazily instantiated by
// Workspaces_Compute_Spec_ARMGenerator()
var workspaces_Compute_Spec_ARMGenerator gopter.Gen

// Workspaces_Compute_Spec_ARMGenerator returns a generator of Workspaces_Compute_Spec_ARM instances for property testing.
// We first initialize workspaces_Compute_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Workspaces_Compute_Spec_ARMGenerator() gopter.Gen {
	if workspaces_Compute_Spec_ARMGenerator != nil {
		return workspaces_Compute_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaces_Compute_Spec_ARM(generators)
	workspaces_Compute_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Workspaces_Compute_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaces_Compute_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForWorkspaces_Compute_Spec_ARM(generators)
	workspaces_Compute_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Workspaces_Compute_Spec_ARM{}), generators)

	return workspaces_Compute_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaces_Compute_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaces_Compute_Spec_ARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspaces_Compute_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaces_Compute_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(Identity_ARMGenerator())
	gens["Properties"] = gen.PtrOf(Compute_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_ARMGenerator())
}

func Test_Compute_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCompute_ARM, Compute_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCompute_ARM runs a test to see if a specific instance of Compute_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCompute_ARM(subject Compute_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_ARM instances for property testing - lazily instantiated by Compute_ARMGenerator()
var compute_ARMGenerator gopter.Gen

// Compute_ARMGenerator returns a generator of Compute_ARM instances for property testing.
func Compute_ARMGenerator() gopter.Gen {
	if compute_ARMGenerator != nil {
		return compute_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
<<<<<<< HEAD
	AddIndependentPropertyGeneratorsForCompute_ARM(generators)
	compute_ARMGenerator = gen.Struct(reflect.TypeOf(Compute_ARM{}), generators)
=======
	AddRelatedPropertyGeneratorsForCompute_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(Compute_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	compute_ARMGenerator = gen.OneGenOf(gens...)
>>>>>>> main

	return compute_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCompute_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCompute_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.PtrOf(gen.OneConstOf(
		ComputeType_AKS,
		ComputeType_AmlCompute,
		ComputeType_ComputeInstance,
		ComputeType_DataFactory,
		ComputeType_DataLakeAnalytics,
		ComputeType_Databricks,
		ComputeType_HDInsight,
		ComputeType_Kubernetes,
		ComputeType_SynapseSpark,
		ComputeType_VirtualMachine))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}
