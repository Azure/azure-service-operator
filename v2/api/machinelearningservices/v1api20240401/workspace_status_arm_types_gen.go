// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240401

import "encoding/json"

// An object that represents a machine learning workspace.
type Workspace_STATUS_ARM struct {
	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Identity: The identity of the resource.
	Identity *ManagedServiceIdentity_STATUS_ARM `json:"identity,omitempty"`
	Kind     *string                            `json:"kind,omitempty"`

	// Location: Specifies the location of the resource.
	Location *string `json:"location,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Properties: The properties of the machine learning workspace.
	Properties *WorkspaceProperties_STATUS_ARM `json:"properties,omitempty"`

	// Sku: The sku of the workspace.
	Sku *Sku_STATUS_ARM `json:"sku,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS_ARM `json:"systemData,omitempty"`

	// Tags: Contains resource tags defined as key/value pairs.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity_STATUS_ARM struct {
	// PrincipalId: The service principal ID of the system assigned identity. This property will only be provided for a system
	// assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	// TenantId: The tenant ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	TenantId *string `json:"tenantId,omitempty"`

	// Type: Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type                   *ManagedServiceIdentityType_STATUS_ARM     `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserAssignedIdentity_STATUS_ARM `json:"userAssignedIdentities,omitempty"`
}

// The resource model definition representing SKU
type Sku_STATUS_ARM struct {
	// Capacity: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible
	// for the resource this may be omitted.
	Capacity *int `json:"capacity,omitempty"`

	// Family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `json:"family,omitempty"`

	// Name: The name of the SKU. Ex - P3. It is typically a letter+number code
	Name *string `json:"name,omitempty"`

	// Size: The SKU size. When the name field is the combination of tier and some other value, this would be the standalone
	// code.
	Size *string `json:"size,omitempty"`

	// Tier: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is
	// not  required on a PUT.
	Tier *SkuTier_STATUS_ARM `json:"tier,omitempty"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS_ARM struct {
	// CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemData_CreatedByType_STATUS_ARM `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemData_LastModifiedByType_STATUS_ARM `json:"lastModifiedByType,omitempty"`
}

// The properties of a machine learning workspace.
type WorkspaceProperties_STATUS_ARM struct {
	// AllowPublicAccessWhenBehindVnet: The flag to indicate whether to allow public access when behind VNet.
	AllowPublicAccessWhenBehindVnet *bool `json:"allowPublicAccessWhenBehindVnet,omitempty"`

	// ApplicationInsights: ARM id of the application insights associated with this workspace.
	ApplicationInsights  *string  `json:"applicationInsights,omitempty"`
	AssociatedWorkspaces []string `json:"associatedWorkspaces,omitempty"`

	// ContainerRegistry: ARM id of the container registry associated with this workspace.
	ContainerRegistry *string `json:"containerRegistry,omitempty"`

	// Description: The description of this workspace.
	Description *string `json:"description,omitempty"`

	// DiscoveryUrl: Url for the discovery service to identify regional endpoints for machine learning experimentation services
	DiscoveryUrl        *string `json:"discoveryUrl,omitempty"`
	EnableDataIsolation *bool   `json:"enableDataIsolation,omitempty"`

	// Encryption: The encryption settings of Azure ML workspace.
	Encryption *EncryptionProperty_STATUS_ARM `json:"encryption,omitempty"`

	// FeatureStoreSettings: Settings for feature store type workspace.
	FeatureStoreSettings *FeatureStoreSettings_STATUS_ARM `json:"featureStoreSettings,omitempty"`

	// FriendlyName: The friendly name for this workspace. This name in mutable
	FriendlyName *string `json:"friendlyName,omitempty"`

	// HbiWorkspace: The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service
	HbiWorkspace  *bool   `json:"hbiWorkspace,omitempty"`
	HubResourceId *string `json:"hubResourceId,omitempty"`

	// ImageBuildCompute: The compute name for image build
	ImageBuildCompute *string `json:"imageBuildCompute,omitempty"`

	// KeyVault: ARM id of the key vault associated with this workspace. This cannot be changed once the workspace has been
	// created
	KeyVault *string `json:"keyVault,omitempty"`

	// ManagedNetwork: Managed Network settings for a machine learning workspace.
	ManagedNetwork *ManagedNetworkSettings_STATUS_ARM `json:"managedNetwork,omitempty"`

	// MlFlowTrackingUri: The URI associated with this workspace that machine learning flow must point at to set up tracking.
	MlFlowTrackingUri *string `json:"mlFlowTrackingUri,omitempty"`

	// NotebookInfo: The notebook info of Azure ML workspace.
	NotebookInfo *NotebookResourceInfo_STATUS_ARM `json:"notebookInfo,omitempty"`

	// PrimaryUserAssignedIdentity: The user assigned identity resource id that represents the workspace identity.
	PrimaryUserAssignedIdentity *string `json:"primaryUserAssignedIdentity,omitempty"`

	// PrivateEndpointConnections: The list of private endpoint connections in the workspace.
	PrivateEndpointConnections []PrivateEndpointConnection_STATUS_ARM `json:"privateEndpointConnections,omitempty"`

	// PrivateLinkCount: Count of private connections in the workspace
	PrivateLinkCount *int `json:"privateLinkCount,omitempty"`

	// ProvisioningState: The current deployment state of workspace resource. The provisioningState is to indicate states for
	// resource provisioning.
	ProvisioningState *WorkspaceProperties_ProvisioningState_STATUS_ARM `json:"provisioningState,omitempty"`

	// PublicNetworkAccess: Whether requests from Public Network are allowed.
	PublicNetworkAccess *WorkspaceProperties_PublicNetworkAccess_STATUS_ARM `json:"publicNetworkAccess,omitempty"`

	// ServerlessComputeSettings: Settings for serverless compute created in the workspace
	ServerlessComputeSettings *ServerlessComputeSettings_STATUS_ARM `json:"serverlessComputeSettings,omitempty"`

	// ServiceManagedResourcesSettings: The service managed resource settings.
	ServiceManagedResourcesSettings *ServiceManagedResourcesSettings_STATUS_ARM `json:"serviceManagedResourcesSettings,omitempty"`

	// ServiceProvisionedResourceGroup: The name of the managed resource group created by workspace RP in customer subscription
	// if the workspace is CMK workspace
	ServiceProvisionedResourceGroup *string `json:"serviceProvisionedResourceGroup,omitempty"`

	// SharedPrivateLinkResources: The list of shared private link resources in this workspace.
	SharedPrivateLinkResources []SharedPrivateLinkResource_STATUS_ARM `json:"sharedPrivateLinkResources,omitempty"`

	// StorageAccount: ARM id of the storage account associated with this workspace. This cannot be changed once the workspace
	// has been created
	StorageAccount *string `json:"storageAccount,omitempty"`

	// StorageHnsEnabled: If the storage associated with the workspace has hierarchical namespace(HNS) enabled.
	StorageHnsEnabled *bool `json:"storageHnsEnabled,omitempty"`

	// TenantId: The tenant id associated with this workspace.
	TenantId *string `json:"tenantId,omitempty"`

	// V1LegacyMode: Enabling v1_legacy_mode may prevent you from using features provided by the v2 API.
	V1LegacyMode *bool `json:"v1LegacyMode,omitempty"`

	// WorkspaceHubConfig: WorkspaceHub's configuration object.
	WorkspaceHubConfig *WorkspaceHubConfig_STATUS_ARM `json:"workspaceHubConfig,omitempty"`

	// WorkspaceId: The immutable id associated with this workspace.
	WorkspaceId *string `json:"workspaceId,omitempty"`
}

type EncryptionProperty_STATUS_ARM struct {
	// Identity: The identity that will be used to access the key vault for encryption at rest.
	Identity *IdentityForCmk_STATUS_ARM `json:"identity,omitempty"`

	// KeyVaultProperties: Customer Key vault properties.
	KeyVaultProperties *EncryptionKeyVaultProperties_STATUS_ARM `json:"keyVaultProperties,omitempty"`

	// Status: Indicates whether or not the encryption is enabled for the workspace.
	Status *EncryptionProperty_Status_STATUS_ARM `json:"status,omitempty"`
}

// Settings for feature store type workspace.
type FeatureStoreSettings_STATUS_ARM struct {
	// ComputeRuntime: Compute runtime config for feature store type workspace.
	ComputeRuntime             *ComputeRuntimeDto_STATUS_ARM `json:"computeRuntime,omitempty"`
	OfflineStoreConnectionName *string                       `json:"offlineStoreConnectionName,omitempty"`
	OnlineStoreConnectionName  *string                       `json:"onlineStoreConnectionName,omitempty"`
}

// Managed Network settings for a machine learning workspace.
type ManagedNetworkSettings_STATUS_ARM struct {
	// IsolationMode: Isolation mode for the managed network of a machine learning workspace.
	IsolationMode *IsolationMode_STATUS_ARM          `json:"isolationMode,omitempty"`
	NetworkId     *string                            `json:"networkId,omitempty"`
	OutboundRules map[string]OutboundRule_STATUS_ARM `json:"outboundRules,omitempty"`

	// Status: Status of the Provisioning for the managed network of a machine learning workspace.
	Status *ManagedNetworkProvisionStatus_STATUS_ARM `json:"status,omitempty"`
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType_STATUS_ARM string

const (
	ManagedServiceIdentityType_STATUS_ARM_None                       = ManagedServiceIdentityType_STATUS_ARM("None")
	ManagedServiceIdentityType_STATUS_ARM_SystemAssigned             = ManagedServiceIdentityType_STATUS_ARM("SystemAssigned")
	ManagedServiceIdentityType_STATUS_ARM_SystemAssignedUserAssigned = ManagedServiceIdentityType_STATUS_ARM("SystemAssigned,UserAssigned")
	ManagedServiceIdentityType_STATUS_ARM_UserAssigned               = ManagedServiceIdentityType_STATUS_ARM("UserAssigned")
)

// Mapping from string to ManagedServiceIdentityType_STATUS_ARM
var managedServiceIdentityType_STATUS_ARM_Values = map[string]ManagedServiceIdentityType_STATUS_ARM{
	"none":                        ManagedServiceIdentityType_STATUS_ARM_None,
	"systemassigned":              ManagedServiceIdentityType_STATUS_ARM_SystemAssigned,
	"systemassigned,userassigned": ManagedServiceIdentityType_STATUS_ARM_SystemAssignedUserAssigned,
	"userassigned":                ManagedServiceIdentityType_STATUS_ARM_UserAssigned,
}

type NotebookResourceInfo_STATUS_ARM struct {
	Fqdn *string `json:"fqdn,omitempty"`

	// NotebookPreparationError: The error that occurs when preparing notebook.
	NotebookPreparationError *NotebookPreparationError_STATUS_ARM `json:"notebookPreparationError,omitempty"`

	// ResourceId: the data plane resourceId that used to initialize notebook component
	ResourceId *string `json:"resourceId,omitempty"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnection_STATUS_ARM struct {
	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`
}

type ServerlessComputeSettings_STATUS_ARM struct {
	// ServerlessComputeCustomSubnet: The resource ID of an existing virtual network subnet in which serverless compute nodes
	// should be deployed
	ServerlessComputeCustomSubnet *string `json:"serverlessComputeCustomSubnet,omitempty"`

	// ServerlessComputeNoPublicIP: The flag to signal if serverless compute nodes deployed in custom vNet would have no public
	// IP addresses for a workspace with private endpoint
	ServerlessComputeNoPublicIP *bool `json:"serverlessComputeNoPublicIP,omitempty"`
}

type ServiceManagedResourcesSettings_STATUS_ARM struct {
	// CosmosDb: The settings for the service managed cosmosdb account.
	CosmosDb *CosmosDbSettings_STATUS_ARM `json:"cosmosDb,omitempty"`
}

type SharedPrivateLinkResource_STATUS_ARM struct {
	// Name: Unique name of the private link.
	Name *string `json:"name,omitempty"`

	// Properties: Resource properties.
	Properties *SharedPrivateLinkResourceProperty_STATUS_ARM `json:"properties,omitempty"`
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not
// required on a PUT.
type SkuTier_STATUS_ARM string

const (
	SkuTier_STATUS_ARM_Basic    = SkuTier_STATUS_ARM("Basic")
	SkuTier_STATUS_ARM_Free     = SkuTier_STATUS_ARM("Free")
	SkuTier_STATUS_ARM_Premium  = SkuTier_STATUS_ARM("Premium")
	SkuTier_STATUS_ARM_Standard = SkuTier_STATUS_ARM("Standard")
)

// Mapping from string to SkuTier_STATUS_ARM
var skuTier_STATUS_ARM_Values = map[string]SkuTier_STATUS_ARM{
	"basic":    SkuTier_STATUS_ARM_Basic,
	"free":     SkuTier_STATUS_ARM_Free,
	"premium":  SkuTier_STATUS_ARM_Premium,
	"standard": SkuTier_STATUS_ARM_Standard,
}

type SystemData_CreatedByType_STATUS_ARM string

const (
	SystemData_CreatedByType_STATUS_ARM_Application     = SystemData_CreatedByType_STATUS_ARM("Application")
	SystemData_CreatedByType_STATUS_ARM_Key             = SystemData_CreatedByType_STATUS_ARM("Key")
	SystemData_CreatedByType_STATUS_ARM_ManagedIdentity = SystemData_CreatedByType_STATUS_ARM("ManagedIdentity")
	SystemData_CreatedByType_STATUS_ARM_User            = SystemData_CreatedByType_STATUS_ARM("User")
)

// Mapping from string to SystemData_CreatedByType_STATUS_ARM
var systemData_CreatedByType_STATUS_ARM_Values = map[string]SystemData_CreatedByType_STATUS_ARM{
	"application":     SystemData_CreatedByType_STATUS_ARM_Application,
	"key":             SystemData_CreatedByType_STATUS_ARM_Key,
	"managedidentity": SystemData_CreatedByType_STATUS_ARM_ManagedIdentity,
	"user":            SystemData_CreatedByType_STATUS_ARM_User,
}

type SystemData_LastModifiedByType_STATUS_ARM string

const (
	SystemData_LastModifiedByType_STATUS_ARM_Application     = SystemData_LastModifiedByType_STATUS_ARM("Application")
	SystemData_LastModifiedByType_STATUS_ARM_Key             = SystemData_LastModifiedByType_STATUS_ARM("Key")
	SystemData_LastModifiedByType_STATUS_ARM_ManagedIdentity = SystemData_LastModifiedByType_STATUS_ARM("ManagedIdentity")
	SystemData_LastModifiedByType_STATUS_ARM_User            = SystemData_LastModifiedByType_STATUS_ARM("User")
)

// Mapping from string to SystemData_LastModifiedByType_STATUS_ARM
var systemData_LastModifiedByType_STATUS_ARM_Values = map[string]SystemData_LastModifiedByType_STATUS_ARM{
	"application":     SystemData_LastModifiedByType_STATUS_ARM_Application,
	"key":             SystemData_LastModifiedByType_STATUS_ARM_Key,
	"managedidentity": SystemData_LastModifiedByType_STATUS_ARM_ManagedIdentity,
	"user":            SystemData_LastModifiedByType_STATUS_ARM_User,
}

// User assigned identity properties
type UserAssignedIdentity_STATUS_ARM struct {
	// ClientId: The client ID of the assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	// PrincipalId: The principal ID of the assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

// WorkspaceHub's configuration object.
type WorkspaceHubConfig_STATUS_ARM struct {
	AdditionalWorkspaceStorageAccounts []string `json:"additionalWorkspaceStorageAccounts,omitempty"`
	DefaultWorkspaceResourceGroup      *string  `json:"defaultWorkspaceResourceGroup,omitempty"`
}

type WorkspaceProperties_ProvisioningState_STATUS_ARM string

const (
	WorkspaceProperties_ProvisioningState_STATUS_ARM_Canceled  = WorkspaceProperties_ProvisioningState_STATUS_ARM("Canceled")
	WorkspaceProperties_ProvisioningState_STATUS_ARM_Creating  = WorkspaceProperties_ProvisioningState_STATUS_ARM("Creating")
	WorkspaceProperties_ProvisioningState_STATUS_ARM_Deleting  = WorkspaceProperties_ProvisioningState_STATUS_ARM("Deleting")
	WorkspaceProperties_ProvisioningState_STATUS_ARM_Failed    = WorkspaceProperties_ProvisioningState_STATUS_ARM("Failed")
	WorkspaceProperties_ProvisioningState_STATUS_ARM_Succeeded = WorkspaceProperties_ProvisioningState_STATUS_ARM("Succeeded")
	WorkspaceProperties_ProvisioningState_STATUS_ARM_Unknown   = WorkspaceProperties_ProvisioningState_STATUS_ARM("Unknown")
	WorkspaceProperties_ProvisioningState_STATUS_ARM_Updating  = WorkspaceProperties_ProvisioningState_STATUS_ARM("Updating")
)

// Mapping from string to WorkspaceProperties_ProvisioningState_STATUS_ARM
var workspaceProperties_ProvisioningState_STATUS_ARM_Values = map[string]WorkspaceProperties_ProvisioningState_STATUS_ARM{
	"canceled":  WorkspaceProperties_ProvisioningState_STATUS_ARM_Canceled,
	"creating":  WorkspaceProperties_ProvisioningState_STATUS_ARM_Creating,
	"deleting":  WorkspaceProperties_ProvisioningState_STATUS_ARM_Deleting,
	"failed":    WorkspaceProperties_ProvisioningState_STATUS_ARM_Failed,
	"succeeded": WorkspaceProperties_ProvisioningState_STATUS_ARM_Succeeded,
	"unknown":   WorkspaceProperties_ProvisioningState_STATUS_ARM_Unknown,
	"updating":  WorkspaceProperties_ProvisioningState_STATUS_ARM_Updating,
}

type WorkspaceProperties_PublicNetworkAccess_STATUS_ARM string

const (
	WorkspaceProperties_PublicNetworkAccess_STATUS_ARM_Disabled = WorkspaceProperties_PublicNetworkAccess_STATUS_ARM("Disabled")
	WorkspaceProperties_PublicNetworkAccess_STATUS_ARM_Enabled  = WorkspaceProperties_PublicNetworkAccess_STATUS_ARM("Enabled")
)

// Mapping from string to WorkspaceProperties_PublicNetworkAccess_STATUS_ARM
var workspaceProperties_PublicNetworkAccess_STATUS_ARM_Values = map[string]WorkspaceProperties_PublicNetworkAccess_STATUS_ARM{
	"disabled": WorkspaceProperties_PublicNetworkAccess_STATUS_ARM_Disabled,
	"enabled":  WorkspaceProperties_PublicNetworkAccess_STATUS_ARM_Enabled,
}

// Compute runtime config for feature store type workspace.
type ComputeRuntimeDto_STATUS_ARM struct {
	SparkRuntimeVersion *string `json:"sparkRuntimeVersion,omitempty"`
}

type CosmosDbSettings_STATUS_ARM struct {
	// CollectionsThroughput: The throughput of the collections in cosmosdb database
	CollectionsThroughput *int `json:"collectionsThroughput,omitempty"`
}

type EncryptionKeyVaultProperties_STATUS_ARM struct {
	// IdentityClientId: For future use - The client id of the identity which will be used to access key vault.
	IdentityClientId *string `json:"identityClientId,omitempty"`

	// KeyIdentifier: Key vault uri to access the encryption key.
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`

	// KeyVaultArmId: The ArmId of the keyVault where the customer owned encryption key is present.
	KeyVaultArmId *string `json:"keyVaultArmId,omitempty"`
}

type EncryptionProperty_Status_STATUS_ARM string

const (
	EncryptionProperty_Status_STATUS_ARM_Disabled = EncryptionProperty_Status_STATUS_ARM("Disabled")
	EncryptionProperty_Status_STATUS_ARM_Enabled  = EncryptionProperty_Status_STATUS_ARM("Enabled")
)

// Mapping from string to EncryptionProperty_Status_STATUS_ARM
var encryptionProperty_Status_STATUS_ARM_Values = map[string]EncryptionProperty_Status_STATUS_ARM{
	"disabled": EncryptionProperty_Status_STATUS_ARM_Disabled,
	"enabled":  EncryptionProperty_Status_STATUS_ARM_Enabled,
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmk_STATUS_ARM struct {
	// UserAssignedIdentity: The ArmId of the user assigned identity that will be used to access the customer managed key vault
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

// Isolation mode for the managed network of a machine learning workspace.
type IsolationMode_STATUS_ARM string

const (
	IsolationMode_STATUS_ARM_AllowInternetOutbound     = IsolationMode_STATUS_ARM("AllowInternetOutbound")
	IsolationMode_STATUS_ARM_AllowOnlyApprovedOutbound = IsolationMode_STATUS_ARM("AllowOnlyApprovedOutbound")
	IsolationMode_STATUS_ARM_Disabled                  = IsolationMode_STATUS_ARM("Disabled")
)

// Mapping from string to IsolationMode_STATUS_ARM
var isolationMode_STATUS_ARM_Values = map[string]IsolationMode_STATUS_ARM{
	"allowinternetoutbound":     IsolationMode_STATUS_ARM_AllowInternetOutbound,
	"allowonlyapprovedoutbound": IsolationMode_STATUS_ARM_AllowOnlyApprovedOutbound,
	"disabled":                  IsolationMode_STATUS_ARM_Disabled,
}

// Status of the Provisioning for the managed network of a machine learning workspace.
type ManagedNetworkProvisionStatus_STATUS_ARM struct {
	SparkReady *bool `json:"sparkReady,omitempty"`

	// Status: Status for the managed network of a machine learning workspace.
	Status *ManagedNetworkStatus_STATUS_ARM `json:"status,omitempty"`
}

type NotebookPreparationError_STATUS_ARM struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
	StatusCode   *int    `json:"statusCode,omitempty"`
}

type OutboundRule_STATUS_ARM struct {
	// FQDN: Mutually exclusive with all other properties
	FQDN *FqdnOutboundRule_STATUS_ARM `json:"fqdn,omitempty"`

	// PrivateEndpoint: Mutually exclusive with all other properties
	PrivateEndpoint *PrivateEndpointOutboundRule_STATUS_ARM `json:"privateEndpoint,omitempty"`

	// ServiceTag: Mutually exclusive with all other properties
	ServiceTag *ServiceTagOutboundRule_STATUS_ARM `json:"serviceTag,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because OutboundRule_STATUS_ARM represents a discriminated union (JSON OneOf)
func (rule OutboundRule_STATUS_ARM) MarshalJSON() ([]byte, error) {
	if rule.FQDN != nil {
		return json.Marshal(rule.FQDN)
	}
	if rule.PrivateEndpoint != nil {
		return json.Marshal(rule.PrivateEndpoint)
	}
	if rule.ServiceTag != nil {
		return json.Marshal(rule.ServiceTag)
	}
	return nil, nil
}

// UnmarshalJSON unmarshals the OutboundRule_STATUS_ARM
func (rule *OutboundRule_STATUS_ARM) UnmarshalJSON(data []byte) error {
	var rawJson map[string]interface{}
	err := json.Unmarshal(data, &rawJson)
	if err != nil {
		return err
	}
	discriminator := rawJson["type"]
	if discriminator == "FQDN" {
		rule.FQDN = &FqdnOutboundRule_STATUS_ARM{}
		return json.Unmarshal(data, rule.FQDN)
	}
	if discriminator == "PrivateEndpoint" {
		rule.PrivateEndpoint = &PrivateEndpointOutboundRule_STATUS_ARM{}
		return json.Unmarshal(data, rule.PrivateEndpoint)
	}
	if discriminator == "ServiceTag" {
		rule.ServiceTag = &ServiceTagOutboundRule_STATUS_ARM{}
		return json.Unmarshal(data, rule.ServiceTag)
	}

	// No error
	return nil
}

// Properties of a shared private link resource.
type SharedPrivateLinkResourceProperty_STATUS_ARM struct {
	// GroupId: The private link resource group id.
	GroupId *string `json:"groupId,omitempty"`

	// PrivateLinkResourceId: The resource id that private link links to.
	PrivateLinkResourceId *string `json:"privateLinkResourceId,omitempty"`

	// RequestMessage: Request message.
	RequestMessage *string `json:"requestMessage,omitempty"`

	// Status: Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *PrivateEndpointServiceConnectionStatus_STATUS_ARM `json:"status,omitempty"`
}

type FqdnOutboundRule_STATUS_ARM struct {
	// Category: Category of a managed network Outbound Rule of a machine learning workspace.
	Category    *RuleCategory_STATUS_ARM `json:"category,omitempty"`
	Destination *string                  `json:"destination,omitempty"`

	// Status: Type of a managed network Outbound Rule of a machine learning workspace.
	Status *RuleStatus_STATUS_ARM           `json:"status,omitempty"`
	Type   FqdnOutboundRule_Type_STATUS_ARM `json:"type,omitempty"`
}

// Status for the managed network of a machine learning workspace.
type ManagedNetworkStatus_STATUS_ARM string

const (
	ManagedNetworkStatus_STATUS_ARM_Active   = ManagedNetworkStatus_STATUS_ARM("Active")
	ManagedNetworkStatus_STATUS_ARM_Inactive = ManagedNetworkStatus_STATUS_ARM("Inactive")
)

// Mapping from string to ManagedNetworkStatus_STATUS_ARM
var managedNetworkStatus_STATUS_ARM_Values = map[string]ManagedNetworkStatus_STATUS_ARM{
	"active":   ManagedNetworkStatus_STATUS_ARM_Active,
	"inactive": ManagedNetworkStatus_STATUS_ARM_Inactive,
}

type PrivateEndpointOutboundRule_STATUS_ARM struct {
	// Category: Category of a managed network Outbound Rule of a machine learning workspace.
	Category *RuleCategory_STATUS_ARM `json:"category,omitempty"`

	// Destination: Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine
	// learning  workspace.
	Destination *PrivateEndpointDestination_STATUS_ARM `json:"destination,omitempty"`

	// Status: Type of a managed network Outbound Rule of a machine learning workspace.
	Status *RuleStatus_STATUS_ARM                      `json:"status,omitempty"`
	Type   PrivateEndpointOutboundRule_Type_STATUS_ARM `json:"type,omitempty"`
}

// The private endpoint connection status.
type PrivateEndpointServiceConnectionStatus_STATUS_ARM string

const (
	PrivateEndpointServiceConnectionStatus_STATUS_ARM_Approved     = PrivateEndpointServiceConnectionStatus_STATUS_ARM("Approved")
	PrivateEndpointServiceConnectionStatus_STATUS_ARM_Disconnected = PrivateEndpointServiceConnectionStatus_STATUS_ARM("Disconnected")
	PrivateEndpointServiceConnectionStatus_STATUS_ARM_Pending      = PrivateEndpointServiceConnectionStatus_STATUS_ARM("Pending")
	PrivateEndpointServiceConnectionStatus_STATUS_ARM_Rejected     = PrivateEndpointServiceConnectionStatus_STATUS_ARM("Rejected")
	PrivateEndpointServiceConnectionStatus_STATUS_ARM_Timeout      = PrivateEndpointServiceConnectionStatus_STATUS_ARM("Timeout")
)

// Mapping from string to PrivateEndpointServiceConnectionStatus_STATUS_ARM
var privateEndpointServiceConnectionStatus_STATUS_ARM_Values = map[string]PrivateEndpointServiceConnectionStatus_STATUS_ARM{
	"approved":     PrivateEndpointServiceConnectionStatus_STATUS_ARM_Approved,
	"disconnected": PrivateEndpointServiceConnectionStatus_STATUS_ARM_Disconnected,
	"pending":      PrivateEndpointServiceConnectionStatus_STATUS_ARM_Pending,
	"rejected":     PrivateEndpointServiceConnectionStatus_STATUS_ARM_Rejected,
	"timeout":      PrivateEndpointServiceConnectionStatus_STATUS_ARM_Timeout,
}

type ServiceTagOutboundRule_STATUS_ARM struct {
	// Category: Category of a managed network Outbound Rule of a machine learning workspace.
	Category *RuleCategory_STATUS_ARM `json:"category,omitempty"`

	// Destination: Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning
	// workspace.
	Destination *ServiceTagDestination_STATUS_ARM `json:"destination,omitempty"`

	// Status: Type of a managed network Outbound Rule of a machine learning workspace.
	Status *RuleStatus_STATUS_ARM                 `json:"status,omitempty"`
	Type   ServiceTagOutboundRule_Type_STATUS_ARM `json:"type,omitempty"`
}

type FqdnOutboundRule_Type_STATUS_ARM string

const FqdnOutboundRule_Type_STATUS_ARM_FQDN = FqdnOutboundRule_Type_STATUS_ARM("FQDN")

// Mapping from string to FqdnOutboundRule_Type_STATUS_ARM
var fqdnOutboundRule_Type_STATUS_ARM_Values = map[string]FqdnOutboundRule_Type_STATUS_ARM{
	"fqdn": FqdnOutboundRule_Type_STATUS_ARM_FQDN,
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning
// workspace.
type PrivateEndpointDestination_STATUS_ARM struct {
	ServiceResourceId *string `json:"serviceResourceId,omitempty"`
	SparkEnabled      *bool   `json:"sparkEnabled,omitempty"`

	// SparkStatus: Type of a managed network Outbound Rule of a machine learning workspace.
	SparkStatus       *RuleStatus_STATUS_ARM `json:"sparkStatus,omitempty"`
	SubresourceTarget *string                `json:"subresourceTarget,omitempty"`
}

type PrivateEndpointOutboundRule_Type_STATUS_ARM string

const PrivateEndpointOutboundRule_Type_STATUS_ARM_PrivateEndpoint = PrivateEndpointOutboundRule_Type_STATUS_ARM("PrivateEndpoint")

// Mapping from string to PrivateEndpointOutboundRule_Type_STATUS_ARM
var privateEndpointOutboundRule_Type_STATUS_ARM_Values = map[string]PrivateEndpointOutboundRule_Type_STATUS_ARM{
	"privateendpoint": PrivateEndpointOutboundRule_Type_STATUS_ARM_PrivateEndpoint,
}

// Category of a managed network Outbound Rule of a machine learning workspace.
type RuleCategory_STATUS_ARM string

const (
	RuleCategory_STATUS_ARM_Dependency  = RuleCategory_STATUS_ARM("Dependency")
	RuleCategory_STATUS_ARM_Recommended = RuleCategory_STATUS_ARM("Recommended")
	RuleCategory_STATUS_ARM_Required    = RuleCategory_STATUS_ARM("Required")
	RuleCategory_STATUS_ARM_UserDefined = RuleCategory_STATUS_ARM("UserDefined")
)

// Mapping from string to RuleCategory_STATUS_ARM
var ruleCategory_STATUS_ARM_Values = map[string]RuleCategory_STATUS_ARM{
	"dependency":  RuleCategory_STATUS_ARM_Dependency,
	"recommended": RuleCategory_STATUS_ARM_Recommended,
	"required":    RuleCategory_STATUS_ARM_Required,
	"userdefined": RuleCategory_STATUS_ARM_UserDefined,
}

// Type of a managed network Outbound Rule of a machine learning workspace.
type RuleStatus_STATUS_ARM string

const (
	RuleStatus_STATUS_ARM_Active   = RuleStatus_STATUS_ARM("Active")
	RuleStatus_STATUS_ARM_Inactive = RuleStatus_STATUS_ARM("Inactive")
)

// Mapping from string to RuleStatus_STATUS_ARM
var ruleStatus_STATUS_ARM_Values = map[string]RuleStatus_STATUS_ARM{
	"active":   RuleStatus_STATUS_ARM_Active,
	"inactive": RuleStatus_STATUS_ARM_Inactive,
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestination_STATUS_ARM struct {
	// Action: The action enum for networking rule.
	Action *RuleAction_STATUS_ARM `json:"action,omitempty"`

	// AddressPrefixes: Optional, if provided, the ServiceTag property will be ignored.
	AddressPrefixes []string `json:"addressPrefixes,omitempty"`
	PortRanges      *string  `json:"portRanges,omitempty"`
	Protocol        *string  `json:"protocol,omitempty"`
	ServiceTag      *string  `json:"serviceTag,omitempty"`
}

type ServiceTagOutboundRule_Type_STATUS_ARM string

const ServiceTagOutboundRule_Type_STATUS_ARM_ServiceTag = ServiceTagOutboundRule_Type_STATUS_ARM("ServiceTag")

// Mapping from string to ServiceTagOutboundRule_Type_STATUS_ARM
var serviceTagOutboundRule_Type_STATUS_ARM_Values = map[string]ServiceTagOutboundRule_Type_STATUS_ARM{
	"servicetag": ServiceTagOutboundRule_Type_STATUS_ARM_ServiceTag,
}

// The action enum for networking rule.
type RuleAction_STATUS_ARM string

const (
	RuleAction_STATUS_ARM_Allow = RuleAction_STATUS_ARM("Allow")
	RuleAction_STATUS_ARM_Deny  = RuleAction_STATUS_ARM("Deny")
)

// Mapping from string to RuleAction_STATUS_ARM
var ruleAction_STATUS_ARM_Values = map[string]RuleAction_STATUS_ARM{
	"allow": RuleAction_STATUS_ARM_Allow,
	"deny":  RuleAction_STATUS_ARM_Deny,
}
