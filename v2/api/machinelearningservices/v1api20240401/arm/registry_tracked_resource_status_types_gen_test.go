// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AcrDetails_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AcrDetails_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAcrDetails_STATUS, AcrDetails_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAcrDetails_STATUS runs a test to see if a specific instance of AcrDetails_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAcrDetails_STATUS(subject AcrDetails_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AcrDetails_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AcrDetails_STATUS instances for property testing - lazily instantiated by AcrDetails_STATUSGenerator()
var acrDetails_STATUSGenerator gopter.Gen

// AcrDetails_STATUSGenerator returns a generator of AcrDetails_STATUS instances for property testing.
func AcrDetails_STATUSGenerator() gopter.Gen {
	if acrDetails_STATUSGenerator != nil {
		return acrDetails_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAcrDetails_STATUS(generators)
	acrDetails_STATUSGenerator = gen.Struct(reflect.TypeOf(AcrDetails_STATUS{}), generators)

	return acrDetails_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForAcrDetails_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAcrDetails_STATUS(gens map[string]gopter.Gen) {
	gens["SystemCreatedAcrAccount"] = gen.PtrOf(SystemCreatedAcrAccount_STATUSGenerator())
	gens["UserCreatedAcrAccount"] = gen.PtrOf(UserCreatedAcrAccount_STATUSGenerator())
}

func Test_ArmResourceId_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ArmResourceId_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForArmResourceId_STATUS, ArmResourceId_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForArmResourceId_STATUS runs a test to see if a specific instance of ArmResourceId_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForArmResourceId_STATUS(subject ArmResourceId_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ArmResourceId_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ArmResourceId_STATUS instances for property testing - lazily instantiated by
// ArmResourceId_STATUSGenerator()
var armResourceId_STATUSGenerator gopter.Gen

// ArmResourceId_STATUSGenerator returns a generator of ArmResourceId_STATUS instances for property testing.
func ArmResourceId_STATUSGenerator() gopter.Gen {
	if armResourceId_STATUSGenerator != nil {
		return armResourceId_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForArmResourceId_STATUS(generators)
	armResourceId_STATUSGenerator = gen.Struct(reflect.TypeOf(ArmResourceId_STATUS{}), generators)

	return armResourceId_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForArmResourceId_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForArmResourceId_STATUS(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedServiceIdentity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_STATUS, ManagedServiceIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_STATUS runs a test to see if a specific instance of ManagedServiceIdentity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_STATUS(subject ManagedServiceIdentity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUS instances for property testing - lazily instantiated by
// ManagedServiceIdentity_STATUSGenerator()
var managedServiceIdentity_STATUSGenerator gopter.Gen

// ManagedServiceIdentity_STATUSGenerator returns a generator of ManagedServiceIdentity_STATUS instances for property testing.
// We first initialize managedServiceIdentity_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_STATUSGenerator() gopter.Gen {
	if managedServiceIdentity_STATUSGenerator != nil {
		return managedServiceIdentity_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	managedServiceIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS(generators)
	managedServiceIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS{}), generators)

	return managedServiceIdentity_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentityType_STATUS_None,
		ManagedServiceIdentityType_STATUS_SystemAssigned,
		ManagedServiceIdentityType_STATUS_SystemAssignedUserAssigned,
		ManagedServiceIdentityType_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		UserAssignedIdentity_STATUSGenerator())
}

func Test_PrivateEndpointResource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointResource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointResource_STATUS, PrivateEndpointResource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointResource_STATUS runs a test to see if a specific instance of PrivateEndpointResource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointResource_STATUS(subject PrivateEndpointResource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointResource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointResource_STATUS instances for property testing - lazily instantiated by
// PrivateEndpointResource_STATUSGenerator()
var privateEndpointResource_STATUSGenerator gopter.Gen

// PrivateEndpointResource_STATUSGenerator returns a generator of PrivateEndpointResource_STATUS instances for property testing.
func PrivateEndpointResource_STATUSGenerator() gopter.Gen {
	if privateEndpointResource_STATUSGenerator != nil {
		return privateEndpointResource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointResource_STATUS(generators)
	privateEndpointResource_STATUSGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointResource_STATUS{}), generators)

	return privateEndpointResource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointResource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointResource_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["SubnetArmId"] = gen.PtrOf(gen.AlphaString())
}

func Test_RegistryPrivateEndpointConnectionProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryPrivateEndpointConnectionProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryPrivateEndpointConnectionProperties_STATUS, RegistryPrivateEndpointConnectionProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryPrivateEndpointConnectionProperties_STATUS runs a test to see if a specific instance of RegistryPrivateEndpointConnectionProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryPrivateEndpointConnectionProperties_STATUS(subject RegistryPrivateEndpointConnectionProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryPrivateEndpointConnectionProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryPrivateEndpointConnectionProperties_STATUS instances for property testing - lazily instantiated
// by RegistryPrivateEndpointConnectionProperties_STATUSGenerator()
var registryPrivateEndpointConnectionProperties_STATUSGenerator gopter.Gen

// RegistryPrivateEndpointConnectionProperties_STATUSGenerator returns a generator of RegistryPrivateEndpointConnectionProperties_STATUS instances for property testing.
// We first initialize registryPrivateEndpointConnectionProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistryPrivateEndpointConnectionProperties_STATUSGenerator() gopter.Gen {
	if registryPrivateEndpointConnectionProperties_STATUSGenerator != nil {
		return registryPrivateEndpointConnectionProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS(generators)
	registryPrivateEndpointConnectionProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateEndpointConnectionProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS(generators)
	registryPrivateEndpointConnectionProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateEndpointConnectionProperties_STATUS{}), generators)

	return registryPrivateEndpointConnectionProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS(gens map[string]gopter.Gen) {
	gens["GroupIds"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpointResource_STATUSGenerator())
	gens["RegistryPrivateLinkServiceConnectionState"] = gen.PtrOf(RegistryPrivateLinkServiceConnectionState_STATUSGenerator())
}

func Test_RegistryPrivateEndpointConnection_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryPrivateEndpointConnection_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryPrivateEndpointConnection_STATUS, RegistryPrivateEndpointConnection_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryPrivateEndpointConnection_STATUS runs a test to see if a specific instance of RegistryPrivateEndpointConnection_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryPrivateEndpointConnection_STATUS(subject RegistryPrivateEndpointConnection_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryPrivateEndpointConnection_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryPrivateEndpointConnection_STATUS instances for property testing - lazily instantiated by
// RegistryPrivateEndpointConnection_STATUSGenerator()
var registryPrivateEndpointConnection_STATUSGenerator gopter.Gen

// RegistryPrivateEndpointConnection_STATUSGenerator returns a generator of RegistryPrivateEndpointConnection_STATUS instances for property testing.
// We first initialize registryPrivateEndpointConnection_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistryPrivateEndpointConnection_STATUSGenerator() gopter.Gen {
	if registryPrivateEndpointConnection_STATUSGenerator != nil {
		return registryPrivateEndpointConnection_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS(generators)
	registryPrivateEndpointConnection_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateEndpointConnection_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS(generators)
	AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS(generators)
	registryPrivateEndpointConnection_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateEndpointConnection_STATUS{}), generators)

	return registryPrivateEndpointConnection_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RegistryPrivateEndpointConnectionProperties_STATUSGenerator())
}

func Test_RegistryPrivateLinkServiceConnectionState_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryPrivateLinkServiceConnectionState_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryPrivateLinkServiceConnectionState_STATUS, RegistryPrivateLinkServiceConnectionState_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryPrivateLinkServiceConnectionState_STATUS runs a test to see if a specific instance of RegistryPrivateLinkServiceConnectionState_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryPrivateLinkServiceConnectionState_STATUS(subject RegistryPrivateLinkServiceConnectionState_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryPrivateLinkServiceConnectionState_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryPrivateLinkServiceConnectionState_STATUS instances for property testing - lazily instantiated by
// RegistryPrivateLinkServiceConnectionState_STATUSGenerator()
var registryPrivateLinkServiceConnectionState_STATUSGenerator gopter.Gen

// RegistryPrivateLinkServiceConnectionState_STATUSGenerator returns a generator of RegistryPrivateLinkServiceConnectionState_STATUS instances for property testing.
func RegistryPrivateLinkServiceConnectionState_STATUSGenerator() gopter.Gen {
	if registryPrivateLinkServiceConnectionState_STATUSGenerator != nil {
		return registryPrivateLinkServiceConnectionState_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateLinkServiceConnectionState_STATUS(generators)
	registryPrivateLinkServiceConnectionState_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateLinkServiceConnectionState_STATUS{}), generators)

	return registryPrivateLinkServiceConnectionState_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRegistryPrivateLinkServiceConnectionState_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryPrivateLinkServiceConnectionState_STATUS(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		EndpointServiceConnectionStatus_STATUS_Approved,
		EndpointServiceConnectionStatus_STATUS_Disconnected,
		EndpointServiceConnectionStatus_STATUS_Pending,
		EndpointServiceConnectionStatus_STATUS_Rejected))
}

func Test_RegistryRegionArmDetails_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryRegionArmDetails_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryRegionArmDetails_STATUS, RegistryRegionArmDetails_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryRegionArmDetails_STATUS runs a test to see if a specific instance of RegistryRegionArmDetails_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryRegionArmDetails_STATUS(subject RegistryRegionArmDetails_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryRegionArmDetails_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryRegionArmDetails_STATUS instances for property testing - lazily instantiated by
// RegistryRegionArmDetails_STATUSGenerator()
var registryRegionArmDetails_STATUSGenerator gopter.Gen

// RegistryRegionArmDetails_STATUSGenerator returns a generator of RegistryRegionArmDetails_STATUS instances for property testing.
// We first initialize registryRegionArmDetails_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistryRegionArmDetails_STATUSGenerator() gopter.Gen {
	if registryRegionArmDetails_STATUSGenerator != nil {
		return registryRegionArmDetails_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryRegionArmDetails_STATUS(generators)
	registryRegionArmDetails_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistryRegionArmDetails_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryRegionArmDetails_STATUS(generators)
	AddRelatedPropertyGeneratorsForRegistryRegionArmDetails_STATUS(generators)
	registryRegionArmDetails_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistryRegionArmDetails_STATUS{}), generators)

	return registryRegionArmDetails_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRegistryRegionArmDetails_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryRegionArmDetails_STATUS(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistryRegionArmDetails_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistryRegionArmDetails_STATUS(gens map[string]gopter.Gen) {
	gens["AcrDetails"] = gen.SliceOf(AcrDetails_STATUSGenerator())
	gens["StorageAccountDetails"] = gen.SliceOf(StorageAccountDetails_STATUSGenerator())
}

func Test_RegistryTrackedResource_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryTrackedResource_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryTrackedResource_STATUS, RegistryTrackedResource_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryTrackedResource_STATUS runs a test to see if a specific instance of RegistryTrackedResource_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryTrackedResource_STATUS(subject RegistryTrackedResource_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryTrackedResource_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryTrackedResource_STATUS instances for property testing - lazily instantiated by
// RegistryTrackedResource_STATUSGenerator()
var registryTrackedResource_STATUSGenerator gopter.Gen

// RegistryTrackedResource_STATUSGenerator returns a generator of RegistryTrackedResource_STATUS instances for property testing.
// We first initialize registryTrackedResource_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistryTrackedResource_STATUSGenerator() gopter.Gen {
	if registryTrackedResource_STATUSGenerator != nil {
		return registryTrackedResource_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryTrackedResource_STATUS(generators)
	registryTrackedResource_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistryTrackedResource_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryTrackedResource_STATUS(generators)
	AddRelatedPropertyGeneratorsForRegistryTrackedResource_STATUS(generators)
	registryTrackedResource_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistryTrackedResource_STATUS{}), generators)

	return registryTrackedResource_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRegistryTrackedResource_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryTrackedResource_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistryTrackedResource_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistryTrackedResource_STATUS(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUSGenerator())
	gens["Properties"] = gen.PtrOf(Registry_STATUSGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_Registry_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Registry_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistry_STATUS, Registry_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistry_STATUS runs a test to see if a specific instance of Registry_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistry_STATUS(subject Registry_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Registry_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Registry_STATUS instances for property testing - lazily instantiated by Registry_STATUSGenerator()
var registry_STATUSGenerator gopter.Gen

// Registry_STATUSGenerator returns a generator of Registry_STATUS instances for property testing.
// We first initialize registry_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Registry_STATUSGenerator() gopter.Gen {
	if registry_STATUSGenerator != nil {
		return registry_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistry_STATUS(generators)
	registry_STATUSGenerator = gen.Struct(reflect.TypeOf(Registry_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistry_STATUS(generators)
	AddRelatedPropertyGeneratorsForRegistry_STATUS(generators)
	registry_STATUSGenerator = gen.Struct(reflect.TypeOf(Registry_STATUS{}), generators)

	return registry_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRegistry_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistry_STATUS(gens map[string]gopter.Gen) {
	gens["DiscoveryUrl"] = gen.PtrOf(gen.AlphaString())
	gens["IntellectualPropertyPublisher"] = gen.PtrOf(gen.AlphaString())
	gens["MlFlowRegistryUri"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistry_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistry_STATUS(gens map[string]gopter.Gen) {
	gens["ManagedResourceGroup"] = gen.PtrOf(ArmResourceId_STATUSGenerator())
	gens["RegionDetails"] = gen.SliceOf(RegistryRegionArmDetails_STATUSGenerator())
	gens["RegistryPrivateEndpointConnections"] = gen.SliceOf(RegistryPrivateEndpointConnection_STATUSGenerator())
}

func Test_Sku_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS, Sku_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS runs a test to see if a specific instance of Sku_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS(subject Sku_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS instances for property testing - lazily instantiated by Sku_STATUSGenerator()
var sku_STATUSGenerator gopter.Gen

// Sku_STATUSGenerator returns a generator of Sku_STATUS instances for property testing.
func Sku_STATUSGenerator() gopter.Gen {
	if sku_STATUSGenerator != nil {
		return sku_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS(generators)
	sku_STATUSGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS{}), generators)

	return sku_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		SkuTier_STATUS_Basic,
		SkuTier_STATUS_Free,
		SkuTier_STATUS_Premium,
		SkuTier_STATUS_Standard))
}

func Test_StorageAccountDetails_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountDetails_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountDetails_STATUS, StorageAccountDetails_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountDetails_STATUS runs a test to see if a specific instance of StorageAccountDetails_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountDetails_STATUS(subject StorageAccountDetails_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountDetails_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountDetails_STATUS instances for property testing - lazily instantiated by
// StorageAccountDetails_STATUSGenerator()
var storageAccountDetails_STATUSGenerator gopter.Gen

// StorageAccountDetails_STATUSGenerator returns a generator of StorageAccountDetails_STATUS instances for property testing.
func StorageAccountDetails_STATUSGenerator() gopter.Gen {
	if storageAccountDetails_STATUSGenerator != nil {
		return storageAccountDetails_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageAccountDetails_STATUS(generators)
	storageAccountDetails_STATUSGenerator = gen.Struct(reflect.TypeOf(StorageAccountDetails_STATUS{}), generators)

	return storageAccountDetails_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForStorageAccountDetails_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountDetails_STATUS(gens map[string]gopter.Gen) {
	gens["SystemCreatedStorageAccount"] = gen.PtrOf(SystemCreatedStorageAccount_STATUSGenerator())
	gens["UserCreatedStorageAccount"] = gen.PtrOf(UserCreatedStorageAccount_STATUSGenerator())
}

func Test_SystemCreatedAcrAccount_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemCreatedAcrAccount_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemCreatedAcrAccount_STATUS, SystemCreatedAcrAccount_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemCreatedAcrAccount_STATUS runs a test to see if a specific instance of SystemCreatedAcrAccount_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemCreatedAcrAccount_STATUS(subject SystemCreatedAcrAccount_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemCreatedAcrAccount_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemCreatedAcrAccount_STATUS instances for property testing - lazily instantiated by
// SystemCreatedAcrAccount_STATUSGenerator()
var systemCreatedAcrAccount_STATUSGenerator gopter.Gen

// SystemCreatedAcrAccount_STATUSGenerator returns a generator of SystemCreatedAcrAccount_STATUS instances for property testing.
// We first initialize systemCreatedAcrAccount_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SystemCreatedAcrAccount_STATUSGenerator() gopter.Gen {
	if systemCreatedAcrAccount_STATUSGenerator != nil {
		return systemCreatedAcrAccount_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemCreatedAcrAccount_STATUS(generators)
	systemCreatedAcrAccount_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemCreatedAcrAccount_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemCreatedAcrAccount_STATUS(generators)
	AddRelatedPropertyGeneratorsForSystemCreatedAcrAccount_STATUS(generators)
	systemCreatedAcrAccount_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemCreatedAcrAccount_STATUS{}), generators)

	return systemCreatedAcrAccount_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemCreatedAcrAccount_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemCreatedAcrAccount_STATUS(gens map[string]gopter.Gen) {
	gens["AcrAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["AcrAccountSku"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSystemCreatedAcrAccount_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSystemCreatedAcrAccount_STATUS(gens map[string]gopter.Gen) {
	gens["ArmResourceId"] = gen.PtrOf(ArmResourceId_STATUSGenerator())
}

func Test_SystemCreatedStorageAccount_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemCreatedStorageAccount_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemCreatedStorageAccount_STATUS, SystemCreatedStorageAccount_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemCreatedStorageAccount_STATUS runs a test to see if a specific instance of SystemCreatedStorageAccount_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemCreatedStorageAccount_STATUS(subject SystemCreatedStorageAccount_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemCreatedStorageAccount_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemCreatedStorageAccount_STATUS instances for property testing - lazily instantiated by
// SystemCreatedStorageAccount_STATUSGenerator()
var systemCreatedStorageAccount_STATUSGenerator gopter.Gen

// SystemCreatedStorageAccount_STATUSGenerator returns a generator of SystemCreatedStorageAccount_STATUS instances for property testing.
// We first initialize systemCreatedStorageAccount_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SystemCreatedStorageAccount_STATUSGenerator() gopter.Gen {
	if systemCreatedStorageAccount_STATUSGenerator != nil {
		return systemCreatedStorageAccount_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemCreatedStorageAccount_STATUS(generators)
	systemCreatedStorageAccount_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemCreatedStorageAccount_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemCreatedStorageAccount_STATUS(generators)
	AddRelatedPropertyGeneratorsForSystemCreatedStorageAccount_STATUS(generators)
	systemCreatedStorageAccount_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemCreatedStorageAccount_STATUS{}), generators)

	return systemCreatedStorageAccount_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemCreatedStorageAccount_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemCreatedStorageAccount_STATUS(gens map[string]gopter.Gen) {
	gens["AllowBlobPublicAccess"] = gen.PtrOf(gen.Bool())
	gens["StorageAccountHnsEnabled"] = gen.PtrOf(gen.Bool())
	gens["StorageAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountType"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSystemCreatedStorageAccount_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSystemCreatedStorageAccount_STATUS(gens map[string]gopter.Gen) {
	gens["ArmResourceId"] = gen.PtrOf(ArmResourceId_STATUSGenerator())
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}

func Test_UserAssignedIdentity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_STATUS, UserAssignedIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_STATUS runs a test to see if a specific instance of UserAssignedIdentity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_STATUS(subject UserAssignedIdentity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_STATUS instances for property testing - lazily instantiated by
// UserAssignedIdentity_STATUSGenerator()
var userAssignedIdentity_STATUSGenerator gopter.Gen

// UserAssignedIdentity_STATUSGenerator returns a generator of UserAssignedIdentity_STATUS instances for property testing.
func UserAssignedIdentity_STATUSGenerator() gopter.Gen {
	if userAssignedIdentity_STATUSGenerator != nil {
		return userAssignedIdentity_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS(generators)
	userAssignedIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_STATUS{}), generators)

	return userAssignedIdentity_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserCreatedAcrAccount_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserCreatedAcrAccount_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserCreatedAcrAccount_STATUS, UserCreatedAcrAccount_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserCreatedAcrAccount_STATUS runs a test to see if a specific instance of UserCreatedAcrAccount_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForUserCreatedAcrAccount_STATUS(subject UserCreatedAcrAccount_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserCreatedAcrAccount_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserCreatedAcrAccount_STATUS instances for property testing - lazily instantiated by
// UserCreatedAcrAccount_STATUSGenerator()
var userCreatedAcrAccount_STATUSGenerator gopter.Gen

// UserCreatedAcrAccount_STATUSGenerator returns a generator of UserCreatedAcrAccount_STATUS instances for property testing.
func UserCreatedAcrAccount_STATUSGenerator() gopter.Gen {
	if userCreatedAcrAccount_STATUSGenerator != nil {
		return userCreatedAcrAccount_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUserCreatedAcrAccount_STATUS(generators)
	userCreatedAcrAccount_STATUSGenerator = gen.Struct(reflect.TypeOf(UserCreatedAcrAccount_STATUS{}), generators)

	return userCreatedAcrAccount_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForUserCreatedAcrAccount_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUserCreatedAcrAccount_STATUS(gens map[string]gopter.Gen) {
	gens["ArmResourceId"] = gen.PtrOf(ArmResourceId_STATUSGenerator())
}

func Test_UserCreatedStorageAccount_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserCreatedStorageAccount_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserCreatedStorageAccount_STATUS, UserCreatedStorageAccount_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserCreatedStorageAccount_STATUS runs a test to see if a specific instance of UserCreatedStorageAccount_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForUserCreatedStorageAccount_STATUS(subject UserCreatedStorageAccount_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserCreatedStorageAccount_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserCreatedStorageAccount_STATUS instances for property testing - lazily instantiated by
// UserCreatedStorageAccount_STATUSGenerator()
var userCreatedStorageAccount_STATUSGenerator gopter.Gen

// UserCreatedStorageAccount_STATUSGenerator returns a generator of UserCreatedStorageAccount_STATUS instances for property testing.
func UserCreatedStorageAccount_STATUSGenerator() gopter.Gen {
	if userCreatedStorageAccount_STATUSGenerator != nil {
		return userCreatedStorageAccount_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUserCreatedStorageAccount_STATUS(generators)
	userCreatedStorageAccount_STATUSGenerator = gen.Struct(reflect.TypeOf(UserCreatedStorageAccount_STATUS{}), generators)

	return userCreatedStorageAccount_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForUserCreatedStorageAccount_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUserCreatedStorageAccount_STATUS(gens map[string]gopter.Gen) {
	gens["ArmResourceId"] = gen.PtrOf(ArmResourceId_STATUSGenerator())
}
