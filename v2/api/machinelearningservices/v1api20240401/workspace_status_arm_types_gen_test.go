// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ComputeRuntimeDto_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeRuntimeDto_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeRuntimeDto_STATUS_ARM, ComputeRuntimeDto_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeRuntimeDto_STATUS_ARM runs a test to see if a specific instance of ComputeRuntimeDto_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeRuntimeDto_STATUS_ARM(subject ComputeRuntimeDto_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeRuntimeDto_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeRuntimeDto_STATUS_ARM instances for property testing - lazily instantiated by
// ComputeRuntimeDto_STATUS_ARMGenerator()
var computeRuntimeDto_STATUS_ARMGenerator gopter.Gen

// ComputeRuntimeDto_STATUS_ARMGenerator returns a generator of ComputeRuntimeDto_STATUS_ARM instances for property testing.
func ComputeRuntimeDto_STATUS_ARMGenerator() gopter.Gen {
	if computeRuntimeDto_STATUS_ARMGenerator != nil {
		return computeRuntimeDto_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeRuntimeDto_STATUS_ARM(generators)
	computeRuntimeDto_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeRuntimeDto_STATUS_ARM{}), generators)

	return computeRuntimeDto_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeRuntimeDto_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeRuntimeDto_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["SparkRuntimeVersion"] = gen.PtrOf(gen.AlphaString())
}

func Test_CosmosDbSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CosmosDbSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCosmosDbSettings_STATUS_ARM, CosmosDbSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCosmosDbSettings_STATUS_ARM runs a test to see if a specific instance of CosmosDbSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCosmosDbSettings_STATUS_ARM(subject CosmosDbSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CosmosDbSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CosmosDbSettings_STATUS_ARM instances for property testing - lazily instantiated by
// CosmosDbSettings_STATUS_ARMGenerator()
var cosmosDbSettings_STATUS_ARMGenerator gopter.Gen

// CosmosDbSettings_STATUS_ARMGenerator returns a generator of CosmosDbSettings_STATUS_ARM instances for property testing.
func CosmosDbSettings_STATUS_ARMGenerator() gopter.Gen {
	if cosmosDbSettings_STATUS_ARMGenerator != nil {
		return cosmosDbSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCosmosDbSettings_STATUS_ARM(generators)
	cosmosDbSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CosmosDbSettings_STATUS_ARM{}), generators)

	return cosmosDbSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCosmosDbSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCosmosDbSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CollectionsThroughput"] = gen.PtrOf(gen.Int())
}

func Test_EncryptionKeyVaultProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionKeyVaultProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionKeyVaultProperties_STATUS_ARM, EncryptionKeyVaultProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionKeyVaultProperties_STATUS_ARM runs a test to see if a specific instance of EncryptionKeyVaultProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionKeyVaultProperties_STATUS_ARM(subject EncryptionKeyVaultProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionKeyVaultProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionKeyVaultProperties_STATUS_ARM instances for property testing - lazily instantiated by
// EncryptionKeyVaultProperties_STATUS_ARMGenerator()
var encryptionKeyVaultProperties_STATUS_ARMGenerator gopter.Gen

// EncryptionKeyVaultProperties_STATUS_ARMGenerator returns a generator of EncryptionKeyVaultProperties_STATUS_ARM instances for property testing.
func EncryptionKeyVaultProperties_STATUS_ARMGenerator() gopter.Gen {
	if encryptionKeyVaultProperties_STATUS_ARMGenerator != nil {
		return encryptionKeyVaultProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionKeyVaultProperties_STATUS_ARM(generators)
	encryptionKeyVaultProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EncryptionKeyVaultProperties_STATUS_ARM{}), generators)

	return encryptionKeyVaultProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionKeyVaultProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionKeyVaultProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IdentityClientId"] = gen.PtrOf(gen.AlphaString())
	gens["KeyIdentifier"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVaultArmId"] = gen.PtrOf(gen.AlphaString())
}

func Test_EncryptionProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionProperty_STATUS_ARM, EncryptionProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionProperty_STATUS_ARM runs a test to see if a specific instance of EncryptionProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionProperty_STATUS_ARM(subject EncryptionProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionProperty_STATUS_ARM instances for property testing - lazily instantiated by
// EncryptionProperty_STATUS_ARMGenerator()
var encryptionProperty_STATUS_ARMGenerator gopter.Gen

// EncryptionProperty_STATUS_ARMGenerator returns a generator of EncryptionProperty_STATUS_ARM instances for property testing.
// We first initialize encryptionProperty_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EncryptionProperty_STATUS_ARMGenerator() gopter.Gen {
	if encryptionProperty_STATUS_ARMGenerator != nil {
		return encryptionProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionProperty_STATUS_ARM(generators)
	encryptionProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperty_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionProperty_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEncryptionProperty_STATUS_ARM(generators)
	encryptionProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperty_STATUS_ARM{}), generators)

	return encryptionProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(gen.OneConstOf(EncryptionProperty_Status_STATUS_ARM_Disabled, EncryptionProperty_Status_STATUS_ARM_Enabled))
}

// AddRelatedPropertyGeneratorsForEncryptionProperty_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(IdentityForCmk_STATUS_ARMGenerator())
	gens["KeyVaultProperties"] = gen.PtrOf(EncryptionKeyVaultProperties_STATUS_ARMGenerator())
}

func Test_FeatureStoreSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FeatureStoreSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFeatureStoreSettings_STATUS_ARM, FeatureStoreSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFeatureStoreSettings_STATUS_ARM runs a test to see if a specific instance of FeatureStoreSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFeatureStoreSettings_STATUS_ARM(subject FeatureStoreSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FeatureStoreSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FeatureStoreSettings_STATUS_ARM instances for property testing - lazily instantiated by
// FeatureStoreSettings_STATUS_ARMGenerator()
var featureStoreSettings_STATUS_ARMGenerator gopter.Gen

// FeatureStoreSettings_STATUS_ARMGenerator returns a generator of FeatureStoreSettings_STATUS_ARM instances for property testing.
// We first initialize featureStoreSettings_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FeatureStoreSettings_STATUS_ARMGenerator() gopter.Gen {
	if featureStoreSettings_STATUS_ARMGenerator != nil {
		return featureStoreSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFeatureStoreSettings_STATUS_ARM(generators)
	featureStoreSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FeatureStoreSettings_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFeatureStoreSettings_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFeatureStoreSettings_STATUS_ARM(generators)
	featureStoreSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FeatureStoreSettings_STATUS_ARM{}), generators)

	return featureStoreSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFeatureStoreSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFeatureStoreSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OfflineStoreConnectionName"] = gen.PtrOf(gen.AlphaString())
	gens["OnlineStoreConnectionName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFeatureStoreSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFeatureStoreSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeRuntime"] = gen.PtrOf(ComputeRuntimeDto_STATUS_ARMGenerator())
}

func Test_FqdnOutboundRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FqdnOutboundRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFqdnOutboundRule_STATUS_ARM, FqdnOutboundRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFqdnOutboundRule_STATUS_ARM runs a test to see if a specific instance of FqdnOutboundRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFqdnOutboundRule_STATUS_ARM(subject FqdnOutboundRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FqdnOutboundRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FqdnOutboundRule_STATUS_ARM instances for property testing - lazily instantiated by
// FqdnOutboundRule_STATUS_ARMGenerator()
var fqdnOutboundRule_STATUS_ARMGenerator gopter.Gen

// FqdnOutboundRule_STATUS_ARMGenerator returns a generator of FqdnOutboundRule_STATUS_ARM instances for property testing.
func FqdnOutboundRule_STATUS_ARMGenerator() gopter.Gen {
	if fqdnOutboundRule_STATUS_ARMGenerator != nil {
		return fqdnOutboundRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFqdnOutboundRule_STATUS_ARM(generators)
	fqdnOutboundRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FqdnOutboundRule_STATUS_ARM{}), generators)

	return fqdnOutboundRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFqdnOutboundRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFqdnOutboundRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		RuleCategory_STATUS_ARM_Dependency,
		RuleCategory_STATUS_ARM_Recommended,
		RuleCategory_STATUS_ARM_Required,
		RuleCategory_STATUS_ARM_UserDefined))
	gens["Destination"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(RuleStatus_STATUS_ARM_Active, RuleStatus_STATUS_ARM_Inactive))
	gens["Type"] = gen.OneConstOf(FqdnOutboundRule_Type_STATUS_ARM_FQDN)
}

func Test_IdentityForCmk_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IdentityForCmk_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIdentityForCmk_STATUS_ARM, IdentityForCmk_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIdentityForCmk_STATUS_ARM runs a test to see if a specific instance of IdentityForCmk_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIdentityForCmk_STATUS_ARM(subject IdentityForCmk_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IdentityForCmk_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IdentityForCmk_STATUS_ARM instances for property testing - lazily instantiated by
// IdentityForCmk_STATUS_ARMGenerator()
var identityForCmk_STATUS_ARMGenerator gopter.Gen

// IdentityForCmk_STATUS_ARMGenerator returns a generator of IdentityForCmk_STATUS_ARM instances for property testing.
func IdentityForCmk_STATUS_ARMGenerator() gopter.Gen {
	if identityForCmk_STATUS_ARMGenerator != nil {
		return identityForCmk_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIdentityForCmk_STATUS_ARM(generators)
	identityForCmk_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IdentityForCmk_STATUS_ARM{}), generators)

	return identityForCmk_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIdentityForCmk_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIdentityForCmk_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentity"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedNetworkProvisionStatus_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedNetworkProvisionStatus_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedNetworkProvisionStatus_STATUS_ARM, ManagedNetworkProvisionStatus_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedNetworkProvisionStatus_STATUS_ARM runs a test to see if a specific instance of ManagedNetworkProvisionStatus_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedNetworkProvisionStatus_STATUS_ARM(subject ManagedNetworkProvisionStatus_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedNetworkProvisionStatus_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedNetworkProvisionStatus_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedNetworkProvisionStatus_STATUS_ARMGenerator()
var managedNetworkProvisionStatus_STATUS_ARMGenerator gopter.Gen

// ManagedNetworkProvisionStatus_STATUS_ARMGenerator returns a generator of ManagedNetworkProvisionStatus_STATUS_ARM instances for property testing.
func ManagedNetworkProvisionStatus_STATUS_ARMGenerator() gopter.Gen {
	if managedNetworkProvisionStatus_STATUS_ARMGenerator != nil {
		return managedNetworkProvisionStatus_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedNetworkProvisionStatus_STATUS_ARM(generators)
	managedNetworkProvisionStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedNetworkProvisionStatus_STATUS_ARM{}), generators)

	return managedNetworkProvisionStatus_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedNetworkProvisionStatus_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedNetworkProvisionStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["SparkReady"] = gen.PtrOf(gen.Bool())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(ManagedNetworkStatus_STATUS_ARM_Active, ManagedNetworkStatus_STATUS_ARM_Inactive))
}

func Test_ManagedNetworkSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedNetworkSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedNetworkSettings_STATUS_ARM, ManagedNetworkSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedNetworkSettings_STATUS_ARM runs a test to see if a specific instance of ManagedNetworkSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedNetworkSettings_STATUS_ARM(subject ManagedNetworkSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedNetworkSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedNetworkSettings_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedNetworkSettings_STATUS_ARMGenerator()
var managedNetworkSettings_STATUS_ARMGenerator gopter.Gen

// ManagedNetworkSettings_STATUS_ARMGenerator returns a generator of ManagedNetworkSettings_STATUS_ARM instances for property testing.
// We first initialize managedNetworkSettings_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedNetworkSettings_STATUS_ARMGenerator() gopter.Gen {
	if managedNetworkSettings_STATUS_ARMGenerator != nil {
		return managedNetworkSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedNetworkSettings_STATUS_ARM(generators)
	managedNetworkSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedNetworkSettings_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedNetworkSettings_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedNetworkSettings_STATUS_ARM(generators)
	managedNetworkSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedNetworkSettings_STATUS_ARM{}), generators)

	return managedNetworkSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedNetworkSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedNetworkSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IsolationMode"] = gen.PtrOf(gen.OneConstOf(IsolationMode_STATUS_ARM_AllowInternetOutbound, IsolationMode_STATUS_ARM_AllowOnlyApprovedOutbound, IsolationMode_STATUS_ARM_Disabled))
	gens["NetworkId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedNetworkSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedNetworkSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OutboundRules"] = gen.MapOf(
		gen.AlphaString(),
		OutboundRule_STATUS_ARMGenerator())
	gens["Status"] = gen.PtrOf(ManagedNetworkProvisionStatus_STATUS_ARMGenerator())
}

func Test_NotebookPreparationError_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NotebookPreparationError_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNotebookPreparationError_STATUS_ARM, NotebookPreparationError_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNotebookPreparationError_STATUS_ARM runs a test to see if a specific instance of NotebookPreparationError_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNotebookPreparationError_STATUS_ARM(subject NotebookPreparationError_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NotebookPreparationError_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NotebookPreparationError_STATUS_ARM instances for property testing - lazily instantiated by
// NotebookPreparationError_STATUS_ARMGenerator()
var notebookPreparationError_STATUS_ARMGenerator gopter.Gen

// NotebookPreparationError_STATUS_ARMGenerator returns a generator of NotebookPreparationError_STATUS_ARM instances for property testing.
func NotebookPreparationError_STATUS_ARMGenerator() gopter.Gen {
	if notebookPreparationError_STATUS_ARMGenerator != nil {
		return notebookPreparationError_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotebookPreparationError_STATUS_ARM(generators)
	notebookPreparationError_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NotebookPreparationError_STATUS_ARM{}), generators)

	return notebookPreparationError_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNotebookPreparationError_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNotebookPreparationError_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ErrorMessage"] = gen.PtrOf(gen.AlphaString())
	gens["StatusCode"] = gen.PtrOf(gen.Int())
}

func Test_NotebookResourceInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NotebookResourceInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNotebookResourceInfo_STATUS_ARM, NotebookResourceInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNotebookResourceInfo_STATUS_ARM runs a test to see if a specific instance of NotebookResourceInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNotebookResourceInfo_STATUS_ARM(subject NotebookResourceInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NotebookResourceInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NotebookResourceInfo_STATUS_ARM instances for property testing - lazily instantiated by
// NotebookResourceInfo_STATUS_ARMGenerator()
var notebookResourceInfo_STATUS_ARMGenerator gopter.Gen

// NotebookResourceInfo_STATUS_ARMGenerator returns a generator of NotebookResourceInfo_STATUS_ARM instances for property testing.
// We first initialize notebookResourceInfo_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NotebookResourceInfo_STATUS_ARMGenerator() gopter.Gen {
	if notebookResourceInfo_STATUS_ARMGenerator != nil {
		return notebookResourceInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotebookResourceInfo_STATUS_ARM(generators)
	notebookResourceInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NotebookResourceInfo_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNotebookResourceInfo_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNotebookResourceInfo_STATUS_ARM(generators)
	notebookResourceInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NotebookResourceInfo_STATUS_ARM{}), generators)

	return notebookResourceInfo_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNotebookResourceInfo_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNotebookResourceInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNotebookResourceInfo_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNotebookResourceInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["NotebookPreparationError"] = gen.PtrOf(NotebookPreparationError_STATUS_ARMGenerator())
}

func Test_OutboundRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OutboundRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOutboundRule_STATUS_ARM, OutboundRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOutboundRule_STATUS_ARM runs a test to see if a specific instance of OutboundRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOutboundRule_STATUS_ARM(subject OutboundRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OutboundRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OutboundRule_STATUS_ARM instances for property testing - lazily instantiated by
// OutboundRule_STATUS_ARMGenerator()
var outboundRule_STATUS_ARMGenerator gopter.Gen

// OutboundRule_STATUS_ARMGenerator returns a generator of OutboundRule_STATUS_ARM instances for property testing.
func OutboundRule_STATUS_ARMGenerator() gopter.Gen {
	if outboundRule_STATUS_ARMGenerator != nil {
		return outboundRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForOutboundRule_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(OutboundRule_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	outboundRule_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return outboundRule_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForOutboundRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOutboundRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["FQDN"] = FqdnOutboundRule_STATUS_ARMGenerator().Map(func(it FqdnOutboundRule_STATUS_ARM) *FqdnOutboundRule_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["PrivateEndpoint"] = PrivateEndpointOutboundRule_STATUS_ARMGenerator().Map(func(it PrivateEndpointOutboundRule_STATUS_ARM) *PrivateEndpointOutboundRule_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["ServiceTag"] = ServiceTagOutboundRule_STATUS_ARMGenerator().Map(func(it ServiceTagOutboundRule_STATUS_ARM) *ServiceTagOutboundRule_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_PrivateEndpointConnection_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM, PrivateEndpointConnection_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM(subject PrivateEndpointConnection_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointConnection_STATUS_ARMGenerator()
var privateEndpointConnection_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUS_ARMGenerator returns a generator of PrivateEndpointConnection_STATUS_ARM instances for property testing.
func PrivateEndpointConnection_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUS_ARMGenerator != nil {
		return privateEndpointConnection_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(generators)
	privateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_ARM{}), generators)

	return privateEndpointConnection_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpointDestination_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointDestination_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointDestination_STATUS_ARM, PrivateEndpointDestination_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointDestination_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointDestination_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointDestination_STATUS_ARM(subject PrivateEndpointDestination_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointDestination_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointDestination_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointDestination_STATUS_ARMGenerator()
var privateEndpointDestination_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointDestination_STATUS_ARMGenerator returns a generator of PrivateEndpointDestination_STATUS_ARM instances for property testing.
func PrivateEndpointDestination_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointDestination_STATUS_ARMGenerator != nil {
		return privateEndpointDestination_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointDestination_STATUS_ARM(generators)
	privateEndpointDestination_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointDestination_STATUS_ARM{}), generators)

	return privateEndpointDestination_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointDestination_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointDestination_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ServiceResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["SparkEnabled"] = gen.PtrOf(gen.Bool())
	gens["SparkStatus"] = gen.PtrOf(gen.OneConstOf(RuleStatus_STATUS_ARM_Active, RuleStatus_STATUS_ARM_Inactive))
	gens["SubresourceTarget"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpointOutboundRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointOutboundRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointOutboundRule_STATUS_ARM, PrivateEndpointOutboundRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointOutboundRule_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointOutboundRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointOutboundRule_STATUS_ARM(subject PrivateEndpointOutboundRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointOutboundRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointOutboundRule_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointOutboundRule_STATUS_ARMGenerator()
var privateEndpointOutboundRule_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointOutboundRule_STATUS_ARMGenerator returns a generator of PrivateEndpointOutboundRule_STATUS_ARM instances for property testing.
// We first initialize privateEndpointOutboundRule_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointOutboundRule_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointOutboundRule_STATUS_ARMGenerator != nil {
		return privateEndpointOutboundRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointOutboundRule_STATUS_ARM(generators)
	privateEndpointOutboundRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointOutboundRule_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointOutboundRule_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointOutboundRule_STATUS_ARM(generators)
	privateEndpointOutboundRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointOutboundRule_STATUS_ARM{}), generators)

	return privateEndpointOutboundRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointOutboundRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointOutboundRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		RuleCategory_STATUS_ARM_Dependency,
		RuleCategory_STATUS_ARM_Recommended,
		RuleCategory_STATUS_ARM_Required,
		RuleCategory_STATUS_ARM_UserDefined))
	gens["Status"] = gen.PtrOf(gen.OneConstOf(RuleStatus_STATUS_ARM_Active, RuleStatus_STATUS_ARM_Inactive))
	gens["Type"] = gen.OneConstOf(PrivateEndpointOutboundRule_Type_STATUS_ARM_PrivateEndpoint)
}

// AddRelatedPropertyGeneratorsForPrivateEndpointOutboundRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointOutboundRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(PrivateEndpointDestination_STATUS_ARMGenerator())
}

func Test_ServerlessComputeSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerlessComputeSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerlessComputeSettings_STATUS_ARM, ServerlessComputeSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerlessComputeSettings_STATUS_ARM runs a test to see if a specific instance of ServerlessComputeSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerlessComputeSettings_STATUS_ARM(subject ServerlessComputeSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerlessComputeSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerlessComputeSettings_STATUS_ARM instances for property testing - lazily instantiated by
// ServerlessComputeSettings_STATUS_ARMGenerator()
var serverlessComputeSettings_STATUS_ARMGenerator gopter.Gen

// ServerlessComputeSettings_STATUS_ARMGenerator returns a generator of ServerlessComputeSettings_STATUS_ARM instances for property testing.
func ServerlessComputeSettings_STATUS_ARMGenerator() gopter.Gen {
	if serverlessComputeSettings_STATUS_ARMGenerator != nil {
		return serverlessComputeSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerlessComputeSettings_STATUS_ARM(generators)
	serverlessComputeSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerlessComputeSettings_STATUS_ARM{}), generators)

	return serverlessComputeSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerlessComputeSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerlessComputeSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ServerlessComputeCustomSubnet"] = gen.PtrOf(gen.AlphaString())
	gens["ServerlessComputeNoPublicIP"] = gen.PtrOf(gen.Bool())
}

func Test_ServiceManagedResourcesSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceManagedResourcesSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceManagedResourcesSettings_STATUS_ARM, ServiceManagedResourcesSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceManagedResourcesSettings_STATUS_ARM runs a test to see if a specific instance of ServiceManagedResourcesSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceManagedResourcesSettings_STATUS_ARM(subject ServiceManagedResourcesSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceManagedResourcesSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceManagedResourcesSettings_STATUS_ARM instances for property testing - lazily instantiated by
// ServiceManagedResourcesSettings_STATUS_ARMGenerator()
var serviceManagedResourcesSettings_STATUS_ARMGenerator gopter.Gen

// ServiceManagedResourcesSettings_STATUS_ARMGenerator returns a generator of ServiceManagedResourcesSettings_STATUS_ARM instances for property testing.
func ServiceManagedResourcesSettings_STATUS_ARMGenerator() gopter.Gen {
	if serviceManagedResourcesSettings_STATUS_ARMGenerator != nil {
		return serviceManagedResourcesSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServiceManagedResourcesSettings_STATUS_ARM(generators)
	serviceManagedResourcesSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServiceManagedResourcesSettings_STATUS_ARM{}), generators)

	return serviceManagedResourcesSettings_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForServiceManagedResourcesSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceManagedResourcesSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CosmosDb"] = gen.PtrOf(CosmosDbSettings_STATUS_ARMGenerator())
}

func Test_ServiceTagDestination_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceTagDestination_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceTagDestination_STATUS_ARM, ServiceTagDestination_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceTagDestination_STATUS_ARM runs a test to see if a specific instance of ServiceTagDestination_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceTagDestination_STATUS_ARM(subject ServiceTagDestination_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceTagDestination_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceTagDestination_STATUS_ARM instances for property testing - lazily instantiated by
// ServiceTagDestination_STATUS_ARMGenerator()
var serviceTagDestination_STATUS_ARMGenerator gopter.Gen

// ServiceTagDestination_STATUS_ARMGenerator returns a generator of ServiceTagDestination_STATUS_ARM instances for property testing.
func ServiceTagDestination_STATUS_ARMGenerator() gopter.Gen {
	if serviceTagDestination_STATUS_ARMGenerator != nil {
		return serviceTagDestination_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceTagDestination_STATUS_ARM(generators)
	serviceTagDestination_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServiceTagDestination_STATUS_ARM{}), generators)

	return serviceTagDestination_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceTagDestination_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceTagDestination_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(RuleAction_STATUS_ARM_Allow, RuleAction_STATUS_ARM_Deny))
	gens["AddressPrefixes"] = gen.SliceOf(gen.AlphaString())
	gens["PortRanges"] = gen.PtrOf(gen.AlphaString())
	gens["Protocol"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceTag"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServiceTagOutboundRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServiceTagOutboundRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServiceTagOutboundRule_STATUS_ARM, ServiceTagOutboundRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServiceTagOutboundRule_STATUS_ARM runs a test to see if a specific instance of ServiceTagOutboundRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServiceTagOutboundRule_STATUS_ARM(subject ServiceTagOutboundRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServiceTagOutboundRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServiceTagOutboundRule_STATUS_ARM instances for property testing - lazily instantiated by
// ServiceTagOutboundRule_STATUS_ARMGenerator()
var serviceTagOutboundRule_STATUS_ARMGenerator gopter.Gen

// ServiceTagOutboundRule_STATUS_ARMGenerator returns a generator of ServiceTagOutboundRule_STATUS_ARM instances for property testing.
// We first initialize serviceTagOutboundRule_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServiceTagOutboundRule_STATUS_ARMGenerator() gopter.Gen {
	if serviceTagOutboundRule_STATUS_ARMGenerator != nil {
		return serviceTagOutboundRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceTagOutboundRule_STATUS_ARM(generators)
	serviceTagOutboundRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServiceTagOutboundRule_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServiceTagOutboundRule_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForServiceTagOutboundRule_STATUS_ARM(generators)
	serviceTagOutboundRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServiceTagOutboundRule_STATUS_ARM{}), generators)

	return serviceTagOutboundRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServiceTagOutboundRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServiceTagOutboundRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		RuleCategory_STATUS_ARM_Dependency,
		RuleCategory_STATUS_ARM_Recommended,
		RuleCategory_STATUS_ARM_Required,
		RuleCategory_STATUS_ARM_UserDefined))
	gens["Status"] = gen.PtrOf(gen.OneConstOf(RuleStatus_STATUS_ARM_Active, RuleStatus_STATUS_ARM_Inactive))
	gens["Type"] = gen.OneConstOf(ServiceTagOutboundRule_Type_STATUS_ARM_ServiceTag)
}

// AddRelatedPropertyGeneratorsForServiceTagOutboundRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServiceTagOutboundRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(ServiceTagDestination_STATUS_ARMGenerator())
}

func Test_SharedPrivateLinkResourceProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResourceProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResourceProperty_STATUS_ARM, SharedPrivateLinkResourceProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResourceProperty_STATUS_ARM runs a test to see if a specific instance of SharedPrivateLinkResourceProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResourceProperty_STATUS_ARM(subject SharedPrivateLinkResourceProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResourceProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResourceProperty_STATUS_ARM instances for property testing - lazily instantiated by
// SharedPrivateLinkResourceProperty_STATUS_ARMGenerator()
var sharedPrivateLinkResourceProperty_STATUS_ARMGenerator gopter.Gen

// SharedPrivateLinkResourceProperty_STATUS_ARMGenerator returns a generator of SharedPrivateLinkResourceProperty_STATUS_ARM instances for property testing.
func SharedPrivateLinkResourceProperty_STATUS_ARMGenerator() gopter.Gen {
	if sharedPrivateLinkResourceProperty_STATUS_ARMGenerator != nil {
		return sharedPrivateLinkResourceProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperty_STATUS_ARM(generators)
	sharedPrivateLinkResourceProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResourceProperty_STATUS_ARM{}), generators)

	return sharedPrivateLinkResourceProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["RequestMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointServiceConnectionStatus_STATUS_ARM_Approved,
		PrivateEndpointServiceConnectionStatus_STATUS_ARM_Disconnected,
		PrivateEndpointServiceConnectionStatus_STATUS_ARM_Pending,
		PrivateEndpointServiceConnectionStatus_STATUS_ARM_Rejected,
		PrivateEndpointServiceConnectionStatus_STATUS_ARM_Timeout))
}

func Test_SharedPrivateLinkResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResource_STATUS_ARM, SharedPrivateLinkResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResource_STATUS_ARM runs a test to see if a specific instance of SharedPrivateLinkResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResource_STATUS_ARM(subject SharedPrivateLinkResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResource_STATUS_ARM instances for property testing - lazily instantiated by
// SharedPrivateLinkResource_STATUS_ARMGenerator()
var sharedPrivateLinkResource_STATUS_ARMGenerator gopter.Gen

// SharedPrivateLinkResource_STATUS_ARMGenerator returns a generator of SharedPrivateLinkResource_STATUS_ARM instances for property testing.
// We first initialize sharedPrivateLinkResource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SharedPrivateLinkResource_STATUS_ARMGenerator() gopter.Gen {
	if sharedPrivateLinkResource_STATUS_ARMGenerator != nil {
		return sharedPrivateLinkResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_ARM(generators)
	sharedPrivateLinkResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_STATUS_ARM(generators)
	sharedPrivateLinkResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResource_STATUS_ARM{}), generators)

	return sharedPrivateLinkResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSharedPrivateLinkResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SharedPrivateLinkResourceProperty_STATUS_ARMGenerator())
}

func Test_WorkspaceHubConfig_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceHubConfig_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceHubConfig_STATUS_ARM, WorkspaceHubConfig_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceHubConfig_STATUS_ARM runs a test to see if a specific instance of WorkspaceHubConfig_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceHubConfig_STATUS_ARM(subject WorkspaceHubConfig_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceHubConfig_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceHubConfig_STATUS_ARM instances for property testing - lazily instantiated by
// WorkspaceHubConfig_STATUS_ARMGenerator()
var workspaceHubConfig_STATUS_ARMGenerator gopter.Gen

// WorkspaceHubConfig_STATUS_ARMGenerator returns a generator of WorkspaceHubConfig_STATUS_ARM instances for property testing.
func WorkspaceHubConfig_STATUS_ARMGenerator() gopter.Gen {
	if workspaceHubConfig_STATUS_ARMGenerator != nil {
		return workspaceHubConfig_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceHubConfig_STATUS_ARM(generators)
	workspaceHubConfig_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceHubConfig_STATUS_ARM{}), generators)

	return workspaceHubConfig_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceHubConfig_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceHubConfig_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdditionalWorkspaceStorageAccounts"] = gen.SliceOf(gen.AlphaString())
	gens["DefaultWorkspaceResourceGroup"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceProperties_STATUS_ARM, WorkspaceProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceProperties_STATUS_ARM runs a test to see if a specific instance of WorkspaceProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceProperties_STATUS_ARM(subject WorkspaceProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceProperties_STATUS_ARM instances for property testing - lazily instantiated by
// WorkspaceProperties_STATUS_ARMGenerator()
var workspaceProperties_STATUS_ARMGenerator gopter.Gen

// WorkspaceProperties_STATUS_ARMGenerator returns a generator of WorkspaceProperties_STATUS_ARM instances for property testing.
// We first initialize workspaceProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WorkspaceProperties_STATUS_ARMGenerator() gopter.Gen {
	if workspaceProperties_STATUS_ARMGenerator != nil {
		return workspaceProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceProperties_STATUS_ARM(generators)
	workspaceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForWorkspaceProperties_STATUS_ARM(generators)
	workspaceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceProperties_STATUS_ARM{}), generators)

	return workspaceProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowPublicAccessWhenBehindVnet"] = gen.PtrOf(gen.Bool())
	gens["ApplicationInsights"] = gen.PtrOf(gen.AlphaString())
	gens["AssociatedWorkspaces"] = gen.SliceOf(gen.AlphaString())
	gens["ContainerRegistry"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DiscoveryUrl"] = gen.PtrOf(gen.AlphaString())
	gens["EnableDataIsolation"] = gen.PtrOf(gen.Bool())
	gens["FriendlyName"] = gen.PtrOf(gen.AlphaString())
	gens["HbiWorkspace"] = gen.PtrOf(gen.Bool())
	gens["HubResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ImageBuildCompute"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVault"] = gen.PtrOf(gen.AlphaString())
	gens["MlFlowTrackingUri"] = gen.PtrOf(gen.AlphaString())
	gens["PrimaryUserAssignedIdentity"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkCount"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		WorkspaceProperties_ProvisioningState_STATUS_ARM_Canceled,
		WorkspaceProperties_ProvisioningState_STATUS_ARM_Creating,
		WorkspaceProperties_ProvisioningState_STATUS_ARM_Deleting,
		WorkspaceProperties_ProvisioningState_STATUS_ARM_Failed,
		WorkspaceProperties_ProvisioningState_STATUS_ARM_Succeeded,
		WorkspaceProperties_ProvisioningState_STATUS_ARM_Unknown,
		WorkspaceProperties_ProvisioningState_STATUS_ARM_Updating))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(WorkspaceProperties_PublicNetworkAccess_STATUS_ARM_Disabled, WorkspaceProperties_PublicNetworkAccess_STATUS_ARM_Enabled))
	gens["ServiceProvisionedResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccount"] = gen.PtrOf(gen.AlphaString())
	gens["StorageHnsEnabled"] = gen.PtrOf(gen.Bool())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["V1LegacyMode"] = gen.PtrOf(gen.Bool())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspaceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Encryption"] = gen.PtrOf(EncryptionProperty_STATUS_ARMGenerator())
	gens["FeatureStoreSettings"] = gen.PtrOf(FeatureStoreSettings_STATUS_ARMGenerator())
	gens["ManagedNetwork"] = gen.PtrOf(ManagedNetworkSettings_STATUS_ARMGenerator())
	gens["NotebookInfo"] = gen.PtrOf(NotebookResourceInfo_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUS_ARMGenerator())
	gens["ServerlessComputeSettings"] = gen.PtrOf(ServerlessComputeSettings_STATUS_ARMGenerator())
	gens["ServiceManagedResourcesSettings"] = gen.PtrOf(ServiceManagedResourcesSettings_STATUS_ARMGenerator())
	gens["SharedPrivateLinkResources"] = gen.SliceOf(SharedPrivateLinkResource_STATUS_ARMGenerator())
	gens["WorkspaceHubConfig"] = gen.PtrOf(WorkspaceHubConfig_STATUS_ARMGenerator())
}

func Test_Workspace_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspace_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspace_STATUS_ARM, Workspace_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspace_STATUS_ARM runs a test to see if a specific instance of Workspace_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspace_STATUS_ARM(subject Workspace_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspace_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspace_STATUS_ARM instances for property testing - lazily instantiated by
// Workspace_STATUS_ARMGenerator()
var workspace_STATUS_ARMGenerator gopter.Gen

// Workspace_STATUS_ARMGenerator returns a generator of Workspace_STATUS_ARM instances for property testing.
// We first initialize workspace_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Workspace_STATUS_ARMGenerator() gopter.Gen {
	if workspace_STATUS_ARMGenerator != nil {
		return workspace_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspace_STATUS_ARM(generators)
	workspace_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Workspace_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspace_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForWorkspace_STATUS_ARM(generators)
	workspace_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Workspace_STATUS_ARM{}), generators)

	return workspace_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspace_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspace_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspace_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspace_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(WorkspaceProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}
