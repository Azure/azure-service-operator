// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AADAuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AADAuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAADAuthTypeWorkspaceConnectionProperties_ARM, AADAuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAADAuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of AADAuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAADAuthTypeWorkspaceConnectionProperties_ARM(subject AADAuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AADAuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AADAuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily instantiated by
// AADAuthTypeWorkspaceConnectionProperties_ARMGenerator()
var aadAuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// AADAuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of AADAuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
func AADAuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if aadAuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return aadAuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAADAuthTypeWorkspaceConnectionProperties_ARM(generators)
	aadAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(AADAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return aadAuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAADAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAADAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(AADAuthTypeWorkspaceConnectionProperties_AuthType_ARM_AAD)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(AADAuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

func Test_AccessKeyAuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AccessKeyAuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM, AccessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of AccessKeyAuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM(subject AccessKeyAuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AccessKeyAuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AccessKeyAuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily instantiated
// by AccessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator()
var accessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// AccessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of AccessKeyAuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize accessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AccessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if accessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return accessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM(generators)
	accessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(AccessKeyAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM(generators)
	accessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(AccessKeyAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return accessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(AccessKeyAuthTypeWorkspaceConnectionProperties_AuthType_ARM_AccessKey)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(AccessKeyAuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAccessKeyAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(WorkspaceConnectionAccessKey_ARMGenerator())
}

func Test_AccountKeyAuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AccountKeyAuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM, AccountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of AccountKeyAuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM(subject AccountKeyAuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AccountKeyAuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AccountKeyAuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily instantiated
// by AccountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator()
var accountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// AccountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of AccountKeyAuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize accountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AccountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if accountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return accountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM(generators)
	accountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(AccountKeyAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM(generators)
	accountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(AccountKeyAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return accountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(AccountKeyAuthTypeWorkspaceConnectionProperties_AuthType_ARM_AccountKey)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(AccountKeyAuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAccountKeyAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(WorkspaceConnectionAccountKey_ARMGenerator())
}

func Test_ApiKeyAuthWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiKeyAuthWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiKeyAuthWorkspaceConnectionProperties_ARM, ApiKeyAuthWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiKeyAuthWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of ApiKeyAuthWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiKeyAuthWorkspaceConnectionProperties_ARM(subject ApiKeyAuthWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiKeyAuthWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiKeyAuthWorkspaceConnectionProperties_ARM instances for property testing - lazily instantiated by
// ApiKeyAuthWorkspaceConnectionProperties_ARMGenerator()
var apiKeyAuthWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// ApiKeyAuthWorkspaceConnectionProperties_ARMGenerator returns a generator of ApiKeyAuthWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize apiKeyAuthWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApiKeyAuthWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if apiKeyAuthWorkspaceConnectionProperties_ARMGenerator != nil {
		return apiKeyAuthWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiKeyAuthWorkspaceConnectionProperties_ARM(generators)
	apiKeyAuthWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ApiKeyAuthWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiKeyAuthWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForApiKeyAuthWorkspaceConnectionProperties_ARM(generators)
	apiKeyAuthWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ApiKeyAuthWorkspaceConnectionProperties_ARM{}), generators)

	return apiKeyAuthWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiKeyAuthWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiKeyAuthWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(ApiKeyAuthWorkspaceConnectionProperties_AuthType_ARM_ApiKey)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(ApiKeyAuthWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForApiKeyAuthWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApiKeyAuthWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(WorkspaceConnectionApiKey_ARMGenerator())
}

func Test_CustomKeysWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomKeysWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomKeysWorkspaceConnectionProperties_ARM, CustomKeysWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomKeysWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of CustomKeysWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomKeysWorkspaceConnectionProperties_ARM(subject CustomKeysWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomKeysWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomKeysWorkspaceConnectionProperties_ARM instances for property testing - lazily instantiated by
// CustomKeysWorkspaceConnectionProperties_ARMGenerator()
var customKeysWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// CustomKeysWorkspaceConnectionProperties_ARMGenerator returns a generator of CustomKeysWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize customKeysWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomKeysWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if customKeysWorkspaceConnectionProperties_ARMGenerator != nil {
		return customKeysWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomKeysWorkspaceConnectionProperties_ARM(generators)
	customKeysWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(CustomKeysWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomKeysWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForCustomKeysWorkspaceConnectionProperties_ARM(generators)
	customKeysWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(CustomKeysWorkspaceConnectionProperties_ARM{}), generators)

	return customKeysWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomKeysWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomKeysWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(CustomKeysWorkspaceConnectionProperties_AuthType_ARM_CustomKeys)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(CustomKeysWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForCustomKeysWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomKeysWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(CustomKeys_ARMGenerator())
}

func Test_CustomKeys_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomKeys_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomKeys_ARM, CustomKeys_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomKeys_ARM runs a test to see if a specific instance of CustomKeys_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomKeys_ARM(subject CustomKeys_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomKeys_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomKeys_ARM instances for property testing - lazily instantiated by CustomKeys_ARMGenerator()
var customKeys_ARMGenerator gopter.Gen

// CustomKeys_ARMGenerator returns a generator of CustomKeys_ARM instances for property testing.
func CustomKeys_ARMGenerator() gopter.Gen {
	if customKeys_ARMGenerator != nil {
		return customKeys_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomKeys_ARM(generators)
	customKeys_ARMGenerator = gen.Struct(reflect.TypeOf(CustomKeys_ARM{}), generators)

	return customKeys_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomKeys_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomKeys_ARM(gens map[string]gopter.Gen) {
	gens["Keys"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

func Test_ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM, ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM(subject ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily
// instantiated by ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator()
var managedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize managedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if managedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return managedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM(generators)
	managedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM(generators)
	managedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return managedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(ManagedIdentityAuthTypeWorkspaceConnectionProperties_AuthType_ARM_ManagedIdentity)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(ManagedIdentityAuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(WorkspaceConnectionManagedIdentity_ARMGenerator())
}

func Test_NoneAuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NoneAuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNoneAuthTypeWorkspaceConnectionProperties_ARM, NoneAuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNoneAuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of NoneAuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNoneAuthTypeWorkspaceConnectionProperties_ARM(subject NoneAuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NoneAuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NoneAuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily instantiated by
// NoneAuthTypeWorkspaceConnectionProperties_ARMGenerator()
var noneAuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// NoneAuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of NoneAuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
func NoneAuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if noneAuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return noneAuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNoneAuthTypeWorkspaceConnectionProperties_ARM(generators)
	noneAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(NoneAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return noneAuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNoneAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNoneAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(NoneAuthTypeWorkspaceConnectionProperties_AuthType_ARM_None)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(NoneAuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

func Test_OAuth2AuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OAuth2AuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOAuth2AuthTypeWorkspaceConnectionProperties_ARM, OAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOAuth2AuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of OAuth2AuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOAuth2AuthTypeWorkspaceConnectionProperties_ARM(subject OAuth2AuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OAuth2AuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OAuth2AuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily instantiated by
// OAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator()
var oAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// OAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of OAuth2AuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize oAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if oAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return oAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOAuth2AuthTypeWorkspaceConnectionProperties_ARM(generators)
	oAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(OAuth2AuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOAuth2AuthTypeWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForOAuth2AuthTypeWorkspaceConnectionProperties_ARM(generators)
	oAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(OAuth2AuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return oAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOAuth2AuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOAuth2AuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(OAuth2AuthTypeWorkspaceConnectionProperties_AuthType_ARM_OAuth2)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(OAuth2AuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForOAuth2AuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOAuth2AuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(WorkspaceConnectionOAuth2_ARMGenerator())
}

func Test_PATAuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PATAuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPATAuthTypeWorkspaceConnectionProperties_ARM, PATAuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPATAuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of PATAuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPATAuthTypeWorkspaceConnectionProperties_ARM(subject PATAuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PATAuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PATAuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily instantiated by
// PATAuthTypeWorkspaceConnectionProperties_ARMGenerator()
var patAuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// PATAuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of PATAuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize patAuthTypeWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PATAuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if patAuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return patAuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPATAuthTypeWorkspaceConnectionProperties_ARM(generators)
	patAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PATAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPATAuthTypeWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForPATAuthTypeWorkspaceConnectionProperties_ARM(generators)
	patAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PATAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return patAuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPATAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPATAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(PATAuthTypeWorkspaceConnectionProperties_AuthType_ARM_PAT)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(PATAuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForPATAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPATAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(WorkspaceConnectionPersonalAccessToken_ARMGenerator())
}

func Test_SASAuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SASAuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSASAuthTypeWorkspaceConnectionProperties_ARM, SASAuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSASAuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of SASAuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSASAuthTypeWorkspaceConnectionProperties_ARM(subject SASAuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SASAuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SASAuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily instantiated by
// SASAuthTypeWorkspaceConnectionProperties_ARMGenerator()
var sasAuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// SASAuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of SASAuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize sasAuthTypeWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SASAuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if sasAuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return sasAuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSASAuthTypeWorkspaceConnectionProperties_ARM(generators)
	sasAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(SASAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSASAuthTypeWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForSASAuthTypeWorkspaceConnectionProperties_ARM(generators)
	sasAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(SASAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return sasAuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSASAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSASAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(SASAuthTypeWorkspaceConnectionProperties_AuthType_ARM_SAS)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(SASAuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForSASAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSASAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(WorkspaceConnectionSharedAccessSignature_ARMGenerator())
}

func Test_ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM, ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM(subject ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily
// instantiated by ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator()
var servicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize servicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if servicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return servicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM(generators)
	servicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM(generators)
	servicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return servicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(ServicePrincipalAuthTypeWorkspaceConnectionProperties_AuthType_ARM_ServicePrincipal)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(ServicePrincipalAuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(WorkspaceConnectionServicePrincipal_ARMGenerator())
}

func Test_UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM, UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM runs a test to see if a specific instance of UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM(subject UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM instances for property testing - lazily
// instantiated by UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator()
var usernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator gopter.Gen

// UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator returns a generator of UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM instances for property testing.
// We first initialize usernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator() gopter.Gen {
	if usernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator != nil {
		return usernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM(generators)
	usernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM(generators)
	usernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator = gen.Struct(reflect.TypeOf(UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM{}), generators)

	return usernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["AuthType"] = gen.OneConstOf(UsernamePasswordAuthTypeWorkspaceConnectionProperties_AuthType_ARM_UsernamePassword)
	gens["Category"] = gen.PtrOf(gen.OneConstOf(
		ConnectionCategory_ARM_ADLSGen2,
		ConnectionCategory_ARM_AIServices,
		ConnectionCategory_ARM_AmazonMws,
		ConnectionCategory_ARM_AmazonRdsForOracle,
		ConnectionCategory_ARM_AmazonRdsForSqlServer,
		ConnectionCategory_ARM_AmazonRedshift,
		ConnectionCategory_ARM_AmazonS3Compatible,
		ConnectionCategory_ARM_ApiKey,
		ConnectionCategory_ARM_AzureBlob,
		ConnectionCategory_ARM_AzureDataExplorer,
		ConnectionCategory_ARM_AzureDatabricksDeltaLake,
		ConnectionCategory_ARM_AzureMariaDb,
		ConnectionCategory_ARM_AzureMySqlDb,
		ConnectionCategory_ARM_AzureOneLake,
		ConnectionCategory_ARM_AzureOpenAI,
		ConnectionCategory_ARM_AzurePostgresDb,
		ConnectionCategory_ARM_AzureSqlDb,
		ConnectionCategory_ARM_AzureSqlMi,
		ConnectionCategory_ARM_AzureSynapseAnalytics,
		ConnectionCategory_ARM_AzureTableStorage,
		ConnectionCategory_ARM_BingLLMSearch,
		ConnectionCategory_ARM_Cassandra,
		ConnectionCategory_ARM_CognitiveSearch,
		ConnectionCategory_ARM_CognitiveService,
		ConnectionCategory_ARM_Concur,
		ConnectionCategory_ARM_ContainerRegistry,
		ConnectionCategory_ARM_CosmosDb,
		ConnectionCategory_ARM_CosmosDbMongoDbApi,
		ConnectionCategory_ARM_Couchbase,
		ConnectionCategory_ARM_CustomKeys,
		ConnectionCategory_ARM_Db2,
		ConnectionCategory_ARM_Drill,
		ConnectionCategory_ARM_Dynamics,
		ConnectionCategory_ARM_DynamicsAx,
		ConnectionCategory_ARM_DynamicsCrm,
		ConnectionCategory_ARM_Eloqua,
		ConnectionCategory_ARM_FileServer,
		ConnectionCategory_ARM_FtpServer,
		ConnectionCategory_ARM_GenericContainerRegistry,
		ConnectionCategory_ARM_GenericHttp,
		ConnectionCategory_ARM_GenericRest,
		ConnectionCategory_ARM_Git,
		ConnectionCategory_ARM_GoogleAdWords,
		ConnectionCategory_ARM_GoogleBigQuery,
		ConnectionCategory_ARM_GoogleCloudStorage,
		ConnectionCategory_ARM_Greenplum,
		ConnectionCategory_ARM_Hbase,
		ConnectionCategory_ARM_Hdfs,
		ConnectionCategory_ARM_Hive,
		ConnectionCategory_ARM_Hubspot,
		ConnectionCategory_ARM_Impala,
		ConnectionCategory_ARM_Informix,
		ConnectionCategory_ARM_Jira,
		ConnectionCategory_ARM_Magento,
		ConnectionCategory_ARM_MariaDb,
		ConnectionCategory_ARM_Marketo,
		ConnectionCategory_ARM_MicrosoftAccess,
		ConnectionCategory_ARM_MongoDbAtlas,
		ConnectionCategory_ARM_MongoDbV2,
		ConnectionCategory_ARM_MySql,
		ConnectionCategory_ARM_Netezza,
		ConnectionCategory_ARM_ODataRest,
		ConnectionCategory_ARM_Odbc,
		ConnectionCategory_ARM_Office365,
		ConnectionCategory_ARM_OpenAI,
		ConnectionCategory_ARM_Oracle,
		ConnectionCategory_ARM_OracleCloudStorage,
		ConnectionCategory_ARM_OracleServiceCloud,
		ConnectionCategory_ARM_PayPal,
		ConnectionCategory_ARM_Phoenix,
		ConnectionCategory_ARM_PostgreSql,
		ConnectionCategory_ARM_Presto,
		ConnectionCategory_ARM_PythonFeed,
		ConnectionCategory_ARM_QuickBooks,
		ConnectionCategory_ARM_Redis,
		ConnectionCategory_ARM_Responsys,
		ConnectionCategory_ARM_S3,
		ConnectionCategory_ARM_Salesforce,
		ConnectionCategory_ARM_SalesforceMarketingCloud,
		ConnectionCategory_ARM_SalesforceServiceCloud,
		ConnectionCategory_ARM_SapBw,
		ConnectionCategory_ARM_SapCloudForCustomer,
		ConnectionCategory_ARM_SapEcc,
		ConnectionCategory_ARM_SapHana,
		ConnectionCategory_ARM_SapOpenHub,
		ConnectionCategory_ARM_SapTable,
		ConnectionCategory_ARM_Serp,
		ConnectionCategory_ARM_Serverless,
		ConnectionCategory_ARM_ServiceNow,
		ConnectionCategory_ARM_Sftp,
		ConnectionCategory_ARM_SharePointOnlineList,
		ConnectionCategory_ARM_Shopify,
		ConnectionCategory_ARM_Snowflake,
		ConnectionCategory_ARM_Spark,
		ConnectionCategory_ARM_SqlServer,
		ConnectionCategory_ARM_Square,
		ConnectionCategory_ARM_Sybase,
		ConnectionCategory_ARM_Teradata,
		ConnectionCategory_ARM_Vertica,
		ConnectionCategory_ARM_WebTable,
		ConnectionCategory_ARM_Xero,
		ConnectionCategory_ARM_Zoho))
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["IsSharedToAll"] = gen.PtrOf(gen.Bool())
	gens["Metadata"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["SharedUserList"] = gen.SliceOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
	gens["ValueFormat"] = gen.PtrOf(gen.OneConstOf(UsernamePasswordAuthTypeWorkspaceConnectionProperties_ValueFormat_ARM_JSON))
}

// AddRelatedPropertyGeneratorsForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(WorkspaceConnectionUsernamePassword_ARMGenerator())
}

func Test_WorkspaceConnectionAccessKey_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionAccessKey_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionAccessKey_ARM, WorkspaceConnectionAccessKey_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionAccessKey_ARM runs a test to see if a specific instance of WorkspaceConnectionAccessKey_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionAccessKey_ARM(subject WorkspaceConnectionAccessKey_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionAccessKey_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionAccessKey_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionAccessKey_ARMGenerator()
var workspaceConnectionAccessKey_ARMGenerator gopter.Gen

// WorkspaceConnectionAccessKey_ARMGenerator returns a generator of WorkspaceConnectionAccessKey_ARM instances for property testing.
func WorkspaceConnectionAccessKey_ARMGenerator() gopter.Gen {
	if workspaceConnectionAccessKey_ARMGenerator != nil {
		return workspaceConnectionAccessKey_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionAccessKey_ARM(generators)
	workspaceConnectionAccessKey_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionAccessKey_ARM{}), generators)

	return workspaceConnectionAccessKey_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionAccessKey_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionAccessKey_ARM(gens map[string]gopter.Gen) {
	gens["AccessKeyId"] = gen.PtrOf(gen.AlphaString())
	gens["SecretAccessKey"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceConnectionAccountKey_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionAccountKey_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionAccountKey_ARM, WorkspaceConnectionAccountKey_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionAccountKey_ARM runs a test to see if a specific instance of WorkspaceConnectionAccountKey_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionAccountKey_ARM(subject WorkspaceConnectionAccountKey_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionAccountKey_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionAccountKey_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionAccountKey_ARMGenerator()
var workspaceConnectionAccountKey_ARMGenerator gopter.Gen

// WorkspaceConnectionAccountKey_ARMGenerator returns a generator of WorkspaceConnectionAccountKey_ARM instances for property testing.
func WorkspaceConnectionAccountKey_ARMGenerator() gopter.Gen {
	if workspaceConnectionAccountKey_ARMGenerator != nil {
		return workspaceConnectionAccountKey_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionAccountKey_ARM(generators)
	workspaceConnectionAccountKey_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionAccountKey_ARM{}), generators)

	return workspaceConnectionAccountKey_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionAccountKey_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionAccountKey_ARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceConnectionApiKey_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionApiKey_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionApiKey_ARM, WorkspaceConnectionApiKey_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionApiKey_ARM runs a test to see if a specific instance of WorkspaceConnectionApiKey_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionApiKey_ARM(subject WorkspaceConnectionApiKey_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionApiKey_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionApiKey_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionApiKey_ARMGenerator()
var workspaceConnectionApiKey_ARMGenerator gopter.Gen

// WorkspaceConnectionApiKey_ARMGenerator returns a generator of WorkspaceConnectionApiKey_ARM instances for property testing.
func WorkspaceConnectionApiKey_ARMGenerator() gopter.Gen {
	if workspaceConnectionApiKey_ARMGenerator != nil {
		return workspaceConnectionApiKey_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionApiKey_ARM(generators)
	workspaceConnectionApiKey_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionApiKey_ARM{}), generators)

	return workspaceConnectionApiKey_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionApiKey_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionApiKey_ARM(gens map[string]gopter.Gen) {
	gens["Key"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceConnectionManagedIdentity_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionManagedIdentity_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionManagedIdentity_ARM, WorkspaceConnectionManagedIdentity_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionManagedIdentity_ARM runs a test to see if a specific instance of WorkspaceConnectionManagedIdentity_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionManagedIdentity_ARM(subject WorkspaceConnectionManagedIdentity_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionManagedIdentity_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionManagedIdentity_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionManagedIdentity_ARMGenerator()
var workspaceConnectionManagedIdentity_ARMGenerator gopter.Gen

// WorkspaceConnectionManagedIdentity_ARMGenerator returns a generator of WorkspaceConnectionManagedIdentity_ARM instances for property testing.
func WorkspaceConnectionManagedIdentity_ARMGenerator() gopter.Gen {
	if workspaceConnectionManagedIdentity_ARMGenerator != nil {
		return workspaceConnectionManagedIdentity_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionManagedIdentity_ARM(generators)
	workspaceConnectionManagedIdentity_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionManagedIdentity_ARM{}), generators)

	return workspaceConnectionManagedIdentity_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionManagedIdentity_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionManagedIdentity_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceConnectionOAuth2_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionOAuth2_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionOAuth2_ARM, WorkspaceConnectionOAuth2_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionOAuth2_ARM runs a test to see if a specific instance of WorkspaceConnectionOAuth2_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionOAuth2_ARM(subject WorkspaceConnectionOAuth2_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionOAuth2_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionOAuth2_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionOAuth2_ARMGenerator()
var workspaceConnectionOAuth2_ARMGenerator gopter.Gen

// WorkspaceConnectionOAuth2_ARMGenerator returns a generator of WorkspaceConnectionOAuth2_ARM instances for property testing.
func WorkspaceConnectionOAuth2_ARMGenerator() gopter.Gen {
	if workspaceConnectionOAuth2_ARMGenerator != nil {
		return workspaceConnectionOAuth2_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionOAuth2_ARM(generators)
	workspaceConnectionOAuth2_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionOAuth2_ARM{}), generators)

	return workspaceConnectionOAuth2_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionOAuth2_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionOAuth2_ARM(gens map[string]gopter.Gen) {
	gens["AuthUrl"] = gen.PtrOf(gen.AlphaString())
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ClientSecret"] = gen.PtrOf(gen.AlphaString())
	gens["DeveloperToken"] = gen.PtrOf(gen.AlphaString())
	gens["Password"] = gen.PtrOf(gen.AlphaString())
	gens["RefreshToken"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceConnectionPersonalAccessToken_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionPersonalAccessToken_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionPersonalAccessToken_ARM, WorkspaceConnectionPersonalAccessToken_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionPersonalAccessToken_ARM runs a test to see if a specific instance of WorkspaceConnectionPersonalAccessToken_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionPersonalAccessToken_ARM(subject WorkspaceConnectionPersonalAccessToken_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionPersonalAccessToken_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionPersonalAccessToken_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionPersonalAccessToken_ARMGenerator()
var workspaceConnectionPersonalAccessToken_ARMGenerator gopter.Gen

// WorkspaceConnectionPersonalAccessToken_ARMGenerator returns a generator of WorkspaceConnectionPersonalAccessToken_ARM instances for property testing.
func WorkspaceConnectionPersonalAccessToken_ARMGenerator() gopter.Gen {
	if workspaceConnectionPersonalAccessToken_ARMGenerator != nil {
		return workspaceConnectionPersonalAccessToken_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionPersonalAccessToken_ARM(generators)
	workspaceConnectionPersonalAccessToken_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionPersonalAccessToken_ARM{}), generators)

	return workspaceConnectionPersonalAccessToken_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionPersonalAccessToken_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionPersonalAccessToken_ARM(gens map[string]gopter.Gen) {
	gens["Pat"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceConnectionPropertiesV2_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionPropertiesV2_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionPropertiesV2_ARM, WorkspaceConnectionPropertiesV2_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionPropertiesV2_ARM runs a test to see if a specific instance of WorkspaceConnectionPropertiesV2_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionPropertiesV2_ARM(subject WorkspaceConnectionPropertiesV2_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionPropertiesV2_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionPropertiesV2_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionPropertiesV2_ARMGenerator()
var workspaceConnectionPropertiesV2_ARMGenerator gopter.Gen

// WorkspaceConnectionPropertiesV2_ARMGenerator returns a generator of WorkspaceConnectionPropertiesV2_ARM instances for property testing.
func WorkspaceConnectionPropertiesV2_ARMGenerator() gopter.Gen {
	if workspaceConnectionPropertiesV2_ARMGenerator != nil {
		return workspaceConnectionPropertiesV2_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForWorkspaceConnectionPropertiesV2_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(WorkspaceConnectionPropertiesV2_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	workspaceConnectionPropertiesV2_ARMGenerator = gen.OneGenOf(gens...)

	return workspaceConnectionPropertiesV2_ARMGenerator
}

// AddRelatedPropertyGeneratorsForWorkspaceConnectionPropertiesV2_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaceConnectionPropertiesV2_ARM(gens map[string]gopter.Gen) {
	gens["AAD"] = AADAuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it AADAuthTypeWorkspaceConnectionProperties_ARM) *AADAuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["AccessKey"] = AccessKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it AccessKeyAuthTypeWorkspaceConnectionProperties_ARM) *AccessKeyAuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["AccountKey"] = AccountKeyAuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it AccountKeyAuthTypeWorkspaceConnectionProperties_ARM) *AccountKeyAuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["ApiKey"] = ApiKeyAuthWorkspaceConnectionProperties_ARMGenerator().Map(func(it ApiKeyAuthWorkspaceConnectionProperties_ARM) *ApiKeyAuthWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["CustomKeys"] = CustomKeysWorkspaceConnectionProperties_ARMGenerator().Map(func(it CustomKeysWorkspaceConnectionProperties_ARM) *CustomKeysWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["ManagedIdentity"] = ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM) *ManagedIdentityAuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["None"] = NoneAuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it NoneAuthTypeWorkspaceConnectionProperties_ARM) *NoneAuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["OAuth2"] = OAuth2AuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it OAuth2AuthTypeWorkspaceConnectionProperties_ARM) *OAuth2AuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["PAT"] = PATAuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it PATAuthTypeWorkspaceConnectionProperties_ARM) *PATAuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["SAS"] = SASAuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it SASAuthTypeWorkspaceConnectionProperties_ARM) *SASAuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["ServicePrincipal"] = ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM) *ServicePrincipalAuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["UsernamePassword"] = UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARMGenerator().Map(func(it UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM) *UsernamePasswordAuthTypeWorkspaceConnectionProperties_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_WorkspaceConnectionServicePrincipal_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionServicePrincipal_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionServicePrincipal_ARM, WorkspaceConnectionServicePrincipal_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionServicePrincipal_ARM runs a test to see if a specific instance of WorkspaceConnectionServicePrincipal_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionServicePrincipal_ARM(subject WorkspaceConnectionServicePrincipal_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionServicePrincipal_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionServicePrincipal_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionServicePrincipal_ARMGenerator()
var workspaceConnectionServicePrincipal_ARMGenerator gopter.Gen

// WorkspaceConnectionServicePrincipal_ARMGenerator returns a generator of WorkspaceConnectionServicePrincipal_ARM instances for property testing.
func WorkspaceConnectionServicePrincipal_ARMGenerator() gopter.Gen {
	if workspaceConnectionServicePrincipal_ARMGenerator != nil {
		return workspaceConnectionServicePrincipal_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionServicePrincipal_ARM(generators)
	workspaceConnectionServicePrincipal_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionServicePrincipal_ARM{}), generators)

	return workspaceConnectionServicePrincipal_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionServicePrincipal_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionServicePrincipal_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["ClientSecret"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceConnectionSharedAccessSignature_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionSharedAccessSignature_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionSharedAccessSignature_ARM, WorkspaceConnectionSharedAccessSignature_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionSharedAccessSignature_ARM runs a test to see if a specific instance of WorkspaceConnectionSharedAccessSignature_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionSharedAccessSignature_ARM(subject WorkspaceConnectionSharedAccessSignature_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionSharedAccessSignature_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionSharedAccessSignature_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionSharedAccessSignature_ARMGenerator()
var workspaceConnectionSharedAccessSignature_ARMGenerator gopter.Gen

// WorkspaceConnectionSharedAccessSignature_ARMGenerator returns a generator of WorkspaceConnectionSharedAccessSignature_ARM instances for property testing.
func WorkspaceConnectionSharedAccessSignature_ARMGenerator() gopter.Gen {
	if workspaceConnectionSharedAccessSignature_ARMGenerator != nil {
		return workspaceConnectionSharedAccessSignature_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionSharedAccessSignature_ARM(generators)
	workspaceConnectionSharedAccessSignature_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionSharedAccessSignature_ARM{}), generators)

	return workspaceConnectionSharedAccessSignature_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionSharedAccessSignature_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionSharedAccessSignature_ARM(gens map[string]gopter.Gen) {
	gens["Sas"] = gen.PtrOf(gen.AlphaString())
}

func Test_WorkspaceConnectionUsernamePassword_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WorkspaceConnectionUsernamePassword_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaceConnectionUsernamePassword_ARM, WorkspaceConnectionUsernamePassword_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaceConnectionUsernamePassword_ARM runs a test to see if a specific instance of WorkspaceConnectionUsernamePassword_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaceConnectionUsernamePassword_ARM(subject WorkspaceConnectionUsernamePassword_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual WorkspaceConnectionUsernamePassword_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of WorkspaceConnectionUsernamePassword_ARM instances for property testing - lazily instantiated by
// WorkspaceConnectionUsernamePassword_ARMGenerator()
var workspaceConnectionUsernamePassword_ARMGenerator gopter.Gen

// WorkspaceConnectionUsernamePassword_ARMGenerator returns a generator of WorkspaceConnectionUsernamePassword_ARM instances for property testing.
func WorkspaceConnectionUsernamePassword_ARMGenerator() gopter.Gen {
	if workspaceConnectionUsernamePassword_ARMGenerator != nil {
		return workspaceConnectionUsernamePassword_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaceConnectionUsernamePassword_ARM(generators)
	workspaceConnectionUsernamePassword_ARMGenerator = gen.Struct(reflect.TypeOf(WorkspaceConnectionUsernamePassword_ARM{}), generators)

	return workspaceConnectionUsernamePassword_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaceConnectionUsernamePassword_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaceConnectionUsernamePassword_ARM(gens map[string]gopter.Gen) {
	gens["Password"] = gen.PtrOf(gen.AlphaString())
	gens["SecurityToken"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_Workspaces_Connection_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspaces_Connection_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaces_Connection_Spec_ARM, Workspaces_Connection_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaces_Connection_Spec_ARM runs a test to see if a specific instance of Workspaces_Connection_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaces_Connection_Spec_ARM(subject Workspaces_Connection_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspaces_Connection_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspaces_Connection_Spec_ARM instances for property testing - lazily instantiated by
// Workspaces_Connection_Spec_ARMGenerator()
var workspaces_Connection_Spec_ARMGenerator gopter.Gen

// Workspaces_Connection_Spec_ARMGenerator returns a generator of Workspaces_Connection_Spec_ARM instances for property testing.
// We first initialize workspaces_Connection_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Workspaces_Connection_Spec_ARMGenerator() gopter.Gen {
	if workspaces_Connection_Spec_ARMGenerator != nil {
		return workspaces_Connection_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaces_Connection_Spec_ARM(generators)
	workspaces_Connection_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Workspaces_Connection_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaces_Connection_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForWorkspaces_Connection_Spec_ARM(generators)
	workspaces_Connection_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Workspaces_Connection_Spec_ARM{}), generators)

	return workspaces_Connection_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaces_Connection_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaces_Connection_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForWorkspaces_Connection_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaces_Connection_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(WorkspaceConnectionPropertiesV2_ARMGenerator())
}
