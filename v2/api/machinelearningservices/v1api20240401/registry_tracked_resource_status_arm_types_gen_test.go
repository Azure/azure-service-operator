// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240401

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AcrDetails_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AcrDetails_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAcrDetails_STATUS_ARM, AcrDetails_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAcrDetails_STATUS_ARM runs a test to see if a specific instance of AcrDetails_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAcrDetails_STATUS_ARM(subject AcrDetails_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AcrDetails_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AcrDetails_STATUS_ARM instances for property testing - lazily instantiated by
// AcrDetails_STATUS_ARMGenerator()
var acrDetails_STATUS_ARMGenerator gopter.Gen

// AcrDetails_STATUS_ARMGenerator returns a generator of AcrDetails_STATUS_ARM instances for property testing.
func AcrDetails_STATUS_ARMGenerator() gopter.Gen {
	if acrDetails_STATUS_ARMGenerator != nil {
		return acrDetails_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAcrDetails_STATUS_ARM(generators)
	acrDetails_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AcrDetails_STATUS_ARM{}), generators)

	return acrDetails_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForAcrDetails_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAcrDetails_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["SystemCreatedAcrAccount"] = gen.PtrOf(SystemCreatedAcrAccount_STATUS_ARMGenerator())
	gens["UserCreatedAcrAccount"] = gen.PtrOf(UserCreatedAcrAccount_STATUS_ARMGenerator())
}

func Test_ArmResourceId_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ArmResourceId_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForArmResourceId_STATUS_ARM, ArmResourceId_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForArmResourceId_STATUS_ARM runs a test to see if a specific instance of ArmResourceId_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForArmResourceId_STATUS_ARM(subject ArmResourceId_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ArmResourceId_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ArmResourceId_STATUS_ARM instances for property testing - lazily instantiated by
// ArmResourceId_STATUS_ARMGenerator()
var armResourceId_STATUS_ARMGenerator gopter.Gen

// ArmResourceId_STATUS_ARMGenerator returns a generator of ArmResourceId_STATUS_ARM instances for property testing.
func ArmResourceId_STATUS_ARMGenerator() gopter.Gen {
	if armResourceId_STATUS_ARMGenerator != nil {
		return armResourceId_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForArmResourceId_STATUS_ARM(generators)
	armResourceId_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ArmResourceId_STATUS_ARM{}), generators)

	return armResourceId_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForArmResourceId_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForArmResourceId_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedServiceIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM, ManagedServiceIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM runs a test to see if a specific instance of ManagedServiceIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM(subject ManagedServiceIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedServiceIdentity_STATUS_ARMGenerator()
var managedServiceIdentity_STATUS_ARMGenerator gopter.Gen

// ManagedServiceIdentity_STATUS_ARMGenerator returns a generator of ManagedServiceIdentity_STATUS_ARM instances for property testing.
// We first initialize managedServiceIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_STATUS_ARMGenerator() gopter.Gen {
	if managedServiceIdentity_STATUS_ARMGenerator != nil {
		return managedServiceIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	managedServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	managedServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS_ARM{}), generators)

	return managedServiceIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentityType_STATUS_ARM_None,
		ManagedServiceIdentityType_STATUS_ARM_SystemAssigned,
		ManagedServiceIdentityType_STATUS_ARM_SystemAssignedUserAssigned,
		ManagedServiceIdentityType_STATUS_ARM_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		UserAssignedIdentity_STATUS_ARMGenerator())
}

func Test_PrivateEndpointResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointResource_STATUS_ARM, PrivateEndpointResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointResource_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointResource_STATUS_ARM(subject PrivateEndpointResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointResource_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointResource_STATUS_ARMGenerator()
var privateEndpointResource_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointResource_STATUS_ARMGenerator returns a generator of PrivateEndpointResource_STATUS_ARM instances for property testing.
func PrivateEndpointResource_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointResource_STATUS_ARMGenerator != nil {
		return privateEndpointResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointResource_STATUS_ARM(generators)
	privateEndpointResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointResource_STATUS_ARM{}), generators)

	return privateEndpointResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["SubnetArmId"] = gen.PtrOf(gen.AlphaString())
}

func Test_RegistryPrivateEndpointConnectionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryPrivateEndpointConnectionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryPrivateEndpointConnectionProperties_STATUS_ARM, RegistryPrivateEndpointConnectionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryPrivateEndpointConnectionProperties_STATUS_ARM runs a test to see if a specific instance of RegistryPrivateEndpointConnectionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryPrivateEndpointConnectionProperties_STATUS_ARM(subject RegistryPrivateEndpointConnectionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryPrivateEndpointConnectionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryPrivateEndpointConnectionProperties_STATUS_ARM instances for property testing - lazily
// instantiated by RegistryPrivateEndpointConnectionProperties_STATUS_ARMGenerator()
var registryPrivateEndpointConnectionProperties_STATUS_ARMGenerator gopter.Gen

// RegistryPrivateEndpointConnectionProperties_STATUS_ARMGenerator returns a generator of RegistryPrivateEndpointConnectionProperties_STATUS_ARM instances for property testing.
// We first initialize registryPrivateEndpointConnectionProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistryPrivateEndpointConnectionProperties_STATUS_ARMGenerator() gopter.Gen {
	if registryPrivateEndpointConnectionProperties_STATUS_ARMGenerator != nil {
		return registryPrivateEndpointConnectionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	registryPrivateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	registryPrivateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	return registryPrivateEndpointConnectionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["GroupIds"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpointResource_STATUS_ARMGenerator())
	gens["RegistryPrivateLinkServiceConnectionState"] = gen.PtrOf(RegistryPrivateLinkServiceConnectionState_STATUS_ARMGenerator())
}

func Test_RegistryPrivateEndpointConnection_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryPrivateEndpointConnection_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryPrivateEndpointConnection_STATUS_ARM, RegistryPrivateEndpointConnection_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryPrivateEndpointConnection_STATUS_ARM runs a test to see if a specific instance of RegistryPrivateEndpointConnection_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryPrivateEndpointConnection_STATUS_ARM(subject RegistryPrivateEndpointConnection_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryPrivateEndpointConnection_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryPrivateEndpointConnection_STATUS_ARM instances for property testing - lazily instantiated by
// RegistryPrivateEndpointConnection_STATUS_ARMGenerator()
var registryPrivateEndpointConnection_STATUS_ARMGenerator gopter.Gen

// RegistryPrivateEndpointConnection_STATUS_ARMGenerator returns a generator of RegistryPrivateEndpointConnection_STATUS_ARM instances for property testing.
// We first initialize registryPrivateEndpointConnection_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistryPrivateEndpointConnection_STATUS_ARMGenerator() gopter.Gen {
	if registryPrivateEndpointConnection_STATUS_ARMGenerator != nil {
		return registryPrivateEndpointConnection_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS_ARM(generators)
	registryPrivateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateEndpointConnection_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS_ARM(generators)
	registryPrivateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateEndpointConnection_STATUS_ARM{}), generators)

	return registryPrivateEndpointConnection_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistryPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RegistryPrivateEndpointConnectionProperties_STATUS_ARMGenerator())
}

func Test_RegistryPrivateLinkServiceConnectionState_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryPrivateLinkServiceConnectionState_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryPrivateLinkServiceConnectionState_STATUS_ARM, RegistryPrivateLinkServiceConnectionState_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryPrivateLinkServiceConnectionState_STATUS_ARM runs a test to see if a specific instance of RegistryPrivateLinkServiceConnectionState_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryPrivateLinkServiceConnectionState_STATUS_ARM(subject RegistryPrivateLinkServiceConnectionState_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryPrivateLinkServiceConnectionState_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryPrivateLinkServiceConnectionState_STATUS_ARM instances for property testing - lazily
// instantiated by RegistryPrivateLinkServiceConnectionState_STATUS_ARMGenerator()
var registryPrivateLinkServiceConnectionState_STATUS_ARMGenerator gopter.Gen

// RegistryPrivateLinkServiceConnectionState_STATUS_ARMGenerator returns a generator of RegistryPrivateLinkServiceConnectionState_STATUS_ARM instances for property testing.
func RegistryPrivateLinkServiceConnectionState_STATUS_ARMGenerator() gopter.Gen {
	if registryPrivateLinkServiceConnectionState_STATUS_ARMGenerator != nil {
		return registryPrivateLinkServiceConnectionState_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryPrivateLinkServiceConnectionState_STATUS_ARM(generators)
	registryPrivateLinkServiceConnectionState_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RegistryPrivateLinkServiceConnectionState_STATUS_ARM{}), generators)

	return registryPrivateLinkServiceConnectionState_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRegistryPrivateLinkServiceConnectionState_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryPrivateLinkServiceConnectionState_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		EndpointServiceConnectionStatus_STATUS_ARM_Approved,
		EndpointServiceConnectionStatus_STATUS_ARM_Disconnected,
		EndpointServiceConnectionStatus_STATUS_ARM_Pending,
		EndpointServiceConnectionStatus_STATUS_ARM_Rejected))
}

func Test_RegistryRegionArmDetails_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryRegionArmDetails_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryRegionArmDetails_STATUS_ARM, RegistryRegionArmDetails_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryRegionArmDetails_STATUS_ARM runs a test to see if a specific instance of RegistryRegionArmDetails_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryRegionArmDetails_STATUS_ARM(subject RegistryRegionArmDetails_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryRegionArmDetails_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryRegionArmDetails_STATUS_ARM instances for property testing - lazily instantiated by
// RegistryRegionArmDetails_STATUS_ARMGenerator()
var registryRegionArmDetails_STATUS_ARMGenerator gopter.Gen

// RegistryRegionArmDetails_STATUS_ARMGenerator returns a generator of RegistryRegionArmDetails_STATUS_ARM instances for property testing.
// We first initialize registryRegionArmDetails_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistryRegionArmDetails_STATUS_ARMGenerator() gopter.Gen {
	if registryRegionArmDetails_STATUS_ARMGenerator != nil {
		return registryRegionArmDetails_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryRegionArmDetails_STATUS_ARM(generators)
	registryRegionArmDetails_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RegistryRegionArmDetails_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryRegionArmDetails_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRegistryRegionArmDetails_STATUS_ARM(generators)
	registryRegionArmDetails_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RegistryRegionArmDetails_STATUS_ARM{}), generators)

	return registryRegionArmDetails_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRegistryRegionArmDetails_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryRegionArmDetails_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistryRegionArmDetails_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistryRegionArmDetails_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AcrDetails"] = gen.SliceOf(AcrDetails_STATUS_ARMGenerator())
	gens["StorageAccountDetails"] = gen.SliceOf(StorageAccountDetails_STATUS_ARMGenerator())
}

func Test_RegistryTrackedResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistryTrackedResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistryTrackedResource_STATUS_ARM, RegistryTrackedResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistryTrackedResource_STATUS_ARM runs a test to see if a specific instance of RegistryTrackedResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistryTrackedResource_STATUS_ARM(subject RegistryTrackedResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistryTrackedResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistryTrackedResource_STATUS_ARM instances for property testing - lazily instantiated by
// RegistryTrackedResource_STATUS_ARMGenerator()
var registryTrackedResource_STATUS_ARMGenerator gopter.Gen

// RegistryTrackedResource_STATUS_ARMGenerator returns a generator of RegistryTrackedResource_STATUS_ARM instances for property testing.
// We first initialize registryTrackedResource_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistryTrackedResource_STATUS_ARMGenerator() gopter.Gen {
	if registryTrackedResource_STATUS_ARMGenerator != nil {
		return registryTrackedResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryTrackedResource_STATUS_ARM(generators)
	registryTrackedResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RegistryTrackedResource_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistryTrackedResource_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRegistryTrackedResource_STATUS_ARM(generators)
	registryTrackedResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RegistryTrackedResource_STATUS_ARM{}), generators)

	return registryTrackedResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRegistryTrackedResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistryTrackedResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistryTrackedResource_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistryTrackedResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(Registry_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_Registry_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Registry_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistry_STATUS_ARM, Registry_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistry_STATUS_ARM runs a test to see if a specific instance of Registry_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistry_STATUS_ARM(subject Registry_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Registry_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Registry_STATUS_ARM instances for property testing - lazily instantiated by
// Registry_STATUS_ARMGenerator()
var registry_STATUS_ARMGenerator gopter.Gen

// Registry_STATUS_ARMGenerator returns a generator of Registry_STATUS_ARM instances for property testing.
// We first initialize registry_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Registry_STATUS_ARMGenerator() gopter.Gen {
	if registry_STATUS_ARMGenerator != nil {
		return registry_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistry_STATUS_ARM(generators)
	registry_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Registry_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistry_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRegistry_STATUS_ARM(generators)
	registry_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Registry_STATUS_ARM{}), generators)

	return registry_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRegistry_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistry_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DiscoveryUrl"] = gen.PtrOf(gen.AlphaString())
	gens["IntellectualPropertyPublisher"] = gen.PtrOf(gen.AlphaString())
	gens["MlFlowRegistryUri"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRegistry_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistry_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ManagedResourceGroup"] = gen.PtrOf(ArmResourceId_STATUS_ARMGenerator())
	gens["RegionDetails"] = gen.SliceOf(RegistryRegionArmDetails_STATUS_ARMGenerator())
	gens["RegistryPrivateEndpointConnections"] = gen.SliceOf(RegistryPrivateEndpointConnection_STATUS_ARMGenerator())
}

func Test_Sku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS_ARM, Sku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS_ARM runs a test to see if a specific instance of Sku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS_ARM(subject Sku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS_ARM instances for property testing - lazily instantiated by Sku_STATUS_ARMGenerator()
var sku_STATUS_ARMGenerator gopter.Gen

// Sku_STATUS_ARMGenerator returns a generator of Sku_STATUS_ARM instances for property testing.
func Sku_STATUS_ARMGenerator() gopter.Gen {
	if sku_STATUS_ARMGenerator != nil {
		return sku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS_ARM(generators)
	sku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS_ARM{}), generators)

	return sku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.OneConstOf(
		SkuTier_STATUS_ARM_Basic,
		SkuTier_STATUS_ARM_Free,
		SkuTier_STATUS_ARM_Premium,
		SkuTier_STATUS_ARM_Standard))
}

func Test_StorageAccountDetails_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StorageAccountDetails_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorageAccountDetails_STATUS_ARM, StorageAccountDetails_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorageAccountDetails_STATUS_ARM runs a test to see if a specific instance of StorageAccountDetails_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorageAccountDetails_STATUS_ARM(subject StorageAccountDetails_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StorageAccountDetails_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StorageAccountDetails_STATUS_ARM instances for property testing - lazily instantiated by
// StorageAccountDetails_STATUS_ARMGenerator()
var storageAccountDetails_STATUS_ARMGenerator gopter.Gen

// StorageAccountDetails_STATUS_ARMGenerator returns a generator of StorageAccountDetails_STATUS_ARM instances for property testing.
func StorageAccountDetails_STATUS_ARMGenerator() gopter.Gen {
	if storageAccountDetails_STATUS_ARMGenerator != nil {
		return storageAccountDetails_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForStorageAccountDetails_STATUS_ARM(generators)
	storageAccountDetails_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StorageAccountDetails_STATUS_ARM{}), generators)

	return storageAccountDetails_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForStorageAccountDetails_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForStorageAccountDetails_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["SystemCreatedStorageAccount"] = gen.PtrOf(SystemCreatedStorageAccount_STATUS_ARMGenerator())
	gens["UserCreatedStorageAccount"] = gen.PtrOf(UserCreatedStorageAccount_STATUS_ARMGenerator())
}

func Test_SystemCreatedAcrAccount_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemCreatedAcrAccount_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemCreatedAcrAccount_STATUS_ARM, SystemCreatedAcrAccount_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemCreatedAcrAccount_STATUS_ARM runs a test to see if a specific instance of SystemCreatedAcrAccount_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemCreatedAcrAccount_STATUS_ARM(subject SystemCreatedAcrAccount_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemCreatedAcrAccount_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemCreatedAcrAccount_STATUS_ARM instances for property testing - lazily instantiated by
// SystemCreatedAcrAccount_STATUS_ARMGenerator()
var systemCreatedAcrAccount_STATUS_ARMGenerator gopter.Gen

// SystemCreatedAcrAccount_STATUS_ARMGenerator returns a generator of SystemCreatedAcrAccount_STATUS_ARM instances for property testing.
// We first initialize systemCreatedAcrAccount_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SystemCreatedAcrAccount_STATUS_ARMGenerator() gopter.Gen {
	if systemCreatedAcrAccount_STATUS_ARMGenerator != nil {
		return systemCreatedAcrAccount_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemCreatedAcrAccount_STATUS_ARM(generators)
	systemCreatedAcrAccount_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemCreatedAcrAccount_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemCreatedAcrAccount_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSystemCreatedAcrAccount_STATUS_ARM(generators)
	systemCreatedAcrAccount_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemCreatedAcrAccount_STATUS_ARM{}), generators)

	return systemCreatedAcrAccount_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemCreatedAcrAccount_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemCreatedAcrAccount_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AcrAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["AcrAccountSku"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSystemCreatedAcrAccount_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSystemCreatedAcrAccount_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ArmResourceId"] = gen.PtrOf(ArmResourceId_STATUS_ARMGenerator())
}

func Test_SystemCreatedStorageAccount_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemCreatedStorageAccount_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemCreatedStorageAccount_STATUS_ARM, SystemCreatedStorageAccount_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemCreatedStorageAccount_STATUS_ARM runs a test to see if a specific instance of SystemCreatedStorageAccount_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemCreatedStorageAccount_STATUS_ARM(subject SystemCreatedStorageAccount_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemCreatedStorageAccount_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemCreatedStorageAccount_STATUS_ARM instances for property testing - lazily instantiated by
// SystemCreatedStorageAccount_STATUS_ARMGenerator()
var systemCreatedStorageAccount_STATUS_ARMGenerator gopter.Gen

// SystemCreatedStorageAccount_STATUS_ARMGenerator returns a generator of SystemCreatedStorageAccount_STATUS_ARM instances for property testing.
// We first initialize systemCreatedStorageAccount_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SystemCreatedStorageAccount_STATUS_ARMGenerator() gopter.Gen {
	if systemCreatedStorageAccount_STATUS_ARMGenerator != nil {
		return systemCreatedStorageAccount_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemCreatedStorageAccount_STATUS_ARM(generators)
	systemCreatedStorageAccount_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemCreatedStorageAccount_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemCreatedStorageAccount_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSystemCreatedStorageAccount_STATUS_ARM(generators)
	systemCreatedStorageAccount_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemCreatedStorageAccount_STATUS_ARM{}), generators)

	return systemCreatedStorageAccount_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemCreatedStorageAccount_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemCreatedStorageAccount_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowBlobPublicAccess"] = gen.PtrOf(gen.Bool())
	gens["StorageAccountHnsEnabled"] = gen.PtrOf(gen.Bool())
	gens["StorageAccountName"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountType"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSystemCreatedStorageAccount_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSystemCreatedStorageAccount_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ArmResourceId"] = gen.PtrOf(ArmResourceId_STATUS_ARMGenerator())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_ARM_Application,
		SystemData_CreatedByType_STATUS_ARM_Key,
		SystemData_CreatedByType_STATUS_ARM_ManagedIdentity,
		SystemData_CreatedByType_STATUS_ARM_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_ARM_Application,
		SystemData_LastModifiedByType_STATUS_ARM_Key,
		SystemData_LastModifiedByType_STATUS_ARM_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_ARM_User))
}

func Test_UserAssignedIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_STATUS_ARM, UserAssignedIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_STATUS_ARM runs a test to see if a specific instance of UserAssignedIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_STATUS_ARM(subject UserAssignedIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// UserAssignedIdentity_STATUS_ARMGenerator()
var userAssignedIdentity_STATUS_ARMGenerator gopter.Gen

// UserAssignedIdentity_STATUS_ARMGenerator returns a generator of UserAssignedIdentity_STATUS_ARM instances for property testing.
func UserAssignedIdentity_STATUS_ARMGenerator() gopter.Gen {
	if userAssignedIdentity_STATUS_ARMGenerator != nil {
		return userAssignedIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS_ARM(generators)
	userAssignedIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_STATUS_ARM{}), generators)

	return userAssignedIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserCreatedAcrAccount_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserCreatedAcrAccount_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserCreatedAcrAccount_STATUS_ARM, UserCreatedAcrAccount_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserCreatedAcrAccount_STATUS_ARM runs a test to see if a specific instance of UserCreatedAcrAccount_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserCreatedAcrAccount_STATUS_ARM(subject UserCreatedAcrAccount_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserCreatedAcrAccount_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserCreatedAcrAccount_STATUS_ARM instances for property testing - lazily instantiated by
// UserCreatedAcrAccount_STATUS_ARMGenerator()
var userCreatedAcrAccount_STATUS_ARMGenerator gopter.Gen

// UserCreatedAcrAccount_STATUS_ARMGenerator returns a generator of UserCreatedAcrAccount_STATUS_ARM instances for property testing.
func UserCreatedAcrAccount_STATUS_ARMGenerator() gopter.Gen {
	if userCreatedAcrAccount_STATUS_ARMGenerator != nil {
		return userCreatedAcrAccount_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUserCreatedAcrAccount_STATUS_ARM(generators)
	userCreatedAcrAccount_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserCreatedAcrAccount_STATUS_ARM{}), generators)

	return userCreatedAcrAccount_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForUserCreatedAcrAccount_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUserCreatedAcrAccount_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ArmResourceId"] = gen.PtrOf(ArmResourceId_STATUS_ARMGenerator())
}

func Test_UserCreatedStorageAccount_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserCreatedStorageAccount_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserCreatedStorageAccount_STATUS_ARM, UserCreatedStorageAccount_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserCreatedStorageAccount_STATUS_ARM runs a test to see if a specific instance of UserCreatedStorageAccount_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserCreatedStorageAccount_STATUS_ARM(subject UserCreatedStorageAccount_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserCreatedStorageAccount_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserCreatedStorageAccount_STATUS_ARM instances for property testing - lazily instantiated by
// UserCreatedStorageAccount_STATUS_ARMGenerator()
var userCreatedStorageAccount_STATUS_ARMGenerator gopter.Gen

// UserCreatedStorageAccount_STATUS_ARMGenerator returns a generator of UserCreatedStorageAccount_STATUS_ARM instances for property testing.
func UserCreatedStorageAccount_STATUS_ARMGenerator() gopter.Gen {
	if userCreatedStorageAccount_STATUS_ARMGenerator != nil {
		return userCreatedStorageAccount_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUserCreatedStorageAccount_STATUS_ARM(generators)
	userCreatedStorageAccount_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserCreatedStorageAccount_STATUS_ARM{}), generators)

	return userCreatedStorageAccount_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForUserCreatedStorageAccount_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUserCreatedStorageAccount_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ArmResourceId"] = gen.PtrOf(ArmResourceId_STATUS_ARMGenerator())
}
