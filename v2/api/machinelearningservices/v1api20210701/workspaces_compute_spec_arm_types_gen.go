// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210701

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
)

type Workspaces_Compute_Spec_ARM struct {
	// Identity: The identity of the resource.
	Identity *Identity_ARM `json:"identity,omitempty"`

	// Location: Specifies the location of the resource.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Compute properties
	Properties *Compute_ARM `json:"properties,omitempty"`

	// Sku: The sku of the workspace.
	Sku *Sku_ARM `json:"sku,omitempty"`

	// SystemData: System data
	SystemData *SystemData_ARM `json:"systemData,omitempty"`

	// Tags: Contains resource tags defined as key/value pairs.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Workspaces_Compute_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-07-01"
func (compute Workspaces_Compute_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (compute *Workspaces_Compute_Spec_ARM) GetName() string {
	return compute.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.MachineLearningServices/workspaces/computes"
func (compute *Workspaces_Compute_Spec_ARM) GetType() string {
	return "Microsoft.MachineLearningServices/workspaces/computes"
}

type Compute_ARM struct {
	// AKS: Mutually exclusive with all other properties
	AKS *AKS_ARM `json:"aks,omitempty"`

	// AmlCompute: Mutually exclusive with all other properties
	AmlCompute *AmlCompute_ARM `json:"amlCompute,omitempty"`

	// ComputeInstance: Mutually exclusive with all other properties
	ComputeInstance *ComputeInstance_ARM `json:"computeInstance,omitempty"`

	// DataFactory: Mutually exclusive with all other properties
	DataFactory *DataFactory_ARM `json:"dataFactory,omitempty"`

	// DataLakeAnalytics: Mutually exclusive with all other properties
	DataLakeAnalytics *DataLakeAnalytics_ARM `json:"dataLakeAnalytics,omitempty"`

	// Databricks: Mutually exclusive with all other properties
	Databricks *Databricks_ARM `json:"databricks,omitempty"`

	// HDInsight: Mutually exclusive with all other properties
	HDInsight *HDInsight_ARM `json:"hdInsight,omitempty"`

	// Kubernetes: Mutually exclusive with all other properties
	Kubernetes *Kubernetes_ARM `json:"kubernetes,omitempty"`

	// SynapseSpark: Mutually exclusive with all other properties
	SynapseSpark *SynapseSpark_ARM `json:"synapseSpark,omitempty"`

	// VirtualMachine: Mutually exclusive with all other properties
	VirtualMachine *VirtualMachine_ARM `json:"virtualMachine,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because Compute_ARM represents a discriminated union (JSON OneOf)
func (compute Compute_ARM) MarshalJSON() ([]byte, error) {
	if compute.AKS != nil {
		return json.Marshal(compute.AKS)
	}
	if compute.AmlCompute != nil {
		return json.Marshal(compute.AmlCompute)
	}
	if compute.ComputeInstance != nil {
		return json.Marshal(compute.ComputeInstance)
	}
	if compute.DataFactory != nil {
		return json.Marshal(compute.DataFactory)
	}
	if compute.DataLakeAnalytics != nil {
		return json.Marshal(compute.DataLakeAnalytics)
	}
	if compute.Databricks != nil {
		return json.Marshal(compute.Databricks)
	}
	if compute.HDInsight != nil {
		return json.Marshal(compute.HDInsight)
	}
	if compute.Kubernetes != nil {
		return json.Marshal(compute.Kubernetes)
	}
	if compute.SynapseSpark != nil {
		return json.Marshal(compute.SynapseSpark)
	}
	if compute.VirtualMachine != nil {
		return json.Marshal(compute.VirtualMachine)
	}
	return nil, nil
}

// UnmarshalJSON unmarshals the Compute_ARM
func (compute *Compute_ARM) UnmarshalJSON(data []byte) error {
	var rawJson map[string]interface{}
	err := json.Unmarshal(data, &rawJson)
	if err != nil {
		return err
	}
	discriminator := rawJson["computeType"]
	if discriminator == "AKS" {
		compute.AKS = &AKS_ARM{}
		return json.Unmarshal(data, compute.AKS)
	}
	if discriminator == "AmlCompute" {
		compute.AmlCompute = &AmlCompute_ARM{}
		return json.Unmarshal(data, compute.AmlCompute)
	}
	if discriminator == "ComputeInstance" {
		compute.ComputeInstance = &ComputeInstance_ARM{}
		return json.Unmarshal(data, compute.ComputeInstance)
	}
	if discriminator == "DataFactory" {
		compute.DataFactory = &DataFactory_ARM{}
		return json.Unmarshal(data, compute.DataFactory)
	}
	if discriminator == "DataLakeAnalytics" {
		compute.DataLakeAnalytics = &DataLakeAnalytics_ARM{}
		return json.Unmarshal(data, compute.DataLakeAnalytics)
	}
	if discriminator == "Databricks" {
		compute.Databricks = &Databricks_ARM{}
		return json.Unmarshal(data, compute.Databricks)
	}
	if discriminator == "HDInsight" {
		compute.HDInsight = &HDInsight_ARM{}
		return json.Unmarshal(data, compute.HDInsight)
	}
	if discriminator == "Kubernetes" {
		compute.Kubernetes = &Kubernetes_ARM{}
		return json.Unmarshal(data, compute.Kubernetes)
	}
	if discriminator == "SynapseSpark" {
		compute.SynapseSpark = &SynapseSpark_ARM{}
		return json.Unmarshal(data, compute.SynapseSpark)
	}
	if discriminator == "VirtualMachine" {
		compute.VirtualMachine = &VirtualMachine_ARM{}
		return json.Unmarshal(data, compute.VirtualMachine)
	}

	// No error
	return nil
}

type AKS_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType AKS_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Properties: AKS properties
	Properties *AKS_Properties_ARM `json:"properties,omitempty"`
	ResourceId *string             `json:"resourceId,omitempty"`
}

type AmlCompute_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType AmlCompute_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Properties: Properties of AmlCompute
	Properties *AmlComputeProperties_ARM `json:"properties,omitempty"`
	ResourceId *string                   `json:"resourceId,omitempty"`
}

type ComputeInstance_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType ComputeInstance_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Properties: Properties of ComputeInstance
	Properties *ComputeInstanceProperties_ARM `json:"properties,omitempty"`
	ResourceId *string                        `json:"resourceId,omitempty"`
}

type Databricks_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType Databricks_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Properties: Properties of Databricks
	Properties *DatabricksProperties_ARM `json:"properties,omitempty"`
	ResourceId *string                   `json:"resourceId,omitempty"`
}

type DataFactory_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType DataFactory_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool   `json:"disableLocalAuth,omitempty"`
	ResourceId       *string `json:"resourceId,omitempty"`
}

type DataLakeAnalytics_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType DataLakeAnalytics_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool                             `json:"disableLocalAuth,omitempty"`
	Properties       *DataLakeAnalytics_Properties_ARM `json:"properties,omitempty"`
	ResourceId       *string                           `json:"resourceId,omitempty"`
}

type HDInsight_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType HDInsight_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Properties: HDInsight compute properties
	Properties *HDInsightProperties_ARM `json:"properties,omitempty"`
	ResourceId *string                  `json:"resourceId,omitempty"`
}

type Kubernetes_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType Kubernetes_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Properties: Properties of Kubernetes
	Properties *KubernetesProperties_ARM `json:"properties,omitempty"`
	ResourceId *string                   `json:"resourceId,omitempty"`
}

type SynapseSpark_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType SynapseSpark_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool                        `json:"disableLocalAuth,omitempty"`
	Properties       *SynapseSpark_Properties_ARM `json:"properties,omitempty"`
	ResourceId       *string                      `json:"resourceId,omitempty"`
}

type VirtualMachine_ARM struct {
	// ComputeLocation: Location for the underlying compute
	ComputeLocation *string `json:"computeLocation,omitempty"`

	// ComputeType: The type of compute
	ComputeType VirtualMachine_ComputeType_ARM `json:"computeType,omitempty"`

	// Description: The description of the Machine Learning compute.
	Description *string `json:"description,omitempty"`

	// DisableLocalAuth: Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for
	// authentication.
	DisableLocalAuth *bool                          `json:"disableLocalAuth,omitempty"`
	Properties       *VirtualMachine_Properties_ARM `json:"properties,omitempty"`
	ResourceId       *string                        `json:"resourceId,omitempty"`
}

// +kubebuilder:validation:Enum={"AKS"}
type AKS_ComputeType_ARM string

const AKS_ComputeType_ARM_AKS = AKS_ComputeType_ARM("AKS")

// Mapping from string to AKS_ComputeType_ARM
var aKS_ComputeType_ARM_Values = map[string]AKS_ComputeType_ARM{
	"aks": AKS_ComputeType_ARM_AKS,
}

type AKS_Properties_ARM struct {
	// AgentCount: Number of agents
	AgentCount *int `json:"agentCount,omitempty"`

	// AgentVmSize: Agent virtual machine size
	AgentVmSize *string `json:"agentVmSize,omitempty"`

	// AksNetworkingConfiguration: AKS networking configuration for vnet
	AksNetworkingConfiguration *AksNetworkingConfiguration_ARM `json:"aksNetworkingConfiguration,omitempty"`

	// ClusterFqdn: Cluster full qualified domain name
	ClusterFqdn *string `json:"clusterFqdn,omitempty"`

	// ClusterPurpose: Intended usage of the cluster
	ClusterPurpose *AKS_Properties_ClusterPurpose_ARM `json:"clusterPurpose,omitempty"`

	// LoadBalancerSubnet: Load Balancer Subnet
	LoadBalancerSubnet *string `json:"loadBalancerSubnet,omitempty"`

	// LoadBalancerType: Load Balancer Type
	LoadBalancerType *AKS_Properties_LoadBalancerType_ARM `json:"loadBalancerType,omitempty"`

	// SslConfiguration: SSL configuration
	SslConfiguration *SslConfiguration_ARM `json:"sslConfiguration,omitempty"`
}

// +kubebuilder:validation:Enum={"AmlCompute"}
type AmlCompute_ComputeType_ARM string

const AmlCompute_ComputeType_ARM_AmlCompute = AmlCompute_ComputeType_ARM("AmlCompute")

// Mapping from string to AmlCompute_ComputeType_ARM
var amlCompute_ComputeType_ARM_Values = map[string]AmlCompute_ComputeType_ARM{
	"amlcompute": AmlCompute_ComputeType_ARM_AmlCompute,
}

// AML Compute properties
type AmlComputeProperties_ARM struct {
	// EnableNodePublicIp: Enable or disable node public IP address provisioning. Possible values are: Possible values are:
	// true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will
	// have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `json:"enableNodePublicIp,omitempty"`

	// IsolatedNetwork: Network is isolated or not
	IsolatedNetwork *bool `json:"isolatedNetwork,omitempty"`

	// OsType: Compute OS Type
	OsType *AmlComputeProperties_OsType_ARM `json:"osType,omitempty"`

	// RemoteLoginPortPublicAccess: State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh
	// port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the
	// cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined,
	// else is open all public nodes. It can be default only during cluster creation time, after creation it will be either
	// enabled or disabled.
	RemoteLoginPortPublicAccess *AmlComputeProperties_RemoteLoginPortPublicAccess_ARM `json:"remoteLoginPortPublicAccess,omitempty"`

	// ScaleSettings: Scale settings for AML Compute
	ScaleSettings *ScaleSettings_ARM `json:"scaleSettings,omitempty"`

	// Subnet: Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceId_ARM `json:"subnet,omitempty"`

	// UserAccountCredentials: Credentials for an administrator user account that will be created on each compute node.
	UserAccountCredentials *UserAccountCredentials_ARM `json:"userAccountCredentials,omitempty"`

	// VirtualMachineImage: Virtual Machine image for AML Compute - windows only
	VirtualMachineImage *VirtualMachineImage_ARM `json:"virtualMachineImage,omitempty"`

	// VmPriority: Virtual Machine priority
	VmPriority *AmlComputeProperties_VmPriority_ARM `json:"vmPriority,omitempty"`

	// VmSize: Virtual Machine Size
	VmSize *string `json:"vmSize,omitempty"`
}

// +kubebuilder:validation:Enum={"ComputeInstance"}
type ComputeInstance_ComputeType_ARM string

const ComputeInstance_ComputeType_ARM_ComputeInstance = ComputeInstance_ComputeType_ARM("ComputeInstance")

// Mapping from string to ComputeInstance_ComputeType_ARM
var computeInstance_ComputeType_ARM_Values = map[string]ComputeInstance_ComputeType_ARM{
	"computeinstance": ComputeInstance_ComputeType_ARM_ComputeInstance,
}

// Compute Instance properties
type ComputeInstanceProperties_ARM struct {
	// ApplicationSharingPolicy: Policy for sharing applications on this compute instance among users of parent workspace. If
	// Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access
	// applications on this instance depending on his/her assigned role.
	ApplicationSharingPolicy *ComputeInstanceProperties_ApplicationSharingPolicy_ARM `json:"applicationSharingPolicy,omitempty"`

	// ComputeInstanceAuthorizationType: The Compute Instance Authorization type. Available values are personal (default).
	ComputeInstanceAuthorizationType *ComputeInstanceProperties_ComputeInstanceAuthorizationType_ARM `json:"computeInstanceAuthorizationType,omitempty"`

	// PersonalComputeInstanceSettings: Settings for a personal compute instance.
	PersonalComputeInstanceSettings *PersonalComputeInstanceSettings_ARM `json:"personalComputeInstanceSettings,omitempty"`

	// SetupScripts: Details of customized scripts to execute for setting up the cluster.
	SetupScripts *SetupScripts_ARM `json:"setupScripts,omitempty"`

	// SshSettings: Specifies policy and settings for SSH access.
	SshSettings *ComputeInstanceSshSettings_ARM `json:"sshSettings,omitempty"`

	// Subnet: Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceId_ARM `json:"subnet,omitempty"`

	// VmSize: Virtual Machine Size
	VmSize *string `json:"vmSize,omitempty"`
}

// +kubebuilder:validation:Enum={"Databricks"}
type Databricks_ComputeType_ARM string

const Databricks_ComputeType_ARM_Databricks = Databricks_ComputeType_ARM("Databricks")

// Mapping from string to Databricks_ComputeType_ARM
var databricks_ComputeType_ARM_Values = map[string]Databricks_ComputeType_ARM{
	"databricks": Databricks_ComputeType_ARM_Databricks,
}

// Properties of Databricks
type DatabricksProperties_ARM struct {
	// DatabricksAccessToken: Databricks access token
	DatabricksAccessToken *string `json:"databricksAccessToken,omitempty"`

	// WorkspaceUrl: Workspace Url
	WorkspaceUrl *string `json:"workspaceUrl,omitempty"`
}

// +kubebuilder:validation:Enum={"DataFactory"}
type DataFactory_ComputeType_ARM string

const DataFactory_ComputeType_ARM_DataFactory = DataFactory_ComputeType_ARM("DataFactory")

// Mapping from string to DataFactory_ComputeType_ARM
var dataFactory_ComputeType_ARM_Values = map[string]DataFactory_ComputeType_ARM{
	"datafactory": DataFactory_ComputeType_ARM_DataFactory,
}

// +kubebuilder:validation:Enum={"DataLakeAnalytics"}
type DataLakeAnalytics_ComputeType_ARM string

const DataLakeAnalytics_ComputeType_ARM_DataLakeAnalytics = DataLakeAnalytics_ComputeType_ARM("DataLakeAnalytics")

// Mapping from string to DataLakeAnalytics_ComputeType_ARM
var dataLakeAnalytics_ComputeType_ARM_Values = map[string]DataLakeAnalytics_ComputeType_ARM{
	"datalakeanalytics": DataLakeAnalytics_ComputeType_ARM_DataLakeAnalytics,
}

type DataLakeAnalytics_Properties_ARM struct {
	// DataLakeStoreAccountName: DataLake Store Account Name
	DataLakeStoreAccountName *string `json:"dataLakeStoreAccountName,omitempty"`
}

// +kubebuilder:validation:Enum={"HDInsight"}
type HDInsight_ComputeType_ARM string

const HDInsight_ComputeType_ARM_HDInsight = HDInsight_ComputeType_ARM("HDInsight")

// Mapping from string to HDInsight_ComputeType_ARM
var hDInsight_ComputeType_ARM_Values = map[string]HDInsight_ComputeType_ARM{
	"hdinsight": HDInsight_ComputeType_ARM_HDInsight,
}

// HDInsight compute properties
type HDInsightProperties_ARM struct {
	// Address: Public IP address of the master node of the cluster.
	Address *string `json:"address,omitempty"`

	// AdministratorAccount: Admin credentials for master node of the cluster
	AdministratorAccount *VirtualMachineSshCredentials_ARM `json:"administratorAccount,omitempty"`

	// SshPort: Port open for ssh connections on the master node of the cluster.
	SshPort *int `json:"sshPort,omitempty"`
}

// +kubebuilder:validation:Enum={"Kubernetes"}
type Kubernetes_ComputeType_ARM string

const Kubernetes_ComputeType_ARM_Kubernetes = Kubernetes_ComputeType_ARM("Kubernetes")

// Mapping from string to Kubernetes_ComputeType_ARM
var kubernetes_ComputeType_ARM_Values = map[string]Kubernetes_ComputeType_ARM{
	"kubernetes": Kubernetes_ComputeType_ARM_Kubernetes,
}

// Kubernetes properties
type KubernetesProperties_ARM struct {
	// DefaultInstanceType: Default instance type
	DefaultInstanceType *string `json:"defaultInstanceType,omitempty"`

	// ExtensionInstanceReleaseTrain: Extension instance release train.
	ExtensionInstanceReleaseTrain *string `json:"extensionInstanceReleaseTrain,omitempty"`

	// ExtensionPrincipalId: Extension principal-id.
	ExtensionPrincipalId *string `json:"extensionPrincipalId,omitempty"`

	// InstanceTypes: Instance Type Schema
	InstanceTypes map[string]InstanceTypeSchema_ARM `json:"instanceTypes,omitempty"`

	// Namespace: Compute namespace
	Namespace *string `json:"namespace,omitempty"`

	// RelayConnectionString: Relay connection string.
	RelayConnectionString *string `json:"relayConnectionString,omitempty"`

	// ServiceBusConnectionString: ServiceBus connection string.
	ServiceBusConnectionString *string `json:"serviceBusConnectionString,omitempty"`

	// VcName: VC name.
	VcName *string `json:"vcName,omitempty"`
}

// +kubebuilder:validation:Enum={"SynapseSpark"}
type SynapseSpark_ComputeType_ARM string

const SynapseSpark_ComputeType_ARM_SynapseSpark = SynapseSpark_ComputeType_ARM("SynapseSpark")

// Mapping from string to SynapseSpark_ComputeType_ARM
var synapseSpark_ComputeType_ARM_Values = map[string]SynapseSpark_ComputeType_ARM{
	"synapsespark": SynapseSpark_ComputeType_ARM_SynapseSpark,
}

type SynapseSpark_Properties_ARM struct {
	// AutoPauseProperties: Auto pause properties.
	AutoPauseProperties *AutoPauseProperties_ARM `json:"autoPauseProperties,omitempty"`

	// AutoScaleProperties: Auto scale properties.
	AutoScaleProperties *AutoScaleProperties_ARM `json:"autoScaleProperties,omitempty"`

	// NodeCount: The number of compute nodes currently assigned to the compute.
	NodeCount *int `json:"nodeCount,omitempty"`

	// NodeSize: Node size.
	NodeSize *string `json:"nodeSize,omitempty"`

	// NodeSizeFamily: Node size family.
	NodeSizeFamily *string `json:"nodeSizeFamily,omitempty"`

	// PoolName: Pool name.
	PoolName *string `json:"poolName,omitempty"`

	// ResourceGroup: Name of the resource group in which workspace is located.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// SparkVersion: Spark version.
	SparkVersion *string `json:"sparkVersion,omitempty"`

	// SubscriptionId: Azure subscription identifier.
	SubscriptionId *string `json:"subscriptionId,omitempty"`

	// WorkspaceName: Name of Azure Machine Learning workspace.
	WorkspaceName *string `json:"workspaceName,omitempty"`
}

// +kubebuilder:validation:Enum={"VirtualMachine"}
type VirtualMachine_ComputeType_ARM string

const VirtualMachine_ComputeType_ARM_VirtualMachine = VirtualMachine_ComputeType_ARM("VirtualMachine")

// Mapping from string to VirtualMachine_ComputeType_ARM
var virtualMachine_ComputeType_ARM_Values = map[string]VirtualMachine_ComputeType_ARM{
	"virtualmachine": VirtualMachine_ComputeType_ARM_VirtualMachine,
}

type VirtualMachine_Properties_ARM struct {
	// Address: Public IP address of the virtual machine.
	Address *string `json:"address,omitempty"`

	// AdministratorAccount: Admin credentials for virtual machine
	AdministratorAccount *VirtualMachineSshCredentials_ARM `json:"administratorAccount,omitempty"`

	// IsNotebookInstanceCompute: Indicates whether this compute will be used for running notebooks.
	IsNotebookInstanceCompute *bool `json:"isNotebookInstanceCompute,omitempty"`

	// SshPort: Port open for ssh connections.
	SshPort *int `json:"sshPort,omitempty"`

	// VirtualMachineSize: Virtual Machine size
	VirtualMachineSize *string `json:"virtualMachineSize,omitempty"`
}

// +kubebuilder:validation:Enum={"DenseProd","DevTest","FastProd"}
type AKS_Properties_ClusterPurpose_ARM string

const (
	AKS_Properties_ClusterPurpose_ARM_DenseProd = AKS_Properties_ClusterPurpose_ARM("DenseProd")
	AKS_Properties_ClusterPurpose_ARM_DevTest   = AKS_Properties_ClusterPurpose_ARM("DevTest")
	AKS_Properties_ClusterPurpose_ARM_FastProd  = AKS_Properties_ClusterPurpose_ARM("FastProd")
)

// Mapping from string to AKS_Properties_ClusterPurpose_ARM
var aKS_Properties_ClusterPurpose_ARM_Values = map[string]AKS_Properties_ClusterPurpose_ARM{
	"denseprod": AKS_Properties_ClusterPurpose_ARM_DenseProd,
	"devtest":   AKS_Properties_ClusterPurpose_ARM_DevTest,
	"fastprod":  AKS_Properties_ClusterPurpose_ARM_FastProd,
}

// +kubebuilder:validation:Enum={"InternalLoadBalancer","PublicIp"}
type AKS_Properties_LoadBalancerType_ARM string

const (
	AKS_Properties_LoadBalancerType_ARM_InternalLoadBalancer = AKS_Properties_LoadBalancerType_ARM("InternalLoadBalancer")
	AKS_Properties_LoadBalancerType_ARM_PublicIp             = AKS_Properties_LoadBalancerType_ARM("PublicIp")
)

// Mapping from string to AKS_Properties_LoadBalancerType_ARM
var aKS_Properties_LoadBalancerType_ARM_Values = map[string]AKS_Properties_LoadBalancerType_ARM{
	"internalloadbalancer": AKS_Properties_LoadBalancerType_ARM_InternalLoadBalancer,
	"publicip":             AKS_Properties_LoadBalancerType_ARM_PublicIp,
}

// Advance configuration for AKS networking
type AksNetworkingConfiguration_ARM struct {
	// DnsServiceIP: An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address
	// range specified in serviceCidr.
	DnsServiceIP *string `json:"dnsServiceIP,omitempty"`

	// DockerBridgeCidr: A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP
	// ranges or the Kubernetes service address range.
	DockerBridgeCidr *string `json:"dockerBridgeCidr,omitempty"`

	// ServiceCidr: A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP
	// ranges.
	ServiceCidr *string `json:"serviceCidr,omitempty"`
	SubnetId    *string `json:"subnetId,omitempty"`
}

// +kubebuilder:validation:Enum={"Linux","Windows"}
type AmlComputeProperties_OsType_ARM string

const (
	AmlComputeProperties_OsType_ARM_Linux   = AmlComputeProperties_OsType_ARM("Linux")
	AmlComputeProperties_OsType_ARM_Windows = AmlComputeProperties_OsType_ARM("Windows")
)

// Mapping from string to AmlComputeProperties_OsType_ARM
var amlComputeProperties_OsType_ARM_Values = map[string]AmlComputeProperties_OsType_ARM{
	"linux":   AmlComputeProperties_OsType_ARM_Linux,
	"windows": AmlComputeProperties_OsType_ARM_Windows,
}

// +kubebuilder:validation:Enum={"Disabled","Enabled","NotSpecified"}
type AmlComputeProperties_RemoteLoginPortPublicAccess_ARM string

const (
	AmlComputeProperties_RemoteLoginPortPublicAccess_ARM_Disabled     = AmlComputeProperties_RemoteLoginPortPublicAccess_ARM("Disabled")
	AmlComputeProperties_RemoteLoginPortPublicAccess_ARM_Enabled      = AmlComputeProperties_RemoteLoginPortPublicAccess_ARM("Enabled")
	AmlComputeProperties_RemoteLoginPortPublicAccess_ARM_NotSpecified = AmlComputeProperties_RemoteLoginPortPublicAccess_ARM("NotSpecified")
)

// Mapping from string to AmlComputeProperties_RemoteLoginPortPublicAccess_ARM
var amlComputeProperties_RemoteLoginPortPublicAccess_ARM_Values = map[string]AmlComputeProperties_RemoteLoginPortPublicAccess_ARM{
	"disabled":     AmlComputeProperties_RemoteLoginPortPublicAccess_ARM_Disabled,
	"enabled":      AmlComputeProperties_RemoteLoginPortPublicAccess_ARM_Enabled,
	"notspecified": AmlComputeProperties_RemoteLoginPortPublicAccess_ARM_NotSpecified,
}

// +kubebuilder:validation:Enum={"Dedicated","LowPriority"}
type AmlComputeProperties_VmPriority_ARM string

const (
	AmlComputeProperties_VmPriority_ARM_Dedicated   = AmlComputeProperties_VmPriority_ARM("Dedicated")
	AmlComputeProperties_VmPriority_ARM_LowPriority = AmlComputeProperties_VmPriority_ARM("LowPriority")
)

// Mapping from string to AmlComputeProperties_VmPriority_ARM
var amlComputeProperties_VmPriority_ARM_Values = map[string]AmlComputeProperties_VmPriority_ARM{
	"dedicated":   AmlComputeProperties_VmPriority_ARM_Dedicated,
	"lowpriority": AmlComputeProperties_VmPriority_ARM_LowPriority,
}

// Auto pause properties
type AutoPauseProperties_ARM struct {
	DelayInMinutes *int  `json:"delayInMinutes,omitempty"`
	Enabled        *bool `json:"enabled,omitempty"`
}

// Auto scale properties
type AutoScaleProperties_ARM struct {
	Enabled      *bool `json:"enabled,omitempty"`
	MaxNodeCount *int  `json:"maxNodeCount,omitempty"`
	MinNodeCount *int  `json:"minNodeCount,omitempty"`
}

// +kubebuilder:validation:Enum={"Personal","Shared"}
type ComputeInstanceProperties_ApplicationSharingPolicy_ARM string

const (
	ComputeInstanceProperties_ApplicationSharingPolicy_ARM_Personal = ComputeInstanceProperties_ApplicationSharingPolicy_ARM("Personal")
	ComputeInstanceProperties_ApplicationSharingPolicy_ARM_Shared   = ComputeInstanceProperties_ApplicationSharingPolicy_ARM("Shared")
)

// Mapping from string to ComputeInstanceProperties_ApplicationSharingPolicy_ARM
var computeInstanceProperties_ApplicationSharingPolicy_ARM_Values = map[string]ComputeInstanceProperties_ApplicationSharingPolicy_ARM{
	"personal": ComputeInstanceProperties_ApplicationSharingPolicy_ARM_Personal,
	"shared":   ComputeInstanceProperties_ApplicationSharingPolicy_ARM_Shared,
}

// +kubebuilder:validation:Enum={"personal"}
type ComputeInstanceProperties_ComputeInstanceAuthorizationType_ARM string

const ComputeInstanceProperties_ComputeInstanceAuthorizationType_ARM_Personal = ComputeInstanceProperties_ComputeInstanceAuthorizationType_ARM("personal")

// Mapping from string to ComputeInstanceProperties_ComputeInstanceAuthorizationType_ARM
var computeInstanceProperties_ComputeInstanceAuthorizationType_ARM_Values = map[string]ComputeInstanceProperties_ComputeInstanceAuthorizationType_ARM{
	"personal": ComputeInstanceProperties_ComputeInstanceAuthorizationType_ARM_Personal,
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettings_ARM struct {
	// AdminPublicKey: Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH
	// key pairs.
	AdminPublicKey *string `json:"adminPublicKey,omitempty"`

	// SshPublicAccess: State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is
	// closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the
	// VNet/subnet policy if applicable.
	SshPublicAccess *ComputeInstanceSshSettings_SshPublicAccess_ARM `json:"sshPublicAccess,omitempty"`
}

// Instance type schema.
type InstanceTypeSchema_ARM struct {
	// NodeSelector: Node Selector
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// Resources: Resource requests/limits for this instance type
	Resources *InstanceTypeSchema_Resources_ARM `json:"resources,omitempty"`
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettings_ARM struct {
	// AssignedUser: A user explicitly assigned to a personal compute instance.
	AssignedUser *AssignedUser_ARM `json:"assignedUser,omitempty"`
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceId_ARM struct {
	Id *string `json:"id,omitempty"`
}

// scale settings for AML Compute
type ScaleSettings_ARM struct {
	// MaxNodeCount: Max number of nodes to use
	MaxNodeCount *int `json:"maxNodeCount,omitempty"`

	// MinNodeCount: Min number of nodes to use
	MinNodeCount *int `json:"minNodeCount,omitempty"`

	// NodeIdleTimeBeforeScaleDown: Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
	NodeIdleTimeBeforeScaleDown *string `json:"nodeIdleTimeBeforeScaleDown,omitempty"`
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScripts_ARM struct {
	// Scripts: Customized setup scripts
	Scripts *ScriptsToExecute_ARM `json:"scripts,omitempty"`
}

// The ssl configuration for scoring
type SslConfiguration_ARM struct {
	// Cert: Cert data
	Cert *string `json:"cert,omitempty"`

	// Cname: CNAME of the cert
	Cname *string `json:"cname,omitempty"`

	// Key: Key data
	Key *string `json:"key,omitempty"`

	// LeafDomainLabel: Leaf domain label of public endpoint
	LeafDomainLabel *string `json:"leafDomainLabel,omitempty"`

	// OverwriteExistingDomain: Indicates whether to overwrite existing domain label.
	OverwriteExistingDomain *bool `json:"overwriteExistingDomain,omitempty"`

	// Status: Enable or disable ssl for scoring
	Status *SslConfiguration_Status_ARM `json:"status,omitempty"`
}

// Settings for user account that gets created on each on the nodes of a compute.
type UserAccountCredentials_ARM struct {
	// AdminUserName: Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName *string `json:"adminUserName,omitempty"`

	// AdminUserPassword: Password of the administrator user account.
	AdminUserPassword *string `json:"adminUserPassword,omitempty"`

	// AdminUserSshPublicKey: SSH public key of the administrator user account.
	AdminUserSshPublicKey *string `json:"adminUserSshPublicKey,omitempty"`
}

// Virtual Machine image for Windows AML Compute
type VirtualMachineImage_ARM struct {
	Id *string `json:"id,omitempty"`
}

// Admin credentials for virtual machine
type VirtualMachineSshCredentials_ARM struct {
	// Password: Password of admin account
	Password *string `json:"password,omitempty"`

	// PrivateKeyData: Private key data
	PrivateKeyData *string `json:"privateKeyData,omitempty"`

	// PublicKeyData: Public key data
	PublicKeyData *string `json:"publicKeyData,omitempty"`

	// Username: Username of admin account
	Username *string `json:"username,omitempty"`
}

// A user that can be assigned to a compute instance.
type AssignedUser_ARM struct {
	// ObjectId: User’s AAD Object Id.
	ObjectId *string `json:"objectId,omitempty"`

	// TenantId: User’s AAD Tenant Id.
	TenantId *string `json:"tenantId,omitempty"`
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ComputeInstanceSshSettings_SshPublicAccess_ARM string

const (
	ComputeInstanceSshSettings_SshPublicAccess_ARM_Disabled = ComputeInstanceSshSettings_SshPublicAccess_ARM("Disabled")
	ComputeInstanceSshSettings_SshPublicAccess_ARM_Enabled  = ComputeInstanceSshSettings_SshPublicAccess_ARM("Enabled")
)

// Mapping from string to ComputeInstanceSshSettings_SshPublicAccess_ARM
var computeInstanceSshSettings_SshPublicAccess_ARM_Values = map[string]ComputeInstanceSshSettings_SshPublicAccess_ARM{
	"disabled": ComputeInstanceSshSettings_SshPublicAccess_ARM_Disabled,
	"enabled":  ComputeInstanceSshSettings_SshPublicAccess_ARM_Enabled,
}

type InstanceTypeSchema_Resources_ARM struct {
	// Limits: Resource limits for this instance type
	Limits map[string]string `json:"limits,omitempty"`

	// Requests: Resource requests for this instance type
	Requests map[string]string `json:"requests,omitempty"`
}

// Customized setup scripts
type ScriptsToExecute_ARM struct {
	// CreationScript: Script that's run only once during provision of the compute.
	CreationScript *ScriptReference_ARM `json:"creationScript,omitempty"`

	// StartupScript: Script that's run every time the machine starts.
	StartupScript *ScriptReference_ARM `json:"startupScript,omitempty"`
}

// +kubebuilder:validation:Enum={"Auto","Disabled","Enabled"}
type SslConfiguration_Status_ARM string

const (
	SslConfiguration_Status_ARM_Auto     = SslConfiguration_Status_ARM("Auto")
	SslConfiguration_Status_ARM_Disabled = SslConfiguration_Status_ARM("Disabled")
	SslConfiguration_Status_ARM_Enabled  = SslConfiguration_Status_ARM("Enabled")
)

// Mapping from string to SslConfiguration_Status_ARM
var sslConfiguration_Status_ARM_Values = map[string]SslConfiguration_Status_ARM{
	"auto":     SslConfiguration_Status_ARM_Auto,
	"disabled": SslConfiguration_Status_ARM_Disabled,
	"enabled":  SslConfiguration_Status_ARM_Enabled,
}

// Script reference
type ScriptReference_ARM struct {
	// ScriptArguments: Optional command line arguments passed to the script to run.
	ScriptArguments *string `json:"scriptArguments,omitempty"`

	// ScriptData: The location of scripts in the mounted volume.
	ScriptData *string `json:"scriptData,omitempty"`

	// ScriptSource: The storage source of the script: inline, workspace.
	ScriptSource *string `json:"scriptSource,omitempty"`

	// Timeout: Optional time period passed to timeout command.
	Timeout *string `json:"timeout,omitempty"`
}
