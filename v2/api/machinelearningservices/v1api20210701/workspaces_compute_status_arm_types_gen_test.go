// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AKS_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AKS_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAKS_Properties_STATUS_ARM, AKS_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAKS_Properties_STATUS_ARM runs a test to see if a specific instance of AKS_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAKS_Properties_STATUS_ARM(subject AKS_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AKS_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AKS_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// AKS_Properties_STATUS_ARMGenerator()
var aks_Properties_STATUS_ARMGenerator gopter.Gen

// AKS_Properties_STATUS_ARMGenerator returns a generator of AKS_Properties_STATUS_ARM instances for property testing.
// We first initialize aks_Properties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AKS_Properties_STATUS_ARMGenerator() gopter.Gen {
	if aks_Properties_STATUS_ARMGenerator != nil {
		return aks_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAKS_Properties_STATUS_ARM(generators)
	aks_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AKS_Properties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAKS_Properties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAKS_Properties_STATUS_ARM(generators)
	aks_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AKS_Properties_STATUS_ARM{}), generators)

	return aks_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAKS_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAKS_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AgentCount"] = gen.PtrOf(gen.Int())
	gens["AgentVmSize"] = gen.PtrOf(gen.AlphaString())
	gens["ClusterFqdn"] = gen.PtrOf(gen.AlphaString())
	gens["ClusterPurpose"] = gen.PtrOf(gen.OneConstOf(AKS_Properties_ClusterPurpose_STATUS_ARM_DenseProd, AKS_Properties_ClusterPurpose_STATUS_ARM_DevTest, AKS_Properties_ClusterPurpose_STATUS_ARM_FastProd))
	gens["LoadBalancerSubnet"] = gen.PtrOf(gen.AlphaString())
	gens["LoadBalancerType"] = gen.PtrOf(gen.OneConstOf(AKS_Properties_LoadBalancerType_STATUS_ARM_InternalLoadBalancer, AKS_Properties_LoadBalancerType_STATUS_ARM_PublicIp))
}

// AddRelatedPropertyGeneratorsForAKS_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAKS_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AksNetworkingConfiguration"] = gen.PtrOf(AksNetworkingConfiguration_STATUS_ARMGenerator())
	gens["SslConfiguration"] = gen.PtrOf(SslConfiguration_STATUS_ARMGenerator())
	gens["SystemServices"] = gen.SliceOf(SystemService_STATUS_ARMGenerator())
}

func Test_AKS_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AKS_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAKS_STATUS_ARM, AKS_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAKS_STATUS_ARM runs a test to see if a specific instance of AKS_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAKS_STATUS_ARM(subject AKS_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AKS_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AKS_STATUS_ARM instances for property testing - lazily instantiated by AKS_STATUS_ARMGenerator()
var aks_STATUS_ARMGenerator gopter.Gen

// AKS_STATUS_ARMGenerator returns a generator of AKS_STATUS_ARM instances for property testing.
// We first initialize aks_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AKS_STATUS_ARMGenerator() gopter.Gen {
	if aks_STATUS_ARMGenerator != nil {
		return aks_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAKS_STATUS_ARM(generators)
	aks_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AKS_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAKS_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAKS_STATUS_ARM(generators)
	aks_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AKS_STATUS_ARM{}), generators)

	return aks_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAKS_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAKS_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(AKS_ComputeType_STATUS_ARM_AKS)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AKS_ProvisioningState_STATUS_ARM_Canceled,
		AKS_ProvisioningState_STATUS_ARM_Creating,
		AKS_ProvisioningState_STATUS_ARM_Deleting,
		AKS_ProvisioningState_STATUS_ARM_Failed,
		AKS_ProvisioningState_STATUS_ARM_Succeeded,
		AKS_ProvisioningState_STATUS_ARM_Unknown,
		AKS_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAKS_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAKS_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AKS_Properties_STATUS_ARMGenerator())
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_AksNetworkingConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AksNetworkingConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAksNetworkingConfiguration_STATUS_ARM, AksNetworkingConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAksNetworkingConfiguration_STATUS_ARM runs a test to see if a specific instance of AksNetworkingConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAksNetworkingConfiguration_STATUS_ARM(subject AksNetworkingConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AksNetworkingConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AksNetworkingConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// AksNetworkingConfiguration_STATUS_ARMGenerator()
var aksNetworkingConfiguration_STATUS_ARMGenerator gopter.Gen

// AksNetworkingConfiguration_STATUS_ARMGenerator returns a generator of AksNetworkingConfiguration_STATUS_ARM instances for property testing.
func AksNetworkingConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if aksNetworkingConfiguration_STATUS_ARMGenerator != nil {
		return aksNetworkingConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAksNetworkingConfiguration_STATUS_ARM(generators)
	aksNetworkingConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AksNetworkingConfiguration_STATUS_ARM{}), generators)

	return aksNetworkingConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAksNetworkingConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAksNetworkingConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DnsServiceIP"] = gen.PtrOf(gen.AlphaString())
	gens["DockerBridgeCidr"] = gen.PtrOf(gen.AlphaString())
	gens["ServiceCidr"] = gen.PtrOf(gen.AlphaString())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
}

func Test_AmlComputeProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AmlComputeProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAmlComputeProperties_STATUS_ARM, AmlComputeProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAmlComputeProperties_STATUS_ARM runs a test to see if a specific instance of AmlComputeProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAmlComputeProperties_STATUS_ARM(subject AmlComputeProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AmlComputeProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AmlComputeProperties_STATUS_ARM instances for property testing - lazily instantiated by
// AmlComputeProperties_STATUS_ARMGenerator()
var amlComputeProperties_STATUS_ARMGenerator gopter.Gen

// AmlComputeProperties_STATUS_ARMGenerator returns a generator of AmlComputeProperties_STATUS_ARM instances for property testing.
// We first initialize amlComputeProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AmlComputeProperties_STATUS_ARMGenerator() gopter.Gen {
	if amlComputeProperties_STATUS_ARMGenerator != nil {
		return amlComputeProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAmlComputeProperties_STATUS_ARM(generators)
	amlComputeProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AmlComputeProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAmlComputeProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAmlComputeProperties_STATUS_ARM(generators)
	amlComputeProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AmlComputeProperties_STATUS_ARM{}), generators)

	return amlComputeProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAmlComputeProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAmlComputeProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllocationState"] = gen.PtrOf(gen.OneConstOf(AmlComputeProperties_AllocationState_STATUS_ARM_Resizing, AmlComputeProperties_AllocationState_STATUS_ARM_Steady))
	gens["AllocationStateTransitionTime"] = gen.PtrOf(gen.AlphaString())
	gens["CurrentNodeCount"] = gen.PtrOf(gen.Int())
	gens["EnableNodePublicIp"] = gen.PtrOf(gen.Bool())
	gens["IsolatedNetwork"] = gen.PtrOf(gen.Bool())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(AmlComputeProperties_OsType_STATUS_ARM_Linux, AmlComputeProperties_OsType_STATUS_ARM_Windows))
	gens["RemoteLoginPortPublicAccess"] = gen.PtrOf(gen.OneConstOf(AmlComputeProperties_RemoteLoginPortPublicAccess_STATUS_ARM_Disabled, AmlComputeProperties_RemoteLoginPortPublicAccess_STATUS_ARM_Enabled, AmlComputeProperties_RemoteLoginPortPublicAccess_STATUS_ARM_NotSpecified))
	gens["TargetNodeCount"] = gen.PtrOf(gen.Int())
	gens["VmPriority"] = gen.PtrOf(gen.OneConstOf(AmlComputeProperties_VmPriority_STATUS_ARM_Dedicated, AmlComputeProperties_VmPriority_STATUS_ARM_LowPriority))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAmlComputeProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAmlComputeProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Errors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
	gens["NodeStateCounts"] = gen.PtrOf(NodeStateCounts_STATUS_ARMGenerator())
	gens["ScaleSettings"] = gen.PtrOf(ScaleSettings_STATUS_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(ResourceId_STATUS_ARMGenerator())
	gens["UserAccountCredentials"] = gen.PtrOf(UserAccountCredentials_STATUS_ARMGenerator())
	gens["VirtualMachineImage"] = gen.PtrOf(VirtualMachineImage_STATUS_ARMGenerator())
}

func Test_AmlCompute_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AmlCompute_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAmlCompute_STATUS_ARM, AmlCompute_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAmlCompute_STATUS_ARM runs a test to see if a specific instance of AmlCompute_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAmlCompute_STATUS_ARM(subject AmlCompute_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AmlCompute_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AmlCompute_STATUS_ARM instances for property testing - lazily instantiated by
// AmlCompute_STATUS_ARMGenerator()
var amlCompute_STATUS_ARMGenerator gopter.Gen

// AmlCompute_STATUS_ARMGenerator returns a generator of AmlCompute_STATUS_ARM instances for property testing.
// We first initialize amlCompute_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AmlCompute_STATUS_ARMGenerator() gopter.Gen {
	if amlCompute_STATUS_ARMGenerator != nil {
		return amlCompute_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAmlCompute_STATUS_ARM(generators)
	amlCompute_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AmlCompute_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAmlCompute_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAmlCompute_STATUS_ARM(generators)
	amlCompute_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AmlCompute_STATUS_ARM{}), generators)

	return amlCompute_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAmlCompute_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAmlCompute_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(AmlCompute_ComputeType_STATUS_ARM_AmlCompute)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AmlCompute_ProvisioningState_STATUS_ARM_Canceled,
		AmlCompute_ProvisioningState_STATUS_ARM_Creating,
		AmlCompute_ProvisioningState_STATUS_ARM_Deleting,
		AmlCompute_ProvisioningState_STATUS_ARM_Failed,
		AmlCompute_ProvisioningState_STATUS_ARM_Succeeded,
		AmlCompute_ProvisioningState_STATUS_ARM_Unknown,
		AmlCompute_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAmlCompute_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAmlCompute_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AmlComputeProperties_STATUS_ARMGenerator())
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_AssignedUser_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AssignedUser_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAssignedUser_STATUS_ARM, AssignedUser_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAssignedUser_STATUS_ARM runs a test to see if a specific instance of AssignedUser_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAssignedUser_STATUS_ARM(subject AssignedUser_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AssignedUser_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AssignedUser_STATUS_ARM instances for property testing - lazily instantiated by
// AssignedUser_STATUS_ARMGenerator()
var assignedUser_STATUS_ARMGenerator gopter.Gen

// AssignedUser_STATUS_ARMGenerator returns a generator of AssignedUser_STATUS_ARM instances for property testing.
func AssignedUser_STATUS_ARMGenerator() gopter.Gen {
	if assignedUser_STATUS_ARMGenerator != nil {
		return assignedUser_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAssignedUser_STATUS_ARM(generators)
	assignedUser_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AssignedUser_STATUS_ARM{}), generators)

	return assignedUser_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAssignedUser_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAssignedUser_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

func Test_AutoPauseProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoPauseProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoPauseProperties_STATUS_ARM, AutoPauseProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoPauseProperties_STATUS_ARM runs a test to see if a specific instance of AutoPauseProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoPauseProperties_STATUS_ARM(subject AutoPauseProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoPauseProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoPauseProperties_STATUS_ARM instances for property testing - lazily instantiated by
// AutoPauseProperties_STATUS_ARMGenerator()
var autoPauseProperties_STATUS_ARMGenerator gopter.Gen

// AutoPauseProperties_STATUS_ARMGenerator returns a generator of AutoPauseProperties_STATUS_ARM instances for property testing.
func AutoPauseProperties_STATUS_ARMGenerator() gopter.Gen {
	if autoPauseProperties_STATUS_ARMGenerator != nil {
		return autoPauseProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoPauseProperties_STATUS_ARM(generators)
	autoPauseProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoPauseProperties_STATUS_ARM{}), generators)

	return autoPauseProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoPauseProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoPauseProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DelayInMinutes"] = gen.PtrOf(gen.Int())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutoScaleProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoScaleProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoScaleProperties_STATUS_ARM, AutoScaleProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoScaleProperties_STATUS_ARM runs a test to see if a specific instance of AutoScaleProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoScaleProperties_STATUS_ARM(subject AutoScaleProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoScaleProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoScaleProperties_STATUS_ARM instances for property testing - lazily instantiated by
// AutoScaleProperties_STATUS_ARMGenerator()
var autoScaleProperties_STATUS_ARMGenerator gopter.Gen

// AutoScaleProperties_STATUS_ARMGenerator returns a generator of AutoScaleProperties_STATUS_ARM instances for property testing.
func AutoScaleProperties_STATUS_ARMGenerator() gopter.Gen {
	if autoScaleProperties_STATUS_ARMGenerator != nil {
		return autoScaleProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoScaleProperties_STATUS_ARM(generators)
	autoScaleProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoScaleProperties_STATUS_ARM{}), generators)

	return autoScaleProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoScaleProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoScaleProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["MaxNodeCount"] = gen.PtrOf(gen.Int())
	gens["MinNodeCount"] = gen.PtrOf(gen.Int())
}

func Test_ComputeInstanceApplication_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeInstanceApplication_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeInstanceApplication_STATUS_ARM, ComputeInstanceApplication_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeInstanceApplication_STATUS_ARM runs a test to see if a specific instance of ComputeInstanceApplication_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeInstanceApplication_STATUS_ARM(subject ComputeInstanceApplication_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeInstanceApplication_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeInstanceApplication_STATUS_ARM instances for property testing - lazily instantiated by
// ComputeInstanceApplication_STATUS_ARMGenerator()
var computeInstanceApplication_STATUS_ARMGenerator gopter.Gen

// ComputeInstanceApplication_STATUS_ARMGenerator returns a generator of ComputeInstanceApplication_STATUS_ARM instances for property testing.
func ComputeInstanceApplication_STATUS_ARMGenerator() gopter.Gen {
	if computeInstanceApplication_STATUS_ARMGenerator != nil {
		return computeInstanceApplication_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceApplication_STATUS_ARM(generators)
	computeInstanceApplication_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceApplication_STATUS_ARM{}), generators)

	return computeInstanceApplication_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeInstanceApplication_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeInstanceApplication_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DisplayName"] = gen.PtrOf(gen.AlphaString())
	gens["EndpointUri"] = gen.PtrOf(gen.AlphaString())
}

func Test_ComputeInstanceConnectivityEndpoints_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeInstanceConnectivityEndpoints_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeInstanceConnectivityEndpoints_STATUS_ARM, ComputeInstanceConnectivityEndpoints_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeInstanceConnectivityEndpoints_STATUS_ARM runs a test to see if a specific instance of ComputeInstanceConnectivityEndpoints_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeInstanceConnectivityEndpoints_STATUS_ARM(subject ComputeInstanceConnectivityEndpoints_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeInstanceConnectivityEndpoints_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeInstanceConnectivityEndpoints_STATUS_ARM instances for property testing - lazily instantiated by
// ComputeInstanceConnectivityEndpoints_STATUS_ARMGenerator()
var computeInstanceConnectivityEndpoints_STATUS_ARMGenerator gopter.Gen

// ComputeInstanceConnectivityEndpoints_STATUS_ARMGenerator returns a generator of ComputeInstanceConnectivityEndpoints_STATUS_ARM instances for property testing.
func ComputeInstanceConnectivityEndpoints_STATUS_ARMGenerator() gopter.Gen {
	if computeInstanceConnectivityEndpoints_STATUS_ARMGenerator != nil {
		return computeInstanceConnectivityEndpoints_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceConnectivityEndpoints_STATUS_ARM(generators)
	computeInstanceConnectivityEndpoints_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceConnectivityEndpoints_STATUS_ARM{}), generators)

	return computeInstanceConnectivityEndpoints_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeInstanceConnectivityEndpoints_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeInstanceConnectivityEndpoints_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateIpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["PublicIpAddress"] = gen.PtrOf(gen.AlphaString())
}

func Test_ComputeInstanceCreatedBy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeInstanceCreatedBy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeInstanceCreatedBy_STATUS_ARM, ComputeInstanceCreatedBy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeInstanceCreatedBy_STATUS_ARM runs a test to see if a specific instance of ComputeInstanceCreatedBy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeInstanceCreatedBy_STATUS_ARM(subject ComputeInstanceCreatedBy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeInstanceCreatedBy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeInstanceCreatedBy_STATUS_ARM instances for property testing - lazily instantiated by
// ComputeInstanceCreatedBy_STATUS_ARMGenerator()
var computeInstanceCreatedBy_STATUS_ARMGenerator gopter.Gen

// ComputeInstanceCreatedBy_STATUS_ARMGenerator returns a generator of ComputeInstanceCreatedBy_STATUS_ARM instances for property testing.
func ComputeInstanceCreatedBy_STATUS_ARMGenerator() gopter.Gen {
	if computeInstanceCreatedBy_STATUS_ARMGenerator != nil {
		return computeInstanceCreatedBy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceCreatedBy_STATUS_ARM(generators)
	computeInstanceCreatedBy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceCreatedBy_STATUS_ARM{}), generators)

	return computeInstanceCreatedBy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeInstanceCreatedBy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeInstanceCreatedBy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserId"] = gen.PtrOf(gen.AlphaString())
	gens["UserName"] = gen.PtrOf(gen.AlphaString())
	gens["UserOrgId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ComputeInstanceLastOperation_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeInstanceLastOperation_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeInstanceLastOperation_STATUS_ARM, ComputeInstanceLastOperation_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeInstanceLastOperation_STATUS_ARM runs a test to see if a specific instance of ComputeInstanceLastOperation_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeInstanceLastOperation_STATUS_ARM(subject ComputeInstanceLastOperation_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeInstanceLastOperation_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeInstanceLastOperation_STATUS_ARM instances for property testing - lazily instantiated by
// ComputeInstanceLastOperation_STATUS_ARMGenerator()
var computeInstanceLastOperation_STATUS_ARMGenerator gopter.Gen

// ComputeInstanceLastOperation_STATUS_ARMGenerator returns a generator of ComputeInstanceLastOperation_STATUS_ARM instances for property testing.
func ComputeInstanceLastOperation_STATUS_ARMGenerator() gopter.Gen {
	if computeInstanceLastOperation_STATUS_ARMGenerator != nil {
		return computeInstanceLastOperation_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceLastOperation_STATUS_ARM(generators)
	computeInstanceLastOperation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceLastOperation_STATUS_ARM{}), generators)

	return computeInstanceLastOperation_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeInstanceLastOperation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeInstanceLastOperation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OperationName"] = gen.PtrOf(gen.OneConstOf(
		ComputeInstanceLastOperation_OperationName_STATUS_ARM_Create,
		ComputeInstanceLastOperation_OperationName_STATUS_ARM_Delete,
		ComputeInstanceLastOperation_OperationName_STATUS_ARM_Reimage,
		ComputeInstanceLastOperation_OperationName_STATUS_ARM_Restart,
		ComputeInstanceLastOperation_OperationName_STATUS_ARM_Start,
		ComputeInstanceLastOperation_OperationName_STATUS_ARM_Stop))
	gens["OperationStatus"] = gen.PtrOf(gen.OneConstOf(
		ComputeInstanceLastOperation_OperationStatus_STATUS_ARM_CreateFailed,
		ComputeInstanceLastOperation_OperationStatus_STATUS_ARM_DeleteFailed,
		ComputeInstanceLastOperation_OperationStatus_STATUS_ARM_InProgress,
		ComputeInstanceLastOperation_OperationStatus_STATUS_ARM_ReimageFailed,
		ComputeInstanceLastOperation_OperationStatus_STATUS_ARM_RestartFailed,
		ComputeInstanceLastOperation_OperationStatus_STATUS_ARM_StartFailed,
		ComputeInstanceLastOperation_OperationStatus_STATUS_ARM_StopFailed,
		ComputeInstanceLastOperation_OperationStatus_STATUS_ARM_Succeeded))
	gens["OperationTime"] = gen.PtrOf(gen.AlphaString())
}

func Test_ComputeInstanceProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeInstanceProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeInstanceProperties_STATUS_ARM, ComputeInstanceProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeInstanceProperties_STATUS_ARM runs a test to see if a specific instance of ComputeInstanceProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeInstanceProperties_STATUS_ARM(subject ComputeInstanceProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeInstanceProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeInstanceProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ComputeInstanceProperties_STATUS_ARMGenerator()
var computeInstanceProperties_STATUS_ARMGenerator gopter.Gen

// ComputeInstanceProperties_STATUS_ARMGenerator returns a generator of ComputeInstanceProperties_STATUS_ARM instances for property testing.
// We first initialize computeInstanceProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeInstanceProperties_STATUS_ARMGenerator() gopter.Gen {
	if computeInstanceProperties_STATUS_ARMGenerator != nil {
		return computeInstanceProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceProperties_STATUS_ARM(generators)
	computeInstanceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForComputeInstanceProperties_STATUS_ARM(generators)
	computeInstanceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceProperties_STATUS_ARM{}), generators)

	return computeInstanceProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeInstanceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeInstanceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApplicationSharingPolicy"] = gen.PtrOf(gen.OneConstOf(ComputeInstanceProperties_ApplicationSharingPolicy_STATUS_ARM_Personal, ComputeInstanceProperties_ApplicationSharingPolicy_STATUS_ARM_Shared))
	gens["ComputeInstanceAuthorizationType"] = gen.PtrOf(gen.OneConstOf(ComputeInstanceProperties_ComputeInstanceAuthorizationType_STATUS_ARM_Personal))
	gens["State"] = gen.PtrOf(gen.OneConstOf(
		ComputeInstanceState_STATUS_ARM_CreateFailed,
		ComputeInstanceState_STATUS_ARM_Creating,
		ComputeInstanceState_STATUS_ARM_Deleting,
		ComputeInstanceState_STATUS_ARM_JobRunning,
		ComputeInstanceState_STATUS_ARM_Restarting,
		ComputeInstanceState_STATUS_ARM_Running,
		ComputeInstanceState_STATUS_ARM_SettingUp,
		ComputeInstanceState_STATUS_ARM_SetupFailed,
		ComputeInstanceState_STATUS_ARM_Starting,
		ComputeInstanceState_STATUS_ARM_Stopped,
		ComputeInstanceState_STATUS_ARM_Stopping,
		ComputeInstanceState_STATUS_ARM_Unknown,
		ComputeInstanceState_STATUS_ARM_Unusable,
		ComputeInstanceState_STATUS_ARM_UserSettingUp,
		ComputeInstanceState_STATUS_ARM_UserSetupFailed))
	gens["VmSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForComputeInstanceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeInstanceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Applications"] = gen.SliceOf(ComputeInstanceApplication_STATUS_ARMGenerator())
	gens["ConnectivityEndpoints"] = gen.PtrOf(ComputeInstanceConnectivityEndpoints_STATUS_ARMGenerator())
	gens["CreatedBy"] = gen.PtrOf(ComputeInstanceCreatedBy_STATUS_ARMGenerator())
	gens["Errors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
	gens["LastOperation"] = gen.PtrOf(ComputeInstanceLastOperation_STATUS_ARMGenerator())
	gens["PersonalComputeInstanceSettings"] = gen.PtrOf(PersonalComputeInstanceSettings_STATUS_ARMGenerator())
	gens["SetupScripts"] = gen.PtrOf(SetupScripts_STATUS_ARMGenerator())
	gens["SshSettings"] = gen.PtrOf(ComputeInstanceSshSettings_STATUS_ARMGenerator())
	gens["Subnet"] = gen.PtrOf(ResourceId_STATUS_ARMGenerator())
}

func Test_ComputeInstanceSshSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeInstanceSshSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeInstanceSshSettings_STATUS_ARM, ComputeInstanceSshSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeInstanceSshSettings_STATUS_ARM runs a test to see if a specific instance of ComputeInstanceSshSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeInstanceSshSettings_STATUS_ARM(subject ComputeInstanceSshSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeInstanceSshSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeInstanceSshSettings_STATUS_ARM instances for property testing - lazily instantiated by
// ComputeInstanceSshSettings_STATUS_ARMGenerator()
var computeInstanceSshSettings_STATUS_ARMGenerator gopter.Gen

// ComputeInstanceSshSettings_STATUS_ARMGenerator returns a generator of ComputeInstanceSshSettings_STATUS_ARM instances for property testing.
func ComputeInstanceSshSettings_STATUS_ARMGenerator() gopter.Gen {
	if computeInstanceSshSettings_STATUS_ARMGenerator != nil {
		return computeInstanceSshSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstanceSshSettings_STATUS_ARM(generators)
	computeInstanceSshSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeInstanceSshSettings_STATUS_ARM{}), generators)

	return computeInstanceSshSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeInstanceSshSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeInstanceSshSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdminPublicKey"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUserName"] = gen.PtrOf(gen.AlphaString())
	gens["SshPort"] = gen.PtrOf(gen.Int())
	gens["SshPublicAccess"] = gen.PtrOf(gen.OneConstOf(ComputeInstanceSshSettings_SshPublicAccess_STATUS_ARM_Disabled, ComputeInstanceSshSettings_SshPublicAccess_STATUS_ARM_Enabled))
}

func Test_ComputeInstance_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ComputeInstance_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForComputeInstance_STATUS_ARM, ComputeInstance_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForComputeInstance_STATUS_ARM runs a test to see if a specific instance of ComputeInstance_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForComputeInstance_STATUS_ARM(subject ComputeInstance_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ComputeInstance_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ComputeInstance_STATUS_ARM instances for property testing - lazily instantiated by
// ComputeInstance_STATUS_ARMGenerator()
var computeInstance_STATUS_ARMGenerator gopter.Gen

// ComputeInstance_STATUS_ARMGenerator returns a generator of ComputeInstance_STATUS_ARM instances for property testing.
// We first initialize computeInstance_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ComputeInstance_STATUS_ARMGenerator() gopter.Gen {
	if computeInstance_STATUS_ARMGenerator != nil {
		return computeInstance_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstance_STATUS_ARM(generators)
	computeInstance_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeInstance_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForComputeInstance_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForComputeInstance_STATUS_ARM(generators)
	computeInstance_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ComputeInstance_STATUS_ARM{}), generators)

	return computeInstance_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForComputeInstance_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForComputeInstance_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(ComputeInstance_ComputeType_STATUS_ARM_ComputeInstance)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ComputeInstance_ProvisioningState_STATUS_ARM_Canceled,
		ComputeInstance_ProvisioningState_STATUS_ARM_Creating,
		ComputeInstance_ProvisioningState_STATUS_ARM_Deleting,
		ComputeInstance_ProvisioningState_STATUS_ARM_Failed,
		ComputeInstance_ProvisioningState_STATUS_ARM_Succeeded,
		ComputeInstance_ProvisioningState_STATUS_ARM_Unknown,
		ComputeInstance_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForComputeInstance_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForComputeInstance_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ComputeInstanceProperties_STATUS_ARMGenerator())
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_Compute_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Compute_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCompute_STATUS_ARM, Compute_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCompute_STATUS_ARM runs a test to see if a specific instance of Compute_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCompute_STATUS_ARM(subject Compute_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Compute_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Compute_STATUS_ARM instances for property testing - lazily instantiated by Compute_STATUS_ARMGenerator()
var compute_STATUS_ARMGenerator gopter.Gen

// Compute_STATUS_ARMGenerator returns a generator of Compute_STATUS_ARM instances for property testing.
func Compute_STATUS_ARMGenerator() gopter.Gen {
	if compute_STATUS_ARMGenerator != nil {
		return compute_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForCompute_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(Compute_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	compute_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return compute_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForCompute_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCompute_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AKS"] = AKS_STATUS_ARMGenerator().Map(func(it AKS_STATUS_ARM) *AKS_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["AmlCompute"] = AmlCompute_STATUS_ARMGenerator().Map(func(it AmlCompute_STATUS_ARM) *AmlCompute_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["ComputeInstance"] = ComputeInstance_STATUS_ARMGenerator().Map(func(it ComputeInstance_STATUS_ARM) *ComputeInstance_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["DataFactory"] = DataFactory_STATUS_ARMGenerator().Map(func(it DataFactory_STATUS_ARM) *DataFactory_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["DataLakeAnalytics"] = DataLakeAnalytics_STATUS_ARMGenerator().Map(func(it DataLakeAnalytics_STATUS_ARM) *DataLakeAnalytics_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["Databricks"] = Databricks_STATUS_ARMGenerator().Map(func(it Databricks_STATUS_ARM) *Databricks_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["HDInsight"] = HDInsight_STATUS_ARMGenerator().Map(func(it HDInsight_STATUS_ARM) *HDInsight_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["Kubernetes"] = Kubernetes_STATUS_ARMGenerator().Map(func(it Kubernetes_STATUS_ARM) *Kubernetes_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["SynapseSpark"] = SynapseSpark_STATUS_ARMGenerator().Map(func(it SynapseSpark_STATUS_ARM) *SynapseSpark_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["VirtualMachine"] = VirtualMachine_STATUS_ARMGenerator().Map(func(it VirtualMachine_STATUS_ARM) *VirtualMachine_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_DataFactory_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataFactory_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataFactory_STATUS_ARM, DataFactory_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataFactory_STATUS_ARM runs a test to see if a specific instance of DataFactory_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDataFactory_STATUS_ARM(subject DataFactory_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataFactory_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataFactory_STATUS_ARM instances for property testing - lazily instantiated by
// DataFactory_STATUS_ARMGenerator()
var dataFactory_STATUS_ARMGenerator gopter.Gen

// DataFactory_STATUS_ARMGenerator returns a generator of DataFactory_STATUS_ARM instances for property testing.
// We first initialize dataFactory_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DataFactory_STATUS_ARMGenerator() gopter.Gen {
	if dataFactory_STATUS_ARMGenerator != nil {
		return dataFactory_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataFactory_STATUS_ARM(generators)
	dataFactory_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DataFactory_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataFactory_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDataFactory_STATUS_ARM(generators)
	dataFactory_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DataFactory_STATUS_ARM{}), generators)

	return dataFactory_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDataFactory_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataFactory_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(DataFactory_ComputeType_STATUS_ARM_DataFactory)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		DataFactory_ProvisioningState_STATUS_ARM_Canceled,
		DataFactory_ProvisioningState_STATUS_ARM_Creating,
		DataFactory_ProvisioningState_STATUS_ARM_Deleting,
		DataFactory_ProvisioningState_STATUS_ARM_Failed,
		DataFactory_ProvisioningState_STATUS_ARM_Succeeded,
		DataFactory_ProvisioningState_STATUS_ARM_Unknown,
		DataFactory_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDataFactory_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataFactory_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_DataLakeAnalytics_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataLakeAnalytics_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataLakeAnalytics_Properties_STATUS_ARM, DataLakeAnalytics_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataLakeAnalytics_Properties_STATUS_ARM runs a test to see if a specific instance of DataLakeAnalytics_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDataLakeAnalytics_Properties_STATUS_ARM(subject DataLakeAnalytics_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataLakeAnalytics_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataLakeAnalytics_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// DataLakeAnalytics_Properties_STATUS_ARMGenerator()
var dataLakeAnalytics_Properties_STATUS_ARMGenerator gopter.Gen

// DataLakeAnalytics_Properties_STATUS_ARMGenerator returns a generator of DataLakeAnalytics_Properties_STATUS_ARM instances for property testing.
func DataLakeAnalytics_Properties_STATUS_ARMGenerator() gopter.Gen {
	if dataLakeAnalytics_Properties_STATUS_ARMGenerator != nil {
		return dataLakeAnalytics_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataLakeAnalytics_Properties_STATUS_ARM(generators)
	dataLakeAnalytics_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DataLakeAnalytics_Properties_STATUS_ARM{}), generators)

	return dataLakeAnalytics_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDataLakeAnalytics_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataLakeAnalytics_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DataLakeStoreAccountName"] = gen.PtrOf(gen.AlphaString())
}

func Test_DataLakeAnalytics_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DataLakeAnalytics_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDataLakeAnalytics_STATUS_ARM, DataLakeAnalytics_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDataLakeAnalytics_STATUS_ARM runs a test to see if a specific instance of DataLakeAnalytics_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDataLakeAnalytics_STATUS_ARM(subject DataLakeAnalytics_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DataLakeAnalytics_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DataLakeAnalytics_STATUS_ARM instances for property testing - lazily instantiated by
// DataLakeAnalytics_STATUS_ARMGenerator()
var dataLakeAnalytics_STATUS_ARMGenerator gopter.Gen

// DataLakeAnalytics_STATUS_ARMGenerator returns a generator of DataLakeAnalytics_STATUS_ARM instances for property testing.
// We first initialize dataLakeAnalytics_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DataLakeAnalytics_STATUS_ARMGenerator() gopter.Gen {
	if dataLakeAnalytics_STATUS_ARMGenerator != nil {
		return dataLakeAnalytics_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataLakeAnalytics_STATUS_ARM(generators)
	dataLakeAnalytics_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DataLakeAnalytics_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDataLakeAnalytics_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDataLakeAnalytics_STATUS_ARM(generators)
	dataLakeAnalytics_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DataLakeAnalytics_STATUS_ARM{}), generators)

	return dataLakeAnalytics_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDataLakeAnalytics_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDataLakeAnalytics_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(DataLakeAnalytics_ComputeType_STATUS_ARM_DataLakeAnalytics)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		DataLakeAnalytics_ProvisioningState_STATUS_ARM_Canceled,
		DataLakeAnalytics_ProvisioningState_STATUS_ARM_Creating,
		DataLakeAnalytics_ProvisioningState_STATUS_ARM_Deleting,
		DataLakeAnalytics_ProvisioningState_STATUS_ARM_Failed,
		DataLakeAnalytics_ProvisioningState_STATUS_ARM_Succeeded,
		DataLakeAnalytics_ProvisioningState_STATUS_ARM_Unknown,
		DataLakeAnalytics_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDataLakeAnalytics_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDataLakeAnalytics_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DataLakeAnalytics_Properties_STATUS_ARMGenerator())
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_DatabricksProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabricksProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabricksProperties_STATUS_ARM, DatabricksProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabricksProperties_STATUS_ARM runs a test to see if a specific instance of DatabricksProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabricksProperties_STATUS_ARM(subject DatabricksProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabricksProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabricksProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DatabricksProperties_STATUS_ARMGenerator()
var databricksProperties_STATUS_ARMGenerator gopter.Gen

// DatabricksProperties_STATUS_ARMGenerator returns a generator of DatabricksProperties_STATUS_ARM instances for property testing.
func DatabricksProperties_STATUS_ARMGenerator() gopter.Gen {
	if databricksProperties_STATUS_ARMGenerator != nil {
		return databricksProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabricksProperties_STATUS_ARM(generators)
	databricksProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabricksProperties_STATUS_ARM{}), generators)

	return databricksProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabricksProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabricksProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["WorkspaceUrl"] = gen.PtrOf(gen.AlphaString())
}

func Test_Databricks_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Databricks_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabricks_STATUS_ARM, Databricks_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabricks_STATUS_ARM runs a test to see if a specific instance of Databricks_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabricks_STATUS_ARM(subject Databricks_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Databricks_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Databricks_STATUS_ARM instances for property testing - lazily instantiated by
// Databricks_STATUS_ARMGenerator()
var databricks_STATUS_ARMGenerator gopter.Gen

// Databricks_STATUS_ARMGenerator returns a generator of Databricks_STATUS_ARM instances for property testing.
// We first initialize databricks_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Databricks_STATUS_ARMGenerator() gopter.Gen {
	if databricks_STATUS_ARMGenerator != nil {
		return databricks_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabricks_STATUS_ARM(generators)
	databricks_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Databricks_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabricks_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabricks_STATUS_ARM(generators)
	databricks_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Databricks_STATUS_ARM{}), generators)

	return databricks_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabricks_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabricks_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(Databricks_ComputeType_STATUS_ARM_Databricks)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		Databricks_ProvisioningState_STATUS_ARM_Canceled,
		Databricks_ProvisioningState_STATUS_ARM_Creating,
		Databricks_ProvisioningState_STATUS_ARM_Deleting,
		Databricks_ProvisioningState_STATUS_ARM_Failed,
		Databricks_ProvisioningState_STATUS_ARM_Succeeded,
		Databricks_ProvisioningState_STATUS_ARM_Unknown,
		Databricks_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabricks_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabricks_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DatabricksProperties_STATUS_ARMGenerator())
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_ErrorAdditionalInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorAdditionalInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorAdditionalInfo_STATUS_ARM, ErrorAdditionalInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorAdditionalInfo_STATUS_ARM runs a test to see if a specific instance of ErrorAdditionalInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorAdditionalInfo_STATUS_ARM(subject ErrorAdditionalInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorAdditionalInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorAdditionalInfo_STATUS_ARM instances for property testing - lazily instantiated by
// ErrorAdditionalInfo_STATUS_ARMGenerator()
var errorAdditionalInfo_STATUS_ARMGenerator gopter.Gen

// ErrorAdditionalInfo_STATUS_ARMGenerator returns a generator of ErrorAdditionalInfo_STATUS_ARM instances for property testing.
func ErrorAdditionalInfo_STATUS_ARMGenerator() gopter.Gen {
	if errorAdditionalInfo_STATUS_ARMGenerator != nil {
		return errorAdditionalInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorAdditionalInfo_STATUS_ARM(generators)
	errorAdditionalInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorAdditionalInfo_STATUS_ARM{}), generators)

	return errorAdditionalInfo_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForErrorAdditionalInfo_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorAdditionalInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ErrorDetail_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorDetail_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorDetail_STATUS_ARM, ErrorDetail_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorDetail_STATUS_ARM runs a test to see if a specific instance of ErrorDetail_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorDetail_STATUS_ARM(subject ErrorDetail_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorDetail_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorDetail_STATUS_ARM instances for property testing - lazily instantiated by
// ErrorDetail_STATUS_ARMGenerator()
var errorDetail_STATUS_ARMGenerator gopter.Gen

// ErrorDetail_STATUS_ARMGenerator returns a generator of ErrorDetail_STATUS_ARM instances for property testing.
// We first initialize errorDetail_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ErrorDetail_STATUS_ARMGenerator() gopter.Gen {
	if errorDetail_STATUS_ARMGenerator != nil {
		return errorDetail_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetail_STATUS_ARM(generators)
	errorDetail_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetail_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForErrorDetail_STATUS_ARM(generators)
	errorDetail_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_ARM{}), generators)

	return errorDetail_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForErrorDetail_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorDetail_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForErrorDetail_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorDetail_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdditionalInfo"] = gen.SliceOf(ErrorAdditionalInfo_STATUS_ARMGenerator())
	gens["Details"] = gen.SliceOf(ErrorDetail_STATUS_Unrolled_ARMGenerator())
}

func Test_ErrorDetail_STATUS_Unrolled_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorDetail_STATUS_Unrolled_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorDetail_STATUS_Unrolled_ARM, ErrorDetail_STATUS_Unrolled_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorDetail_STATUS_Unrolled_ARM runs a test to see if a specific instance of ErrorDetail_STATUS_Unrolled_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorDetail_STATUS_Unrolled_ARM(subject ErrorDetail_STATUS_Unrolled_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorDetail_STATUS_Unrolled_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorDetail_STATUS_Unrolled_ARM instances for property testing - lazily instantiated by
// ErrorDetail_STATUS_Unrolled_ARMGenerator()
var errorDetail_STATUS_Unrolled_ARMGenerator gopter.Gen

// ErrorDetail_STATUS_Unrolled_ARMGenerator returns a generator of ErrorDetail_STATUS_Unrolled_ARM instances for property testing.
// We first initialize errorDetail_STATUS_Unrolled_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ErrorDetail_STATUS_Unrolled_ARMGenerator() gopter.Gen {
	if errorDetail_STATUS_Unrolled_ARMGenerator != nil {
		return errorDetail_STATUS_Unrolled_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(generators)
	errorDetail_STATUS_Unrolled_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_Unrolled_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(generators)
	AddRelatedPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(generators)
	errorDetail_STATUS_Unrolled_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorDetail_STATUS_Unrolled_ARM{}), generators)

	return errorDetail_STATUS_Unrolled_ARMGenerator
}

// AddIndependentPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Target"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorDetail_STATUS_Unrolled_ARM(gens map[string]gopter.Gen) {
	gens["AdditionalInfo"] = gen.SliceOf(ErrorAdditionalInfo_STATUS_ARMGenerator())
}

func Test_ErrorResponse_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ErrorResponse_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForErrorResponse_STATUS_ARM, ErrorResponse_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForErrorResponse_STATUS_ARM runs a test to see if a specific instance of ErrorResponse_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForErrorResponse_STATUS_ARM(subject ErrorResponse_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ErrorResponse_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ErrorResponse_STATUS_ARM instances for property testing - lazily instantiated by
// ErrorResponse_STATUS_ARMGenerator()
var errorResponse_STATUS_ARMGenerator gopter.Gen

// ErrorResponse_STATUS_ARMGenerator returns a generator of ErrorResponse_STATUS_ARM instances for property testing.
func ErrorResponse_STATUS_ARMGenerator() gopter.Gen {
	if errorResponse_STATUS_ARMGenerator != nil {
		return errorResponse_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForErrorResponse_STATUS_ARM(generators)
	errorResponse_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ErrorResponse_STATUS_ARM{}), generators)

	return errorResponse_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForErrorResponse_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForErrorResponse_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(ErrorDetail_STATUS_ARMGenerator())
}

func Test_HDInsightProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HDInsightProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHDInsightProperties_STATUS_ARM, HDInsightProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHDInsightProperties_STATUS_ARM runs a test to see if a specific instance of HDInsightProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHDInsightProperties_STATUS_ARM(subject HDInsightProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HDInsightProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HDInsightProperties_STATUS_ARM instances for property testing - lazily instantiated by
// HDInsightProperties_STATUS_ARMGenerator()
var hdInsightProperties_STATUS_ARMGenerator gopter.Gen

// HDInsightProperties_STATUS_ARMGenerator returns a generator of HDInsightProperties_STATUS_ARM instances for property testing.
// We first initialize hdInsightProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HDInsightProperties_STATUS_ARMGenerator() gopter.Gen {
	if hdInsightProperties_STATUS_ARMGenerator != nil {
		return hdInsightProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHDInsightProperties_STATUS_ARM(generators)
	hdInsightProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HDInsightProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHDInsightProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForHDInsightProperties_STATUS_ARM(generators)
	hdInsightProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HDInsightProperties_STATUS_ARM{}), generators)

	return hdInsightProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHDInsightProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHDInsightProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Address"] = gen.PtrOf(gen.AlphaString())
	gens["SshPort"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForHDInsightProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHDInsightProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdministratorAccount"] = gen.PtrOf(VirtualMachineSshCredentials_STATUS_ARMGenerator())
}

func Test_HDInsight_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HDInsight_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHDInsight_STATUS_ARM, HDInsight_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHDInsight_STATUS_ARM runs a test to see if a specific instance of HDInsight_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHDInsight_STATUS_ARM(subject HDInsight_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HDInsight_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HDInsight_STATUS_ARM instances for property testing - lazily instantiated by
// HDInsight_STATUS_ARMGenerator()
var hdInsight_STATUS_ARMGenerator gopter.Gen

// HDInsight_STATUS_ARMGenerator returns a generator of HDInsight_STATUS_ARM instances for property testing.
// We first initialize hdInsight_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HDInsight_STATUS_ARMGenerator() gopter.Gen {
	if hdInsight_STATUS_ARMGenerator != nil {
		return hdInsight_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHDInsight_STATUS_ARM(generators)
	hdInsight_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HDInsight_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHDInsight_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForHDInsight_STATUS_ARM(generators)
	hdInsight_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HDInsight_STATUS_ARM{}), generators)

	return hdInsight_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHDInsight_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHDInsight_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(HDInsight_ComputeType_STATUS_ARM_HDInsight)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		HDInsight_ProvisioningState_STATUS_ARM_Canceled,
		HDInsight_ProvisioningState_STATUS_ARM_Creating,
		HDInsight_ProvisioningState_STATUS_ARM_Deleting,
		HDInsight_ProvisioningState_STATUS_ARM_Failed,
		HDInsight_ProvisioningState_STATUS_ARM_Succeeded,
		HDInsight_ProvisioningState_STATUS_ARM_Unknown,
		HDInsight_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForHDInsight_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHDInsight_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(HDInsightProperties_STATUS_ARMGenerator())
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_InstanceTypeSchema_Resources_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InstanceTypeSchema_Resources_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInstanceTypeSchema_Resources_STATUS_ARM, InstanceTypeSchema_Resources_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInstanceTypeSchema_Resources_STATUS_ARM runs a test to see if a specific instance of InstanceTypeSchema_Resources_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInstanceTypeSchema_Resources_STATUS_ARM(subject InstanceTypeSchema_Resources_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InstanceTypeSchema_Resources_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InstanceTypeSchema_Resources_STATUS_ARM instances for property testing - lazily instantiated by
// InstanceTypeSchema_Resources_STATUS_ARMGenerator()
var instanceTypeSchema_Resources_STATUS_ARMGenerator gopter.Gen

// InstanceTypeSchema_Resources_STATUS_ARMGenerator returns a generator of InstanceTypeSchema_Resources_STATUS_ARM instances for property testing.
func InstanceTypeSchema_Resources_STATUS_ARMGenerator() gopter.Gen {
	if instanceTypeSchema_Resources_STATUS_ARMGenerator != nil {
		return instanceTypeSchema_Resources_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInstanceTypeSchema_Resources_STATUS_ARM(generators)
	instanceTypeSchema_Resources_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InstanceTypeSchema_Resources_STATUS_ARM{}), generators)

	return instanceTypeSchema_Resources_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForInstanceTypeSchema_Resources_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInstanceTypeSchema_Resources_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Limits"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Requests"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

func Test_InstanceTypeSchema_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InstanceTypeSchema_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInstanceTypeSchema_STATUS_ARM, InstanceTypeSchema_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInstanceTypeSchema_STATUS_ARM runs a test to see if a specific instance of InstanceTypeSchema_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInstanceTypeSchema_STATUS_ARM(subject InstanceTypeSchema_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InstanceTypeSchema_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InstanceTypeSchema_STATUS_ARM instances for property testing - lazily instantiated by
// InstanceTypeSchema_STATUS_ARMGenerator()
var instanceTypeSchema_STATUS_ARMGenerator gopter.Gen

// InstanceTypeSchema_STATUS_ARMGenerator returns a generator of InstanceTypeSchema_STATUS_ARM instances for property testing.
// We first initialize instanceTypeSchema_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InstanceTypeSchema_STATUS_ARMGenerator() gopter.Gen {
	if instanceTypeSchema_STATUS_ARMGenerator != nil {
		return instanceTypeSchema_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInstanceTypeSchema_STATUS_ARM(generators)
	instanceTypeSchema_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InstanceTypeSchema_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInstanceTypeSchema_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForInstanceTypeSchema_STATUS_ARM(generators)
	instanceTypeSchema_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InstanceTypeSchema_STATUS_ARM{}), generators)

	return instanceTypeSchema_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForInstanceTypeSchema_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInstanceTypeSchema_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["NodeSelector"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInstanceTypeSchema_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInstanceTypeSchema_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Resources"] = gen.PtrOf(InstanceTypeSchema_Resources_STATUS_ARMGenerator())
}

func Test_KubernetesProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubernetesProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubernetesProperties_STATUS_ARM, KubernetesProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubernetesProperties_STATUS_ARM runs a test to see if a specific instance of KubernetesProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubernetesProperties_STATUS_ARM(subject KubernetesProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubernetesProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubernetesProperties_STATUS_ARM instances for property testing - lazily instantiated by
// KubernetesProperties_STATUS_ARMGenerator()
var kubernetesProperties_STATUS_ARMGenerator gopter.Gen

// KubernetesProperties_STATUS_ARMGenerator returns a generator of KubernetesProperties_STATUS_ARM instances for property testing.
// We first initialize kubernetesProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KubernetesProperties_STATUS_ARMGenerator() gopter.Gen {
	if kubernetesProperties_STATUS_ARMGenerator != nil {
		return kubernetesProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubernetesProperties_STATUS_ARM(generators)
	kubernetesProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(KubernetesProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubernetesProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForKubernetesProperties_STATUS_ARM(generators)
	kubernetesProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(KubernetesProperties_STATUS_ARM{}), generators)

	return kubernetesProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForKubernetesProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubernetesProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DefaultInstanceType"] = gen.PtrOf(gen.AlphaString())
	gens["ExtensionInstanceReleaseTrain"] = gen.PtrOf(gen.AlphaString())
	gens["ExtensionPrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["VcName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForKubernetesProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKubernetesProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["InstanceTypes"] = gen.MapOf(
		gen.AlphaString(),
		InstanceTypeSchema_STATUS_ARMGenerator())
}

func Test_Kubernetes_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Kubernetes_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubernetes_STATUS_ARM, Kubernetes_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubernetes_STATUS_ARM runs a test to see if a specific instance of Kubernetes_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubernetes_STATUS_ARM(subject Kubernetes_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Kubernetes_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Kubernetes_STATUS_ARM instances for property testing - lazily instantiated by
// Kubernetes_STATUS_ARMGenerator()
var kubernetes_STATUS_ARMGenerator gopter.Gen

// Kubernetes_STATUS_ARMGenerator returns a generator of Kubernetes_STATUS_ARM instances for property testing.
// We first initialize kubernetes_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Kubernetes_STATUS_ARMGenerator() gopter.Gen {
	if kubernetes_STATUS_ARMGenerator != nil {
		return kubernetes_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubernetes_STATUS_ARM(generators)
	kubernetes_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Kubernetes_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubernetes_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForKubernetes_STATUS_ARM(generators)
	kubernetes_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Kubernetes_STATUS_ARM{}), generators)

	return kubernetes_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForKubernetes_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubernetes_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(Kubernetes_ComputeType_STATUS_ARM_Kubernetes)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		Kubernetes_ProvisioningState_STATUS_ARM_Canceled,
		Kubernetes_ProvisioningState_STATUS_ARM_Creating,
		Kubernetes_ProvisioningState_STATUS_ARM_Deleting,
		Kubernetes_ProvisioningState_STATUS_ARM_Failed,
		Kubernetes_ProvisioningState_STATUS_ARM_Succeeded,
		Kubernetes_ProvisioningState_STATUS_ARM_Unknown,
		Kubernetes_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForKubernetes_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKubernetes_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(KubernetesProperties_STATUS_ARMGenerator())
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_NodeStateCounts_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NodeStateCounts_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNodeStateCounts_STATUS_ARM, NodeStateCounts_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNodeStateCounts_STATUS_ARM runs a test to see if a specific instance of NodeStateCounts_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNodeStateCounts_STATUS_ARM(subject NodeStateCounts_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NodeStateCounts_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NodeStateCounts_STATUS_ARM instances for property testing - lazily instantiated by
// NodeStateCounts_STATUS_ARMGenerator()
var nodeStateCounts_STATUS_ARMGenerator gopter.Gen

// NodeStateCounts_STATUS_ARMGenerator returns a generator of NodeStateCounts_STATUS_ARM instances for property testing.
func NodeStateCounts_STATUS_ARMGenerator() gopter.Gen {
	if nodeStateCounts_STATUS_ARMGenerator != nil {
		return nodeStateCounts_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNodeStateCounts_STATUS_ARM(generators)
	nodeStateCounts_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NodeStateCounts_STATUS_ARM{}), generators)

	return nodeStateCounts_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNodeStateCounts_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNodeStateCounts_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IdleNodeCount"] = gen.PtrOf(gen.Int())
	gens["LeavingNodeCount"] = gen.PtrOf(gen.Int())
	gens["PreemptedNodeCount"] = gen.PtrOf(gen.Int())
	gens["PreparingNodeCount"] = gen.PtrOf(gen.Int())
	gens["RunningNodeCount"] = gen.PtrOf(gen.Int())
	gens["UnusableNodeCount"] = gen.PtrOf(gen.Int())
}

func Test_PersonalComputeInstanceSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PersonalComputeInstanceSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPersonalComputeInstanceSettings_STATUS_ARM, PersonalComputeInstanceSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPersonalComputeInstanceSettings_STATUS_ARM runs a test to see if a specific instance of PersonalComputeInstanceSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPersonalComputeInstanceSettings_STATUS_ARM(subject PersonalComputeInstanceSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PersonalComputeInstanceSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PersonalComputeInstanceSettings_STATUS_ARM instances for property testing - lazily instantiated by
// PersonalComputeInstanceSettings_STATUS_ARMGenerator()
var personalComputeInstanceSettings_STATUS_ARMGenerator gopter.Gen

// PersonalComputeInstanceSettings_STATUS_ARMGenerator returns a generator of PersonalComputeInstanceSettings_STATUS_ARM instances for property testing.
func PersonalComputeInstanceSettings_STATUS_ARMGenerator() gopter.Gen {
	if personalComputeInstanceSettings_STATUS_ARMGenerator != nil {
		return personalComputeInstanceSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPersonalComputeInstanceSettings_STATUS_ARM(generators)
	personalComputeInstanceSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PersonalComputeInstanceSettings_STATUS_ARM{}), generators)

	return personalComputeInstanceSettings_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForPersonalComputeInstanceSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPersonalComputeInstanceSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AssignedUser"] = gen.PtrOf(AssignedUser_STATUS_ARMGenerator())
}

func Test_ResourceId_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceId_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceId_STATUS_ARM, ResourceId_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceId_STATUS_ARM runs a test to see if a specific instance of ResourceId_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceId_STATUS_ARM(subject ResourceId_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceId_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceId_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceId_STATUS_ARMGenerator()
var resourceId_STATUS_ARMGenerator gopter.Gen

// ResourceId_STATUS_ARMGenerator returns a generator of ResourceId_STATUS_ARM instances for property testing.
func ResourceId_STATUS_ARMGenerator() gopter.Gen {
	if resourceId_STATUS_ARMGenerator != nil {
		return resourceId_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceId_STATUS_ARM(generators)
	resourceId_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceId_STATUS_ARM{}), generators)

	return resourceId_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceId_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceId_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScaleSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleSettings_STATUS_ARM, ScaleSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleSettings_STATUS_ARM runs a test to see if a specific instance of ScaleSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleSettings_STATUS_ARM(subject ScaleSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScaleSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScaleSettings_STATUS_ARM instances for property testing - lazily instantiated by
// ScaleSettings_STATUS_ARMGenerator()
var scaleSettings_STATUS_ARMGenerator gopter.Gen

// ScaleSettings_STATUS_ARMGenerator returns a generator of ScaleSettings_STATUS_ARM instances for property testing.
func ScaleSettings_STATUS_ARMGenerator() gopter.Gen {
	if scaleSettings_STATUS_ARMGenerator != nil {
		return scaleSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleSettings_STATUS_ARM(generators)
	scaleSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ScaleSettings_STATUS_ARM{}), generators)

	return scaleSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForScaleSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MaxNodeCount"] = gen.PtrOf(gen.Int())
	gens["MinNodeCount"] = gen.PtrOf(gen.Int())
	gens["NodeIdleTimeBeforeScaleDown"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScriptReference_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScriptReference_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScriptReference_STATUS_ARM, ScriptReference_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScriptReference_STATUS_ARM runs a test to see if a specific instance of ScriptReference_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScriptReference_STATUS_ARM(subject ScriptReference_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScriptReference_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScriptReference_STATUS_ARM instances for property testing - lazily instantiated by
// ScriptReference_STATUS_ARMGenerator()
var scriptReference_STATUS_ARMGenerator gopter.Gen

// ScriptReference_STATUS_ARMGenerator returns a generator of ScriptReference_STATUS_ARM instances for property testing.
func ScriptReference_STATUS_ARMGenerator() gopter.Gen {
	if scriptReference_STATUS_ARMGenerator != nil {
		return scriptReference_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScriptReference_STATUS_ARM(generators)
	scriptReference_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ScriptReference_STATUS_ARM{}), generators)

	return scriptReference_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForScriptReference_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScriptReference_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ScriptArguments"] = gen.PtrOf(gen.AlphaString())
	gens["ScriptData"] = gen.PtrOf(gen.AlphaString())
	gens["ScriptSource"] = gen.PtrOf(gen.AlphaString())
	gens["Timeout"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScriptsToExecute_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScriptsToExecute_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScriptsToExecute_STATUS_ARM, ScriptsToExecute_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScriptsToExecute_STATUS_ARM runs a test to see if a specific instance of ScriptsToExecute_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScriptsToExecute_STATUS_ARM(subject ScriptsToExecute_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScriptsToExecute_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScriptsToExecute_STATUS_ARM instances for property testing - lazily instantiated by
// ScriptsToExecute_STATUS_ARMGenerator()
var scriptsToExecute_STATUS_ARMGenerator gopter.Gen

// ScriptsToExecute_STATUS_ARMGenerator returns a generator of ScriptsToExecute_STATUS_ARM instances for property testing.
func ScriptsToExecute_STATUS_ARMGenerator() gopter.Gen {
	if scriptsToExecute_STATUS_ARMGenerator != nil {
		return scriptsToExecute_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScriptsToExecute_STATUS_ARM(generators)
	scriptsToExecute_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ScriptsToExecute_STATUS_ARM{}), generators)

	return scriptsToExecute_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForScriptsToExecute_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScriptsToExecute_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreationScript"] = gen.PtrOf(ScriptReference_STATUS_ARMGenerator())
	gens["StartupScript"] = gen.PtrOf(ScriptReference_STATUS_ARMGenerator())
}

func Test_SetupScripts_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SetupScripts_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSetupScripts_STATUS_ARM, SetupScripts_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSetupScripts_STATUS_ARM runs a test to see if a specific instance of SetupScripts_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSetupScripts_STATUS_ARM(subject SetupScripts_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SetupScripts_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SetupScripts_STATUS_ARM instances for property testing - lazily instantiated by
// SetupScripts_STATUS_ARMGenerator()
var setupScripts_STATUS_ARMGenerator gopter.Gen

// SetupScripts_STATUS_ARMGenerator returns a generator of SetupScripts_STATUS_ARM instances for property testing.
func SetupScripts_STATUS_ARMGenerator() gopter.Gen {
	if setupScripts_STATUS_ARMGenerator != nil {
		return setupScripts_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSetupScripts_STATUS_ARM(generators)
	setupScripts_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SetupScripts_STATUS_ARM{}), generators)

	return setupScripts_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForSetupScripts_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSetupScripts_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Scripts"] = gen.PtrOf(ScriptsToExecute_STATUS_ARMGenerator())
}

func Test_SslConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SslConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSslConfiguration_STATUS_ARM, SslConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSslConfiguration_STATUS_ARM runs a test to see if a specific instance of SslConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSslConfiguration_STATUS_ARM(subject SslConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SslConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SslConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// SslConfiguration_STATUS_ARMGenerator()
var sslConfiguration_STATUS_ARMGenerator gopter.Gen

// SslConfiguration_STATUS_ARMGenerator returns a generator of SslConfiguration_STATUS_ARM instances for property testing.
func SslConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if sslConfiguration_STATUS_ARMGenerator != nil {
		return sslConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSslConfiguration_STATUS_ARM(generators)
	sslConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SslConfiguration_STATUS_ARM{}), generators)

	return sslConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSslConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSslConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Cname"] = gen.PtrOf(gen.AlphaString())
	gens["LeafDomainLabel"] = gen.PtrOf(gen.AlphaString())
	gens["OverwriteExistingDomain"] = gen.PtrOf(gen.Bool())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(SslConfiguration_Status_STATUS_ARM_Auto, SslConfiguration_Status_STATUS_ARM_Disabled, SslConfiguration_Status_STATUS_ARM_Enabled))
}

func Test_SynapseSpark_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SynapseSpark_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSynapseSpark_Properties_STATUS_ARM, SynapseSpark_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSynapseSpark_Properties_STATUS_ARM runs a test to see if a specific instance of SynapseSpark_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSynapseSpark_Properties_STATUS_ARM(subject SynapseSpark_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SynapseSpark_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SynapseSpark_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// SynapseSpark_Properties_STATUS_ARMGenerator()
var synapseSpark_Properties_STATUS_ARMGenerator gopter.Gen

// SynapseSpark_Properties_STATUS_ARMGenerator returns a generator of SynapseSpark_Properties_STATUS_ARM instances for property testing.
// We first initialize synapseSpark_Properties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SynapseSpark_Properties_STATUS_ARMGenerator() gopter.Gen {
	if synapseSpark_Properties_STATUS_ARMGenerator != nil {
		return synapseSpark_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSynapseSpark_Properties_STATUS_ARM(generators)
	synapseSpark_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SynapseSpark_Properties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSynapseSpark_Properties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSynapseSpark_Properties_STATUS_ARM(generators)
	synapseSpark_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SynapseSpark_Properties_STATUS_ARM{}), generators)

	return synapseSpark_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSynapseSpark_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSynapseSpark_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["NodeCount"] = gen.PtrOf(gen.Int())
	gens["NodeSize"] = gen.PtrOf(gen.AlphaString())
	gens["NodeSizeFamily"] = gen.PtrOf(gen.AlphaString())
	gens["PoolName"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SparkVersion"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSynapseSpark_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSynapseSpark_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoPauseProperties"] = gen.PtrOf(AutoPauseProperties_STATUS_ARMGenerator())
	gens["AutoScaleProperties"] = gen.PtrOf(AutoScaleProperties_STATUS_ARMGenerator())
}

func Test_SynapseSpark_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SynapseSpark_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSynapseSpark_STATUS_ARM, SynapseSpark_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSynapseSpark_STATUS_ARM runs a test to see if a specific instance of SynapseSpark_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSynapseSpark_STATUS_ARM(subject SynapseSpark_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SynapseSpark_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SynapseSpark_STATUS_ARM instances for property testing - lazily instantiated by
// SynapseSpark_STATUS_ARMGenerator()
var synapseSpark_STATUS_ARMGenerator gopter.Gen

// SynapseSpark_STATUS_ARMGenerator returns a generator of SynapseSpark_STATUS_ARM instances for property testing.
// We first initialize synapseSpark_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SynapseSpark_STATUS_ARMGenerator() gopter.Gen {
	if synapseSpark_STATUS_ARMGenerator != nil {
		return synapseSpark_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSynapseSpark_STATUS_ARM(generators)
	synapseSpark_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SynapseSpark_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSynapseSpark_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSynapseSpark_STATUS_ARM(generators)
	synapseSpark_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SynapseSpark_STATUS_ARM{}), generators)

	return synapseSpark_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSynapseSpark_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSynapseSpark_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(SynapseSpark_ComputeType_STATUS_ARM_SynapseSpark)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		SynapseSpark_ProvisioningState_STATUS_ARM_Canceled,
		SynapseSpark_ProvisioningState_STATUS_ARM_Creating,
		SynapseSpark_ProvisioningState_STATUS_ARM_Deleting,
		SynapseSpark_ProvisioningState_STATUS_ARM_Failed,
		SynapseSpark_ProvisioningState_STATUS_ARM_Succeeded,
		SynapseSpark_ProvisioningState_STATUS_ARM_Unknown,
		SynapseSpark_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSynapseSpark_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSynapseSpark_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SynapseSpark_Properties_STATUS_ARMGenerator())
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_SystemService_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemService_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemService_STATUS_ARM, SystemService_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemService_STATUS_ARM runs a test to see if a specific instance of SystemService_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemService_STATUS_ARM(subject SystemService_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemService_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemService_STATUS_ARM instances for property testing - lazily instantiated by
// SystemService_STATUS_ARMGenerator()
var systemService_STATUS_ARMGenerator gopter.Gen

// SystemService_STATUS_ARMGenerator returns a generator of SystemService_STATUS_ARM instances for property testing.
func SystemService_STATUS_ARMGenerator() gopter.Gen {
	if systemService_STATUS_ARMGenerator != nil {
		return systemService_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemService_STATUS_ARM(generators)
	systemService_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemService_STATUS_ARM{}), generators)

	return systemService_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemService_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemService_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PublicIpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["SystemServiceType"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAccountCredentials_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAccountCredentials_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAccountCredentials_STATUS_ARM, UserAccountCredentials_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAccountCredentials_STATUS_ARM runs a test to see if a specific instance of UserAccountCredentials_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAccountCredentials_STATUS_ARM(subject UserAccountCredentials_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAccountCredentials_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAccountCredentials_STATUS_ARM instances for property testing - lazily instantiated by
// UserAccountCredentials_STATUS_ARMGenerator()
var userAccountCredentials_STATUS_ARMGenerator gopter.Gen

// UserAccountCredentials_STATUS_ARMGenerator returns a generator of UserAccountCredentials_STATUS_ARM instances for property testing.
func UserAccountCredentials_STATUS_ARMGenerator() gopter.Gen {
	if userAccountCredentials_STATUS_ARMGenerator != nil {
		return userAccountCredentials_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAccountCredentials_STATUS_ARM(generators)
	userAccountCredentials_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserAccountCredentials_STATUS_ARM{}), generators)

	return userAccountCredentials_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAccountCredentials_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAccountCredentials_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdminUserName"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineImage_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineImage_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineImage_STATUS_ARM, VirtualMachineImage_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineImage_STATUS_ARM runs a test to see if a specific instance of VirtualMachineImage_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineImage_STATUS_ARM(subject VirtualMachineImage_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineImage_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineImage_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineImage_STATUS_ARMGenerator()
var virtualMachineImage_STATUS_ARMGenerator gopter.Gen

// VirtualMachineImage_STATUS_ARMGenerator returns a generator of VirtualMachineImage_STATUS_ARM instances for property testing.
func VirtualMachineImage_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineImage_STATUS_ARMGenerator != nil {
		return virtualMachineImage_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineImage_STATUS_ARM(generators)
	virtualMachineImage_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineImage_STATUS_ARM{}), generators)

	return virtualMachineImage_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineImage_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineImage_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineSshCredentials_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineSshCredentials_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineSshCredentials_STATUS_ARM, VirtualMachineSshCredentials_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineSshCredentials_STATUS_ARM runs a test to see if a specific instance of VirtualMachineSshCredentials_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineSshCredentials_STATUS_ARM(subject VirtualMachineSshCredentials_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachineSshCredentials_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachineSshCredentials_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachineSshCredentials_STATUS_ARMGenerator()
var virtualMachineSshCredentials_STATUS_ARMGenerator gopter.Gen

// VirtualMachineSshCredentials_STATUS_ARMGenerator returns a generator of VirtualMachineSshCredentials_STATUS_ARM instances for property testing.
func VirtualMachineSshCredentials_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachineSshCredentials_STATUS_ARMGenerator != nil {
		return virtualMachineSshCredentials_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineSshCredentials_STATUS_ARM(generators)
	virtualMachineSshCredentials_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineSshCredentials_STATUS_ARM{}), generators)

	return virtualMachineSshCredentials_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineSshCredentials_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineSshCredentials_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachine_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachine_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachine_Properties_STATUS_ARM, VirtualMachine_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachine_Properties_STATUS_ARM runs a test to see if a specific instance of VirtualMachine_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachine_Properties_STATUS_ARM(subject VirtualMachine_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachine_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachine_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachine_Properties_STATUS_ARMGenerator()
var virtualMachine_Properties_STATUS_ARMGenerator gopter.Gen

// VirtualMachine_Properties_STATUS_ARMGenerator returns a generator of VirtualMachine_Properties_STATUS_ARM instances for property testing.
// We first initialize virtualMachine_Properties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachine_Properties_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachine_Properties_STATUS_ARMGenerator != nil {
		return virtualMachine_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachine_Properties_STATUS_ARM(generators)
	virtualMachine_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachine_Properties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachine_Properties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachine_Properties_STATUS_ARM(generators)
	virtualMachine_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachine_Properties_STATUS_ARM{}), generators)

	return virtualMachine_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachine_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachine_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Address"] = gen.PtrOf(gen.AlphaString())
	gens["IsNotebookInstanceCompute"] = gen.PtrOf(gen.Bool())
	gens["SshPort"] = gen.PtrOf(gen.Int())
	gens["VirtualMachineSize"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachine_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachine_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdministratorAccount"] = gen.PtrOf(VirtualMachineSshCredentials_STATUS_ARMGenerator())
}

func Test_VirtualMachine_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachine_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachine_STATUS_ARM, VirtualMachine_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachine_STATUS_ARM runs a test to see if a specific instance of VirtualMachine_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachine_STATUS_ARM(subject VirtualMachine_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualMachine_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualMachine_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualMachine_STATUS_ARMGenerator()
var virtualMachine_STATUS_ARMGenerator gopter.Gen

// VirtualMachine_STATUS_ARMGenerator returns a generator of VirtualMachine_STATUS_ARM instances for property testing.
// We first initialize virtualMachine_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachine_STATUS_ARMGenerator() gopter.Gen {
	if virtualMachine_STATUS_ARMGenerator != nil {
		return virtualMachine_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachine_STATUS_ARM(generators)
	virtualMachine_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachine_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachine_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachine_STATUS_ARM(generators)
	virtualMachine_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachine_STATUS_ARM{}), generators)

	return virtualMachine_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachine_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachine_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComputeLocation"] = gen.PtrOf(gen.AlphaString())
	gens["ComputeType"] = gen.OneConstOf(VirtualMachine_ComputeType_STATUS_ARM_VirtualMachine)
	gens["CreatedOn"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisableLocalAuth"] = gen.PtrOf(gen.Bool())
	gens["IsAttachedCompute"] = gen.PtrOf(gen.Bool())
	gens["ModifiedOn"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		VirtualMachine_ProvisioningState_STATUS_ARM_Canceled,
		VirtualMachine_ProvisioningState_STATUS_ARM_Creating,
		VirtualMachine_ProvisioningState_STATUS_ARM_Deleting,
		VirtualMachine_ProvisioningState_STATUS_ARM_Failed,
		VirtualMachine_ProvisioningState_STATUS_ARM_Succeeded,
		VirtualMachine_ProvisioningState_STATUS_ARM_Unknown,
		VirtualMachine_ProvisioningState_STATUS_ARM_Updating))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachine_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachine_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachine_Properties_STATUS_ARMGenerator())
	gens["ProvisioningErrors"] = gen.SliceOf(ErrorResponse_STATUS_ARMGenerator())
}

func Test_Workspaces_Compute_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Workspaces_Compute_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWorkspaces_Compute_STATUS_ARM, Workspaces_Compute_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWorkspaces_Compute_STATUS_ARM runs a test to see if a specific instance of Workspaces_Compute_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWorkspaces_Compute_STATUS_ARM(subject Workspaces_Compute_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Workspaces_Compute_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Workspaces_Compute_STATUS_ARM instances for property testing - lazily instantiated by
// Workspaces_Compute_STATUS_ARMGenerator()
var workspaces_Compute_STATUS_ARMGenerator gopter.Gen

// Workspaces_Compute_STATUS_ARMGenerator returns a generator of Workspaces_Compute_STATUS_ARM instances for property testing.
// We first initialize workspaces_Compute_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Workspaces_Compute_STATUS_ARMGenerator() gopter.Gen {
	if workspaces_Compute_STATUS_ARMGenerator != nil {
		return workspaces_Compute_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaces_Compute_STATUS_ARM(generators)
	workspaces_Compute_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Workspaces_Compute_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWorkspaces_Compute_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForWorkspaces_Compute_STATUS_ARM(generators)
	workspaces_Compute_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Workspaces_Compute_STATUS_ARM{}), generators)

	return workspaces_Compute_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForWorkspaces_Compute_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWorkspaces_Compute_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWorkspaces_Compute_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWorkspaces_Compute_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(Identity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(Compute_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}
