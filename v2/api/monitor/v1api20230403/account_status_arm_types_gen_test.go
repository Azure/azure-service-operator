// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230403

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Account_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Account_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAccount_STATUS_ARM, Account_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAccount_STATUS_ARM runs a test to see if a specific instance of Account_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAccount_STATUS_ARM(subject Account_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Account_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Account_STATUS_ARM instances for property testing - lazily instantiated by Account_STATUS_ARMGenerator()
var account_STATUS_ARMGenerator gopter.Gen

// Account_STATUS_ARMGenerator returns a generator of Account_STATUS_ARM instances for property testing.
// We first initialize account_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Account_STATUS_ARMGenerator() gopter.Gen {
	if account_STATUS_ARMGenerator != nil {
		return account_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccount_STATUS_ARM(generators)
	account_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Account_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccount_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAccount_STATUS_ARM(generators)
	account_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Account_STATUS_ARM{}), generators)

	return account_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAccount_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAccount_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAccount_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAccount_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AzureMonitorWorkspace_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_AzureMonitorWorkspace_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureMonitorWorkspace_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureMonitorWorkspace_STATUS_ARM, AzureMonitorWorkspace_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureMonitorWorkspace_STATUS_ARM runs a test to see if a specific instance of AzureMonitorWorkspace_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureMonitorWorkspace_STATUS_ARM(subject AzureMonitorWorkspace_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureMonitorWorkspace_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureMonitorWorkspace_STATUS_ARM instances for property testing - lazily instantiated by
// AzureMonitorWorkspace_STATUS_ARMGenerator()
var azureMonitorWorkspace_STATUS_ARMGenerator gopter.Gen

// AzureMonitorWorkspace_STATUS_ARMGenerator returns a generator of AzureMonitorWorkspace_STATUS_ARM instances for property testing.
// We first initialize azureMonitorWorkspace_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AzureMonitorWorkspace_STATUS_ARMGenerator() gopter.Gen {
	if azureMonitorWorkspace_STATUS_ARMGenerator != nil {
		return azureMonitorWorkspace_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureMonitorWorkspace_STATUS_ARM(generators)
	azureMonitorWorkspace_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureMonitorWorkspace_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureMonitorWorkspace_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAzureMonitorWorkspace_STATUS_ARM(generators)
	azureMonitorWorkspace_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureMonitorWorkspace_STATUS_ARM{}), generators)

	return azureMonitorWorkspace_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureMonitorWorkspace_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureMonitorWorkspace_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AccountId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AzureMonitorWorkspace_ProvisioningState_STATUS_ARM_Canceled,
		AzureMonitorWorkspace_ProvisioningState_STATUS_ARM_Creating,
		AzureMonitorWorkspace_ProvisioningState_STATUS_ARM_Deleting,
		AzureMonitorWorkspace_ProvisioningState_STATUS_ARM_Failed,
		AzureMonitorWorkspace_ProvisioningState_STATUS_ARM_Succeeded))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(AzureMonitorWorkspace_PublicNetworkAccess_STATUS_ARM_Disabled, AzureMonitorWorkspace_PublicNetworkAccess_STATUS_ARM_Enabled))
}

// AddRelatedPropertyGeneratorsForAzureMonitorWorkspace_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAzureMonitorWorkspace_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DefaultIngestionSettings"] = gen.PtrOf(IngestionSettings_STATUS_ARMGenerator())
	gens["Metrics"] = gen.PtrOf(Metrics_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnection_STATUS_ARMGenerator())
}

func Test_IngestionSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IngestionSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIngestionSettings_STATUS_ARM, IngestionSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIngestionSettings_STATUS_ARM runs a test to see if a specific instance of IngestionSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIngestionSettings_STATUS_ARM(subject IngestionSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IngestionSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IngestionSettings_STATUS_ARM instances for property testing - lazily instantiated by
// IngestionSettings_STATUS_ARMGenerator()
var ingestionSettings_STATUS_ARMGenerator gopter.Gen

// IngestionSettings_STATUS_ARMGenerator returns a generator of IngestionSettings_STATUS_ARM instances for property testing.
func IngestionSettings_STATUS_ARMGenerator() gopter.Gen {
	if ingestionSettings_STATUS_ARMGenerator != nil {
		return ingestionSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIngestionSettings_STATUS_ARM(generators)
	ingestionSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IngestionSettings_STATUS_ARM{}), generators)

	return ingestionSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIngestionSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIngestionSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DataCollectionEndpointResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["DataCollectionRuleResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_Metrics_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Metrics_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMetrics_STATUS_ARM, Metrics_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMetrics_STATUS_ARM runs a test to see if a specific instance of Metrics_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMetrics_STATUS_ARM(subject Metrics_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Metrics_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Metrics_STATUS_ARM instances for property testing - lazily instantiated by Metrics_STATUS_ARMGenerator()
var metrics_STATUS_ARMGenerator gopter.Gen

// Metrics_STATUS_ARMGenerator returns a generator of Metrics_STATUS_ARM instances for property testing.
func Metrics_STATUS_ARMGenerator() gopter.Gen {
	if metrics_STATUS_ARMGenerator != nil {
		return metrics_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMetrics_STATUS_ARM(generators)
	metrics_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Metrics_STATUS_ARM{}), generators)

	return metrics_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForMetrics_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMetrics_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["InternalId"] = gen.PtrOf(gen.AlphaString())
	gens["PrometheusQueryEndpoint"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateEndpointConnection_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnection_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM, PrivateEndpointConnection_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointConnection_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnection_STATUS_ARM(subject PrivateEndpointConnection_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnection_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnection_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointConnection_STATUS_ARMGenerator()
var privateEndpointConnection_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointConnection_STATUS_ARMGenerator returns a generator of PrivateEndpointConnection_STATUS_ARM instances for property testing.
func PrivateEndpointConnection_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointConnection_STATUS_ARMGenerator != nil {
		return privateEndpointConnection_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(generators)
	privateEndpointConnection_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnection_STATUS_ARM{}), generators)

	return privateEndpointConnection_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnection_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_ARM_Application,
		SystemData_CreatedByType_STATUS_ARM_Key,
		SystemData_CreatedByType_STATUS_ARM_ManagedIdentity,
		SystemData_CreatedByType_STATUS_ARM_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_ARM_Application,
		SystemData_LastModifiedByType_STATUS_ARM_Key,
		SystemData_LastModifiedByType_STATUS_ARM_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_ARM_User))
}
