// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201201

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_VirtualMachineScaleSet_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSet_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetStatusARM, VirtualMachineScaleSetStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetStatusARM runs a test to see if a specific instance of VirtualMachineScaleSet_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetStatusARM(subject VirtualMachineScaleSet_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSet_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSet_StatusARM instances for property testing -
//lazily instantiated by VirtualMachineScaleSetStatusARMGenerator()
var virtualMachineScaleSetStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetStatusARMGenerator returns a generator of VirtualMachineScaleSet_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetStatusARMGenerator != nil {
		return virtualMachineScaleSetStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetStatusARM(generators)
	virtualMachineScaleSetStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStatusARM(generators)
	virtualMachineScaleSetStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSet_StatusARM{}), generators)

	return virtualMachineScaleSetStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStatusARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationStatusARMGenerator())
	gens["Identity"] = gen.PtrOf(VirtualMachineScaleSetIdentityStatusARMGenerator())
	gens["Plan"] = gen.PtrOf(PlanStatusARMGenerator())
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPropertiesStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuStatusARMGenerator())
}

func Test_ExtendedLocation_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationStatusARM, ExtendedLocationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationStatusARM runs a test to see if a specific instance of ExtendedLocation_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationStatusARM(subject ExtendedLocation_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual ExtendedLocation_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of ExtendedLocation_StatusARM instances for property testing - lazily
//instantiated by ExtendedLocationStatusARMGenerator()
var extendedLocationStatusARMGenerator gopter.Gen

// ExtendedLocationStatusARMGenerator returns a generator of ExtendedLocation_StatusARM instances for property testing.
func ExtendedLocationStatusARMGenerator() gopter.Gen {
	if extendedLocationStatusARMGenerator != nil {
		return extendedLocationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationStatusARM(generators)
	extendedLocationStatusARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_StatusARM{}), generators)

	return extendedLocationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ExtendedLocationType_StatusEdgeZone))
}

func Test_Plan_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Plan_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlanStatusARM, PlanStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlanStatusARM runs a test to see if a specific instance of Plan_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPlanStatusARM(subject Plan_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual Plan_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of Plan_StatusARM instances for property testing - lazily instantiated
//by PlanStatusARMGenerator()
var planStatusARMGenerator gopter.Gen

// PlanStatusARMGenerator returns a generator of Plan_StatusARM instances for property testing.
func PlanStatusARMGenerator() gopter.Gen {
	if planStatusARMGenerator != nil {
		return planStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlanStatusARM(generators)
	planStatusARMGenerator = gen.Struct(reflect.TypeOf(Plan_StatusARM{}), generators)

	return planStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPlanStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlanStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
}

func Test_Sku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuStatusARM, SkuStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuStatusARM runs a test to see if a specific instance of Sku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuStatusARM(subject Sku_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual Sku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of Sku_StatusARM instances for property testing - lazily instantiated
//by SkuStatusARMGenerator()
var skuStatusARMGenerator gopter.Gen

// SkuStatusARMGenerator returns a generator of Sku_StatusARM instances for property testing.
func SkuStatusARMGenerator() gopter.Gen {
	if skuStatusARMGenerator != nil {
		return skuStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuStatusARM(generators)
	skuStatusARMGenerator = gen.Struct(reflect.TypeOf(Sku_StatusARM{}), generators)

	return skuStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuStatusARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentityStatusARM, VirtualMachineScaleSetIdentityStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentityStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentityStatusARM(subject VirtualMachineScaleSetIdentity_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetIdentity_StatusARM instances for property
//testing - lazily instantiated by
//VirtualMachineScaleSetIdentityStatusARMGenerator()
var virtualMachineScaleSetIdentityStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentityStatusARMGenerator returns a generator of VirtualMachineScaleSetIdentity_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetIdentityStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIdentityStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentityStatusARMGenerator != nil {
		return virtualMachineScaleSetIdentityStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusARM(generators)
	virtualMachineScaleSetIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusARM(generators)
	virtualMachineScaleSetIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_StatusARM{}), generators)

	return virtualMachineScaleSetIdentityStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetIdentityStatusTypeNone, VirtualMachineScaleSetIdentityStatusTypeSystemAssigned, VirtualMachineScaleSetIdentityStatusTypeSystemAssignedUserAssigned, VirtualMachineScaleSetIdentityStatusTypeUserAssigned))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), VirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator())
}

func Test_VirtualMachineScaleSetProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPropertiesStatusARM, VirtualMachineScaleSetPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPropertiesStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPropertiesStatusARM(subject VirtualMachineScaleSetProperties_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetProperties_StatusARM instances for property
//testing - lazily instantiated by
//VirtualMachineScaleSetPropertiesStatusARMGenerator()
var virtualMachineScaleSetPropertiesStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetPropertiesStatusARMGenerator returns a generator of VirtualMachineScaleSetProperties_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPropertiesStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPropertiesStatusARMGenerator != nil {
		return virtualMachineScaleSetPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesStatusARM(generators)
	virtualMachineScaleSetPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPropertiesStatusARM(generators)
	virtualMachineScaleSetPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetProperties_StatusARM{}), generators)

	return virtualMachineScaleSetPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["DoNotRunExtensionsOnOverprovisionedVMs"] = gen.PtrOf(gen.Bool())
	gens["OrchestrationMode"] = gen.PtrOf(gen.OneConstOf(OrchestrationMode_StatusFlexible, OrchestrationMode_StatusUniform))
	gens["Overprovision"] = gen.PtrOf(gen.Bool())
	gens["PlatformFaultDomainCount"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["SinglePlacementGroup"] = gen.PtrOf(gen.Bool())
	gens["UniqueId"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneBalance"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["AdditionalCapabilities"] = gen.PtrOf(AdditionalCapabilitiesStatusARMGenerator())
	gens["AutomaticRepairsPolicy"] = gen.PtrOf(AutomaticRepairsPolicyStatusARMGenerator())
	gens["HostGroup"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["ProximityPlacementGroup"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["ScaleInPolicy"] = gen.PtrOf(ScaleInPolicyStatusARMGenerator())
	gens["UpgradePolicy"] = gen.PtrOf(UpgradePolicyStatusARMGenerator())
	gens["VirtualMachineProfile"] = gen.PtrOf(VirtualMachineScaleSetVMProfileStatusARMGenerator())
}

func Test_AdditionalCapabilities_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalCapabilities_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalCapabilitiesStatusARM, AdditionalCapabilitiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalCapabilitiesStatusARM runs a test to see if a specific instance of AdditionalCapabilities_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalCapabilitiesStatusARM(subject AdditionalCapabilities_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual AdditionalCapabilities_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of AdditionalCapabilities_StatusARM instances for property testing -
//lazily instantiated by AdditionalCapabilitiesStatusARMGenerator()
var additionalCapabilitiesStatusARMGenerator gopter.Gen

// AdditionalCapabilitiesStatusARMGenerator returns a generator of AdditionalCapabilities_StatusARM instances for property testing.
func AdditionalCapabilitiesStatusARMGenerator() gopter.Gen {
	if additionalCapabilitiesStatusARMGenerator != nil {
		return additionalCapabilitiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalCapabilitiesStatusARM(generators)
	additionalCapabilitiesStatusARMGenerator = gen.Struct(reflect.TypeOf(AdditionalCapabilities_StatusARM{}), generators)

	return additionalCapabilitiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalCapabilitiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalCapabilitiesStatusARM(gens map[string]gopter.Gen) {
	gens["UltraSSDEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_AutomaticRepairsPolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticRepairsPolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticRepairsPolicyStatusARM, AutomaticRepairsPolicyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticRepairsPolicyStatusARM runs a test to see if a specific instance of AutomaticRepairsPolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticRepairsPolicyStatusARM(subject AutomaticRepairsPolicy_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual AutomaticRepairsPolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of AutomaticRepairsPolicy_StatusARM instances for property testing -
//lazily instantiated by AutomaticRepairsPolicyStatusARMGenerator()
var automaticRepairsPolicyStatusARMGenerator gopter.Gen

// AutomaticRepairsPolicyStatusARMGenerator returns a generator of AutomaticRepairsPolicy_StatusARM instances for property testing.
func AutomaticRepairsPolicyStatusARMGenerator() gopter.Gen {
	if automaticRepairsPolicyStatusARMGenerator != nil {
		return automaticRepairsPolicyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticRepairsPolicyStatusARM(generators)
	automaticRepairsPolicyStatusARMGenerator = gen.Struct(reflect.TypeOf(AutomaticRepairsPolicy_StatusARM{}), generators)

	return automaticRepairsPolicyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticRepairsPolicyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticRepairsPolicyStatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["GracePeriod"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScaleInPolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScaleInPolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScaleInPolicyStatusARM, ScaleInPolicyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScaleInPolicyStatusARM runs a test to see if a specific instance of ScaleInPolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScaleInPolicyStatusARM(subject ScaleInPolicy_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual ScaleInPolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of ScaleInPolicy_StatusARM instances for property testing - lazily
//instantiated by ScaleInPolicyStatusARMGenerator()
var scaleInPolicyStatusARMGenerator gopter.Gen

// ScaleInPolicyStatusARMGenerator returns a generator of ScaleInPolicy_StatusARM instances for property testing.
func ScaleInPolicyStatusARMGenerator() gopter.Gen {
	if scaleInPolicyStatusARMGenerator != nil {
		return scaleInPolicyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScaleInPolicyStatusARM(generators)
	scaleInPolicyStatusARMGenerator = gen.Struct(reflect.TypeOf(ScaleInPolicy_StatusARM{}), generators)

	return scaleInPolicyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForScaleInPolicyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScaleInPolicyStatusARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(gen.OneConstOf(ScaleInPolicyStatusRulesDefault, ScaleInPolicyStatusRulesNewestVM, ScaleInPolicyStatusRulesOldestVM))
}

func Test_SubResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResourceStatusARM, SubResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResourceStatusARM runs a test to see if a specific instance of SubResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResourceStatusARM(subject SubResource_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual SubResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of SubResource_StatusARM instances for property testing - lazily
//instantiated by SubResourceStatusARMGenerator()
var subResourceStatusARMGenerator gopter.Gen

// SubResourceStatusARMGenerator returns a generator of SubResource_StatusARM instances for property testing.
func SubResourceStatusARMGenerator() gopter.Gen {
	if subResourceStatusARMGenerator != nil {
		return subResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResourceStatusARM(generators)
	subResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(SubResource_StatusARM{}), generators)

	return subResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResourceStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UpgradePolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UpgradePolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUpgradePolicyStatusARM, UpgradePolicyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUpgradePolicyStatusARM runs a test to see if a specific instance of UpgradePolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUpgradePolicyStatusARM(subject UpgradePolicy_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual UpgradePolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of UpgradePolicy_StatusARM instances for property testing - lazily
//instantiated by UpgradePolicyStatusARMGenerator()
var upgradePolicyStatusARMGenerator gopter.Gen

// UpgradePolicyStatusARMGenerator returns a generator of UpgradePolicy_StatusARM instances for property testing.
// We first initialize upgradePolicyStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UpgradePolicyStatusARMGenerator() gopter.Gen {
	if upgradePolicyStatusARMGenerator != nil {
		return upgradePolicyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicyStatusARM(generators)
	upgradePolicyStatusARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUpgradePolicyStatusARM(generators)
	AddRelatedPropertyGeneratorsForUpgradePolicyStatusARM(generators)
	upgradePolicyStatusARMGenerator = gen.Struct(reflect.TypeOf(UpgradePolicy_StatusARM{}), generators)

	return upgradePolicyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForUpgradePolicyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUpgradePolicyStatusARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(UpgradePolicyStatusModeAutomatic, UpgradePolicyStatusModeManual, UpgradePolicyStatusModeRolling))
}

// AddRelatedPropertyGeneratorsForUpgradePolicyStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUpgradePolicyStatusARM(gens map[string]gopter.Gen) {
	gens["AutomaticOSUpgradePolicy"] = gen.PtrOf(AutomaticOSUpgradePolicyStatusARMGenerator())
	gens["RollingUpgradePolicy"] = gen.PtrOf(RollingUpgradePolicyStatusARMGenerator())
}

func Test_VirtualMachineScaleSetIdentity_Status_UserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIdentity_Status_UserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARM, VirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARM runs a test to see if a specific instance of VirtualMachineScaleSetIdentity_Status_UserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARM(subject VirtualMachineScaleSetIdentity_Status_UserAssignedIdentitiesARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetIdentity_Status_UserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetIdentity_Status_UserAssignedIdentitiesARM
//instances for property testing - lazily instantiated by
//VirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator()
var virtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator gopter.Gen

// VirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator returns a generator of VirtualMachineScaleSetIdentity_Status_UserAssignedIdentitiesARM instances for property testing.
func VirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator != nil {
		return virtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARM(generators)
	virtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIdentity_Status_UserAssignedIdentitiesARM{}), generators)

	return virtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIdentityStatusUserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetVMProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetVMProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetVMProfileStatusARM, VirtualMachineScaleSetVMProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetVMProfileStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetVMProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetVMProfileStatusARM(subject VirtualMachineScaleSetVMProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetVMProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetVMProfile_StatusARM instances for property
//testing - lazily instantiated by
//VirtualMachineScaleSetVMProfileStatusARMGenerator()
var virtualMachineScaleSetVMProfileStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetVMProfileStatusARMGenerator returns a generator of VirtualMachineScaleSetVMProfile_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetVMProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetVMProfileStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetVMProfileStatusARMGenerator != nil {
		return virtualMachineScaleSetVMProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileStatusARM(generators)
	virtualMachineScaleSetVMProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfileStatusARM(generators)
	virtualMachineScaleSetVMProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetVMProfile_StatusARM{}), generators)

	return virtualMachineScaleSetVMProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetVMProfileStatusARM(gens map[string]gopter.Gen) {
	gens["EvictionPolicy"] = gen.PtrOf(gen.OneConstOf(EvictionPolicy_StatusDeallocate, EvictionPolicy_StatusDelete))
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.OneConstOf(Priority_StatusLow, Priority_StatusRegular, Priority_StatusSpot))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetVMProfileStatusARM(gens map[string]gopter.Gen) {
	gens["BillingProfile"] = gen.PtrOf(BillingProfileStatusARMGenerator())
	gens["DiagnosticsProfile"] = gen.PtrOf(DiagnosticsProfileStatusARMGenerator())
	gens["ExtensionProfile"] = gen.PtrOf(VirtualMachineScaleSetExtensionProfileStatusARMGenerator())
	gens["NetworkProfile"] = gen.PtrOf(VirtualMachineScaleSetNetworkProfileStatusARMGenerator())
	gens["OsProfile"] = gen.PtrOf(VirtualMachineScaleSetOSProfileStatusARMGenerator())
	gens["ScheduledEventsProfile"] = gen.PtrOf(ScheduledEventsProfileStatusARMGenerator())
	gens["SecurityProfile"] = gen.PtrOf(SecurityProfileStatusARMGenerator())
	gens["StorageProfile"] = gen.PtrOf(VirtualMachineScaleSetStorageProfileStatusARMGenerator())
}

func Test_AutomaticOSUpgradePolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutomaticOSUpgradePolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutomaticOSUpgradePolicyStatusARM, AutomaticOSUpgradePolicyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutomaticOSUpgradePolicyStatusARM runs a test to see if a specific instance of AutomaticOSUpgradePolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutomaticOSUpgradePolicyStatusARM(subject AutomaticOSUpgradePolicy_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual AutomaticOSUpgradePolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of AutomaticOSUpgradePolicy_StatusARM instances for property testing -
//lazily instantiated by AutomaticOSUpgradePolicyStatusARMGenerator()
var automaticOSUpgradePolicyStatusARMGenerator gopter.Gen

// AutomaticOSUpgradePolicyStatusARMGenerator returns a generator of AutomaticOSUpgradePolicy_StatusARM instances for property testing.
func AutomaticOSUpgradePolicyStatusARMGenerator() gopter.Gen {
	if automaticOSUpgradePolicyStatusARMGenerator != nil {
		return automaticOSUpgradePolicyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicyStatusARM(generators)
	automaticOSUpgradePolicyStatusARMGenerator = gen.Struct(reflect.TypeOf(AutomaticOSUpgradePolicy_StatusARM{}), generators)

	return automaticOSUpgradePolicyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutomaticOSUpgradePolicyStatusARM(gens map[string]gopter.Gen) {
	gens["DisableAutomaticRollback"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticOSUpgrade"] = gen.PtrOf(gen.Bool())
}

func Test_BillingProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BillingProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBillingProfileStatusARM, BillingProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBillingProfileStatusARM runs a test to see if a specific instance of BillingProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBillingProfileStatusARM(subject BillingProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual BillingProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of BillingProfile_StatusARM instances for property testing - lazily
//instantiated by BillingProfileStatusARMGenerator()
var billingProfileStatusARMGenerator gopter.Gen

// BillingProfileStatusARMGenerator returns a generator of BillingProfile_StatusARM instances for property testing.
func BillingProfileStatusARMGenerator() gopter.Gen {
	if billingProfileStatusARMGenerator != nil {
		return billingProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBillingProfileStatusARM(generators)
	billingProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(BillingProfile_StatusARM{}), generators)

	return billingProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForBillingProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBillingProfileStatusARM(gens map[string]gopter.Gen) {
	gens["MaxPrice"] = gen.PtrOf(gen.Float64())
}

func Test_DiagnosticsProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiagnosticsProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiagnosticsProfileStatusARM, DiagnosticsProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiagnosticsProfileStatusARM runs a test to see if a specific instance of DiagnosticsProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiagnosticsProfileStatusARM(subject DiagnosticsProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual DiagnosticsProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of DiagnosticsProfile_StatusARM instances for property testing -
//lazily instantiated by DiagnosticsProfileStatusARMGenerator()
var diagnosticsProfileStatusARMGenerator gopter.Gen

// DiagnosticsProfileStatusARMGenerator returns a generator of DiagnosticsProfile_StatusARM instances for property testing.
func DiagnosticsProfileStatusARMGenerator() gopter.Gen {
	if diagnosticsProfileStatusARMGenerator != nil {
		return diagnosticsProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDiagnosticsProfileStatusARM(generators)
	diagnosticsProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(DiagnosticsProfile_StatusARM{}), generators)

	return diagnosticsProfileStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForDiagnosticsProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDiagnosticsProfileStatusARM(gens map[string]gopter.Gen) {
	gens["BootDiagnostics"] = gen.PtrOf(BootDiagnosticsStatusARMGenerator())
}

func Test_RollingUpgradePolicy_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RollingUpgradePolicy_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRollingUpgradePolicyStatusARM, RollingUpgradePolicyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRollingUpgradePolicyStatusARM runs a test to see if a specific instance of RollingUpgradePolicy_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRollingUpgradePolicyStatusARM(subject RollingUpgradePolicy_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual RollingUpgradePolicy_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of RollingUpgradePolicy_StatusARM instances for property testing -
//lazily instantiated by RollingUpgradePolicyStatusARMGenerator()
var rollingUpgradePolicyStatusARMGenerator gopter.Gen

// RollingUpgradePolicyStatusARMGenerator returns a generator of RollingUpgradePolicy_StatusARM instances for property testing.
func RollingUpgradePolicyStatusARMGenerator() gopter.Gen {
	if rollingUpgradePolicyStatusARMGenerator != nil {
		return rollingUpgradePolicyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRollingUpgradePolicyStatusARM(generators)
	rollingUpgradePolicyStatusARMGenerator = gen.Struct(reflect.TypeOf(RollingUpgradePolicy_StatusARM{}), generators)

	return rollingUpgradePolicyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForRollingUpgradePolicyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRollingUpgradePolicyStatusARM(gens map[string]gopter.Gen) {
	gens["EnableCrossZoneUpgrade"] = gen.PtrOf(gen.Bool())
	gens["MaxBatchInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyInstancePercent"] = gen.PtrOf(gen.Int())
	gens["MaxUnhealthyUpgradedInstancePercent"] = gen.PtrOf(gen.Int())
	gens["PauseTimeBetweenBatches"] = gen.PtrOf(gen.AlphaString())
	gens["PrioritizeUnhealthyInstances"] = gen.PtrOf(gen.Bool())
}

func Test_ScheduledEventsProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScheduledEventsProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScheduledEventsProfileStatusARM, ScheduledEventsProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScheduledEventsProfileStatusARM runs a test to see if a specific instance of ScheduledEventsProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScheduledEventsProfileStatusARM(subject ScheduledEventsProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual ScheduledEventsProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of ScheduledEventsProfile_StatusARM instances for property testing -
//lazily instantiated by ScheduledEventsProfileStatusARMGenerator()
var scheduledEventsProfileStatusARMGenerator gopter.Gen

// ScheduledEventsProfileStatusARMGenerator returns a generator of ScheduledEventsProfile_StatusARM instances for property testing.
func ScheduledEventsProfileStatusARMGenerator() gopter.Gen {
	if scheduledEventsProfileStatusARMGenerator != nil {
		return scheduledEventsProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScheduledEventsProfileStatusARM(generators)
	scheduledEventsProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(ScheduledEventsProfile_StatusARM{}), generators)

	return scheduledEventsProfileStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForScheduledEventsProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScheduledEventsProfileStatusARM(gens map[string]gopter.Gen) {
	gens["TerminateNotificationProfile"] = gen.PtrOf(TerminateNotificationProfileStatusARMGenerator())
}

func Test_SecurityProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityProfileStatusARM, SecurityProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityProfileStatusARM runs a test to see if a specific instance of SecurityProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityProfileStatusARM(subject SecurityProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual SecurityProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of SecurityProfile_StatusARM instances for property testing - lazily
//instantiated by SecurityProfileStatusARMGenerator()
var securityProfileStatusARMGenerator gopter.Gen

// SecurityProfileStatusARMGenerator returns a generator of SecurityProfile_StatusARM instances for property testing.
// We first initialize securityProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SecurityProfileStatusARMGenerator() gopter.Gen {
	if securityProfileStatusARMGenerator != nil {
		return securityProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityProfileStatusARM(generators)
	securityProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(SecurityProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForSecurityProfileStatusARM(generators)
	securityProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(SecurityProfile_StatusARM{}), generators)

	return securityProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityProfileStatusARM(gens map[string]gopter.Gen) {
	gens["EncryptionAtHost"] = gen.PtrOf(gen.Bool())
	gens["SecurityType"] = gen.PtrOf(gen.OneConstOf(SecurityProfileStatusSecurityTypeTrustedLaunch))
}

// AddRelatedPropertyGeneratorsForSecurityProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSecurityProfileStatusARM(gens map[string]gopter.Gen) {
	gens["UefiSettings"] = gen.PtrOf(UefiSettingsStatusARMGenerator())
}

func Test_VirtualMachineScaleSetExtensionProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfileStatusARM, VirtualMachineScaleSetExtensionProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfileStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionProfileStatusARM(subject VirtualMachineScaleSetExtensionProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetExtensionProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetExtensionProfile_StatusARM instances for
//property testing - lazily instantiated by
//VirtualMachineScaleSetExtensionProfileStatusARMGenerator()
var virtualMachineScaleSetExtensionProfileStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionProfileStatusARMGenerator returns a generator of VirtualMachineScaleSetExtensionProfile_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetExtensionProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtensionProfileStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionProfileStatusARMGenerator != nil {
		return virtualMachineScaleSetExtensionProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileStatusARM(generators)
	virtualMachineScaleSetExtensionProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileStatusARM(generators)
	virtualMachineScaleSetExtensionProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProfile_StatusARM{}), generators)

	return virtualMachineScaleSetExtensionProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileStatusARM(gens map[string]gopter.Gen) {
	gens["ExtensionsTimeBudget"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionProfileStatusARM(gens map[string]gopter.Gen) {
	gens["Extensions"] = gen.SliceOf(VirtualMachineScaleSetExtensionStatusARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfileStatusARM, VirtualMachineScaleSetNetworkProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfileStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkProfileStatusARM(subject VirtualMachineScaleSetNetworkProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetNetworkProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetNetworkProfile_StatusARM instances for
//property testing - lazily instantiated by
//VirtualMachineScaleSetNetworkProfileStatusARMGenerator()
var virtualMachineScaleSetNetworkProfileStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkProfileStatusARMGenerator returns a generator of VirtualMachineScaleSetNetworkProfile_StatusARM instances for property testing.
func VirtualMachineScaleSetNetworkProfileStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkProfileStatusARMGenerator != nil {
		return virtualMachineScaleSetNetworkProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileStatusARM(generators)
	virtualMachineScaleSetNetworkProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkProfile_StatusARM{}), generators)

	return virtualMachineScaleSetNetworkProfileStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkProfileStatusARM(gens map[string]gopter.Gen) {
	gens["HealthProbe"] = gen.PtrOf(ApiEntityReferenceStatusARMGenerator())
	gens["NetworkInterfaceConfigurations"] = gen.SliceOf(VirtualMachineScaleSetNetworkConfigurationStatusARMGenerator())
}

func Test_VirtualMachineScaleSetOSProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSProfileStatusARM, VirtualMachineScaleSetOSProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSProfileStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetOSProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSProfileStatusARM(subject VirtualMachineScaleSetOSProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetOSProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetOSProfile_StatusARM instances for property
//testing - lazily instantiated by
//VirtualMachineScaleSetOSProfileStatusARMGenerator()
var virtualMachineScaleSetOSProfileStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetOSProfileStatusARMGenerator returns a generator of VirtualMachineScaleSetOSProfile_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetOSProfileStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSProfileStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSProfileStatusARMGenerator != nil {
		return virtualMachineScaleSetOSProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileStatusARM(generators)
	virtualMachineScaleSetOSProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfileStatusARM(generators)
	virtualMachineScaleSetOSProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSProfile_StatusARM{}), generators)

	return virtualMachineScaleSetOSProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSProfileStatusARM(gens map[string]gopter.Gen) {
	gens["AdminPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AdminUsername"] = gen.PtrOf(gen.AlphaString())
	gens["ComputerNamePrefix"] = gen.PtrOf(gen.AlphaString())
	gens["CustomData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSProfileStatusARM(gens map[string]gopter.Gen) {
	gens["LinuxConfiguration"] = gen.PtrOf(LinuxConfigurationStatusARMGenerator())
	gens["Secrets"] = gen.SliceOf(VaultSecretGroupStatusARMGenerator())
	gens["WindowsConfiguration"] = gen.PtrOf(WindowsConfigurationStatusARMGenerator())
}

func Test_VirtualMachineScaleSetStorageProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetStorageProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetStorageProfileStatusARM, VirtualMachineScaleSetStorageProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetStorageProfileStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetStorageProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetStorageProfileStatusARM(subject VirtualMachineScaleSetStorageProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetStorageProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetStorageProfile_StatusARM instances for
//property testing - lazily instantiated by
//VirtualMachineScaleSetStorageProfileStatusARMGenerator()
var virtualMachineScaleSetStorageProfileStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetStorageProfileStatusARMGenerator returns a generator of VirtualMachineScaleSetStorageProfile_StatusARM instances for property testing.
func VirtualMachineScaleSetStorageProfileStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetStorageProfileStatusARMGenerator != nil {
		return virtualMachineScaleSetStorageProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfileStatusARM(generators)
	virtualMachineScaleSetStorageProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetStorageProfile_StatusARM{}), generators)

	return virtualMachineScaleSetStorageProfileStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfileStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetStorageProfileStatusARM(gens map[string]gopter.Gen) {
	gens["DataDisks"] = gen.SliceOf(VirtualMachineScaleSetDataDiskStatusARMGenerator())
	gens["ImageReference"] = gen.PtrOf(ImageReferenceStatusARMGenerator())
	gens["OsDisk"] = gen.PtrOf(VirtualMachineScaleSetOSDiskStatusARMGenerator())
}

func Test_ApiEntityReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiEntityReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiEntityReferenceStatusARM, ApiEntityReferenceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiEntityReferenceStatusARM runs a test to see if a specific instance of ApiEntityReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiEntityReferenceStatusARM(subject ApiEntityReference_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual ApiEntityReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of ApiEntityReference_StatusARM instances for property testing -
//lazily instantiated by ApiEntityReferenceStatusARMGenerator()
var apiEntityReferenceStatusARMGenerator gopter.Gen

// ApiEntityReferenceStatusARMGenerator returns a generator of ApiEntityReference_StatusARM instances for property testing.
func ApiEntityReferenceStatusARMGenerator() gopter.Gen {
	if apiEntityReferenceStatusARMGenerator != nil {
		return apiEntityReferenceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiEntityReferenceStatusARM(generators)
	apiEntityReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(ApiEntityReference_StatusARM{}), generators)

	return apiEntityReferenceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForApiEntityReferenceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiEntityReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_BootDiagnostics_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BootDiagnostics_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBootDiagnosticsStatusARM, BootDiagnosticsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBootDiagnosticsStatusARM runs a test to see if a specific instance of BootDiagnostics_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBootDiagnosticsStatusARM(subject BootDiagnostics_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual BootDiagnostics_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of BootDiagnostics_StatusARM instances for property testing - lazily
//instantiated by BootDiagnosticsStatusARMGenerator()
var bootDiagnosticsStatusARMGenerator gopter.Gen

// BootDiagnosticsStatusARMGenerator returns a generator of BootDiagnostics_StatusARM instances for property testing.
func BootDiagnosticsStatusARMGenerator() gopter.Gen {
	if bootDiagnosticsStatusARMGenerator != nil {
		return bootDiagnosticsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBootDiagnosticsStatusARM(generators)
	bootDiagnosticsStatusARMGenerator = gen.Struct(reflect.TypeOf(BootDiagnostics_StatusARM{}), generators)

	return bootDiagnosticsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForBootDiagnosticsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBootDiagnosticsStatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["StorageUri"] = gen.PtrOf(gen.AlphaString())
}

func Test_ImageReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageReferenceStatusARM, ImageReferenceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageReferenceStatusARM runs a test to see if a specific instance of ImageReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageReferenceStatusARM(subject ImageReference_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual ImageReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of ImageReference_StatusARM instances for property testing - lazily
//instantiated by ImageReferenceStatusARMGenerator()
var imageReferenceStatusARMGenerator gopter.Gen

// ImageReferenceStatusARMGenerator returns a generator of ImageReference_StatusARM instances for property testing.
func ImageReferenceStatusARMGenerator() gopter.Gen {
	if imageReferenceStatusARMGenerator != nil {
		return imageReferenceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageReferenceStatusARM(generators)
	imageReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(ImageReference_StatusARM{}), generators)

	return imageReferenceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForImageReferenceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["ExactVersion"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Offer"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
	gens["Sku"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

func Test_LinuxConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LinuxConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLinuxConfigurationStatusARM, LinuxConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLinuxConfigurationStatusARM runs a test to see if a specific instance of LinuxConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLinuxConfigurationStatusARM(subject LinuxConfiguration_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual LinuxConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of LinuxConfiguration_StatusARM instances for property testing -
//lazily instantiated by LinuxConfigurationStatusARMGenerator()
var linuxConfigurationStatusARMGenerator gopter.Gen

// LinuxConfigurationStatusARMGenerator returns a generator of LinuxConfiguration_StatusARM instances for property testing.
// We first initialize linuxConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func LinuxConfigurationStatusARMGenerator() gopter.Gen {
	if linuxConfigurationStatusARMGenerator != nil {
		return linuxConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxConfigurationStatusARM(generators)
	linuxConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(LinuxConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForLinuxConfigurationStatusARM(generators)
	linuxConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(LinuxConfiguration_StatusARM{}), generators)

	return linuxConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLinuxConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLinuxConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["DisablePasswordAuthentication"] = gen.PtrOf(gen.Bool())
	gens["ProvisionVMAgent"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForLinuxConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForLinuxConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["PatchSettings"] = gen.PtrOf(LinuxPatchSettingsStatusARMGenerator())
	gens["Ssh"] = gen.PtrOf(SshConfigurationStatusARMGenerator())
}

func Test_TerminateNotificationProfile_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of TerminateNotificationProfile_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForTerminateNotificationProfileStatusARM, TerminateNotificationProfileStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForTerminateNotificationProfileStatusARM runs a test to see if a specific instance of TerminateNotificationProfile_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForTerminateNotificationProfileStatusARM(subject TerminateNotificationProfile_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual TerminateNotificationProfile_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of TerminateNotificationProfile_StatusARM instances for property
//testing - lazily instantiated by TerminateNotificationProfileStatusARMGenerator()
var terminateNotificationProfileStatusARMGenerator gopter.Gen

// TerminateNotificationProfileStatusARMGenerator returns a generator of TerminateNotificationProfile_StatusARM instances for property testing.
func TerminateNotificationProfileStatusARMGenerator() gopter.Gen {
	if terminateNotificationProfileStatusARMGenerator != nil {
		return terminateNotificationProfileStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForTerminateNotificationProfileStatusARM(generators)
	terminateNotificationProfileStatusARMGenerator = gen.Struct(reflect.TypeOf(TerminateNotificationProfile_StatusARM{}), generators)

	return terminateNotificationProfileStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForTerminateNotificationProfileStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForTerminateNotificationProfileStatusARM(gens map[string]gopter.Gen) {
	gens["Enable"] = gen.PtrOf(gen.Bool())
	gens["NotBeforeTimeout"] = gen.PtrOf(gen.AlphaString())
}

func Test_UefiSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UefiSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUefiSettingsStatusARM, UefiSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUefiSettingsStatusARM runs a test to see if a specific instance of UefiSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUefiSettingsStatusARM(subject UefiSettings_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual UefiSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of UefiSettings_StatusARM instances for property testing - lazily
//instantiated by UefiSettingsStatusARMGenerator()
var uefiSettingsStatusARMGenerator gopter.Gen

// UefiSettingsStatusARMGenerator returns a generator of UefiSettings_StatusARM instances for property testing.
func UefiSettingsStatusARMGenerator() gopter.Gen {
	if uefiSettingsStatusARMGenerator != nil {
		return uefiSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUefiSettingsStatusARM(generators)
	uefiSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(UefiSettings_StatusARM{}), generators)

	return uefiSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForUefiSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUefiSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["SecureBootEnabled"] = gen.PtrOf(gen.Bool())
	gens["VTpmEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_VaultSecretGroup_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VaultSecretGroup_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultSecretGroupStatusARM, VaultSecretGroupStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultSecretGroupStatusARM runs a test to see if a specific instance of VaultSecretGroup_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultSecretGroupStatusARM(subject VaultSecretGroup_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VaultSecretGroup_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VaultSecretGroup_StatusARM instances for property testing - lazily
//instantiated by VaultSecretGroupStatusARMGenerator()
var vaultSecretGroupStatusARMGenerator gopter.Gen

// VaultSecretGroupStatusARMGenerator returns a generator of VaultSecretGroup_StatusARM instances for property testing.
func VaultSecretGroupStatusARMGenerator() gopter.Gen {
	if vaultSecretGroupStatusARMGenerator != nil {
		return vaultSecretGroupStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForVaultSecretGroupStatusARM(generators)
	vaultSecretGroupStatusARMGenerator = gen.Struct(reflect.TypeOf(VaultSecretGroup_StatusARM{}), generators)

	return vaultSecretGroupStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForVaultSecretGroupStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVaultSecretGroupStatusARM(gens map[string]gopter.Gen) {
	gens["SourceVault"] = gen.PtrOf(SubResourceStatusARMGenerator())
	gens["VaultCertificates"] = gen.SliceOf(VaultCertificateStatusARMGenerator())
}

func Test_VirtualMachineScaleSetDataDisk_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetDataDisk_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetDataDiskStatusARM, VirtualMachineScaleSetDataDiskStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetDataDiskStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetDataDisk_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetDataDiskStatusARM(subject VirtualMachineScaleSetDataDisk_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetDataDisk_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetDataDisk_StatusARM instances for property
//testing - lazily instantiated by
//VirtualMachineScaleSetDataDiskStatusARMGenerator()
var virtualMachineScaleSetDataDiskStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetDataDiskStatusARMGenerator returns a generator of VirtualMachineScaleSetDataDisk_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetDataDiskStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetDataDiskStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetDataDiskStatusARMGenerator != nil {
		return virtualMachineScaleSetDataDiskStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskStatusARM(generators)
	virtualMachineScaleSetDataDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDiskStatusARM(generators)
	virtualMachineScaleSetDataDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetDataDisk_StatusARM{}), generators)

	return virtualMachineScaleSetDataDiskStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetDataDiskStatusARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_StatusNone, Caching_StatusReadOnly, Caching_StatusReadWrite))
	gens["CreateOption"] = gen.OneConstOf(CreateOption_StatusAttach, CreateOption_StatusEmpty, CreateOption_StatusFromImage)
	gens["DiskIOPSReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskMBpsReadWrite"] = gen.PtrOf(gen.Int())
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Lun"] = gen.Int()
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDiskStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetDataDiskStatusARM(gens map[string]gopter.Gen) {
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParametersStatusARMGenerator())
}

func Test_VirtualMachineScaleSetExtension_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtension_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionStatusARM, VirtualMachineScaleSetExtensionStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetExtension_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionStatusARM(subject VirtualMachineScaleSetExtension_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetExtension_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetExtension_StatusARM instances for property
//testing - lazily instantiated by
//VirtualMachineScaleSetExtensionStatusARMGenerator()
var virtualMachineScaleSetExtensionStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionStatusARMGenerator returns a generator of VirtualMachineScaleSetExtension_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetExtensionStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetExtensionStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionStatusARMGenerator != nil {
		return virtualMachineScaleSetExtensionStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionStatusARM(generators)
	virtualMachineScaleSetExtensionStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionStatusARM(generators)
	virtualMachineScaleSetExtensionStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtension_StatusARM{}), generators)

	return virtualMachineScaleSetExtensionStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetExtensionStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetExtensionPropertiesStatusARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationStatusARM, VirtualMachineScaleSetNetworkConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationStatusARM(subject VirtualMachineScaleSetNetworkConfiguration_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetNetworkConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetNetworkConfiguration_StatusARM instances for
//property testing - lazily instantiated by
//VirtualMachineScaleSetNetworkConfigurationStatusARMGenerator()
var virtualMachineScaleSetNetworkConfigurationStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationStatusARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfiguration_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationStatusARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationStatusARM(generators)
	virtualMachineScaleSetNetworkConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationStatusARM(generators)
	virtualMachineScaleSetNetworkConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfiguration_StatusARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator())
}

func Test_VirtualMachineScaleSetOSDisk_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetOSDisk_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetOSDiskStatusARM, VirtualMachineScaleSetOSDiskStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetOSDiskStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetOSDisk_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetOSDiskStatusARM(subject VirtualMachineScaleSetOSDisk_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetOSDisk_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetOSDisk_StatusARM instances for property
//testing - lazily instantiated by VirtualMachineScaleSetOSDiskStatusARMGenerator()
var virtualMachineScaleSetOSDiskStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetOSDiskStatusARMGenerator returns a generator of VirtualMachineScaleSetOSDisk_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetOSDiskStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetOSDiskStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetOSDiskStatusARMGenerator != nil {
		return virtualMachineScaleSetOSDiskStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskStatusARM(generators)
	virtualMachineScaleSetOSDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDiskStatusARM(generators)
	virtualMachineScaleSetOSDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetOSDisk_StatusARM{}), generators)

	return virtualMachineScaleSetOSDiskStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetOSDiskStatusARM(gens map[string]gopter.Gen) {
	gens["Caching"] = gen.PtrOf(gen.OneConstOf(Caching_StatusNone, Caching_StatusReadOnly, Caching_StatusReadWrite))
	gens["CreateOption"] = gen.OneConstOf(CreateOption_StatusAttach, CreateOption_StatusEmpty, CreateOption_StatusFromImage)
	gens["DiskSizeGB"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetOSDiskStatusOsTypeLinux, VirtualMachineScaleSetOSDiskStatusOsTypeWindows))
	gens["VhdContainers"] = gen.SliceOf(gen.AlphaString())
	gens["WriteAcceleratorEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDiskStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetOSDiskStatusARM(gens map[string]gopter.Gen) {
	gens["DiffDiskSettings"] = gen.PtrOf(DiffDiskSettingsStatusARMGenerator())
	gens["Image"] = gen.PtrOf(VirtualHardDiskStatusARMGenerator())
	gens["ManagedDisk"] = gen.PtrOf(VirtualMachineScaleSetManagedDiskParametersStatusARMGenerator())
}

func Test_WindowsConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WindowsConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWindowsConfigurationStatusARM, WindowsConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWindowsConfigurationStatusARM runs a test to see if a specific instance of WindowsConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWindowsConfigurationStatusARM(subject WindowsConfiguration_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual WindowsConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of WindowsConfiguration_StatusARM instances for property testing -
//lazily instantiated by WindowsConfigurationStatusARMGenerator()
var windowsConfigurationStatusARMGenerator gopter.Gen

// WindowsConfigurationStatusARMGenerator returns a generator of WindowsConfiguration_StatusARM instances for property testing.
// We first initialize windowsConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func WindowsConfigurationStatusARMGenerator() gopter.Gen {
	if windowsConfigurationStatusARMGenerator != nil {
		return windowsConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWindowsConfigurationStatusARM(generators)
	windowsConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(WindowsConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWindowsConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForWindowsConfigurationStatusARM(generators)
	windowsConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(WindowsConfiguration_StatusARM{}), generators)

	return windowsConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForWindowsConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWindowsConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["EnableAutomaticUpdates"] = gen.PtrOf(gen.Bool())
	gens["ProvisionVMAgent"] = gen.PtrOf(gen.Bool())
	gens["TimeZone"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForWindowsConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWindowsConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["AdditionalUnattendContent"] = gen.SliceOf(AdditionalUnattendContentStatusARMGenerator())
	gens["PatchSettings"] = gen.PtrOf(PatchSettingsStatusARMGenerator())
	gens["WinRM"] = gen.PtrOf(WinRMConfigurationStatusARMGenerator())
}

func Test_AdditionalUnattendContent_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalUnattendContent_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalUnattendContentStatusARM, AdditionalUnattendContentStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalUnattendContentStatusARM runs a test to see if a specific instance of AdditionalUnattendContent_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalUnattendContentStatusARM(subject AdditionalUnattendContent_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual AdditionalUnattendContent_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of AdditionalUnattendContent_StatusARM instances for property testing
//- lazily instantiated by AdditionalUnattendContentStatusARMGenerator()
var additionalUnattendContentStatusARMGenerator gopter.Gen

// AdditionalUnattendContentStatusARMGenerator returns a generator of AdditionalUnattendContent_StatusARM instances for property testing.
func AdditionalUnattendContentStatusARMGenerator() gopter.Gen {
	if additionalUnattendContentStatusARMGenerator != nil {
		return additionalUnattendContentStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalUnattendContentStatusARM(generators)
	additionalUnattendContentStatusARMGenerator = gen.Struct(reflect.TypeOf(AdditionalUnattendContent_StatusARM{}), generators)

	return additionalUnattendContentStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalUnattendContentStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalUnattendContentStatusARM(gens map[string]gopter.Gen) {
	gens["ComponentName"] = gen.PtrOf(gen.OneConstOf(AdditionalUnattendContentStatusComponentNameMicrosoftWindowsShellSetup))
	gens["Content"] = gen.PtrOf(gen.AlphaString())
	gens["PassName"] = gen.PtrOf(gen.OneConstOf(AdditionalUnattendContentStatusPassNameOobeSystem))
	gens["SettingName"] = gen.PtrOf(gen.OneConstOf(AdditionalUnattendContentStatusSettingNameAutoLogon, AdditionalUnattendContentStatusSettingNameFirstLogonCommands))
}

func Test_DiffDiskSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DiffDiskSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDiffDiskSettingsStatusARM, DiffDiskSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDiffDiskSettingsStatusARM runs a test to see if a specific instance of DiffDiskSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDiffDiskSettingsStatusARM(subject DiffDiskSettings_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual DiffDiskSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of DiffDiskSettings_StatusARM instances for property testing - lazily
//instantiated by DiffDiskSettingsStatusARMGenerator()
var diffDiskSettingsStatusARMGenerator gopter.Gen

// DiffDiskSettingsStatusARMGenerator returns a generator of DiffDiskSettings_StatusARM instances for property testing.
func DiffDiskSettingsStatusARMGenerator() gopter.Gen {
	if diffDiskSettingsStatusARMGenerator != nil {
		return diffDiskSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDiffDiskSettingsStatusARM(generators)
	diffDiskSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(DiffDiskSettings_StatusARM{}), generators)

	return diffDiskSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDiffDiskSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDiffDiskSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["Option"] = gen.PtrOf(gen.OneConstOf(DiffDiskOption_StatusLocal))
	gens["Placement"] = gen.PtrOf(gen.OneConstOf(DiffDiskPlacement_StatusCacheDisk, DiffDiskPlacement_StatusResourceDisk))
}

func Test_LinuxPatchSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LinuxPatchSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLinuxPatchSettingsStatusARM, LinuxPatchSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLinuxPatchSettingsStatusARM runs a test to see if a specific instance of LinuxPatchSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLinuxPatchSettingsStatusARM(subject LinuxPatchSettings_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual LinuxPatchSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of LinuxPatchSettings_StatusARM instances for property testing -
//lazily instantiated by LinuxPatchSettingsStatusARMGenerator()
var linuxPatchSettingsStatusARMGenerator gopter.Gen

// LinuxPatchSettingsStatusARMGenerator returns a generator of LinuxPatchSettings_StatusARM instances for property testing.
func LinuxPatchSettingsStatusARMGenerator() gopter.Gen {
	if linuxPatchSettingsStatusARMGenerator != nil {
		return linuxPatchSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLinuxPatchSettingsStatusARM(generators)
	linuxPatchSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(LinuxPatchSettings_StatusARM{}), generators)

	return linuxPatchSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLinuxPatchSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLinuxPatchSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["PatchMode"] = gen.PtrOf(gen.OneConstOf(LinuxPatchSettingsStatusPatchModeAutomaticByPlatform, LinuxPatchSettingsStatusPatchModeImageDefault))
}

func Test_PatchSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PatchSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPatchSettingsStatusARM, PatchSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPatchSettingsStatusARM runs a test to see if a specific instance of PatchSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPatchSettingsStatusARM(subject PatchSettings_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual PatchSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of PatchSettings_StatusARM instances for property testing - lazily
//instantiated by PatchSettingsStatusARMGenerator()
var patchSettingsStatusARMGenerator gopter.Gen

// PatchSettingsStatusARMGenerator returns a generator of PatchSettings_StatusARM instances for property testing.
func PatchSettingsStatusARMGenerator() gopter.Gen {
	if patchSettingsStatusARMGenerator != nil {
		return patchSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPatchSettingsStatusARM(generators)
	patchSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(PatchSettings_StatusARM{}), generators)

	return patchSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPatchSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPatchSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["EnableHotpatching"] = gen.PtrOf(gen.Bool())
	gens["PatchMode"] = gen.PtrOf(gen.OneConstOf(PatchSettingsStatusPatchModeAutomaticByOS, PatchSettingsStatusPatchModeAutomaticByPlatform, PatchSettingsStatusPatchModeManual))
}

func Test_SshConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SshConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSshConfigurationStatusARM, SshConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSshConfigurationStatusARM runs a test to see if a specific instance of SshConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSshConfigurationStatusARM(subject SshConfiguration_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual SshConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of SshConfiguration_StatusARM instances for property testing - lazily
//instantiated by SshConfigurationStatusARMGenerator()
var sshConfigurationStatusARMGenerator gopter.Gen

// SshConfigurationStatusARMGenerator returns a generator of SshConfiguration_StatusARM instances for property testing.
func SshConfigurationStatusARMGenerator() gopter.Gen {
	if sshConfigurationStatusARMGenerator != nil {
		return sshConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSshConfigurationStatusARM(generators)
	sshConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(SshConfiguration_StatusARM{}), generators)

	return sshConfigurationStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForSshConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSshConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["PublicKeys"] = gen.SliceOf(SshPublicKeyStatusARMGenerator())
}

func Test_VaultCertificate_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VaultCertificate_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultCertificateStatusARM, VaultCertificateStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultCertificateStatusARM runs a test to see if a specific instance of VaultCertificate_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultCertificateStatusARM(subject VaultCertificate_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VaultCertificate_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VaultCertificate_StatusARM instances for property testing - lazily
//instantiated by VaultCertificateStatusARMGenerator()
var vaultCertificateStatusARMGenerator gopter.Gen

// VaultCertificateStatusARMGenerator returns a generator of VaultCertificate_StatusARM instances for property testing.
func VaultCertificateStatusARMGenerator() gopter.Gen {
	if vaultCertificateStatusARMGenerator != nil {
		return vaultCertificateStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultCertificateStatusARM(generators)
	vaultCertificateStatusARMGenerator = gen.Struct(reflect.TypeOf(VaultCertificate_StatusARM{}), generators)

	return vaultCertificateStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVaultCertificateStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVaultCertificateStatusARM(gens map[string]gopter.Gen) {
	gens["CertificateStore"] = gen.PtrOf(gen.AlphaString())
	gens["CertificateUrl"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualHardDisk_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualHardDisk_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualHardDiskStatusARM, VirtualHardDiskStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualHardDiskStatusARM runs a test to see if a specific instance of VirtualHardDisk_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualHardDiskStatusARM(subject VirtualHardDisk_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualHardDisk_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualHardDisk_StatusARM instances for property testing - lazily
//instantiated by VirtualHardDiskStatusARMGenerator()
var virtualHardDiskStatusARMGenerator gopter.Gen

// VirtualHardDiskStatusARMGenerator returns a generator of VirtualHardDisk_StatusARM instances for property testing.
func VirtualHardDiskStatusARMGenerator() gopter.Gen {
	if virtualHardDiskStatusARMGenerator != nil {
		return virtualHardDiskStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualHardDiskStatusARM(generators)
	virtualHardDiskStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualHardDisk_StatusARM{}), generators)

	return virtualHardDiskStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualHardDiskStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualHardDiskStatusARM(gens map[string]gopter.Gen) {
	gens["Uri"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetExtensionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetExtensionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetExtensionPropertiesStatusARM, VirtualMachineScaleSetExtensionPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetExtensionPropertiesStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetExtensionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetExtensionPropertiesStatusARM(subject VirtualMachineScaleSetExtensionProperties_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetExtensionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetExtensionProperties_StatusARM instances for
//property testing - lazily instantiated by
//VirtualMachineScaleSetExtensionPropertiesStatusARMGenerator()
var virtualMachineScaleSetExtensionPropertiesStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetExtensionPropertiesStatusARMGenerator returns a generator of VirtualMachineScaleSetExtensionProperties_StatusARM instances for property testing.
func VirtualMachineScaleSetExtensionPropertiesStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetExtensionPropertiesStatusARMGenerator != nil {
		return virtualMachineScaleSetExtensionPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionPropertiesStatusARM(generators)
	virtualMachineScaleSetExtensionPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetExtensionProperties_StatusARM{}), generators)

	return virtualMachineScaleSetExtensionPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetExtensionPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradeMinorVersion"] = gen.PtrOf(gen.Bool())
	gens["EnableAutomaticUpgrade"] = gen.PtrOf(gen.Bool())
	gens["ForceUpdateTag"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisionAfterExtensions"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["TypeHandlerVersion"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetManagedDiskParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetManagedDiskParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParametersStatusARM, VirtualMachineScaleSetManagedDiskParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParametersStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetManagedDiskParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetManagedDiskParametersStatusARM(subject VirtualMachineScaleSetManagedDiskParameters_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetManagedDiskParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetManagedDiskParameters_StatusARM instances for
//property testing - lazily instantiated by
//VirtualMachineScaleSetManagedDiskParametersStatusARMGenerator()
var virtualMachineScaleSetManagedDiskParametersStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetManagedDiskParametersStatusARMGenerator returns a generator of VirtualMachineScaleSetManagedDiskParameters_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetManagedDiskParametersStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetManagedDiskParametersStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetManagedDiskParametersStatusARMGenerator != nil {
		return virtualMachineScaleSetManagedDiskParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersStatusARM(generators)
	virtualMachineScaleSetManagedDiskParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersStatusARM(generators)
	virtualMachineScaleSetManagedDiskParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetManagedDiskParameters_StatusARM{}), generators)

	return virtualMachineScaleSetManagedDiskParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersStatusARM(gens map[string]gopter.Gen) {
	gens["StorageAccountType"] = gen.PtrOf(gen.OneConstOf(StorageAccountType_StatusPremiumLRS, StorageAccountType_StatusPremiumZRS, StorageAccountType_StatusStandardLRS, StorageAccountType_StatusStandardSSDLRS, StorageAccountType_StatusStandardSSDZRS, StorageAccountType_StatusUltraSSDLRS))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetManagedDiskParametersStatusARM(gens map[string]gopter.Gen) {
	gens["DiskEncryptionSet"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM, VirtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM(subject VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM
//instances for property testing - lazily instantiated by
//VirtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator()
var virtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM(generators)
	virtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM(generators)
	virtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationProperties_StatusARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["EnableAcceleratedNetworking"] = gen.PtrOf(gen.Bool())
	gens["EnableFpga"] = gen.PtrOf(gen.Bool())
	gens["EnableIPForwarding"] = gen.PtrOf(gen.Bool())
	gens["Primary"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator())
	gens["IpConfigurations"] = gen.SliceOf(VirtualMachineScaleSetIPConfigurationStatusARMGenerator())
	gens["NetworkSecurityGroup"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_WinRMConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WinRMConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWinRMConfigurationStatusARM, WinRMConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWinRMConfigurationStatusARM runs a test to see if a specific instance of WinRMConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWinRMConfigurationStatusARM(subject WinRMConfiguration_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual WinRMConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of WinRMConfiguration_StatusARM instances for property testing -
//lazily instantiated by WinRMConfigurationStatusARMGenerator()
var winRMConfigurationStatusARMGenerator gopter.Gen

// WinRMConfigurationStatusARMGenerator returns a generator of WinRMConfiguration_StatusARM instances for property testing.
func WinRMConfigurationStatusARMGenerator() gopter.Gen {
	if winRMConfigurationStatusARMGenerator != nil {
		return winRMConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForWinRMConfigurationStatusARM(generators)
	winRMConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(WinRMConfiguration_StatusARM{}), generators)

	return winRMConfigurationStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForWinRMConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForWinRMConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Listeners"] = gen.SliceOf(WinRMListenerStatusARMGenerator())
}

func Test_SshPublicKey_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SshPublicKey_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSshPublicKeyStatusARM, SshPublicKeyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSshPublicKeyStatusARM runs a test to see if a specific instance of SshPublicKey_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSshPublicKeyStatusARM(subject SshPublicKey_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual SshPublicKey_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of SshPublicKey_StatusARM instances for property testing - lazily
//instantiated by SshPublicKeyStatusARMGenerator()
var sshPublicKeyStatusARMGenerator gopter.Gen

// SshPublicKeyStatusARMGenerator returns a generator of SshPublicKey_StatusARM instances for property testing.
func SshPublicKeyStatusARMGenerator() gopter.Gen {
	if sshPublicKeyStatusARMGenerator != nil {
		return sshPublicKeyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSshPublicKeyStatusARM(generators)
	sshPublicKeyStatusARMGenerator = gen.Struct(reflect.TypeOf(SshPublicKey_StatusARM{}), generators)

	return sshPublicKeyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSshPublicKeyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSshPublicKeyStatusARM(gens map[string]gopter.Gen) {
	gens["KeyData"] = gen.PtrOf(gen.AlphaString())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetIPConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationStatusARM, VirtualMachineScaleSetIPConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationStatusARM(subject VirtualMachineScaleSetIPConfiguration_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetIPConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetIPConfiguration_StatusARM instances for
//property testing - lazily instantiated by
//VirtualMachineScaleSetIPConfigurationStatusARMGenerator()
var virtualMachineScaleSetIPConfigurationStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationStatusARMGenerator returns a generator of VirtualMachineScaleSetIPConfiguration_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationStatusARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationStatusARM(generators)
	virtualMachineScaleSetIPConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationStatusARM(generators)
	virtualMachineScaleSetIPConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfiguration_StatusARM{}), generators)

	return virtualMachineScaleSetIPConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator())
}

func Test_VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARM, VirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARM(subject VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM
//instances for property testing - lazily instantiated by
//VirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator()
var virtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator returns a generator of VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM instances for property testing.
func VirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator != nil {
		return virtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARM(generators)
	virtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetNetworkConfigurationDnsSettings_StatusARM{}), generators)

	return virtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetNetworkConfigurationDnsSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["DnsServers"] = gen.SliceOf(gen.AlphaString())
}

func Test_WinRMListener_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of WinRMListener_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForWinRMListenerStatusARM, WinRMListenerStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForWinRMListenerStatusARM runs a test to see if a specific instance of WinRMListener_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForWinRMListenerStatusARM(subject WinRMListener_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual WinRMListener_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of WinRMListener_StatusARM instances for property testing - lazily
//instantiated by WinRMListenerStatusARMGenerator()
var winRMListenerStatusARMGenerator gopter.Gen

// WinRMListenerStatusARMGenerator returns a generator of WinRMListener_StatusARM instances for property testing.
func WinRMListenerStatusARMGenerator() gopter.Gen {
	if winRMListenerStatusARMGenerator != nil {
		return winRMListenerStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForWinRMListenerStatusARM(generators)
	winRMListenerStatusARMGenerator = gen.Struct(reflect.TypeOf(WinRMListener_StatusARM{}), generators)

	return winRMListenerStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForWinRMListenerStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForWinRMListenerStatusARM(gens map[string]gopter.Gen) {
	gens["CertificateUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(WinRMListenerStatusProtocolHttp, WinRMListenerStatusProtocolHttps))
}

func Test_VirtualMachineScaleSetIPConfigurationProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIPConfigurationProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM, VirtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetIPConfigurationProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM(subject VirtualMachineScaleSetIPConfigurationProperties_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetIPConfigurationProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetIPConfigurationProperties_StatusARM instances
//for property testing - lazily instantiated by
//VirtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator()
var virtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator returns a generator of VirtualMachineScaleSetIPConfigurationProperties_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator != nil {
		return virtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM(generators)
	virtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM(generators)
	virtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIPConfigurationProperties_StatusARM{}), generators)

	return virtualMachineScaleSetIPConfigurationPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Primary"] = gen.PtrOf(gen.Bool())
	gens["PrivateIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetIPConfigurationPropertiesStatusPrivateIPAddressVersionIPv4, VirtualMachineScaleSetIPConfigurationPropertiesStatusPrivateIPAddressVersionIPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetIPConfigurationPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["ApplicationGatewayBackendAddressPools"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["ApplicationSecurityGroups"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["LoadBalancerBackendAddressPools"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["LoadBalancerInboundNatPools"] = gen.SliceOf(SubResourceStatusARMGenerator())
	gens["PublicIPAddressConfiguration"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator())
	gens["Subnet"] = gen.PtrOf(ApiEntityReferenceStatusARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM, VirtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM(subject VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM
//instances for property testing - lazily instantiated by
//VirtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfiguration_StatusARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM, VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of
//VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM instances
//for property testing - lazily instantiated by
//VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM instances for property testing.
// We first initialize virtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationProperties_StatusARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["IdleTimeoutInMinutes"] = gen.PtrOf(gen.Int())
	gens["PublicIPAddressVersion"] = gen.PtrOf(gen.OneConstOf(VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusPublicIPAddressVersionIPv4, VirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusPublicIPAddressVersionIPv6))
}

// AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["DnsSettings"] = gen.PtrOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator())
	gens["IpTags"] = gen.SliceOf(VirtualMachineScaleSetIpTagStatusARMGenerator())
	gens["PublicIPPrefix"] = gen.PtrOf(SubResourceStatusARMGenerator())
}

func Test_VirtualMachineScaleSetIpTag_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetIpTag_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetIpTagStatusARM, VirtualMachineScaleSetIpTagStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetIpTagStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetIpTag_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetIpTagStatusARM(subject VirtualMachineScaleSetIpTag_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetIpTag_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of VirtualMachineScaleSetIpTag_StatusARM instances for property
//testing - lazily instantiated by VirtualMachineScaleSetIpTagStatusARMGenerator()
var virtualMachineScaleSetIpTagStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetIpTagStatusARMGenerator returns a generator of VirtualMachineScaleSetIpTag_StatusARM instances for property testing.
func VirtualMachineScaleSetIpTagStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetIpTagStatusARMGenerator != nil {
		return virtualMachineScaleSetIpTagStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTagStatusARM(generators)
	virtualMachineScaleSetIpTagStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetIpTag_StatusARM{}), generators)

	return virtualMachineScaleSetIpTagStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTagStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetIpTagStatusARM(gens map[string]gopter.Gen) {
	gens["IpTagType"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARM, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARM runs a test to see if a specific instance of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARM(subject VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM) string {
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	var actual VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

//Generator of
//VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM
//instances for property testing - lazily instantiated by
//VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator()
var virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator gopter.Gen

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator returns a generator of VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM instances for property testing.
func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator() gopter.Gen {
	if virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator != nil {
		return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARM(generators)
	virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings_StatusARM{}), generators)

	return virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsStatusARM(gens map[string]gopter.Gen) {
	gens["DomainNameLabel"] = gen.AlphaString()
}
