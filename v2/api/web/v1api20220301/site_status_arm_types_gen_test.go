// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApiDefinitionInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiDefinitionInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiDefinitionInfo_STATUS_ARM, ApiDefinitionInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiDefinitionInfo_STATUS_ARM runs a test to see if a specific instance of ApiDefinitionInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiDefinitionInfo_STATUS_ARM(subject ApiDefinitionInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiDefinitionInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiDefinitionInfo_STATUS_ARM instances for property testing - lazily instantiated by
// ApiDefinitionInfo_STATUS_ARMGenerator()
var apiDefinitionInfo_STATUS_ARMGenerator gopter.Gen

// ApiDefinitionInfo_STATUS_ARMGenerator returns a generator of ApiDefinitionInfo_STATUS_ARM instances for property testing.
func ApiDefinitionInfo_STATUS_ARMGenerator() gopter.Gen {
	if apiDefinitionInfo_STATUS_ARMGenerator != nil {
		return apiDefinitionInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiDefinitionInfo_STATUS_ARM(generators)
	apiDefinitionInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiDefinitionInfo_STATUS_ARM{}), generators)

	return apiDefinitionInfo_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiDefinitionInfo_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiDefinitionInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApiManagementConfig_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiManagementConfig_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiManagementConfig_STATUS_ARM, ApiManagementConfig_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiManagementConfig_STATUS_ARM runs a test to see if a specific instance of ApiManagementConfig_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiManagementConfig_STATUS_ARM(subject ApiManagementConfig_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiManagementConfig_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiManagementConfig_STATUS_ARM instances for property testing - lazily instantiated by
// ApiManagementConfig_STATUS_ARMGenerator()
var apiManagementConfig_STATUS_ARMGenerator gopter.Gen

// ApiManagementConfig_STATUS_ARMGenerator returns a generator of ApiManagementConfig_STATUS_ARM instances for property testing.
func ApiManagementConfig_STATUS_ARMGenerator() gopter.Gen {
	if apiManagementConfig_STATUS_ARMGenerator != nil {
		return apiManagementConfig_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiManagementConfig_STATUS_ARM(generators)
	apiManagementConfig_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiManagementConfig_STATUS_ARM{}), generators)

	return apiManagementConfig_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiManagementConfig_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiManagementConfig_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_AutoHealActions_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoHealActions_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoHealActions_STATUS_ARM, AutoHealActions_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoHealActions_STATUS_ARM runs a test to see if a specific instance of AutoHealActions_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoHealActions_STATUS_ARM(subject AutoHealActions_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoHealActions_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoHealActions_STATUS_ARM instances for property testing - lazily instantiated by
// AutoHealActions_STATUS_ARMGenerator()
var autoHealActions_STATUS_ARMGenerator gopter.Gen

// AutoHealActions_STATUS_ARMGenerator returns a generator of AutoHealActions_STATUS_ARM instances for property testing.
// We first initialize autoHealActions_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoHealActions_STATUS_ARMGenerator() gopter.Gen {
	if autoHealActions_STATUS_ARMGenerator != nil {
		return autoHealActions_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoHealActions_STATUS_ARM(generators)
	autoHealActions_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoHealActions_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoHealActions_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAutoHealActions_STATUS_ARM(generators)
	autoHealActions_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoHealActions_STATUS_ARM{}), generators)

	return autoHealActions_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoHealActions_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoHealActions_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActionType"] = gen.PtrOf(gen.OneConstOf(AutoHealActions_ActionType_STATUS_CustomAction, AutoHealActions_ActionType_STATUS_LogEvent, AutoHealActions_ActionType_STATUS_Recycle))
	gens["MinProcessExecutionTime"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAutoHealActions_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoHealActions_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomAction"] = gen.PtrOf(AutoHealCustomAction_STATUS_ARMGenerator())
}

func Test_AutoHealCustomAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoHealCustomAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoHealCustomAction_STATUS_ARM, AutoHealCustomAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoHealCustomAction_STATUS_ARM runs a test to see if a specific instance of AutoHealCustomAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoHealCustomAction_STATUS_ARM(subject AutoHealCustomAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoHealCustomAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoHealCustomAction_STATUS_ARM instances for property testing - lazily instantiated by
// AutoHealCustomAction_STATUS_ARMGenerator()
var autoHealCustomAction_STATUS_ARMGenerator gopter.Gen

// AutoHealCustomAction_STATUS_ARMGenerator returns a generator of AutoHealCustomAction_STATUS_ARM instances for property testing.
func AutoHealCustomAction_STATUS_ARMGenerator() gopter.Gen {
	if autoHealCustomAction_STATUS_ARMGenerator != nil {
		return autoHealCustomAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoHealCustomAction_STATUS_ARM(generators)
	autoHealCustomAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoHealCustomAction_STATUS_ARM{}), generators)

	return autoHealCustomAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoHealCustomAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoHealCustomAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Exe"] = gen.PtrOf(gen.AlphaString())
	gens["Parameters"] = gen.PtrOf(gen.AlphaString())
}

func Test_AutoHealRules_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoHealRules_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoHealRules_STATUS_ARM, AutoHealRules_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoHealRules_STATUS_ARM runs a test to see if a specific instance of AutoHealRules_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoHealRules_STATUS_ARM(subject AutoHealRules_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoHealRules_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoHealRules_STATUS_ARM instances for property testing - lazily instantiated by
// AutoHealRules_STATUS_ARMGenerator()
var autoHealRules_STATUS_ARMGenerator gopter.Gen

// AutoHealRules_STATUS_ARMGenerator returns a generator of AutoHealRules_STATUS_ARM instances for property testing.
func AutoHealRules_STATUS_ARMGenerator() gopter.Gen {
	if autoHealRules_STATUS_ARMGenerator != nil {
		return autoHealRules_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAutoHealRules_STATUS_ARM(generators)
	autoHealRules_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoHealRules_STATUS_ARM{}), generators)

	return autoHealRules_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForAutoHealRules_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoHealRules_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.PtrOf(AutoHealActions_STATUS_ARMGenerator())
	gens["Triggers"] = gen.PtrOf(AutoHealTriggers_STATUS_ARMGenerator())
}

func Test_AutoHealTriggers_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoHealTriggers_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoHealTriggers_STATUS_ARM, AutoHealTriggers_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoHealTriggers_STATUS_ARM runs a test to see if a specific instance of AutoHealTriggers_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoHealTriggers_STATUS_ARM(subject AutoHealTriggers_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoHealTriggers_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoHealTriggers_STATUS_ARM instances for property testing - lazily instantiated by
// AutoHealTriggers_STATUS_ARMGenerator()
var autoHealTriggers_STATUS_ARMGenerator gopter.Gen

// AutoHealTriggers_STATUS_ARMGenerator returns a generator of AutoHealTriggers_STATUS_ARM instances for property testing.
// We first initialize autoHealTriggers_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AutoHealTriggers_STATUS_ARMGenerator() gopter.Gen {
	if autoHealTriggers_STATUS_ARMGenerator != nil {
		return autoHealTriggers_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoHealTriggers_STATUS_ARM(generators)
	autoHealTriggers_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoHealTriggers_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoHealTriggers_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAutoHealTriggers_STATUS_ARM(generators)
	autoHealTriggers_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AutoHealTriggers_STATUS_ARM{}), generators)

	return autoHealTriggers_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoHealTriggers_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoHealTriggers_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateBytesInKB"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForAutoHealTriggers_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAutoHealTriggers_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Requests"] = gen.PtrOf(RequestsBasedTrigger_STATUS_ARMGenerator())
	gens["SlowRequests"] = gen.PtrOf(SlowRequestsBasedTrigger_STATUS_ARMGenerator())
	gens["SlowRequestsWithPath"] = gen.SliceOf(SlowRequestsBasedTrigger_STATUS_ARMGenerator())
	gens["StatusCodes"] = gen.SliceOf(StatusCodesBasedTrigger_STATUS_ARMGenerator())
	gens["StatusCodesRange"] = gen.SliceOf(StatusCodesRangeBasedTrigger_STATUS_ARMGenerator())
}

func Test_AzureStorageInfoValue_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureStorageInfoValue_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureStorageInfoValue_STATUS_ARM, AzureStorageInfoValue_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureStorageInfoValue_STATUS_ARM runs a test to see if a specific instance of AzureStorageInfoValue_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureStorageInfoValue_STATUS_ARM(subject AzureStorageInfoValue_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureStorageInfoValue_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureStorageInfoValue_STATUS_ARM instances for property testing - lazily instantiated by
// AzureStorageInfoValue_STATUS_ARMGenerator()
var azureStorageInfoValue_STATUS_ARMGenerator gopter.Gen

// AzureStorageInfoValue_STATUS_ARMGenerator returns a generator of AzureStorageInfoValue_STATUS_ARM instances for property testing.
func AzureStorageInfoValue_STATUS_ARMGenerator() gopter.Gen {
	if azureStorageInfoValue_STATUS_ARMGenerator != nil {
		return azureStorageInfoValue_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureStorageInfoValue_STATUS_ARM(generators)
	azureStorageInfoValue_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureStorageInfoValue_STATUS_ARM{}), generators)

	return azureStorageInfoValue_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureStorageInfoValue_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureStorageInfoValue_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AccountName"] = gen.PtrOf(gen.AlphaString())
	gens["MountPath"] = gen.PtrOf(gen.AlphaString())
	gens["ShareName"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(
		AzureStorageInfoValue_State_STATUS_InvalidCredentials,
		AzureStorageInfoValue_State_STATUS_InvalidShare,
		AzureStorageInfoValue_State_STATUS_NotValidated,
		AzureStorageInfoValue_State_STATUS_Ok))
	gens["Type"] = gen.PtrOf(gen.OneConstOf(AzureStorageInfoValue_Type_STATUS_AzureBlob, AzureStorageInfoValue_Type_STATUS_AzureFiles))
}

func Test_CloningInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CloningInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCloningInfo_STATUS_ARM, CloningInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCloningInfo_STATUS_ARM runs a test to see if a specific instance of CloningInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCloningInfo_STATUS_ARM(subject CloningInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CloningInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CloningInfo_STATUS_ARM instances for property testing - lazily instantiated by
// CloningInfo_STATUS_ARMGenerator()
var cloningInfo_STATUS_ARMGenerator gopter.Gen

// CloningInfo_STATUS_ARMGenerator returns a generator of CloningInfo_STATUS_ARM instances for property testing.
func CloningInfo_STATUS_ARMGenerator() gopter.Gen {
	if cloningInfo_STATUS_ARMGenerator != nil {
		return cloningInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCloningInfo_STATUS_ARM(generators)
	cloningInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CloningInfo_STATUS_ARM{}), generators)

	return cloningInfo_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCloningInfo_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCloningInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AppSettingsOverrides"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["CloneCustomHostNames"] = gen.PtrOf(gen.Bool())
	gens["CloneSourceControl"] = gen.PtrOf(gen.Bool())
	gens["ConfigureLoadBalancing"] = gen.PtrOf(gen.Bool())
	gens["CorrelationId"] = gen.PtrOf(gen.AlphaString())
	gens["HostingEnvironment"] = gen.PtrOf(gen.AlphaString())
	gens["Overwrite"] = gen.PtrOf(gen.Bool())
	gens["SourceWebAppId"] = gen.PtrOf(gen.AlphaString())
	gens["SourceWebAppLocation"] = gen.PtrOf(gen.AlphaString())
	gens["TrafficManagerProfileId"] = gen.PtrOf(gen.AlphaString())
	gens["TrafficManagerProfileName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ConnStringInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConnStringInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConnStringInfo_STATUS_ARM, ConnStringInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConnStringInfo_STATUS_ARM runs a test to see if a specific instance of ConnStringInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConnStringInfo_STATUS_ARM(subject ConnStringInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConnStringInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConnStringInfo_STATUS_ARM instances for property testing - lazily instantiated by
// ConnStringInfo_STATUS_ARMGenerator()
var connStringInfo_STATUS_ARMGenerator gopter.Gen

// ConnStringInfo_STATUS_ARMGenerator returns a generator of ConnStringInfo_STATUS_ARM instances for property testing.
func ConnStringInfo_STATUS_ARMGenerator() gopter.Gen {
	if connStringInfo_STATUS_ARMGenerator != nil {
		return connStringInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConnStringInfo_STATUS_ARM(generators)
	connStringInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ConnStringInfo_STATUS_ARM{}), generators)

	return connStringInfo_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForConnStringInfo_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConnStringInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ConnectionString"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ConnStringInfo_Type_STATUS_ApiHub,
		ConnStringInfo_Type_STATUS_Custom,
		ConnStringInfo_Type_STATUS_DocDb,
		ConnStringInfo_Type_STATUS_EventHub,
		ConnStringInfo_Type_STATUS_MySql,
		ConnStringInfo_Type_STATUS_NotificationHub,
		ConnStringInfo_Type_STATUS_PostgreSQL,
		ConnStringInfo_Type_STATUS_RedisCache,
		ConnStringInfo_Type_STATUS_SQLAzure,
		ConnStringInfo_Type_STATUS_SQLServer,
		ConnStringInfo_Type_STATUS_ServiceBus))
}

func Test_CorsSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CorsSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCorsSettings_STATUS_ARM, CorsSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCorsSettings_STATUS_ARM runs a test to see if a specific instance of CorsSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCorsSettings_STATUS_ARM(subject CorsSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CorsSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CorsSettings_STATUS_ARM instances for property testing - lazily instantiated by
// CorsSettings_STATUS_ARMGenerator()
var corsSettings_STATUS_ARMGenerator gopter.Gen

// CorsSettings_STATUS_ARMGenerator returns a generator of CorsSettings_STATUS_ARM instances for property testing.
func CorsSettings_STATUS_ARMGenerator() gopter.Gen {
	if corsSettings_STATUS_ARMGenerator != nil {
		return corsSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCorsSettings_STATUS_ARM(generators)
	corsSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CorsSettings_STATUS_ARM{}), generators)

	return corsSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCorsSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCorsSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AllowedOrigins"] = gen.SliceOf(gen.AlphaString())
	gens["SupportCredentials"] = gen.PtrOf(gen.Bool())
}

func Test_Experiments_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Experiments_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExperiments_STATUS_ARM, Experiments_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExperiments_STATUS_ARM runs a test to see if a specific instance of Experiments_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExperiments_STATUS_ARM(subject Experiments_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Experiments_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Experiments_STATUS_ARM instances for property testing - lazily instantiated by
// Experiments_STATUS_ARMGenerator()
var experiments_STATUS_ARMGenerator gopter.Gen

// Experiments_STATUS_ARMGenerator returns a generator of Experiments_STATUS_ARM instances for property testing.
func Experiments_STATUS_ARMGenerator() gopter.Gen {
	if experiments_STATUS_ARMGenerator != nil {
		return experiments_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForExperiments_STATUS_ARM(generators)
	experiments_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Experiments_STATUS_ARM{}), generators)

	return experiments_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForExperiments_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForExperiments_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RampUpRules"] = gen.SliceOf(RampUpRule_STATUS_ARMGenerator())
}

func Test_HandlerMapping_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HandlerMapping_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHandlerMapping_STATUS_ARM, HandlerMapping_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHandlerMapping_STATUS_ARM runs a test to see if a specific instance of HandlerMapping_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHandlerMapping_STATUS_ARM(subject HandlerMapping_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HandlerMapping_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HandlerMapping_STATUS_ARM instances for property testing - lazily instantiated by
// HandlerMapping_STATUS_ARMGenerator()
var handlerMapping_STATUS_ARMGenerator gopter.Gen

// HandlerMapping_STATUS_ARMGenerator returns a generator of HandlerMapping_STATUS_ARM instances for property testing.
func HandlerMapping_STATUS_ARMGenerator() gopter.Gen {
	if handlerMapping_STATUS_ARMGenerator != nil {
		return handlerMapping_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHandlerMapping_STATUS_ARM(generators)
	handlerMapping_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HandlerMapping_STATUS_ARM{}), generators)

	return handlerMapping_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHandlerMapping_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHandlerMapping_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Arguments"] = gen.PtrOf(gen.AlphaString())
	gens["Extension"] = gen.PtrOf(gen.AlphaString())
	gens["ScriptProcessor"] = gen.PtrOf(gen.AlphaString())
}

func Test_HostNameSslState_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostNameSslState_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostNameSslState_STATUS_ARM, HostNameSslState_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostNameSslState_STATUS_ARM runs a test to see if a specific instance of HostNameSslState_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHostNameSslState_STATUS_ARM(subject HostNameSslState_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostNameSslState_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostNameSslState_STATUS_ARM instances for property testing - lazily instantiated by
// HostNameSslState_STATUS_ARMGenerator()
var hostNameSslState_STATUS_ARMGenerator gopter.Gen

// HostNameSslState_STATUS_ARMGenerator returns a generator of HostNameSslState_STATUS_ARM instances for property testing.
func HostNameSslState_STATUS_ARMGenerator() gopter.Gen {
	if hostNameSslState_STATUS_ARMGenerator != nil {
		return hostNameSslState_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostNameSslState_STATUS_ARM(generators)
	hostNameSslState_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HostNameSslState_STATUS_ARM{}), generators)

	return hostNameSslState_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHostNameSslState_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHostNameSslState_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HostType"] = gen.PtrOf(gen.OneConstOf(HostNameSslState_HostType_STATUS_Repository, HostNameSslState_HostType_STATUS_Standard))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["SslState"] = gen.PtrOf(gen.OneConstOf(HostNameSslState_SslState_STATUS_Disabled, HostNameSslState_SslState_STATUS_IpBasedEnabled, HostNameSslState_SslState_STATUS_SniEnabled))
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
	gens["ToUpdate"] = gen.PtrOf(gen.Bool())
	gens["VirtualIP"] = gen.PtrOf(gen.AlphaString())
}

func Test_IpSecurityRestriction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpSecurityRestriction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpSecurityRestriction_STATUS_ARM, IpSecurityRestriction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpSecurityRestriction_STATUS_ARM runs a test to see if a specific instance of IpSecurityRestriction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpSecurityRestriction_STATUS_ARM(subject IpSecurityRestriction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpSecurityRestriction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpSecurityRestriction_STATUS_ARM instances for property testing - lazily instantiated by
// IpSecurityRestriction_STATUS_ARMGenerator()
var ipSecurityRestriction_STATUS_ARMGenerator gopter.Gen

// IpSecurityRestriction_STATUS_ARMGenerator returns a generator of IpSecurityRestriction_STATUS_ARM instances for property testing.
func IpSecurityRestriction_STATUS_ARMGenerator() gopter.Gen {
	if ipSecurityRestriction_STATUS_ARMGenerator != nil {
		return ipSecurityRestriction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpSecurityRestriction_STATUS_ARM(generators)
	ipSecurityRestriction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IpSecurityRestriction_STATUS_ARM{}), generators)

	return ipSecurityRestriction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIpSecurityRestriction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpSecurityRestriction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Headers"] = gen.MapOf(
		gen.AlphaString(),
		gen.SliceOf(gen.AlphaString()))
	gens["IpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["SubnetMask"] = gen.PtrOf(gen.AlphaString())
	gens["SubnetTrafficTag"] = gen.PtrOf(gen.Int())
	gens["Tag"] = gen.PtrOf(gen.OneConstOf(IpSecurityRestriction_Tag_STATUS_Default, IpSecurityRestriction_Tag_STATUS_ServiceTag, IpSecurityRestriction_Tag_STATUS_XffProxy))
	gens["VnetSubnetResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["VnetTrafficTag"] = gen.PtrOf(gen.Int())
}

func Test_ManagedServiceIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedServiceIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM, ManagedServiceIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM runs a test to see if a specific instance of ManagedServiceIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedServiceIdentity_STATUS_ARM(subject ManagedServiceIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedServiceIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedServiceIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedServiceIdentity_STATUS_ARMGenerator()
var managedServiceIdentity_STATUS_ARMGenerator gopter.Gen

// ManagedServiceIdentity_STATUS_ARMGenerator returns a generator of ManagedServiceIdentity_STATUS_ARM instances for property testing.
// We first initialize managedServiceIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedServiceIdentity_STATUS_ARMGenerator() gopter.Gen {
	if managedServiceIdentity_STATUS_ARMGenerator != nil {
		return managedServiceIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	managedServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(generators)
	managedServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedServiceIdentity_STATUS_ARM{}), generators)

	return managedServiceIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ManagedServiceIdentity_Type_STATUS_None,
		ManagedServiceIdentity_Type_STATUS_SystemAssigned,
		ManagedServiceIdentity_Type_STATUS_SystemAssignedUserAssigned,
		ManagedServiceIdentity_Type_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		UserAssignedIdentity_STATUS_ARMGenerator())
}

func Test_NameValuePair_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NameValuePair_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNameValuePair_STATUS_ARM, NameValuePair_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNameValuePair_STATUS_ARM runs a test to see if a specific instance of NameValuePair_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNameValuePair_STATUS_ARM(subject NameValuePair_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NameValuePair_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NameValuePair_STATUS_ARM instances for property testing - lazily instantiated by
// NameValuePair_STATUS_ARMGenerator()
var nameValuePair_STATUS_ARMGenerator gopter.Gen

// NameValuePair_STATUS_ARMGenerator returns a generator of NameValuePair_STATUS_ARM instances for property testing.
func NameValuePair_STATUS_ARMGenerator() gopter.Gen {
	if nameValuePair_STATUS_ARMGenerator != nil {
		return nameValuePair_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNameValuePair_STATUS_ARM(generators)
	nameValuePair_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NameValuePair_STATUS_ARM{}), generators)

	return nameValuePair_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNameValuePair_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNameValuePair_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_PushSettings_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PushSettings_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPushSettings_Properties_STATUS_ARM, PushSettings_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPushSettings_Properties_STATUS_ARM runs a test to see if a specific instance of PushSettings_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPushSettings_Properties_STATUS_ARM(subject PushSettings_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PushSettings_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PushSettings_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// PushSettings_Properties_STATUS_ARMGenerator()
var pushSettings_Properties_STATUS_ARMGenerator gopter.Gen

// PushSettings_Properties_STATUS_ARMGenerator returns a generator of PushSettings_Properties_STATUS_ARM instances for property testing.
func PushSettings_Properties_STATUS_ARMGenerator() gopter.Gen {
	if pushSettings_Properties_STATUS_ARMGenerator != nil {
		return pushSettings_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPushSettings_Properties_STATUS_ARM(generators)
	pushSettings_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PushSettings_Properties_STATUS_ARM{}), generators)

	return pushSettings_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPushSettings_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPushSettings_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DynamicTagsJson"] = gen.PtrOf(gen.AlphaString())
	gens["IsPushEnabled"] = gen.PtrOf(gen.Bool())
	gens["TagWhitelistJson"] = gen.PtrOf(gen.AlphaString())
	gens["TagsRequiringAuth"] = gen.PtrOf(gen.AlphaString())
}

func Test_PushSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PushSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPushSettings_STATUS_ARM, PushSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPushSettings_STATUS_ARM runs a test to see if a specific instance of PushSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPushSettings_STATUS_ARM(subject PushSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PushSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PushSettings_STATUS_ARM instances for property testing - lazily instantiated by
// PushSettings_STATUS_ARMGenerator()
var pushSettings_STATUS_ARMGenerator gopter.Gen

// PushSettings_STATUS_ARMGenerator returns a generator of PushSettings_STATUS_ARM instances for property testing.
// We first initialize pushSettings_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PushSettings_STATUS_ARMGenerator() gopter.Gen {
	if pushSettings_STATUS_ARMGenerator != nil {
		return pushSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPushSettings_STATUS_ARM(generators)
	pushSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PushSettings_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPushSettings_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPushSettings_STATUS_ARM(generators)
	pushSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PushSettings_STATUS_ARM{}), generators)

	return pushSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPushSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPushSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPushSettings_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPushSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PushSettings_Properties_STATUS_ARMGenerator())
}

func Test_RampUpRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RampUpRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRampUpRule_STATUS_ARM, RampUpRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRampUpRule_STATUS_ARM runs a test to see if a specific instance of RampUpRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRampUpRule_STATUS_ARM(subject RampUpRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RampUpRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RampUpRule_STATUS_ARM instances for property testing - lazily instantiated by
// RampUpRule_STATUS_ARMGenerator()
var rampUpRule_STATUS_ARMGenerator gopter.Gen

// RampUpRule_STATUS_ARMGenerator returns a generator of RampUpRule_STATUS_ARM instances for property testing.
func RampUpRule_STATUS_ARMGenerator() gopter.Gen {
	if rampUpRule_STATUS_ARMGenerator != nil {
		return rampUpRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRampUpRule_STATUS_ARM(generators)
	rampUpRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RampUpRule_STATUS_ARM{}), generators)

	return rampUpRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRampUpRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRampUpRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActionHostName"] = gen.PtrOf(gen.AlphaString())
	gens["ChangeDecisionCallbackUrl"] = gen.PtrOf(gen.AlphaString())
	gens["ChangeIntervalInMinutes"] = gen.PtrOf(gen.Int())
	gens["ChangeStep"] = gen.PtrOf(gen.Float64())
	gens["MaxReroutePercentage"] = gen.PtrOf(gen.Float64())
	gens["MinReroutePercentage"] = gen.PtrOf(gen.Float64())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ReroutePercentage"] = gen.PtrOf(gen.Float64())
}

func Test_RequestsBasedTrigger_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RequestsBasedTrigger_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRequestsBasedTrigger_STATUS_ARM, RequestsBasedTrigger_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRequestsBasedTrigger_STATUS_ARM runs a test to see if a specific instance of RequestsBasedTrigger_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRequestsBasedTrigger_STATUS_ARM(subject RequestsBasedTrigger_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RequestsBasedTrigger_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RequestsBasedTrigger_STATUS_ARM instances for property testing - lazily instantiated by
// RequestsBasedTrigger_STATUS_ARMGenerator()
var requestsBasedTrigger_STATUS_ARMGenerator gopter.Gen

// RequestsBasedTrigger_STATUS_ARMGenerator returns a generator of RequestsBasedTrigger_STATUS_ARM instances for property testing.
func RequestsBasedTrigger_STATUS_ARMGenerator() gopter.Gen {
	if requestsBasedTrigger_STATUS_ARMGenerator != nil {
		return requestsBasedTrigger_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRequestsBasedTrigger_STATUS_ARM(generators)
	requestsBasedTrigger_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RequestsBasedTrigger_STATUS_ARM{}), generators)

	return requestsBasedTrigger_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRequestsBasedTrigger_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRequestsBasedTrigger_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["TimeInterval"] = gen.PtrOf(gen.AlphaString())
}

func Test_SiteConfig_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SiteConfig_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSiteConfig_STATUS_ARM, SiteConfig_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSiteConfig_STATUS_ARM runs a test to see if a specific instance of SiteConfig_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSiteConfig_STATUS_ARM(subject SiteConfig_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SiteConfig_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SiteConfig_STATUS_ARM instances for property testing - lazily instantiated by
// SiteConfig_STATUS_ARMGenerator()
var siteConfig_STATUS_ARMGenerator gopter.Gen

// SiteConfig_STATUS_ARMGenerator returns a generator of SiteConfig_STATUS_ARM instances for property testing.
func SiteConfig_STATUS_ARMGenerator() gopter.Gen {
	if siteConfig_STATUS_ARMGenerator != nil {
		return siteConfig_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSiteConfig_STATUS_ARM(generators)
	siteConfig_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SiteConfig_STATUS_ARM{}), generators)

	return siteConfig_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForSiteConfig_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSiteConfig_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApiDefinition"] = gen.PtrOf(ApiDefinitionInfo_STATUS_ARMGenerator())
	gens["ApiManagementConfig"] = gen.PtrOf(ApiManagementConfig_STATUS_ARMGenerator())
	gens["AppSettings"] = gen.SliceOf(NameValuePair_STATUS_ARMGenerator())
	gens["AutoHealRules"] = gen.PtrOf(AutoHealRules_STATUS_ARMGenerator())
	gens["AzureStorageAccounts"] = gen.MapOf(
		gen.AlphaString(),
		AzureStorageInfoValue_STATUS_ARMGenerator())
	gens["ConnectionStrings"] = gen.SliceOf(ConnStringInfo_STATUS_ARMGenerator())
	gens["Cors"] = gen.PtrOf(CorsSettings_STATUS_ARMGenerator())
	gens["Experiments"] = gen.PtrOf(Experiments_STATUS_ARMGenerator())
	gens["HandlerMappings"] = gen.SliceOf(HandlerMapping_STATUS_ARMGenerator())
	gens["IpSecurityRestrictions"] = gen.SliceOf(IpSecurityRestriction_STATUS_ARMGenerator())
	gens["Limits"] = gen.PtrOf(SiteLimits_STATUS_ARMGenerator())
	gens["MachineKey"] = gen.PtrOf(SiteMachineKey_STATUS_ARMGenerator())
	gens["Push"] = gen.PtrOf(PushSettings_STATUS_ARMGenerator())
	gens["ScmIpSecurityRestrictions"] = gen.SliceOf(IpSecurityRestriction_STATUS_ARMGenerator())
	gens["VirtualApplications"] = gen.SliceOf(VirtualApplication_STATUS_ARMGenerator())
}

func Test_SiteLimits_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SiteLimits_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSiteLimits_STATUS_ARM, SiteLimits_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSiteLimits_STATUS_ARM runs a test to see if a specific instance of SiteLimits_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSiteLimits_STATUS_ARM(subject SiteLimits_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SiteLimits_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SiteLimits_STATUS_ARM instances for property testing - lazily instantiated by
// SiteLimits_STATUS_ARMGenerator()
var siteLimits_STATUS_ARMGenerator gopter.Gen

// SiteLimits_STATUS_ARMGenerator returns a generator of SiteLimits_STATUS_ARM instances for property testing.
func SiteLimits_STATUS_ARMGenerator() gopter.Gen {
	if siteLimits_STATUS_ARMGenerator != nil {
		return siteLimits_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSiteLimits_STATUS_ARM(generators)
	siteLimits_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SiteLimits_STATUS_ARM{}), generators)

	return siteLimits_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSiteLimits_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSiteLimits_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MaxDiskSizeInMb"] = gen.PtrOf(gen.Int())
	gens["MaxMemoryInMb"] = gen.PtrOf(gen.Int())
	gens["MaxPercentageCpu"] = gen.PtrOf(gen.Float64())
}

func Test_SiteMachineKey_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SiteMachineKey_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSiteMachineKey_STATUS_ARM, SiteMachineKey_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSiteMachineKey_STATUS_ARM runs a test to see if a specific instance of SiteMachineKey_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSiteMachineKey_STATUS_ARM(subject SiteMachineKey_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SiteMachineKey_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SiteMachineKey_STATUS_ARM instances for property testing - lazily instantiated by
// SiteMachineKey_STATUS_ARMGenerator()
var siteMachineKey_STATUS_ARMGenerator gopter.Gen

// SiteMachineKey_STATUS_ARMGenerator returns a generator of SiteMachineKey_STATUS_ARM instances for property testing.
func SiteMachineKey_STATUS_ARMGenerator() gopter.Gen {
	if siteMachineKey_STATUS_ARMGenerator != nil {
		return siteMachineKey_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSiteMachineKey_STATUS_ARM(generators)
	siteMachineKey_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SiteMachineKey_STATUS_ARM{}), generators)

	return siteMachineKey_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSiteMachineKey_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSiteMachineKey_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Decryption"] = gen.PtrOf(gen.AlphaString())
	gens["DecryptionKey"] = gen.PtrOf(gen.AlphaString())
	gens["Validation"] = gen.PtrOf(gen.AlphaString())
	gens["ValidationKey"] = gen.PtrOf(gen.AlphaString())
}

func Test_Site_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Site_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSite_Properties_STATUS_ARM, Site_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSite_Properties_STATUS_ARM runs a test to see if a specific instance of Site_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSite_Properties_STATUS_ARM(subject Site_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Site_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Site_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// Site_Properties_STATUS_ARMGenerator()
var site_Properties_STATUS_ARMGenerator gopter.Gen

// Site_Properties_STATUS_ARMGenerator returns a generator of Site_Properties_STATUS_ARM instances for property testing.
// We first initialize site_Properties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Site_Properties_STATUS_ARMGenerator() gopter.Gen {
	if site_Properties_STATUS_ARMGenerator != nil {
		return site_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSite_Properties_STATUS_ARM(generators)
	site_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Site_Properties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSite_Properties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSite_Properties_STATUS_ARM(generators)
	site_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Site_Properties_STATUS_ARM{}), generators)

	return site_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSite_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSite_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AvailabilityState"] = gen.PtrOf(gen.OneConstOf(Site_Properties_AvailabilityState_STATUS_DisasterRecoveryMode, Site_Properties_AvailabilityState_STATUS_Limited, Site_Properties_AvailabilityState_STATUS_Normal))
	gens["ClientAffinityEnabled"] = gen.PtrOf(gen.Bool())
	gens["ClientCertEnabled"] = gen.PtrOf(gen.Bool())
	gens["ClientCertExclusionPaths"] = gen.PtrOf(gen.AlphaString())
	gens["ClientCertMode"] = gen.PtrOf(gen.OneConstOf(Site_Properties_ClientCertMode_STATUS_Optional, Site_Properties_ClientCertMode_STATUS_OptionalInteractiveUser, Site_Properties_ClientCertMode_STATUS_Required))
	gens["ContainerSize"] = gen.PtrOf(gen.Int())
	gens["CustomDomainVerificationId"] = gen.PtrOf(gen.AlphaString())
	gens["DailyMemoryTimeQuota"] = gen.PtrOf(gen.Int())
	gens["DefaultHostName"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["EnabledHostNames"] = gen.SliceOf(gen.AlphaString())
	gens["HostNames"] = gen.SliceOf(gen.AlphaString())
	gens["HostNamesDisabled"] = gen.PtrOf(gen.Bool())
	gens["HttpsOnly"] = gen.PtrOf(gen.Bool())
	gens["HyperV"] = gen.PtrOf(gen.Bool())
	gens["InProgressOperationId"] = gen.PtrOf(gen.AlphaString())
	gens["IsDefaultContainer"] = gen.PtrOf(gen.Bool())
	gens["IsXenon"] = gen.PtrOf(gen.Bool())
	gens["KeyVaultReferenceIdentity"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedTimeUtc"] = gen.PtrOf(gen.AlphaString())
	gens["MaxNumberOfWorkers"] = gen.PtrOf(gen.Int())
	gens["OutboundIpAddresses"] = gen.PtrOf(gen.AlphaString())
	gens["PossibleOutboundIpAddresses"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
	gens["RedundancyMode"] = gen.PtrOf(gen.OneConstOf(
		Site_Properties_RedundancyMode_STATUS_ActiveActive,
		Site_Properties_RedundancyMode_STATUS_Failover,
		Site_Properties_RedundancyMode_STATUS_GeoRedundant,
		Site_Properties_RedundancyMode_STATUS_Manual,
		Site_Properties_RedundancyMode_STATUS_None))
	gens["RepositorySiteName"] = gen.PtrOf(gen.AlphaString())
	gens["Reserved"] = gen.PtrOf(gen.Bool())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["ScmSiteAlsoStopped"] = gen.PtrOf(gen.Bool())
	gens["ServerFarmId"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountRequired"] = gen.PtrOf(gen.Bool())
	gens["SuspendedTill"] = gen.PtrOf(gen.AlphaString())
	gens["TargetSwapSlot"] = gen.PtrOf(gen.AlphaString())
	gens["TrafficManagerHostNames"] = gen.SliceOf(gen.AlphaString())
	gens["UsageState"] = gen.PtrOf(gen.OneConstOf(Site_Properties_UsageState_STATUS_Exceeded, Site_Properties_UsageState_STATUS_Normal))
	gens["VirtualNetworkSubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["VnetContentShareEnabled"] = gen.PtrOf(gen.Bool())
	gens["VnetImagePullEnabled"] = gen.PtrOf(gen.Bool())
	gens["VnetRouteAllEnabled"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForSite_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSite_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CloningInfo"] = gen.PtrOf(CloningInfo_STATUS_ARMGenerator())
	gens["HostNameSslStates"] = gen.SliceOf(HostNameSslState_STATUS_ARMGenerator())
	gens["HostingEnvironmentProfile"] = gen.PtrOf(HostingEnvironmentProfile_STATUS_ARMGenerator())
	gens["SiteConfig"] = gen.PtrOf(SiteConfig_STATUS_ARMGenerator())
	gens["SlotSwapStatus"] = gen.PtrOf(SlotSwapStatus_STATUS_ARMGenerator())
}

func Test_Site_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Site_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSite_STATUS_ARM, Site_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSite_STATUS_ARM runs a test to see if a specific instance of Site_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSite_STATUS_ARM(subject Site_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Site_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Site_STATUS_ARM instances for property testing - lazily instantiated by Site_STATUS_ARMGenerator()
var site_STATUS_ARMGenerator gopter.Gen

// Site_STATUS_ARMGenerator returns a generator of Site_STATUS_ARM instances for property testing.
// We first initialize site_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Site_STATUS_ARMGenerator() gopter.Gen {
	if site_STATUS_ARMGenerator != nil {
		return site_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSite_STATUS_ARM(generators)
	site_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Site_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSite_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSite_STATUS_ARM(generators)
	site_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Site_STATUS_ARM{}), generators)

	return site_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSite_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSite_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSite_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSite_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Identity"] = gen.PtrOf(ManagedServiceIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(Site_Properties_STATUS_ARMGenerator())
}

func Test_SlotSwapStatus_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SlotSwapStatus_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSlotSwapStatus_STATUS_ARM, SlotSwapStatus_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSlotSwapStatus_STATUS_ARM runs a test to see if a specific instance of SlotSwapStatus_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSlotSwapStatus_STATUS_ARM(subject SlotSwapStatus_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SlotSwapStatus_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SlotSwapStatus_STATUS_ARM instances for property testing - lazily instantiated by
// SlotSwapStatus_STATUS_ARMGenerator()
var slotSwapStatus_STATUS_ARMGenerator gopter.Gen

// SlotSwapStatus_STATUS_ARMGenerator returns a generator of SlotSwapStatus_STATUS_ARM instances for property testing.
func SlotSwapStatus_STATUS_ARMGenerator() gopter.Gen {
	if slotSwapStatus_STATUS_ARMGenerator != nil {
		return slotSwapStatus_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSlotSwapStatus_STATUS_ARM(generators)
	slotSwapStatus_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SlotSwapStatus_STATUS_ARM{}), generators)

	return slotSwapStatus_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSlotSwapStatus_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSlotSwapStatus_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DestinationSlotName"] = gen.PtrOf(gen.AlphaString())
	gens["SourceSlotName"] = gen.PtrOf(gen.AlphaString())
	gens["TimestampUtc"] = gen.PtrOf(gen.AlphaString())
}

func Test_SlowRequestsBasedTrigger_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SlowRequestsBasedTrigger_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSlowRequestsBasedTrigger_STATUS_ARM, SlowRequestsBasedTrigger_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSlowRequestsBasedTrigger_STATUS_ARM runs a test to see if a specific instance of SlowRequestsBasedTrigger_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSlowRequestsBasedTrigger_STATUS_ARM(subject SlowRequestsBasedTrigger_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SlowRequestsBasedTrigger_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SlowRequestsBasedTrigger_STATUS_ARM instances for property testing - lazily instantiated by
// SlowRequestsBasedTrigger_STATUS_ARMGenerator()
var slowRequestsBasedTrigger_STATUS_ARMGenerator gopter.Gen

// SlowRequestsBasedTrigger_STATUS_ARMGenerator returns a generator of SlowRequestsBasedTrigger_STATUS_ARM instances for property testing.
func SlowRequestsBasedTrigger_STATUS_ARMGenerator() gopter.Gen {
	if slowRequestsBasedTrigger_STATUS_ARMGenerator != nil {
		return slowRequestsBasedTrigger_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSlowRequestsBasedTrigger_STATUS_ARM(generators)
	slowRequestsBasedTrigger_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SlowRequestsBasedTrigger_STATUS_ARM{}), generators)

	return slowRequestsBasedTrigger_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSlowRequestsBasedTrigger_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSlowRequestsBasedTrigger_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["TimeInterval"] = gen.PtrOf(gen.AlphaString())
	gens["TimeTaken"] = gen.PtrOf(gen.AlphaString())
}

func Test_StatusCodesBasedTrigger_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StatusCodesBasedTrigger_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStatusCodesBasedTrigger_STATUS_ARM, StatusCodesBasedTrigger_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStatusCodesBasedTrigger_STATUS_ARM runs a test to see if a specific instance of StatusCodesBasedTrigger_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStatusCodesBasedTrigger_STATUS_ARM(subject StatusCodesBasedTrigger_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StatusCodesBasedTrigger_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StatusCodesBasedTrigger_STATUS_ARM instances for property testing - lazily instantiated by
// StatusCodesBasedTrigger_STATUS_ARMGenerator()
var statusCodesBasedTrigger_STATUS_ARMGenerator gopter.Gen

// StatusCodesBasedTrigger_STATUS_ARMGenerator returns a generator of StatusCodesBasedTrigger_STATUS_ARM instances for property testing.
func StatusCodesBasedTrigger_STATUS_ARMGenerator() gopter.Gen {
	if statusCodesBasedTrigger_STATUS_ARMGenerator != nil {
		return statusCodesBasedTrigger_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStatusCodesBasedTrigger_STATUS_ARM(generators)
	statusCodesBasedTrigger_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StatusCodesBasedTrigger_STATUS_ARM{}), generators)

	return statusCodesBasedTrigger_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStatusCodesBasedTrigger_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStatusCodesBasedTrigger_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.Int())
	gens["SubStatus"] = gen.PtrOf(gen.Int())
	gens["TimeInterval"] = gen.PtrOf(gen.AlphaString())
	gens["Win32Status"] = gen.PtrOf(gen.Int())
}

func Test_StatusCodesRangeBasedTrigger_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of StatusCodesRangeBasedTrigger_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStatusCodesRangeBasedTrigger_STATUS_ARM, StatusCodesRangeBasedTrigger_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStatusCodesRangeBasedTrigger_STATUS_ARM runs a test to see if a specific instance of StatusCodesRangeBasedTrigger_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStatusCodesRangeBasedTrigger_STATUS_ARM(subject StatusCodesRangeBasedTrigger_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual StatusCodesRangeBasedTrigger_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of StatusCodesRangeBasedTrigger_STATUS_ARM instances for property testing - lazily instantiated by
// StatusCodesRangeBasedTrigger_STATUS_ARMGenerator()
var statusCodesRangeBasedTrigger_STATUS_ARMGenerator gopter.Gen

// StatusCodesRangeBasedTrigger_STATUS_ARMGenerator returns a generator of StatusCodesRangeBasedTrigger_STATUS_ARM instances for property testing.
func StatusCodesRangeBasedTrigger_STATUS_ARMGenerator() gopter.Gen {
	if statusCodesRangeBasedTrigger_STATUS_ARMGenerator != nil {
		return statusCodesRangeBasedTrigger_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStatusCodesRangeBasedTrigger_STATUS_ARM(generators)
	statusCodesRangeBasedTrigger_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(StatusCodesRangeBasedTrigger_STATUS_ARM{}), generators)

	return statusCodesRangeBasedTrigger_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForStatusCodesRangeBasedTrigger_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStatusCodesRangeBasedTrigger_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["StatusCodes"] = gen.PtrOf(gen.AlphaString())
	gens["TimeInterval"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserAssignedIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserAssignedIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserAssignedIdentity_STATUS_ARM, UserAssignedIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserAssignedIdentity_STATUS_ARM runs a test to see if a specific instance of UserAssignedIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserAssignedIdentity_STATUS_ARM(subject UserAssignedIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserAssignedIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserAssignedIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// UserAssignedIdentity_STATUS_ARMGenerator()
var userAssignedIdentity_STATUS_ARMGenerator gopter.Gen

// UserAssignedIdentity_STATUS_ARMGenerator returns a generator of UserAssignedIdentity_STATUS_ARM instances for property testing.
func UserAssignedIdentity_STATUS_ARMGenerator() gopter.Gen {
	if userAssignedIdentity_STATUS_ARMGenerator != nil {
		return userAssignedIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS_ARM(generators)
	userAssignedIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserAssignedIdentity_STATUS_ARM{}), generators)

	return userAssignedIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserAssignedIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualApplication_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualApplication_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualApplication_STATUS_ARM, VirtualApplication_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualApplication_STATUS_ARM runs a test to see if a specific instance of VirtualApplication_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualApplication_STATUS_ARM(subject VirtualApplication_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualApplication_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualApplication_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualApplication_STATUS_ARMGenerator()
var virtualApplication_STATUS_ARMGenerator gopter.Gen

// VirtualApplication_STATUS_ARMGenerator returns a generator of VirtualApplication_STATUS_ARM instances for property testing.
// We first initialize virtualApplication_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VirtualApplication_STATUS_ARMGenerator() gopter.Gen {
	if virtualApplication_STATUS_ARMGenerator != nil {
		return virtualApplication_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualApplication_STATUS_ARM(generators)
	virtualApplication_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualApplication_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualApplication_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVirtualApplication_STATUS_ARM(generators)
	virtualApplication_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualApplication_STATUS_ARM{}), generators)

	return virtualApplication_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualApplication_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualApplication_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PhysicalPath"] = gen.PtrOf(gen.AlphaString())
	gens["PreloadEnabled"] = gen.PtrOf(gen.Bool())
	gens["VirtualPath"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVirtualApplication_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVirtualApplication_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["VirtualDirectories"] = gen.SliceOf(VirtualDirectory_STATUS_ARMGenerator())
}

func Test_VirtualDirectory_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualDirectory_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualDirectory_STATUS_ARM, VirtualDirectory_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualDirectory_STATUS_ARM runs a test to see if a specific instance of VirtualDirectory_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualDirectory_STATUS_ARM(subject VirtualDirectory_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualDirectory_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualDirectory_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualDirectory_STATUS_ARMGenerator()
var virtualDirectory_STATUS_ARMGenerator gopter.Gen

// VirtualDirectory_STATUS_ARMGenerator returns a generator of VirtualDirectory_STATUS_ARM instances for property testing.
func VirtualDirectory_STATUS_ARMGenerator() gopter.Gen {
	if virtualDirectory_STATUS_ARMGenerator != nil {
		return virtualDirectory_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualDirectory_STATUS_ARM(generators)
	virtualDirectory_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualDirectory_STATUS_ARM{}), generators)

	return virtualDirectory_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualDirectory_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualDirectory_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PhysicalPath"] = gen.PtrOf(gen.AlphaString())
	gens["VirtualPath"] = gen.PtrOf(gen.AlphaString())
}
