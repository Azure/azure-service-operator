// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20220301

import (
	"fmt"
	v20220301s "github.com/Azure/azure-service-operator/v2/api/web/v1beta20220301storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://schema.management.azure.com/schemas/2022-03-01/Microsoft.Web.json#/resourceDefinitions/serverfarms
type Serverfarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Serverfarms_Spec      `json:"spec,omitempty"`
	Status            AppServicePlan_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Serverfarm{}

// GetConditions returns the conditions of the resource
func (serverfarm *Serverfarm) GetConditions() conditions.Conditions {
	return serverfarm.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (serverfarm *Serverfarm) SetConditions(conditions conditions.Conditions) {
	serverfarm.Status.Conditions = conditions
}

var _ conversion.Convertible = &Serverfarm{}

// ConvertFrom populates our Serverfarm from the provided hub Serverfarm
func (serverfarm *Serverfarm) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20220301s.Serverfarm)
	if !ok {
		return fmt.Errorf("expected web/v1beta20220301storage/Serverfarm but received %T instead", hub)
	}

	return serverfarm.AssignPropertiesFromServerfarm(source)
}

// ConvertTo populates the provided hub Serverfarm from our Serverfarm
func (serverfarm *Serverfarm) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20220301s.Serverfarm)
	if !ok {
		return fmt.Errorf("expected web/v1beta20220301storage/Serverfarm but received %T instead", hub)
	}

	return serverfarm.AssignPropertiesToServerfarm(destination)
}

// +kubebuilder:webhook:path=/mutate-web-azure-com-v1beta20220301-serverfarm,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=web.azure.com,resources=serverfarms,verbs=create;update,versions=v1beta20220301,name=default.v1beta20220301.serverfarms.web.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Serverfarm{}

// Default applies defaults to the Serverfarm resource
func (serverfarm *Serverfarm) Default() {
	serverfarm.defaultImpl()
	var temp interface{} = serverfarm
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (serverfarm *Serverfarm) defaultAzureName() {
	if serverfarm.Spec.AzureName == "" {
		serverfarm.Spec.AzureName = serverfarm.Name
	}
}

// defaultImpl applies the code generated defaults to the Serverfarm resource
func (serverfarm *Serverfarm) defaultImpl() { serverfarm.defaultAzureName() }

var _ genruntime.KubernetesResource = &Serverfarm{}

// AzureName returns the Azure name of the resource
func (serverfarm *Serverfarm) AzureName() string {
	return serverfarm.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-03-01"
func (serverfarm Serverfarm) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (serverfarm *Serverfarm) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (serverfarm *Serverfarm) GetSpec() genruntime.ConvertibleSpec {
	return &serverfarm.Spec
}

// GetStatus returns the status of this resource
func (serverfarm *Serverfarm) GetStatus() genruntime.ConvertibleStatus {
	return &serverfarm.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Web/serverfarms"
func (serverfarm *Serverfarm) GetType() string {
	return "Microsoft.Web/serverfarms"
}

// NewEmptyStatus returns a new empty (blank) status
func (serverfarm *Serverfarm) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &AppServicePlan_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (serverfarm *Serverfarm) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(serverfarm.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  serverfarm.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (serverfarm *Serverfarm) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*AppServicePlan_STATUS); ok {
		serverfarm.Status = *st
		return nil
	}

	// Convert status to required version
	var st AppServicePlan_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	serverfarm.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-web-azure-com-v1beta20220301-serverfarm,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=web.azure.com,resources=serverfarms,verbs=create;update,versions=v1beta20220301,name=validate.v1beta20220301.serverfarms.web.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Serverfarm{}

// ValidateCreate validates the creation of the resource
func (serverfarm *Serverfarm) ValidateCreate() error {
	validations := serverfarm.createValidations()
	var temp interface{} = serverfarm
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (serverfarm *Serverfarm) ValidateDelete() error {
	validations := serverfarm.deleteValidations()
	var temp interface{} = serverfarm
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (serverfarm *Serverfarm) ValidateUpdate(old runtime.Object) error {
	validations := serverfarm.updateValidations()
	var temp interface{} = serverfarm
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (serverfarm *Serverfarm) createValidations() []func() error {
	return []func() error{serverfarm.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (serverfarm *Serverfarm) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (serverfarm *Serverfarm) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return serverfarm.validateResourceReferences()
		},
		serverfarm.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (serverfarm *Serverfarm) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&serverfarm.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (serverfarm *Serverfarm) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Serverfarm)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, serverfarm)
}

// AssignPropertiesFromServerfarm populates our Serverfarm from the provided source Serverfarm
func (serverfarm *Serverfarm) AssignPropertiesFromServerfarm(source *v20220301s.Serverfarm) error {

	// ObjectMeta
	serverfarm.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Serverfarms_Spec
	err := spec.AssignPropertiesFromServerfarmsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromServerfarmsSpec() to populate field Spec")
	}
	serverfarm.Spec = spec

	// Status
	var status AppServicePlan_STATUS
	err = status.AssignPropertiesFromAppServicePlanSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromAppServicePlanSTATUS() to populate field Status")
	}
	serverfarm.Status = status

	// No error
	return nil
}

// AssignPropertiesToServerfarm populates the provided destination Serverfarm from our Serverfarm
func (serverfarm *Serverfarm) AssignPropertiesToServerfarm(destination *v20220301s.Serverfarm) error {

	// ObjectMeta
	destination.ObjectMeta = *serverfarm.ObjectMeta.DeepCopy()

	// Spec
	var spec v20220301s.Serverfarms_Spec
	err := serverfarm.Spec.AssignPropertiesToServerfarmsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToServerfarmsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20220301s.AppServicePlan_STATUS
	err = serverfarm.Status.AssignPropertiesToAppServicePlanSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToAppServicePlanSTATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (serverfarm *Serverfarm) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: serverfarm.Spec.OriginalVersion(),
		Kind:    "Serverfarm",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2022-03-01/Microsoft.Web.json#/resourceDefinitions/serverfarms
type ServerfarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Serverfarm `json:"items"`
}

// +kubebuilder:validation:Enum={"2022-03-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2022-03-01")

type AppServicePlan_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// ElasticScaleEnabled: ServerFarm supports ElasticScale. Apps in this plan will scale as if the ServerFarm was
	// ElasticPremium sku
	ElasticScaleEnabled *bool                    `json:"elasticScaleEnabled,omitempty"`
	ExtendedLocation    *ExtendedLocation_STATUS `json:"extendedLocation,omitempty"`

	// FreeOfferExpirationTime: The time when the server farm free offer expires.
	FreeOfferExpirationTime *string `json:"freeOfferExpirationTime,omitempty"`

	// GeoRegion: Geographical location for the App Service plan.
	GeoRegion *string `json:"geoRegion,omitempty"`

	// HostingEnvironmentProfile: Specification for the App Service Environment to use for the App Service plan.
	HostingEnvironmentProfile *HostingEnvironmentProfile_STATUS `json:"hostingEnvironmentProfile,omitempty"`

	// HyperV: If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.
	HyperV *bool `json:"hyperV,omitempty"`

	// Id: Resource Id.
	Id *string `json:"id,omitempty"`

	// IsSpot: If <code>true</code>, this App Service Plan owns spot instances.
	IsSpot *bool `json:"isSpot,omitempty"`

	// IsXenon: Obsolete: If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.
	IsXenon *bool `json:"isXenon,omitempty"`

	// Kind: Kind of resource.
	Kind *string `json:"kind,omitempty"`

	// KubeEnvironmentProfile: Specification for the Kubernetes Environment to use for the App Service plan.
	KubeEnvironmentProfile *KubeEnvironmentProfile_STATUS `json:"kubeEnvironmentProfile,omitempty"`

	// Location: Resource Location.
	Location *string `json:"location,omitempty"`

	// MaximumElasticWorkerCount: Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
	MaximumElasticWorkerCount *int `json:"maximumElasticWorkerCount,omitempty"`

	// MaximumNumberOfWorkers: Maximum number of instances that can be assigned to this App Service plan.
	MaximumNumberOfWorkers *int `json:"maximumNumberOfWorkers,omitempty"`

	// Name: Resource Name.
	Name *string `json:"name,omitempty"`

	// NumberOfSites: Number of apps assigned to this App Service plan.
	NumberOfSites *int `json:"numberOfSites,omitempty"`

	// NumberOfWorkers: The number of instances that are assigned to this App Service plan.
	NumberOfWorkers *int `json:"numberOfWorkers,omitempty"`

	// PerSiteScaling: If <code>true</code>, apps assigned to this App Service plan can be scaled independently.
	// If <code>false</code>, apps assigned to this App Service plan will scale to all instances of the plan.
	PerSiteScaling *bool `json:"perSiteScaling,omitempty"`

	// ProvisioningState: Provisioning state of the App Service Plan.
	ProvisioningState *AppServicePlanSTATUSPropertiesProvisioningState `json:"provisioningState,omitempty"`

	// Reserved: If Linux app service plan <code>true</code>, <code>false</code> otherwise.
	Reserved *bool `json:"reserved,omitempty"`

	// ResourceGroup: Resource group of the App Service plan.
	ResourceGroup *string                `json:"resourceGroup,omitempty"`
	Sku           *SkuDescription_STATUS `json:"sku,omitempty"`

	// SpotExpirationTime: The time when the server farm expires. Valid only if it is a spot server farm.
	SpotExpirationTime *string `json:"spotExpirationTime,omitempty"`

	// Status: App Service plan status.
	Status *AppServicePlanSTATUSPropertiesStatus `json:"status,omitempty"`

	// Subscription: App Service plan subscription.
	Subscription *string `json:"subscription,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// TargetWorkerCount: Scaling worker count.
	TargetWorkerCount *int `json:"targetWorkerCount,omitempty"`

	// TargetWorkerSizeId: Scaling worker size ID.
	TargetWorkerSizeId *int `json:"targetWorkerSizeId,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// WorkerTierName: Target worker tier assigned to the App Service plan.
	WorkerTierName *string `json:"workerTierName,omitempty"`

	// ZoneRedundant: If <code>true</code>, this App Service Plan will perform availability zone balancing.
	// If <code>false</code>, this App Service Plan will not perform availability zone balancing.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ConvertibleStatus = &AppServicePlan_STATUS{}

// ConvertStatusFrom populates our AppServicePlan_STATUS from the provided source
func (plan *AppServicePlan_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20220301s.AppServicePlan_STATUS)
	if ok {
		// Populate our instance from source
		return plan.AssignPropertiesFromAppServicePlanSTATUS(src)
	}

	// Convert to an intermediate form
	src = &v20220301s.AppServicePlan_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = plan.AssignPropertiesFromAppServicePlanSTATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our AppServicePlan_STATUS
func (plan *AppServicePlan_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20220301s.AppServicePlan_STATUS)
	if ok {
		// Populate destination from our instance
		return plan.AssignPropertiesToAppServicePlanSTATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20220301s.AppServicePlan_STATUS{}
	err := plan.AssignPropertiesToAppServicePlanSTATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &AppServicePlan_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (plan *AppServicePlan_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AppServicePlan_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (plan *AppServicePlan_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AppServicePlan_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AppServicePlan_STATUSARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ElasticScaleEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ElasticScaleEnabled != nil {
			elasticScaleEnabled := *typedInput.Properties.ElasticScaleEnabled
			plan.ElasticScaleEnabled = &elasticScaleEnabled
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_STATUS
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		plan.ExtendedLocation = &extendedLocation
	}

	// Set property ‘FreeOfferExpirationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FreeOfferExpirationTime != nil {
			freeOfferExpirationTime := *typedInput.Properties.FreeOfferExpirationTime
			plan.FreeOfferExpirationTime = &freeOfferExpirationTime
		}
	}

	// Set property ‘GeoRegion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GeoRegion != nil {
			geoRegion := *typedInput.Properties.GeoRegion
			plan.GeoRegion = &geoRegion
		}
	}

	// Set property ‘HostingEnvironmentProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostingEnvironmentProfile != nil {
			var hostingEnvironmentProfile1 HostingEnvironmentProfile_STATUS
			err := hostingEnvironmentProfile1.PopulateFromARM(owner, *typedInput.Properties.HostingEnvironmentProfile)
			if err != nil {
				return err
			}
			hostingEnvironmentProfile := hostingEnvironmentProfile1
			plan.HostingEnvironmentProfile = &hostingEnvironmentProfile
		}
	}

	// Set property ‘HyperV’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HyperV != nil {
			hyperV := *typedInput.Properties.HyperV
			plan.HyperV = &hyperV
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		plan.Id = &id
	}

	// Set property ‘IsSpot’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsSpot != nil {
			isSpot := *typedInput.Properties.IsSpot
			plan.IsSpot = &isSpot
		}
	}

	// Set property ‘IsXenon’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsXenon != nil {
			isXenon := *typedInput.Properties.IsXenon
			plan.IsXenon = &isXenon
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		plan.Kind = &kind
	}

	// Set property ‘KubeEnvironmentProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KubeEnvironmentProfile != nil {
			var kubeEnvironmentProfile1 KubeEnvironmentProfile_STATUS
			err := kubeEnvironmentProfile1.PopulateFromARM(owner, *typedInput.Properties.KubeEnvironmentProfile)
			if err != nil {
				return err
			}
			kubeEnvironmentProfile := kubeEnvironmentProfile1
			plan.KubeEnvironmentProfile = &kubeEnvironmentProfile
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		plan.Location = &location
	}

	// Set property ‘MaximumElasticWorkerCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaximumElasticWorkerCount != nil {
			maximumElasticWorkerCount := *typedInput.Properties.MaximumElasticWorkerCount
			plan.MaximumElasticWorkerCount = &maximumElasticWorkerCount
		}
	}

	// Set property ‘MaximumNumberOfWorkers’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaximumNumberOfWorkers != nil {
			maximumNumberOfWorkers := *typedInput.Properties.MaximumNumberOfWorkers
			plan.MaximumNumberOfWorkers = &maximumNumberOfWorkers
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		plan.Name = &name
	}

	// Set property ‘NumberOfSites’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NumberOfSites != nil {
			numberOfSites := *typedInput.Properties.NumberOfSites
			plan.NumberOfSites = &numberOfSites
		}
	}

	// Set property ‘NumberOfWorkers’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NumberOfWorkers != nil {
			numberOfWorkers := *typedInput.Properties.NumberOfWorkers
			plan.NumberOfWorkers = &numberOfWorkers
		}
	}

	// Set property ‘PerSiteScaling’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PerSiteScaling != nil {
			perSiteScaling := *typedInput.Properties.PerSiteScaling
			plan.PerSiteScaling = &perSiteScaling
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			plan.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Reserved’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Reserved != nil {
			reserved := *typedInput.Properties.Reserved
			plan.Reserved = &reserved
		}
	}

	// Set property ‘ResourceGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGroup != nil {
			resourceGroup := *typedInput.Properties.ResourceGroup
			plan.ResourceGroup = &resourceGroup
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 SkuDescription_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		plan.Sku = &sku
	}

	// Set property ‘SpotExpirationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SpotExpirationTime != nil {
			spotExpirationTime := *typedInput.Properties.SpotExpirationTime
			plan.SpotExpirationTime = &spotExpirationTime
		}
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			plan.Status = &status
		}
	}

	// Set property ‘Subscription’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subscription != nil {
			subscription := *typedInput.Properties.Subscription
			plan.Subscription = &subscription
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		plan.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			plan.Tags[key] = value
		}
	}

	// Set property ‘TargetWorkerCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetWorkerCount != nil {
			targetWorkerCount := *typedInput.Properties.TargetWorkerCount
			plan.TargetWorkerCount = &targetWorkerCount
		}
	}

	// Set property ‘TargetWorkerSizeId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetWorkerSizeId != nil {
			targetWorkerSizeId := *typedInput.Properties.TargetWorkerSizeId
			plan.TargetWorkerSizeId = &targetWorkerSizeId
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		plan.Type = &typeVar
	}

	// Set property ‘WorkerTierName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WorkerTierName != nil {
			workerTierName := *typedInput.Properties.WorkerTierName
			plan.WorkerTierName = &workerTierName
		}
	}

	// Set property ‘ZoneRedundant’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			plan.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromAppServicePlanSTATUS populates our AppServicePlan_STATUS from the provided source AppServicePlan_STATUS
func (plan *AppServicePlan_STATUS) AssignPropertiesFromAppServicePlanSTATUS(source *v20220301s.AppServicePlan_STATUS) error {

	// Conditions
	plan.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ElasticScaleEnabled
	if source.ElasticScaleEnabled != nil {
		elasticScaleEnabled := *source.ElasticScaleEnabled
		plan.ElasticScaleEnabled = &elasticScaleEnabled
	} else {
		plan.ElasticScaleEnabled = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
		err := extendedLocation.AssignPropertiesFromExtendedLocationSTATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		plan.ExtendedLocation = &extendedLocation
	} else {
		plan.ExtendedLocation = nil
	}

	// FreeOfferExpirationTime
	plan.FreeOfferExpirationTime = genruntime.ClonePointerToString(source.FreeOfferExpirationTime)

	// GeoRegion
	plan.GeoRegion = genruntime.ClonePointerToString(source.GeoRegion)

	// HostingEnvironmentProfile
	if source.HostingEnvironmentProfile != nil {
		var hostingEnvironmentProfile HostingEnvironmentProfile_STATUS
		err := hostingEnvironmentProfile.AssignPropertiesFromHostingEnvironmentProfileSTATUS(source.HostingEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHostingEnvironmentProfileSTATUS() to populate field HostingEnvironmentProfile")
		}
		plan.HostingEnvironmentProfile = &hostingEnvironmentProfile
	} else {
		plan.HostingEnvironmentProfile = nil
	}

	// HyperV
	if source.HyperV != nil {
		hyperV := *source.HyperV
		plan.HyperV = &hyperV
	} else {
		plan.HyperV = nil
	}

	// Id
	plan.Id = genruntime.ClonePointerToString(source.Id)

	// IsSpot
	if source.IsSpot != nil {
		isSpot := *source.IsSpot
		plan.IsSpot = &isSpot
	} else {
		plan.IsSpot = nil
	}

	// IsXenon
	if source.IsXenon != nil {
		isXenon := *source.IsXenon
		plan.IsXenon = &isXenon
	} else {
		plan.IsXenon = nil
	}

	// Kind
	plan.Kind = genruntime.ClonePointerToString(source.Kind)

	// KubeEnvironmentProfile
	if source.KubeEnvironmentProfile != nil {
		var kubeEnvironmentProfile KubeEnvironmentProfile_STATUS
		err := kubeEnvironmentProfile.AssignPropertiesFromKubeEnvironmentProfileSTATUS(source.KubeEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKubeEnvironmentProfileSTATUS() to populate field KubeEnvironmentProfile")
		}
		plan.KubeEnvironmentProfile = &kubeEnvironmentProfile
	} else {
		plan.KubeEnvironmentProfile = nil
	}

	// Location
	plan.Location = genruntime.ClonePointerToString(source.Location)

	// MaximumElasticWorkerCount
	plan.MaximumElasticWorkerCount = genruntime.ClonePointerToInt(source.MaximumElasticWorkerCount)

	// MaximumNumberOfWorkers
	plan.MaximumNumberOfWorkers = genruntime.ClonePointerToInt(source.MaximumNumberOfWorkers)

	// Name
	plan.Name = genruntime.ClonePointerToString(source.Name)

	// NumberOfSites
	plan.NumberOfSites = genruntime.ClonePointerToInt(source.NumberOfSites)

	// NumberOfWorkers
	plan.NumberOfWorkers = genruntime.ClonePointerToInt(source.NumberOfWorkers)

	// PerSiteScaling
	if source.PerSiteScaling != nil {
		perSiteScaling := *source.PerSiteScaling
		plan.PerSiteScaling = &perSiteScaling
	} else {
		plan.PerSiteScaling = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := AppServicePlanSTATUSPropertiesProvisioningState(*source.ProvisioningState)
		plan.ProvisioningState = &provisioningState
	} else {
		plan.ProvisioningState = nil
	}

	// Reserved
	if source.Reserved != nil {
		reserved := *source.Reserved
		plan.Reserved = &reserved
	} else {
		plan.Reserved = nil
	}

	// ResourceGroup
	plan.ResourceGroup = genruntime.ClonePointerToString(source.ResourceGroup)

	// Sku
	if source.Sku != nil {
		var sku SkuDescription_STATUS
		err := sku.AssignPropertiesFromSkuDescriptionSTATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuDescriptionSTATUS() to populate field Sku")
		}
		plan.Sku = &sku
	} else {
		plan.Sku = nil
	}

	// SpotExpirationTime
	plan.SpotExpirationTime = genruntime.ClonePointerToString(source.SpotExpirationTime)

	// Status
	if source.Status != nil {
		status := AppServicePlanSTATUSPropertiesStatus(*source.Status)
		plan.Status = &status
	} else {
		plan.Status = nil
	}

	// Subscription
	plan.Subscription = genruntime.ClonePointerToString(source.Subscription)

	// Tags
	plan.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TargetWorkerCount
	plan.TargetWorkerCount = genruntime.ClonePointerToInt(source.TargetWorkerCount)

	// TargetWorkerSizeId
	plan.TargetWorkerSizeId = genruntime.ClonePointerToInt(source.TargetWorkerSizeId)

	// Type
	plan.Type = genruntime.ClonePointerToString(source.Type)

	// WorkerTierName
	plan.WorkerTierName = genruntime.ClonePointerToString(source.WorkerTierName)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		plan.ZoneRedundant = &zoneRedundant
	} else {
		plan.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAppServicePlanSTATUS populates the provided destination AppServicePlan_STATUS from our AppServicePlan_STATUS
func (plan *AppServicePlan_STATUS) AssignPropertiesToAppServicePlanSTATUS(destination *v20220301s.AppServicePlan_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(plan.Conditions)

	// ElasticScaleEnabled
	if plan.ElasticScaleEnabled != nil {
		elasticScaleEnabled := *plan.ElasticScaleEnabled
		destination.ElasticScaleEnabled = &elasticScaleEnabled
	} else {
		destination.ElasticScaleEnabled = nil
	}

	// ExtendedLocation
	if plan.ExtendedLocation != nil {
		var extendedLocation v20220301s.ExtendedLocation_STATUS
		err := plan.ExtendedLocation.AssignPropertiesToExtendedLocationSTATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocationSTATUS() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// FreeOfferExpirationTime
	destination.FreeOfferExpirationTime = genruntime.ClonePointerToString(plan.FreeOfferExpirationTime)

	// GeoRegion
	destination.GeoRegion = genruntime.ClonePointerToString(plan.GeoRegion)

	// HostingEnvironmentProfile
	if plan.HostingEnvironmentProfile != nil {
		var hostingEnvironmentProfile v20220301s.HostingEnvironmentProfile_STATUS
		err := plan.HostingEnvironmentProfile.AssignPropertiesToHostingEnvironmentProfileSTATUS(&hostingEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHostingEnvironmentProfileSTATUS() to populate field HostingEnvironmentProfile")
		}
		destination.HostingEnvironmentProfile = &hostingEnvironmentProfile
	} else {
		destination.HostingEnvironmentProfile = nil
	}

	// HyperV
	if plan.HyperV != nil {
		hyperV := *plan.HyperV
		destination.HyperV = &hyperV
	} else {
		destination.HyperV = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(plan.Id)

	// IsSpot
	if plan.IsSpot != nil {
		isSpot := *plan.IsSpot
		destination.IsSpot = &isSpot
	} else {
		destination.IsSpot = nil
	}

	// IsXenon
	if plan.IsXenon != nil {
		isXenon := *plan.IsXenon
		destination.IsXenon = &isXenon
	} else {
		destination.IsXenon = nil
	}

	// Kind
	destination.Kind = genruntime.ClonePointerToString(plan.Kind)

	// KubeEnvironmentProfile
	if plan.KubeEnvironmentProfile != nil {
		var kubeEnvironmentProfile v20220301s.KubeEnvironmentProfile_STATUS
		err := plan.KubeEnvironmentProfile.AssignPropertiesToKubeEnvironmentProfileSTATUS(&kubeEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKubeEnvironmentProfileSTATUS() to populate field KubeEnvironmentProfile")
		}
		destination.KubeEnvironmentProfile = &kubeEnvironmentProfile
	} else {
		destination.KubeEnvironmentProfile = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(plan.Location)

	// MaximumElasticWorkerCount
	destination.MaximumElasticWorkerCount = genruntime.ClonePointerToInt(plan.MaximumElasticWorkerCount)

	// MaximumNumberOfWorkers
	destination.MaximumNumberOfWorkers = genruntime.ClonePointerToInt(plan.MaximumNumberOfWorkers)

	// Name
	destination.Name = genruntime.ClonePointerToString(plan.Name)

	// NumberOfSites
	destination.NumberOfSites = genruntime.ClonePointerToInt(plan.NumberOfSites)

	// NumberOfWorkers
	destination.NumberOfWorkers = genruntime.ClonePointerToInt(plan.NumberOfWorkers)

	// PerSiteScaling
	if plan.PerSiteScaling != nil {
		perSiteScaling := *plan.PerSiteScaling
		destination.PerSiteScaling = &perSiteScaling
	} else {
		destination.PerSiteScaling = nil
	}

	// ProvisioningState
	if plan.ProvisioningState != nil {
		provisioningState := string(*plan.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Reserved
	if plan.Reserved != nil {
		reserved := *plan.Reserved
		destination.Reserved = &reserved
	} else {
		destination.Reserved = nil
	}

	// ResourceGroup
	destination.ResourceGroup = genruntime.ClonePointerToString(plan.ResourceGroup)

	// Sku
	if plan.Sku != nil {
		var sku v20220301s.SkuDescription_STATUS
		err := plan.Sku.AssignPropertiesToSkuDescriptionSTATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuDescriptionSTATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SpotExpirationTime
	destination.SpotExpirationTime = genruntime.ClonePointerToString(plan.SpotExpirationTime)

	// Status
	if plan.Status != nil {
		status := string(*plan.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Subscription
	destination.Subscription = genruntime.ClonePointerToString(plan.Subscription)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(plan.Tags)

	// TargetWorkerCount
	destination.TargetWorkerCount = genruntime.ClonePointerToInt(plan.TargetWorkerCount)

	// TargetWorkerSizeId
	destination.TargetWorkerSizeId = genruntime.ClonePointerToInt(plan.TargetWorkerSizeId)

	// Type
	destination.Type = genruntime.ClonePointerToString(plan.Type)

	// WorkerTierName
	destination.WorkerTierName = genruntime.ClonePointerToString(plan.WorkerTierName)

	// ZoneRedundant
	if plan.ZoneRedundant != nil {
		zoneRedundant := *plan.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Serverfarms_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// ElasticScaleEnabled: ServerFarm supports ElasticScale. Apps in this plan will scale as if the ServerFarm was
	// ElasticPremium sku
	ElasticScaleEnabled *bool `json:"elasticScaleEnabled,omitempty"`

	// ExtendedLocation: Extended Location.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// FreeOfferExpirationTime: The time when the server farm free offer expires.
	FreeOfferExpirationTime *string `json:"freeOfferExpirationTime,omitempty"`

	// HostingEnvironmentProfile: Specification for an App Service Environment to use for this resource.
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`

	// HyperV: If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.
	HyperV *bool `json:"hyperV,omitempty"`

	// IsSpot: If <code>true</code>, this App Service Plan owns spot instances.
	IsSpot *bool `json:"isSpot,omitempty"`

	// IsXenon: Obsolete: If Hyper-V container app service plan <code>true</code>, <code>false</code> otherwise.
	IsXenon *bool `json:"isXenon,omitempty"`

	// Kind: Kind of resource.
	Kind *string `json:"kind,omitempty"`

	// KubeEnvironmentProfile: Specification for a Kubernetes Environment to use for this resource.
	KubeEnvironmentProfile *KubeEnvironmentProfile `json:"kubeEnvironmentProfile,omitempty"`

	// Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// MaximumElasticWorkerCount: Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
	MaximumElasticWorkerCount *int `json:"maximumElasticWorkerCount,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// PerSiteScaling: If <code>true</code>, apps assigned to this App Service plan can be scaled independently.
	// If <code>false</code>, apps assigned to this App Service plan will scale to all instances of the plan.
	PerSiteScaling *bool `json:"perSiteScaling,omitempty"`

	// Reserved: If Linux app service plan <code>true</code>, <code>false</code> otherwise.
	Reserved *bool `json:"reserved,omitempty"`

	// Sku: Description of a SKU for a scalable resource.
	Sku *SkuDescription `json:"sku,omitempty"`

	// SpotExpirationTime: The time when the server farm expires. Valid only if it is a spot server farm.
	SpotExpirationTime *string `json:"spotExpirationTime,omitempty"`

	// Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// TargetWorkerCount: Scaling worker count.
	TargetWorkerCount *int `json:"targetWorkerCount,omitempty"`

	// TargetWorkerSizeId: Scaling worker size ID.
	TargetWorkerSizeId *int `json:"targetWorkerSizeId,omitempty"`

	// WorkerTierName: Target worker tier assigned to the App Service plan.
	WorkerTierName *string `json:"workerTierName,omitempty"`

	// ZoneRedundant: If <code>true</code>, this App Service Plan will perform availability zone balancing.
	// If <code>false</code>, this App Service Plan will not perform availability zone balancing.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ARMTransformer = &Serverfarms_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serverfarms *Serverfarms_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serverfarms == nil {
		return nil, nil
	}
	result := &Serverfarms_SpecARM{}

	// Set property ‘ExtendedLocation’:
	if serverfarms.ExtendedLocation != nil {
		extendedLocationARM, err := (*serverfarms.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := *extendedLocationARM.(*ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Kind’:
	if serverfarms.Kind != nil {
		kind := *serverfarms.Kind
		result.Kind = &kind
	}

	// Set property ‘Location’:
	if serverfarms.Location != nil {
		location := *serverfarms.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if serverfarms.ElasticScaleEnabled != nil ||
		serverfarms.FreeOfferExpirationTime != nil ||
		serverfarms.HostingEnvironmentProfile != nil ||
		serverfarms.HyperV != nil ||
		serverfarms.IsSpot != nil ||
		serverfarms.IsXenon != nil ||
		serverfarms.KubeEnvironmentProfile != nil ||
		serverfarms.MaximumElasticWorkerCount != nil ||
		serverfarms.PerSiteScaling != nil ||
		serverfarms.Reserved != nil ||
		serverfarms.SpotExpirationTime != nil ||
		serverfarms.TargetWorkerCount != nil ||
		serverfarms.TargetWorkerSizeId != nil ||
		serverfarms.WorkerTierName != nil ||
		serverfarms.ZoneRedundant != nil {
		result.Properties = &AppServicePlanPropertiesARM{}
	}
	if serverfarms.ElasticScaleEnabled != nil {
		elasticScaleEnabled := *serverfarms.ElasticScaleEnabled
		result.Properties.ElasticScaleEnabled = &elasticScaleEnabled
	}
	if serverfarms.FreeOfferExpirationTime != nil {
		freeOfferExpirationTime := *serverfarms.FreeOfferExpirationTime
		result.Properties.FreeOfferExpirationTime = &freeOfferExpirationTime
	}
	if serverfarms.HostingEnvironmentProfile != nil {
		hostingEnvironmentProfileARM, err := (*serverfarms.HostingEnvironmentProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		hostingEnvironmentProfile := *hostingEnvironmentProfileARM.(*HostingEnvironmentProfileARM)
		result.Properties.HostingEnvironmentProfile = &hostingEnvironmentProfile
	}
	if serverfarms.HyperV != nil {
		hyperV := *serverfarms.HyperV
		result.Properties.HyperV = &hyperV
	}
	if serverfarms.IsSpot != nil {
		isSpot := *serverfarms.IsSpot
		result.Properties.IsSpot = &isSpot
	}
	if serverfarms.IsXenon != nil {
		isXenon := *serverfarms.IsXenon
		result.Properties.IsXenon = &isXenon
	}
	if serverfarms.KubeEnvironmentProfile != nil {
		kubeEnvironmentProfileARM, err := (*serverfarms.KubeEnvironmentProfile).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		kubeEnvironmentProfile := *kubeEnvironmentProfileARM.(*KubeEnvironmentProfileARM)
		result.Properties.KubeEnvironmentProfile = &kubeEnvironmentProfile
	}
	if serverfarms.MaximumElasticWorkerCount != nil {
		maximumElasticWorkerCount := *serverfarms.MaximumElasticWorkerCount
		result.Properties.MaximumElasticWorkerCount = &maximumElasticWorkerCount
	}
	if serverfarms.PerSiteScaling != nil {
		perSiteScaling := *serverfarms.PerSiteScaling
		result.Properties.PerSiteScaling = &perSiteScaling
	}
	if serverfarms.Reserved != nil {
		reserved := *serverfarms.Reserved
		result.Properties.Reserved = &reserved
	}
	if serverfarms.SpotExpirationTime != nil {
		spotExpirationTime := *serverfarms.SpotExpirationTime
		result.Properties.SpotExpirationTime = &spotExpirationTime
	}
	if serverfarms.TargetWorkerCount != nil {
		targetWorkerCount := *serverfarms.TargetWorkerCount
		result.Properties.TargetWorkerCount = &targetWorkerCount
	}
	if serverfarms.TargetWorkerSizeId != nil {
		targetWorkerSizeId := *serverfarms.TargetWorkerSizeId
		result.Properties.TargetWorkerSizeId = &targetWorkerSizeId
	}
	if serverfarms.WorkerTierName != nil {
		workerTierName := *serverfarms.WorkerTierName
		result.Properties.WorkerTierName = &workerTierName
	}
	if serverfarms.ZoneRedundant != nil {
		zoneRedundant := *serverfarms.ZoneRedundant
		result.Properties.ZoneRedundant = &zoneRedundant
	}

	// Set property ‘Sku’:
	if serverfarms.Sku != nil {
		skuARM, err := (*serverfarms.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*SkuDescriptionARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if serverfarms.Tags != nil {
		result.Tags = make(map[string]string, len(serverfarms.Tags))
		for key, value := range serverfarms.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serverfarms *Serverfarms_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Serverfarms_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serverfarms *Serverfarms_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Serverfarms_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Serverfarms_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	serverfarms.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ElasticScaleEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ElasticScaleEnabled != nil {
			elasticScaleEnabled := *typedInput.Properties.ElasticScaleEnabled
			serverfarms.ElasticScaleEnabled = &elasticScaleEnabled
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		serverfarms.ExtendedLocation = &extendedLocation
	}

	// Set property ‘FreeOfferExpirationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FreeOfferExpirationTime != nil {
			freeOfferExpirationTime := *typedInput.Properties.FreeOfferExpirationTime
			serverfarms.FreeOfferExpirationTime = &freeOfferExpirationTime
		}
	}

	// Set property ‘HostingEnvironmentProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostingEnvironmentProfile != nil {
			var hostingEnvironmentProfile1 HostingEnvironmentProfile
			err := hostingEnvironmentProfile1.PopulateFromARM(owner, *typedInput.Properties.HostingEnvironmentProfile)
			if err != nil {
				return err
			}
			hostingEnvironmentProfile := hostingEnvironmentProfile1
			serverfarms.HostingEnvironmentProfile = &hostingEnvironmentProfile
		}
	}

	// Set property ‘HyperV’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HyperV != nil {
			hyperV := *typedInput.Properties.HyperV
			serverfarms.HyperV = &hyperV
		}
	}

	// Set property ‘IsSpot’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsSpot != nil {
			isSpot := *typedInput.Properties.IsSpot
			serverfarms.IsSpot = &isSpot
		}
	}

	// Set property ‘IsXenon’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsXenon != nil {
			isXenon := *typedInput.Properties.IsXenon
			serverfarms.IsXenon = &isXenon
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		serverfarms.Kind = &kind
	}

	// Set property ‘KubeEnvironmentProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KubeEnvironmentProfile != nil {
			var kubeEnvironmentProfile1 KubeEnvironmentProfile
			err := kubeEnvironmentProfile1.PopulateFromARM(owner, *typedInput.Properties.KubeEnvironmentProfile)
			if err != nil {
				return err
			}
			kubeEnvironmentProfile := kubeEnvironmentProfile1
			serverfarms.KubeEnvironmentProfile = &kubeEnvironmentProfile
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		serverfarms.Location = &location
	}

	// Set property ‘MaximumElasticWorkerCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaximumElasticWorkerCount != nil {
			maximumElasticWorkerCount := *typedInput.Properties.MaximumElasticWorkerCount
			serverfarms.MaximumElasticWorkerCount = &maximumElasticWorkerCount
		}
	}

	// Set property ‘Owner’:
	serverfarms.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PerSiteScaling’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PerSiteScaling != nil {
			perSiteScaling := *typedInput.Properties.PerSiteScaling
			serverfarms.PerSiteScaling = &perSiteScaling
		}
	}

	// Set property ‘Reserved’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Reserved != nil {
			reserved := *typedInput.Properties.Reserved
			serverfarms.Reserved = &reserved
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 SkuDescription
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		serverfarms.Sku = &sku
	}

	// Set property ‘SpotExpirationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SpotExpirationTime != nil {
			spotExpirationTime := *typedInput.Properties.SpotExpirationTime
			serverfarms.SpotExpirationTime = &spotExpirationTime
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		serverfarms.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			serverfarms.Tags[key] = value
		}
	}

	// Set property ‘TargetWorkerCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetWorkerCount != nil {
			targetWorkerCount := *typedInput.Properties.TargetWorkerCount
			serverfarms.TargetWorkerCount = &targetWorkerCount
		}
	}

	// Set property ‘TargetWorkerSizeId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetWorkerSizeId != nil {
			targetWorkerSizeId := *typedInput.Properties.TargetWorkerSizeId
			serverfarms.TargetWorkerSizeId = &targetWorkerSizeId
		}
	}

	// Set property ‘WorkerTierName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WorkerTierName != nil {
			workerTierName := *typedInput.Properties.WorkerTierName
			serverfarms.WorkerTierName = &workerTierName
		}
	}

	// Set property ‘ZoneRedundant’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			serverfarms.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Serverfarms_Spec{}

// ConvertSpecFrom populates our Serverfarms_Spec from the provided source
func (serverfarms *Serverfarms_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20220301s.Serverfarms_Spec)
	if ok {
		// Populate our instance from source
		return serverfarms.AssignPropertiesFromServerfarmsSpec(src)
	}

	// Convert to an intermediate form
	src = &v20220301s.Serverfarms_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = serverfarms.AssignPropertiesFromServerfarmsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Serverfarms_Spec
func (serverfarms *Serverfarms_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20220301s.Serverfarms_Spec)
	if ok {
		// Populate destination from our instance
		return serverfarms.AssignPropertiesToServerfarmsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v20220301s.Serverfarms_Spec{}
	err := serverfarms.AssignPropertiesToServerfarmsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromServerfarmsSpec populates our Serverfarms_Spec from the provided source Serverfarms_Spec
func (serverfarms *Serverfarms_Spec) AssignPropertiesFromServerfarmsSpec(source *v20220301s.Serverfarms_Spec) error {

	// AzureName
	serverfarms.AzureName = source.AzureName

	// ElasticScaleEnabled
	if source.ElasticScaleEnabled != nil {
		elasticScaleEnabled := *source.ElasticScaleEnabled
		serverfarms.ElasticScaleEnabled = &elasticScaleEnabled
	} else {
		serverfarms.ElasticScaleEnabled = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExtendedLocation() to populate field ExtendedLocation")
		}
		serverfarms.ExtendedLocation = &extendedLocation
	} else {
		serverfarms.ExtendedLocation = nil
	}

	// FreeOfferExpirationTime
	if source.FreeOfferExpirationTime != nil {
		freeOfferExpirationTime := *source.FreeOfferExpirationTime
		serverfarms.FreeOfferExpirationTime = &freeOfferExpirationTime
	} else {
		serverfarms.FreeOfferExpirationTime = nil
	}

	// HostingEnvironmentProfile
	if source.HostingEnvironmentProfile != nil {
		var hostingEnvironmentProfile HostingEnvironmentProfile
		err := hostingEnvironmentProfile.AssignPropertiesFromHostingEnvironmentProfile(source.HostingEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHostingEnvironmentProfile() to populate field HostingEnvironmentProfile")
		}
		serverfarms.HostingEnvironmentProfile = &hostingEnvironmentProfile
	} else {
		serverfarms.HostingEnvironmentProfile = nil
	}

	// HyperV
	if source.HyperV != nil {
		hyperV := *source.HyperV
		serverfarms.HyperV = &hyperV
	} else {
		serverfarms.HyperV = nil
	}

	// IsSpot
	if source.IsSpot != nil {
		isSpot := *source.IsSpot
		serverfarms.IsSpot = &isSpot
	} else {
		serverfarms.IsSpot = nil
	}

	// IsXenon
	if source.IsXenon != nil {
		isXenon := *source.IsXenon
		serverfarms.IsXenon = &isXenon
	} else {
		serverfarms.IsXenon = nil
	}

	// Kind
	serverfarms.Kind = genruntime.ClonePointerToString(source.Kind)

	// KubeEnvironmentProfile
	if source.KubeEnvironmentProfile != nil {
		var kubeEnvironmentProfile KubeEnvironmentProfile
		err := kubeEnvironmentProfile.AssignPropertiesFromKubeEnvironmentProfile(source.KubeEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKubeEnvironmentProfile() to populate field KubeEnvironmentProfile")
		}
		serverfarms.KubeEnvironmentProfile = &kubeEnvironmentProfile
	} else {
		serverfarms.KubeEnvironmentProfile = nil
	}

	// Location
	serverfarms.Location = genruntime.ClonePointerToString(source.Location)

	// MaximumElasticWorkerCount
	serverfarms.MaximumElasticWorkerCount = genruntime.ClonePointerToInt(source.MaximumElasticWorkerCount)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		serverfarms.Owner = &owner
	} else {
		serverfarms.Owner = nil
	}

	// PerSiteScaling
	if source.PerSiteScaling != nil {
		perSiteScaling := *source.PerSiteScaling
		serverfarms.PerSiteScaling = &perSiteScaling
	} else {
		serverfarms.PerSiteScaling = nil
	}

	// Reserved
	if source.Reserved != nil {
		reserved := *source.Reserved
		serverfarms.Reserved = &reserved
	} else {
		serverfarms.Reserved = nil
	}

	// Sku
	if source.Sku != nil {
		var sku SkuDescription
		err := sku.AssignPropertiesFromSkuDescription(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuDescription() to populate field Sku")
		}
		serverfarms.Sku = &sku
	} else {
		serverfarms.Sku = nil
	}

	// SpotExpirationTime
	if source.SpotExpirationTime != nil {
		spotExpirationTime := *source.SpotExpirationTime
		serverfarms.SpotExpirationTime = &spotExpirationTime
	} else {
		serverfarms.SpotExpirationTime = nil
	}

	// Tags
	serverfarms.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TargetWorkerCount
	serverfarms.TargetWorkerCount = genruntime.ClonePointerToInt(source.TargetWorkerCount)

	// TargetWorkerSizeId
	serverfarms.TargetWorkerSizeId = genruntime.ClonePointerToInt(source.TargetWorkerSizeId)

	// WorkerTierName
	serverfarms.WorkerTierName = genruntime.ClonePointerToString(source.WorkerTierName)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		serverfarms.ZoneRedundant = &zoneRedundant
	} else {
		serverfarms.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServerfarmsSpec populates the provided destination Serverfarms_Spec from our Serverfarms_Spec
func (serverfarms *Serverfarms_Spec) AssignPropertiesToServerfarmsSpec(destination *v20220301s.Serverfarms_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = serverfarms.AzureName

	// ElasticScaleEnabled
	if serverfarms.ElasticScaleEnabled != nil {
		elasticScaleEnabled := *serverfarms.ElasticScaleEnabled
		destination.ElasticScaleEnabled = &elasticScaleEnabled
	} else {
		destination.ElasticScaleEnabled = nil
	}

	// ExtendedLocation
	if serverfarms.ExtendedLocation != nil {
		var extendedLocation v20220301s.ExtendedLocation
		err := serverfarms.ExtendedLocation.AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// FreeOfferExpirationTime
	if serverfarms.FreeOfferExpirationTime != nil {
		freeOfferExpirationTime := *serverfarms.FreeOfferExpirationTime
		destination.FreeOfferExpirationTime = &freeOfferExpirationTime
	} else {
		destination.FreeOfferExpirationTime = nil
	}

	// HostingEnvironmentProfile
	if serverfarms.HostingEnvironmentProfile != nil {
		var hostingEnvironmentProfile v20220301s.HostingEnvironmentProfile
		err := serverfarms.HostingEnvironmentProfile.AssignPropertiesToHostingEnvironmentProfile(&hostingEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHostingEnvironmentProfile() to populate field HostingEnvironmentProfile")
		}
		destination.HostingEnvironmentProfile = &hostingEnvironmentProfile
	} else {
		destination.HostingEnvironmentProfile = nil
	}

	// HyperV
	if serverfarms.HyperV != nil {
		hyperV := *serverfarms.HyperV
		destination.HyperV = &hyperV
	} else {
		destination.HyperV = nil
	}

	// IsSpot
	if serverfarms.IsSpot != nil {
		isSpot := *serverfarms.IsSpot
		destination.IsSpot = &isSpot
	} else {
		destination.IsSpot = nil
	}

	// IsXenon
	if serverfarms.IsXenon != nil {
		isXenon := *serverfarms.IsXenon
		destination.IsXenon = &isXenon
	} else {
		destination.IsXenon = nil
	}

	// Kind
	destination.Kind = genruntime.ClonePointerToString(serverfarms.Kind)

	// KubeEnvironmentProfile
	if serverfarms.KubeEnvironmentProfile != nil {
		var kubeEnvironmentProfile v20220301s.KubeEnvironmentProfile
		err := serverfarms.KubeEnvironmentProfile.AssignPropertiesToKubeEnvironmentProfile(&kubeEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKubeEnvironmentProfile() to populate field KubeEnvironmentProfile")
		}
		destination.KubeEnvironmentProfile = &kubeEnvironmentProfile
	} else {
		destination.KubeEnvironmentProfile = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(serverfarms.Location)

	// MaximumElasticWorkerCount
	destination.MaximumElasticWorkerCount = genruntime.ClonePointerToInt(serverfarms.MaximumElasticWorkerCount)

	// OriginalVersion
	destination.OriginalVersion = serverfarms.OriginalVersion()

	// Owner
	if serverfarms.Owner != nil {
		owner := serverfarms.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PerSiteScaling
	if serverfarms.PerSiteScaling != nil {
		perSiteScaling := *serverfarms.PerSiteScaling
		destination.PerSiteScaling = &perSiteScaling
	} else {
		destination.PerSiteScaling = nil
	}

	// Reserved
	if serverfarms.Reserved != nil {
		reserved := *serverfarms.Reserved
		destination.Reserved = &reserved
	} else {
		destination.Reserved = nil
	}

	// Sku
	if serverfarms.Sku != nil {
		var sku v20220301s.SkuDescription
		err := serverfarms.Sku.AssignPropertiesToSkuDescription(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuDescription() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SpotExpirationTime
	if serverfarms.SpotExpirationTime != nil {
		spotExpirationTime := *serverfarms.SpotExpirationTime
		destination.SpotExpirationTime = &spotExpirationTime
	} else {
		destination.SpotExpirationTime = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(serverfarms.Tags)

	// TargetWorkerCount
	destination.TargetWorkerCount = genruntime.ClonePointerToInt(serverfarms.TargetWorkerCount)

	// TargetWorkerSizeId
	destination.TargetWorkerSizeId = genruntime.ClonePointerToInt(serverfarms.TargetWorkerSizeId)

	// WorkerTierName
	destination.WorkerTierName = genruntime.ClonePointerToString(serverfarms.WorkerTierName)

	// ZoneRedundant
	if serverfarms.ZoneRedundant != nil {
		zoneRedundant := *serverfarms.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (serverfarms *Serverfarms_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (serverfarms *Serverfarms_Spec) SetAzureName(azureName string) {
	serverfarms.AzureName = azureName
}

// Generated from: https://schema.management.azure.com/schemas/2022-03-01/Microsoft.Web.json#/definitions/ExtendedLocation
type ExtendedLocation struct {
	// Name: Name of extended location.
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *ExtendedLocation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	result := &ExtendedLocationARM{}

	// Set property ‘Name’:
	if location.Name != nil {
		name := *location.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocationARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation populates our ExtendedLocation from the provided source ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesFromExtendedLocation(source *v20220301s.ExtendedLocation) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation populates the provided destination ExtendedLocation from our ExtendedLocation
func (location *ExtendedLocation) AssignPropertiesToExtendedLocation(destination *v20220301s.ExtendedLocation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ExtendedLocation_STATUS struct {
	// Name: Name of extended location.
	Name *string `json:"name,omitempty"`

	// Type: Type of extended location.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *ExtendedLocation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *ExtendedLocation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_STATUSARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		location.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		location.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocationSTATUS populates our ExtendedLocation_STATUS from the provided source ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignPropertiesFromExtendedLocationSTATUS(source *v20220301s.ExtendedLocation_STATUS) error {

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	location.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToExtendedLocationSTATUS populates the provided destination ExtendedLocation_STATUS from our ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignPropertiesToExtendedLocationSTATUS(destination *v20220301s.ExtendedLocation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	destination.Type = genruntime.ClonePointerToString(location.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2022-03-01/Microsoft.Web.json#/definitions/HostingEnvironmentProfile
type HostingEnvironmentProfile struct {
	// Reference: Resource ID of the App Service Environment.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &HostingEnvironmentProfile{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *HostingEnvironmentProfile) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	result := &HostingEnvironmentProfileARM{}

	// Set property ‘Id’:
	if profile.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*profile.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *HostingEnvironmentProfile) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HostingEnvironmentProfileARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *HostingEnvironmentProfile) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(HostingEnvironmentProfileARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HostingEnvironmentProfileARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromHostingEnvironmentProfile populates our HostingEnvironmentProfile from the provided source HostingEnvironmentProfile
func (profile *HostingEnvironmentProfile) AssignPropertiesFromHostingEnvironmentProfile(source *v20220301s.HostingEnvironmentProfile) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		profile.Reference = &reference
	} else {
		profile.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToHostingEnvironmentProfile populates the provided destination HostingEnvironmentProfile from our HostingEnvironmentProfile
func (profile *HostingEnvironmentProfile) AssignPropertiesToHostingEnvironmentProfile(destination *v20220301s.HostingEnvironmentProfile) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if profile.Reference != nil {
		reference := profile.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HostingEnvironmentProfile_STATUS struct {
	// Id: Resource ID of the App Service Environment.
	Id *string `json:"id,omitempty"`

	// Name: Name of the App Service Environment.
	Name *string `json:"name,omitempty"`

	// Type: Resource type of the App Service Environment.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &HostingEnvironmentProfile_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *HostingEnvironmentProfile_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HostingEnvironmentProfile_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *HostingEnvironmentProfile_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HostingEnvironmentProfile_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HostingEnvironmentProfile_STATUSARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		profile.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		profile.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		profile.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromHostingEnvironmentProfileSTATUS populates our HostingEnvironmentProfile_STATUS from the provided source HostingEnvironmentProfile_STATUS
func (profile *HostingEnvironmentProfile_STATUS) AssignPropertiesFromHostingEnvironmentProfileSTATUS(source *v20220301s.HostingEnvironmentProfile_STATUS) error {

	// Id
	profile.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	profile.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	profile.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToHostingEnvironmentProfileSTATUS populates the provided destination HostingEnvironmentProfile_STATUS from our HostingEnvironmentProfile_STATUS
func (profile *HostingEnvironmentProfile_STATUS) AssignPropertiesToHostingEnvironmentProfileSTATUS(destination *v20220301s.HostingEnvironmentProfile_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(profile.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(profile.Name)

	// Type
	destination.Type = genruntime.ClonePointerToString(profile.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2022-03-01/Microsoft.Web.json#/definitions/KubeEnvironmentProfile
type KubeEnvironmentProfile struct {
	// Reference: Resource ID of the Kubernetes Environment.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &KubeEnvironmentProfile{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (profile *KubeEnvironmentProfile) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if profile == nil {
		return nil, nil
	}
	result := &KubeEnvironmentProfileARM{}

	// Set property ‘Id’:
	if profile.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*profile.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *KubeEnvironmentProfile) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KubeEnvironmentProfileARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *KubeEnvironmentProfile) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(KubeEnvironmentProfileARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KubeEnvironmentProfileARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromKubeEnvironmentProfile populates our KubeEnvironmentProfile from the provided source KubeEnvironmentProfile
func (profile *KubeEnvironmentProfile) AssignPropertiesFromKubeEnvironmentProfile(source *v20220301s.KubeEnvironmentProfile) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		profile.Reference = &reference
	} else {
		profile.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKubeEnvironmentProfile populates the provided destination KubeEnvironmentProfile from our KubeEnvironmentProfile
func (profile *KubeEnvironmentProfile) AssignPropertiesToKubeEnvironmentProfile(destination *v20220301s.KubeEnvironmentProfile) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if profile.Reference != nil {
		reference := profile.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KubeEnvironmentProfile_STATUS struct {
	// Id: Resource ID of the Kubernetes Environment.
	Id *string `json:"id,omitempty"`

	// Name: Name of the Kubernetes Environment.
	Name *string `json:"name,omitempty"`

	// Type: Resource type of the Kubernetes Environment.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &KubeEnvironmentProfile_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (profile *KubeEnvironmentProfile_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KubeEnvironmentProfile_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (profile *KubeEnvironmentProfile_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KubeEnvironmentProfile_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KubeEnvironmentProfile_STATUSARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		profile.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		profile.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		profile.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromKubeEnvironmentProfileSTATUS populates our KubeEnvironmentProfile_STATUS from the provided source KubeEnvironmentProfile_STATUS
func (profile *KubeEnvironmentProfile_STATUS) AssignPropertiesFromKubeEnvironmentProfileSTATUS(source *v20220301s.KubeEnvironmentProfile_STATUS) error {

	// Id
	profile.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	profile.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	profile.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToKubeEnvironmentProfileSTATUS populates the provided destination KubeEnvironmentProfile_STATUS from our KubeEnvironmentProfile_STATUS
func (profile *KubeEnvironmentProfile_STATUS) AssignPropertiesToKubeEnvironmentProfileSTATUS(destination *v20220301s.KubeEnvironmentProfile_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(profile.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(profile.Name)

	// Type
	destination.Type = genruntime.ClonePointerToString(profile.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2022-03-01/Microsoft.Web.json#/definitions/SkuDescription
type SkuDescription struct {
	// Capabilities: Capabilities of the SKU, e.g., is traffic manager enabled?
	Capabilities []Capability `json:"capabilities,omitempty"`

	// Capacity: Current number of instances assigned to the resource.
	Capacity *int `json:"capacity,omitempty"`

	// Family: Family code of the resource SKU.
	Family *string `json:"family,omitempty"`

	// Locations: Locations of the SKU.
	Locations []string `json:"locations,omitempty"`

	// Name: Name of the resource SKU.
	Name *string `json:"name,omitempty"`

	// Size: Size specifier of the resource SKU.
	Size *string `json:"size,omitempty"`

	// SkuCapacity: Description of the App Service plan scale options.
	SkuCapacity *SkuCapacity `json:"skuCapacity,omitempty"`

	// Tier: Service tier of the resource SKU.
	Tier *string `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &SkuDescription{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (description *SkuDescription) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if description == nil {
		return nil, nil
	}
	result := &SkuDescriptionARM{}

	// Set property ‘Capabilities’:
	for _, item := range description.Capabilities {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Capabilities = append(result.Capabilities, *itemARM.(*CapabilityARM))
	}

	// Set property ‘Capacity’:
	if description.Capacity != nil {
		capacity := *description.Capacity
		result.Capacity = &capacity
	}

	// Set property ‘Family’:
	if description.Family != nil {
		family := *description.Family
		result.Family = &family
	}

	// Set property ‘Locations’:
	for _, item := range description.Locations {
		result.Locations = append(result.Locations, item)
	}

	// Set property ‘Name’:
	if description.Name != nil {
		name := *description.Name
		result.Name = &name
	}

	// Set property ‘Size’:
	if description.Size != nil {
		size := *description.Size
		result.Size = &size
	}

	// Set property ‘SkuCapacity’:
	if description.SkuCapacity != nil {
		skuCapacityARM, err := (*description.SkuCapacity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		skuCapacity := *skuCapacityARM.(*SkuCapacityARM)
		result.SkuCapacity = &skuCapacity
	}

	// Set property ‘Tier’:
	if description.Tier != nil {
		tier := *description.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (description *SkuDescription) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuDescriptionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (description *SkuDescription) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuDescriptionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuDescriptionARM, got %T", armInput)
	}

	// Set property ‘Capabilities’:
	for _, item := range typedInput.Capabilities {
		var item1 Capability
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		description.Capabilities = append(description.Capabilities, item1)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		description.Capacity = &capacity
	}

	// Set property ‘Family’:
	if typedInput.Family != nil {
		family := *typedInput.Family
		description.Family = &family
	}

	// Set property ‘Locations’:
	for _, item := range typedInput.Locations {
		description.Locations = append(description.Locations, item)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		description.Name = &name
	}

	// Set property ‘Size’:
	if typedInput.Size != nil {
		size := *typedInput.Size
		description.Size = &size
	}

	// Set property ‘SkuCapacity’:
	if typedInput.SkuCapacity != nil {
		var skuCapacity1 SkuCapacity
		err := skuCapacity1.PopulateFromARM(owner, *typedInput.SkuCapacity)
		if err != nil {
			return err
		}
		skuCapacity := skuCapacity1
		description.SkuCapacity = &skuCapacity
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		description.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuDescription populates our SkuDescription from the provided source SkuDescription
func (description *SkuDescription) AssignPropertiesFromSkuDescription(source *v20220301s.SkuDescription) error {

	// Capabilities
	if source.Capabilities != nil {
		capabilityList := make([]Capability, len(source.Capabilities))
		for capabilityIndex, capabilityItem := range source.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability Capability
			err := capability.AssignPropertiesFromCapability(&capabilityItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCapability() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		description.Capabilities = capabilityList
	} else {
		description.Capabilities = nil
	}

	// Capacity
	description.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	description.Family = genruntime.ClonePointerToString(source.Family)

	// Locations
	description.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Name
	description.Name = genruntime.ClonePointerToString(source.Name)

	// Size
	description.Size = genruntime.ClonePointerToString(source.Size)

	// SkuCapacity
	if source.SkuCapacity != nil {
		var skuCapacity SkuCapacity
		err := skuCapacity.AssignPropertiesFromSkuCapacity(source.SkuCapacity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuCapacity() to populate field SkuCapacity")
		}
		description.SkuCapacity = &skuCapacity
	} else {
		description.SkuCapacity = nil
	}

	// Tier
	description.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// AssignPropertiesToSkuDescription populates the provided destination SkuDescription from our SkuDescription
func (description *SkuDescription) AssignPropertiesToSkuDescription(destination *v20220301s.SkuDescription) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capabilities
	if description.Capabilities != nil {
		capabilityList := make([]v20220301s.Capability, len(description.Capabilities))
		for capabilityIndex, capabilityItem := range description.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability v20220301s.Capability
			err := capabilityItem.AssignPropertiesToCapability(&capability)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCapability() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		destination.Capabilities = capabilityList
	} else {
		destination.Capabilities = nil
	}

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(description.Capacity)

	// Family
	destination.Family = genruntime.ClonePointerToString(description.Family)

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(description.Locations)

	// Name
	destination.Name = genruntime.ClonePointerToString(description.Name)

	// Size
	destination.Size = genruntime.ClonePointerToString(description.Size)

	// SkuCapacity
	if description.SkuCapacity != nil {
		var skuCapacity v20220301s.SkuCapacity
		err := description.SkuCapacity.AssignPropertiesToSkuCapacity(&skuCapacity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuCapacity() to populate field SkuCapacity")
		}
		destination.SkuCapacity = &skuCapacity
	} else {
		destination.SkuCapacity = nil
	}

	// Tier
	destination.Tier = genruntime.ClonePointerToString(description.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SkuDescription_STATUS struct {
	// Capabilities: Capabilities of the SKU, e.g., is traffic manager enabled?
	Capabilities []Capability_STATUS `json:"capabilities,omitempty"`

	// Capacity: Current number of instances assigned to the resource.
	Capacity *int `json:"capacity,omitempty"`

	// Family: Family code of the resource SKU.
	Family *string `json:"family,omitempty"`

	// Locations: Locations of the SKU.
	Locations []string `json:"locations,omitempty"`

	// Name: Name of the resource SKU.
	Name *string `json:"name,omitempty"`

	// Size: Size specifier of the resource SKU.
	Size *string `json:"size,omitempty"`

	// SkuCapacity: Min, max, and default scale values of the SKU.
	SkuCapacity *SkuCapacity_STATUS `json:"skuCapacity,omitempty"`

	// Tier: Service tier of the resource SKU.
	Tier *string `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &SkuDescription_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (description *SkuDescription_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuDescription_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (description *SkuDescription_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuDescription_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuDescription_STATUSARM, got %T", armInput)
	}

	// Set property ‘Capabilities’:
	for _, item := range typedInput.Capabilities {
		var item1 Capability_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		description.Capabilities = append(description.Capabilities, item1)
	}

	// Set property ‘Capacity’:
	if typedInput.Capacity != nil {
		capacity := *typedInput.Capacity
		description.Capacity = &capacity
	}

	// Set property ‘Family’:
	if typedInput.Family != nil {
		family := *typedInput.Family
		description.Family = &family
	}

	// Set property ‘Locations’:
	for _, item := range typedInput.Locations {
		description.Locations = append(description.Locations, item)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		description.Name = &name
	}

	// Set property ‘Size’:
	if typedInput.Size != nil {
		size := *typedInput.Size
		description.Size = &size
	}

	// Set property ‘SkuCapacity’:
	if typedInput.SkuCapacity != nil {
		var skuCapacity1 SkuCapacity_STATUS
		err := skuCapacity1.PopulateFromARM(owner, *typedInput.SkuCapacity)
		if err != nil {
			return err
		}
		skuCapacity := skuCapacity1
		description.SkuCapacity = &skuCapacity
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		description.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuDescriptionSTATUS populates our SkuDescription_STATUS from the provided source SkuDescription_STATUS
func (description *SkuDescription_STATUS) AssignPropertiesFromSkuDescriptionSTATUS(source *v20220301s.SkuDescription_STATUS) error {

	// Capabilities
	if source.Capabilities != nil {
		capabilityList := make([]Capability_STATUS, len(source.Capabilities))
		for capabilityIndex, capabilityItem := range source.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability Capability_STATUS
			err := capability.AssignPropertiesFromCapabilitySTATUS(&capabilityItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromCapabilitySTATUS() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		description.Capabilities = capabilityList
	} else {
		description.Capabilities = nil
	}

	// Capacity
	description.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	description.Family = genruntime.ClonePointerToString(source.Family)

	// Locations
	description.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Name
	description.Name = genruntime.ClonePointerToString(source.Name)

	// Size
	description.Size = genruntime.ClonePointerToString(source.Size)

	// SkuCapacity
	if source.SkuCapacity != nil {
		var skuCapacity SkuCapacity_STATUS
		err := skuCapacity.AssignPropertiesFromSkuCapacitySTATUS(source.SkuCapacity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuCapacitySTATUS() to populate field SkuCapacity")
		}
		description.SkuCapacity = &skuCapacity
	} else {
		description.SkuCapacity = nil
	}

	// Tier
	description.Tier = genruntime.ClonePointerToString(source.Tier)

	// No error
	return nil
}

// AssignPropertiesToSkuDescriptionSTATUS populates the provided destination SkuDescription_STATUS from our SkuDescription_STATUS
func (description *SkuDescription_STATUS) AssignPropertiesToSkuDescriptionSTATUS(destination *v20220301s.SkuDescription_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Capabilities
	if description.Capabilities != nil {
		capabilityList := make([]v20220301s.Capability_STATUS, len(description.Capabilities))
		for capabilityIndex, capabilityItem := range description.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability v20220301s.Capability_STATUS
			err := capabilityItem.AssignPropertiesToCapabilitySTATUS(&capability)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToCapabilitySTATUS() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		destination.Capabilities = capabilityList
	} else {
		destination.Capabilities = nil
	}

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(description.Capacity)

	// Family
	destination.Family = genruntime.ClonePointerToString(description.Family)

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(description.Locations)

	// Name
	destination.Name = genruntime.ClonePointerToString(description.Name)

	// Size
	destination.Size = genruntime.ClonePointerToString(description.Size)

	// SkuCapacity
	if description.SkuCapacity != nil {
		var skuCapacity v20220301s.SkuCapacity_STATUS
		err := description.SkuCapacity.AssignPropertiesToSkuCapacitySTATUS(&skuCapacity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuCapacitySTATUS() to populate field SkuCapacity")
		}
		destination.SkuCapacity = &skuCapacity
	} else {
		destination.SkuCapacity = nil
	}

	// Tier
	destination.Tier = genruntime.ClonePointerToString(description.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2022-03-01/Microsoft.Web.json#/definitions/Capability
type Capability struct {
	// Name: Name of the SKU capability.
	Name *string `json:"name,omitempty"`

	// Reason: Reason of the SKU capability.
	Reason *string `json:"reason,omitempty"`

	// Value: Value of the SKU capability.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &Capability{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (capability *Capability) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if capability == nil {
		return nil, nil
	}
	result := &CapabilityARM{}

	// Set property ‘Name’:
	if capability.Name != nil {
		name := *capability.Name
		result.Name = &name
	}

	// Set property ‘Reason’:
	if capability.Reason != nil {
		reason := *capability.Reason
		result.Reason = &reason
	}

	// Set property ‘Value’:
	if capability.Value != nil {
		value := *capability.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capability *Capability) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CapabilityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capability *Capability) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CapabilityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CapabilityARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		capability.Name = &name
	}

	// Set property ‘Reason’:
	if typedInput.Reason != nil {
		reason := *typedInput.Reason
		capability.Reason = &reason
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		capability.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromCapability populates our Capability from the provided source Capability
func (capability *Capability) AssignPropertiesFromCapability(source *v20220301s.Capability) error {

	// Name
	capability.Name = genruntime.ClonePointerToString(source.Name)

	// Reason
	capability.Reason = genruntime.ClonePointerToString(source.Reason)

	// Value
	capability.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToCapability populates the provided destination Capability from our Capability
func (capability *Capability) AssignPropertiesToCapability(destination *v20220301s.Capability) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(capability.Name)

	// Reason
	destination.Reason = genruntime.ClonePointerToString(capability.Reason)

	// Value
	destination.Value = genruntime.ClonePointerToString(capability.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Capability_STATUS struct {
	// Name: Name of the SKU capability.
	Name *string `json:"name,omitempty"`

	// Reason: Reason of the SKU capability.
	Reason *string `json:"reason,omitempty"`

	// Value: Value of the SKU capability.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &Capability_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capability *Capability_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Capability_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capability *Capability_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Capability_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Capability_STATUSARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		capability.Name = &name
	}

	// Set property ‘Reason’:
	if typedInput.Reason != nil {
		reason := *typedInput.Reason
		capability.Reason = &reason
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		capability.Value = &value
	}

	// No error
	return nil
}

// AssignPropertiesFromCapabilitySTATUS populates our Capability_STATUS from the provided source Capability_STATUS
func (capability *Capability_STATUS) AssignPropertiesFromCapabilitySTATUS(source *v20220301s.Capability_STATUS) error {

	// Name
	capability.Name = genruntime.ClonePointerToString(source.Name)

	// Reason
	capability.Reason = genruntime.ClonePointerToString(source.Reason)

	// Value
	capability.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignPropertiesToCapabilitySTATUS populates the provided destination Capability_STATUS from our Capability_STATUS
func (capability *Capability_STATUS) AssignPropertiesToCapabilitySTATUS(destination *v20220301s.Capability_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(capability.Name)

	// Reason
	destination.Reason = genruntime.ClonePointerToString(capability.Reason)

	// Value
	destination.Value = genruntime.ClonePointerToString(capability.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2022-03-01/Microsoft.Web.json#/definitions/SkuCapacity
type SkuCapacity struct {
	// Default: Default number of workers for this App Service plan SKU.
	Default *int `json:"default,omitempty"`

	// ElasticMaximum: Maximum number of Elastic workers for this App Service plan SKU.
	ElasticMaximum *int `json:"elasticMaximum,omitempty"`

	// Maximum: Maximum number of workers for this App Service plan SKU.
	Maximum *int `json:"maximum,omitempty"`

	// Minimum: Minimum number of workers for this App Service plan SKU.
	Minimum *int `json:"minimum,omitempty"`

	// ScaleType: Available scale configurations for an App Service plan.
	ScaleType *string `json:"scaleType,omitempty"`
}

var _ genruntime.ARMTransformer = &SkuCapacity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (capacity *SkuCapacity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if capacity == nil {
		return nil, nil
	}
	result := &SkuCapacityARM{}

	// Set property ‘Default’:
	if capacity.Default != nil {
		def := *capacity.Default
		result.Default = &def
	}

	// Set property ‘ElasticMaximum’:
	if capacity.ElasticMaximum != nil {
		elasticMaximum := *capacity.ElasticMaximum
		result.ElasticMaximum = &elasticMaximum
	}

	// Set property ‘Maximum’:
	if capacity.Maximum != nil {
		maximum := *capacity.Maximum
		result.Maximum = &maximum
	}

	// Set property ‘Minimum’:
	if capacity.Minimum != nil {
		minimum := *capacity.Minimum
		result.Minimum = &minimum
	}

	// Set property ‘ScaleType’:
	if capacity.ScaleType != nil {
		scaleType := *capacity.ScaleType
		result.ScaleType = &scaleType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capacity *SkuCapacity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuCapacityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capacity *SkuCapacity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuCapacityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuCapacityARM, got %T", armInput)
	}

	// Set property ‘Default’:
	if typedInput.Default != nil {
		def := *typedInput.Default
		capacity.Default = &def
	}

	// Set property ‘ElasticMaximum’:
	if typedInput.ElasticMaximum != nil {
		elasticMaximum := *typedInput.ElasticMaximum
		capacity.ElasticMaximum = &elasticMaximum
	}

	// Set property ‘Maximum’:
	if typedInput.Maximum != nil {
		maximum := *typedInput.Maximum
		capacity.Maximum = &maximum
	}

	// Set property ‘Minimum’:
	if typedInput.Minimum != nil {
		minimum := *typedInput.Minimum
		capacity.Minimum = &minimum
	}

	// Set property ‘ScaleType’:
	if typedInput.ScaleType != nil {
		scaleType := *typedInput.ScaleType
		capacity.ScaleType = &scaleType
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuCapacity populates our SkuCapacity from the provided source SkuCapacity
func (capacity *SkuCapacity) AssignPropertiesFromSkuCapacity(source *v20220301s.SkuCapacity) error {

	// Default
	capacity.Default = genruntime.ClonePointerToInt(source.Default)

	// ElasticMaximum
	capacity.ElasticMaximum = genruntime.ClonePointerToInt(source.ElasticMaximum)

	// Maximum
	capacity.Maximum = genruntime.ClonePointerToInt(source.Maximum)

	// Minimum
	capacity.Minimum = genruntime.ClonePointerToInt(source.Minimum)

	// ScaleType
	capacity.ScaleType = genruntime.ClonePointerToString(source.ScaleType)

	// No error
	return nil
}

// AssignPropertiesToSkuCapacity populates the provided destination SkuCapacity from our SkuCapacity
func (capacity *SkuCapacity) AssignPropertiesToSkuCapacity(destination *v20220301s.SkuCapacity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Default
	destination.Default = genruntime.ClonePointerToInt(capacity.Default)

	// ElasticMaximum
	destination.ElasticMaximum = genruntime.ClonePointerToInt(capacity.ElasticMaximum)

	// Maximum
	destination.Maximum = genruntime.ClonePointerToInt(capacity.Maximum)

	// Minimum
	destination.Minimum = genruntime.ClonePointerToInt(capacity.Minimum)

	// ScaleType
	destination.ScaleType = genruntime.ClonePointerToString(capacity.ScaleType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SkuCapacity_STATUS struct {
	// Default: Default number of workers for this App Service plan SKU.
	Default *int `json:"default,omitempty"`

	// ElasticMaximum: Maximum number of Elastic workers for this App Service plan SKU.
	ElasticMaximum *int `json:"elasticMaximum,omitempty"`

	// Maximum: Maximum number of workers for this App Service plan SKU.
	Maximum *int `json:"maximum,omitempty"`

	// Minimum: Minimum number of workers for this App Service plan SKU.
	Minimum *int `json:"minimum,omitempty"`

	// ScaleType: Available scale configurations for an App Service plan.
	ScaleType *string `json:"scaleType,omitempty"`
}

var _ genruntime.FromARMConverter = &SkuCapacity_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capacity *SkuCapacity_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuCapacity_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capacity *SkuCapacity_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuCapacity_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuCapacity_STATUSARM, got %T", armInput)
	}

	// Set property ‘Default’:
	if typedInput.Default != nil {
		def := *typedInput.Default
		capacity.Default = &def
	}

	// Set property ‘ElasticMaximum’:
	if typedInput.ElasticMaximum != nil {
		elasticMaximum := *typedInput.ElasticMaximum
		capacity.ElasticMaximum = &elasticMaximum
	}

	// Set property ‘Maximum’:
	if typedInput.Maximum != nil {
		maximum := *typedInput.Maximum
		capacity.Maximum = &maximum
	}

	// Set property ‘Minimum’:
	if typedInput.Minimum != nil {
		minimum := *typedInput.Minimum
		capacity.Minimum = &minimum
	}

	// Set property ‘ScaleType’:
	if typedInput.ScaleType != nil {
		scaleType := *typedInput.ScaleType
		capacity.ScaleType = &scaleType
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuCapacitySTATUS populates our SkuCapacity_STATUS from the provided source SkuCapacity_STATUS
func (capacity *SkuCapacity_STATUS) AssignPropertiesFromSkuCapacitySTATUS(source *v20220301s.SkuCapacity_STATUS) error {

	// Default
	capacity.Default = genruntime.ClonePointerToInt(source.Default)

	// ElasticMaximum
	capacity.ElasticMaximum = genruntime.ClonePointerToInt(source.ElasticMaximum)

	// Maximum
	capacity.Maximum = genruntime.ClonePointerToInt(source.Maximum)

	// Minimum
	capacity.Minimum = genruntime.ClonePointerToInt(source.Minimum)

	// ScaleType
	capacity.ScaleType = genruntime.ClonePointerToString(source.ScaleType)

	// No error
	return nil
}

// AssignPropertiesToSkuCapacitySTATUS populates the provided destination SkuCapacity_STATUS from our SkuCapacity_STATUS
func (capacity *SkuCapacity_STATUS) AssignPropertiesToSkuCapacitySTATUS(destination *v20220301s.SkuCapacity_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Default
	destination.Default = genruntime.ClonePointerToInt(capacity.Default)

	// ElasticMaximum
	destination.ElasticMaximum = genruntime.ClonePointerToInt(capacity.ElasticMaximum)

	// Maximum
	destination.Maximum = genruntime.ClonePointerToInt(capacity.Maximum)

	// Minimum
	destination.Minimum = genruntime.ClonePointerToInt(capacity.Minimum)

	// ScaleType
	destination.ScaleType = genruntime.ClonePointerToString(capacity.ScaleType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Serverfarm{}, &ServerfarmList{})
}
