// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20220301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Serverfarm_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Serverfarm_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerfarm_STATUS_ARM, Serverfarm_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerfarm_STATUS_ARM runs a test to see if a specific instance of Serverfarm_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerfarm_STATUS_ARM(subject Serverfarm_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Serverfarm_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Serverfarm_STATUS_ARM instances for property testing - lazily instantiated by
// Serverfarm_STATUS_ARMGenerator()
var serverfarm_STATUS_ARMGenerator gopter.Gen

// Serverfarm_STATUS_ARMGenerator returns a generator of Serverfarm_STATUS_ARM instances for property testing.
// We first initialize serverfarm_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Serverfarm_STATUS_ARMGenerator() gopter.Gen {
	if serverfarm_STATUS_ARMGenerator != nil {
		return serverfarm_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarm_STATUS_ARM(generators)
	serverfarm_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Serverfarm_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarm_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForServerfarm_STATUS_ARM(generators)
	serverfarm_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Serverfarm_STATUS_ARM{}), generators)

	return serverfarm_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerfarm_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerfarm_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServerfarm_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerfarm_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(Serverfarm_Properties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuDescription_STATUS_ARMGenerator())
}

func Test_ExtendedLocation_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_STATUS_ARM, ExtendedLocation_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_STATUS_ARM runs a test to see if a specific instance of ExtendedLocation_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_STATUS_ARM(subject ExtendedLocation_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUS_ARM instances for property testing - lazily instantiated by
// ExtendedLocation_STATUS_ARMGenerator()
var extendedLocation_STATUS_ARMGenerator gopter.Gen

// ExtendedLocation_STATUS_ARMGenerator returns a generator of ExtendedLocation_STATUS_ARM instances for property testing.
func ExtendedLocation_STATUS_ARMGenerator() gopter.Gen {
	if extendedLocation_STATUS_ARMGenerator != nil {
		return extendedLocation_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_STATUS_ARM(generators)
	extendedLocation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUS_ARM{}), generators)

	return extendedLocation_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_Serverfarm_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Serverfarm_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerfarm_Properties_STATUS_ARM, Serverfarm_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerfarm_Properties_STATUS_ARM runs a test to see if a specific instance of Serverfarm_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerfarm_Properties_STATUS_ARM(subject Serverfarm_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Serverfarm_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Serverfarm_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// Serverfarm_Properties_STATUS_ARMGenerator()
var serverfarm_Properties_STATUS_ARMGenerator gopter.Gen

// Serverfarm_Properties_STATUS_ARMGenerator returns a generator of Serverfarm_Properties_STATUS_ARM instances for property testing.
// We first initialize serverfarm_Properties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Serverfarm_Properties_STATUS_ARMGenerator() gopter.Gen {
	if serverfarm_Properties_STATUS_ARMGenerator != nil {
		return serverfarm_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarm_Properties_STATUS_ARM(generators)
	serverfarm_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Serverfarm_Properties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarm_Properties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForServerfarm_Properties_STATUS_ARM(generators)
	serverfarm_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Serverfarm_Properties_STATUS_ARM{}), generators)

	return serverfarm_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerfarm_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerfarm_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ElasticScaleEnabled"] = gen.PtrOf(gen.Bool())
	gens["FreeOfferExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["GeoRegion"] = gen.PtrOf(gen.AlphaString())
	gens["HyperV"] = gen.PtrOf(gen.Bool())
	gens["IsSpot"] = gen.PtrOf(gen.Bool())
	gens["IsXenon"] = gen.PtrOf(gen.Bool())
	gens["MaximumElasticWorkerCount"] = gen.PtrOf(gen.Int())
	gens["MaximumNumberOfWorkers"] = gen.PtrOf(gen.Int())
	gens["NumberOfSites"] = gen.PtrOf(gen.Int())
	gens["NumberOfWorkers"] = gen.PtrOf(gen.Int())
	gens["PerSiteScaling"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		Serverfarm_Properties_ProvisioningState_STATUS_Canceled,
		Serverfarm_Properties_ProvisioningState_STATUS_Deleting,
		Serverfarm_Properties_ProvisioningState_STATUS_Failed,
		Serverfarm_Properties_ProvisioningState_STATUS_InProgress,
		Serverfarm_Properties_ProvisioningState_STATUS_Succeeded))
	gens["Reserved"] = gen.PtrOf(gen.Bool())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SpotExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(Serverfarm_Properties_Status_STATUS_Creating, Serverfarm_Properties_Status_STATUS_Pending, Serverfarm_Properties_Status_STATUS_Ready))
	gens["Subscription"] = gen.PtrOf(gen.AlphaString())
	gens["TargetWorkerCount"] = gen.PtrOf(gen.Int())
	gens["TargetWorkerSizeId"] = gen.PtrOf(gen.Int())
	gens["WorkerTierName"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForServerfarm_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerfarm_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HostingEnvironmentProfile"] = gen.PtrOf(HostingEnvironmentProfile_STATUS_ARMGenerator())
	gens["KubeEnvironmentProfile"] = gen.PtrOf(KubeEnvironmentProfile_STATUS_ARMGenerator())
}

func Test_SkuDescription_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuDescription_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuDescription_STATUS_ARM, SkuDescription_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuDescription_STATUS_ARM runs a test to see if a specific instance of SkuDescription_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuDescription_STATUS_ARM(subject SkuDescription_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuDescription_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuDescription_STATUS_ARM instances for property testing - lazily instantiated by
// SkuDescription_STATUS_ARMGenerator()
var skuDescription_STATUS_ARMGenerator gopter.Gen

// SkuDescription_STATUS_ARMGenerator returns a generator of SkuDescription_STATUS_ARM instances for property testing.
// We first initialize skuDescription_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SkuDescription_STATUS_ARMGenerator() gopter.Gen {
	if skuDescription_STATUS_ARMGenerator != nil {
		return skuDescription_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescription_STATUS_ARM(generators)
	skuDescription_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SkuDescription_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescription_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSkuDescription_STATUS_ARM(generators)
	skuDescription_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SkuDescription_STATUS_ARM{}), generators)

	return skuDescription_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuDescription_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuDescription_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSkuDescription_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSkuDescription_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capabilities"] = gen.SliceOf(Capability_STATUS_ARMGenerator())
	gens["SkuCapacity"] = gen.PtrOf(SkuCapacity_STATUS_ARMGenerator())
}

func Test_Capability_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapability_STATUS_ARM, Capability_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapability_STATUS_ARM runs a test to see if a specific instance of Capability_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCapability_STATUS_ARM(subject Capability_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability_STATUS_ARM instances for property testing - lazily instantiated by
// Capability_STATUS_ARMGenerator()
var capability_STATUS_ARMGenerator gopter.Gen

// Capability_STATUS_ARMGenerator returns a generator of Capability_STATUS_ARM instances for property testing.
func Capability_STATUS_ARMGenerator() gopter.Gen {
	if capability_STATUS_ARMGenerator != nil {
		return capability_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapability_STATUS_ARM(generators)
	capability_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Capability_STATUS_ARM{}), generators)

	return capability_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCapability_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapability_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Reason"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_HostingEnvironmentProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostingEnvironmentProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostingEnvironmentProfile_STATUS_ARM, HostingEnvironmentProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostingEnvironmentProfile_STATUS_ARM runs a test to see if a specific instance of HostingEnvironmentProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHostingEnvironmentProfile_STATUS_ARM(subject HostingEnvironmentProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostingEnvironmentProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostingEnvironmentProfile_STATUS_ARM instances for property testing - lazily instantiated by
// HostingEnvironmentProfile_STATUS_ARMGenerator()
var hostingEnvironmentProfile_STATUS_ARMGenerator gopter.Gen

// HostingEnvironmentProfile_STATUS_ARMGenerator returns a generator of HostingEnvironmentProfile_STATUS_ARM instances for property testing.
func HostingEnvironmentProfile_STATUS_ARMGenerator() gopter.Gen {
	if hostingEnvironmentProfile_STATUS_ARMGenerator != nil {
		return hostingEnvironmentProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostingEnvironmentProfile_STATUS_ARM(generators)
	hostingEnvironmentProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HostingEnvironmentProfile_STATUS_ARM{}), generators)

	return hostingEnvironmentProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHostingEnvironmentProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHostingEnvironmentProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeEnvironmentProfile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeEnvironmentProfile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeEnvironmentProfile_STATUS_ARM, KubeEnvironmentProfile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeEnvironmentProfile_STATUS_ARM runs a test to see if a specific instance of KubeEnvironmentProfile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeEnvironmentProfile_STATUS_ARM(subject KubeEnvironmentProfile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeEnvironmentProfile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeEnvironmentProfile_STATUS_ARM instances for property testing - lazily instantiated by
// KubeEnvironmentProfile_STATUS_ARMGenerator()
var kubeEnvironmentProfile_STATUS_ARMGenerator gopter.Gen

// KubeEnvironmentProfile_STATUS_ARMGenerator returns a generator of KubeEnvironmentProfile_STATUS_ARM instances for property testing.
func KubeEnvironmentProfile_STATUS_ARMGenerator() gopter.Gen {
	if kubeEnvironmentProfile_STATUS_ARMGenerator != nil {
		return kubeEnvironmentProfile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeEnvironmentProfile_STATUS_ARM(generators)
	kubeEnvironmentProfile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(KubeEnvironmentProfile_STATUS_ARM{}), generators)

	return kubeEnvironmentProfile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForKubeEnvironmentProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeEnvironmentProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuCapacity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuCapacity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuCapacity_STATUS_ARM, SkuCapacity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuCapacity_STATUS_ARM runs a test to see if a specific instance of SkuCapacity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuCapacity_STATUS_ARM(subject SkuCapacity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuCapacity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuCapacity_STATUS_ARM instances for property testing - lazily instantiated by
// SkuCapacity_STATUS_ARMGenerator()
var skuCapacity_STATUS_ARMGenerator gopter.Gen

// SkuCapacity_STATUS_ARMGenerator returns a generator of SkuCapacity_STATUS_ARM instances for property testing.
func SkuCapacity_STATUS_ARMGenerator() gopter.Gen {
	if skuCapacity_STATUS_ARMGenerator != nil {
		return skuCapacity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuCapacity_STATUS_ARM(generators)
	skuCapacity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SkuCapacity_STATUS_ARM{}), generators)

	return skuCapacity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuCapacity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuCapacity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Default"] = gen.PtrOf(gen.Int())
	gens["ElasticMaximum"] = gen.PtrOf(gen.Int())
	gens["Maximum"] = gen.PtrOf(gen.Int())
	gens["Minimum"] = gen.PtrOf(gen.Int())
	gens["ScaleType"] = gen.PtrOf(gen.AlphaString())
}
