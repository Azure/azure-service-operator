// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"fmt"
	v20220301s "github.com/Azure/azure-service-operator/v2/api/web/v1api20220301/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1beta20220301.ServerFarm
// Deprecated version of ServerFarm. Use v1api20220301.ServerFarm instead
type ServerFarm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Serverfarm_Spec   `json:"spec,omitempty"`
	Status            Serverfarm_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ServerFarm{}

// GetConditions returns the conditions of the resource
func (farm *ServerFarm) GetConditions() conditions.Conditions {
	return farm.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (farm *ServerFarm) SetConditions(conditions conditions.Conditions) {
	farm.Status.Conditions = conditions
}

var _ conversion.Convertible = &ServerFarm{}

// ConvertFrom populates our ServerFarm from the provided hub ServerFarm
func (farm *ServerFarm) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20220301s.ServerFarm)
	if !ok {
		return fmt.Errorf("expected web/v1api20220301/storage/ServerFarm but received %T instead", hub)
	}

	return farm.AssignProperties_From_ServerFarm(source)
}

// ConvertTo populates the provided hub ServerFarm from our ServerFarm
func (farm *ServerFarm) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20220301s.ServerFarm)
	if !ok {
		return fmt.Errorf("expected web/v1api20220301/storage/ServerFarm but received %T instead", hub)
	}

	return farm.AssignProperties_To_ServerFarm(destination)
}

var _ genruntime.KubernetesResource = &ServerFarm{}

// AzureName returns the Azure name of the resource
func (farm *ServerFarm) AzureName() string {
	return farm.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-03-01"
func (farm ServerFarm) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (farm *ServerFarm) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (farm *ServerFarm) GetSpec() genruntime.ConvertibleSpec {
	return &farm.Spec
}

// GetStatus returns the status of this resource
func (farm *ServerFarm) GetStatus() genruntime.ConvertibleStatus {
	return &farm.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Web/serverfarms"
func (farm *ServerFarm) GetType() string {
	return "Microsoft.Web/serverfarms"
}

// NewEmptyStatus returns a new empty (blank) status
func (farm *ServerFarm) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Serverfarm_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (farm *ServerFarm) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(farm.Spec)
	return farm.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (farm *ServerFarm) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Serverfarm_STATUS); ok {
		farm.Status = *st
		return nil
	}

	// Convert status to required version
	var st Serverfarm_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	farm.Status = st
	return nil
}

// AssignProperties_From_ServerFarm populates our ServerFarm from the provided source ServerFarm
func (farm *ServerFarm) AssignProperties_From_ServerFarm(source *v20220301s.ServerFarm) error {

	// ObjectMeta
	farm.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Serverfarm_Spec
	err := spec.AssignProperties_From_Serverfarm_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Serverfarm_Spec() to populate field Spec")
	}
	farm.Spec = spec

	// Status
	var status Serverfarm_STATUS
	err = status.AssignProperties_From_Serverfarm_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Serverfarm_STATUS() to populate field Status")
	}
	farm.Status = status

	// Invoke the augmentConversionForServerFarm interface (if implemented) to customize the conversion
	var farmAsAny any = farm
	if augmentedFarm, ok := farmAsAny.(augmentConversionForServerFarm); ok {
		err := augmentedFarm.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_ServerFarm populates the provided destination ServerFarm from our ServerFarm
func (farm *ServerFarm) AssignProperties_To_ServerFarm(destination *v20220301s.ServerFarm) error {

	// ObjectMeta
	destination.ObjectMeta = *farm.ObjectMeta.DeepCopy()

	// Spec
	var spec v20220301s.Serverfarm_Spec
	err := farm.Spec.AssignProperties_To_Serverfarm_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Serverfarm_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20220301s.Serverfarm_STATUS
	err = farm.Status.AssignProperties_To_Serverfarm_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Serverfarm_STATUS() to populate field Status")
	}
	destination.Status = status

	// Invoke the augmentConversionForServerFarm interface (if implemented) to customize the conversion
	var farmAsAny any = farm
	if augmentedFarm, ok := farmAsAny.(augmentConversionForServerFarm); ok {
		err := augmentedFarm.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (farm *ServerFarm) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: farm.Spec.OriginalVersion,
		Kind:    "ServerFarm",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1beta20220301.ServerFarm
// Deprecated version of ServerFarm. Use v1api20220301.ServerFarm instead
type ServerFarmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerFarm `json:"items"`
}

// Storage version of v1beta20220301.APIVersion
// Deprecated version of APIVersion. Use v1api20220301.APIVersion instead
// +kubebuilder:validation:Enum={"2022-03-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2022-03-01")

type augmentConversionForServerFarm interface {
	AssignPropertiesFrom(src *v20220301s.ServerFarm) error
	AssignPropertiesTo(dst *v20220301s.ServerFarm) error
}

// Storage version of v1beta20220301.Serverfarm_Spec
type Serverfarm_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName                 string                     `json:"azureName,omitempty"`
	ElasticScaleEnabled       *bool                      `json:"elasticScaleEnabled,omitempty"`
	ExtendedLocation          *ExtendedLocation          `json:"extendedLocation,omitempty"`
	FreeOfferExpirationTime   *string                    `json:"freeOfferExpirationTime,omitempty"`
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`
	HyperV                    *bool                      `json:"hyperV,omitempty"`
	IsSpot                    *bool                      `json:"isSpot,omitempty"`
	IsXenon                   *bool                      `json:"isXenon,omitempty"`
	Kind                      *string                    `json:"kind,omitempty"`
	KubeEnvironmentProfile    *KubeEnvironmentProfile    `json:"kubeEnvironmentProfile,omitempty"`
	Location                  *string                    `json:"location,omitempty"`
	MaximumElasticWorkerCount *int                       `json:"maximumElasticWorkerCount,omitempty"`
	OriginalVersion           string                     `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner              *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PerSiteScaling     *bool                              `json:"perSiteScaling,omitempty"`
	PropertyBag        genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Reserved           *bool                              `json:"reserved,omitempty"`
	Sku                *SkuDescription                    `json:"sku,omitempty"`
	SpotExpirationTime *string                            `json:"spotExpirationTime,omitempty"`
	Tags               map[string]string                  `json:"tags,omitempty"`
	TargetWorkerCount  *int                               `json:"targetWorkerCount,omitempty"`
	TargetWorkerSizeId *int                               `json:"targetWorkerSizeId,omitempty"`
	WorkerTierName     *string                            `json:"workerTierName,omitempty"`
	ZoneRedundant      *bool                              `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Serverfarm_Spec{}

// ConvertSpecFrom populates our Serverfarm_Spec from the provided source
func (serverfarm *Serverfarm_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20220301s.Serverfarm_Spec)
	if ok {
		// Populate our instance from source
		return serverfarm.AssignProperties_From_Serverfarm_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20220301s.Serverfarm_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = serverfarm.AssignProperties_From_Serverfarm_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Serverfarm_Spec
func (serverfarm *Serverfarm_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20220301s.Serverfarm_Spec)
	if ok {
		// Populate destination from our instance
		return serverfarm.AssignProperties_To_Serverfarm_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20220301s.Serverfarm_Spec{}
	err := serverfarm.AssignProperties_To_Serverfarm_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Serverfarm_Spec populates our Serverfarm_Spec from the provided source Serverfarm_Spec
func (serverfarm *Serverfarm_Spec) AssignProperties_From_Serverfarm_Spec(source *v20220301s.Serverfarm_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// AzureName
	serverfarm.AzureName = source.AzureName

	// ElasticScaleEnabled
	if source.ElasticScaleEnabled != nil {
		elasticScaleEnabled := *source.ElasticScaleEnabled
		serverfarm.ElasticScaleEnabled = &elasticScaleEnabled
	} else {
		serverfarm.ElasticScaleEnabled = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignProperties_From_ExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ExtendedLocation() to populate field ExtendedLocation")
		}
		serverfarm.ExtendedLocation = &extendedLocation
	} else {
		serverfarm.ExtendedLocation = nil
	}

	// FreeOfferExpirationTime
	serverfarm.FreeOfferExpirationTime = genruntime.ClonePointerToString(source.FreeOfferExpirationTime)

	// HostingEnvironmentProfile
	if source.HostingEnvironmentProfile != nil {
		var hostingEnvironmentProfile HostingEnvironmentProfile
		err := hostingEnvironmentProfile.AssignProperties_From_HostingEnvironmentProfile(source.HostingEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HostingEnvironmentProfile() to populate field HostingEnvironmentProfile")
		}
		serverfarm.HostingEnvironmentProfile = &hostingEnvironmentProfile
	} else {
		serverfarm.HostingEnvironmentProfile = nil
	}

	// HyperV
	if source.HyperV != nil {
		hyperV := *source.HyperV
		serverfarm.HyperV = &hyperV
	} else {
		serverfarm.HyperV = nil
	}

	// IsSpot
	if source.IsSpot != nil {
		isSpot := *source.IsSpot
		serverfarm.IsSpot = &isSpot
	} else {
		serverfarm.IsSpot = nil
	}

	// IsXenon
	if source.IsXenon != nil {
		isXenon := *source.IsXenon
		serverfarm.IsXenon = &isXenon
	} else {
		serverfarm.IsXenon = nil
	}

	// Kind
	serverfarm.Kind = genruntime.ClonePointerToString(source.Kind)

	// KubeEnvironmentProfile
	if source.KubeEnvironmentProfile != nil {
		var kubeEnvironmentProfile KubeEnvironmentProfile
		err := kubeEnvironmentProfile.AssignProperties_From_KubeEnvironmentProfile(source.KubeEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_KubeEnvironmentProfile() to populate field KubeEnvironmentProfile")
		}
		serverfarm.KubeEnvironmentProfile = &kubeEnvironmentProfile
	} else {
		serverfarm.KubeEnvironmentProfile = nil
	}

	// Location
	serverfarm.Location = genruntime.ClonePointerToString(source.Location)

	// MaximumElasticWorkerCount
	serverfarm.MaximumElasticWorkerCount = genruntime.ClonePointerToInt(source.MaximumElasticWorkerCount)

	// OriginalVersion
	serverfarm.OriginalVersion = source.OriginalVersion

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		serverfarm.Owner = &owner
	} else {
		serverfarm.Owner = nil
	}

	// PerSiteScaling
	if source.PerSiteScaling != nil {
		perSiteScaling := *source.PerSiteScaling
		serverfarm.PerSiteScaling = &perSiteScaling
	} else {
		serverfarm.PerSiteScaling = nil
	}

	// Reserved
	if source.Reserved != nil {
		reserved := *source.Reserved
		serverfarm.Reserved = &reserved
	} else {
		serverfarm.Reserved = nil
	}

	// Sku
	if source.Sku != nil {
		var sku SkuDescription
		err := sku.AssignProperties_From_SkuDescription(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SkuDescription() to populate field Sku")
		}
		serverfarm.Sku = &sku
	} else {
		serverfarm.Sku = nil
	}

	// SpotExpirationTime
	serverfarm.SpotExpirationTime = genruntime.ClonePointerToString(source.SpotExpirationTime)

	// Tags
	serverfarm.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TargetWorkerCount
	serverfarm.TargetWorkerCount = genruntime.ClonePointerToInt(source.TargetWorkerCount)

	// TargetWorkerSizeId
	serverfarm.TargetWorkerSizeId = genruntime.ClonePointerToInt(source.TargetWorkerSizeId)

	// WorkerTierName
	serverfarm.WorkerTierName = genruntime.ClonePointerToString(source.WorkerTierName)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		serverfarm.ZoneRedundant = &zoneRedundant
	} else {
		serverfarm.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		serverfarm.PropertyBag = propertyBag
	} else {
		serverfarm.PropertyBag = nil
	}

	// Invoke the augmentConversionForServerfarm_Spec interface (if implemented) to customize the conversion
	var serverfarmAsAny any = serverfarm
	if augmentedServerfarm, ok := serverfarmAsAny.(augmentConversionForServerfarm_Spec); ok {
		err := augmentedServerfarm.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Serverfarm_Spec populates the provided destination Serverfarm_Spec from our Serverfarm_Spec
func (serverfarm *Serverfarm_Spec) AssignProperties_To_Serverfarm_Spec(destination *v20220301s.Serverfarm_Spec) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(serverfarm.PropertyBag)

	// AzureName
	destination.AzureName = serverfarm.AzureName

	// ElasticScaleEnabled
	if serverfarm.ElasticScaleEnabled != nil {
		elasticScaleEnabled := *serverfarm.ElasticScaleEnabled
		destination.ElasticScaleEnabled = &elasticScaleEnabled
	} else {
		destination.ElasticScaleEnabled = nil
	}

	// ExtendedLocation
	if serverfarm.ExtendedLocation != nil {
		var extendedLocation v20220301s.ExtendedLocation
		err := serverfarm.ExtendedLocation.AssignProperties_To_ExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ExtendedLocation() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// FreeOfferExpirationTime
	destination.FreeOfferExpirationTime = genruntime.ClonePointerToString(serverfarm.FreeOfferExpirationTime)

	// HostingEnvironmentProfile
	if serverfarm.HostingEnvironmentProfile != nil {
		var hostingEnvironmentProfile v20220301s.HostingEnvironmentProfile
		err := serverfarm.HostingEnvironmentProfile.AssignProperties_To_HostingEnvironmentProfile(&hostingEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HostingEnvironmentProfile() to populate field HostingEnvironmentProfile")
		}
		destination.HostingEnvironmentProfile = &hostingEnvironmentProfile
	} else {
		destination.HostingEnvironmentProfile = nil
	}

	// HyperV
	if serverfarm.HyperV != nil {
		hyperV := *serverfarm.HyperV
		destination.HyperV = &hyperV
	} else {
		destination.HyperV = nil
	}

	// IsSpot
	if serverfarm.IsSpot != nil {
		isSpot := *serverfarm.IsSpot
		destination.IsSpot = &isSpot
	} else {
		destination.IsSpot = nil
	}

	// IsXenon
	if serverfarm.IsXenon != nil {
		isXenon := *serverfarm.IsXenon
		destination.IsXenon = &isXenon
	} else {
		destination.IsXenon = nil
	}

	// Kind
	destination.Kind = genruntime.ClonePointerToString(serverfarm.Kind)

	// KubeEnvironmentProfile
	if serverfarm.KubeEnvironmentProfile != nil {
		var kubeEnvironmentProfile v20220301s.KubeEnvironmentProfile
		err := serverfarm.KubeEnvironmentProfile.AssignProperties_To_KubeEnvironmentProfile(&kubeEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_KubeEnvironmentProfile() to populate field KubeEnvironmentProfile")
		}
		destination.KubeEnvironmentProfile = &kubeEnvironmentProfile
	} else {
		destination.KubeEnvironmentProfile = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(serverfarm.Location)

	// MaximumElasticWorkerCount
	destination.MaximumElasticWorkerCount = genruntime.ClonePointerToInt(serverfarm.MaximumElasticWorkerCount)

	// OriginalVersion
	destination.OriginalVersion = serverfarm.OriginalVersion

	// Owner
	if serverfarm.Owner != nil {
		owner := serverfarm.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PerSiteScaling
	if serverfarm.PerSiteScaling != nil {
		perSiteScaling := *serverfarm.PerSiteScaling
		destination.PerSiteScaling = &perSiteScaling
	} else {
		destination.PerSiteScaling = nil
	}

	// Reserved
	if serverfarm.Reserved != nil {
		reserved := *serverfarm.Reserved
		destination.Reserved = &reserved
	} else {
		destination.Reserved = nil
	}

	// Sku
	if serverfarm.Sku != nil {
		var sku v20220301s.SkuDescription
		err := serverfarm.Sku.AssignProperties_To_SkuDescription(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SkuDescription() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SpotExpirationTime
	destination.SpotExpirationTime = genruntime.ClonePointerToString(serverfarm.SpotExpirationTime)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(serverfarm.Tags)

	// TargetWorkerCount
	destination.TargetWorkerCount = genruntime.ClonePointerToInt(serverfarm.TargetWorkerCount)

	// TargetWorkerSizeId
	destination.TargetWorkerSizeId = genruntime.ClonePointerToInt(serverfarm.TargetWorkerSizeId)

	// WorkerTierName
	destination.WorkerTierName = genruntime.ClonePointerToString(serverfarm.WorkerTierName)

	// ZoneRedundant
	if serverfarm.ZoneRedundant != nil {
		zoneRedundant := *serverfarm.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForServerfarm_Spec interface (if implemented) to customize the conversion
	var serverfarmAsAny any = serverfarm
	if augmentedServerfarm, ok := serverfarmAsAny.(augmentConversionForServerfarm_Spec); ok {
		err := augmentedServerfarm.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.Serverfarm_STATUS
// Deprecated version of Serverfarm_STATUS. Use v1api20220301.Serverfarm_STATUS instead
type Serverfarm_STATUS struct {
	Conditions                []conditions.Condition            `json:"conditions,omitempty"`
	ElasticScaleEnabled       *bool                             `json:"elasticScaleEnabled,omitempty"`
	ExtendedLocation          *ExtendedLocation_STATUS          `json:"extendedLocation,omitempty"`
	FreeOfferExpirationTime   *string                           `json:"freeOfferExpirationTime,omitempty"`
	GeoRegion                 *string                           `json:"geoRegion,omitempty"`
	HostingEnvironmentProfile *HostingEnvironmentProfile_STATUS `json:"hostingEnvironmentProfile,omitempty"`
	HyperV                    *bool                             `json:"hyperV,omitempty"`
	Id                        *string                           `json:"id,omitempty"`
	IsSpot                    *bool                             `json:"isSpot,omitempty"`
	IsXenon                   *bool                             `json:"isXenon,omitempty"`
	Kind                      *string                           `json:"kind,omitempty"`
	KubeEnvironmentProfile    *KubeEnvironmentProfile_STATUS    `json:"kubeEnvironmentProfile,omitempty"`
	Location                  *string                           `json:"location,omitempty"`
	MaximumElasticWorkerCount *int                              `json:"maximumElasticWorkerCount,omitempty"`
	MaximumNumberOfWorkers    *int                              `json:"maximumNumberOfWorkers,omitempty"`
	Name                      *string                           `json:"name,omitempty"`
	NumberOfSites             *int                              `json:"numberOfSites,omitempty"`
	NumberOfWorkers           *int                              `json:"numberOfWorkers,omitempty"`
	PerSiteScaling            *bool                             `json:"perSiteScaling,omitempty"`
	PropertyBag               genruntime.PropertyBag            `json:"$propertyBag,omitempty"`
	ProvisioningState         *string                           `json:"provisioningState,omitempty"`
	Reserved                  *bool                             `json:"reserved,omitempty"`
	ResourceGroup             *string                           `json:"resourceGroup,omitempty"`
	Sku                       *SkuDescription_STATUS            `json:"sku,omitempty"`
	SpotExpirationTime        *string                           `json:"spotExpirationTime,omitempty"`
	Status                    *string                           `json:"status,omitempty"`
	Subscription              *string                           `json:"subscription,omitempty"`
	Tags                      map[string]string                 `json:"tags,omitempty"`
	TargetWorkerCount         *int                              `json:"targetWorkerCount,omitempty"`
	TargetWorkerSizeId        *int                              `json:"targetWorkerSizeId,omitempty"`
	Type                      *string                           `json:"type,omitempty"`
	WorkerTierName            *string                           `json:"workerTierName,omitempty"`
	ZoneRedundant             *bool                             `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Serverfarm_STATUS{}

// ConvertStatusFrom populates our Serverfarm_STATUS from the provided source
func (serverfarm *Serverfarm_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20220301s.Serverfarm_STATUS)
	if ok {
		// Populate our instance from source
		return serverfarm.AssignProperties_From_Serverfarm_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20220301s.Serverfarm_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = serverfarm.AssignProperties_From_Serverfarm_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Serverfarm_STATUS
func (serverfarm *Serverfarm_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20220301s.Serverfarm_STATUS)
	if ok {
		// Populate destination from our instance
		return serverfarm.AssignProperties_To_Serverfarm_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20220301s.Serverfarm_STATUS{}
	err := serverfarm.AssignProperties_To_Serverfarm_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

// AssignProperties_From_Serverfarm_STATUS populates our Serverfarm_STATUS from the provided source Serverfarm_STATUS
func (serverfarm *Serverfarm_STATUS) AssignProperties_From_Serverfarm_STATUS(source *v20220301s.Serverfarm_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Conditions
	serverfarm.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ElasticScaleEnabled
	if source.ElasticScaleEnabled != nil {
		elasticScaleEnabled := *source.ElasticScaleEnabled
		serverfarm.ElasticScaleEnabled = &elasticScaleEnabled
	} else {
		serverfarm.ElasticScaleEnabled = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_STATUS
		err := extendedLocation.AssignProperties_From_ExtendedLocation_STATUS(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ExtendedLocation_STATUS() to populate field ExtendedLocation")
		}
		serverfarm.ExtendedLocation = &extendedLocation
	} else {
		serverfarm.ExtendedLocation = nil
	}

	// FreeOfferExpirationTime
	serverfarm.FreeOfferExpirationTime = genruntime.ClonePointerToString(source.FreeOfferExpirationTime)

	// GeoRegion
	serverfarm.GeoRegion = genruntime.ClonePointerToString(source.GeoRegion)

	// HostingEnvironmentProfile
	if source.HostingEnvironmentProfile != nil {
		var hostingEnvironmentProfile HostingEnvironmentProfile_STATUS
		err := hostingEnvironmentProfile.AssignProperties_From_HostingEnvironmentProfile_STATUS(source.HostingEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HostingEnvironmentProfile_STATUS() to populate field HostingEnvironmentProfile")
		}
		serverfarm.HostingEnvironmentProfile = &hostingEnvironmentProfile
	} else {
		serverfarm.HostingEnvironmentProfile = nil
	}

	// HyperV
	if source.HyperV != nil {
		hyperV := *source.HyperV
		serverfarm.HyperV = &hyperV
	} else {
		serverfarm.HyperV = nil
	}

	// Id
	serverfarm.Id = genruntime.ClonePointerToString(source.Id)

	// IsSpot
	if source.IsSpot != nil {
		isSpot := *source.IsSpot
		serverfarm.IsSpot = &isSpot
	} else {
		serverfarm.IsSpot = nil
	}

	// IsXenon
	if source.IsXenon != nil {
		isXenon := *source.IsXenon
		serverfarm.IsXenon = &isXenon
	} else {
		serverfarm.IsXenon = nil
	}

	// Kind
	serverfarm.Kind = genruntime.ClonePointerToString(source.Kind)

	// KubeEnvironmentProfile
	if source.KubeEnvironmentProfile != nil {
		var kubeEnvironmentProfile KubeEnvironmentProfile_STATUS
		err := kubeEnvironmentProfile.AssignProperties_From_KubeEnvironmentProfile_STATUS(source.KubeEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_KubeEnvironmentProfile_STATUS() to populate field KubeEnvironmentProfile")
		}
		serverfarm.KubeEnvironmentProfile = &kubeEnvironmentProfile
	} else {
		serverfarm.KubeEnvironmentProfile = nil
	}

	// Location
	serverfarm.Location = genruntime.ClonePointerToString(source.Location)

	// MaximumElasticWorkerCount
	serverfarm.MaximumElasticWorkerCount = genruntime.ClonePointerToInt(source.MaximumElasticWorkerCount)

	// MaximumNumberOfWorkers
	serverfarm.MaximumNumberOfWorkers = genruntime.ClonePointerToInt(source.MaximumNumberOfWorkers)

	// Name
	serverfarm.Name = genruntime.ClonePointerToString(source.Name)

	// NumberOfSites
	serverfarm.NumberOfSites = genruntime.ClonePointerToInt(source.NumberOfSites)

	// NumberOfWorkers
	serverfarm.NumberOfWorkers = genruntime.ClonePointerToInt(source.NumberOfWorkers)

	// PerSiteScaling
	if source.PerSiteScaling != nil {
		perSiteScaling := *source.PerSiteScaling
		serverfarm.PerSiteScaling = &perSiteScaling
	} else {
		serverfarm.PerSiteScaling = nil
	}

	// ProvisioningState
	serverfarm.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// Reserved
	if source.Reserved != nil {
		reserved := *source.Reserved
		serverfarm.Reserved = &reserved
	} else {
		serverfarm.Reserved = nil
	}

	// ResourceGroup
	serverfarm.ResourceGroup = genruntime.ClonePointerToString(source.ResourceGroup)

	// Sku
	if source.Sku != nil {
		var sku SkuDescription_STATUS
		err := sku.AssignProperties_From_SkuDescription_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SkuDescription_STATUS() to populate field Sku")
		}
		serverfarm.Sku = &sku
	} else {
		serverfarm.Sku = nil
	}

	// SpotExpirationTime
	serverfarm.SpotExpirationTime = genruntime.ClonePointerToString(source.SpotExpirationTime)

	// Status
	serverfarm.Status = genruntime.ClonePointerToString(source.Status)

	// Subscription
	serverfarm.Subscription = genruntime.ClonePointerToString(source.Subscription)

	// Tags
	serverfarm.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// TargetWorkerCount
	serverfarm.TargetWorkerCount = genruntime.ClonePointerToInt(source.TargetWorkerCount)

	// TargetWorkerSizeId
	serverfarm.TargetWorkerSizeId = genruntime.ClonePointerToInt(source.TargetWorkerSizeId)

	// Type
	serverfarm.Type = genruntime.ClonePointerToString(source.Type)

	// WorkerTierName
	serverfarm.WorkerTierName = genruntime.ClonePointerToString(source.WorkerTierName)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		serverfarm.ZoneRedundant = &zoneRedundant
	} else {
		serverfarm.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		serverfarm.PropertyBag = propertyBag
	} else {
		serverfarm.PropertyBag = nil
	}

	// Invoke the augmentConversionForServerfarm_STATUS interface (if implemented) to customize the conversion
	var serverfarmAsAny any = serverfarm
	if augmentedServerfarm, ok := serverfarmAsAny.(augmentConversionForServerfarm_STATUS); ok {
		err := augmentedServerfarm.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Serverfarm_STATUS populates the provided destination Serverfarm_STATUS from our Serverfarm_STATUS
func (serverfarm *Serverfarm_STATUS) AssignProperties_To_Serverfarm_STATUS(destination *v20220301s.Serverfarm_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(serverfarm.PropertyBag)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(serverfarm.Conditions)

	// ElasticScaleEnabled
	if serverfarm.ElasticScaleEnabled != nil {
		elasticScaleEnabled := *serverfarm.ElasticScaleEnabled
		destination.ElasticScaleEnabled = &elasticScaleEnabled
	} else {
		destination.ElasticScaleEnabled = nil
	}

	// ExtendedLocation
	if serverfarm.ExtendedLocation != nil {
		var extendedLocation v20220301s.ExtendedLocation_STATUS
		err := serverfarm.ExtendedLocation.AssignProperties_To_ExtendedLocation_STATUS(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ExtendedLocation_STATUS() to populate field ExtendedLocation")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// FreeOfferExpirationTime
	destination.FreeOfferExpirationTime = genruntime.ClonePointerToString(serverfarm.FreeOfferExpirationTime)

	// GeoRegion
	destination.GeoRegion = genruntime.ClonePointerToString(serverfarm.GeoRegion)

	// HostingEnvironmentProfile
	if serverfarm.HostingEnvironmentProfile != nil {
		var hostingEnvironmentProfile v20220301s.HostingEnvironmentProfile_STATUS
		err := serverfarm.HostingEnvironmentProfile.AssignProperties_To_HostingEnvironmentProfile_STATUS(&hostingEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HostingEnvironmentProfile_STATUS() to populate field HostingEnvironmentProfile")
		}
		destination.HostingEnvironmentProfile = &hostingEnvironmentProfile
	} else {
		destination.HostingEnvironmentProfile = nil
	}

	// HyperV
	if serverfarm.HyperV != nil {
		hyperV := *serverfarm.HyperV
		destination.HyperV = &hyperV
	} else {
		destination.HyperV = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(serverfarm.Id)

	// IsSpot
	if serverfarm.IsSpot != nil {
		isSpot := *serverfarm.IsSpot
		destination.IsSpot = &isSpot
	} else {
		destination.IsSpot = nil
	}

	// IsXenon
	if serverfarm.IsXenon != nil {
		isXenon := *serverfarm.IsXenon
		destination.IsXenon = &isXenon
	} else {
		destination.IsXenon = nil
	}

	// Kind
	destination.Kind = genruntime.ClonePointerToString(serverfarm.Kind)

	// KubeEnvironmentProfile
	if serverfarm.KubeEnvironmentProfile != nil {
		var kubeEnvironmentProfile v20220301s.KubeEnvironmentProfile_STATUS
		err := serverfarm.KubeEnvironmentProfile.AssignProperties_To_KubeEnvironmentProfile_STATUS(&kubeEnvironmentProfile)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_KubeEnvironmentProfile_STATUS() to populate field KubeEnvironmentProfile")
		}
		destination.KubeEnvironmentProfile = &kubeEnvironmentProfile
	} else {
		destination.KubeEnvironmentProfile = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(serverfarm.Location)

	// MaximumElasticWorkerCount
	destination.MaximumElasticWorkerCount = genruntime.ClonePointerToInt(serverfarm.MaximumElasticWorkerCount)

	// MaximumNumberOfWorkers
	destination.MaximumNumberOfWorkers = genruntime.ClonePointerToInt(serverfarm.MaximumNumberOfWorkers)

	// Name
	destination.Name = genruntime.ClonePointerToString(serverfarm.Name)

	// NumberOfSites
	destination.NumberOfSites = genruntime.ClonePointerToInt(serverfarm.NumberOfSites)

	// NumberOfWorkers
	destination.NumberOfWorkers = genruntime.ClonePointerToInt(serverfarm.NumberOfWorkers)

	// PerSiteScaling
	if serverfarm.PerSiteScaling != nil {
		perSiteScaling := *serverfarm.PerSiteScaling
		destination.PerSiteScaling = &perSiteScaling
	} else {
		destination.PerSiteScaling = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(serverfarm.ProvisioningState)

	// Reserved
	if serverfarm.Reserved != nil {
		reserved := *serverfarm.Reserved
		destination.Reserved = &reserved
	} else {
		destination.Reserved = nil
	}

	// ResourceGroup
	destination.ResourceGroup = genruntime.ClonePointerToString(serverfarm.ResourceGroup)

	// Sku
	if serverfarm.Sku != nil {
		var sku v20220301s.SkuDescription_STATUS
		err := serverfarm.Sku.AssignProperties_To_SkuDescription_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SkuDescription_STATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SpotExpirationTime
	destination.SpotExpirationTime = genruntime.ClonePointerToString(serverfarm.SpotExpirationTime)

	// Status
	destination.Status = genruntime.ClonePointerToString(serverfarm.Status)

	// Subscription
	destination.Subscription = genruntime.ClonePointerToString(serverfarm.Subscription)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(serverfarm.Tags)

	// TargetWorkerCount
	destination.TargetWorkerCount = genruntime.ClonePointerToInt(serverfarm.TargetWorkerCount)

	// TargetWorkerSizeId
	destination.TargetWorkerSizeId = genruntime.ClonePointerToInt(serverfarm.TargetWorkerSizeId)

	// Type
	destination.Type = genruntime.ClonePointerToString(serverfarm.Type)

	// WorkerTierName
	destination.WorkerTierName = genruntime.ClonePointerToString(serverfarm.WorkerTierName)

	// ZoneRedundant
	if serverfarm.ZoneRedundant != nil {
		zoneRedundant := *serverfarm.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForServerfarm_STATUS interface (if implemented) to customize the conversion
	var serverfarmAsAny any = serverfarm
	if augmentedServerfarm, ok := serverfarmAsAny.(augmentConversionForServerfarm_STATUS); ok {
		err := augmentedServerfarm.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForServerfarm_Spec interface {
	AssignPropertiesFrom(src *v20220301s.Serverfarm_Spec) error
	AssignPropertiesTo(dst *v20220301s.Serverfarm_Spec) error
}

type augmentConversionForServerfarm_STATUS interface {
	AssignPropertiesFrom(src *v20220301s.Serverfarm_STATUS) error
	AssignPropertiesTo(dst *v20220301s.Serverfarm_STATUS) error
}

// Storage version of v1beta20220301.ExtendedLocation
// Deprecated version of ExtendedLocation. Use v1api20220301.ExtendedLocation instead
type ExtendedLocation struct {
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// AssignProperties_From_ExtendedLocation populates our ExtendedLocation from the provided source ExtendedLocation
func (location *ExtendedLocation) AssignProperties_From_ExtendedLocation(source *v20220301s.ExtendedLocation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		location.PropertyBag = propertyBag
	} else {
		location.PropertyBag = nil
	}

	// Invoke the augmentConversionForExtendedLocation interface (if implemented) to customize the conversion
	var locationAsAny any = location
	if augmentedLocation, ok := locationAsAny.(augmentConversionForExtendedLocation); ok {
		err := augmentedLocation.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_ExtendedLocation populates the provided destination ExtendedLocation from our ExtendedLocation
func (location *ExtendedLocation) AssignProperties_To_ExtendedLocation(destination *v20220301s.ExtendedLocation) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(location.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForExtendedLocation interface (if implemented) to customize the conversion
	var locationAsAny any = location
	if augmentedLocation, ok := locationAsAny.(augmentConversionForExtendedLocation); ok {
		err := augmentedLocation.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.ExtendedLocation_STATUS
// Deprecated version of ExtendedLocation_STATUS. Use v1api20220301.ExtendedLocation_STATUS instead
type ExtendedLocation_STATUS struct {
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// AssignProperties_From_ExtendedLocation_STATUS populates our ExtendedLocation_STATUS from the provided source ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignProperties_From_ExtendedLocation_STATUS(source *v20220301s.ExtendedLocation_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	location.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	location.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		location.PropertyBag = propertyBag
	} else {
		location.PropertyBag = nil
	}

	// Invoke the augmentConversionForExtendedLocation_STATUS interface (if implemented) to customize the conversion
	var locationAsAny any = location
	if augmentedLocation, ok := locationAsAny.(augmentConversionForExtendedLocation_STATUS); ok {
		err := augmentedLocation.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_ExtendedLocation_STATUS populates the provided destination ExtendedLocation_STATUS from our ExtendedLocation_STATUS
func (location *ExtendedLocation_STATUS) AssignProperties_To_ExtendedLocation_STATUS(destination *v20220301s.ExtendedLocation_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(location.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(location.Name)

	// Type
	destination.Type = genruntime.ClonePointerToString(location.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForExtendedLocation_STATUS interface (if implemented) to customize the conversion
	var locationAsAny any = location
	if augmentedLocation, ok := locationAsAny.(augmentConversionForExtendedLocation_STATUS); ok {
		err := augmentedLocation.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.HostingEnvironmentProfile
// Deprecated version of HostingEnvironmentProfile. Use v1api20220301.HostingEnvironmentProfile instead
type HostingEnvironmentProfile struct {
	PropertyBag genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Reference   *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// AssignProperties_From_HostingEnvironmentProfile populates our HostingEnvironmentProfile from the provided source HostingEnvironmentProfile
func (profile *HostingEnvironmentProfile) AssignProperties_From_HostingEnvironmentProfile(source *v20220301s.HostingEnvironmentProfile) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		profile.Reference = &reference
	} else {
		profile.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		profile.PropertyBag = propertyBag
	} else {
		profile.PropertyBag = nil
	}

	// Invoke the augmentConversionForHostingEnvironmentProfile interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForHostingEnvironmentProfile); ok {
		err := augmentedProfile.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_HostingEnvironmentProfile populates the provided destination HostingEnvironmentProfile from our HostingEnvironmentProfile
func (profile *HostingEnvironmentProfile) AssignProperties_To_HostingEnvironmentProfile(destination *v20220301s.HostingEnvironmentProfile) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(profile.PropertyBag)

	// Reference
	if profile.Reference != nil {
		reference := profile.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForHostingEnvironmentProfile interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForHostingEnvironmentProfile); ok {
		err := augmentedProfile.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.HostingEnvironmentProfile_STATUS
// Deprecated version of HostingEnvironmentProfile_STATUS. Use v1api20220301.HostingEnvironmentProfile_STATUS instead
type HostingEnvironmentProfile_STATUS struct {
	Id          *string                `json:"id,omitempty"`
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// AssignProperties_From_HostingEnvironmentProfile_STATUS populates our HostingEnvironmentProfile_STATUS from the provided source HostingEnvironmentProfile_STATUS
func (profile *HostingEnvironmentProfile_STATUS) AssignProperties_From_HostingEnvironmentProfile_STATUS(source *v20220301s.HostingEnvironmentProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	profile.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	profile.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	profile.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		profile.PropertyBag = propertyBag
	} else {
		profile.PropertyBag = nil
	}

	// Invoke the augmentConversionForHostingEnvironmentProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForHostingEnvironmentProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_HostingEnvironmentProfile_STATUS populates the provided destination HostingEnvironmentProfile_STATUS from our HostingEnvironmentProfile_STATUS
func (profile *HostingEnvironmentProfile_STATUS) AssignProperties_To_HostingEnvironmentProfile_STATUS(destination *v20220301s.HostingEnvironmentProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(profile.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(profile.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(profile.Name)

	// Type
	destination.Type = genruntime.ClonePointerToString(profile.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForHostingEnvironmentProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForHostingEnvironmentProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.KubeEnvironmentProfile
// Deprecated version of KubeEnvironmentProfile. Use v1api20220301.KubeEnvironmentProfile instead
type KubeEnvironmentProfile struct {
	PropertyBag genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Reference   *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// AssignProperties_From_KubeEnvironmentProfile populates our KubeEnvironmentProfile from the provided source KubeEnvironmentProfile
func (profile *KubeEnvironmentProfile) AssignProperties_From_KubeEnvironmentProfile(source *v20220301s.KubeEnvironmentProfile) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		profile.Reference = &reference
	} else {
		profile.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		profile.PropertyBag = propertyBag
	} else {
		profile.PropertyBag = nil
	}

	// Invoke the augmentConversionForKubeEnvironmentProfile interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForKubeEnvironmentProfile); ok {
		err := augmentedProfile.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_KubeEnvironmentProfile populates the provided destination KubeEnvironmentProfile from our KubeEnvironmentProfile
func (profile *KubeEnvironmentProfile) AssignProperties_To_KubeEnvironmentProfile(destination *v20220301s.KubeEnvironmentProfile) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(profile.PropertyBag)

	// Reference
	if profile.Reference != nil {
		reference := profile.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForKubeEnvironmentProfile interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForKubeEnvironmentProfile); ok {
		err := augmentedProfile.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.KubeEnvironmentProfile_STATUS
// Deprecated version of KubeEnvironmentProfile_STATUS. Use v1api20220301.KubeEnvironmentProfile_STATUS instead
type KubeEnvironmentProfile_STATUS struct {
	Id          *string                `json:"id,omitempty"`
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// AssignProperties_From_KubeEnvironmentProfile_STATUS populates our KubeEnvironmentProfile_STATUS from the provided source KubeEnvironmentProfile_STATUS
func (profile *KubeEnvironmentProfile_STATUS) AssignProperties_From_KubeEnvironmentProfile_STATUS(source *v20220301s.KubeEnvironmentProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Id
	profile.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	profile.Name = genruntime.ClonePointerToString(source.Name)

	// Type
	profile.Type = genruntime.ClonePointerToString(source.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		profile.PropertyBag = propertyBag
	} else {
		profile.PropertyBag = nil
	}

	// Invoke the augmentConversionForKubeEnvironmentProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForKubeEnvironmentProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_KubeEnvironmentProfile_STATUS populates the provided destination KubeEnvironmentProfile_STATUS from our KubeEnvironmentProfile_STATUS
func (profile *KubeEnvironmentProfile_STATUS) AssignProperties_To_KubeEnvironmentProfile_STATUS(destination *v20220301s.KubeEnvironmentProfile_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(profile.PropertyBag)

	// Id
	destination.Id = genruntime.ClonePointerToString(profile.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(profile.Name)

	// Type
	destination.Type = genruntime.ClonePointerToString(profile.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForKubeEnvironmentProfile_STATUS interface (if implemented) to customize the conversion
	var profileAsAny any = profile
	if augmentedProfile, ok := profileAsAny.(augmentConversionForKubeEnvironmentProfile_STATUS); ok {
		err := augmentedProfile.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.SkuDescription
// Deprecated version of SkuDescription. Use v1api20220301.SkuDescription instead
type SkuDescription struct {
	Capabilities []Capability           `json:"capabilities,omitempty"`
	Capacity     *int                   `json:"capacity,omitempty"`
	Family       *string                `json:"family,omitempty"`
	Locations    []string               `json:"locations,omitempty"`
	Name         *string                `json:"name,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Size         *string                `json:"size,omitempty"`
	SkuCapacity  *SkuCapacity           `json:"skuCapacity,omitempty"`
	Tier         *string                `json:"tier,omitempty"`
}

// AssignProperties_From_SkuDescription populates our SkuDescription from the provided source SkuDescription
func (description *SkuDescription) AssignProperties_From_SkuDescription(source *v20220301s.SkuDescription) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Capabilities
	if source.Capabilities != nil {
		capabilityList := make([]Capability, len(source.Capabilities))
		for capabilityIndex, capabilityItem := range source.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability Capability
			err := capability.AssignProperties_From_Capability(&capabilityItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Capability() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		description.Capabilities = capabilityList
	} else {
		description.Capabilities = nil
	}

	// Capacity
	description.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	description.Family = genruntime.ClonePointerToString(source.Family)

	// Locations
	description.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Name
	description.Name = genruntime.ClonePointerToString(source.Name)

	// Size
	description.Size = genruntime.ClonePointerToString(source.Size)

	// SkuCapacity
	if source.SkuCapacity != nil {
		var skuCapacity SkuCapacity
		err := skuCapacity.AssignProperties_From_SkuCapacity(source.SkuCapacity)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SkuCapacity() to populate field SkuCapacity")
		}
		description.SkuCapacity = &skuCapacity
	} else {
		description.SkuCapacity = nil
	}

	// Tier
	description.Tier = genruntime.ClonePointerToString(source.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		description.PropertyBag = propertyBag
	} else {
		description.PropertyBag = nil
	}

	// Invoke the augmentConversionForSkuDescription interface (if implemented) to customize the conversion
	var descriptionAsAny any = description
	if augmentedDescription, ok := descriptionAsAny.(augmentConversionForSkuDescription); ok {
		err := augmentedDescription.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_SkuDescription populates the provided destination SkuDescription from our SkuDescription
func (description *SkuDescription) AssignProperties_To_SkuDescription(destination *v20220301s.SkuDescription) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(description.PropertyBag)

	// Capabilities
	if description.Capabilities != nil {
		capabilityList := make([]v20220301s.Capability, len(description.Capabilities))
		for capabilityIndex, capabilityItem := range description.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability v20220301s.Capability
			err := capabilityItem.AssignProperties_To_Capability(&capability)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Capability() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		destination.Capabilities = capabilityList
	} else {
		destination.Capabilities = nil
	}

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(description.Capacity)

	// Family
	destination.Family = genruntime.ClonePointerToString(description.Family)

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(description.Locations)

	// Name
	destination.Name = genruntime.ClonePointerToString(description.Name)

	// Size
	destination.Size = genruntime.ClonePointerToString(description.Size)

	// SkuCapacity
	if description.SkuCapacity != nil {
		var skuCapacity v20220301s.SkuCapacity
		err := description.SkuCapacity.AssignProperties_To_SkuCapacity(&skuCapacity)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SkuCapacity() to populate field SkuCapacity")
		}
		destination.SkuCapacity = &skuCapacity
	} else {
		destination.SkuCapacity = nil
	}

	// Tier
	destination.Tier = genruntime.ClonePointerToString(description.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForSkuDescription interface (if implemented) to customize the conversion
	var descriptionAsAny any = description
	if augmentedDescription, ok := descriptionAsAny.(augmentConversionForSkuDescription); ok {
		err := augmentedDescription.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.SkuDescription_STATUS
// Deprecated version of SkuDescription_STATUS. Use v1api20220301.SkuDescription_STATUS instead
type SkuDescription_STATUS struct {
	Capabilities []Capability_STATUS    `json:"capabilities,omitempty"`
	Capacity     *int                   `json:"capacity,omitempty"`
	Family       *string                `json:"family,omitempty"`
	Locations    []string               `json:"locations,omitempty"`
	Name         *string                `json:"name,omitempty"`
	PropertyBag  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Size         *string                `json:"size,omitempty"`
	SkuCapacity  *SkuCapacity_STATUS    `json:"skuCapacity,omitempty"`
	Tier         *string                `json:"tier,omitempty"`
}

// AssignProperties_From_SkuDescription_STATUS populates our SkuDescription_STATUS from the provided source SkuDescription_STATUS
func (description *SkuDescription_STATUS) AssignProperties_From_SkuDescription_STATUS(source *v20220301s.SkuDescription_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Capabilities
	if source.Capabilities != nil {
		capabilityList := make([]Capability_STATUS, len(source.Capabilities))
		for capabilityIndex, capabilityItem := range source.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability Capability_STATUS
			err := capability.AssignProperties_From_Capability_STATUS(&capabilityItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Capability_STATUS() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		description.Capabilities = capabilityList
	} else {
		description.Capabilities = nil
	}

	// Capacity
	description.Capacity = genruntime.ClonePointerToInt(source.Capacity)

	// Family
	description.Family = genruntime.ClonePointerToString(source.Family)

	// Locations
	description.Locations = genruntime.CloneSliceOfString(source.Locations)

	// Name
	description.Name = genruntime.ClonePointerToString(source.Name)

	// Size
	description.Size = genruntime.ClonePointerToString(source.Size)

	// SkuCapacity
	if source.SkuCapacity != nil {
		var skuCapacity SkuCapacity_STATUS
		err := skuCapacity.AssignProperties_From_SkuCapacity_STATUS(source.SkuCapacity)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SkuCapacity_STATUS() to populate field SkuCapacity")
		}
		description.SkuCapacity = &skuCapacity
	} else {
		description.SkuCapacity = nil
	}

	// Tier
	description.Tier = genruntime.ClonePointerToString(source.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		description.PropertyBag = propertyBag
	} else {
		description.PropertyBag = nil
	}

	// Invoke the augmentConversionForSkuDescription_STATUS interface (if implemented) to customize the conversion
	var descriptionAsAny any = description
	if augmentedDescription, ok := descriptionAsAny.(augmentConversionForSkuDescription_STATUS); ok {
		err := augmentedDescription.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_SkuDescription_STATUS populates the provided destination SkuDescription_STATUS from our SkuDescription_STATUS
func (description *SkuDescription_STATUS) AssignProperties_To_SkuDescription_STATUS(destination *v20220301s.SkuDescription_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(description.PropertyBag)

	// Capabilities
	if description.Capabilities != nil {
		capabilityList := make([]v20220301s.Capability_STATUS, len(description.Capabilities))
		for capabilityIndex, capabilityItem := range description.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability v20220301s.Capability_STATUS
			err := capabilityItem.AssignProperties_To_Capability_STATUS(&capability)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Capability_STATUS() to populate field Capabilities")
			}
			capabilityList[capabilityIndex] = capability
		}
		destination.Capabilities = capabilityList
	} else {
		destination.Capabilities = nil
	}

	// Capacity
	destination.Capacity = genruntime.ClonePointerToInt(description.Capacity)

	// Family
	destination.Family = genruntime.ClonePointerToString(description.Family)

	// Locations
	destination.Locations = genruntime.CloneSliceOfString(description.Locations)

	// Name
	destination.Name = genruntime.ClonePointerToString(description.Name)

	// Size
	destination.Size = genruntime.ClonePointerToString(description.Size)

	// SkuCapacity
	if description.SkuCapacity != nil {
		var skuCapacity v20220301s.SkuCapacity_STATUS
		err := description.SkuCapacity.AssignProperties_To_SkuCapacity_STATUS(&skuCapacity)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SkuCapacity_STATUS() to populate field SkuCapacity")
		}
		destination.SkuCapacity = &skuCapacity
	} else {
		destination.SkuCapacity = nil
	}

	// Tier
	destination.Tier = genruntime.ClonePointerToString(description.Tier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForSkuDescription_STATUS interface (if implemented) to customize the conversion
	var descriptionAsAny any = description
	if augmentedDescription, ok := descriptionAsAny.(augmentConversionForSkuDescription_STATUS); ok {
		err := augmentedDescription.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForExtendedLocation interface {
	AssignPropertiesFrom(src *v20220301s.ExtendedLocation) error
	AssignPropertiesTo(dst *v20220301s.ExtendedLocation) error
}

type augmentConversionForExtendedLocation_STATUS interface {
	AssignPropertiesFrom(src *v20220301s.ExtendedLocation_STATUS) error
	AssignPropertiesTo(dst *v20220301s.ExtendedLocation_STATUS) error
}

type augmentConversionForHostingEnvironmentProfile interface {
	AssignPropertiesFrom(src *v20220301s.HostingEnvironmentProfile) error
	AssignPropertiesTo(dst *v20220301s.HostingEnvironmentProfile) error
}

type augmentConversionForHostingEnvironmentProfile_STATUS interface {
	AssignPropertiesFrom(src *v20220301s.HostingEnvironmentProfile_STATUS) error
	AssignPropertiesTo(dst *v20220301s.HostingEnvironmentProfile_STATUS) error
}

type augmentConversionForKubeEnvironmentProfile interface {
	AssignPropertiesFrom(src *v20220301s.KubeEnvironmentProfile) error
	AssignPropertiesTo(dst *v20220301s.KubeEnvironmentProfile) error
}

type augmentConversionForKubeEnvironmentProfile_STATUS interface {
	AssignPropertiesFrom(src *v20220301s.KubeEnvironmentProfile_STATUS) error
	AssignPropertiesTo(dst *v20220301s.KubeEnvironmentProfile_STATUS) error
}

type augmentConversionForSkuDescription interface {
	AssignPropertiesFrom(src *v20220301s.SkuDescription) error
	AssignPropertiesTo(dst *v20220301s.SkuDescription) error
}

type augmentConversionForSkuDescription_STATUS interface {
	AssignPropertiesFrom(src *v20220301s.SkuDescription_STATUS) error
	AssignPropertiesTo(dst *v20220301s.SkuDescription_STATUS) error
}

// Storage version of v1beta20220301.Capability
// Deprecated version of Capability. Use v1api20220301.Capability instead
type Capability struct {
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Reason      *string                `json:"reason,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// AssignProperties_From_Capability populates our Capability from the provided source Capability
func (capability *Capability) AssignProperties_From_Capability(source *v20220301s.Capability) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	capability.Name = genruntime.ClonePointerToString(source.Name)

	// Reason
	capability.Reason = genruntime.ClonePointerToString(source.Reason)

	// Value
	capability.Value = genruntime.ClonePointerToString(source.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		capability.PropertyBag = propertyBag
	} else {
		capability.PropertyBag = nil
	}

	// Invoke the augmentConversionForCapability interface (if implemented) to customize the conversion
	var capabilityAsAny any = capability
	if augmentedCapability, ok := capabilityAsAny.(augmentConversionForCapability); ok {
		err := augmentedCapability.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Capability populates the provided destination Capability from our Capability
func (capability *Capability) AssignProperties_To_Capability(destination *v20220301s.Capability) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(capability.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(capability.Name)

	// Reason
	destination.Reason = genruntime.ClonePointerToString(capability.Reason)

	// Value
	destination.Value = genruntime.ClonePointerToString(capability.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForCapability interface (if implemented) to customize the conversion
	var capabilityAsAny any = capability
	if augmentedCapability, ok := capabilityAsAny.(augmentConversionForCapability); ok {
		err := augmentedCapability.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.Capability_STATUS
// Deprecated version of Capability_STATUS. Use v1api20220301.Capability_STATUS instead
type Capability_STATUS struct {
	Name        *string                `json:"name,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Reason      *string                `json:"reason,omitempty"`
	Value       *string                `json:"value,omitempty"`
}

// AssignProperties_From_Capability_STATUS populates our Capability_STATUS from the provided source Capability_STATUS
func (capability *Capability_STATUS) AssignProperties_From_Capability_STATUS(source *v20220301s.Capability_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Name
	capability.Name = genruntime.ClonePointerToString(source.Name)

	// Reason
	capability.Reason = genruntime.ClonePointerToString(source.Reason)

	// Value
	capability.Value = genruntime.ClonePointerToString(source.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		capability.PropertyBag = propertyBag
	} else {
		capability.PropertyBag = nil
	}

	// Invoke the augmentConversionForCapability_STATUS interface (if implemented) to customize the conversion
	var capabilityAsAny any = capability
	if augmentedCapability, ok := capabilityAsAny.(augmentConversionForCapability_STATUS); ok {
		err := augmentedCapability.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_Capability_STATUS populates the provided destination Capability_STATUS from our Capability_STATUS
func (capability *Capability_STATUS) AssignProperties_To_Capability_STATUS(destination *v20220301s.Capability_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(capability.PropertyBag)

	// Name
	destination.Name = genruntime.ClonePointerToString(capability.Name)

	// Reason
	destination.Reason = genruntime.ClonePointerToString(capability.Reason)

	// Value
	destination.Value = genruntime.ClonePointerToString(capability.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForCapability_STATUS interface (if implemented) to customize the conversion
	var capabilityAsAny any = capability
	if augmentedCapability, ok := capabilityAsAny.(augmentConversionForCapability_STATUS); ok {
		err := augmentedCapability.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.SkuCapacity
// Deprecated version of SkuCapacity. Use v1api20220301.SkuCapacity instead
type SkuCapacity struct {
	Default        *int                   `json:"default,omitempty"`
	ElasticMaximum *int                   `json:"elasticMaximum,omitempty"`
	Maximum        *int                   `json:"maximum,omitempty"`
	Minimum        *int                   `json:"minimum,omitempty"`
	PropertyBag    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ScaleType      *string                `json:"scaleType,omitempty"`
}

// AssignProperties_From_SkuCapacity populates our SkuCapacity from the provided source SkuCapacity
func (capacity *SkuCapacity) AssignProperties_From_SkuCapacity(source *v20220301s.SkuCapacity) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Default
	capacity.Default = genruntime.ClonePointerToInt(source.Default)

	// ElasticMaximum
	capacity.ElasticMaximum = genruntime.ClonePointerToInt(source.ElasticMaximum)

	// Maximum
	capacity.Maximum = genruntime.ClonePointerToInt(source.Maximum)

	// Minimum
	capacity.Minimum = genruntime.ClonePointerToInt(source.Minimum)

	// ScaleType
	capacity.ScaleType = genruntime.ClonePointerToString(source.ScaleType)

	// Update the property bag
	if len(propertyBag) > 0 {
		capacity.PropertyBag = propertyBag
	} else {
		capacity.PropertyBag = nil
	}

	// Invoke the augmentConversionForSkuCapacity interface (if implemented) to customize the conversion
	var capacityAsAny any = capacity
	if augmentedCapacity, ok := capacityAsAny.(augmentConversionForSkuCapacity); ok {
		err := augmentedCapacity.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_SkuCapacity populates the provided destination SkuCapacity from our SkuCapacity
func (capacity *SkuCapacity) AssignProperties_To_SkuCapacity(destination *v20220301s.SkuCapacity) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(capacity.PropertyBag)

	// Default
	destination.Default = genruntime.ClonePointerToInt(capacity.Default)

	// ElasticMaximum
	destination.ElasticMaximum = genruntime.ClonePointerToInt(capacity.ElasticMaximum)

	// Maximum
	destination.Maximum = genruntime.ClonePointerToInt(capacity.Maximum)

	// Minimum
	destination.Minimum = genruntime.ClonePointerToInt(capacity.Minimum)

	// ScaleType
	destination.ScaleType = genruntime.ClonePointerToString(capacity.ScaleType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForSkuCapacity interface (if implemented) to customize the conversion
	var capacityAsAny any = capacity
	if augmentedCapacity, ok := capacityAsAny.(augmentConversionForSkuCapacity); ok {
		err := augmentedCapacity.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

// Storage version of v1beta20220301.SkuCapacity_STATUS
// Deprecated version of SkuCapacity_STATUS. Use v1api20220301.SkuCapacity_STATUS instead
type SkuCapacity_STATUS struct {
	Default        *int                   `json:"default,omitempty"`
	ElasticMaximum *int                   `json:"elasticMaximum,omitempty"`
	Maximum        *int                   `json:"maximum,omitempty"`
	Minimum        *int                   `json:"minimum,omitempty"`
	PropertyBag    genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	ScaleType      *string                `json:"scaleType,omitempty"`
}

// AssignProperties_From_SkuCapacity_STATUS populates our SkuCapacity_STATUS from the provided source SkuCapacity_STATUS
func (capacity *SkuCapacity_STATUS) AssignProperties_From_SkuCapacity_STATUS(source *v20220301s.SkuCapacity_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(source.PropertyBag)

	// Default
	capacity.Default = genruntime.ClonePointerToInt(source.Default)

	// ElasticMaximum
	capacity.ElasticMaximum = genruntime.ClonePointerToInt(source.ElasticMaximum)

	// Maximum
	capacity.Maximum = genruntime.ClonePointerToInt(source.Maximum)

	// Minimum
	capacity.Minimum = genruntime.ClonePointerToInt(source.Minimum)

	// ScaleType
	capacity.ScaleType = genruntime.ClonePointerToString(source.ScaleType)

	// Update the property bag
	if len(propertyBag) > 0 {
		capacity.PropertyBag = propertyBag
	} else {
		capacity.PropertyBag = nil
	}

	// Invoke the augmentConversionForSkuCapacity_STATUS interface (if implemented) to customize the conversion
	var capacityAsAny any = capacity
	if augmentedCapacity, ok := capacityAsAny.(augmentConversionForSkuCapacity_STATUS); ok {
		err := augmentedCapacity.AssignPropertiesFrom(source)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesFrom() for conversion")
		}
	}

	// No error
	return nil
}

// AssignProperties_To_SkuCapacity_STATUS populates the provided destination SkuCapacity_STATUS from our SkuCapacity_STATUS
func (capacity *SkuCapacity_STATUS) AssignProperties_To_SkuCapacity_STATUS(destination *v20220301s.SkuCapacity_STATUS) error {
	// Clone the existing property bag
	propertyBag := genruntime.NewPropertyBag(capacity.PropertyBag)

	// Default
	destination.Default = genruntime.ClonePointerToInt(capacity.Default)

	// ElasticMaximum
	destination.ElasticMaximum = genruntime.ClonePointerToInt(capacity.ElasticMaximum)

	// Maximum
	destination.Maximum = genruntime.ClonePointerToInt(capacity.Maximum)

	// Minimum
	destination.Minimum = genruntime.ClonePointerToInt(capacity.Minimum)

	// ScaleType
	destination.ScaleType = genruntime.ClonePointerToString(capacity.ScaleType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// Invoke the augmentConversionForSkuCapacity_STATUS interface (if implemented) to customize the conversion
	var capacityAsAny any = capacity
	if augmentedCapacity, ok := capacityAsAny.(augmentConversionForSkuCapacity_STATUS); ok {
		err := augmentedCapacity.AssignPropertiesTo(destination)
		if err != nil {
			return errors.Wrap(err, "calling augmented AssignPropertiesTo() for conversion")
		}
	}

	// No error
	return nil
}

type augmentConversionForCapability interface {
	AssignPropertiesFrom(src *v20220301s.Capability) error
	AssignPropertiesTo(dst *v20220301s.Capability) error
}

type augmentConversionForCapability_STATUS interface {
	AssignPropertiesFrom(src *v20220301s.Capability_STATUS) error
	AssignPropertiesTo(dst *v20220301s.Capability_STATUS) error
}

type augmentConversionForSkuCapacity interface {
	AssignPropertiesFrom(src *v20220301s.SkuCapacity) error
	AssignPropertiesTo(dst *v20220301s.SkuCapacity) error
}

type augmentConversionForSkuCapacity_STATUS interface {
	AssignPropertiesFrom(src *v20220301s.SkuCapacity_STATUS) error
	AssignPropertiesTo(dst *v20220301s.SkuCapacity_STATUS) error
}

func init() {
	SchemeBuilder.Register(&ServerFarm{}, &ServerFarmList{})
}
