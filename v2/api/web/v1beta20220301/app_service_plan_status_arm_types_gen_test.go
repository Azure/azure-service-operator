// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20220301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AppServicePlan_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AppServicePlan_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAppServicePlan_STATUSARM, AppServicePlan_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAppServicePlan_STATUSARM runs a test to see if a specific instance of AppServicePlan_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAppServicePlan_STATUSARM(subject AppServicePlan_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AppServicePlan_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AppServicePlan_STATUSARM instances for property testing - lazily instantiated by
// AppServicePlan_STATUSARMGenerator()
var appServicePlan_STATUSARMGenerator gopter.Gen

// AppServicePlan_STATUSARMGenerator returns a generator of AppServicePlan_STATUSARM instances for property testing.
// We first initialize appServicePlan_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AppServicePlan_STATUSARMGenerator() gopter.Gen {
	if appServicePlan_STATUSARMGenerator != nil {
		return appServicePlan_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlan_STATUSARM(generators)
	appServicePlan_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlan_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForAppServicePlan_STATUSARM(generators)
	appServicePlan_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUSARM{}), generators)

	return appServicePlan_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAppServicePlan_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAppServicePlan_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAppServicePlan_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAppServicePlan_STATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(AppServicePlan_STATUS_PropertiesARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuDescription_STATUSARMGenerator())
}

func Test_AppServicePlan_STATUS_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AppServicePlan_STATUS_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAppServicePlan_STATUS_PropertiesARM, AppServicePlan_STATUS_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAppServicePlan_STATUS_PropertiesARM runs a test to see if a specific instance of AppServicePlan_STATUS_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAppServicePlan_STATUS_PropertiesARM(subject AppServicePlan_STATUS_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AppServicePlan_STATUS_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AppServicePlan_STATUS_PropertiesARM instances for property testing - lazily instantiated by
// AppServicePlan_STATUS_PropertiesARMGenerator()
var appServicePlan_STATUS_PropertiesARMGenerator gopter.Gen

// AppServicePlan_STATUS_PropertiesARMGenerator returns a generator of AppServicePlan_STATUS_PropertiesARM instances for property testing.
// We first initialize appServicePlan_STATUS_PropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AppServicePlan_STATUS_PropertiesARMGenerator() gopter.Gen {
	if appServicePlan_STATUS_PropertiesARMGenerator != nil {
		return appServicePlan_STATUS_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlan_STATUS_PropertiesARM(generators)
	appServicePlan_STATUS_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUS_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlan_STATUS_PropertiesARM(generators)
	AddRelatedPropertyGeneratorsForAppServicePlan_STATUS_PropertiesARM(generators)
	appServicePlan_STATUS_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUS_PropertiesARM{}), generators)

	return appServicePlan_STATUS_PropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForAppServicePlan_STATUS_PropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAppServicePlan_STATUS_PropertiesARM(gens map[string]gopter.Gen) {
	gens["ElasticScaleEnabled"] = gen.PtrOf(gen.Bool())
	gens["FreeOfferExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["GeoRegion"] = gen.PtrOf(gen.AlphaString())
	gens["HyperV"] = gen.PtrOf(gen.Bool())
	gens["IsSpot"] = gen.PtrOf(gen.Bool())
	gens["IsXenon"] = gen.PtrOf(gen.Bool())
	gens["MaximumElasticWorkerCount"] = gen.PtrOf(gen.Int())
	gens["MaximumNumberOfWorkers"] = gen.PtrOf(gen.Int())
	gens["NumberOfSites"] = gen.PtrOf(gen.Int())
	gens["NumberOfWorkers"] = gen.PtrOf(gen.Int())
	gens["PerSiteScaling"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AppServicePlan_STATUS_Properties_ProvisioningState_Canceled,
		AppServicePlan_STATUS_Properties_ProvisioningState_Deleting,
		AppServicePlan_STATUS_Properties_ProvisioningState_Failed,
		AppServicePlan_STATUS_Properties_ProvisioningState_InProgress,
		AppServicePlan_STATUS_Properties_ProvisioningState_Succeeded))
	gens["Reserved"] = gen.PtrOf(gen.Bool())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SpotExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(AppServicePlan_STATUS_Properties_Status_Creating, AppServicePlan_STATUS_Properties_Status_Pending, AppServicePlan_STATUS_Properties_Status_Ready))
	gens["Subscription"] = gen.PtrOf(gen.AlphaString())
	gens["TargetWorkerCount"] = gen.PtrOf(gen.Int())
	gens["TargetWorkerSizeId"] = gen.PtrOf(gen.Int())
	gens["WorkerTierName"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForAppServicePlan_STATUS_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAppServicePlan_STATUS_PropertiesARM(gens map[string]gopter.Gen) {
	gens["HostingEnvironmentProfile"] = gen.PtrOf(HostingEnvironmentProfile_STATUSARMGenerator())
	gens["KubeEnvironmentProfile"] = gen.PtrOf(KubeEnvironmentProfile_STATUSARMGenerator())
}

func Test_ExtendedLocation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_STATUSARM, ExtendedLocation_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_STATUSARM runs a test to see if a specific instance of ExtendedLocation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_STATUSARM(subject ExtendedLocation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUSARM instances for property testing - lazily instantiated by
// ExtendedLocation_STATUSARMGenerator()
var extendedLocation_STATUSARMGenerator gopter.Gen

// ExtendedLocation_STATUSARMGenerator returns a generator of ExtendedLocation_STATUSARM instances for property testing.
func ExtendedLocation_STATUSARMGenerator() gopter.Gen {
	if extendedLocation_STATUSARMGenerator != nil {
		return extendedLocation_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM(generators)
	extendedLocation_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUSARM{}), generators)

	return extendedLocation_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuDescription_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuDescription_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuDescription_STATUSARM, SkuDescription_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuDescription_STATUSARM runs a test to see if a specific instance of SkuDescription_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuDescription_STATUSARM(subject SkuDescription_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuDescription_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuDescription_STATUSARM instances for property testing - lazily instantiated by
// SkuDescription_STATUSARMGenerator()
var skuDescription_STATUSARMGenerator gopter.Gen

// SkuDescription_STATUSARMGenerator returns a generator of SkuDescription_STATUSARM instances for property testing.
// We first initialize skuDescription_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SkuDescription_STATUSARMGenerator() gopter.Gen {
	if skuDescription_STATUSARMGenerator != nil {
		return skuDescription_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescription_STATUSARM(generators)
	skuDescription_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SkuDescription_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescription_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForSkuDescription_STATUSARM(generators)
	skuDescription_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SkuDescription_STATUSARM{}), generators)

	return skuDescription_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuDescription_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuDescription_STATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSkuDescription_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSkuDescription_STATUSARM(gens map[string]gopter.Gen) {
	gens["Capabilities"] = gen.SliceOf(Capability_STATUSARMGenerator())
	gens["SkuCapacity"] = gen.PtrOf(SkuCapacity_STATUSARMGenerator())
}

func Test_Capability_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapability_STATUSARM, Capability_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapability_STATUSARM runs a test to see if a specific instance of Capability_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCapability_STATUSARM(subject Capability_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability_STATUSARM instances for property testing - lazily instantiated by
// Capability_STATUSARMGenerator()
var capability_STATUSARMGenerator gopter.Gen

// Capability_STATUSARMGenerator returns a generator of Capability_STATUSARM instances for property testing.
func Capability_STATUSARMGenerator() gopter.Gen {
	if capability_STATUSARMGenerator != nil {
		return capability_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapability_STATUSARM(generators)
	capability_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Capability_STATUSARM{}), generators)

	return capability_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCapability_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapability_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Reason"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_HostingEnvironmentProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostingEnvironmentProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostingEnvironmentProfile_STATUSARM, HostingEnvironmentProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostingEnvironmentProfile_STATUSARM runs a test to see if a specific instance of HostingEnvironmentProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHostingEnvironmentProfile_STATUSARM(subject HostingEnvironmentProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostingEnvironmentProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostingEnvironmentProfile_STATUSARM instances for property testing - lazily instantiated by
// HostingEnvironmentProfile_STATUSARMGenerator()
var hostingEnvironmentProfile_STATUSARMGenerator gopter.Gen

// HostingEnvironmentProfile_STATUSARMGenerator returns a generator of HostingEnvironmentProfile_STATUSARM instances for property testing.
func HostingEnvironmentProfile_STATUSARMGenerator() gopter.Gen {
	if hostingEnvironmentProfile_STATUSARMGenerator != nil {
		return hostingEnvironmentProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostingEnvironmentProfile_STATUSARM(generators)
	hostingEnvironmentProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(HostingEnvironmentProfile_STATUSARM{}), generators)

	return hostingEnvironmentProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHostingEnvironmentProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHostingEnvironmentProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeEnvironmentProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeEnvironmentProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeEnvironmentProfile_STATUSARM, KubeEnvironmentProfile_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeEnvironmentProfile_STATUSARM runs a test to see if a specific instance of KubeEnvironmentProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeEnvironmentProfile_STATUSARM(subject KubeEnvironmentProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeEnvironmentProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeEnvironmentProfile_STATUSARM instances for property testing - lazily instantiated by
// KubeEnvironmentProfile_STATUSARMGenerator()
var kubeEnvironmentProfile_STATUSARMGenerator gopter.Gen

// KubeEnvironmentProfile_STATUSARMGenerator returns a generator of KubeEnvironmentProfile_STATUSARM instances for property testing.
func KubeEnvironmentProfile_STATUSARMGenerator() gopter.Gen {
	if kubeEnvironmentProfile_STATUSARMGenerator != nil {
		return kubeEnvironmentProfile_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeEnvironmentProfile_STATUSARM(generators)
	kubeEnvironmentProfile_STATUSARMGenerator = gen.Struct(reflect.TypeOf(KubeEnvironmentProfile_STATUSARM{}), generators)

	return kubeEnvironmentProfile_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForKubeEnvironmentProfile_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeEnvironmentProfile_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuCapacity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuCapacity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuCapacity_STATUSARM, SkuCapacity_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuCapacity_STATUSARM runs a test to see if a specific instance of SkuCapacity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuCapacity_STATUSARM(subject SkuCapacity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuCapacity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuCapacity_STATUSARM instances for property testing - lazily instantiated by
// SkuCapacity_STATUSARMGenerator()
var skuCapacity_STATUSARMGenerator gopter.Gen

// SkuCapacity_STATUSARMGenerator returns a generator of SkuCapacity_STATUSARM instances for property testing.
func SkuCapacity_STATUSARMGenerator() gopter.Gen {
	if skuCapacity_STATUSARMGenerator != nil {
		return skuCapacity_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuCapacity_STATUSARM(generators)
	skuCapacity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SkuCapacity_STATUSARM{}), generators)

	return skuCapacity_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuCapacity_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuCapacity_STATUSARM(gens map[string]gopter.Gen) {
	gens["Default"] = gen.PtrOf(gen.Int())
	gens["ElasticMaximum"] = gen.PtrOf(gen.Int())
	gens["Maximum"] = gen.PtrOf(gen.Int())
	gens["Minimum"] = gen.PtrOf(gen.Int())
	gens["ScaleType"] = gen.PtrOf(gen.AlphaString())
}
