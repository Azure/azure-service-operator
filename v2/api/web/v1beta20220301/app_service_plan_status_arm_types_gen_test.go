// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20220301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AppServicePlan_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AppServicePlan_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAppServicePlanSTATUSARM, AppServicePlanSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAppServicePlanSTATUSARM runs a test to see if a specific instance of AppServicePlan_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAppServicePlanSTATUSARM(subject AppServicePlan_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AppServicePlan_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AppServicePlan_STATUSARM instances for property testing - lazily instantiated by
// AppServicePlanSTATUSARMGenerator()
var appServicePlanSTATUSARMGenerator gopter.Gen

// AppServicePlanSTATUSARMGenerator returns a generator of AppServicePlan_STATUSARM instances for property testing.
// We first initialize appServicePlanSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AppServicePlanSTATUSARMGenerator() gopter.Gen {
	if appServicePlanSTATUSARMGenerator != nil {
		return appServicePlanSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanSTATUSARM(generators)
	appServicePlanSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForAppServicePlanSTATUSARM(generators)
	appServicePlanSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUSARM{}), generators)

	return appServicePlanSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAppServicePlanSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAppServicePlanSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAppServicePlanSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAppServicePlanSTATUSARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(AppServicePlanSTATUSPropertiesARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuDescriptionSTATUSARMGenerator())
}

func Test_AppServicePlan_STATUS_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AppServicePlan_STATUS_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAppServicePlanSTATUSPropertiesARM, AppServicePlanSTATUSPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAppServicePlanSTATUSPropertiesARM runs a test to see if a specific instance of AppServicePlan_STATUS_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAppServicePlanSTATUSPropertiesARM(subject AppServicePlan_STATUS_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AppServicePlan_STATUS_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AppServicePlan_STATUS_PropertiesARM instances for property testing - lazily instantiated by
// AppServicePlanSTATUSPropertiesARMGenerator()
var appServicePlanSTATUSPropertiesARMGenerator gopter.Gen

// AppServicePlanSTATUSPropertiesARMGenerator returns a generator of AppServicePlan_STATUS_PropertiesARM instances for property testing.
// We first initialize appServicePlanSTATUSPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AppServicePlanSTATUSPropertiesARMGenerator() gopter.Gen {
	if appServicePlanSTATUSPropertiesARMGenerator != nil {
		return appServicePlanSTATUSPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanSTATUSPropertiesARM(generators)
	appServicePlanSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUS_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanSTATUSPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForAppServicePlanSTATUSPropertiesARM(generators)
	appServicePlanSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUS_PropertiesARM{}), generators)

	return appServicePlanSTATUSPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForAppServicePlanSTATUSPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAppServicePlanSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["ElasticScaleEnabled"] = gen.PtrOf(gen.Bool())
	gens["FreeOfferExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["GeoRegion"] = gen.PtrOf(gen.AlphaString())
	gens["HyperV"] = gen.PtrOf(gen.Bool())
	gens["IsSpot"] = gen.PtrOf(gen.Bool())
	gens["IsXenon"] = gen.PtrOf(gen.Bool())
	gens["MaximumElasticWorkerCount"] = gen.PtrOf(gen.Int())
	gens["MaximumNumberOfWorkers"] = gen.PtrOf(gen.Int())
	gens["NumberOfSites"] = gen.PtrOf(gen.Int())
	gens["NumberOfWorkers"] = gen.PtrOf(gen.Int())
	gens["PerSiteScaling"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AppServicePlanSTATUSPropertiesProvisioningState_Canceled,
		AppServicePlanSTATUSPropertiesProvisioningState_Deleting,
		AppServicePlanSTATUSPropertiesProvisioningState_Failed,
		AppServicePlanSTATUSPropertiesProvisioningState_InProgress,
		AppServicePlanSTATUSPropertiesProvisioningState_Succeeded))
	gens["Reserved"] = gen.PtrOf(gen.Bool())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SpotExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(AppServicePlanSTATUSPropertiesStatus_Creating, AppServicePlanSTATUSPropertiesStatus_Pending, AppServicePlanSTATUSPropertiesStatus_Ready))
	gens["Subscription"] = gen.PtrOf(gen.AlphaString())
	gens["TargetWorkerCount"] = gen.PtrOf(gen.Int())
	gens["TargetWorkerSizeId"] = gen.PtrOf(gen.Int())
	gens["WorkerTierName"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForAppServicePlanSTATUSPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAppServicePlanSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["HostingEnvironmentProfile"] = gen.PtrOf(HostingEnvironmentProfileSTATUSARMGenerator())
	gens["KubeEnvironmentProfile"] = gen.PtrOf(KubeEnvironmentProfileSTATUSARMGenerator())
}

func Test_ExtendedLocation_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationSTATUSARM, ExtendedLocationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationSTATUSARM runs a test to see if a specific instance of ExtendedLocation_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationSTATUSARM(subject ExtendedLocation_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUSARM instances for property testing - lazily instantiated by
// ExtendedLocationSTATUSARMGenerator()
var extendedLocationSTATUSARMGenerator gopter.Gen

// ExtendedLocationSTATUSARMGenerator returns a generator of ExtendedLocation_STATUSARM instances for property testing.
func ExtendedLocationSTATUSARMGenerator() gopter.Gen {
	if extendedLocationSTATUSARMGenerator != nil {
		return extendedLocationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationSTATUSARM(generators)
	extendedLocationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUSARM{}), generators)

	return extendedLocationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuDescription_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuDescription_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuDescriptionSTATUSARM, SkuDescriptionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuDescriptionSTATUSARM runs a test to see if a specific instance of SkuDescription_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuDescriptionSTATUSARM(subject SkuDescription_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuDescription_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuDescription_STATUSARM instances for property testing - lazily instantiated by
// SkuDescriptionSTATUSARMGenerator()
var skuDescriptionSTATUSARMGenerator gopter.Gen

// SkuDescriptionSTATUSARMGenerator returns a generator of SkuDescription_STATUSARM instances for property testing.
// We first initialize skuDescriptionSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SkuDescriptionSTATUSARMGenerator() gopter.Gen {
	if skuDescriptionSTATUSARMGenerator != nil {
		return skuDescriptionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescriptionSTATUSARM(generators)
	skuDescriptionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SkuDescription_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescriptionSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForSkuDescriptionSTATUSARM(generators)
	skuDescriptionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SkuDescription_STATUSARM{}), generators)

	return skuDescriptionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuDescriptionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuDescriptionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSkuDescriptionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSkuDescriptionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Capabilities"] = gen.SliceOf(CapabilitySTATUSARMGenerator())
	gens["SkuCapacity"] = gen.PtrOf(SkuCapacitySTATUSARMGenerator())
}

func Test_Capability_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapabilitySTATUSARM, CapabilitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapabilitySTATUSARM runs a test to see if a specific instance of Capability_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCapabilitySTATUSARM(subject Capability_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability_STATUSARM instances for property testing - lazily instantiated by
// CapabilitySTATUSARMGenerator()
var capabilitySTATUSARMGenerator gopter.Gen

// CapabilitySTATUSARMGenerator returns a generator of Capability_STATUSARM instances for property testing.
func CapabilitySTATUSARMGenerator() gopter.Gen {
	if capabilitySTATUSARMGenerator != nil {
		return capabilitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapabilitySTATUSARM(generators)
	capabilitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(Capability_STATUSARM{}), generators)

	return capabilitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCapabilitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapabilitySTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Reason"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_HostingEnvironmentProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostingEnvironmentProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostingEnvironmentProfileSTATUSARM, HostingEnvironmentProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostingEnvironmentProfileSTATUSARM runs a test to see if a specific instance of HostingEnvironmentProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHostingEnvironmentProfileSTATUSARM(subject HostingEnvironmentProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostingEnvironmentProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostingEnvironmentProfile_STATUSARM instances for property testing - lazily instantiated by
// HostingEnvironmentProfileSTATUSARMGenerator()
var hostingEnvironmentProfileSTATUSARMGenerator gopter.Gen

// HostingEnvironmentProfileSTATUSARMGenerator returns a generator of HostingEnvironmentProfile_STATUSARM instances for property testing.
func HostingEnvironmentProfileSTATUSARMGenerator() gopter.Gen {
	if hostingEnvironmentProfileSTATUSARMGenerator != nil {
		return hostingEnvironmentProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostingEnvironmentProfileSTATUSARM(generators)
	hostingEnvironmentProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(HostingEnvironmentProfile_STATUSARM{}), generators)

	return hostingEnvironmentProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHostingEnvironmentProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHostingEnvironmentProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeEnvironmentProfile_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeEnvironmentProfile_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeEnvironmentProfileSTATUSARM, KubeEnvironmentProfileSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeEnvironmentProfileSTATUSARM runs a test to see if a specific instance of KubeEnvironmentProfile_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeEnvironmentProfileSTATUSARM(subject KubeEnvironmentProfile_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeEnvironmentProfile_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeEnvironmentProfile_STATUSARM instances for property testing - lazily instantiated by
// KubeEnvironmentProfileSTATUSARMGenerator()
var kubeEnvironmentProfileSTATUSARMGenerator gopter.Gen

// KubeEnvironmentProfileSTATUSARMGenerator returns a generator of KubeEnvironmentProfile_STATUSARM instances for property testing.
func KubeEnvironmentProfileSTATUSARMGenerator() gopter.Gen {
	if kubeEnvironmentProfileSTATUSARMGenerator != nil {
		return kubeEnvironmentProfileSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeEnvironmentProfileSTATUSARM(generators)
	kubeEnvironmentProfileSTATUSARMGenerator = gen.Struct(reflect.TypeOf(KubeEnvironmentProfile_STATUSARM{}), generators)

	return kubeEnvironmentProfileSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForKubeEnvironmentProfileSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeEnvironmentProfileSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuCapacity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuCapacity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuCapacitySTATUSARM, SkuCapacitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuCapacitySTATUSARM runs a test to see if a specific instance of SkuCapacity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuCapacitySTATUSARM(subject SkuCapacity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuCapacity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuCapacity_STATUSARM instances for property testing - lazily instantiated by
// SkuCapacitySTATUSARMGenerator()
var skuCapacitySTATUSARMGenerator gopter.Gen

// SkuCapacitySTATUSARMGenerator returns a generator of SkuCapacity_STATUSARM instances for property testing.
func SkuCapacitySTATUSARMGenerator() gopter.Gen {
	if skuCapacitySTATUSARMGenerator != nil {
		return skuCapacitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuCapacitySTATUSARM(generators)
	skuCapacitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(SkuCapacity_STATUSARM{}), generators)

	return skuCapacitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuCapacitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuCapacitySTATUSARM(gens map[string]gopter.Gen) {
	gens["Default"] = gen.PtrOf(gen.Int())
	gens["ElasticMaximum"] = gen.PtrOf(gen.Int())
	gens["Maximum"] = gen.PtrOf(gen.Int())
	gens["Minimum"] = gen.PtrOf(gen.Int())
	gens["ScaleType"] = gen.PtrOf(gen.AlphaString())
}
