// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20220301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Serverfarm_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Serverfarm_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerfarm_Spec_ARM, Serverfarm_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerfarm_Spec_ARM runs a test to see if a specific instance of Serverfarm_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerfarm_Spec_ARM(subject Serverfarm_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Serverfarm_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Serverfarm_Spec_ARM instances for property testing - lazily instantiated by
// Serverfarm_Spec_ARMGenerator()
var serverfarm_Spec_ARMGenerator gopter.Gen

// Serverfarm_Spec_ARMGenerator returns a generator of Serverfarm_Spec_ARM instances for property testing.
// We first initialize serverfarm_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Serverfarm_Spec_ARMGenerator() gopter.Gen {
	if serverfarm_Spec_ARMGenerator != nil {
		return serverfarm_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarm_Spec_ARM(generators)
	serverfarm_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Serverfarm_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarm_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForServerfarm_Spec_ARM(generators)
	serverfarm_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Serverfarm_Spec_ARM{}), generators)

	return serverfarm_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerfarm_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerfarm_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServerfarm_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerfarm_Spec_ARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocation_ARMGenerator())
	gens["Properties"] = gen.PtrOf(AppServicePlanProperties_ARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuDescription_ARMGenerator())
}

func Test_AppServicePlanProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AppServicePlanProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAppServicePlanProperties_ARM, AppServicePlanProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAppServicePlanProperties_ARM runs a test to see if a specific instance of AppServicePlanProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAppServicePlanProperties_ARM(subject AppServicePlanProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AppServicePlanProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AppServicePlanProperties_ARM instances for property testing - lazily instantiated by
// AppServicePlanProperties_ARMGenerator()
var appServicePlanProperties_ARMGenerator gopter.Gen

// AppServicePlanProperties_ARMGenerator returns a generator of AppServicePlanProperties_ARM instances for property testing.
// We first initialize appServicePlanProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AppServicePlanProperties_ARMGenerator() gopter.Gen {
	if appServicePlanProperties_ARMGenerator != nil {
		return appServicePlanProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanProperties_ARM(generators)
	appServicePlanProperties_ARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlanProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForAppServicePlanProperties_ARM(generators)
	appServicePlanProperties_ARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlanProperties_ARM{}), generators)

	return appServicePlanProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAppServicePlanProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAppServicePlanProperties_ARM(gens map[string]gopter.Gen) {
	gens["ElasticScaleEnabled"] = gen.PtrOf(gen.Bool())
	gens["FreeOfferExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["HyperV"] = gen.PtrOf(gen.Bool())
	gens["IsSpot"] = gen.PtrOf(gen.Bool())
	gens["IsXenon"] = gen.PtrOf(gen.Bool())
	gens["MaximumElasticWorkerCount"] = gen.PtrOf(gen.Int())
	gens["PerSiteScaling"] = gen.PtrOf(gen.Bool())
	gens["Reserved"] = gen.PtrOf(gen.Bool())
	gens["SpotExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["TargetWorkerCount"] = gen.PtrOf(gen.Int())
	gens["TargetWorkerSizeId"] = gen.PtrOf(gen.Int())
	gens["WorkerTierName"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForAppServicePlanProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAppServicePlanProperties_ARM(gens map[string]gopter.Gen) {
	gens["HostingEnvironmentProfile"] = gen.PtrOf(HostingEnvironmentProfile_ARMGenerator())
	gens["KubeEnvironmentProfile"] = gen.PtrOf(KubeEnvironmentProfile_ARMGenerator())
}

func Test_ExtendedLocation_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation_ARM, ExtendedLocation_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation_ARM runs a test to see if a specific instance of ExtendedLocation_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation_ARM(subject ExtendedLocation_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_ARM instances for property testing - lazily instantiated by
// ExtendedLocation_ARMGenerator()
var extendedLocation_ARMGenerator gopter.Gen

// ExtendedLocation_ARMGenerator returns a generator of ExtendedLocation_ARM instances for property testing.
func ExtendedLocation_ARMGenerator() gopter.Gen {
	if extendedLocation_ARMGenerator != nil {
		return extendedLocation_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation_ARM(generators)
	extendedLocation_ARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_ARM{}), generators)

	return extendedLocation_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuDescription_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuDescription_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuDescription_ARM, SkuDescription_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuDescription_ARM runs a test to see if a specific instance of SkuDescription_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuDescription_ARM(subject SkuDescription_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuDescription_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuDescription_ARM instances for property testing - lazily instantiated by SkuDescription_ARMGenerator()
var skuDescription_ARMGenerator gopter.Gen

// SkuDescription_ARMGenerator returns a generator of SkuDescription_ARM instances for property testing.
// We first initialize skuDescription_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SkuDescription_ARMGenerator() gopter.Gen {
	if skuDescription_ARMGenerator != nil {
		return skuDescription_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescription_ARM(generators)
	skuDescription_ARMGenerator = gen.Struct(reflect.TypeOf(SkuDescription_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescription_ARM(generators)
	AddRelatedPropertyGeneratorsForSkuDescription_ARM(generators)
	skuDescription_ARMGenerator = gen.Struct(reflect.TypeOf(SkuDescription_ARM{}), generators)

	return skuDescription_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuDescription_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuDescription_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSkuDescription_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSkuDescription_ARM(gens map[string]gopter.Gen) {
	gens["Capabilities"] = gen.SliceOf(Capability_ARMGenerator())
	gens["SkuCapacity"] = gen.PtrOf(SkuCapacity_ARMGenerator())
}

func Test_Capability_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapability_ARM, Capability_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapability_ARM runs a test to see if a specific instance of Capability_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCapability_ARM(subject Capability_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability_ARM instances for property testing - lazily instantiated by Capability_ARMGenerator()
var capability_ARMGenerator gopter.Gen

// Capability_ARMGenerator returns a generator of Capability_ARM instances for property testing.
func Capability_ARMGenerator() gopter.Gen {
	if capability_ARMGenerator != nil {
		return capability_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapability_ARM(generators)
	capability_ARMGenerator = gen.Struct(reflect.TypeOf(Capability_ARM{}), generators)

	return capability_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCapability_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapability_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Reason"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_HostingEnvironmentProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostingEnvironmentProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostingEnvironmentProfile_ARM, HostingEnvironmentProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostingEnvironmentProfile_ARM runs a test to see if a specific instance of HostingEnvironmentProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHostingEnvironmentProfile_ARM(subject HostingEnvironmentProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostingEnvironmentProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostingEnvironmentProfile_ARM instances for property testing - lazily instantiated by
// HostingEnvironmentProfile_ARMGenerator()
var hostingEnvironmentProfile_ARMGenerator gopter.Gen

// HostingEnvironmentProfile_ARMGenerator returns a generator of HostingEnvironmentProfile_ARM instances for property testing.
func HostingEnvironmentProfile_ARMGenerator() gopter.Gen {
	if hostingEnvironmentProfile_ARMGenerator != nil {
		return hostingEnvironmentProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostingEnvironmentProfile_ARM(generators)
	hostingEnvironmentProfile_ARMGenerator = gen.Struct(reflect.TypeOf(HostingEnvironmentProfile_ARM{}), generators)

	return hostingEnvironmentProfile_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHostingEnvironmentProfile_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHostingEnvironmentProfile_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeEnvironmentProfile_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeEnvironmentProfile_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeEnvironmentProfile_ARM, KubeEnvironmentProfile_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeEnvironmentProfile_ARM runs a test to see if a specific instance of KubeEnvironmentProfile_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeEnvironmentProfile_ARM(subject KubeEnvironmentProfile_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeEnvironmentProfile_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeEnvironmentProfile_ARM instances for property testing - lazily instantiated by
// KubeEnvironmentProfile_ARMGenerator()
var kubeEnvironmentProfile_ARMGenerator gopter.Gen

// KubeEnvironmentProfile_ARMGenerator returns a generator of KubeEnvironmentProfile_ARM instances for property testing.
func KubeEnvironmentProfile_ARMGenerator() gopter.Gen {
	if kubeEnvironmentProfile_ARMGenerator != nil {
		return kubeEnvironmentProfile_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeEnvironmentProfile_ARM(generators)
	kubeEnvironmentProfile_ARMGenerator = gen.Struct(reflect.TypeOf(KubeEnvironmentProfile_ARM{}), generators)

	return kubeEnvironmentProfile_ARMGenerator
}

// AddIndependentPropertyGeneratorsForKubeEnvironmentProfile_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeEnvironmentProfile_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuCapacity_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuCapacity_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuCapacity_ARM, SkuCapacity_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuCapacity_ARM runs a test to see if a specific instance of SkuCapacity_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuCapacity_ARM(subject SkuCapacity_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuCapacity_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuCapacity_ARM instances for property testing - lazily instantiated by SkuCapacity_ARMGenerator()
var skuCapacity_ARMGenerator gopter.Gen

// SkuCapacity_ARMGenerator returns a generator of SkuCapacity_ARM instances for property testing.
func SkuCapacity_ARMGenerator() gopter.Gen {
	if skuCapacity_ARMGenerator != nil {
		return skuCapacity_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuCapacity_ARM(generators)
	skuCapacity_ARMGenerator = gen.Struct(reflect.TypeOf(SkuCapacity_ARM{}), generators)

	return skuCapacity_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuCapacity_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuCapacity_ARM(gens map[string]gopter.Gen) {
	gens["Default"] = gen.PtrOf(gen.Int())
	gens["ElasticMaximum"] = gen.PtrOf(gen.Int())
	gens["Maximum"] = gen.PtrOf(gen.Int())
	gens["Minimum"] = gen.PtrOf(gen.Int())
	gens["ScaleType"] = gen.PtrOf(gen.AlphaString())
}
