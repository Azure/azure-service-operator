// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20220301

import (
	"encoding/json"
	v20220301s "github.com/Azure/azure-service-operator/v2/api/web/v1beta20220301storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Serverfarm_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Serverfarm to hub returns original",
		prop.ForAll(RunResourceConversionTestForServerfarm, ServerfarmGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForServerfarm tests if a specific instance of Serverfarm round trips to the hub storage version and back losslessly
func RunResourceConversionTestForServerfarm(subject Serverfarm) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20220301s.Serverfarm
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual Serverfarm
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Serverfarm_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Serverfarm to Serverfarm via AssignPropertiesToServerfarm & AssignPropertiesFromServerfarm returns original",
		prop.ForAll(RunPropertyAssignmentTestForServerfarm, ServerfarmGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServerfarm tests if a specific instance of Serverfarm can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForServerfarm(subject Serverfarm) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.Serverfarm
	err := copied.AssignPropertiesToServerfarm(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Serverfarm
	err = actual.AssignPropertiesFromServerfarm(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Serverfarm_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Serverfarm via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerfarm, ServerfarmGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerfarm runs a test to see if a specific instance of Serverfarm round trips to JSON and back losslessly
func RunJSONSerializationTestForServerfarm(subject Serverfarm) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Serverfarm
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Serverfarm instances for property testing - lazily instantiated by ServerfarmGenerator()
var serverfarmGenerator gopter.Gen

// ServerfarmGenerator returns a generator of Serverfarm instances for property testing.
func ServerfarmGenerator() gopter.Gen {
	if serverfarmGenerator != nil {
		return serverfarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServerfarm(generators)
	serverfarmGenerator = gen.Struct(reflect.TypeOf(Serverfarm{}), generators)

	return serverfarmGenerator
}

// AddRelatedPropertyGeneratorsForServerfarm is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerfarm(gens map[string]gopter.Gen) {
	gens["Spec"] = ServerfarmsSpecGenerator()
	gens["Status"] = AppServicePlanSTATUSGenerator()
}

func Test_AppServicePlan_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AppServicePlan_STATUS to AppServicePlan_STATUS via AssignPropertiesToAppServicePlanSTATUS & AssignPropertiesFromAppServicePlanSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForAppServicePlanSTATUS, AppServicePlanSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAppServicePlanSTATUS tests if a specific instance of AppServicePlan_STATUS can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForAppServicePlanSTATUS(subject AppServicePlan_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.AppServicePlan_STATUS
	err := copied.AssignPropertiesToAppServicePlanSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AppServicePlan_STATUS
	err = actual.AssignPropertiesFromAppServicePlanSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AppServicePlan_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AppServicePlan_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAppServicePlanSTATUS, AppServicePlanSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAppServicePlanSTATUS runs a test to see if a specific instance of AppServicePlan_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAppServicePlanSTATUS(subject AppServicePlan_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AppServicePlan_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AppServicePlan_STATUS instances for property testing - lazily instantiated by
// AppServicePlanSTATUSGenerator()
var appServicePlanSTATUSGenerator gopter.Gen

// AppServicePlanSTATUSGenerator returns a generator of AppServicePlan_STATUS instances for property testing.
// We first initialize appServicePlanSTATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AppServicePlanSTATUSGenerator() gopter.Gen {
	if appServicePlanSTATUSGenerator != nil {
		return appServicePlanSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanSTATUS(generators)
	appServicePlanSTATUSGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanSTATUS(generators)
	AddRelatedPropertyGeneratorsForAppServicePlanSTATUS(generators)
	appServicePlanSTATUSGenerator = gen.Struct(reflect.TypeOf(AppServicePlan_STATUS{}), generators)

	return appServicePlanSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForAppServicePlanSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAppServicePlanSTATUS(gens map[string]gopter.Gen) {
	gens["ElasticScaleEnabled"] = gen.PtrOf(gen.Bool())
	gens["FreeOfferExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["GeoRegion"] = gen.PtrOf(gen.AlphaString())
	gens["HyperV"] = gen.PtrOf(gen.Bool())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsSpot"] = gen.PtrOf(gen.Bool())
	gens["IsXenon"] = gen.PtrOf(gen.Bool())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["MaximumElasticWorkerCount"] = gen.PtrOf(gen.Int())
	gens["MaximumNumberOfWorkers"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["NumberOfSites"] = gen.PtrOf(gen.Int())
	gens["NumberOfWorkers"] = gen.PtrOf(gen.Int())
	gens["PerSiteScaling"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AppServicePlanSTATUSPropertiesProvisioningState_Canceled,
		AppServicePlanSTATUSPropertiesProvisioningState_Deleting,
		AppServicePlanSTATUSPropertiesProvisioningState_Failed,
		AppServicePlanSTATUSPropertiesProvisioningState_InProgress,
		AppServicePlanSTATUSPropertiesProvisioningState_Succeeded))
	gens["Reserved"] = gen.PtrOf(gen.Bool())
	gens["ResourceGroup"] = gen.PtrOf(gen.AlphaString())
	gens["SpotExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(AppServicePlanSTATUSPropertiesStatus_Creating, AppServicePlanSTATUSPropertiesStatus_Pending, AppServicePlanSTATUSPropertiesStatus_Ready))
	gens["Subscription"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["TargetWorkerCount"] = gen.PtrOf(gen.Int())
	gens["TargetWorkerSizeId"] = gen.PtrOf(gen.Int())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["WorkerTierName"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForAppServicePlanSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAppServicePlanSTATUS(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationSTATUSGenerator())
	gens["HostingEnvironmentProfile"] = gen.PtrOf(HostingEnvironmentProfileSTATUSGenerator())
	gens["KubeEnvironmentProfile"] = gen.PtrOf(KubeEnvironmentProfileSTATUSGenerator())
	gens["Sku"] = gen.PtrOf(SkuDescriptionSTATUSGenerator())
}

func Test_Serverfarms_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Serverfarms_Spec to Serverfarms_Spec via AssignPropertiesToServerfarmsSpec & AssignPropertiesFromServerfarmsSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForServerfarmsSpec, ServerfarmsSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServerfarmsSpec tests if a specific instance of Serverfarms_Spec can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForServerfarmsSpec(subject Serverfarms_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.Serverfarms_Spec
	err := copied.AssignPropertiesToServerfarmsSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Serverfarms_Spec
	err = actual.AssignPropertiesFromServerfarmsSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Serverfarms_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Serverfarms_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerfarmsSpec, ServerfarmsSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerfarmsSpec runs a test to see if a specific instance of Serverfarms_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServerfarmsSpec(subject Serverfarms_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Serverfarms_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Serverfarms_Spec instances for property testing - lazily instantiated by ServerfarmsSpecGenerator()
var serverfarmsSpecGenerator gopter.Gen

// ServerfarmsSpecGenerator returns a generator of Serverfarms_Spec instances for property testing.
// We first initialize serverfarmsSpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerfarmsSpecGenerator() gopter.Gen {
	if serverfarmsSpecGenerator != nil {
		return serverfarmsSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarmsSpec(generators)
	serverfarmsSpecGenerator = gen.Struct(reflect.TypeOf(Serverfarms_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarmsSpec(generators)
	AddRelatedPropertyGeneratorsForServerfarmsSpec(generators)
	serverfarmsSpecGenerator = gen.Struct(reflect.TypeOf(Serverfarms_Spec{}), generators)

	return serverfarmsSpecGenerator
}

// AddIndependentPropertyGeneratorsForServerfarmsSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerfarmsSpec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["ElasticScaleEnabled"] = gen.PtrOf(gen.Bool())
	gens["FreeOfferExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["HyperV"] = gen.PtrOf(gen.Bool())
	gens["IsSpot"] = gen.PtrOf(gen.Bool())
	gens["IsXenon"] = gen.PtrOf(gen.Bool())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["MaximumElasticWorkerCount"] = gen.PtrOf(gen.Int())
	gens["PerSiteScaling"] = gen.PtrOf(gen.Bool())
	gens["Reserved"] = gen.PtrOf(gen.Bool())
	gens["SpotExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["TargetWorkerCount"] = gen.PtrOf(gen.Int())
	gens["TargetWorkerSizeId"] = gen.PtrOf(gen.Int())
	gens["WorkerTierName"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForServerfarmsSpec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerfarmsSpec(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationGenerator())
	gens["HostingEnvironmentProfile"] = gen.PtrOf(HostingEnvironmentProfileGenerator())
	gens["KubeEnvironmentProfile"] = gen.PtrOf(KubeEnvironmentProfileGenerator())
	gens["Sku"] = gen.PtrOf(SkuDescriptionGenerator())
}

func Test_ExtendedLocation_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ExtendedLocation to ExtendedLocation via AssignPropertiesToExtendedLocation & AssignPropertiesFromExtendedLocation returns original",
		prop.ForAll(RunPropertyAssignmentTestForExtendedLocation, ExtendedLocationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForExtendedLocation tests if a specific instance of ExtendedLocation can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForExtendedLocation(subject ExtendedLocation) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.ExtendedLocation
	err := copied.AssignPropertiesToExtendedLocation(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ExtendedLocation
	err = actual.AssignPropertiesFromExtendedLocation(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ExtendedLocation_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocation, ExtendedLocationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocation runs a test to see if a specific instance of ExtendedLocation round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocation(subject ExtendedLocation) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation instances for property testing - lazily instantiated by ExtendedLocationGenerator()
var extendedLocationGenerator gopter.Gen

// ExtendedLocationGenerator returns a generator of ExtendedLocation instances for property testing.
func ExtendedLocationGenerator() gopter.Gen {
	if extendedLocationGenerator != nil {
		return extendedLocationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocation(generators)
	extendedLocationGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation{}), generators)

	return extendedLocationGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocation is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocation(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_ExtendedLocation_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ExtendedLocation_STATUS to ExtendedLocation_STATUS via AssignPropertiesToExtendedLocationSTATUS & AssignPropertiesFromExtendedLocationSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForExtendedLocationSTATUS, ExtendedLocationSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForExtendedLocationSTATUS tests if a specific instance of ExtendedLocation_STATUS can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForExtendedLocationSTATUS(subject ExtendedLocation_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.ExtendedLocation_STATUS
	err := copied.AssignPropertiesToExtendedLocationSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ExtendedLocation_STATUS
	err = actual.AssignPropertiesFromExtendedLocationSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ExtendedLocation_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocation_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationSTATUS, ExtendedLocationSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationSTATUS runs a test to see if a specific instance of ExtendedLocation_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationSTATUS(subject ExtendedLocation_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocation_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocation_STATUS instances for property testing - lazily instantiated by
// ExtendedLocationSTATUSGenerator()
var extendedLocationSTATUSGenerator gopter.Gen

// ExtendedLocationSTATUSGenerator returns a generator of ExtendedLocation_STATUS instances for property testing.
func ExtendedLocationSTATUSGenerator() gopter.Gen {
	if extendedLocationSTATUSGenerator != nil {
		return extendedLocationSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationSTATUS(generators)
	extendedLocationSTATUSGenerator = gen.Struct(reflect.TypeOf(ExtendedLocation_STATUS{}), generators)

	return extendedLocationSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationSTATUS(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_HostingEnvironmentProfile_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HostingEnvironmentProfile to HostingEnvironmentProfile via AssignPropertiesToHostingEnvironmentProfile & AssignPropertiesFromHostingEnvironmentProfile returns original",
		prop.ForAll(RunPropertyAssignmentTestForHostingEnvironmentProfile, HostingEnvironmentProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHostingEnvironmentProfile tests if a specific instance of HostingEnvironmentProfile can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForHostingEnvironmentProfile(subject HostingEnvironmentProfile) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.HostingEnvironmentProfile
	err := copied.AssignPropertiesToHostingEnvironmentProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HostingEnvironmentProfile
	err = actual.AssignPropertiesFromHostingEnvironmentProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HostingEnvironmentProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostingEnvironmentProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostingEnvironmentProfile, HostingEnvironmentProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostingEnvironmentProfile runs a test to see if a specific instance of HostingEnvironmentProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForHostingEnvironmentProfile(subject HostingEnvironmentProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostingEnvironmentProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostingEnvironmentProfile instances for property testing - lazily instantiated by
// HostingEnvironmentProfileGenerator()
var hostingEnvironmentProfileGenerator gopter.Gen

// HostingEnvironmentProfileGenerator returns a generator of HostingEnvironmentProfile instances for property testing.
func HostingEnvironmentProfileGenerator() gopter.Gen {
	if hostingEnvironmentProfileGenerator != nil {
		return hostingEnvironmentProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	hostingEnvironmentProfileGenerator = gen.Struct(reflect.TypeOf(HostingEnvironmentProfile{}), generators)

	return hostingEnvironmentProfileGenerator
}

func Test_HostingEnvironmentProfile_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HostingEnvironmentProfile_STATUS to HostingEnvironmentProfile_STATUS via AssignPropertiesToHostingEnvironmentProfileSTATUS & AssignPropertiesFromHostingEnvironmentProfileSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForHostingEnvironmentProfileSTATUS, HostingEnvironmentProfileSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHostingEnvironmentProfileSTATUS tests if a specific instance of HostingEnvironmentProfile_STATUS can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForHostingEnvironmentProfileSTATUS(subject HostingEnvironmentProfile_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.HostingEnvironmentProfile_STATUS
	err := copied.AssignPropertiesToHostingEnvironmentProfileSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HostingEnvironmentProfile_STATUS
	err = actual.AssignPropertiesFromHostingEnvironmentProfileSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HostingEnvironmentProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostingEnvironmentProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostingEnvironmentProfileSTATUS, HostingEnvironmentProfileSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostingEnvironmentProfileSTATUS runs a test to see if a specific instance of HostingEnvironmentProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForHostingEnvironmentProfileSTATUS(subject HostingEnvironmentProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostingEnvironmentProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostingEnvironmentProfile_STATUS instances for property testing - lazily instantiated by
// HostingEnvironmentProfileSTATUSGenerator()
var hostingEnvironmentProfileSTATUSGenerator gopter.Gen

// HostingEnvironmentProfileSTATUSGenerator returns a generator of HostingEnvironmentProfile_STATUS instances for property testing.
func HostingEnvironmentProfileSTATUSGenerator() gopter.Gen {
	if hostingEnvironmentProfileSTATUSGenerator != nil {
		return hostingEnvironmentProfileSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostingEnvironmentProfileSTATUS(generators)
	hostingEnvironmentProfileSTATUSGenerator = gen.Struct(reflect.TypeOf(HostingEnvironmentProfile_STATUS{}), generators)

	return hostingEnvironmentProfileSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForHostingEnvironmentProfileSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHostingEnvironmentProfileSTATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeEnvironmentProfile_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from KubeEnvironmentProfile to KubeEnvironmentProfile via AssignPropertiesToKubeEnvironmentProfile & AssignPropertiesFromKubeEnvironmentProfile returns original",
		prop.ForAll(RunPropertyAssignmentTestForKubeEnvironmentProfile, KubeEnvironmentProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForKubeEnvironmentProfile tests if a specific instance of KubeEnvironmentProfile can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForKubeEnvironmentProfile(subject KubeEnvironmentProfile) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.KubeEnvironmentProfile
	err := copied.AssignPropertiesToKubeEnvironmentProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual KubeEnvironmentProfile
	err = actual.AssignPropertiesFromKubeEnvironmentProfile(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_KubeEnvironmentProfile_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeEnvironmentProfile via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeEnvironmentProfile, KubeEnvironmentProfileGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeEnvironmentProfile runs a test to see if a specific instance of KubeEnvironmentProfile round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeEnvironmentProfile(subject KubeEnvironmentProfile) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeEnvironmentProfile
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeEnvironmentProfile instances for property testing - lazily instantiated by
// KubeEnvironmentProfileGenerator()
var kubeEnvironmentProfileGenerator gopter.Gen

// KubeEnvironmentProfileGenerator returns a generator of KubeEnvironmentProfile instances for property testing.
func KubeEnvironmentProfileGenerator() gopter.Gen {
	if kubeEnvironmentProfileGenerator != nil {
		return kubeEnvironmentProfileGenerator
	}

	generators := make(map[string]gopter.Gen)
	kubeEnvironmentProfileGenerator = gen.Struct(reflect.TypeOf(KubeEnvironmentProfile{}), generators)

	return kubeEnvironmentProfileGenerator
}

func Test_KubeEnvironmentProfile_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from KubeEnvironmentProfile_STATUS to KubeEnvironmentProfile_STATUS via AssignPropertiesToKubeEnvironmentProfileSTATUS & AssignPropertiesFromKubeEnvironmentProfileSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForKubeEnvironmentProfileSTATUS, KubeEnvironmentProfileSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForKubeEnvironmentProfileSTATUS tests if a specific instance of KubeEnvironmentProfile_STATUS can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForKubeEnvironmentProfileSTATUS(subject KubeEnvironmentProfile_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.KubeEnvironmentProfile_STATUS
	err := copied.AssignPropertiesToKubeEnvironmentProfileSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual KubeEnvironmentProfile_STATUS
	err = actual.AssignPropertiesFromKubeEnvironmentProfileSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_KubeEnvironmentProfile_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeEnvironmentProfile_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeEnvironmentProfileSTATUS, KubeEnvironmentProfileSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeEnvironmentProfileSTATUS runs a test to see if a specific instance of KubeEnvironmentProfile_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeEnvironmentProfileSTATUS(subject KubeEnvironmentProfile_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeEnvironmentProfile_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeEnvironmentProfile_STATUS instances for property testing - lazily instantiated by
// KubeEnvironmentProfileSTATUSGenerator()
var kubeEnvironmentProfileSTATUSGenerator gopter.Gen

// KubeEnvironmentProfileSTATUSGenerator returns a generator of KubeEnvironmentProfile_STATUS instances for property testing.
func KubeEnvironmentProfileSTATUSGenerator() gopter.Gen {
	if kubeEnvironmentProfileSTATUSGenerator != nil {
		return kubeEnvironmentProfileSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeEnvironmentProfileSTATUS(generators)
	kubeEnvironmentProfileSTATUSGenerator = gen.Struct(reflect.TypeOf(KubeEnvironmentProfile_STATUS{}), generators)

	return kubeEnvironmentProfileSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForKubeEnvironmentProfileSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeEnvironmentProfileSTATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuDescription_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SkuDescription to SkuDescription via AssignPropertiesToSkuDescription & AssignPropertiesFromSkuDescription returns original",
		prop.ForAll(RunPropertyAssignmentTestForSkuDescription, SkuDescriptionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSkuDescription tests if a specific instance of SkuDescription can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForSkuDescription(subject SkuDescription) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.SkuDescription
	err := copied.AssignPropertiesToSkuDescription(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SkuDescription
	err = actual.AssignPropertiesFromSkuDescription(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SkuDescription_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuDescription via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuDescription, SkuDescriptionGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuDescription runs a test to see if a specific instance of SkuDescription round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuDescription(subject SkuDescription) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuDescription
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuDescription instances for property testing - lazily instantiated by SkuDescriptionGenerator()
var skuDescriptionGenerator gopter.Gen

// SkuDescriptionGenerator returns a generator of SkuDescription instances for property testing.
// We first initialize skuDescriptionGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SkuDescriptionGenerator() gopter.Gen {
	if skuDescriptionGenerator != nil {
		return skuDescriptionGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescription(generators)
	skuDescriptionGenerator = gen.Struct(reflect.TypeOf(SkuDescription{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescription(generators)
	AddRelatedPropertyGeneratorsForSkuDescription(generators)
	skuDescriptionGenerator = gen.Struct(reflect.TypeOf(SkuDescription{}), generators)

	return skuDescriptionGenerator
}

// AddIndependentPropertyGeneratorsForSkuDescription is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuDescription(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSkuDescription is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSkuDescription(gens map[string]gopter.Gen) {
	gens["Capabilities"] = gen.SliceOf(CapabilityGenerator())
	gens["SkuCapacity"] = gen.PtrOf(SkuCapacityGenerator())
}

func Test_SkuDescription_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SkuDescription_STATUS to SkuDescription_STATUS via AssignPropertiesToSkuDescriptionSTATUS & AssignPropertiesFromSkuDescriptionSTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForSkuDescriptionSTATUS, SkuDescriptionSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSkuDescriptionSTATUS tests if a specific instance of SkuDescription_STATUS can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForSkuDescriptionSTATUS(subject SkuDescription_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.SkuDescription_STATUS
	err := copied.AssignPropertiesToSkuDescriptionSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SkuDescription_STATUS
	err = actual.AssignPropertiesFromSkuDescriptionSTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SkuDescription_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuDescription_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuDescriptionSTATUS, SkuDescriptionSTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuDescriptionSTATUS runs a test to see if a specific instance of SkuDescription_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuDescriptionSTATUS(subject SkuDescription_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuDescription_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuDescription_STATUS instances for property testing - lazily instantiated by
// SkuDescriptionSTATUSGenerator()
var skuDescriptionSTATUSGenerator gopter.Gen

// SkuDescriptionSTATUSGenerator returns a generator of SkuDescription_STATUS instances for property testing.
// We first initialize skuDescriptionSTATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SkuDescriptionSTATUSGenerator() gopter.Gen {
	if skuDescriptionSTATUSGenerator != nil {
		return skuDescriptionSTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescriptionSTATUS(generators)
	skuDescriptionSTATUSGenerator = gen.Struct(reflect.TypeOf(SkuDescription_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescriptionSTATUS(generators)
	AddRelatedPropertyGeneratorsForSkuDescriptionSTATUS(generators)
	skuDescriptionSTATUSGenerator = gen.Struct(reflect.TypeOf(SkuDescription_STATUS{}), generators)

	return skuDescriptionSTATUSGenerator
}

// AddIndependentPropertyGeneratorsForSkuDescriptionSTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuDescriptionSTATUS(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSkuDescriptionSTATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSkuDescriptionSTATUS(gens map[string]gopter.Gen) {
	gens["Capabilities"] = gen.SliceOf(CapabilitySTATUSGenerator())
	gens["SkuCapacity"] = gen.PtrOf(SkuCapacitySTATUSGenerator())
}

func Test_Capability_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Capability to Capability via AssignPropertiesToCapability & AssignPropertiesFromCapability returns original",
		prop.ForAll(RunPropertyAssignmentTestForCapability, CapabilityGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCapability tests if a specific instance of Capability can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForCapability(subject Capability) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.Capability
	err := copied.AssignPropertiesToCapability(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Capability
	err = actual.AssignPropertiesFromCapability(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Capability_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapability, CapabilityGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapability runs a test to see if a specific instance of Capability round trips to JSON and back losslessly
func RunJSONSerializationTestForCapability(subject Capability) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability instances for property testing - lazily instantiated by CapabilityGenerator()
var capabilityGenerator gopter.Gen

// CapabilityGenerator returns a generator of Capability instances for property testing.
func CapabilityGenerator() gopter.Gen {
	if capabilityGenerator != nil {
		return capabilityGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapability(generators)
	capabilityGenerator = gen.Struct(reflect.TypeOf(Capability{}), generators)

	return capabilityGenerator
}

// AddIndependentPropertyGeneratorsForCapability is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapability(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Reason"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_Capability_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Capability_STATUS to Capability_STATUS via AssignPropertiesToCapabilitySTATUS & AssignPropertiesFromCapabilitySTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForCapabilitySTATUS, CapabilitySTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForCapabilitySTATUS tests if a specific instance of Capability_STATUS can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForCapabilitySTATUS(subject Capability_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.Capability_STATUS
	err := copied.AssignPropertiesToCapabilitySTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Capability_STATUS
	err = actual.AssignPropertiesFromCapabilitySTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Capability_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Capability_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapabilitySTATUS, CapabilitySTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapabilitySTATUS runs a test to see if a specific instance of Capability_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForCapabilitySTATUS(subject Capability_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Capability_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Capability_STATUS instances for property testing - lazily instantiated by CapabilitySTATUSGenerator()
var capabilitySTATUSGenerator gopter.Gen

// CapabilitySTATUSGenerator returns a generator of Capability_STATUS instances for property testing.
func CapabilitySTATUSGenerator() gopter.Gen {
	if capabilitySTATUSGenerator != nil {
		return capabilitySTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapabilitySTATUS(generators)
	capabilitySTATUSGenerator = gen.Struct(reflect.TypeOf(Capability_STATUS{}), generators)

	return capabilitySTATUSGenerator
}

// AddIndependentPropertyGeneratorsForCapabilitySTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapabilitySTATUS(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Reason"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuCapacity_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SkuCapacity to SkuCapacity via AssignPropertiesToSkuCapacity & AssignPropertiesFromSkuCapacity returns original",
		prop.ForAll(RunPropertyAssignmentTestForSkuCapacity, SkuCapacityGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSkuCapacity tests if a specific instance of SkuCapacity can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForSkuCapacity(subject SkuCapacity) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.SkuCapacity
	err := copied.AssignPropertiesToSkuCapacity(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SkuCapacity
	err = actual.AssignPropertiesFromSkuCapacity(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SkuCapacity_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuCapacity via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuCapacity, SkuCapacityGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuCapacity runs a test to see if a specific instance of SkuCapacity round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuCapacity(subject SkuCapacity) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuCapacity
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuCapacity instances for property testing - lazily instantiated by SkuCapacityGenerator()
var skuCapacityGenerator gopter.Gen

// SkuCapacityGenerator returns a generator of SkuCapacity instances for property testing.
func SkuCapacityGenerator() gopter.Gen {
	if skuCapacityGenerator != nil {
		return skuCapacityGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuCapacity(generators)
	skuCapacityGenerator = gen.Struct(reflect.TypeOf(SkuCapacity{}), generators)

	return skuCapacityGenerator
}

// AddIndependentPropertyGeneratorsForSkuCapacity is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuCapacity(gens map[string]gopter.Gen) {
	gens["Default"] = gen.PtrOf(gen.Int())
	gens["ElasticMaximum"] = gen.PtrOf(gen.Int())
	gens["Maximum"] = gen.PtrOf(gen.Int())
	gens["Minimum"] = gen.PtrOf(gen.Int())
	gens["ScaleType"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuCapacity_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SkuCapacity_STATUS to SkuCapacity_STATUS via AssignPropertiesToSkuCapacitySTATUS & AssignPropertiesFromSkuCapacitySTATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForSkuCapacitySTATUS, SkuCapacitySTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSkuCapacitySTATUS tests if a specific instance of SkuCapacity_STATUS can be assigned to v1beta20220301storage and back losslessly
func RunPropertyAssignmentTestForSkuCapacitySTATUS(subject SkuCapacity_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220301s.SkuCapacity_STATUS
	err := copied.AssignPropertiesToSkuCapacitySTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SkuCapacity_STATUS
	err = actual.AssignPropertiesFromSkuCapacitySTATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SkuCapacity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuCapacity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuCapacitySTATUS, SkuCapacitySTATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuCapacitySTATUS runs a test to see if a specific instance of SkuCapacity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuCapacitySTATUS(subject SkuCapacity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuCapacity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuCapacity_STATUS instances for property testing - lazily instantiated by SkuCapacitySTATUSGenerator()
var skuCapacitySTATUSGenerator gopter.Gen

// SkuCapacitySTATUSGenerator returns a generator of SkuCapacity_STATUS instances for property testing.
func SkuCapacitySTATUSGenerator() gopter.Gen {
	if skuCapacitySTATUSGenerator != nil {
		return skuCapacitySTATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuCapacitySTATUS(generators)
	skuCapacitySTATUSGenerator = gen.Struct(reflect.TypeOf(SkuCapacity_STATUS{}), generators)

	return skuCapacitySTATUSGenerator
}

// AddIndependentPropertyGeneratorsForSkuCapacitySTATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuCapacitySTATUS(gens map[string]gopter.Gen) {
	gens["Default"] = gen.PtrOf(gen.Int())
	gens["ElasticMaximum"] = gen.PtrOf(gen.Int())
	gens["Maximum"] = gen.PtrOf(gen.Int())
	gens["Minimum"] = gen.PtrOf(gen.Int())
	gens["ScaleType"] = gen.PtrOf(gen.AlphaString())
}
