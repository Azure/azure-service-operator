// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20220301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Serverfarms_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Serverfarms_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerfarms_SpecARM, Serverfarms_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerfarms_SpecARM runs a test to see if a specific instance of Serverfarms_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerfarms_SpecARM(subject Serverfarms_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Serverfarms_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Serverfarms_SpecARM instances for property testing - lazily instantiated by
// Serverfarms_SpecARMGenerator()
var serverfarms_SpecARMGenerator gopter.Gen

// Serverfarms_SpecARMGenerator returns a generator of Serverfarms_SpecARM instances for property testing.
// We first initialize serverfarms_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Serverfarms_SpecARMGenerator() gopter.Gen {
	if serverfarms_SpecARMGenerator != nil {
		return serverfarms_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarms_SpecARM(generators)
	serverfarms_SpecARMGenerator = gen.Struct(reflect.TypeOf(Serverfarms_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerfarms_SpecARM(generators)
	AddRelatedPropertyGeneratorsForServerfarms_SpecARM(generators)
	serverfarms_SpecARMGenerator = gen.Struct(reflect.TypeOf(Serverfarms_SpecARM{}), generators)

	return serverfarms_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForServerfarms_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerfarms_SpecARM(gens map[string]gopter.Gen) {
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServerfarms_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerfarms_SpecARM(gens map[string]gopter.Gen) {
	gens["ExtendedLocation"] = gen.PtrOf(ExtendedLocationARMGenerator())
	gens["Properties"] = gen.PtrOf(AppServicePlanPropertiesARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuDescriptionARMGenerator())
}

func Test_AppServicePlanPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AppServicePlanPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAppServicePlanPropertiesARM, AppServicePlanPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAppServicePlanPropertiesARM runs a test to see if a specific instance of AppServicePlanPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAppServicePlanPropertiesARM(subject AppServicePlanPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AppServicePlanPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AppServicePlanPropertiesARM instances for property testing - lazily instantiated by
// AppServicePlanPropertiesARMGenerator()
var appServicePlanPropertiesARMGenerator gopter.Gen

// AppServicePlanPropertiesARMGenerator returns a generator of AppServicePlanPropertiesARM instances for property testing.
// We first initialize appServicePlanPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AppServicePlanPropertiesARMGenerator() gopter.Gen {
	if appServicePlanPropertiesARMGenerator != nil {
		return appServicePlanPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanPropertiesARM(generators)
	appServicePlanPropertiesARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlanPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAppServicePlanPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForAppServicePlanPropertiesARM(generators)
	appServicePlanPropertiesARMGenerator = gen.Struct(reflect.TypeOf(AppServicePlanPropertiesARM{}), generators)

	return appServicePlanPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForAppServicePlanPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAppServicePlanPropertiesARM(gens map[string]gopter.Gen) {
	gens["ElasticScaleEnabled"] = gen.PtrOf(gen.Bool())
	gens["FreeOfferExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["HyperV"] = gen.PtrOf(gen.Bool())
	gens["IsSpot"] = gen.PtrOf(gen.Bool())
	gens["IsXenon"] = gen.PtrOf(gen.Bool())
	gens["MaximumElasticWorkerCount"] = gen.PtrOf(gen.Int())
	gens["PerSiteScaling"] = gen.PtrOf(gen.Bool())
	gens["Reserved"] = gen.PtrOf(gen.Bool())
	gens["SpotExpirationTime"] = gen.PtrOf(gen.AlphaString())
	gens["TargetWorkerCount"] = gen.PtrOf(gen.Int())
	gens["TargetWorkerSizeId"] = gen.PtrOf(gen.Int())
	gens["WorkerTierName"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForAppServicePlanPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAppServicePlanPropertiesARM(gens map[string]gopter.Gen) {
	gens["HostingEnvironmentProfile"] = gen.PtrOf(HostingEnvironmentProfileARMGenerator())
	gens["KubeEnvironmentProfile"] = gen.PtrOf(KubeEnvironmentProfileARMGenerator())
}

func Test_ExtendedLocationARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ExtendedLocationARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtendedLocationARM, ExtendedLocationARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtendedLocationARM runs a test to see if a specific instance of ExtendedLocationARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtendedLocationARM(subject ExtendedLocationARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ExtendedLocationARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ExtendedLocationARM instances for property testing - lazily instantiated by
// ExtendedLocationARMGenerator()
var extendedLocationARMGenerator gopter.Gen

// ExtendedLocationARMGenerator returns a generator of ExtendedLocationARM instances for property testing.
func ExtendedLocationARMGenerator() gopter.Gen {
	if extendedLocationARMGenerator != nil {
		return extendedLocationARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtendedLocationARM(generators)
	extendedLocationARMGenerator = gen.Struct(reflect.TypeOf(ExtendedLocationARM{}), generators)

	return extendedLocationARMGenerator
}

// AddIndependentPropertyGeneratorsForExtendedLocationARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtendedLocationARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuDescriptionARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuDescriptionARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuDescriptionARM, SkuDescriptionARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuDescriptionARM runs a test to see if a specific instance of SkuDescriptionARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuDescriptionARM(subject SkuDescriptionARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuDescriptionARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuDescriptionARM instances for property testing - lazily instantiated by SkuDescriptionARMGenerator()
var skuDescriptionARMGenerator gopter.Gen

// SkuDescriptionARMGenerator returns a generator of SkuDescriptionARM instances for property testing.
// We first initialize skuDescriptionARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SkuDescriptionARMGenerator() gopter.Gen {
	if skuDescriptionARMGenerator != nil {
		return skuDescriptionARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescriptionARM(generators)
	skuDescriptionARMGenerator = gen.Struct(reflect.TypeOf(SkuDescriptionARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuDescriptionARM(generators)
	AddRelatedPropertyGeneratorsForSkuDescriptionARM(generators)
	skuDescriptionARMGenerator = gen.Struct(reflect.TypeOf(SkuDescriptionARM{}), generators)

	return skuDescriptionARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuDescriptionARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuDescriptionARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Locations"] = gen.SliceOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSkuDescriptionARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSkuDescriptionARM(gens map[string]gopter.Gen) {
	gens["Capabilities"] = gen.SliceOf(CapabilityARMGenerator())
	gens["SkuCapacity"] = gen.PtrOf(SkuCapacityARMGenerator())
}

func Test_CapabilityARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CapabilityARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCapabilityARM, CapabilityARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCapabilityARM runs a test to see if a specific instance of CapabilityARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCapabilityARM(subject CapabilityARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CapabilityARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CapabilityARM instances for property testing - lazily instantiated by CapabilityARMGenerator()
var capabilityARMGenerator gopter.Gen

// CapabilityARMGenerator returns a generator of CapabilityARM instances for property testing.
func CapabilityARMGenerator() gopter.Gen {
	if capabilityARMGenerator != nil {
		return capabilityARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCapabilityARM(generators)
	capabilityARMGenerator = gen.Struct(reflect.TypeOf(CapabilityARM{}), generators)

	return capabilityARMGenerator
}

// AddIndependentPropertyGeneratorsForCapabilityARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCapabilityARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Reason"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_HostingEnvironmentProfileARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostingEnvironmentProfileARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostingEnvironmentProfileARM, HostingEnvironmentProfileARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostingEnvironmentProfileARM runs a test to see if a specific instance of HostingEnvironmentProfileARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHostingEnvironmentProfileARM(subject HostingEnvironmentProfileARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostingEnvironmentProfileARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostingEnvironmentProfileARM instances for property testing - lazily instantiated by
// HostingEnvironmentProfileARMGenerator()
var hostingEnvironmentProfileARMGenerator gopter.Gen

// HostingEnvironmentProfileARMGenerator returns a generator of HostingEnvironmentProfileARM instances for property testing.
func HostingEnvironmentProfileARMGenerator() gopter.Gen {
	if hostingEnvironmentProfileARMGenerator != nil {
		return hostingEnvironmentProfileARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostingEnvironmentProfileARM(generators)
	hostingEnvironmentProfileARMGenerator = gen.Struct(reflect.TypeOf(HostingEnvironmentProfileARM{}), generators)

	return hostingEnvironmentProfileARMGenerator
}

// AddIndependentPropertyGeneratorsForHostingEnvironmentProfileARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHostingEnvironmentProfileARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_KubeEnvironmentProfileARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KubeEnvironmentProfileARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKubeEnvironmentProfileARM, KubeEnvironmentProfileARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKubeEnvironmentProfileARM runs a test to see if a specific instance of KubeEnvironmentProfileARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKubeEnvironmentProfileARM(subject KubeEnvironmentProfileARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KubeEnvironmentProfileARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KubeEnvironmentProfileARM instances for property testing - lazily instantiated by
// KubeEnvironmentProfileARMGenerator()
var kubeEnvironmentProfileARMGenerator gopter.Gen

// KubeEnvironmentProfileARMGenerator returns a generator of KubeEnvironmentProfileARM instances for property testing.
func KubeEnvironmentProfileARMGenerator() gopter.Gen {
	if kubeEnvironmentProfileARMGenerator != nil {
		return kubeEnvironmentProfileARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKubeEnvironmentProfileARM(generators)
	kubeEnvironmentProfileARMGenerator = gen.Struct(reflect.TypeOf(KubeEnvironmentProfileARM{}), generators)

	return kubeEnvironmentProfileARMGenerator
}

// AddIndependentPropertyGeneratorsForKubeEnvironmentProfileARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKubeEnvironmentProfileARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_SkuCapacityARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuCapacityARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuCapacityARM, SkuCapacityARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuCapacityARM runs a test to see if a specific instance of SkuCapacityARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuCapacityARM(subject SkuCapacityARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuCapacityARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuCapacityARM instances for property testing - lazily instantiated by SkuCapacityARMGenerator()
var skuCapacityARMGenerator gopter.Gen

// SkuCapacityARMGenerator returns a generator of SkuCapacityARM instances for property testing.
func SkuCapacityARMGenerator() gopter.Gen {
	if skuCapacityARMGenerator != nil {
		return skuCapacityARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuCapacityARM(generators)
	skuCapacityARMGenerator = gen.Struct(reflect.TypeOf(SkuCapacityARM{}), generators)

	return skuCapacityARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuCapacityARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuCapacityARM(gens map[string]gopter.Gen) {
	gens["Default"] = gen.PtrOf(gen.Int())
	gens["ElasticMaximum"] = gen.PtrOf(gen.Int())
	gens["Maximum"] = gen.PtrOf(gen.Int())
	gens["Minimum"] = gen.PtrOf(gen.Int())
	gens["ScaleType"] = gen.PtrOf(gen.AlphaString())
}
