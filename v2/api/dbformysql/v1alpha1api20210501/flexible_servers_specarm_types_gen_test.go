// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FlexibleServers_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServers_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServers_SPECARM, FlexibleServers_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServers_SPECARM runs a test to see if a specific instance of FlexibleServers_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServers_SPECARM(subject FlexibleServers_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServers_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServers_SPECARM instances for property testing - lazily instantiated by
//FlexibleServers_SPECARMGenerator()
var flexibleServers_specarmGenerator gopter.Gen

// FlexibleServers_SPECARMGenerator returns a generator of FlexibleServers_SPECARM instances for property testing.
// We first initialize flexibleServers_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlexibleServers_SPECARMGenerator() gopter.Gen {
	if flexibleServers_specarmGenerator != nil {
		return flexibleServers_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServers_SPECARM(generators)
	flexibleServers_specarmGenerator = gen.Struct(reflect.TypeOf(FlexibleServers_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServers_SPECARM(generators)
	AddRelatedPropertyGeneratorsForFlexibleServers_SPECARM(generators)
	flexibleServers_specarmGenerator = gen.Struct(reflect.TypeOf(FlexibleServers_SPECARM{}), generators)

	return flexibleServers_specarmGenerator
}

// AddIndependentPropertyGeneratorsForFlexibleServers_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlexibleServers_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFlexibleServers_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServers_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerProperties_SpecARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_SpecARMGenerator())
}

func Test_ServerProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerProperties_SpecARM, ServerProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerProperties_SpecARM runs a test to see if a specific instance of ServerProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerProperties_SpecARM(subject ServerProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerProperties_SpecARM instances for property testing - lazily instantiated by
//ServerProperties_SpecARMGenerator()
var serverProperties_specARMGenerator gopter.Gen

// ServerProperties_SpecARMGenerator returns a generator of ServerProperties_SpecARM instances for property testing.
// We first initialize serverProperties_specARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerProperties_SpecARMGenerator() gopter.Gen {
	if serverProperties_specARMGenerator != nil {
		return serverProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerProperties_SpecARM(generators)
	serverProperties_specARMGenerator = gen.Struct(reflect.TypeOf(ServerProperties_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerProperties_SpecARM(generators)
	AddRelatedPropertyGeneratorsForServerProperties_SpecARM(generators)
	serverProperties_specARMGenerator = gen.Struct(reflect.TypeOf(ServerProperties_SpecARM{}), generators)

	return serverProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForServerProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["AdministratorLogin"] = gen.PtrOf(gen.AlphaString())
	gens["AdministratorLoginPassword"] = gen.PtrOf(gen.AlphaString())
	gens["AvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		ServerProperties_CreateMode_SpecDefault,
		ServerProperties_CreateMode_SpecGeoRestore,
		ServerProperties_CreateMode_SpecPointInTimeRestore,
		ServerProperties_CreateMode_SpecReplica))
	gens["ReplicationRole"] = gen.PtrOf(gen.OneConstOf(ReplicationRole_SpecNone, ReplicationRole_SpecReplica, ReplicationRole_SpecSource))
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["SourceServerResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerVersion_Spec57, ServerVersion_Spec8021))
}

// AddRelatedPropertyGeneratorsForServerProperties_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Backup"] = gen.PtrOf(Backup_SpecARMGenerator())
	gens["HighAvailability"] = gen.PtrOf(HighAvailability_SpecARMGenerator())
	gens["MaintenanceWindow"] = gen.PtrOf(MaintenanceWindow_SpecARMGenerator())
	gens["Network"] = gen.PtrOf(Network_SpecARMGenerator())
	gens["Storage"] = gen.PtrOf(Storage_SpecARMGenerator())
}

func Test_Sku_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_SpecARM, Sku_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_SpecARM runs a test to see if a specific instance of Sku_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_SpecARM(subject Sku_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_SpecARM instances for property testing - lazily instantiated by Sku_SpecARMGenerator()
var sku_specARMGenerator gopter.Gen

// Sku_SpecARMGenerator returns a generator of Sku_SpecARM instances for property testing.
func Sku_SpecARMGenerator() gopter.Gen {
	if sku_specARMGenerator != nil {
		return sku_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_SpecARM(generators)
	sku_specARMGenerator = gen.Struct(reflect.TypeOf(Sku_SpecARM{}), generators)

	return sku_specARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_SpecARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
	gens["Tier"] = gen.OneConstOf(Sku_Tier_SpecBurstable, Sku_Tier_SpecGeneralPurpose, Sku_Tier_SpecMemoryOptimized)
}

func Test_Backup_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Backup_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackup_SpecARM, Backup_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackup_SpecARM runs a test to see if a specific instance of Backup_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackup_SpecARM(subject Backup_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Backup_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Backup_SpecARM instances for property testing - lazily instantiated by Backup_SpecARMGenerator()
var backup_specARMGenerator gopter.Gen

// Backup_SpecARMGenerator returns a generator of Backup_SpecARM instances for property testing.
func Backup_SpecARMGenerator() gopter.Gen {
	if backup_specARMGenerator != nil {
		return backup_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackup_SpecARM(generators)
	backup_specARMGenerator = gen.Struct(reflect.TypeOf(Backup_SpecARM{}), generators)

	return backup_specARMGenerator
}

// AddIndependentPropertyGeneratorsForBackup_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackup_SpecARM(gens map[string]gopter.Gen) {
	gens["BackupRetentionDays"] = gen.PtrOf(gen.Int())
	gens["GeoRedundantBackup"] = gen.PtrOf(gen.OneConstOf(EnableStatusEnum_SpecDisabled, EnableStatusEnum_SpecEnabled))
}

func Test_HighAvailability_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HighAvailability_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHighAvailability_SpecARM, HighAvailability_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHighAvailability_SpecARM runs a test to see if a specific instance of HighAvailability_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHighAvailability_SpecARM(subject HighAvailability_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HighAvailability_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HighAvailability_SpecARM instances for property testing - lazily instantiated by
//HighAvailability_SpecARMGenerator()
var highAvailability_specARMGenerator gopter.Gen

// HighAvailability_SpecARMGenerator returns a generator of HighAvailability_SpecARM instances for property testing.
func HighAvailability_SpecARMGenerator() gopter.Gen {
	if highAvailability_specARMGenerator != nil {
		return highAvailability_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHighAvailability_SpecARM(generators)
	highAvailability_specARMGenerator = gen.Struct(reflect.TypeOf(HighAvailability_SpecARM{}), generators)

	return highAvailability_specARMGenerator
}

// AddIndependentPropertyGeneratorsForHighAvailability_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHighAvailability_SpecARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(HighAvailability_Mode_SpecDisabled, HighAvailability_Mode_SpecSameZone, HighAvailability_Mode_SpecZoneRedundant))
	gens["StandbyAvailabilityZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_MaintenanceWindow_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MaintenanceWindow_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMaintenanceWindow_SpecARM, MaintenanceWindow_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMaintenanceWindow_SpecARM runs a test to see if a specific instance of MaintenanceWindow_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMaintenanceWindow_SpecARM(subject MaintenanceWindow_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MaintenanceWindow_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MaintenanceWindow_SpecARM instances for property testing - lazily instantiated by
//MaintenanceWindow_SpecARMGenerator()
var maintenanceWindow_specARMGenerator gopter.Gen

// MaintenanceWindow_SpecARMGenerator returns a generator of MaintenanceWindow_SpecARM instances for property testing.
func MaintenanceWindow_SpecARMGenerator() gopter.Gen {
	if maintenanceWindow_specARMGenerator != nil {
		return maintenanceWindow_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMaintenanceWindow_SpecARM(generators)
	maintenanceWindow_specARMGenerator = gen.Struct(reflect.TypeOf(MaintenanceWindow_SpecARM{}), generators)

	return maintenanceWindow_specARMGenerator
}

// AddIndependentPropertyGeneratorsForMaintenanceWindow_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMaintenanceWindow_SpecARM(gens map[string]gopter.Gen) {
	gens["CustomWindow"] = gen.PtrOf(gen.AlphaString())
	gens["DayOfWeek"] = gen.PtrOf(gen.Int())
	gens["StartHour"] = gen.PtrOf(gen.Int())
	gens["StartMinute"] = gen.PtrOf(gen.Int())
}

func Test_Network_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Network_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetwork_SpecARM, Network_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetwork_SpecARM runs a test to see if a specific instance of Network_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetwork_SpecARM(subject Network_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Network_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Network_SpecARM instances for property testing - lazily instantiated by Network_SpecARMGenerator()
var network_specARMGenerator gopter.Gen

// Network_SpecARMGenerator returns a generator of Network_SpecARM instances for property testing.
func Network_SpecARMGenerator() gopter.Gen {
	if network_specARMGenerator != nil {
		return network_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetwork_SpecARM(generators)
	network_specARMGenerator = gen.Struct(reflect.TypeOf(Network_SpecARM{}), generators)

	return network_specARMGenerator
}

// AddIndependentPropertyGeneratorsForNetwork_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetwork_SpecARM(gens map[string]gopter.Gen) {
	gens["DelegatedSubnetResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateDnsZoneResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_Storage_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Storage_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorage_SpecARM, Storage_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorage_SpecARM runs a test to see if a specific instance of Storage_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorage_SpecARM(subject Storage_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Storage_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Storage_SpecARM instances for property testing - lazily instantiated by Storage_SpecARMGenerator()
var storage_specARMGenerator gopter.Gen

// Storage_SpecARMGenerator returns a generator of Storage_SpecARM instances for property testing.
func Storage_SpecARMGenerator() gopter.Gen {
	if storage_specARMGenerator != nil {
		return storage_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorage_SpecARM(generators)
	storage_specARMGenerator = gen.Struct(reflect.TypeOf(Storage_SpecARM{}), generators)

	return storage_specARMGenerator
}

// AddIndependentPropertyGeneratorsForStorage_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorage_SpecARM(gens map[string]gopter.Gen) {
	gens["AutoGrow"] = gen.PtrOf(gen.OneConstOf(EnableStatusEnum_SpecDisabled, EnableStatusEnum_SpecEnabled))
	gens["Iops"] = gen.PtrOf(gen.Int())
	gens["StorageSizeGB"] = gen.PtrOf(gen.Int())
}
