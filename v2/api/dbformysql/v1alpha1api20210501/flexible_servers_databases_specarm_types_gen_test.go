// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FlexibleServersDatabases_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServersDatabases_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServersDatabases_SPECARM, FlexibleServersDatabases_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServersDatabases_SPECARM runs a test to see if a specific instance of FlexibleServersDatabases_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServersDatabases_SPECARM(subject FlexibleServersDatabases_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServersDatabases_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServersDatabases_SPECARM instances for property testing - lazily instantiated by
//FlexibleServersDatabases_SPECARMGenerator()
var flexibleServersDatabases_specarmGenerator gopter.Gen

// FlexibleServersDatabases_SPECARMGenerator returns a generator of FlexibleServersDatabases_SPECARM instances for property testing.
// We first initialize flexibleServersDatabases_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlexibleServersDatabases_SPECARMGenerator() gopter.Gen {
	if flexibleServersDatabases_specarmGenerator != nil {
		return flexibleServersDatabases_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersDatabases_SPECARM(generators)
	flexibleServersDatabases_specarmGenerator = gen.Struct(reflect.TypeOf(FlexibleServersDatabases_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersDatabases_SPECARM(generators)
	AddRelatedPropertyGeneratorsForFlexibleServersDatabases_SPECARM(generators)
	flexibleServersDatabases_specarmGenerator = gen.Struct(reflect.TypeOf(FlexibleServersDatabases_SPECARM{}), generators)

	return flexibleServersDatabases_specarmGenerator
}

// AddIndependentPropertyGeneratorsForFlexibleServersDatabases_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlexibleServersDatabases_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForFlexibleServersDatabases_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServersDatabases_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DatabaseProperties_SpecARMGenerator())
}

func Test_DatabaseProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseProperties_SpecARM, DatabaseProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseProperties_SpecARM runs a test to see if a specific instance of DatabaseProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseProperties_SpecARM(subject DatabaseProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseProperties_SpecARM instances for property testing - lazily instantiated by
//DatabaseProperties_SpecARMGenerator()
var databaseProperties_specARMGenerator gopter.Gen

// DatabaseProperties_SpecARMGenerator returns a generator of DatabaseProperties_SpecARM instances for property testing.
func DatabaseProperties_SpecARMGenerator() gopter.Gen {
	if databaseProperties_specARMGenerator != nil {
		return databaseProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_SpecARM(generators)
	databaseProperties_specARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_SpecARM{}), generators)

	return databaseProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Charset"] = gen.PtrOf(gen.AlphaString())
	gens["Collation"] = gen.PtrOf(gen.AlphaString())
}
