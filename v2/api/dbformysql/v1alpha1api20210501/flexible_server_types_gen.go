// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"fmt"
	alpha20210501s "github.com/Azure/azure-service-operator/v2/api/dbformysql/v1alpha1api20210501storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of FlexibleServer. Use v1beta20210501.FlexibleServer instead
type FlexibleServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FlexibleServers_Spec `json:"spec,omitempty"`
	Status            Server_STATUS        `json:"status,omitempty"`
}

var _ conditions.Conditioner = &FlexibleServer{}

// GetConditions returns the conditions of the resource
func (server *FlexibleServer) GetConditions() conditions.Conditions {
	return server.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (server *FlexibleServer) SetConditions(conditions conditions.Conditions) {
	server.Status.Conditions = conditions
}

var _ conversion.Convertible = &FlexibleServer{}

// ConvertFrom populates our FlexibleServer from the provided hub FlexibleServer
func (server *FlexibleServer) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210501s.FlexibleServer

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = server.AssignPropertiesFromFlexibleServer(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to server")
	}

	return nil
}

// ConvertTo populates the provided hub FlexibleServer from our FlexibleServer
func (server *FlexibleServer) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210501s.FlexibleServer
	err := server.AssignPropertiesToFlexibleServer(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from server")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-dbformysql-azure-com-v1alpha1api20210501-flexibleserver,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=dbformysql.azure.com,resources=flexibleservers,verbs=create;update,versions=v1alpha1api20210501,name=default.v1alpha1api20210501.flexibleservers.dbformysql.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &FlexibleServer{}

// Default applies defaults to the FlexibleServer resource
func (server *FlexibleServer) Default() {
	server.defaultImpl()
	var temp interface{} = server
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (server *FlexibleServer) defaultAzureName() {
	if server.Spec.AzureName == "" {
		server.Spec.AzureName = server.Name
	}
}

// defaultImpl applies the code generated defaults to the FlexibleServer resource
func (server *FlexibleServer) defaultImpl() { server.defaultAzureName() }

var _ genruntime.KubernetesResource = &FlexibleServer{}

// AzureName returns the Azure name of the resource
func (server *FlexibleServer) AzureName() string {
	return server.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-01"
func (server FlexibleServer) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (server *FlexibleServer) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (server *FlexibleServer) GetSpec() genruntime.ConvertibleSpec {
	return &server.Spec
}

// GetStatus returns the status of this resource
func (server *FlexibleServer) GetStatus() genruntime.ConvertibleStatus {
	return &server.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DBforMySQL/flexibleServers"
func (server *FlexibleServer) GetType() string {
	return "Microsoft.DBforMySQL/flexibleServers"
}

// NewEmptyStatus returns a new empty (blank) status
func (server *FlexibleServer) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Server_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (server *FlexibleServer) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(server.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  server.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (server *FlexibleServer) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Server_STATUS); ok {
		server.Status = *st
		return nil
	}

	// Convert status to required version
	var st Server_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	server.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-dbformysql-azure-com-v1alpha1api20210501-flexibleserver,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=dbformysql.azure.com,resources=flexibleservers,verbs=create;update,versions=v1alpha1api20210501,name=validate.v1alpha1api20210501.flexibleservers.dbformysql.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &FlexibleServer{}

// ValidateCreate validates the creation of the resource
func (server *FlexibleServer) ValidateCreate() error {
	validations := server.createValidations()
	var temp interface{} = server
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (server *FlexibleServer) ValidateDelete() error {
	validations := server.deleteValidations()
	var temp interface{} = server
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (server *FlexibleServer) ValidateUpdate(old runtime.Object) error {
	validations := server.updateValidations()
	var temp interface{} = server
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (server *FlexibleServer) createValidations() []func() error {
	return []func() error{server.validateResourceReferences, server.validateSecretDestinations}
}

// deleteValidations validates the deletion of the resource
func (server *FlexibleServer) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (server *FlexibleServer) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return server.validateResourceReferences()
		},
		server.validateWriteOnceProperties,
		func(old runtime.Object) error {
			return server.validateSecretDestinations()
		},
	}
}

// validateResourceReferences validates all resource references
func (server *FlexibleServer) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&server.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (server *FlexibleServer) validateSecretDestinations() error {
	if server.Spec.OperatorSpec == nil {
		return nil
	}
	if server.Spec.OperatorSpec.Secrets == nil {
		return nil
	}
	secrets := []*genruntime.SecretDestination{
		server.Spec.OperatorSpec.Secrets.FullyQualifiedDomainName,
	}
	return genruntime.ValidateSecretDestinations(secrets)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (server *FlexibleServer) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*FlexibleServer)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, server)
}

// AssignPropertiesFromFlexibleServer populates our FlexibleServer from the provided source FlexibleServer
func (server *FlexibleServer) AssignPropertiesFromFlexibleServer(source *alpha20210501s.FlexibleServer) error {

	// ObjectMeta
	server.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FlexibleServers_Spec
	err := spec.AssignPropertiesFromFlexibleServersSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromFlexibleServersSpec() to populate field Spec")
	}
	server.Spec = spec

	// Status
	var status Server_STATUS
	err = status.AssignPropertiesFromServerSTATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromServerSTATUS() to populate field Status")
	}
	server.Status = status

	// No error
	return nil
}

// AssignPropertiesToFlexibleServer populates the provided destination FlexibleServer from our FlexibleServer
func (server *FlexibleServer) AssignPropertiesToFlexibleServer(destination *alpha20210501s.FlexibleServer) error {

	// ObjectMeta
	destination.ObjectMeta = *server.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210501s.FlexibleServers_Spec
	err := server.Spec.AssignPropertiesToFlexibleServersSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToFlexibleServersSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210501s.Server_STATUS
	err = server.Status.AssignPropertiesToServerSTATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToServerSTATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (server *FlexibleServer) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: server.Spec.OriginalVersion(),
		Kind:    "FlexibleServer",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of FlexibleServer. Use v1beta20210501.FlexibleServer instead
type FlexibleServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FlexibleServer `json:"items"`
}

// Deprecated version of APIVersion. Use v1beta20210501.APIVersion instead
// +kubebuilder:validation:Enum={"2021-05-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2021-05-01")

type FlexibleServers_Spec struct {
	AdministratorLogin         *string                     `json:"administratorLogin,omitempty"`
	AdministratorLoginPassword *genruntime.SecretReference `json:"administratorLoginPassword,omitempty"`
	AvailabilityZone           *string                     `json:"availabilityZone,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName         string                      `json:"azureName,omitempty"`
	Backup            *Backup                     `json:"backup,omitempty"`
	CreateMode        *ServerPropertiesCreateMode `json:"createMode,omitempty"`
	DataEncryption    *DataEncryption             `json:"dataEncryption,omitempty"`
	HighAvailability  *HighAvailability           `json:"highAvailability,omitempty"`
	Identity          *Identity                   `json:"identity,omitempty"`
	Location          *string                     `json:"location,omitempty"`
	MaintenanceWindow *MaintenanceWindow          `json:"maintenanceWindow,omitempty"`
	Network           *Network                    `json:"network,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *FlexibleServerOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner                  *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	ReplicationRole        *ServerPropertiesReplicationRole   `json:"replicationRole,omitempty"`
	RestorePointInTime     *string                            `json:"restorePointInTime,omitempty"`
	Sku                    *Sku                               `json:"sku,omitempty"`
	SourceServerResourceId *string                            `json:"sourceServerResourceId,omitempty"`
	Storage                *Storage                           `json:"storage,omitempty"`
	Tags                   map[string]string                  `json:"tags,omitempty"`
	Version                *ServerPropertiesVersion           `json:"version,omitempty"`
}

var _ genruntime.ARMTransformer = &FlexibleServers_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (servers *FlexibleServers_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if servers == nil {
		return nil, nil
	}
	result := &FlexibleServers_SpecARM{}

	// Set property ‘Identity’:
	if servers.Identity != nil {
		identityARM, err := (*servers.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identityARM.(*IdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	if servers.Location != nil {
		location := *servers.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if servers.AdministratorLogin != nil ||
		servers.AdministratorLoginPassword != nil ||
		servers.AvailabilityZone != nil ||
		servers.Backup != nil ||
		servers.CreateMode != nil ||
		servers.DataEncryption != nil ||
		servers.HighAvailability != nil ||
		servers.MaintenanceWindow != nil ||
		servers.Network != nil ||
		servers.ReplicationRole != nil ||
		servers.RestorePointInTime != nil ||
		servers.SourceServerResourceId != nil ||
		servers.Storage != nil ||
		servers.Version != nil {
		result.Properties = &ServerPropertiesARM{}
	}
	if servers.AdministratorLogin != nil {
		administratorLogin := *servers.AdministratorLogin
		result.Properties.AdministratorLogin = &administratorLogin
	}
	if servers.AdministratorLoginPassword != nil {
		administratorLoginPasswordSecret, err := resolved.ResolvedSecrets.LookupSecret(*servers.AdministratorLoginPassword)
		if err != nil {
			return nil, errors.Wrap(err, "looking up secret for property AdministratorLoginPassword")
		}
		administratorLoginPassword := administratorLoginPasswordSecret
		result.Properties.AdministratorLoginPassword = &administratorLoginPassword
	}
	if servers.AvailabilityZone != nil {
		availabilityZone := *servers.AvailabilityZone
		result.Properties.AvailabilityZone = &availabilityZone
	}
	if servers.Backup != nil {
		backupARM, err := (*servers.Backup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		backup := *backupARM.(*BackupARM)
		result.Properties.Backup = &backup
	}
	if servers.CreateMode != nil {
		createMode := *servers.CreateMode
		result.Properties.CreateMode = &createMode
	}
	if servers.DataEncryption != nil {
		dataEncryptionARM, err := (*servers.DataEncryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		dataEncryption := *dataEncryptionARM.(*DataEncryptionARM)
		result.Properties.DataEncryption = &dataEncryption
	}
	if servers.HighAvailability != nil {
		highAvailabilityARM, err := (*servers.HighAvailability).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		highAvailability := *highAvailabilityARM.(*HighAvailabilityARM)
		result.Properties.HighAvailability = &highAvailability
	}
	if servers.MaintenanceWindow != nil {
		maintenanceWindowARM, err := (*servers.MaintenanceWindow).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		maintenanceWindow := *maintenanceWindowARM.(*MaintenanceWindowARM)
		result.Properties.MaintenanceWindow = &maintenanceWindow
	}
	if servers.Network != nil {
		networkARM, err := (*servers.Network).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		network := *networkARM.(*NetworkARM)
		result.Properties.Network = &network
	}
	if servers.ReplicationRole != nil {
		replicationRole := *servers.ReplicationRole
		result.Properties.ReplicationRole = &replicationRole
	}
	if servers.RestorePointInTime != nil {
		restorePointInTime := *servers.RestorePointInTime
		result.Properties.RestorePointInTime = &restorePointInTime
	}
	if servers.SourceServerResourceId != nil {
		sourceServerResourceId := *servers.SourceServerResourceId
		result.Properties.SourceServerResourceId = &sourceServerResourceId
	}
	if servers.Storage != nil {
		storageARM, err := (*servers.Storage).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		storage := *storageARM.(*StorageARM)
		result.Properties.Storage = &storage
	}
	if servers.Version != nil {
		version := *servers.Version
		result.Properties.Version = &version
	}

	// Set property ‘Sku’:
	if servers.Sku != nil {
		skuARM, err := (*servers.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *skuARM.(*SkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if servers.Tags != nil {
		result.Tags = make(map[string]string, len(servers.Tags))
		for key, value := range servers.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (servers *FlexibleServers_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FlexibleServers_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (servers *FlexibleServers_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FlexibleServers_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FlexibleServers_SpecARM, got %T", armInput)
	}

	// Set property ‘AdministratorLogin’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdministratorLogin != nil {
			administratorLogin := *typedInput.Properties.AdministratorLogin
			servers.AdministratorLogin = &administratorLogin
		}
	}

	// no assignment for property ‘AdministratorLoginPassword’

	// Set property ‘AvailabilityZone’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AvailabilityZone != nil {
			availabilityZone := *typedInput.Properties.AvailabilityZone
			servers.AvailabilityZone = &availabilityZone
		}
	}

	// Set property ‘AzureName’:
	servers.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Backup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Backup != nil {
			var backup1 Backup
			err := backup1.PopulateFromARM(owner, *typedInput.Properties.Backup)
			if err != nil {
				return err
			}
			backup := backup1
			servers.Backup = &backup
		}
	}

	// Set property ‘CreateMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreateMode != nil {
			createMode := *typedInput.Properties.CreateMode
			servers.CreateMode = &createMode
		}
	}

	// Set property ‘DataEncryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataEncryption != nil {
			var dataEncryption1 DataEncryption
			err := dataEncryption1.PopulateFromARM(owner, *typedInput.Properties.DataEncryption)
			if err != nil {
				return err
			}
			dataEncryption := dataEncryption1
			servers.DataEncryption = &dataEncryption
		}
	}

	// Set property ‘HighAvailability’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HighAvailability != nil {
			var highAvailability1 HighAvailability
			err := highAvailability1.PopulateFromARM(owner, *typedInput.Properties.HighAvailability)
			if err != nil {
				return err
			}
			highAvailability := highAvailability1
			servers.HighAvailability = &highAvailability
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		servers.Identity = &identity
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		servers.Location = &location
	}

	// Set property ‘MaintenanceWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaintenanceWindow != nil {
			var maintenanceWindow1 MaintenanceWindow
			err := maintenanceWindow1.PopulateFromARM(owner, *typedInput.Properties.MaintenanceWindow)
			if err != nil {
				return err
			}
			maintenanceWindow := maintenanceWindow1
			servers.MaintenanceWindow = &maintenanceWindow
		}
	}

	// Set property ‘Network’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Network != nil {
			var network1 Network
			err := network1.PopulateFromARM(owner, *typedInput.Properties.Network)
			if err != nil {
				return err
			}
			network := network1
			servers.Network = &network
		}
	}

	// no assignment for property ‘OperatorSpec’

	// Set property ‘Owner’:
	servers.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘ReplicationRole’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicationRole != nil {
			replicationRole := *typedInput.Properties.ReplicationRole
			servers.ReplicationRole = &replicationRole
		}
	}

	// Set property ‘RestorePointInTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePointInTime != nil {
			restorePointInTime := *typedInput.Properties.RestorePointInTime
			servers.RestorePointInTime = &restorePointInTime
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		servers.Sku = &sku
	}

	// Set property ‘SourceServerResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceServerResourceId != nil {
			sourceServerResourceId := *typedInput.Properties.SourceServerResourceId
			servers.SourceServerResourceId = &sourceServerResourceId
		}
	}

	// Set property ‘Storage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Storage != nil {
			var storage1 Storage
			err := storage1.PopulateFromARM(owner, *typedInput.Properties.Storage)
			if err != nil {
				return err
			}
			storage := storage1
			servers.Storage = &storage
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		servers.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			servers.Tags[key] = value
		}
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			servers.Version = &version
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FlexibleServers_Spec{}

// ConvertSpecFrom populates our FlexibleServers_Spec from the provided source
func (servers *FlexibleServers_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210501s.FlexibleServers_Spec)
	if ok {
		// Populate our instance from source
		return servers.AssignPropertiesFromFlexibleServersSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210501s.FlexibleServers_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = servers.AssignPropertiesFromFlexibleServersSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FlexibleServers_Spec
func (servers *FlexibleServers_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210501s.FlexibleServers_Spec)
	if ok {
		// Populate destination from our instance
		return servers.AssignPropertiesToFlexibleServersSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210501s.FlexibleServers_Spec{}
	err := servers.AssignPropertiesToFlexibleServersSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromFlexibleServersSpec populates our FlexibleServers_Spec from the provided source FlexibleServers_Spec
func (servers *FlexibleServers_Spec) AssignPropertiesFromFlexibleServersSpec(source *alpha20210501s.FlexibleServers_Spec) error {

	// AdministratorLogin
	servers.AdministratorLogin = genruntime.ClonePointerToString(source.AdministratorLogin)

	// AdministratorLoginPassword
	if source.AdministratorLoginPassword != nil {
		administratorLoginPassword := source.AdministratorLoginPassword.Copy()
		servers.AdministratorLoginPassword = &administratorLoginPassword
	} else {
		servers.AdministratorLoginPassword = nil
	}

	// AvailabilityZone
	servers.AvailabilityZone = genruntime.ClonePointerToString(source.AvailabilityZone)

	// AzureName
	servers.AzureName = source.AzureName

	// Backup
	if source.Backup != nil {
		var backup Backup
		err := backup.AssignPropertiesFromBackup(source.Backup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBackup() to populate field Backup")
		}
		servers.Backup = &backup
	} else {
		servers.Backup = nil
	}

	// CreateMode
	if source.CreateMode != nil {
		createMode := ServerPropertiesCreateMode(*source.CreateMode)
		servers.CreateMode = &createMode
	} else {
		servers.CreateMode = nil
	}

	// DataEncryption
	if source.DataEncryption != nil {
		var dataEncryption DataEncryption
		err := dataEncryption.AssignPropertiesFromDataEncryption(source.DataEncryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDataEncryption() to populate field DataEncryption")
		}
		servers.DataEncryption = &dataEncryption
	} else {
		servers.DataEncryption = nil
	}

	// HighAvailability
	if source.HighAvailability != nil {
		var highAvailability HighAvailability
		err := highAvailability.AssignPropertiesFromHighAvailability(source.HighAvailability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHighAvailability() to populate field HighAvailability")
		}
		servers.HighAvailability = &highAvailability
	} else {
		servers.HighAvailability = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity
		err := identity.AssignPropertiesFromIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentity() to populate field Identity")
		}
		servers.Identity = &identity
	} else {
		servers.Identity = nil
	}

	// Location
	servers.Location = genruntime.ClonePointerToString(source.Location)

	// MaintenanceWindow
	if source.MaintenanceWindow != nil {
		var maintenanceWindow MaintenanceWindow
		err := maintenanceWindow.AssignPropertiesFromMaintenanceWindow(source.MaintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMaintenanceWindow() to populate field MaintenanceWindow")
		}
		servers.MaintenanceWindow = &maintenanceWindow
	} else {
		servers.MaintenanceWindow = nil
	}

	// Network
	if source.Network != nil {
		var network Network
		err := network.AssignPropertiesFromNetwork(source.Network)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetwork() to populate field Network")
		}
		servers.Network = &network
	} else {
		servers.Network = nil
	}

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec FlexibleServerOperatorSpec
		err := operatorSpec.AssignPropertiesFromFlexibleServerOperatorSpec(source.OperatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromFlexibleServerOperatorSpec() to populate field OperatorSpec")
		}
		servers.OperatorSpec = &operatorSpec
	} else {
		servers.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		servers.Owner = &owner
	} else {
		servers.Owner = nil
	}

	// ReplicationRole
	if source.ReplicationRole != nil {
		replicationRole := ServerPropertiesReplicationRole(*source.ReplicationRole)
		servers.ReplicationRole = &replicationRole
	} else {
		servers.ReplicationRole = nil
	}

	// RestorePointInTime
	if source.RestorePointInTime != nil {
		restorePointInTime := *source.RestorePointInTime
		servers.RestorePointInTime = &restorePointInTime
	} else {
		servers.RestorePointInTime = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		servers.Sku = &sku
	} else {
		servers.Sku = nil
	}

	// SourceServerResourceId
	servers.SourceServerResourceId = genruntime.ClonePointerToString(source.SourceServerResourceId)

	// Storage
	if source.Storage != nil {
		var storage Storage
		err := storage.AssignPropertiesFromStorage(source.Storage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorage() to populate field Storage")
		}
		servers.Storage = &storage
	} else {
		servers.Storage = nil
	}

	// Tags
	servers.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Version
	if source.Version != nil {
		version := ServerPropertiesVersion(*source.Version)
		servers.Version = &version
	} else {
		servers.Version = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFlexibleServersSpec populates the provided destination FlexibleServers_Spec from our FlexibleServers_Spec
func (servers *FlexibleServers_Spec) AssignPropertiesToFlexibleServersSpec(destination *alpha20210501s.FlexibleServers_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdministratorLogin
	destination.AdministratorLogin = genruntime.ClonePointerToString(servers.AdministratorLogin)

	// AdministratorLoginPassword
	if servers.AdministratorLoginPassword != nil {
		administratorLoginPassword := servers.AdministratorLoginPassword.Copy()
		destination.AdministratorLoginPassword = &administratorLoginPassword
	} else {
		destination.AdministratorLoginPassword = nil
	}

	// AvailabilityZone
	destination.AvailabilityZone = genruntime.ClonePointerToString(servers.AvailabilityZone)

	// AzureName
	destination.AzureName = servers.AzureName

	// Backup
	if servers.Backup != nil {
		var backup alpha20210501s.Backup
		err := servers.Backup.AssignPropertiesToBackup(&backup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBackup() to populate field Backup")
		}
		destination.Backup = &backup
	} else {
		destination.Backup = nil
	}

	// CreateMode
	if servers.CreateMode != nil {
		createMode := string(*servers.CreateMode)
		destination.CreateMode = &createMode
	} else {
		destination.CreateMode = nil
	}

	// DataEncryption
	if servers.DataEncryption != nil {
		var dataEncryption alpha20210501s.DataEncryption
		err := servers.DataEncryption.AssignPropertiesToDataEncryption(&dataEncryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDataEncryption() to populate field DataEncryption")
		}
		destination.DataEncryption = &dataEncryption
	} else {
		destination.DataEncryption = nil
	}

	// HighAvailability
	if servers.HighAvailability != nil {
		var highAvailability alpha20210501s.HighAvailability
		err := servers.HighAvailability.AssignPropertiesToHighAvailability(&highAvailability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHighAvailability() to populate field HighAvailability")
		}
		destination.HighAvailability = &highAvailability
	} else {
		destination.HighAvailability = nil
	}

	// Identity
	if servers.Identity != nil {
		var identity alpha20210501s.Identity
		err := servers.Identity.AssignPropertiesToIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(servers.Location)

	// MaintenanceWindow
	if servers.MaintenanceWindow != nil {
		var maintenanceWindow alpha20210501s.MaintenanceWindow
		err := servers.MaintenanceWindow.AssignPropertiesToMaintenanceWindow(&maintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMaintenanceWindow() to populate field MaintenanceWindow")
		}
		destination.MaintenanceWindow = &maintenanceWindow
	} else {
		destination.MaintenanceWindow = nil
	}

	// Network
	if servers.Network != nil {
		var network alpha20210501s.Network
		err := servers.Network.AssignPropertiesToNetwork(&network)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetwork() to populate field Network")
		}
		destination.Network = &network
	} else {
		destination.Network = nil
	}

	// OperatorSpec
	if servers.OperatorSpec != nil {
		var operatorSpec alpha20210501s.FlexibleServerOperatorSpec
		err := servers.OperatorSpec.AssignPropertiesToFlexibleServerOperatorSpec(&operatorSpec)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToFlexibleServerOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = servers.OriginalVersion()

	// Owner
	if servers.Owner != nil {
		owner := servers.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// ReplicationRole
	if servers.ReplicationRole != nil {
		replicationRole := string(*servers.ReplicationRole)
		destination.ReplicationRole = &replicationRole
	} else {
		destination.ReplicationRole = nil
	}

	// RestorePointInTime
	if servers.RestorePointInTime != nil {
		restorePointInTime := *servers.RestorePointInTime
		destination.RestorePointInTime = &restorePointInTime
	} else {
		destination.RestorePointInTime = nil
	}

	// Sku
	if servers.Sku != nil {
		var sku alpha20210501s.Sku
		err := servers.Sku.AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SourceServerResourceId
	destination.SourceServerResourceId = genruntime.ClonePointerToString(servers.SourceServerResourceId)

	// Storage
	if servers.Storage != nil {
		var storage alpha20210501s.Storage
		err := servers.Storage.AssignPropertiesToStorage(&storage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorage() to populate field Storage")
		}
		destination.Storage = &storage
	} else {
		destination.Storage = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(servers.Tags)

	// Version
	if servers.Version != nil {
		version := string(*servers.Version)
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (servers *FlexibleServers_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (servers *FlexibleServers_Spec) SetAzureName(azureName string) { servers.AzureName = azureName }

// Deprecated version of Server_STATUS. Use v1beta20210501.Server_STATUS instead
type Server_STATUS struct {
	AdministratorLogin *string        `json:"administratorLogin,omitempty"`
	AvailabilityZone   *string        `json:"availabilityZone,omitempty"`
	Backup             *Backup_STATUS `json:"backup,omitempty"`

	// Conditions: The observed state of the resource
	Conditions               []conditions.Condition            `json:"conditions,omitempty"`
	CreateMode               *ServerPropertiesSTATUSCreateMode `json:"createMode,omitempty"`
	DataEncryption           *DataEncryption_STATUS            `json:"dataEncryption,omitempty"`
	FullyQualifiedDomainName *string                           `json:"fullyQualifiedDomainName,omitempty"`
	HighAvailability         *HighAvailability_STATUS          `json:"highAvailability,omitempty"`
	Id                       *string                           `json:"id,omitempty"`
	Identity                 *Identity_STATUS                  `json:"identity,omitempty"`
	Location                 *string                           `json:"location,omitempty"`
	MaintenanceWindow        *MaintenanceWindow_STATUS         `json:"maintenanceWindow,omitempty"`
	Name                     *string                           `json:"name,omitempty"`
	Network                  *Network_STATUS                   `json:"network,omitempty"`
	ReplicaCapacity          *int                              `json:"replicaCapacity,omitempty"`
	ReplicationRole          *ReplicationRole_STATUS           `json:"replicationRole,omitempty"`
	RestorePointInTime       *string                           `json:"restorePointInTime,omitempty"`
	Sku                      *Sku_STATUS                       `json:"sku,omitempty"`
	SourceServerResourceId   *string                           `json:"sourceServerResourceId,omitempty"`
	State                    *ServerPropertiesSTATUSState      `json:"state,omitempty"`
	Storage                  *Storage_STATUS                   `json:"storage,omitempty"`
	SystemData               *SystemData_STATUS                `json:"systemData,omitempty"`
	Tags                     map[string]string                 `json:"tags,omitempty"`
	Type                     *string                           `json:"type,omitempty"`
	Version                  *ServerVersion_STATUS             `json:"version,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Server_STATUS{}

// ConvertStatusFrom populates our Server_STATUS from the provided source
func (server *Server_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210501s.Server_STATUS)
	if ok {
		// Populate our instance from source
		return server.AssignPropertiesFromServerSTATUS(src)
	}

	// Convert to an intermediate form
	src = &alpha20210501s.Server_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = server.AssignPropertiesFromServerSTATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Server_STATUS
func (server *Server_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210501s.Server_STATUS)
	if ok {
		// Populate destination from our instance
		return server.AssignPropertiesToServerSTATUS(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210501s.Server_STATUS{}
	err := server.AssignPropertiesToServerSTATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Server_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *Server_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Server_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *Server_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Server_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Server_STATUSARM, got %T", armInput)
	}

	// Set property ‘AdministratorLogin’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdministratorLogin != nil {
			administratorLogin := *typedInput.Properties.AdministratorLogin
			server.AdministratorLogin = &administratorLogin
		}
	}

	// Set property ‘AvailabilityZone’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AvailabilityZone != nil {
			availabilityZone := *typedInput.Properties.AvailabilityZone
			server.AvailabilityZone = &availabilityZone
		}
	}

	// Set property ‘Backup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Backup != nil {
			var backup1 Backup_STATUS
			err := backup1.PopulateFromARM(owner, *typedInput.Properties.Backup)
			if err != nil {
				return err
			}
			backup := backup1
			server.Backup = &backup
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreateMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreateMode != nil {
			createMode := *typedInput.Properties.CreateMode
			server.CreateMode = &createMode
		}
	}

	// Set property ‘DataEncryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataEncryption != nil {
			var dataEncryption1 DataEncryption_STATUS
			err := dataEncryption1.PopulateFromARM(owner, *typedInput.Properties.DataEncryption)
			if err != nil {
				return err
			}
			dataEncryption := dataEncryption1
			server.DataEncryption = &dataEncryption
		}
	}

	// Set property ‘FullyQualifiedDomainName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FullyQualifiedDomainName != nil {
			fullyQualifiedDomainName := *typedInput.Properties.FullyQualifiedDomainName
			server.FullyQualifiedDomainName = &fullyQualifiedDomainName
		}
	}

	// Set property ‘HighAvailability’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HighAvailability != nil {
			var highAvailability1 HighAvailability_STATUS
			err := highAvailability1.PopulateFromARM(owner, *typedInput.Properties.HighAvailability)
			if err != nil {
				return err
			}
			highAvailability := highAvailability1
			server.HighAvailability = &highAvailability
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		server.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_STATUS
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		server.Identity = &identity
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		server.Location = &location
	}

	// Set property ‘MaintenanceWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaintenanceWindow != nil {
			var maintenanceWindow1 MaintenanceWindow_STATUS
			err := maintenanceWindow1.PopulateFromARM(owner, *typedInput.Properties.MaintenanceWindow)
			if err != nil {
				return err
			}
			maintenanceWindow := maintenanceWindow1
			server.MaintenanceWindow = &maintenanceWindow
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		server.Name = &name
	}

	// Set property ‘Network’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Network != nil {
			var network1 Network_STATUS
			err := network1.PopulateFromARM(owner, *typedInput.Properties.Network)
			if err != nil {
				return err
			}
			network := network1
			server.Network = &network
		}
	}

	// Set property ‘ReplicaCapacity’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicaCapacity != nil {
			replicaCapacity := *typedInput.Properties.ReplicaCapacity
			server.ReplicaCapacity = &replicaCapacity
		}
	}

	// Set property ‘ReplicationRole’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicationRole != nil {
			replicationRole := *typedInput.Properties.ReplicationRole
			server.ReplicationRole = &replicationRole
		}
	}

	// Set property ‘RestorePointInTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePointInTime != nil {
			restorePointInTime := *typedInput.Properties.RestorePointInTime
			server.RestorePointInTime = &restorePointInTime
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		server.Sku = &sku
	}

	// Set property ‘SourceServerResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceServerResourceId != nil {
			sourceServerResourceId := *typedInput.Properties.SourceServerResourceId
			server.SourceServerResourceId = &sourceServerResourceId
		}
	}

	// Set property ‘State’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			state := *typedInput.Properties.State
			server.State = &state
		}
	}

	// Set property ‘Storage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Storage != nil {
			var storage1 Storage_STATUS
			err := storage1.PopulateFromARM(owner, *typedInput.Properties.Storage)
			if err != nil {
				return err
			}
			storage := storage1
			server.Storage = &storage
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		server.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		server.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			server.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		server.Type = &typeVar
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			server.Version = &version
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromServerSTATUS populates our Server_STATUS from the provided source Server_STATUS
func (server *Server_STATUS) AssignPropertiesFromServerSTATUS(source *alpha20210501s.Server_STATUS) error {

	// AdministratorLogin
	server.AdministratorLogin = genruntime.ClonePointerToString(source.AdministratorLogin)

	// AvailabilityZone
	server.AvailabilityZone = genruntime.ClonePointerToString(source.AvailabilityZone)

	// Backup
	if source.Backup != nil {
		var backup Backup_STATUS
		err := backup.AssignPropertiesFromBackupSTATUS(source.Backup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBackupSTATUS() to populate field Backup")
		}
		server.Backup = &backup
	} else {
		server.Backup = nil
	}

	// Conditions
	server.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreateMode
	if source.CreateMode != nil {
		createMode := ServerPropertiesSTATUSCreateMode(*source.CreateMode)
		server.CreateMode = &createMode
	} else {
		server.CreateMode = nil
	}

	// DataEncryption
	if source.DataEncryption != nil {
		var dataEncryption DataEncryption_STATUS
		err := dataEncryption.AssignPropertiesFromDataEncryptionSTATUS(source.DataEncryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromDataEncryptionSTATUS() to populate field DataEncryption")
		}
		server.DataEncryption = &dataEncryption
	} else {
		server.DataEncryption = nil
	}

	// FullyQualifiedDomainName
	server.FullyQualifiedDomainName = genruntime.ClonePointerToString(source.FullyQualifiedDomainName)

	// HighAvailability
	if source.HighAvailability != nil {
		var highAvailability HighAvailability_STATUS
		err := highAvailability.AssignPropertiesFromHighAvailabilitySTATUS(source.HighAvailability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHighAvailabilitySTATUS() to populate field HighAvailability")
		}
		server.HighAvailability = &highAvailability
	} else {
		server.HighAvailability = nil
	}

	// Id
	server.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity Identity_STATUS
		err := identity.AssignPropertiesFromIdentitySTATUS(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentitySTATUS() to populate field Identity")
		}
		server.Identity = &identity
	} else {
		server.Identity = nil
	}

	// Location
	server.Location = genruntime.ClonePointerToString(source.Location)

	// MaintenanceWindow
	if source.MaintenanceWindow != nil {
		var maintenanceWindow MaintenanceWindow_STATUS
		err := maintenanceWindow.AssignPropertiesFromMaintenanceWindowSTATUS(source.MaintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMaintenanceWindowSTATUS() to populate field MaintenanceWindow")
		}
		server.MaintenanceWindow = &maintenanceWindow
	} else {
		server.MaintenanceWindow = nil
	}

	// Name
	server.Name = genruntime.ClonePointerToString(source.Name)

	// Network
	if source.Network != nil {
		var network Network_STATUS
		err := network.AssignPropertiesFromNetworkSTATUS(source.Network)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkSTATUS() to populate field Network")
		}
		server.Network = &network
	} else {
		server.Network = nil
	}

	// ReplicaCapacity
	server.ReplicaCapacity = genruntime.ClonePointerToInt(source.ReplicaCapacity)

	// ReplicationRole
	if source.ReplicationRole != nil {
		replicationRole := ReplicationRole_STATUS(*source.ReplicationRole)
		server.ReplicationRole = &replicationRole
	} else {
		server.ReplicationRole = nil
	}

	// RestorePointInTime
	server.RestorePointInTime = genruntime.ClonePointerToString(source.RestorePointInTime)

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
		err := sku.AssignPropertiesFromSkuSTATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuSTATUS() to populate field Sku")
		}
		server.Sku = &sku
	} else {
		server.Sku = nil
	}

	// SourceServerResourceId
	server.SourceServerResourceId = genruntime.ClonePointerToString(source.SourceServerResourceId)

	// State
	if source.State != nil {
		state := ServerPropertiesSTATUSState(*source.State)
		server.State = &state
	} else {
		server.State = nil
	}

	// Storage
	if source.Storage != nil {
		var storage Storage_STATUS
		err := storage.AssignPropertiesFromStorageSTATUS(source.Storage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorageSTATUS() to populate field Storage")
		}
		server.Storage = &storage
	} else {
		server.Storage = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignPropertiesFromSystemDataSTATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataSTATUS() to populate field SystemData")
		}
		server.SystemData = &systemDatum
	} else {
		server.SystemData = nil
	}

	// Tags
	server.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	server.Type = genruntime.ClonePointerToString(source.Type)

	// Version
	if source.Version != nil {
		version := ServerVersion_STATUS(*source.Version)
		server.Version = &version
	} else {
		server.Version = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServerSTATUS populates the provided destination Server_STATUS from our Server_STATUS
func (server *Server_STATUS) AssignPropertiesToServerSTATUS(destination *alpha20210501s.Server_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdministratorLogin
	destination.AdministratorLogin = genruntime.ClonePointerToString(server.AdministratorLogin)

	// AvailabilityZone
	destination.AvailabilityZone = genruntime.ClonePointerToString(server.AvailabilityZone)

	// Backup
	if server.Backup != nil {
		var backup alpha20210501s.Backup_STATUS
		err := server.Backup.AssignPropertiesToBackupSTATUS(&backup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBackupSTATUS() to populate field Backup")
		}
		destination.Backup = &backup
	} else {
		destination.Backup = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(server.Conditions)

	// CreateMode
	if server.CreateMode != nil {
		createMode := string(*server.CreateMode)
		destination.CreateMode = &createMode
	} else {
		destination.CreateMode = nil
	}

	// DataEncryption
	if server.DataEncryption != nil {
		var dataEncryption alpha20210501s.DataEncryption_STATUS
		err := server.DataEncryption.AssignPropertiesToDataEncryptionSTATUS(&dataEncryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToDataEncryptionSTATUS() to populate field DataEncryption")
		}
		destination.DataEncryption = &dataEncryption
	} else {
		destination.DataEncryption = nil
	}

	// FullyQualifiedDomainName
	destination.FullyQualifiedDomainName = genruntime.ClonePointerToString(server.FullyQualifiedDomainName)

	// HighAvailability
	if server.HighAvailability != nil {
		var highAvailability alpha20210501s.HighAvailability_STATUS
		err := server.HighAvailability.AssignPropertiesToHighAvailabilitySTATUS(&highAvailability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHighAvailabilitySTATUS() to populate field HighAvailability")
		}
		destination.HighAvailability = &highAvailability
	} else {
		destination.HighAvailability = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(server.Id)

	// Identity
	if server.Identity != nil {
		var identity alpha20210501s.Identity_STATUS
		err := server.Identity.AssignPropertiesToIdentitySTATUS(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentitySTATUS() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(server.Location)

	// MaintenanceWindow
	if server.MaintenanceWindow != nil {
		var maintenanceWindow alpha20210501s.MaintenanceWindow_STATUS
		err := server.MaintenanceWindow.AssignPropertiesToMaintenanceWindowSTATUS(&maintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMaintenanceWindowSTATUS() to populate field MaintenanceWindow")
		}
		destination.MaintenanceWindow = &maintenanceWindow
	} else {
		destination.MaintenanceWindow = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(server.Name)

	// Network
	if server.Network != nil {
		var network alpha20210501s.Network_STATUS
		err := server.Network.AssignPropertiesToNetworkSTATUS(&network)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkSTATUS() to populate field Network")
		}
		destination.Network = &network
	} else {
		destination.Network = nil
	}

	// ReplicaCapacity
	destination.ReplicaCapacity = genruntime.ClonePointerToInt(server.ReplicaCapacity)

	// ReplicationRole
	if server.ReplicationRole != nil {
		replicationRole := string(*server.ReplicationRole)
		destination.ReplicationRole = &replicationRole
	} else {
		destination.ReplicationRole = nil
	}

	// RestorePointInTime
	destination.RestorePointInTime = genruntime.ClonePointerToString(server.RestorePointInTime)

	// Sku
	if server.Sku != nil {
		var sku alpha20210501s.Sku_STATUS
		err := server.Sku.AssignPropertiesToSkuSTATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuSTATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SourceServerResourceId
	destination.SourceServerResourceId = genruntime.ClonePointerToString(server.SourceServerResourceId)

	// State
	if server.State != nil {
		state := string(*server.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Storage
	if server.Storage != nil {
		var storage alpha20210501s.Storage_STATUS
		err := server.Storage.AssignPropertiesToStorageSTATUS(&storage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorageSTATUS() to populate field Storage")
		}
		destination.Storage = &storage
	} else {
		destination.Storage = nil
	}

	// SystemData
	if server.SystemData != nil {
		var systemDatum alpha20210501s.SystemData_STATUS
		err := server.SystemData.AssignPropertiesToSystemDataSTATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataSTATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(server.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(server.Type)

	// Version
	if server.Version != nil {
		version := string(*server.Version)
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Backup. Use v1beta20210501.Backup instead
type Backup struct {
	BackupRetentionDays *int                      `json:"backupRetentionDays,omitempty"`
	GeoRedundantBackup  *BackupGeoRedundantBackup `json:"geoRedundantBackup,omitempty"`
}

var _ genruntime.ARMTransformer = &Backup{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (backup *Backup) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if backup == nil {
		return nil, nil
	}
	result := &BackupARM{}

	// Set property ‘BackupRetentionDays’:
	if backup.BackupRetentionDays != nil {
		backupRetentionDays := *backup.BackupRetentionDays
		result.BackupRetentionDays = &backupRetentionDays
	}

	// Set property ‘GeoRedundantBackup’:
	if backup.GeoRedundantBackup != nil {
		geoRedundantBackup := *backup.GeoRedundantBackup
		result.GeoRedundantBackup = &geoRedundantBackup
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backup *Backup) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BackupARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backup *Backup) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BackupARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BackupARM, got %T", armInput)
	}

	// Set property ‘BackupRetentionDays’:
	if typedInput.BackupRetentionDays != nil {
		backupRetentionDays := *typedInput.BackupRetentionDays
		backup.BackupRetentionDays = &backupRetentionDays
	}

	// Set property ‘GeoRedundantBackup’:
	if typedInput.GeoRedundantBackup != nil {
		geoRedundantBackup := *typedInput.GeoRedundantBackup
		backup.GeoRedundantBackup = &geoRedundantBackup
	}

	// No error
	return nil
}

// AssignPropertiesFromBackup populates our Backup from the provided source Backup
func (backup *Backup) AssignPropertiesFromBackup(source *alpha20210501s.Backup) error {

	// BackupRetentionDays
	backup.BackupRetentionDays = genruntime.ClonePointerToInt(source.BackupRetentionDays)

	// GeoRedundantBackup
	if source.GeoRedundantBackup != nil {
		geoRedundantBackup := BackupGeoRedundantBackup(*source.GeoRedundantBackup)
		backup.GeoRedundantBackup = &geoRedundantBackup
	} else {
		backup.GeoRedundantBackup = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBackup populates the provided destination Backup from our Backup
func (backup *Backup) AssignPropertiesToBackup(destination *alpha20210501s.Backup) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BackupRetentionDays
	destination.BackupRetentionDays = genruntime.ClonePointerToInt(backup.BackupRetentionDays)

	// GeoRedundantBackup
	if backup.GeoRedundantBackup != nil {
		geoRedundantBackup := string(*backup.GeoRedundantBackup)
		destination.GeoRedundantBackup = &geoRedundantBackup
	} else {
		destination.GeoRedundantBackup = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Backup_STATUS. Use v1beta20210501.Backup_STATUS instead
type Backup_STATUS struct {
	BackupRetentionDays *int                     `json:"backupRetentionDays,omitempty"`
	EarliestRestoreDate *string                  `json:"earliestRestoreDate,omitempty"`
	GeoRedundantBackup  *EnableStatusEnum_STATUS `json:"geoRedundantBackup,omitempty"`
}

var _ genruntime.FromARMConverter = &Backup_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backup *Backup_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Backup_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backup *Backup_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Backup_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Backup_STATUSARM, got %T", armInput)
	}

	// Set property ‘BackupRetentionDays’:
	if typedInput.BackupRetentionDays != nil {
		backupRetentionDays := *typedInput.BackupRetentionDays
		backup.BackupRetentionDays = &backupRetentionDays
	}

	// Set property ‘EarliestRestoreDate’:
	if typedInput.EarliestRestoreDate != nil {
		earliestRestoreDate := *typedInput.EarliestRestoreDate
		backup.EarliestRestoreDate = &earliestRestoreDate
	}

	// Set property ‘GeoRedundantBackup’:
	if typedInput.GeoRedundantBackup != nil {
		geoRedundantBackup := *typedInput.GeoRedundantBackup
		backup.GeoRedundantBackup = &geoRedundantBackup
	}

	// No error
	return nil
}

// AssignPropertiesFromBackupSTATUS populates our Backup_STATUS from the provided source Backup_STATUS
func (backup *Backup_STATUS) AssignPropertiesFromBackupSTATUS(source *alpha20210501s.Backup_STATUS) error {

	// BackupRetentionDays
	backup.BackupRetentionDays = genruntime.ClonePointerToInt(source.BackupRetentionDays)

	// EarliestRestoreDate
	backup.EarliestRestoreDate = genruntime.ClonePointerToString(source.EarliestRestoreDate)

	// GeoRedundantBackup
	if source.GeoRedundantBackup != nil {
		geoRedundantBackup := EnableStatusEnum_STATUS(*source.GeoRedundantBackup)
		backup.GeoRedundantBackup = &geoRedundantBackup
	} else {
		backup.GeoRedundantBackup = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBackupSTATUS populates the provided destination Backup_STATUS from our Backup_STATUS
func (backup *Backup_STATUS) AssignPropertiesToBackupSTATUS(destination *alpha20210501s.Backup_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BackupRetentionDays
	destination.BackupRetentionDays = genruntime.ClonePointerToInt(backup.BackupRetentionDays)

	// EarliestRestoreDate
	destination.EarliestRestoreDate = genruntime.ClonePointerToString(backup.EarliestRestoreDate)

	// GeoRedundantBackup
	if backup.GeoRedundantBackup != nil {
		geoRedundantBackup := string(*backup.GeoRedundantBackup)
		destination.GeoRedundantBackup = &geoRedundantBackup
	} else {
		destination.GeoRedundantBackup = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DataEncryption. Use v1beta20210501.DataEncryption instead
type DataEncryption struct {
	GeoBackupKeyUri                        *string                       `json:"geoBackupKeyUri,omitempty"`
	GeoBackupUserAssignedIdentityReference *genruntime.ResourceReference `armReference:"GeoBackupUserAssignedIdentityId" json:"geoBackupUserAssignedIdentityReference,omitempty"`
	PrimaryKeyUri                          *string                       `json:"primaryKeyUri,omitempty"`
	PrimaryUserAssignedIdentityReference   *genruntime.ResourceReference `armReference:"PrimaryUserAssignedIdentityId" json:"primaryUserAssignedIdentityReference,omitempty"`
	Type                                   *DataEncryptionType           `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &DataEncryption{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *DataEncryption) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	result := &DataEncryptionARM{}

	// Set property ‘GeoBackupKeyUri’:
	if encryption.GeoBackupKeyUri != nil {
		geoBackupKeyUri := *encryption.GeoBackupKeyUri
		result.GeoBackupKeyUri = &geoBackupKeyUri
	}

	// Set property ‘GeoBackupUserAssignedIdentityId’:
	if encryption.GeoBackupUserAssignedIdentityReference != nil {
		geoBackupUserAssignedIdentityReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*encryption.GeoBackupUserAssignedIdentityReference)
		if err != nil {
			return nil, err
		}
		geoBackupUserAssignedIdentityReference := geoBackupUserAssignedIdentityReferenceARMID
		result.GeoBackupUserAssignedIdentityId = &geoBackupUserAssignedIdentityReference
	}

	// Set property ‘PrimaryKeyUri’:
	if encryption.PrimaryKeyUri != nil {
		primaryKeyUri := *encryption.PrimaryKeyUri
		result.PrimaryKeyUri = &primaryKeyUri
	}

	// Set property ‘PrimaryUserAssignedIdentityId’:
	if encryption.PrimaryUserAssignedIdentityReference != nil {
		primaryUserAssignedIdentityReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*encryption.PrimaryUserAssignedIdentityReference)
		if err != nil {
			return nil, err
		}
		primaryUserAssignedIdentityReference := primaryUserAssignedIdentityReferenceARMID
		result.PrimaryUserAssignedIdentityId = &primaryUserAssignedIdentityReference
	}

	// Set property ‘Type’:
	if encryption.Type != nil {
		typeVar := *encryption.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *DataEncryption) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DataEncryptionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *DataEncryption) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DataEncryptionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DataEncryptionARM, got %T", armInput)
	}

	// Set property ‘GeoBackupKeyUri’:
	if typedInput.GeoBackupKeyUri != nil {
		geoBackupKeyUri := *typedInput.GeoBackupKeyUri
		encryption.GeoBackupKeyUri = &geoBackupKeyUri
	}

	// no assignment for property ‘GeoBackupUserAssignedIdentityReference’

	// Set property ‘PrimaryKeyUri’:
	if typedInput.PrimaryKeyUri != nil {
		primaryKeyUri := *typedInput.PrimaryKeyUri
		encryption.PrimaryKeyUri = &primaryKeyUri
	}

	// no assignment for property ‘PrimaryUserAssignedIdentityReference’

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		encryption.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromDataEncryption populates our DataEncryption from the provided source DataEncryption
func (encryption *DataEncryption) AssignPropertiesFromDataEncryption(source *alpha20210501s.DataEncryption) error {

	// GeoBackupKeyUri
	encryption.GeoBackupKeyUri = genruntime.ClonePointerToString(source.GeoBackupKeyUri)

	// GeoBackupUserAssignedIdentityReference
	if source.GeoBackupUserAssignedIdentityReference != nil {
		geoBackupUserAssignedIdentityReference := source.GeoBackupUserAssignedIdentityReference.Copy()
		encryption.GeoBackupUserAssignedIdentityReference = &geoBackupUserAssignedIdentityReference
	} else {
		encryption.GeoBackupUserAssignedIdentityReference = nil
	}

	// PrimaryKeyUri
	encryption.PrimaryKeyUri = genruntime.ClonePointerToString(source.PrimaryKeyUri)

	// PrimaryUserAssignedIdentityReference
	if source.PrimaryUserAssignedIdentityReference != nil {
		primaryUserAssignedIdentityReference := source.PrimaryUserAssignedIdentityReference.Copy()
		encryption.PrimaryUserAssignedIdentityReference = &primaryUserAssignedIdentityReference
	} else {
		encryption.PrimaryUserAssignedIdentityReference = nil
	}

	// Type
	if source.Type != nil {
		typeVar := DataEncryptionType(*source.Type)
		encryption.Type = &typeVar
	} else {
		encryption.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDataEncryption populates the provided destination DataEncryption from our DataEncryption
func (encryption *DataEncryption) AssignPropertiesToDataEncryption(destination *alpha20210501s.DataEncryption) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// GeoBackupKeyUri
	destination.GeoBackupKeyUri = genruntime.ClonePointerToString(encryption.GeoBackupKeyUri)

	// GeoBackupUserAssignedIdentityReference
	if encryption.GeoBackupUserAssignedIdentityReference != nil {
		geoBackupUserAssignedIdentityReference := encryption.GeoBackupUserAssignedIdentityReference.Copy()
		destination.GeoBackupUserAssignedIdentityReference = &geoBackupUserAssignedIdentityReference
	} else {
		destination.GeoBackupUserAssignedIdentityReference = nil
	}

	// PrimaryKeyUri
	destination.PrimaryKeyUri = genruntime.ClonePointerToString(encryption.PrimaryKeyUri)

	// PrimaryUserAssignedIdentityReference
	if encryption.PrimaryUserAssignedIdentityReference != nil {
		primaryUserAssignedIdentityReference := encryption.PrimaryUserAssignedIdentityReference.Copy()
		destination.PrimaryUserAssignedIdentityReference = &primaryUserAssignedIdentityReference
	} else {
		destination.PrimaryUserAssignedIdentityReference = nil
	}

	// Type
	if encryption.Type != nil {
		typeVar := string(*encryption.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of DataEncryption_STATUS. Use v1beta20210501.DataEncryption_STATUS instead
type DataEncryption_STATUS struct {
	GeoBackupKeyUri                 *string                   `json:"geoBackupKeyUri,omitempty"`
	GeoBackupUserAssignedIdentityId *string                   `json:"geoBackupUserAssignedIdentityId,omitempty"`
	PrimaryKeyUri                   *string                   `json:"primaryKeyUri,omitempty"`
	PrimaryUserAssignedIdentityId   *string                   `json:"primaryUserAssignedIdentityId,omitempty"`
	Type                            *DataEncryptionSTATUSType `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &DataEncryption_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *DataEncryption_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DataEncryption_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *DataEncryption_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DataEncryption_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DataEncryption_STATUSARM, got %T", armInput)
	}

	// Set property ‘GeoBackupKeyUri’:
	if typedInput.GeoBackupKeyUri != nil {
		geoBackupKeyUri := *typedInput.GeoBackupKeyUri
		encryption.GeoBackupKeyUri = &geoBackupKeyUri
	}

	// Set property ‘GeoBackupUserAssignedIdentityId’:
	if typedInput.GeoBackupUserAssignedIdentityId != nil {
		geoBackupUserAssignedIdentityId := *typedInput.GeoBackupUserAssignedIdentityId
		encryption.GeoBackupUserAssignedIdentityId = &geoBackupUserAssignedIdentityId
	}

	// Set property ‘PrimaryKeyUri’:
	if typedInput.PrimaryKeyUri != nil {
		primaryKeyUri := *typedInput.PrimaryKeyUri
		encryption.PrimaryKeyUri = &primaryKeyUri
	}

	// Set property ‘PrimaryUserAssignedIdentityId’:
	if typedInput.PrimaryUserAssignedIdentityId != nil {
		primaryUserAssignedIdentityId := *typedInput.PrimaryUserAssignedIdentityId
		encryption.PrimaryUserAssignedIdentityId = &primaryUserAssignedIdentityId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		encryption.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromDataEncryptionSTATUS populates our DataEncryption_STATUS from the provided source DataEncryption_STATUS
func (encryption *DataEncryption_STATUS) AssignPropertiesFromDataEncryptionSTATUS(source *alpha20210501s.DataEncryption_STATUS) error {

	// GeoBackupKeyUri
	encryption.GeoBackupKeyUri = genruntime.ClonePointerToString(source.GeoBackupKeyUri)

	// GeoBackupUserAssignedIdentityId
	encryption.GeoBackupUserAssignedIdentityId = genruntime.ClonePointerToString(source.GeoBackupUserAssignedIdentityId)

	// PrimaryKeyUri
	encryption.PrimaryKeyUri = genruntime.ClonePointerToString(source.PrimaryKeyUri)

	// PrimaryUserAssignedIdentityId
	encryption.PrimaryUserAssignedIdentityId = genruntime.ClonePointerToString(source.PrimaryUserAssignedIdentityId)

	// Type
	if source.Type != nil {
		typeVar := DataEncryptionSTATUSType(*source.Type)
		encryption.Type = &typeVar
	} else {
		encryption.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDataEncryptionSTATUS populates the provided destination DataEncryption_STATUS from our DataEncryption_STATUS
func (encryption *DataEncryption_STATUS) AssignPropertiesToDataEncryptionSTATUS(destination *alpha20210501s.DataEncryption_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// GeoBackupKeyUri
	destination.GeoBackupKeyUri = genruntime.ClonePointerToString(encryption.GeoBackupKeyUri)

	// GeoBackupUserAssignedIdentityId
	destination.GeoBackupUserAssignedIdentityId = genruntime.ClonePointerToString(encryption.GeoBackupUserAssignedIdentityId)

	// PrimaryKeyUri
	destination.PrimaryKeyUri = genruntime.ClonePointerToString(encryption.PrimaryKeyUri)

	// PrimaryUserAssignedIdentityId
	destination.PrimaryUserAssignedIdentityId = genruntime.ClonePointerToString(encryption.PrimaryUserAssignedIdentityId)

	// Type
	if encryption.Type != nil {
		typeVar := string(*encryption.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type FlexibleServerOperatorSpec struct {
	// Secrets: configures where to place Azure generated secrets.
	Secrets *FlexibleServerOperatorSecrets `json:"secrets,omitempty"`
}

// AssignPropertiesFromFlexibleServerOperatorSpec populates our FlexibleServerOperatorSpec from the provided source FlexibleServerOperatorSpec
func (operator *FlexibleServerOperatorSpec) AssignPropertiesFromFlexibleServerOperatorSpec(source *alpha20210501s.FlexibleServerOperatorSpec) error {

	// Secrets
	if source.Secrets != nil {
		var secret FlexibleServerOperatorSecrets
		err := secret.AssignPropertiesFromFlexibleServerOperatorSecrets(source.Secrets)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromFlexibleServerOperatorSecrets() to populate field Secrets")
		}
		operator.Secrets = &secret
	} else {
		operator.Secrets = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFlexibleServerOperatorSpec populates the provided destination FlexibleServerOperatorSpec from our FlexibleServerOperatorSpec
func (operator *FlexibleServerOperatorSpec) AssignPropertiesToFlexibleServerOperatorSpec(destination *alpha20210501s.FlexibleServerOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Secrets
	if operator.Secrets != nil {
		var secret alpha20210501s.FlexibleServerOperatorSecrets
		err := operator.Secrets.AssignPropertiesToFlexibleServerOperatorSecrets(&secret)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToFlexibleServerOperatorSecrets() to populate field Secrets")
		}
		destination.Secrets = &secret
	} else {
		destination.Secrets = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of HighAvailability. Use v1beta20210501.HighAvailability instead
type HighAvailability struct {
	Mode                    *HighAvailabilityMode `json:"mode,omitempty"`
	StandbyAvailabilityZone *string               `json:"standbyAvailabilityZone,omitempty"`
}

var _ genruntime.ARMTransformer = &HighAvailability{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (availability *HighAvailability) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if availability == nil {
		return nil, nil
	}
	result := &HighAvailabilityARM{}

	// Set property ‘Mode’:
	if availability.Mode != nil {
		mode := *availability.Mode
		result.Mode = &mode
	}

	// Set property ‘StandbyAvailabilityZone’:
	if availability.StandbyAvailabilityZone != nil {
		standbyAvailabilityZone := *availability.StandbyAvailabilityZone
		result.StandbyAvailabilityZone = &standbyAvailabilityZone
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (availability *HighAvailability) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HighAvailabilityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (availability *HighAvailability) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HighAvailabilityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HighAvailabilityARM, got %T", armInput)
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		availability.Mode = &mode
	}

	// Set property ‘StandbyAvailabilityZone’:
	if typedInput.StandbyAvailabilityZone != nil {
		standbyAvailabilityZone := *typedInput.StandbyAvailabilityZone
		availability.StandbyAvailabilityZone = &standbyAvailabilityZone
	}

	// No error
	return nil
}

// AssignPropertiesFromHighAvailability populates our HighAvailability from the provided source HighAvailability
func (availability *HighAvailability) AssignPropertiesFromHighAvailability(source *alpha20210501s.HighAvailability) error {

	// Mode
	if source.Mode != nil {
		mode := HighAvailabilityMode(*source.Mode)
		availability.Mode = &mode
	} else {
		availability.Mode = nil
	}

	// StandbyAvailabilityZone
	availability.StandbyAvailabilityZone = genruntime.ClonePointerToString(source.StandbyAvailabilityZone)

	// No error
	return nil
}

// AssignPropertiesToHighAvailability populates the provided destination HighAvailability from our HighAvailability
func (availability *HighAvailability) AssignPropertiesToHighAvailability(destination *alpha20210501s.HighAvailability) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Mode
	if availability.Mode != nil {
		mode := string(*availability.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// StandbyAvailabilityZone
	destination.StandbyAvailabilityZone = genruntime.ClonePointerToString(availability.StandbyAvailabilityZone)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of HighAvailability_STATUS. Use v1beta20210501.HighAvailability_STATUS instead
type HighAvailability_STATUS struct {
	Mode                    *HighAvailabilitySTATUSMode  `json:"mode,omitempty"`
	StandbyAvailabilityZone *string                      `json:"standbyAvailabilityZone,omitempty"`
	State                   *HighAvailabilitySTATUSState `json:"state,omitempty"`
}

var _ genruntime.FromARMConverter = &HighAvailability_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (availability *HighAvailability_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HighAvailability_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (availability *HighAvailability_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HighAvailability_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HighAvailability_STATUSARM, got %T", armInput)
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		availability.Mode = &mode
	}

	// Set property ‘StandbyAvailabilityZone’:
	if typedInput.StandbyAvailabilityZone != nil {
		standbyAvailabilityZone := *typedInput.StandbyAvailabilityZone
		availability.StandbyAvailabilityZone = &standbyAvailabilityZone
	}

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		availability.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromHighAvailabilitySTATUS populates our HighAvailability_STATUS from the provided source HighAvailability_STATUS
func (availability *HighAvailability_STATUS) AssignPropertiesFromHighAvailabilitySTATUS(source *alpha20210501s.HighAvailability_STATUS) error {

	// Mode
	if source.Mode != nil {
		mode := HighAvailabilitySTATUSMode(*source.Mode)
		availability.Mode = &mode
	} else {
		availability.Mode = nil
	}

	// StandbyAvailabilityZone
	availability.StandbyAvailabilityZone = genruntime.ClonePointerToString(source.StandbyAvailabilityZone)

	// State
	if source.State != nil {
		state := HighAvailabilitySTATUSState(*source.State)
		availability.State = &state
	} else {
		availability.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToHighAvailabilitySTATUS populates the provided destination HighAvailability_STATUS from our HighAvailability_STATUS
func (availability *HighAvailability_STATUS) AssignPropertiesToHighAvailabilitySTATUS(destination *alpha20210501s.HighAvailability_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Mode
	if availability.Mode != nil {
		mode := string(*availability.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// StandbyAvailabilityZone
	destination.StandbyAvailabilityZone = genruntime.ClonePointerToString(availability.StandbyAvailabilityZone)

	// State
	if availability.State != nil {
		state := string(*availability.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Identity. Use v1beta20210501.Identity instead
type Identity struct {
	Type *IdentityType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &Identity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *Identity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	result := &IdentityARM{}

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentity populates our Identity from the provided source Identity
func (identity *Identity) AssignPropertiesFromIdentity(source *alpha20210501s.Identity) error {

	// Type
	if source.Type != nil {
		typeVar := IdentityType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity populates the provided destination Identity from our Identity
func (identity *Identity) AssignPropertiesToIdentity(destination *alpha20210501s.Identity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Identity_STATUS. Use v1beta20210501.Identity_STATUS instead
type Identity_STATUS struct {
	PrincipalId            *string             `json:"principalId,omitempty"`
	TenantId               *string             `json:"tenantId,omitempty"`
	Type                   *IdentitySTATUSType `json:"type,omitempty"`
	UserAssignedIdentities map[string]v1.JSON  `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &Identity_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_STATUSARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]v1.JSON, len(typedInput.UserAssignedIdentities))
		for key, value := range typedInput.UserAssignedIdentities {
			identity.UserAssignedIdentities[key] = *value.DeepCopy()
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentitySTATUS populates our Identity_STATUS from the provided source Identity_STATUS
func (identity *Identity_STATUS) AssignPropertiesFromIdentitySTATUS(source *alpha20210501s.Identity_STATUS) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := IdentitySTATUSType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1.JSON, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			userAssignedIdentityMap[userAssignedIdentityKey] = *userAssignedIdentityValue.DeepCopy()
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentitySTATUS populates the provided destination Identity_STATUS from our Identity_STATUS
func (identity *Identity_STATUS) AssignPropertiesToIdentitySTATUS(destination *alpha20210501s.Identity_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1.JSON, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			userAssignedIdentityMap[userAssignedIdentityKey] = *userAssignedIdentityValue.DeepCopy()
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MaintenanceWindow. Use v1beta20210501.MaintenanceWindow instead
type MaintenanceWindow struct {
	CustomWindow *string `json:"customWindow,omitempty"`
	DayOfWeek    *int    `json:"dayOfWeek,omitempty"`
	StartHour    *int    `json:"startHour,omitempty"`
	StartMinute  *int    `json:"startMinute,omitempty"`
}

var _ genruntime.ARMTransformer = &MaintenanceWindow{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (window *MaintenanceWindow) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if window == nil {
		return nil, nil
	}
	result := &MaintenanceWindowARM{}

	// Set property ‘CustomWindow’:
	if window.CustomWindow != nil {
		customWindow := *window.CustomWindow
		result.CustomWindow = &customWindow
	}

	// Set property ‘DayOfWeek’:
	if window.DayOfWeek != nil {
		dayOfWeek := *window.DayOfWeek
		result.DayOfWeek = &dayOfWeek
	}

	// Set property ‘StartHour’:
	if window.StartHour != nil {
		startHour := *window.StartHour
		result.StartHour = &startHour
	}

	// Set property ‘StartMinute’:
	if window.StartMinute != nil {
		startMinute := *window.StartMinute
		result.StartMinute = &startMinute
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (window *MaintenanceWindow) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MaintenanceWindowARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (window *MaintenanceWindow) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MaintenanceWindowARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MaintenanceWindowARM, got %T", armInput)
	}

	// Set property ‘CustomWindow’:
	if typedInput.CustomWindow != nil {
		customWindow := *typedInput.CustomWindow
		window.CustomWindow = &customWindow
	}

	// Set property ‘DayOfWeek’:
	if typedInput.DayOfWeek != nil {
		dayOfWeek := *typedInput.DayOfWeek
		window.DayOfWeek = &dayOfWeek
	}

	// Set property ‘StartHour’:
	if typedInput.StartHour != nil {
		startHour := *typedInput.StartHour
		window.StartHour = &startHour
	}

	// Set property ‘StartMinute’:
	if typedInput.StartMinute != nil {
		startMinute := *typedInput.StartMinute
		window.StartMinute = &startMinute
	}

	// No error
	return nil
}

// AssignPropertiesFromMaintenanceWindow populates our MaintenanceWindow from the provided source MaintenanceWindow
func (window *MaintenanceWindow) AssignPropertiesFromMaintenanceWindow(source *alpha20210501s.MaintenanceWindow) error {

	// CustomWindow
	window.CustomWindow = genruntime.ClonePointerToString(source.CustomWindow)

	// DayOfWeek
	window.DayOfWeek = genruntime.ClonePointerToInt(source.DayOfWeek)

	// StartHour
	window.StartHour = genruntime.ClonePointerToInt(source.StartHour)

	// StartMinute
	window.StartMinute = genruntime.ClonePointerToInt(source.StartMinute)

	// No error
	return nil
}

// AssignPropertiesToMaintenanceWindow populates the provided destination MaintenanceWindow from our MaintenanceWindow
func (window *MaintenanceWindow) AssignPropertiesToMaintenanceWindow(destination *alpha20210501s.MaintenanceWindow) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomWindow
	destination.CustomWindow = genruntime.ClonePointerToString(window.CustomWindow)

	// DayOfWeek
	destination.DayOfWeek = genruntime.ClonePointerToInt(window.DayOfWeek)

	// StartHour
	destination.StartHour = genruntime.ClonePointerToInt(window.StartHour)

	// StartMinute
	destination.StartMinute = genruntime.ClonePointerToInt(window.StartMinute)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of MaintenanceWindow_STATUS. Use v1beta20210501.MaintenanceWindow_STATUS instead
type MaintenanceWindow_STATUS struct {
	CustomWindow *string `json:"customWindow,omitempty"`
	DayOfWeek    *int    `json:"dayOfWeek,omitempty"`
	StartHour    *int    `json:"startHour,omitempty"`
	StartMinute  *int    `json:"startMinute,omitempty"`
}

var _ genruntime.FromARMConverter = &MaintenanceWindow_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (window *MaintenanceWindow_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MaintenanceWindow_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (window *MaintenanceWindow_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MaintenanceWindow_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MaintenanceWindow_STATUSARM, got %T", armInput)
	}

	// Set property ‘CustomWindow’:
	if typedInput.CustomWindow != nil {
		customWindow := *typedInput.CustomWindow
		window.CustomWindow = &customWindow
	}

	// Set property ‘DayOfWeek’:
	if typedInput.DayOfWeek != nil {
		dayOfWeek := *typedInput.DayOfWeek
		window.DayOfWeek = &dayOfWeek
	}

	// Set property ‘StartHour’:
	if typedInput.StartHour != nil {
		startHour := *typedInput.StartHour
		window.StartHour = &startHour
	}

	// Set property ‘StartMinute’:
	if typedInput.StartMinute != nil {
		startMinute := *typedInput.StartMinute
		window.StartMinute = &startMinute
	}

	// No error
	return nil
}

// AssignPropertiesFromMaintenanceWindowSTATUS populates our MaintenanceWindow_STATUS from the provided source MaintenanceWindow_STATUS
func (window *MaintenanceWindow_STATUS) AssignPropertiesFromMaintenanceWindowSTATUS(source *alpha20210501s.MaintenanceWindow_STATUS) error {

	// CustomWindow
	window.CustomWindow = genruntime.ClonePointerToString(source.CustomWindow)

	// DayOfWeek
	window.DayOfWeek = genruntime.ClonePointerToInt(source.DayOfWeek)

	// StartHour
	window.StartHour = genruntime.ClonePointerToInt(source.StartHour)

	// StartMinute
	window.StartMinute = genruntime.ClonePointerToInt(source.StartMinute)

	// No error
	return nil
}

// AssignPropertiesToMaintenanceWindowSTATUS populates the provided destination MaintenanceWindow_STATUS from our MaintenanceWindow_STATUS
func (window *MaintenanceWindow_STATUS) AssignPropertiesToMaintenanceWindowSTATUS(destination *alpha20210501s.MaintenanceWindow_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomWindow
	destination.CustomWindow = genruntime.ClonePointerToString(window.CustomWindow)

	// DayOfWeek
	destination.DayOfWeek = genruntime.ClonePointerToInt(window.DayOfWeek)

	// StartHour
	destination.StartHour = genruntime.ClonePointerToInt(window.StartHour)

	// StartMinute
	destination.StartMinute = genruntime.ClonePointerToInt(window.StartMinute)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Network. Use v1beta20210501.Network instead
type Network struct {
	DelegatedSubnetResourceReference *genruntime.ResourceReference `armReference:"DelegatedSubnetResourceId" json:"delegatedSubnetResourceReference,omitempty"`
	PrivateDnsZoneResourceReference  *genruntime.ResourceReference `armReference:"PrivateDnsZoneResourceId" json:"privateDnsZoneResourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &Network{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (network *Network) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if network == nil {
		return nil, nil
	}
	result := &NetworkARM{}

	// Set property ‘DelegatedSubnetResourceId’:
	if network.DelegatedSubnetResourceReference != nil {
		delegatedSubnetResourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*network.DelegatedSubnetResourceReference)
		if err != nil {
			return nil, err
		}
		delegatedSubnetResourceReference := delegatedSubnetResourceReferenceARMID
		result.DelegatedSubnetResourceId = &delegatedSubnetResourceReference
	}

	// Set property ‘PrivateDnsZoneResourceId’:
	if network.PrivateDnsZoneResourceReference != nil {
		privateDnsZoneResourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*network.PrivateDnsZoneResourceReference)
		if err != nil {
			return nil, err
		}
		privateDnsZoneResourceReference := privateDnsZoneResourceReferenceARMID
		result.PrivateDnsZoneResourceId = &privateDnsZoneResourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (network *Network) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (network *Network) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(NetworkARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkARM, got %T", armInput)
	}

	// no assignment for property ‘DelegatedSubnetResourceReference’

	// no assignment for property ‘PrivateDnsZoneResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromNetwork populates our Network from the provided source Network
func (network *Network) AssignPropertiesFromNetwork(source *alpha20210501s.Network) error {

	// DelegatedSubnetResourceReference
	if source.DelegatedSubnetResourceReference != nil {
		delegatedSubnetResourceReference := source.DelegatedSubnetResourceReference.Copy()
		network.DelegatedSubnetResourceReference = &delegatedSubnetResourceReference
	} else {
		network.DelegatedSubnetResourceReference = nil
	}

	// PrivateDnsZoneResourceReference
	if source.PrivateDnsZoneResourceReference != nil {
		privateDnsZoneResourceReference := source.PrivateDnsZoneResourceReference.Copy()
		network.PrivateDnsZoneResourceReference = &privateDnsZoneResourceReference
	} else {
		network.PrivateDnsZoneResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetwork populates the provided destination Network from our Network
func (network *Network) AssignPropertiesToNetwork(destination *alpha20210501s.Network) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DelegatedSubnetResourceReference
	if network.DelegatedSubnetResourceReference != nil {
		delegatedSubnetResourceReference := network.DelegatedSubnetResourceReference.Copy()
		destination.DelegatedSubnetResourceReference = &delegatedSubnetResourceReference
	} else {
		destination.DelegatedSubnetResourceReference = nil
	}

	// PrivateDnsZoneResourceReference
	if network.PrivateDnsZoneResourceReference != nil {
		privateDnsZoneResourceReference := network.PrivateDnsZoneResourceReference.Copy()
		destination.PrivateDnsZoneResourceReference = &privateDnsZoneResourceReference
	} else {
		destination.PrivateDnsZoneResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Network_STATUS. Use v1beta20210501.Network_STATUS instead
type Network_STATUS struct {
	DelegatedSubnetResourceId *string                  `json:"delegatedSubnetResourceId,omitempty"`
	PrivateDnsZoneResourceId  *string                  `json:"privateDnsZoneResourceId,omitempty"`
	PublicNetworkAccess       *EnableStatusEnum_STATUS `json:"publicNetworkAccess,omitempty"`
}

var _ genruntime.FromARMConverter = &Network_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (network *Network_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Network_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (network *Network_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Network_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Network_STATUSARM, got %T", armInput)
	}

	// Set property ‘DelegatedSubnetResourceId’:
	if typedInput.DelegatedSubnetResourceId != nil {
		delegatedSubnetResourceId := *typedInput.DelegatedSubnetResourceId
		network.DelegatedSubnetResourceId = &delegatedSubnetResourceId
	}

	// Set property ‘PrivateDnsZoneResourceId’:
	if typedInput.PrivateDnsZoneResourceId != nil {
		privateDnsZoneResourceId := *typedInput.PrivateDnsZoneResourceId
		network.PrivateDnsZoneResourceId = &privateDnsZoneResourceId
	}

	// Set property ‘PublicNetworkAccess’:
	if typedInput.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.PublicNetworkAccess
		network.PublicNetworkAccess = &publicNetworkAccess
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkSTATUS populates our Network_STATUS from the provided source Network_STATUS
func (network *Network_STATUS) AssignPropertiesFromNetworkSTATUS(source *alpha20210501s.Network_STATUS) error {

	// DelegatedSubnetResourceId
	network.DelegatedSubnetResourceId = genruntime.ClonePointerToString(source.DelegatedSubnetResourceId)

	// PrivateDnsZoneResourceId
	network.PrivateDnsZoneResourceId = genruntime.ClonePointerToString(source.PrivateDnsZoneResourceId)

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := EnableStatusEnum_STATUS(*source.PublicNetworkAccess)
		network.PublicNetworkAccess = &publicNetworkAccess
	} else {
		network.PublicNetworkAccess = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkSTATUS populates the provided destination Network_STATUS from our Network_STATUS
func (network *Network_STATUS) AssignPropertiesToNetworkSTATUS(destination *alpha20210501s.Network_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DelegatedSubnetResourceId
	destination.DelegatedSubnetResourceId = genruntime.ClonePointerToString(network.DelegatedSubnetResourceId)

	// PrivateDnsZoneResourceId
	destination.PrivateDnsZoneResourceId = genruntime.ClonePointerToString(network.PrivateDnsZoneResourceId)

	// PublicNetworkAccess
	if network.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*network.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ReplicationRole_STATUS. Use v1beta20210501.ReplicationRole_STATUS instead
type ReplicationRole_STATUS string

const (
	ReplicationRole_STATUS_None    = ReplicationRole_STATUS("None")
	ReplicationRole_STATUS_Replica = ReplicationRole_STATUS("Replica")
	ReplicationRole_STATUS_Source  = ReplicationRole_STATUS("Source")
)

// Deprecated version of ServerPropertiesCreateMode. Use v1beta20210501.ServerPropertiesCreateMode instead
// +kubebuilder:validation:Enum={"Default","GeoRestore","PointInTimeRestore","Replica"}
type ServerPropertiesCreateMode string

const (
	ServerPropertiesCreateMode_Default            = ServerPropertiesCreateMode("Default")
	ServerPropertiesCreateMode_GeoRestore         = ServerPropertiesCreateMode("GeoRestore")
	ServerPropertiesCreateMode_PointInTimeRestore = ServerPropertiesCreateMode("PointInTimeRestore")
	ServerPropertiesCreateMode_Replica            = ServerPropertiesCreateMode("Replica")
)

// Deprecated version of ServerPropertiesReplicationRole. Use v1beta20210501.ServerPropertiesReplicationRole instead
// +kubebuilder:validation:Enum={"None","Replica","Source"}
type ServerPropertiesReplicationRole string

const (
	ServerPropertiesReplicationRole_None    = ServerPropertiesReplicationRole("None")
	ServerPropertiesReplicationRole_Replica = ServerPropertiesReplicationRole("Replica")
	ServerPropertiesReplicationRole_Source  = ServerPropertiesReplicationRole("Source")
)

// Deprecated version of ServerPropertiesSTATUSCreateMode. Use v1beta20210501.ServerPropertiesSTATUSCreateMode instead
type ServerPropertiesSTATUSCreateMode string

const (
	ServerPropertiesSTATUSCreateMode_Default            = ServerPropertiesSTATUSCreateMode("Default")
	ServerPropertiesSTATUSCreateMode_GeoRestore         = ServerPropertiesSTATUSCreateMode("GeoRestore")
	ServerPropertiesSTATUSCreateMode_PointInTimeRestore = ServerPropertiesSTATUSCreateMode("PointInTimeRestore")
	ServerPropertiesSTATUSCreateMode_Replica            = ServerPropertiesSTATUSCreateMode("Replica")
)

// Deprecated version of ServerPropertiesSTATUSState. Use v1beta20210501.ServerPropertiesSTATUSState instead
type ServerPropertiesSTATUSState string

const (
	ServerPropertiesSTATUSState_Disabled = ServerPropertiesSTATUSState("Disabled")
	ServerPropertiesSTATUSState_Dropping = ServerPropertiesSTATUSState("Dropping")
	ServerPropertiesSTATUSState_Ready    = ServerPropertiesSTATUSState("Ready")
	ServerPropertiesSTATUSState_Starting = ServerPropertiesSTATUSState("Starting")
	ServerPropertiesSTATUSState_Stopped  = ServerPropertiesSTATUSState("Stopped")
	ServerPropertiesSTATUSState_Stopping = ServerPropertiesSTATUSState("Stopping")
	ServerPropertiesSTATUSState_Updating = ServerPropertiesSTATUSState("Updating")
)

// Deprecated version of ServerPropertiesVersion. Use v1beta20210501.ServerPropertiesVersion instead
// +kubebuilder:validation:Enum={"5.7","8.0.21"}
type ServerPropertiesVersion string

const (
	ServerPropertiesVersion_57   = ServerPropertiesVersion("5.7")
	ServerPropertiesVersion_8021 = ServerPropertiesVersion("8.0.21")
)

// Deprecated version of ServerVersion_STATUS. Use v1beta20210501.ServerVersion_STATUS instead
type ServerVersion_STATUS string

const (
	ServerVersion_STATUS_57   = ServerVersion_STATUS("5.7")
	ServerVersion_STATUS_8021 = ServerVersion_STATUS("8.0.21")
)

// Deprecated version of Sku. Use v1beta20210501.Sku instead
type Sku struct {
	// +kubebuilder:validation:Required
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	Tier *SkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	result := &SkuARM{}

	// Set property ‘Name’:
	if sku.Name != nil {
		name := *sku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if sku.Tier != nil {
		tier := *sku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *alpha20210501s.Sku) error {

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Tier
	if source.Tier != nil {
		tier := SkuTier(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *alpha20210501s.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Sku_STATUS. Use v1beta20210501.Sku_STATUS instead
type Sku_STATUS struct {
	Name *string        `json:"name,omitempty"`
	Tier *SkuSTATUSTier `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_STATUSARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuSTATUS populates our Sku_STATUS from the provided source Sku_STATUS
func (sku *Sku_STATUS) AssignPropertiesFromSkuSTATUS(source *alpha20210501s.Sku_STATUS) error {

	// Name
	sku.Name = genruntime.ClonePointerToString(source.Name)

	// Tier
	if source.Tier != nil {
		tier := SkuSTATUSTier(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSkuSTATUS populates the provided destination Sku_STATUS from our Sku_STATUS
func (sku *Sku_STATUS) AssignPropertiesToSkuSTATUS(destination *alpha20210501s.Sku_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(sku.Name)

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Storage. Use v1beta20210501.Storage instead
type Storage struct {
	AutoGrow      *StorageAutoGrow `json:"autoGrow,omitempty"`
	Iops          *int             `json:"iops,omitempty"`
	StorageSizeGB *int             `json:"storageSizeGB,omitempty"`
}

var _ genruntime.ARMTransformer = &Storage{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storage *Storage) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storage == nil {
		return nil, nil
	}
	result := &StorageARM{}

	// Set property ‘AutoGrow’:
	if storage.AutoGrow != nil {
		autoGrow := *storage.AutoGrow
		result.AutoGrow = &autoGrow
	}

	// Set property ‘Iops’:
	if storage.Iops != nil {
		iops := *storage.Iops
		result.Iops = &iops
	}

	// Set property ‘StorageSizeGB’:
	if storage.StorageSizeGB != nil {
		storageSizeGB := *storage.StorageSizeGB
		result.StorageSizeGB = &storageSizeGB
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storage *Storage) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storage *Storage) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageARM, got %T", armInput)
	}

	// Set property ‘AutoGrow’:
	if typedInput.AutoGrow != nil {
		autoGrow := *typedInput.AutoGrow
		storage.AutoGrow = &autoGrow
	}

	// Set property ‘Iops’:
	if typedInput.Iops != nil {
		iops := *typedInput.Iops
		storage.Iops = &iops
	}

	// Set property ‘StorageSizeGB’:
	if typedInput.StorageSizeGB != nil {
		storageSizeGB := *typedInput.StorageSizeGB
		storage.StorageSizeGB = &storageSizeGB
	}

	// No error
	return nil
}

// AssignPropertiesFromStorage populates our Storage from the provided source Storage
func (storage *Storage) AssignPropertiesFromStorage(source *alpha20210501s.Storage) error {

	// AutoGrow
	if source.AutoGrow != nil {
		autoGrow := StorageAutoGrow(*source.AutoGrow)
		storage.AutoGrow = &autoGrow
	} else {
		storage.AutoGrow = nil
	}

	// Iops
	storage.Iops = genruntime.ClonePointerToInt(source.Iops)

	// StorageSizeGB
	storage.StorageSizeGB = genruntime.ClonePointerToInt(source.StorageSizeGB)

	// No error
	return nil
}

// AssignPropertiesToStorage populates the provided destination Storage from our Storage
func (storage *Storage) AssignPropertiesToStorage(destination *alpha20210501s.Storage) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoGrow
	if storage.AutoGrow != nil {
		autoGrow := string(*storage.AutoGrow)
		destination.AutoGrow = &autoGrow
	} else {
		destination.AutoGrow = nil
	}

	// Iops
	destination.Iops = genruntime.ClonePointerToInt(storage.Iops)

	// StorageSizeGB
	destination.StorageSizeGB = genruntime.ClonePointerToInt(storage.StorageSizeGB)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Storage_STATUS. Use v1beta20210501.Storage_STATUS instead
type Storage_STATUS struct {
	AutoGrow      *EnableStatusEnum_STATUS `json:"autoGrow,omitempty"`
	Iops          *int                     `json:"iops,omitempty"`
	StorageSizeGB *int                     `json:"storageSizeGB,omitempty"`
	StorageSku    *string                  `json:"storageSku,omitempty"`
}

var _ genruntime.FromARMConverter = &Storage_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storage *Storage_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Storage_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storage *Storage_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Storage_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Storage_STATUSARM, got %T", armInput)
	}

	// Set property ‘AutoGrow’:
	if typedInput.AutoGrow != nil {
		autoGrow := *typedInput.AutoGrow
		storage.AutoGrow = &autoGrow
	}

	// Set property ‘Iops’:
	if typedInput.Iops != nil {
		iops := *typedInput.Iops
		storage.Iops = &iops
	}

	// Set property ‘StorageSizeGB’:
	if typedInput.StorageSizeGB != nil {
		storageSizeGB := *typedInput.StorageSizeGB
		storage.StorageSizeGB = &storageSizeGB
	}

	// Set property ‘StorageSku’:
	if typedInput.StorageSku != nil {
		storageSku := *typedInput.StorageSku
		storage.StorageSku = &storageSku
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageSTATUS populates our Storage_STATUS from the provided source Storage_STATUS
func (storage *Storage_STATUS) AssignPropertiesFromStorageSTATUS(source *alpha20210501s.Storage_STATUS) error {

	// AutoGrow
	if source.AutoGrow != nil {
		autoGrow := EnableStatusEnum_STATUS(*source.AutoGrow)
		storage.AutoGrow = &autoGrow
	} else {
		storage.AutoGrow = nil
	}

	// Iops
	storage.Iops = genruntime.ClonePointerToInt(source.Iops)

	// StorageSizeGB
	storage.StorageSizeGB = genruntime.ClonePointerToInt(source.StorageSizeGB)

	// StorageSku
	storage.StorageSku = genruntime.ClonePointerToString(source.StorageSku)

	// No error
	return nil
}

// AssignPropertiesToStorageSTATUS populates the provided destination Storage_STATUS from our Storage_STATUS
func (storage *Storage_STATUS) AssignPropertiesToStorageSTATUS(destination *alpha20210501s.Storage_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoGrow
	if storage.AutoGrow != nil {
		autoGrow := string(*storage.AutoGrow)
		destination.AutoGrow = &autoGrow
	} else {
		destination.AutoGrow = nil
	}

	// Iops
	destination.Iops = genruntime.ClonePointerToInt(storage.Iops)

	// StorageSizeGB
	destination.StorageSizeGB = genruntime.ClonePointerToInt(storage.StorageSizeGB)

	// StorageSku
	destination.StorageSku = genruntime.ClonePointerToString(storage.StorageSku)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SystemData_STATUS. Use v1beta20210501.SystemData_STATUS instead
type SystemData_STATUS struct {
	CreatedAt          *string                             `json:"createdAt,omitempty"`
	CreatedBy          *string                             `json:"createdBy,omitempty"`
	CreatedByType      *SystemDataSTATUSCreatedByType      `json:"createdByType,omitempty"`
	LastModifiedAt     *string                             `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                             `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *SystemDataSTATUSLastModifiedByType `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_STATUSARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemDataSTATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignPropertiesFromSystemDataSTATUS(source *alpha20210501s.SystemData_STATUS) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemDataSTATUSCreatedByType(*source.CreatedByType)
		data.CreatedByType = &createdByType
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemDataSTATUSLastModifiedByType(*source.LastModifiedByType)
		data.LastModifiedByType = &lastModifiedByType
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemDataSTATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignPropertiesToSystemDataSTATUS(destination *alpha20210501s.SystemData_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of BackupGeoRedundantBackup. Use v1beta20210501.BackupGeoRedundantBackup instead
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type BackupGeoRedundantBackup string

const (
	BackupGeoRedundantBackup_Disabled = BackupGeoRedundantBackup("Disabled")
	BackupGeoRedundantBackup_Enabled  = BackupGeoRedundantBackup("Enabled")
)

// Deprecated version of DataEncryptionSTATUSType. Use v1beta20210501.DataEncryptionSTATUSType instead
type DataEncryptionSTATUSType string

const (
	DataEncryptionSTATUSType_AzureKeyVault = DataEncryptionSTATUSType("AzureKeyVault")
	DataEncryptionSTATUSType_SystemManaged = DataEncryptionSTATUSType("SystemManaged")
)

// Deprecated version of DataEncryptionType. Use v1beta20210501.DataEncryptionType instead
// +kubebuilder:validation:Enum={"AzureKeyVault","SystemManaged"}
type DataEncryptionType string

const (
	DataEncryptionType_AzureKeyVault = DataEncryptionType("AzureKeyVault")
	DataEncryptionType_SystemManaged = DataEncryptionType("SystemManaged")
)

// Deprecated version of EnableStatusEnum_STATUS. Use v1beta20210501.EnableStatusEnum_STATUS instead
type EnableStatusEnum_STATUS string

const (
	EnableStatusEnum_STATUS_Disabled = EnableStatusEnum_STATUS("Disabled")
	EnableStatusEnum_STATUS_Enabled  = EnableStatusEnum_STATUS("Enabled")
)

type FlexibleServerOperatorSecrets struct {
	// FullyQualifiedDomainName: indicates where the FullyQualifiedDomainName secret should be placed. If omitted, the secret
	// will not be retrieved from Azure.
	FullyQualifiedDomainName *genruntime.SecretDestination `json:"fullyQualifiedDomainName,omitempty"`
}

// AssignPropertiesFromFlexibleServerOperatorSecrets populates our FlexibleServerOperatorSecrets from the provided source FlexibleServerOperatorSecrets
func (secrets *FlexibleServerOperatorSecrets) AssignPropertiesFromFlexibleServerOperatorSecrets(source *alpha20210501s.FlexibleServerOperatorSecrets) error {

	// FullyQualifiedDomainName
	if source.FullyQualifiedDomainName != nil {
		fullyQualifiedDomainName := source.FullyQualifiedDomainName.Copy()
		secrets.FullyQualifiedDomainName = &fullyQualifiedDomainName
	} else {
		secrets.FullyQualifiedDomainName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFlexibleServerOperatorSecrets populates the provided destination FlexibleServerOperatorSecrets from our FlexibleServerOperatorSecrets
func (secrets *FlexibleServerOperatorSecrets) AssignPropertiesToFlexibleServerOperatorSecrets(destination *alpha20210501s.FlexibleServerOperatorSecrets) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FullyQualifiedDomainName
	if secrets.FullyQualifiedDomainName != nil {
		fullyQualifiedDomainName := secrets.FullyQualifiedDomainName.Copy()
		destination.FullyQualifiedDomainName = &fullyQualifiedDomainName
	} else {
		destination.FullyQualifiedDomainName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of HighAvailabilityMode. Use v1beta20210501.HighAvailabilityMode instead
// +kubebuilder:validation:Enum={"Disabled","SameZone","ZoneRedundant"}
type HighAvailabilityMode string

const (
	HighAvailabilityMode_Disabled      = HighAvailabilityMode("Disabled")
	HighAvailabilityMode_SameZone      = HighAvailabilityMode("SameZone")
	HighAvailabilityMode_ZoneRedundant = HighAvailabilityMode("ZoneRedundant")
)

// Deprecated version of HighAvailabilitySTATUSMode. Use v1beta20210501.HighAvailabilitySTATUSMode instead
type HighAvailabilitySTATUSMode string

const (
	HighAvailabilitySTATUSMode_Disabled      = HighAvailabilitySTATUSMode("Disabled")
	HighAvailabilitySTATUSMode_SameZone      = HighAvailabilitySTATUSMode("SameZone")
	HighAvailabilitySTATUSMode_ZoneRedundant = HighAvailabilitySTATUSMode("ZoneRedundant")
)

// Deprecated version of HighAvailabilitySTATUSState. Use v1beta20210501.HighAvailabilitySTATUSState instead
type HighAvailabilitySTATUSState string

const (
	HighAvailabilitySTATUSState_CreatingStandby = HighAvailabilitySTATUSState("CreatingStandby")
	HighAvailabilitySTATUSState_FailingOver     = HighAvailabilitySTATUSState("FailingOver")
	HighAvailabilitySTATUSState_Healthy         = HighAvailabilitySTATUSState("Healthy")
	HighAvailabilitySTATUSState_NotEnabled      = HighAvailabilitySTATUSState("NotEnabled")
	HighAvailabilitySTATUSState_RemovingStandby = HighAvailabilitySTATUSState("RemovingStandby")
)

// Deprecated version of StorageAutoGrow. Use v1beta20210501.StorageAutoGrow instead
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type StorageAutoGrow string

const (
	StorageAutoGrow_Disabled = StorageAutoGrow("Disabled")
	StorageAutoGrow_Enabled  = StorageAutoGrow("Enabled")
)

func init() {
	SchemeBuilder.Register(&FlexibleServer{}, &FlexibleServerList{})
}
