// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/dbformysql/v1alpha1api20210501storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.DBforMySQL.json#/resourceDefinitions/flexibleServers
type FlexibleServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FlexibleServers_Spec `json:"spec,omitempty"`
	Status            Server_Status        `json:"status,omitempty"`
}

var _ conditions.Conditioner = &FlexibleServer{}

// GetConditions returns the conditions of the resource
func (flexibleServer *FlexibleServer) GetConditions() conditions.Conditions {
	return flexibleServer.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (flexibleServer *FlexibleServer) SetConditions(conditions conditions.Conditions) {
	flexibleServer.Status.Conditions = conditions
}

var _ conversion.Convertible = &FlexibleServer{}

// ConvertFrom populates our FlexibleServer from the provided hub FlexibleServer
func (flexibleServer *FlexibleServer) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210501storage.FlexibleServer)
	if !ok {
		return fmt.Errorf("expected storage:dbformysql/v1alpha1api20210501storage/FlexibleServer but received %T instead", hub)
	}

	return flexibleServer.AssignPropertiesFromFlexibleServer(source)
}

// ConvertTo populates the provided hub FlexibleServer from our FlexibleServer
func (flexibleServer *FlexibleServer) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210501storage.FlexibleServer)
	if !ok {
		return fmt.Errorf("expected storage:dbformysql/v1alpha1api20210501storage/FlexibleServer but received %T instead", hub)
	}

	return flexibleServer.AssignPropertiesToFlexibleServer(destination)
}

// +kubebuilder:webhook:path=/mutate-dbformysql-azure-com-v1alpha1api20210501-flexibleserver,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=dbformysql.azure.com,resources=flexibleservers,verbs=create;update,versions=v1alpha1api20210501,name=default.v1alpha1api20210501.flexibleservers.dbformysql.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &FlexibleServer{}

// Default applies defaults to the FlexibleServer resource
func (flexibleServer *FlexibleServer) Default() {
	flexibleServer.defaultImpl()
	var temp interface{} = flexibleServer
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (flexibleServer *FlexibleServer) defaultAzureName() {
	if flexibleServer.Spec.AzureName == "" {
		flexibleServer.Spec.AzureName = flexibleServer.Name
	}
}

// defaultImpl applies the code generated defaults to the FlexibleServer resource
func (flexibleServer *FlexibleServer) defaultImpl() { flexibleServer.defaultAzureName() }

var _ genruntime.KubernetesResource = &FlexibleServer{}

// AzureName returns the Azure name of the resource
func (flexibleServer *FlexibleServer) AzureName() string {
	return flexibleServer.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-05-01"
func (flexibleServer FlexibleServer) GetAPIVersion() string {
	return "2021-05-01"
}

// GetResourceKind returns the kind of the resource
func (flexibleServer *FlexibleServer) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (flexibleServer *FlexibleServer) GetSpec() genruntime.ConvertibleSpec {
	return &flexibleServer.Spec
}

// GetStatus returns the status of this resource
func (flexibleServer *FlexibleServer) GetStatus() genruntime.ConvertibleStatus {
	return &flexibleServer.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DBforMySQL/flexibleServers"
func (flexibleServer *FlexibleServer) GetType() string {
	return "Microsoft.DBforMySQL/flexibleServers"
}

// NewEmptyStatus returns a new empty (blank) status
func (flexibleServer *FlexibleServer) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Server_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (flexibleServer *FlexibleServer) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(flexibleServer.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  flexibleServer.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (flexibleServer *FlexibleServer) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Server_Status); ok {
		flexibleServer.Status = *st
		return nil
	}

	// Convert status to required version
	var st Server_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	flexibleServer.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-dbformysql-azure-com-v1alpha1api20210501-flexibleserver,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=dbformysql.azure.com,resources=flexibleservers,verbs=create;update,versions=v1alpha1api20210501,name=validate.v1alpha1api20210501.flexibleservers.dbformysql.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &FlexibleServer{}

// ValidateCreate validates the creation of the resource
func (flexibleServer *FlexibleServer) ValidateCreate() error {
	validations := flexibleServer.createValidations()
	var temp interface{} = flexibleServer
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (flexibleServer *FlexibleServer) ValidateDelete() error {
	validations := flexibleServer.deleteValidations()
	var temp interface{} = flexibleServer
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (flexibleServer *FlexibleServer) ValidateUpdate(old runtime.Object) error {
	validations := flexibleServer.updateValidations()
	var temp interface{} = flexibleServer
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (flexibleServer *FlexibleServer) createValidations() []func() error {
	return []func() error{flexibleServer.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (flexibleServer *FlexibleServer) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (flexibleServer *FlexibleServer) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return flexibleServer.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (flexibleServer *FlexibleServer) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&flexibleServer.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromFlexibleServer populates our FlexibleServer from the provided source FlexibleServer
func (flexibleServer *FlexibleServer) AssignPropertiesFromFlexibleServer(source *v1alpha1api20210501storage.FlexibleServer) error {

	// ObjectMeta
	flexibleServer.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FlexibleServers_Spec
	err := spec.AssignPropertiesFromFlexibleServersSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromFlexibleServersSpec()")
	}
	flexibleServer.Spec = spec

	// Status
	var status Server_Status
	err = status.AssignPropertiesFromServerStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromServerStatus()")
	}
	flexibleServer.Status = status

	// No error
	return nil
}

// AssignPropertiesToFlexibleServer populates the provided destination FlexibleServer from our FlexibleServer
func (flexibleServer *FlexibleServer) AssignPropertiesToFlexibleServer(destination *v1alpha1api20210501storage.FlexibleServer) error {

	// ObjectMeta
	destination.ObjectMeta = *flexibleServer.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210501storage.FlexibleServers_Spec
	err := flexibleServer.Spec.AssignPropertiesToFlexibleServersSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToFlexibleServersSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210501storage.Server_Status
	err = flexibleServer.Status.AssignPropertiesToServerStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToServerStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (flexibleServer *FlexibleServer) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: flexibleServer.Spec.OriginalVersion(),
		Kind:    "FlexibleServer",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.DBforMySQL.json#/resourceDefinitions/flexibleServers
type FlexibleServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FlexibleServer `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-05-01"}
type FlexibleServersSpecAPIVersion string

const FlexibleServersSpecAPIVersion20210501 = FlexibleServersSpecAPIVersion("2021-05-01")

type FlexibleServers_Spec struct {
	//AdministratorLogin: The administrator's login name of a server. Can only be
	//specified when the server is being created (and is required for creation).
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	//AdministratorLoginPassword: The password of the administrator login (required
	//for server creation).
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	//AvailabilityZone: availability Zone information of the server.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Backup: Storage Profile properties of a server
	Backup *Backup `json:"backup,omitempty"`

	//CreateMode: The mode to create a new MySQL server.
	CreateMode *ServerPropertiesCreateMode `json:"createMode,omitempty"`

	//HighAvailability: Network related properties of a server
	HighAvailability *HighAvailability `json:"highAvailability,omitempty"`

	//Location: The geo-location where the resource lives
	Location string `json:"location,omitempty"`

	//MaintenanceWindow: Maintenance window of a server.
	MaintenanceWindow *MaintenanceWindow `json:"maintenanceWindow,omitempty"`

	//Network: Network related properties of a server
	Network *Network `json:"network,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//ReplicationRole: The replication role.
	ReplicationRole *ServerPropertiesReplicationRole `json:"replicationRole,omitempty"`

	//RestorePointInTime: Restore point creation time (ISO8601 format), specifying the
	//time to restore from.
	RestorePointInTime *string `json:"restorePointInTime,omitempty"`

	//Sku: Billing information related properties of a server.
	Sku *Sku `json:"sku,omitempty"`

	//SourceServerResourceId: The source MySQL server id.
	SourceServerResourceId *string `json:"sourceServerResourceId,omitempty"`

	//Storage: Storage Profile properties of a server
	Storage *Storage `json:"storage,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	//Version: Server version.
	Version *ServerPropertiesVersion `json:"version,omitempty"`
}

var _ genruntime.ARMTransformer = &FlexibleServers_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (flexibleServersSpec *FlexibleServers_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if flexibleServersSpec == nil {
		return nil, nil
	}
	var result FlexibleServers_SpecARM

	// Set property ‘Location’:
	result.Location = flexibleServersSpec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if flexibleServersSpec.AdministratorLogin != nil {
		administratorLogin := *flexibleServersSpec.AdministratorLogin
		result.Properties.AdministratorLogin = &administratorLogin
	}
	if flexibleServersSpec.AdministratorLoginPassword != nil {
		administratorLoginPassword := *flexibleServersSpec.AdministratorLoginPassword
		result.Properties.AdministratorLoginPassword = &administratorLoginPassword
	}
	if flexibleServersSpec.AvailabilityZone != nil {
		availabilityZone := *flexibleServersSpec.AvailabilityZone
		result.Properties.AvailabilityZone = &availabilityZone
	}
	if flexibleServersSpec.Backup != nil {
		backupARM, err := (*flexibleServersSpec.Backup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		backup := backupARM.(BackupARM)
		result.Properties.Backup = &backup
	}
	if flexibleServersSpec.CreateMode != nil {
		createMode := *flexibleServersSpec.CreateMode
		result.Properties.CreateMode = &createMode
	}
	if flexibleServersSpec.HighAvailability != nil {
		highAvailabilityARM, err := (*flexibleServersSpec.HighAvailability).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		highAvailability := highAvailabilityARM.(HighAvailabilityARM)
		result.Properties.HighAvailability = &highAvailability
	}
	if flexibleServersSpec.MaintenanceWindow != nil {
		maintenanceWindowARM, err := (*flexibleServersSpec.MaintenanceWindow).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		maintenanceWindow := maintenanceWindowARM.(MaintenanceWindowARM)
		result.Properties.MaintenanceWindow = &maintenanceWindow
	}
	if flexibleServersSpec.Network != nil {
		networkARM, err := (*flexibleServersSpec.Network).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		network := networkARM.(NetworkARM)
		result.Properties.Network = &network
	}
	if flexibleServersSpec.ReplicationRole != nil {
		replicationRole := *flexibleServersSpec.ReplicationRole
		result.Properties.ReplicationRole = &replicationRole
	}
	if flexibleServersSpec.RestorePointInTime != nil {
		restorePointInTime := *flexibleServersSpec.RestorePointInTime
		result.Properties.RestorePointInTime = &restorePointInTime
	}
	if flexibleServersSpec.SourceServerResourceId != nil {
		sourceServerResourceId := *flexibleServersSpec.SourceServerResourceId
		result.Properties.SourceServerResourceId = &sourceServerResourceId
	}
	if flexibleServersSpec.Storage != nil {
		storageARM, err := (*flexibleServersSpec.Storage).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		storage := storageARM.(StorageARM)
		result.Properties.Storage = &storage
	}
	if flexibleServersSpec.Version != nil {
		version := *flexibleServersSpec.Version
		result.Properties.Version = &version
	}

	// Set property ‘Sku’:
	if flexibleServersSpec.Sku != nil {
		skuARM, err := (*flexibleServersSpec.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(SkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if flexibleServersSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range flexibleServersSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (flexibleServersSpec *FlexibleServers_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FlexibleServers_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (flexibleServersSpec *FlexibleServers_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FlexibleServers_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FlexibleServers_SpecARM, got %T", armInput)
	}

	// Set property ‘AdministratorLogin’:
	// copying flattened property:
	if typedInput.Properties.AdministratorLogin != nil {
		administratorLogin := *typedInput.Properties.AdministratorLogin
		flexibleServersSpec.AdministratorLogin = &administratorLogin
	}

	// Set property ‘AdministratorLoginPassword’:
	// copying flattened property:
	if typedInput.Properties.AdministratorLoginPassword != nil {
		administratorLoginPassword := *typedInput.Properties.AdministratorLoginPassword
		flexibleServersSpec.AdministratorLoginPassword = &administratorLoginPassword
	}

	// Set property ‘AvailabilityZone’:
	// copying flattened property:
	if typedInput.Properties.AvailabilityZone != nil {
		availabilityZone := *typedInput.Properties.AvailabilityZone
		flexibleServersSpec.AvailabilityZone = &availabilityZone
	}

	// Set property ‘AzureName’:
	flexibleServersSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Backup’:
	// copying flattened property:
	if typedInput.Properties.Backup != nil {
		var backup1 Backup
		err := backup1.PopulateFromARM(owner, *typedInput.Properties.Backup)
		if err != nil {
			return err
		}
		backup := backup1
		flexibleServersSpec.Backup = &backup
	}

	// Set property ‘CreateMode’:
	// copying flattened property:
	if typedInput.Properties.CreateMode != nil {
		createMode := *typedInput.Properties.CreateMode
		flexibleServersSpec.CreateMode = &createMode
	}

	// Set property ‘HighAvailability’:
	// copying flattened property:
	if typedInput.Properties.HighAvailability != nil {
		var highAvailability1 HighAvailability
		err := highAvailability1.PopulateFromARM(owner, *typedInput.Properties.HighAvailability)
		if err != nil {
			return err
		}
		highAvailability := highAvailability1
		flexibleServersSpec.HighAvailability = &highAvailability
	}

	// Set property ‘Location’:
	flexibleServersSpec.Location = typedInput.Location

	// Set property ‘MaintenanceWindow’:
	// copying flattened property:
	if typedInput.Properties.MaintenanceWindow != nil {
		var maintenanceWindow1 MaintenanceWindow
		err := maintenanceWindow1.PopulateFromARM(owner, *typedInput.Properties.MaintenanceWindow)
		if err != nil {
			return err
		}
		maintenanceWindow := maintenanceWindow1
		flexibleServersSpec.MaintenanceWindow = &maintenanceWindow
	}

	// Set property ‘Network’:
	// copying flattened property:
	if typedInput.Properties.Network != nil {
		var network1 Network
		err := network1.PopulateFromARM(owner, *typedInput.Properties.Network)
		if err != nil {
			return err
		}
		network := network1
		flexibleServersSpec.Network = &network
	}

	// Set property ‘Owner’:
	flexibleServersSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘ReplicationRole’:
	// copying flattened property:
	if typedInput.Properties.ReplicationRole != nil {
		replicationRole := *typedInput.Properties.ReplicationRole
		flexibleServersSpec.ReplicationRole = &replicationRole
	}

	// Set property ‘RestorePointInTime’:
	// copying flattened property:
	if typedInput.Properties.RestorePointInTime != nil {
		restorePointInTime := *typedInput.Properties.RestorePointInTime
		flexibleServersSpec.RestorePointInTime = &restorePointInTime
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		flexibleServersSpec.Sku = &sku
	}

	// Set property ‘SourceServerResourceId’:
	// copying flattened property:
	if typedInput.Properties.SourceServerResourceId != nil {
		sourceServerResourceId := *typedInput.Properties.SourceServerResourceId
		flexibleServersSpec.SourceServerResourceId = &sourceServerResourceId
	}

	// Set property ‘Storage’:
	// copying flattened property:
	if typedInput.Properties.Storage != nil {
		var storage1 Storage
		err := storage1.PopulateFromARM(owner, *typedInput.Properties.Storage)
		if err != nil {
			return err
		}
		storage := storage1
		flexibleServersSpec.Storage = &storage
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		flexibleServersSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			flexibleServersSpec.Tags[key] = value
		}
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties.Version != nil {
		version := *typedInput.Properties.Version
		flexibleServersSpec.Version = &version
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FlexibleServers_Spec{}

// ConvertSpecFrom populates our FlexibleServers_Spec from the provided source
func (flexibleServersSpec *FlexibleServers_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210501storage.FlexibleServers_Spec)
	if ok {
		// Populate our instance from source
		return flexibleServersSpec.AssignPropertiesFromFlexibleServersSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210501storage.FlexibleServers_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = flexibleServersSpec.AssignPropertiesFromFlexibleServersSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FlexibleServers_Spec
func (flexibleServersSpec *FlexibleServers_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210501storage.FlexibleServers_Spec)
	if ok {
		// Populate destination from our instance
		return flexibleServersSpec.AssignPropertiesToFlexibleServersSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210501storage.FlexibleServers_Spec{}
	err := flexibleServersSpec.AssignPropertiesToFlexibleServersSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromFlexibleServersSpec populates our FlexibleServers_Spec from the provided source FlexibleServers_Spec
func (flexibleServersSpec *FlexibleServers_Spec) AssignPropertiesFromFlexibleServersSpec(source *v1alpha1api20210501storage.FlexibleServers_Spec) error {

	// AdministratorLogin
	flexibleServersSpec.AdministratorLogin = genruntime.ClonePointerToString(source.AdministratorLogin)

	// AdministratorLoginPassword
	if source.AdministratorLoginPassword != nil {
		administratorLoginPassword := *source.AdministratorLoginPassword
		flexibleServersSpec.AdministratorLoginPassword = &administratorLoginPassword
	} else {
		flexibleServersSpec.AdministratorLoginPassword = nil
	}

	// AvailabilityZone
	flexibleServersSpec.AvailabilityZone = genruntime.ClonePointerToString(source.AvailabilityZone)

	// AzureName
	flexibleServersSpec.AzureName = source.AzureName

	// Backup
	if source.Backup != nil {
		var backup Backup
		err := backup.AssignPropertiesFromBackup(source.Backup)
		if err != nil {
			return errors.Wrap(err, "populating Backup from Backup, calling AssignPropertiesFromBackup()")
		}
		flexibleServersSpec.Backup = &backup
	} else {
		flexibleServersSpec.Backup = nil
	}

	// CreateMode
	if source.CreateMode != nil {
		createMode := ServerPropertiesCreateMode(*source.CreateMode)
		flexibleServersSpec.CreateMode = &createMode
	} else {
		flexibleServersSpec.CreateMode = nil
	}

	// HighAvailability
	if source.HighAvailability != nil {
		var highAvailability HighAvailability
		err := highAvailability.AssignPropertiesFromHighAvailability(source.HighAvailability)
		if err != nil {
			return errors.Wrap(err, "populating HighAvailability from HighAvailability, calling AssignPropertiesFromHighAvailability()")
		}
		flexibleServersSpec.HighAvailability = &highAvailability
	} else {
		flexibleServersSpec.HighAvailability = nil
	}

	// Location
	flexibleServersSpec.Location = genruntime.GetOptionalStringValue(source.Location)

	// MaintenanceWindow
	if source.MaintenanceWindow != nil {
		var maintenanceWindow MaintenanceWindow
		err := maintenanceWindow.AssignPropertiesFromMaintenanceWindow(source.MaintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "populating MaintenanceWindow from MaintenanceWindow, calling AssignPropertiesFromMaintenanceWindow()")
		}
		flexibleServersSpec.MaintenanceWindow = &maintenanceWindow
	} else {
		flexibleServersSpec.MaintenanceWindow = nil
	}

	// Network
	if source.Network != nil {
		var network Network
		err := network.AssignPropertiesFromNetwork(source.Network)
		if err != nil {
			return errors.Wrap(err, "populating Network from Network, calling AssignPropertiesFromNetwork()")
		}
		flexibleServersSpec.Network = &network
	} else {
		flexibleServersSpec.Network = nil
	}

	// Owner
	flexibleServersSpec.Owner = source.Owner.Copy()

	// ReplicationRole
	if source.ReplicationRole != nil {
		replicationRole := ServerPropertiesReplicationRole(*source.ReplicationRole)
		flexibleServersSpec.ReplicationRole = &replicationRole
	} else {
		flexibleServersSpec.ReplicationRole = nil
	}

	// RestorePointInTime
	if source.RestorePointInTime != nil {
		restorePointInTime := *source.RestorePointInTime
		flexibleServersSpec.RestorePointInTime = &restorePointInTime
	} else {
		flexibleServersSpec.RestorePointInTime = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromSku()")
		}
		flexibleServersSpec.Sku = &sku
	} else {
		flexibleServersSpec.Sku = nil
	}

	// SourceServerResourceId
	flexibleServersSpec.SourceServerResourceId = genruntime.ClonePointerToString(source.SourceServerResourceId)

	// Storage
	if source.Storage != nil {
		var storage Storage
		err := storage.AssignPropertiesFromStorage(source.Storage)
		if err != nil {
			return errors.Wrap(err, "populating Storage from Storage, calling AssignPropertiesFromStorage()")
		}
		flexibleServersSpec.Storage = &storage
	} else {
		flexibleServersSpec.Storage = nil
	}

	// Tags
	flexibleServersSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Version
	if source.Version != nil {
		version := ServerPropertiesVersion(*source.Version)
		flexibleServersSpec.Version = &version
	} else {
		flexibleServersSpec.Version = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFlexibleServersSpec populates the provided destination FlexibleServers_Spec from our FlexibleServers_Spec
func (flexibleServersSpec *FlexibleServers_Spec) AssignPropertiesToFlexibleServersSpec(destination *v1alpha1api20210501storage.FlexibleServers_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdministratorLogin
	destination.AdministratorLogin = genruntime.ClonePointerToString(flexibleServersSpec.AdministratorLogin)

	// AdministratorLoginPassword
	if flexibleServersSpec.AdministratorLoginPassword != nil {
		administratorLoginPassword := *flexibleServersSpec.AdministratorLoginPassword
		destination.AdministratorLoginPassword = &administratorLoginPassword
	} else {
		destination.AdministratorLoginPassword = nil
	}

	// AvailabilityZone
	destination.AvailabilityZone = genruntime.ClonePointerToString(flexibleServersSpec.AvailabilityZone)

	// AzureName
	destination.AzureName = flexibleServersSpec.AzureName

	// Backup
	if flexibleServersSpec.Backup != nil {
		var backup v1alpha1api20210501storage.Backup
		err := (*flexibleServersSpec.Backup).AssignPropertiesToBackup(&backup)
		if err != nil {
			return errors.Wrap(err, "populating Backup from Backup, calling AssignPropertiesToBackup()")
		}
		destination.Backup = &backup
	} else {
		destination.Backup = nil
	}

	// CreateMode
	if flexibleServersSpec.CreateMode != nil {
		createMode := string(*flexibleServersSpec.CreateMode)
		destination.CreateMode = &createMode
	} else {
		destination.CreateMode = nil
	}

	// HighAvailability
	if flexibleServersSpec.HighAvailability != nil {
		var highAvailability v1alpha1api20210501storage.HighAvailability
		err := (*flexibleServersSpec.HighAvailability).AssignPropertiesToHighAvailability(&highAvailability)
		if err != nil {
			return errors.Wrap(err, "populating HighAvailability from HighAvailability, calling AssignPropertiesToHighAvailability()")
		}
		destination.HighAvailability = &highAvailability
	} else {
		destination.HighAvailability = nil
	}

	// Location
	location := flexibleServersSpec.Location
	destination.Location = &location

	// MaintenanceWindow
	if flexibleServersSpec.MaintenanceWindow != nil {
		var maintenanceWindow v1alpha1api20210501storage.MaintenanceWindow
		err := (*flexibleServersSpec.MaintenanceWindow).AssignPropertiesToMaintenanceWindow(&maintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "populating MaintenanceWindow from MaintenanceWindow, calling AssignPropertiesToMaintenanceWindow()")
		}
		destination.MaintenanceWindow = &maintenanceWindow
	} else {
		destination.MaintenanceWindow = nil
	}

	// Network
	if flexibleServersSpec.Network != nil {
		var network v1alpha1api20210501storage.Network
		err := (*flexibleServersSpec.Network).AssignPropertiesToNetwork(&network)
		if err != nil {
			return errors.Wrap(err, "populating Network from Network, calling AssignPropertiesToNetwork()")
		}
		destination.Network = &network
	} else {
		destination.Network = nil
	}

	// OriginalVersion
	destination.OriginalVersion = flexibleServersSpec.OriginalVersion()

	// Owner
	destination.Owner = flexibleServersSpec.Owner.Copy()

	// ReplicationRole
	if flexibleServersSpec.ReplicationRole != nil {
		replicationRole := string(*flexibleServersSpec.ReplicationRole)
		destination.ReplicationRole = &replicationRole
	} else {
		destination.ReplicationRole = nil
	}

	// RestorePointInTime
	if flexibleServersSpec.RestorePointInTime != nil {
		restorePointInTime := *flexibleServersSpec.RestorePointInTime
		destination.RestorePointInTime = &restorePointInTime
	} else {
		destination.RestorePointInTime = nil
	}

	// Sku
	if flexibleServersSpec.Sku != nil {
		var sku v1alpha1api20210501storage.Sku
		err := (*flexibleServersSpec.Sku).AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToSku()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SourceServerResourceId
	destination.SourceServerResourceId = genruntime.ClonePointerToString(flexibleServersSpec.SourceServerResourceId)

	// Storage
	if flexibleServersSpec.Storage != nil {
		var storage v1alpha1api20210501storage.Storage
		err := (*flexibleServersSpec.Storage).AssignPropertiesToStorage(&storage)
		if err != nil {
			return errors.Wrap(err, "populating Storage from Storage, calling AssignPropertiesToStorage()")
		}
		destination.Storage = &storage
	} else {
		destination.Storage = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(flexibleServersSpec.Tags)

	// Version
	if flexibleServersSpec.Version != nil {
		version := string(*flexibleServersSpec.Version)
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (flexibleServersSpec *FlexibleServers_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (flexibleServersSpec *FlexibleServers_Spec) SetAzureName(azureName string) {
	flexibleServersSpec.AzureName = azureName
}

type Server_Status struct {
	//AdministratorLogin: The administrator's login name of a server. Can only be
	//specified when the server is being created (and is required for creation).
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	//AdministratorLoginPassword: The password of the administrator login (required
	//for server creation).
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	//AvailabilityZone: availability Zone information of the server.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	//Backup: Backup related properties of a server.
	Backup *Backup_Status `json:"backup,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreateMode: The mode to create a new MySQL server.
	CreateMode *ServerPropertiesStatusCreateMode `json:"createMode,omitempty"`

	//FullyQualifiedDomainName: The fully qualified domain name of a server.
	FullyQualifiedDomainName *string `json:"fullyQualifiedDomainName,omitempty"`

	//HighAvailability: High availability related properties of a server.
	HighAvailability *HighAvailability_Status `json:"highAvailability,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MaintenanceWindow: Maintenance window of a server.
	MaintenanceWindow *MaintenanceWindow_Status `json:"maintenanceWindow,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//Network: Network related properties of a server.
	Network *Network_Status `json:"network,omitempty"`

	//ReplicaCapacity: The maximum number of replicas that a primary server can have.
	ReplicaCapacity *int `json:"replicaCapacity,omitempty"`

	//ReplicationRole: The replication role.
	ReplicationRole *ReplicationRole_Status `json:"replicationRole,omitempty"`

	//RestorePointInTime: Restore point creation time (ISO8601 format), specifying the
	//time to restore from.
	RestorePointInTime *string `json:"restorePointInTime,omitempty"`

	//Sku: The SKU (pricing tier) of the server.
	Sku *Sku_Status `json:"sku,omitempty"`

	//SourceServerResourceId: The source MySQL server id.
	SourceServerResourceId *string `json:"sourceServerResourceId,omitempty"`

	//State: The state of a server.
	State *ServerPropertiesStatusState `json:"state,omitempty"`

	//Storage: Storage related properties of a server.
	Storage *Storage_Status `json:"storage,omitempty"`

	//SystemData: The system metadata relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	//Version: Server version.
	Version *ServerVersion_Status `json:"version,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Server_Status{}

// ConvertStatusFrom populates our Server_Status from the provided source
func (serverStatus *Server_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210501storage.Server_Status)
	if ok {
		// Populate our instance from source
		return serverStatus.AssignPropertiesFromServerStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210501storage.Server_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = serverStatus.AssignPropertiesFromServerStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Server_Status
func (serverStatus *Server_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210501storage.Server_Status)
	if ok {
		// Populate destination from our instance
		return serverStatus.AssignPropertiesToServerStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210501storage.Server_Status{}
	err := serverStatus.AssignPropertiesToServerStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Server_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serverStatus *Server_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Server_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serverStatus *Server_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Server_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Server_StatusARM, got %T", armInput)
	}

	// Set property ‘AdministratorLogin’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdministratorLogin != nil {
			administratorLogin := *typedInput.Properties.AdministratorLogin
			serverStatus.AdministratorLogin = &administratorLogin
		}
	}

	// Set property ‘AdministratorLoginPassword’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdministratorLoginPassword != nil {
			administratorLoginPassword := *typedInput.Properties.AdministratorLoginPassword
			serverStatus.AdministratorLoginPassword = &administratorLoginPassword
		}
	}

	// Set property ‘AvailabilityZone’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AvailabilityZone != nil {
			availabilityZone := *typedInput.Properties.AvailabilityZone
			serverStatus.AvailabilityZone = &availabilityZone
		}
	}

	// Set property ‘Backup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Backup != nil {
			var backup1 Backup_Status
			err := backup1.PopulateFromARM(owner, *typedInput.Properties.Backup)
			if err != nil {
				return err
			}
			backup := backup1
			serverStatus.Backup = &backup
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreateMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreateMode != nil {
			createMode := *typedInput.Properties.CreateMode
			serverStatus.CreateMode = &createMode
		}
	}

	// Set property ‘FullyQualifiedDomainName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FullyQualifiedDomainName != nil {
			fullyQualifiedDomainName := *typedInput.Properties.FullyQualifiedDomainName
			serverStatus.FullyQualifiedDomainName = &fullyQualifiedDomainName
		}
	}

	// Set property ‘HighAvailability’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HighAvailability != nil {
			var highAvailability1 HighAvailability_Status
			err := highAvailability1.PopulateFromARM(owner, *typedInput.Properties.HighAvailability)
			if err != nil {
				return err
			}
			highAvailability := highAvailability1
			serverStatus.HighAvailability = &highAvailability
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		serverStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		serverStatus.Location = &location
	}

	// Set property ‘MaintenanceWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaintenanceWindow != nil {
			var maintenanceWindow1 MaintenanceWindow_Status
			err := maintenanceWindow1.PopulateFromARM(owner, *typedInput.Properties.MaintenanceWindow)
			if err != nil {
				return err
			}
			maintenanceWindow := maintenanceWindow1
			serverStatus.MaintenanceWindow = &maintenanceWindow
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		serverStatus.Name = &name
	}

	// Set property ‘Network’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Network != nil {
			var network1 Network_Status
			err := network1.PopulateFromARM(owner, *typedInput.Properties.Network)
			if err != nil {
				return err
			}
			network := network1
			serverStatus.Network = &network
		}
	}

	// Set property ‘ReplicaCapacity’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicaCapacity != nil {
			replicaCapacity := *typedInput.Properties.ReplicaCapacity
			serverStatus.ReplicaCapacity = &replicaCapacity
		}
	}

	// Set property ‘ReplicationRole’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicationRole != nil {
			replicationRole := *typedInput.Properties.ReplicationRole
			serverStatus.ReplicationRole = &replicationRole
		}
	}

	// Set property ‘RestorePointInTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePointInTime != nil {
			restorePointInTime := *typedInput.Properties.RestorePointInTime
			serverStatus.RestorePointInTime = &restorePointInTime
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		serverStatus.Sku = &sku
	}

	// Set property ‘SourceServerResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceServerResourceId != nil {
			sourceServerResourceId := *typedInput.Properties.SourceServerResourceId
			serverStatus.SourceServerResourceId = &sourceServerResourceId
		}
	}

	// Set property ‘State’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			state := *typedInput.Properties.State
			serverStatus.State = &state
		}
	}

	// Set property ‘Storage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Storage != nil {
			var storage1 Storage_Status
			err := storage1.PopulateFromARM(owner, *typedInput.Properties.Storage)
			if err != nil {
				return err
			}
			storage := storage1
			serverStatus.Storage = &storage
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		serverStatus.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		serverStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			serverStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		serverStatus.Type = &typeVar
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			serverStatus.Version = &version
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromServerStatus populates our Server_Status from the provided source Server_Status
func (serverStatus *Server_Status) AssignPropertiesFromServerStatus(source *v1alpha1api20210501storage.Server_Status) error {

	// AdministratorLogin
	serverStatus.AdministratorLogin = genruntime.ClonePointerToString(source.AdministratorLogin)

	// AdministratorLoginPassword
	serverStatus.AdministratorLoginPassword = genruntime.ClonePointerToString(source.AdministratorLoginPassword)

	// AvailabilityZone
	serverStatus.AvailabilityZone = genruntime.ClonePointerToString(source.AvailabilityZone)

	// Backup
	if source.Backup != nil {
		var backup Backup_Status
		err := backup.AssignPropertiesFromBackupStatus(source.Backup)
		if err != nil {
			return errors.Wrap(err, "populating Backup from Backup, calling AssignPropertiesFromBackupStatus()")
		}
		serverStatus.Backup = &backup
	} else {
		serverStatus.Backup = nil
	}

	// Conditions
	serverStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreateMode
	if source.CreateMode != nil {
		createMode := ServerPropertiesStatusCreateMode(*source.CreateMode)
		serverStatus.CreateMode = &createMode
	} else {
		serverStatus.CreateMode = nil
	}

	// FullyQualifiedDomainName
	serverStatus.FullyQualifiedDomainName = genruntime.ClonePointerToString(source.FullyQualifiedDomainName)

	// HighAvailability
	if source.HighAvailability != nil {
		var highAvailability HighAvailability_Status
		err := highAvailability.AssignPropertiesFromHighAvailabilityStatus(source.HighAvailability)
		if err != nil {
			return errors.Wrap(err, "populating HighAvailability from HighAvailability, calling AssignPropertiesFromHighAvailabilityStatus()")
		}
		serverStatus.HighAvailability = &highAvailability
	} else {
		serverStatus.HighAvailability = nil
	}

	// Id
	serverStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	serverStatus.Location = genruntime.ClonePointerToString(source.Location)

	// MaintenanceWindow
	if source.MaintenanceWindow != nil {
		var maintenanceWindow MaintenanceWindow_Status
		err := maintenanceWindow.AssignPropertiesFromMaintenanceWindowStatus(source.MaintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "populating MaintenanceWindow from MaintenanceWindow, calling AssignPropertiesFromMaintenanceWindowStatus()")
		}
		serverStatus.MaintenanceWindow = &maintenanceWindow
	} else {
		serverStatus.MaintenanceWindow = nil
	}

	// Name
	serverStatus.Name = genruntime.ClonePointerToString(source.Name)

	// Network
	if source.Network != nil {
		var network Network_Status
		err := network.AssignPropertiesFromNetworkStatus(source.Network)
		if err != nil {
			return errors.Wrap(err, "populating Network from Network, calling AssignPropertiesFromNetworkStatus()")
		}
		serverStatus.Network = &network
	} else {
		serverStatus.Network = nil
	}

	// ReplicaCapacity
	serverStatus.ReplicaCapacity = genruntime.ClonePointerToInt(source.ReplicaCapacity)

	// ReplicationRole
	if source.ReplicationRole != nil {
		replicationRole := ReplicationRole_Status(*source.ReplicationRole)
		serverStatus.ReplicationRole = &replicationRole
	} else {
		serverStatus.ReplicationRole = nil
	}

	// RestorePointInTime
	serverStatus.RestorePointInTime = genruntime.ClonePointerToString(source.RestorePointInTime)

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromSkuStatus()")
		}
		serverStatus.Sku = &sku
	} else {
		serverStatus.Sku = nil
	}

	// SourceServerResourceId
	serverStatus.SourceServerResourceId = genruntime.ClonePointerToString(source.SourceServerResourceId)

	// State
	if source.State != nil {
		state := ServerPropertiesStatusState(*source.State)
		serverStatus.State = &state
	} else {
		serverStatus.State = nil
	}

	// Storage
	if source.Storage != nil {
		var storage Storage_Status
		err := storage.AssignPropertiesFromStorageStatus(source.Storage)
		if err != nil {
			return errors.Wrap(err, "populating Storage from Storage, calling AssignPropertiesFromStorageStatus()")
		}
		serverStatus.Storage = &storage
	} else {
		serverStatus.Storage = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesFromSystemDataStatus()")
		}
		serverStatus.SystemData = &systemDatum
	} else {
		serverStatus.SystemData = nil
	}

	// Tags
	serverStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	serverStatus.Type = genruntime.ClonePointerToString(source.Type)

	// Version
	if source.Version != nil {
		version := ServerVersion_Status(*source.Version)
		serverStatus.Version = &version
	} else {
		serverStatus.Version = nil
	}

	// No error
	return nil
}

// AssignPropertiesToServerStatus populates the provided destination Server_Status from our Server_Status
func (serverStatus *Server_Status) AssignPropertiesToServerStatus(destination *v1alpha1api20210501storage.Server_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdministratorLogin
	destination.AdministratorLogin = genruntime.ClonePointerToString(serverStatus.AdministratorLogin)

	// AdministratorLoginPassword
	destination.AdministratorLoginPassword = genruntime.ClonePointerToString(serverStatus.AdministratorLoginPassword)

	// AvailabilityZone
	destination.AvailabilityZone = genruntime.ClonePointerToString(serverStatus.AvailabilityZone)

	// Backup
	if serverStatus.Backup != nil {
		var backup v1alpha1api20210501storage.Backup_Status
		err := (*serverStatus.Backup).AssignPropertiesToBackupStatus(&backup)
		if err != nil {
			return errors.Wrap(err, "populating Backup from Backup, calling AssignPropertiesToBackupStatus()")
		}
		destination.Backup = &backup
	} else {
		destination.Backup = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(serverStatus.Conditions)

	// CreateMode
	if serverStatus.CreateMode != nil {
		createMode := string(*serverStatus.CreateMode)
		destination.CreateMode = &createMode
	} else {
		destination.CreateMode = nil
	}

	// FullyQualifiedDomainName
	destination.FullyQualifiedDomainName = genruntime.ClonePointerToString(serverStatus.FullyQualifiedDomainName)

	// HighAvailability
	if serverStatus.HighAvailability != nil {
		var highAvailability v1alpha1api20210501storage.HighAvailability_Status
		err := (*serverStatus.HighAvailability).AssignPropertiesToHighAvailabilityStatus(&highAvailability)
		if err != nil {
			return errors.Wrap(err, "populating HighAvailability from HighAvailability, calling AssignPropertiesToHighAvailabilityStatus()")
		}
		destination.HighAvailability = &highAvailability
	} else {
		destination.HighAvailability = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(serverStatus.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(serverStatus.Location)

	// MaintenanceWindow
	if serverStatus.MaintenanceWindow != nil {
		var maintenanceWindow v1alpha1api20210501storage.MaintenanceWindow_Status
		err := (*serverStatus.MaintenanceWindow).AssignPropertiesToMaintenanceWindowStatus(&maintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "populating MaintenanceWindow from MaintenanceWindow, calling AssignPropertiesToMaintenanceWindowStatus()")
		}
		destination.MaintenanceWindow = &maintenanceWindow
	} else {
		destination.MaintenanceWindow = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(serverStatus.Name)

	// Network
	if serverStatus.Network != nil {
		var network v1alpha1api20210501storage.Network_Status
		err := (*serverStatus.Network).AssignPropertiesToNetworkStatus(&network)
		if err != nil {
			return errors.Wrap(err, "populating Network from Network, calling AssignPropertiesToNetworkStatus()")
		}
		destination.Network = &network
	} else {
		destination.Network = nil
	}

	// ReplicaCapacity
	destination.ReplicaCapacity = genruntime.ClonePointerToInt(serverStatus.ReplicaCapacity)

	// ReplicationRole
	if serverStatus.ReplicationRole != nil {
		replicationRole := string(*serverStatus.ReplicationRole)
		destination.ReplicationRole = &replicationRole
	} else {
		destination.ReplicationRole = nil
	}

	// RestorePointInTime
	destination.RestorePointInTime = genruntime.ClonePointerToString(serverStatus.RestorePointInTime)

	// Sku
	if serverStatus.Sku != nil {
		var sku v1alpha1api20210501storage.Sku_Status
		err := (*serverStatus.Sku).AssignPropertiesToSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToSkuStatus()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SourceServerResourceId
	destination.SourceServerResourceId = genruntime.ClonePointerToString(serverStatus.SourceServerResourceId)

	// State
	if serverStatus.State != nil {
		state := string(*serverStatus.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Storage
	if serverStatus.Storage != nil {
		var storage v1alpha1api20210501storage.Storage_Status
		err := (*serverStatus.Storage).AssignPropertiesToStorageStatus(&storage)
		if err != nil {
			return errors.Wrap(err, "populating Storage from Storage, calling AssignPropertiesToStorageStatus()")
		}
		destination.Storage = &storage
	} else {
		destination.Storage = nil
	}

	// SystemData
	if serverStatus.SystemData != nil {
		var systemDatum v1alpha1api20210501storage.SystemData_Status
		err := (*serverStatus.SystemData).AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "populating SystemData from SystemData, calling AssignPropertiesToSystemDataStatus()")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(serverStatus.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(serverStatus.Type)

	// Version
	if serverStatus.Version != nil {
		version := string(*serverStatus.Version)
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.DBforMySQL.json#/definitions/Backup
type Backup struct {
	//BackupRetentionDays: Backup retention days for the server.
	BackupRetentionDays *int `json:"backupRetentionDays,omitempty"`

	//GeoRedundantBackup: Whether or not geo redundant backup is enabled.
	GeoRedundantBackup *BackupGeoRedundantBackup `json:"geoRedundantBackup,omitempty"`
}

var _ genruntime.ARMTransformer = &Backup{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (backup *Backup) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if backup == nil {
		return nil, nil
	}
	var result BackupARM

	// Set property ‘BackupRetentionDays’:
	if backup.BackupRetentionDays != nil {
		backupRetentionDays := *backup.BackupRetentionDays
		result.BackupRetentionDays = &backupRetentionDays
	}

	// Set property ‘GeoRedundantBackup’:
	if backup.GeoRedundantBackup != nil {
		geoRedundantBackup := *backup.GeoRedundantBackup
		result.GeoRedundantBackup = &geoRedundantBackup
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backup *Backup) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BackupARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backup *Backup) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BackupARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BackupARM, got %T", armInput)
	}

	// Set property ‘BackupRetentionDays’:
	if typedInput.BackupRetentionDays != nil {
		backupRetentionDays := *typedInput.BackupRetentionDays
		backup.BackupRetentionDays = &backupRetentionDays
	}

	// Set property ‘GeoRedundantBackup’:
	if typedInput.GeoRedundantBackup != nil {
		geoRedundantBackup := *typedInput.GeoRedundantBackup
		backup.GeoRedundantBackup = &geoRedundantBackup
	}

	// No error
	return nil
}

// AssignPropertiesFromBackup populates our Backup from the provided source Backup
func (backup *Backup) AssignPropertiesFromBackup(source *v1alpha1api20210501storage.Backup) error {

	// BackupRetentionDays
	backup.BackupRetentionDays = genruntime.ClonePointerToInt(source.BackupRetentionDays)

	// GeoRedundantBackup
	if source.GeoRedundantBackup != nil {
		geoRedundantBackup := BackupGeoRedundantBackup(*source.GeoRedundantBackup)
		backup.GeoRedundantBackup = &geoRedundantBackup
	} else {
		backup.GeoRedundantBackup = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBackup populates the provided destination Backup from our Backup
func (backup *Backup) AssignPropertiesToBackup(destination *v1alpha1api20210501storage.Backup) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BackupRetentionDays
	destination.BackupRetentionDays = genruntime.ClonePointerToInt(backup.BackupRetentionDays)

	// GeoRedundantBackup
	if backup.GeoRedundantBackup != nil {
		geoRedundantBackup := string(*backup.GeoRedundantBackup)
		destination.GeoRedundantBackup = &geoRedundantBackup
	} else {
		destination.GeoRedundantBackup = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Backup_Status struct {
	//BackupRetentionDays: Backup retention days for the server.
	BackupRetentionDays *int `json:"backupRetentionDays,omitempty"`

	//EarliestRestoreDate: Earliest restore point creation time (ISO8601 format)
	EarliestRestoreDate *string `json:"earliestRestoreDate,omitempty"`

	//GeoRedundantBackup: Whether or not geo redundant backup is enabled.
	GeoRedundantBackup *EnableStatusEnum_Status `json:"geoRedundantBackup,omitempty"`
}

var _ genruntime.FromARMConverter = &Backup_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backupStatus *Backup_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Backup_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backupStatus *Backup_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Backup_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Backup_StatusARM, got %T", armInput)
	}

	// Set property ‘BackupRetentionDays’:
	if typedInput.BackupRetentionDays != nil {
		backupRetentionDays := *typedInput.BackupRetentionDays
		backupStatus.BackupRetentionDays = &backupRetentionDays
	}

	// Set property ‘EarliestRestoreDate’:
	if typedInput.EarliestRestoreDate != nil {
		earliestRestoreDate := *typedInput.EarliestRestoreDate
		backupStatus.EarliestRestoreDate = &earliestRestoreDate
	}

	// Set property ‘GeoRedundantBackup’:
	if typedInput.GeoRedundantBackup != nil {
		geoRedundantBackup := *typedInput.GeoRedundantBackup
		backupStatus.GeoRedundantBackup = &geoRedundantBackup
	}

	// No error
	return nil
}

// AssignPropertiesFromBackupStatus populates our Backup_Status from the provided source Backup_Status
func (backupStatus *Backup_Status) AssignPropertiesFromBackupStatus(source *v1alpha1api20210501storage.Backup_Status) error {

	// BackupRetentionDays
	backupStatus.BackupRetentionDays = genruntime.ClonePointerToInt(source.BackupRetentionDays)

	// EarliestRestoreDate
	backupStatus.EarliestRestoreDate = genruntime.ClonePointerToString(source.EarliestRestoreDate)

	// GeoRedundantBackup
	if source.GeoRedundantBackup != nil {
		geoRedundantBackup := EnableStatusEnum_Status(*source.GeoRedundantBackup)
		backupStatus.GeoRedundantBackup = &geoRedundantBackup
	} else {
		backupStatus.GeoRedundantBackup = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBackupStatus populates the provided destination Backup_Status from our Backup_Status
func (backupStatus *Backup_Status) AssignPropertiesToBackupStatus(destination *v1alpha1api20210501storage.Backup_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BackupRetentionDays
	destination.BackupRetentionDays = genruntime.ClonePointerToInt(backupStatus.BackupRetentionDays)

	// EarliestRestoreDate
	destination.EarliestRestoreDate = genruntime.ClonePointerToString(backupStatus.EarliestRestoreDate)

	// GeoRedundantBackup
	if backupStatus.GeoRedundantBackup != nil {
		geoRedundantBackup := string(*backupStatus.GeoRedundantBackup)
		destination.GeoRedundantBackup = &geoRedundantBackup
	} else {
		destination.GeoRedundantBackup = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.DBforMySQL.json#/definitions/HighAvailability
type HighAvailability struct {
	//Mode: High availability mode for a server.
	Mode *HighAvailabilityMode `json:"mode,omitempty"`

	//StandbyAvailabilityZone: Availability zone of the standby server.
	StandbyAvailabilityZone *string `json:"standbyAvailabilityZone,omitempty"`
}

var _ genruntime.ARMTransformer = &HighAvailability{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (highAvailability *HighAvailability) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if highAvailability == nil {
		return nil, nil
	}
	var result HighAvailabilityARM

	// Set property ‘Mode’:
	if highAvailability.Mode != nil {
		mode := *highAvailability.Mode
		result.Mode = &mode
	}

	// Set property ‘StandbyAvailabilityZone’:
	if highAvailability.StandbyAvailabilityZone != nil {
		standbyAvailabilityZone := *highAvailability.StandbyAvailabilityZone
		result.StandbyAvailabilityZone = &standbyAvailabilityZone
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (highAvailability *HighAvailability) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HighAvailabilityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (highAvailability *HighAvailability) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HighAvailabilityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HighAvailabilityARM, got %T", armInput)
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		highAvailability.Mode = &mode
	}

	// Set property ‘StandbyAvailabilityZone’:
	if typedInput.StandbyAvailabilityZone != nil {
		standbyAvailabilityZone := *typedInput.StandbyAvailabilityZone
		highAvailability.StandbyAvailabilityZone = &standbyAvailabilityZone
	}

	// No error
	return nil
}

// AssignPropertiesFromHighAvailability populates our HighAvailability from the provided source HighAvailability
func (highAvailability *HighAvailability) AssignPropertiesFromHighAvailability(source *v1alpha1api20210501storage.HighAvailability) error {

	// Mode
	if source.Mode != nil {
		mode := HighAvailabilityMode(*source.Mode)
		highAvailability.Mode = &mode
	} else {
		highAvailability.Mode = nil
	}

	// StandbyAvailabilityZone
	highAvailability.StandbyAvailabilityZone = genruntime.ClonePointerToString(source.StandbyAvailabilityZone)

	// No error
	return nil
}

// AssignPropertiesToHighAvailability populates the provided destination HighAvailability from our HighAvailability
func (highAvailability *HighAvailability) AssignPropertiesToHighAvailability(destination *v1alpha1api20210501storage.HighAvailability) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Mode
	if highAvailability.Mode != nil {
		mode := string(*highAvailability.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// StandbyAvailabilityZone
	destination.StandbyAvailabilityZone = genruntime.ClonePointerToString(highAvailability.StandbyAvailabilityZone)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HighAvailability_Status struct {
	//Mode: High availability mode for a server.
	Mode *HighAvailabilityStatusMode `json:"mode,omitempty"`

	//StandbyAvailabilityZone: Availability zone of the standby server.
	StandbyAvailabilityZone *string `json:"standbyAvailabilityZone,omitempty"`

	//State: The state of server high availability.
	State *HighAvailabilityStatusState `json:"state,omitempty"`
}

var _ genruntime.FromARMConverter = &HighAvailability_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (highAvailabilityStatus *HighAvailability_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HighAvailability_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (highAvailabilityStatus *HighAvailability_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HighAvailability_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HighAvailability_StatusARM, got %T", armInput)
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		highAvailabilityStatus.Mode = &mode
	}

	// Set property ‘StandbyAvailabilityZone’:
	if typedInput.StandbyAvailabilityZone != nil {
		standbyAvailabilityZone := *typedInput.StandbyAvailabilityZone
		highAvailabilityStatus.StandbyAvailabilityZone = &standbyAvailabilityZone
	}

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		highAvailabilityStatus.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromHighAvailabilityStatus populates our HighAvailability_Status from the provided source HighAvailability_Status
func (highAvailabilityStatus *HighAvailability_Status) AssignPropertiesFromHighAvailabilityStatus(source *v1alpha1api20210501storage.HighAvailability_Status) error {

	// Mode
	if source.Mode != nil {
		mode := HighAvailabilityStatusMode(*source.Mode)
		highAvailabilityStatus.Mode = &mode
	} else {
		highAvailabilityStatus.Mode = nil
	}

	// StandbyAvailabilityZone
	highAvailabilityStatus.StandbyAvailabilityZone = genruntime.ClonePointerToString(source.StandbyAvailabilityZone)

	// State
	if source.State != nil {
		state := HighAvailabilityStatusState(*source.State)
		highAvailabilityStatus.State = &state
	} else {
		highAvailabilityStatus.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToHighAvailabilityStatus populates the provided destination HighAvailability_Status from our HighAvailability_Status
func (highAvailabilityStatus *HighAvailability_Status) AssignPropertiesToHighAvailabilityStatus(destination *v1alpha1api20210501storage.HighAvailability_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Mode
	if highAvailabilityStatus.Mode != nil {
		mode := string(*highAvailabilityStatus.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// StandbyAvailabilityZone
	destination.StandbyAvailabilityZone = genruntime.ClonePointerToString(highAvailabilityStatus.StandbyAvailabilityZone)

	// State
	if highAvailabilityStatus.State != nil {
		state := string(*highAvailabilityStatus.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.DBforMySQL.json#/definitions/MaintenanceWindow
type MaintenanceWindow struct {
	//CustomWindow: indicates whether custom window is enabled or disabled
	CustomWindow *string `json:"customWindow,omitempty"`

	//DayOfWeek: day of week for maintenance window
	DayOfWeek *int `json:"dayOfWeek,omitempty"`

	//StartHour: start hour for maintenance window
	StartHour *int `json:"startHour,omitempty"`

	//StartMinute: start minute for maintenance window
	StartMinute *int `json:"startMinute,omitempty"`
}

var _ genruntime.ARMTransformer = &MaintenanceWindow{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (maintenanceWindow *MaintenanceWindow) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if maintenanceWindow == nil {
		return nil, nil
	}
	var result MaintenanceWindowARM

	// Set property ‘CustomWindow’:
	if maintenanceWindow.CustomWindow != nil {
		customWindow := *maintenanceWindow.CustomWindow
		result.CustomWindow = &customWindow
	}

	// Set property ‘DayOfWeek’:
	if maintenanceWindow.DayOfWeek != nil {
		dayOfWeek := *maintenanceWindow.DayOfWeek
		result.DayOfWeek = &dayOfWeek
	}

	// Set property ‘StartHour’:
	if maintenanceWindow.StartHour != nil {
		startHour := *maintenanceWindow.StartHour
		result.StartHour = &startHour
	}

	// Set property ‘StartMinute’:
	if maintenanceWindow.StartMinute != nil {
		startMinute := *maintenanceWindow.StartMinute
		result.StartMinute = &startMinute
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (maintenanceWindow *MaintenanceWindow) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MaintenanceWindowARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (maintenanceWindow *MaintenanceWindow) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MaintenanceWindowARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MaintenanceWindowARM, got %T", armInput)
	}

	// Set property ‘CustomWindow’:
	if typedInput.CustomWindow != nil {
		customWindow := *typedInput.CustomWindow
		maintenanceWindow.CustomWindow = &customWindow
	}

	// Set property ‘DayOfWeek’:
	if typedInput.DayOfWeek != nil {
		dayOfWeek := *typedInput.DayOfWeek
		maintenanceWindow.DayOfWeek = &dayOfWeek
	}

	// Set property ‘StartHour’:
	if typedInput.StartHour != nil {
		startHour := *typedInput.StartHour
		maintenanceWindow.StartHour = &startHour
	}

	// Set property ‘StartMinute’:
	if typedInput.StartMinute != nil {
		startMinute := *typedInput.StartMinute
		maintenanceWindow.StartMinute = &startMinute
	}

	// No error
	return nil
}

// AssignPropertiesFromMaintenanceWindow populates our MaintenanceWindow from the provided source MaintenanceWindow
func (maintenanceWindow *MaintenanceWindow) AssignPropertiesFromMaintenanceWindow(source *v1alpha1api20210501storage.MaintenanceWindow) error {

	// CustomWindow
	maintenanceWindow.CustomWindow = genruntime.ClonePointerToString(source.CustomWindow)

	// DayOfWeek
	maintenanceWindow.DayOfWeek = genruntime.ClonePointerToInt(source.DayOfWeek)

	// StartHour
	maintenanceWindow.StartHour = genruntime.ClonePointerToInt(source.StartHour)

	// StartMinute
	maintenanceWindow.StartMinute = genruntime.ClonePointerToInt(source.StartMinute)

	// No error
	return nil
}

// AssignPropertiesToMaintenanceWindow populates the provided destination MaintenanceWindow from our MaintenanceWindow
func (maintenanceWindow *MaintenanceWindow) AssignPropertiesToMaintenanceWindow(destination *v1alpha1api20210501storage.MaintenanceWindow) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomWindow
	destination.CustomWindow = genruntime.ClonePointerToString(maintenanceWindow.CustomWindow)

	// DayOfWeek
	destination.DayOfWeek = genruntime.ClonePointerToInt(maintenanceWindow.DayOfWeek)

	// StartHour
	destination.StartHour = genruntime.ClonePointerToInt(maintenanceWindow.StartHour)

	// StartMinute
	destination.StartMinute = genruntime.ClonePointerToInt(maintenanceWindow.StartMinute)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MaintenanceWindow_Status struct {
	//CustomWindow: indicates whether custom window is enabled or disabled
	CustomWindow *string `json:"customWindow,omitempty"`

	//DayOfWeek: day of week for maintenance window
	DayOfWeek *int `json:"dayOfWeek,omitempty"`

	//StartHour: start hour for maintenance window
	StartHour *int `json:"startHour,omitempty"`

	//StartMinute: start minute for maintenance window
	StartMinute *int `json:"startMinute,omitempty"`
}

var _ genruntime.FromARMConverter = &MaintenanceWindow_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (maintenanceWindowStatus *MaintenanceWindow_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MaintenanceWindow_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (maintenanceWindowStatus *MaintenanceWindow_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MaintenanceWindow_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MaintenanceWindow_StatusARM, got %T", armInput)
	}

	// Set property ‘CustomWindow’:
	if typedInput.CustomWindow != nil {
		customWindow := *typedInput.CustomWindow
		maintenanceWindowStatus.CustomWindow = &customWindow
	}

	// Set property ‘DayOfWeek’:
	if typedInput.DayOfWeek != nil {
		dayOfWeek := *typedInput.DayOfWeek
		maintenanceWindowStatus.DayOfWeek = &dayOfWeek
	}

	// Set property ‘StartHour’:
	if typedInput.StartHour != nil {
		startHour := *typedInput.StartHour
		maintenanceWindowStatus.StartHour = &startHour
	}

	// Set property ‘StartMinute’:
	if typedInput.StartMinute != nil {
		startMinute := *typedInput.StartMinute
		maintenanceWindowStatus.StartMinute = &startMinute
	}

	// No error
	return nil
}

// AssignPropertiesFromMaintenanceWindowStatus populates our MaintenanceWindow_Status from the provided source MaintenanceWindow_Status
func (maintenanceWindowStatus *MaintenanceWindow_Status) AssignPropertiesFromMaintenanceWindowStatus(source *v1alpha1api20210501storage.MaintenanceWindow_Status) error {

	// CustomWindow
	maintenanceWindowStatus.CustomWindow = genruntime.ClonePointerToString(source.CustomWindow)

	// DayOfWeek
	maintenanceWindowStatus.DayOfWeek = genruntime.ClonePointerToInt(source.DayOfWeek)

	// StartHour
	maintenanceWindowStatus.StartHour = genruntime.ClonePointerToInt(source.StartHour)

	// StartMinute
	maintenanceWindowStatus.StartMinute = genruntime.ClonePointerToInt(source.StartMinute)

	// No error
	return nil
}

// AssignPropertiesToMaintenanceWindowStatus populates the provided destination MaintenanceWindow_Status from our MaintenanceWindow_Status
func (maintenanceWindowStatus *MaintenanceWindow_Status) AssignPropertiesToMaintenanceWindowStatus(destination *v1alpha1api20210501storage.MaintenanceWindow_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomWindow
	destination.CustomWindow = genruntime.ClonePointerToString(maintenanceWindowStatus.CustomWindow)

	// DayOfWeek
	destination.DayOfWeek = genruntime.ClonePointerToInt(maintenanceWindowStatus.DayOfWeek)

	// StartHour
	destination.StartHour = genruntime.ClonePointerToInt(maintenanceWindowStatus.StartHour)

	// StartMinute
	destination.StartMinute = genruntime.ClonePointerToInt(maintenanceWindowStatus.StartMinute)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.DBforMySQL.json#/definitions/Network
type Network struct {
	//DelegatedSubnetResourceReference: Delegated subnet resource id used to setup
	//vnet for a server.
	DelegatedSubnetResourceReference *genruntime.ResourceReference `armReference:"DelegatedSubnetResourceId" json:"delegatedSubnetResourceReference,omitempty"`

	//PrivateDnsZoneResourceReference: Private DNS zone resource id.
	PrivateDnsZoneResourceReference *genruntime.ResourceReference `armReference:"PrivateDnsZoneResourceId" json:"privateDnsZoneResourceReference,omitempty"`
}

var _ genruntime.ARMTransformer = &Network{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (network *Network) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if network == nil {
		return nil, nil
	}
	var result NetworkARM

	// Set property ‘DelegatedSubnetResourceId’:
	if network.DelegatedSubnetResourceReference != nil {
		delegatedSubnetResourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*network.DelegatedSubnetResourceReference)
		if err != nil {
			return nil, err
		}
		delegatedSubnetResourceReference := delegatedSubnetResourceReferenceARMID
		result.DelegatedSubnetResourceId = &delegatedSubnetResourceReference
	}

	// Set property ‘PrivateDnsZoneResourceId’:
	if network.PrivateDnsZoneResourceReference != nil {
		privateDnsZoneResourceReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*network.PrivateDnsZoneResourceReference)
		if err != nil {
			return nil, err
		}
		privateDnsZoneResourceReference := privateDnsZoneResourceReferenceARMID
		result.PrivateDnsZoneResourceId = &privateDnsZoneResourceReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (network *Network) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (network *Network) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(NetworkARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkARM, got %T", armInput)
	}

	// no assignment for property ‘DelegatedSubnetResourceReference’

	// no assignment for property ‘PrivateDnsZoneResourceReference’

	// No error
	return nil
}

// AssignPropertiesFromNetwork populates our Network from the provided source Network
func (network *Network) AssignPropertiesFromNetwork(source *v1alpha1api20210501storage.Network) error {

	// DelegatedSubnetResourceReference
	if source.DelegatedSubnetResourceReference != nil {
		delegatedSubnetResourceReference := source.DelegatedSubnetResourceReference.Copy()
		network.DelegatedSubnetResourceReference = &delegatedSubnetResourceReference
	} else {
		network.DelegatedSubnetResourceReference = nil
	}

	// PrivateDnsZoneResourceReference
	if source.PrivateDnsZoneResourceReference != nil {
		privateDnsZoneResourceReference := source.PrivateDnsZoneResourceReference.Copy()
		network.PrivateDnsZoneResourceReference = &privateDnsZoneResourceReference
	} else {
		network.PrivateDnsZoneResourceReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetwork populates the provided destination Network from our Network
func (network *Network) AssignPropertiesToNetwork(destination *v1alpha1api20210501storage.Network) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DelegatedSubnetResourceReference
	if network.DelegatedSubnetResourceReference != nil {
		delegatedSubnetResourceReference := network.DelegatedSubnetResourceReference.Copy()
		destination.DelegatedSubnetResourceReference = &delegatedSubnetResourceReference
	} else {
		destination.DelegatedSubnetResourceReference = nil
	}

	// PrivateDnsZoneResourceReference
	if network.PrivateDnsZoneResourceReference != nil {
		privateDnsZoneResourceReference := network.PrivateDnsZoneResourceReference.Copy()
		destination.PrivateDnsZoneResourceReference = &privateDnsZoneResourceReference
	} else {
		destination.PrivateDnsZoneResourceReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Network_Status struct {
	//DelegatedSubnetResourceId: Delegated subnet resource id used to setup vnet for a
	//server.
	DelegatedSubnetResourceId *string `json:"delegatedSubnetResourceId,omitempty"`

	//PrivateDnsZoneResourceId: Private DNS zone resource id.
	PrivateDnsZoneResourceId *string `json:"privateDnsZoneResourceId,omitempty"`

	//PublicNetworkAccess: Whether or not public network access is allowed for this
	//server. Value is 'Disabled' when server has VNet integration.
	PublicNetworkAccess *EnableStatusEnum_Status `json:"publicNetworkAccess,omitempty"`
}

var _ genruntime.FromARMConverter = &Network_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkStatus *Network_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Network_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkStatus *Network_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Network_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Network_StatusARM, got %T", armInput)
	}

	// Set property ‘DelegatedSubnetResourceId’:
	if typedInput.DelegatedSubnetResourceId != nil {
		delegatedSubnetResourceId := *typedInput.DelegatedSubnetResourceId
		networkStatus.DelegatedSubnetResourceId = &delegatedSubnetResourceId
	}

	// Set property ‘PrivateDnsZoneResourceId’:
	if typedInput.PrivateDnsZoneResourceId != nil {
		privateDnsZoneResourceId := *typedInput.PrivateDnsZoneResourceId
		networkStatus.PrivateDnsZoneResourceId = &privateDnsZoneResourceId
	}

	// Set property ‘PublicNetworkAccess’:
	if typedInput.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.PublicNetworkAccess
		networkStatus.PublicNetworkAccess = &publicNetworkAccess
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkStatus populates our Network_Status from the provided source Network_Status
func (networkStatus *Network_Status) AssignPropertiesFromNetworkStatus(source *v1alpha1api20210501storage.Network_Status) error {

	// DelegatedSubnetResourceId
	networkStatus.DelegatedSubnetResourceId = genruntime.ClonePointerToString(source.DelegatedSubnetResourceId)

	// PrivateDnsZoneResourceId
	networkStatus.PrivateDnsZoneResourceId = genruntime.ClonePointerToString(source.PrivateDnsZoneResourceId)

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := EnableStatusEnum_Status(*source.PublicNetworkAccess)
		networkStatus.PublicNetworkAccess = &publicNetworkAccess
	} else {
		networkStatus.PublicNetworkAccess = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkStatus populates the provided destination Network_Status from our Network_Status
func (networkStatus *Network_Status) AssignPropertiesToNetworkStatus(destination *v1alpha1api20210501storage.Network_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DelegatedSubnetResourceId
	destination.DelegatedSubnetResourceId = genruntime.ClonePointerToString(networkStatus.DelegatedSubnetResourceId)

	// PrivateDnsZoneResourceId
	destination.PrivateDnsZoneResourceId = genruntime.ClonePointerToString(networkStatus.PrivateDnsZoneResourceId)

	// PublicNetworkAccess
	if networkStatus.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*networkStatus.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ReplicationRole_Status string

const (
	ReplicationRole_StatusNone    = ReplicationRole_Status("None")
	ReplicationRole_StatusReplica = ReplicationRole_Status("Replica")
	ReplicationRole_StatusSource  = ReplicationRole_Status("Source")
)

// +kubebuilder:validation:Enum={"Default","GeoRestore","PointInTimeRestore","Replica"}
type ServerPropertiesCreateMode string

const (
	ServerPropertiesCreateModeDefault            = ServerPropertiesCreateMode("Default")
	ServerPropertiesCreateModeGeoRestore         = ServerPropertiesCreateMode("GeoRestore")
	ServerPropertiesCreateModePointInTimeRestore = ServerPropertiesCreateMode("PointInTimeRestore")
	ServerPropertiesCreateModeReplica            = ServerPropertiesCreateMode("Replica")
)

// +kubebuilder:validation:Enum={"None","Replica","Source"}
type ServerPropertiesReplicationRole string

const (
	ServerPropertiesReplicationRoleNone    = ServerPropertiesReplicationRole("None")
	ServerPropertiesReplicationRoleReplica = ServerPropertiesReplicationRole("Replica")
	ServerPropertiesReplicationRoleSource  = ServerPropertiesReplicationRole("Source")
)

type ServerPropertiesStatusCreateMode string

const (
	ServerPropertiesStatusCreateModeDefault            = ServerPropertiesStatusCreateMode("Default")
	ServerPropertiesStatusCreateModeGeoRestore         = ServerPropertiesStatusCreateMode("GeoRestore")
	ServerPropertiesStatusCreateModePointInTimeRestore = ServerPropertiesStatusCreateMode("PointInTimeRestore")
	ServerPropertiesStatusCreateModeReplica            = ServerPropertiesStatusCreateMode("Replica")
)

type ServerPropertiesStatusState string

const (
	ServerPropertiesStatusStateDisabled = ServerPropertiesStatusState("Disabled")
	ServerPropertiesStatusStateDropping = ServerPropertiesStatusState("Dropping")
	ServerPropertiesStatusStateReady    = ServerPropertiesStatusState("Ready")
	ServerPropertiesStatusStateStarting = ServerPropertiesStatusState("Starting")
	ServerPropertiesStatusStateStopped  = ServerPropertiesStatusState("Stopped")
	ServerPropertiesStatusStateStopping = ServerPropertiesStatusState("Stopping")
	ServerPropertiesStatusStateUpdating = ServerPropertiesStatusState("Updating")
)

// +kubebuilder:validation:Enum={"5.7","8.0.21"}
type ServerPropertiesVersion string

const (
	ServerPropertiesVersion57   = ServerPropertiesVersion("5.7")
	ServerPropertiesVersion8021 = ServerPropertiesVersion("8.0.21")
)

type ServerVersion_Status string

const (
	ServerVersion_Status57   = ServerVersion_Status("5.7")
	ServerVersion_Status8021 = ServerVersion_Status("8.0.21")
)

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.DBforMySQL.json#/definitions/Sku
type Sku struct {
	// +kubebuilder:validation:Required
	//Name: The name of the sku, e.g. Standard_D32s_v3.
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Tier: The tier of the particular SKU, e.g. GeneralPurpose.
	Tier SkuTier `json:"tier"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	var result SkuARM

	// Set property ‘Name’:
	result.Name = sku.Name

	// Set property ‘Tier’:
	result.Tier = sku.Tier
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// Set property ‘Tier’:
	sku.Tier = typedInput.Tier

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v1alpha1api20210501storage.Sku) error {

	// Name
	sku.Name = genruntime.GetOptionalStringValue(source.Name)

	// Tier
	if source.Tier != nil {
		sku.Tier = SkuTier(*source.Tier)
	} else {
		sku.Tier = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v1alpha1api20210501storage.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := sku.Name
	destination.Name = &name

	// Tier
	tier := string(sku.Tier)
	destination.Tier = &tier

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Status struct {
	// +kubebuilder:validation:Required
	//Name: The name of the sku, e.g. Standard_D32s_v3.
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Tier: The tier of the particular SKU, e.g. GeneralPurpose.
	Tier SkuStatusTier `json:"tier"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (skuStatus *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (skuStatus *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	skuStatus.Name = typedInput.Name

	// Set property ‘Tier’:
	skuStatus.Tier = typedInput.Tier

	// No error
	return nil
}

// AssignPropertiesFromSkuStatus populates our Sku_Status from the provided source Sku_Status
func (skuStatus *Sku_Status) AssignPropertiesFromSkuStatus(source *v1alpha1api20210501storage.Sku_Status) error {

	// Name
	skuStatus.Name = genruntime.GetOptionalStringValue(source.Name)

	// Tier
	if source.Tier != nil {
		skuStatus.Tier = SkuStatusTier(*source.Tier)
	} else {
		skuStatus.Tier = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSkuStatus populates the provided destination Sku_Status from our Sku_Status
func (skuStatus *Sku_Status) AssignPropertiesToSkuStatus(destination *v1alpha1api20210501storage.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := skuStatus.Name
	destination.Name = &name

	// Tier
	tier := string(skuStatus.Tier)
	destination.Tier = &tier

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.DBforMySQL.json#/definitions/Storage
type Storage struct {
	//AutoGrow: Enable Storage Auto Grow or not.
	AutoGrow *StorageAutoGrow `json:"autoGrow,omitempty"`

	//Iops: Storage IOPS for a server.
	Iops *int `json:"iops,omitempty"`

	//StorageSizeGB: Max storage size allowed for a server.
	StorageSizeGB *int `json:"storageSizeGB,omitempty"`
}

var _ genruntime.ARMTransformer = &Storage{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storage *Storage) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storage == nil {
		return nil, nil
	}
	var result StorageARM

	// Set property ‘AutoGrow’:
	if storage.AutoGrow != nil {
		autoGrow := *storage.AutoGrow
		result.AutoGrow = &autoGrow
	}

	// Set property ‘Iops’:
	if storage.Iops != nil {
		iops := *storage.Iops
		result.Iops = &iops
	}

	// Set property ‘StorageSizeGB’:
	if storage.StorageSizeGB != nil {
		storageSizeGB := *storage.StorageSizeGB
		result.StorageSizeGB = &storageSizeGB
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storage *Storage) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storage *Storage) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageARM, got %T", armInput)
	}

	// Set property ‘AutoGrow’:
	if typedInput.AutoGrow != nil {
		autoGrow := *typedInput.AutoGrow
		storage.AutoGrow = &autoGrow
	}

	// Set property ‘Iops’:
	if typedInput.Iops != nil {
		iops := *typedInput.Iops
		storage.Iops = &iops
	}

	// Set property ‘StorageSizeGB’:
	if typedInput.StorageSizeGB != nil {
		storageSizeGB := *typedInput.StorageSizeGB
		storage.StorageSizeGB = &storageSizeGB
	}

	// No error
	return nil
}

// AssignPropertiesFromStorage populates our Storage from the provided source Storage
func (storage *Storage) AssignPropertiesFromStorage(source *v1alpha1api20210501storage.Storage) error {

	// AutoGrow
	if source.AutoGrow != nil {
		autoGrow := StorageAutoGrow(*source.AutoGrow)
		storage.AutoGrow = &autoGrow
	} else {
		storage.AutoGrow = nil
	}

	// Iops
	storage.Iops = genruntime.ClonePointerToInt(source.Iops)

	// StorageSizeGB
	storage.StorageSizeGB = genruntime.ClonePointerToInt(source.StorageSizeGB)

	// No error
	return nil
}

// AssignPropertiesToStorage populates the provided destination Storage from our Storage
func (storage *Storage) AssignPropertiesToStorage(destination *v1alpha1api20210501storage.Storage) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoGrow
	if storage.AutoGrow != nil {
		autoGrow := string(*storage.AutoGrow)
		destination.AutoGrow = &autoGrow
	} else {
		destination.AutoGrow = nil
	}

	// Iops
	destination.Iops = genruntime.ClonePointerToInt(storage.Iops)

	// StorageSizeGB
	destination.StorageSizeGB = genruntime.ClonePointerToInt(storage.StorageSizeGB)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Storage_Status struct {
	//AutoGrow: Enable Storage Auto Grow or not.
	AutoGrow *EnableStatusEnum_Status `json:"autoGrow,omitempty"`

	//Iops: Storage IOPS for a server.
	Iops *int `json:"iops,omitempty"`

	//StorageSizeGB: Max storage size allowed for a server.
	StorageSizeGB *int `json:"storageSizeGB,omitempty"`

	//StorageSku: The sku name of the server storage.
	StorageSku *string `json:"storageSku,omitempty"`
}

var _ genruntime.FromARMConverter = &Storage_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageStatus *Storage_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Storage_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageStatus *Storage_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Storage_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Storage_StatusARM, got %T", armInput)
	}

	// Set property ‘AutoGrow’:
	if typedInput.AutoGrow != nil {
		autoGrow := *typedInput.AutoGrow
		storageStatus.AutoGrow = &autoGrow
	}

	// Set property ‘Iops’:
	if typedInput.Iops != nil {
		iops := *typedInput.Iops
		storageStatus.Iops = &iops
	}

	// Set property ‘StorageSizeGB’:
	if typedInput.StorageSizeGB != nil {
		storageSizeGB := *typedInput.StorageSizeGB
		storageStatus.StorageSizeGB = &storageSizeGB
	}

	// Set property ‘StorageSku’:
	if typedInput.StorageSku != nil {
		storageSku := *typedInput.StorageSku
		storageStatus.StorageSku = &storageSku
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageStatus populates our Storage_Status from the provided source Storage_Status
func (storageStatus *Storage_Status) AssignPropertiesFromStorageStatus(source *v1alpha1api20210501storage.Storage_Status) error {

	// AutoGrow
	if source.AutoGrow != nil {
		autoGrow := EnableStatusEnum_Status(*source.AutoGrow)
		storageStatus.AutoGrow = &autoGrow
	} else {
		storageStatus.AutoGrow = nil
	}

	// Iops
	storageStatus.Iops = genruntime.ClonePointerToInt(source.Iops)

	// StorageSizeGB
	storageStatus.StorageSizeGB = genruntime.ClonePointerToInt(source.StorageSizeGB)

	// StorageSku
	storageStatus.StorageSku = genruntime.ClonePointerToString(source.StorageSku)

	// No error
	return nil
}

// AssignPropertiesToStorageStatus populates the provided destination Storage_Status from our Storage_Status
func (storageStatus *Storage_Status) AssignPropertiesToStorageStatus(destination *v1alpha1api20210501storage.Storage_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoGrow
	if storageStatus.AutoGrow != nil {
		autoGrow := string(*storageStatus.AutoGrow)
		destination.AutoGrow = &autoGrow
	} else {
		destination.AutoGrow = nil
	}

	// Iops
	destination.Iops = genruntime.ClonePointerToInt(storageStatus.Iops)

	// StorageSizeGB
	destination.StorageSizeGB = genruntime.ClonePointerToInt(storageStatus.StorageSizeGB)

	// StorageSku
	destination.StorageSku = genruntime.ClonePointerToString(storageStatus.StorageSku)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_Status struct {
	//CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	//CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	//CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemDataStatusCreatedByType `json:"createdByType,omitempty"`

	//LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	//LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	//LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemDataStatusLastModifiedByType `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (systemDataStatus *SystemData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (systemDataStatus *SystemData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		systemDataStatus.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		systemDataStatus.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		systemDataStatus.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		systemDataStatus.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		systemDataStatus.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		systemDataStatus.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemDataStatus populates our SystemData_Status from the provided source SystemData_Status
func (systemDataStatus *SystemData_Status) AssignPropertiesFromSystemDataStatus(source *v1alpha1api20210501storage.SystemData_Status) error {

	// CreatedAt
	systemDataStatus.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	systemDataStatus.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemDataStatusCreatedByType(*source.CreatedByType)
		systemDataStatus.CreatedByType = &createdByType
	} else {
		systemDataStatus.CreatedByType = nil
	}

	// LastModifiedAt
	systemDataStatus.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	systemDataStatus.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemDataStatusLastModifiedByType(*source.LastModifiedByType)
		systemDataStatus.LastModifiedByType = &lastModifiedByType
	} else {
		systemDataStatus.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemDataStatus populates the provided destination SystemData_Status from our SystemData_Status
func (systemDataStatus *SystemData_Status) AssignPropertiesToSystemDataStatus(destination *v1alpha1api20210501storage.SystemData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(systemDataStatus.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(systemDataStatus.CreatedBy)

	// CreatedByType
	if systemDataStatus.CreatedByType != nil {
		createdByType := string(*systemDataStatus.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(systemDataStatus.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(systemDataStatus.LastModifiedBy)

	// LastModifiedByType
	if systemDataStatus.LastModifiedByType != nil {
		lastModifiedByType := string(*systemDataStatus.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type BackupGeoRedundantBackup string

const (
	BackupGeoRedundantBackupDisabled = BackupGeoRedundantBackup("Disabled")
	BackupGeoRedundantBackupEnabled  = BackupGeoRedundantBackup("Enabled")
)

type EnableStatusEnum_Status string

const (
	EnableStatusEnum_StatusDisabled = EnableStatusEnum_Status("Disabled")
	EnableStatusEnum_StatusEnabled  = EnableStatusEnum_Status("Enabled")
)

// +kubebuilder:validation:Enum={"Disabled","SameZone","ZoneRedundant"}
type HighAvailabilityMode string

const (
	HighAvailabilityModeDisabled      = HighAvailabilityMode("Disabled")
	HighAvailabilityModeSameZone      = HighAvailabilityMode("SameZone")
	HighAvailabilityModeZoneRedundant = HighAvailabilityMode("ZoneRedundant")
)

type HighAvailabilityStatusMode string

const (
	HighAvailabilityStatusModeDisabled      = HighAvailabilityStatusMode("Disabled")
	HighAvailabilityStatusModeSameZone      = HighAvailabilityStatusMode("SameZone")
	HighAvailabilityStatusModeZoneRedundant = HighAvailabilityStatusMode("ZoneRedundant")
)

type HighAvailabilityStatusState string

const (
	HighAvailabilityStatusStateCreatingStandby = HighAvailabilityStatusState("CreatingStandby")
	HighAvailabilityStatusStateFailingOver     = HighAvailabilityStatusState("FailingOver")
	HighAvailabilityStatusStateHealthy         = HighAvailabilityStatusState("Healthy")
	HighAvailabilityStatusStateNotEnabled      = HighAvailabilityStatusState("NotEnabled")
	HighAvailabilityStatusStateRemovingStandby = HighAvailabilityStatusState("RemovingStandby")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type StorageAutoGrow string

const (
	StorageAutoGrowDisabled = StorageAutoGrow("Disabled")
	StorageAutoGrowEnabled  = StorageAutoGrow("Enabled")
)

func init() {
	SchemeBuilder.Register(&FlexibleServer{}, &FlexibleServerList{})
}
