// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230301

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PrometheusRuleGroupAction_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrometheusRuleGroupAction_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrometheusRuleGroupAction_ARM, PrometheusRuleGroupAction_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrometheusRuleGroupAction_ARM runs a test to see if a specific instance of PrometheusRuleGroupAction_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrometheusRuleGroupAction_ARM(subject PrometheusRuleGroupAction_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrometheusRuleGroupAction_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrometheusRuleGroupAction_ARM instances for property testing - lazily instantiated by
// PrometheusRuleGroupAction_ARMGenerator()
var prometheusRuleGroupAction_ARMGenerator gopter.Gen

// PrometheusRuleGroupAction_ARMGenerator returns a generator of PrometheusRuleGroupAction_ARM instances for property testing.
func PrometheusRuleGroupAction_ARMGenerator() gopter.Gen {
	if prometheusRuleGroupAction_ARMGenerator != nil {
		return prometheusRuleGroupAction_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrometheusRuleGroupAction_ARM(generators)
	prometheusRuleGroupAction_ARMGenerator = gen.Struct(reflect.TypeOf(PrometheusRuleGroupAction_ARM{}), generators)

	return prometheusRuleGroupAction_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrometheusRuleGroupAction_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrometheusRuleGroupAction_ARM(gens map[string]gopter.Gen) {
	gens["ActionGroupId"] = gen.PtrOf(gen.AlphaString())
	gens["ActionProperties"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

func Test_PrometheusRuleGroupProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrometheusRuleGroupProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrometheusRuleGroupProperties_ARM, PrometheusRuleGroupProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrometheusRuleGroupProperties_ARM runs a test to see if a specific instance of PrometheusRuleGroupProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrometheusRuleGroupProperties_ARM(subject PrometheusRuleGroupProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrometheusRuleGroupProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrometheusRuleGroupProperties_ARM instances for property testing - lazily instantiated by
// PrometheusRuleGroupProperties_ARMGenerator()
var prometheusRuleGroupProperties_ARMGenerator gopter.Gen

// PrometheusRuleGroupProperties_ARMGenerator returns a generator of PrometheusRuleGroupProperties_ARM instances for property testing.
// We first initialize prometheusRuleGroupProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrometheusRuleGroupProperties_ARMGenerator() gopter.Gen {
	if prometheusRuleGroupProperties_ARMGenerator != nil {
		return prometheusRuleGroupProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrometheusRuleGroupProperties_ARM(generators)
	prometheusRuleGroupProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PrometheusRuleGroupProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrometheusRuleGroupProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForPrometheusRuleGroupProperties_ARM(generators)
	prometheusRuleGroupProperties_ARMGenerator = gen.Struct(reflect.TypeOf(PrometheusRuleGroupProperties_ARM{}), generators)

	return prometheusRuleGroupProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrometheusRuleGroupProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrometheusRuleGroupProperties_ARM(gens map[string]gopter.Gen) {
	gens["ClusterName"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Interval"] = gen.PtrOf(gen.AlphaString())
	gens["Scopes"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrometheusRuleGroupProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrometheusRuleGroupProperties_ARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(PrometheusRule_ARMGenerator())
}

func Test_PrometheusRuleGroup_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrometheusRuleGroup_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrometheusRuleGroup_Spec_ARM, PrometheusRuleGroup_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrometheusRuleGroup_Spec_ARM runs a test to see if a specific instance of PrometheusRuleGroup_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrometheusRuleGroup_Spec_ARM(subject PrometheusRuleGroup_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrometheusRuleGroup_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrometheusRuleGroup_Spec_ARM instances for property testing - lazily instantiated by
// PrometheusRuleGroup_Spec_ARMGenerator()
var prometheusRuleGroup_Spec_ARMGenerator gopter.Gen

// PrometheusRuleGroup_Spec_ARMGenerator returns a generator of PrometheusRuleGroup_Spec_ARM instances for property testing.
// We first initialize prometheusRuleGroup_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrometheusRuleGroup_Spec_ARMGenerator() gopter.Gen {
	if prometheusRuleGroup_Spec_ARMGenerator != nil {
		return prometheusRuleGroup_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrometheusRuleGroup_Spec_ARM(generators)
	prometheusRuleGroup_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(PrometheusRuleGroup_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrometheusRuleGroup_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForPrometheusRuleGroup_Spec_ARM(generators)
	prometheusRuleGroup_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(PrometheusRuleGroup_Spec_ARM{}), generators)

	return prometheusRuleGroup_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrometheusRuleGroup_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrometheusRuleGroup_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrometheusRuleGroup_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrometheusRuleGroup_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrometheusRuleGroupProperties_ARMGenerator())
}

func Test_PrometheusRuleResolveConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrometheusRuleResolveConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrometheusRuleResolveConfiguration_ARM, PrometheusRuleResolveConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrometheusRuleResolveConfiguration_ARM runs a test to see if a specific instance of PrometheusRuleResolveConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrometheusRuleResolveConfiguration_ARM(subject PrometheusRuleResolveConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrometheusRuleResolveConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrometheusRuleResolveConfiguration_ARM instances for property testing - lazily instantiated by
// PrometheusRuleResolveConfiguration_ARMGenerator()
var prometheusRuleResolveConfiguration_ARMGenerator gopter.Gen

// PrometheusRuleResolveConfiguration_ARMGenerator returns a generator of PrometheusRuleResolveConfiguration_ARM instances for property testing.
func PrometheusRuleResolveConfiguration_ARMGenerator() gopter.Gen {
	if prometheusRuleResolveConfiguration_ARMGenerator != nil {
		return prometheusRuleResolveConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrometheusRuleResolveConfiguration_ARM(generators)
	prometheusRuleResolveConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(PrometheusRuleResolveConfiguration_ARM{}), generators)

	return prometheusRuleResolveConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrometheusRuleResolveConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrometheusRuleResolveConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["AutoResolved"] = gen.PtrOf(gen.Bool())
	gens["TimeToResolve"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrometheusRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrometheusRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrometheusRule_ARM, PrometheusRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrometheusRule_ARM runs a test to see if a specific instance of PrometheusRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrometheusRule_ARM(subject PrometheusRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrometheusRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrometheusRule_ARM instances for property testing - lazily instantiated by PrometheusRule_ARMGenerator()
var prometheusRule_ARMGenerator gopter.Gen

// PrometheusRule_ARMGenerator returns a generator of PrometheusRule_ARM instances for property testing.
// We first initialize prometheusRule_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrometheusRule_ARMGenerator() gopter.Gen {
	if prometheusRule_ARMGenerator != nil {
		return prometheusRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrometheusRule_ARM(generators)
	prometheusRule_ARMGenerator = gen.Struct(reflect.TypeOf(PrometheusRule_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrometheusRule_ARM(generators)
	AddRelatedPropertyGeneratorsForPrometheusRule_ARM(generators)
	prometheusRule_ARMGenerator = gen.Struct(reflect.TypeOf(PrometheusRule_ARM{}), generators)

	return prometheusRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrometheusRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrometheusRule_ARM(gens map[string]gopter.Gen) {
	gens["Alert"] = gen.PtrOf(gen.AlphaString())
	gens["Annotations"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["Expression"] = gen.PtrOf(gen.AlphaString())
	gens["For"] = gen.PtrOf(gen.AlphaString())
	gens["Labels"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Record"] = gen.PtrOf(gen.AlphaString())
	gens["Severity"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForPrometheusRule_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrometheusRule_ARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(PrometheusRuleGroupAction_ARMGenerator())
	gens["ResolveConfiguration"] = gen.PtrOf(PrometheusRuleResolveConfiguration_ARMGenerator())
}
