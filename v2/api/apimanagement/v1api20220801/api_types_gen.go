// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220801

import (
	"fmt"
	v20220801s "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20220801/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/apimapis.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
type Api struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Service_Api_Spec   `json:"spec,omitempty"`
	Status            Service_Api_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Api{}

// GetConditions returns the conditions of the resource
func (api *Api) GetConditions() conditions.Conditions {
	return api.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (api *Api) SetConditions(conditions conditions.Conditions) { api.Status.Conditions = conditions }

var _ conversion.Convertible = &Api{}

// ConvertFrom populates our Api from the provided hub Api
func (api *Api) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20220801s.Api)
	if !ok {
		return fmt.Errorf("expected apimanagement/v1api20220801/storage/Api but received %T instead", hub)
	}

	return api.AssignProperties_From_Api(source)
}

// ConvertTo populates the provided hub Api from our Api
func (api *Api) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20220801s.Api)
	if !ok {
		return fmt.Errorf("expected apimanagement/v1api20220801/storage/Api but received %T instead", hub)
	}

	return api.AssignProperties_To_Api(destination)
}

// +kubebuilder:webhook:path=/mutate-apimanagement-azure-com-v1api20220801-api,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=apimanagement.azure.com,resources=apis,verbs=create;update,versions=v1api20220801,name=default.v1api20220801.apis.apimanagement.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Api{}

// Default applies defaults to the Api resource
func (api *Api) Default() {
	api.defaultImpl()
	var temp any = api
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (api *Api) defaultAzureName() {
	if api.Spec.AzureName == "" {
		api.Spec.AzureName = api.Name
	}
}

// defaultImpl applies the code generated defaults to the Api resource
func (api *Api) defaultImpl() { api.defaultAzureName() }

var _ genruntime.ImportableResource = &Api{}

// InitializeSpec initializes the spec for this resource from the given status
func (api *Api) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*Service_Api_STATUS); ok {
		return api.Spec.Initialize_From_Service_Api_STATUS(s)
	}

	return fmt.Errorf("expected Status of type Service_Api_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &Api{}

// AzureName returns the Azure name of the resource
func (api *Api) AzureName() string {
	return api.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-08-01"
func (api Api) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (api *Api) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (api *Api) GetSpec() genruntime.ConvertibleSpec {
	return &api.Spec
}

// GetStatus returns the status of this resource
func (api *Api) GetStatus() genruntime.ConvertibleStatus {
	return &api.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (api *Api) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationHead,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ApiManagement/service/apis"
func (api *Api) GetType() string {
	return "Microsoft.ApiManagement/service/apis"
}

// NewEmptyStatus returns a new empty (blank) status
func (api *Api) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Service_Api_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (api *Api) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(api.Spec)
	return api.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (api *Api) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Service_Api_STATUS); ok {
		api.Status = *st
		return nil
	}

	// Convert status to required version
	var st Service_Api_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	api.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-apimanagement-azure-com-v1api20220801-api,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=apimanagement.azure.com,resources=apis,verbs=create;update,versions=v1api20220801,name=validate.v1api20220801.apis.apimanagement.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Api{}

// ValidateCreate validates the creation of the resource
func (api *Api) ValidateCreate() (admission.Warnings, error) {
	validations := api.createValidations()
	var temp any = api
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (api *Api) ValidateDelete() (admission.Warnings, error) {
	validations := api.deleteValidations()
	var temp any = api
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (api *Api) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := api.updateValidations()
	var temp any = api
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (api *Api) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){api.validateResourceReferences, api.validateOwnerReference}
}

// deleteValidations validates the deletion of the resource
func (api *Api) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (api *Api) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return api.validateResourceReferences()
		},
		api.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return api.validateOwnerReference()
		},
	}
}

// validateOwnerReference validates the owner field
func (api *Api) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(api)
}

// validateResourceReferences validates all resource references
func (api *Api) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&api.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (api *Api) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*Api)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, api)
}

// AssignProperties_From_Api populates our Api from the provided source Api
func (api *Api) AssignProperties_From_Api(source *v20220801s.Api) error {

	// ObjectMeta
	api.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Service_Api_Spec
	err := spec.AssignProperties_From_Service_Api_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Service_Api_Spec() to populate field Spec")
	}
	api.Spec = spec

	// Status
	var status Service_Api_STATUS
	err = status.AssignProperties_From_Service_Api_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Service_Api_STATUS() to populate field Status")
	}
	api.Status = status

	// No error
	return nil
}

// AssignProperties_To_Api populates the provided destination Api from our Api
func (api *Api) AssignProperties_To_Api(destination *v20220801s.Api) error {

	// ObjectMeta
	destination.ObjectMeta = *api.ObjectMeta.DeepCopy()

	// Spec
	var spec v20220801s.Service_Api_Spec
	err := api.Spec.AssignProperties_To_Service_Api_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Service_Api_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20220801s.Service_Api_STATUS
	err = api.Status.AssignProperties_To_Service_Api_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Service_Api_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (api *Api) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: api.Spec.OriginalVersion(),
		Kind:    "Api",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/apimapis.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
type ApiList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Api `json:"items"`
}

// +kubebuilder:validation:Enum={"2022-08-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2022-08-01")

type Service_Api_Spec struct {
	// +kubebuilder:validation:MaxLength=100
	// APIVersion: Indicates the version identifier of the API if the API is versioned
	APIVersion *string `json:"apiVersion,omitempty"`

	// +kubebuilder:validation:MaxLength=100
	// +kubebuilder:validation:MinLength=1
	// ApiRevision: Describes the revision of the API. If no value is provided, default revision 1 is created
	ApiRevision *string `json:"apiRevision,omitempty"`

	// +kubebuilder:validation:MaxLength=256
	// ApiRevisionDescription: Description of the API Revision.
	ApiRevisionDescription *string `json:"apiRevisionDescription,omitempty"`

	// ApiType: Type of API to create.
	// * `http` creates a REST API
	// * `soap` creates a SOAP pass-through API
	// * `websocket` creates websocket API
	// * `graphql` creates GraphQL API.
	ApiType *ApiCreateOrUpdateProperties_ApiType `json:"apiType,omitempty"`

	// +kubebuilder:validation:MaxLength=256
	// ApiVersionDescription: Description of the API Version.
	ApiVersionDescription *string `json:"apiVersionDescription,omitempty"`

	// ApiVersionSet: Version set details
	ApiVersionSet *ApiVersionSetContractDetails `json:"apiVersionSet,omitempty"`

	// ApiVersionSetReference: A resource identifier for the related ApiVersionSet.
	ApiVersionSetReference *genruntime.ResourceReference `armReference:"ApiVersionSetId" json:"apiVersionSetReference,omitempty"`

	// AuthenticationSettings: Collection of authentication settings included into this API.
	AuthenticationSettings *AuthenticationSettingsContract `json:"authenticationSettings,omitempty"`

	// +kubebuilder:validation:MaxLength=256
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern="^[^*#&+:<>?]+$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Contact: Contact information for the API.
	Contact *ApiContactInformation `json:"contact,omitempty"`

	// Description: Description of the API. May include HTML formatting tags.
	Description *string `json:"description,omitempty"`

	// +kubebuilder:validation:MaxLength=300
	// +kubebuilder:validation:MinLength=1
	// DisplayName: API name. Must be 1 to 300 characters long.
	DisplayName *string `json:"displayName,omitempty"`

	// Format: Format of the Content in which the API is getting imported.
	Format *ApiCreateOrUpdateProperties_Format `json:"format,omitempty"`

	// IsCurrent: Indicates if API revision is current api revision.
	IsCurrent *bool `json:"isCurrent,omitempty"`

	// License: License information for the API.
	License *ApiLicenseInformation `json:"license,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a apimanagement.azure.com/Service resource
	Owner *genruntime.KnownResourceReference `group:"apimanagement.azure.com" json:"owner,omitempty" kind:"Service"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=400
	// +kubebuilder:validation:MinLength=0
	// Path: Relative URL uniquely identifying this API and all of its resource paths within the API Management service
	// instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public
	// URL for this API.
	Path *string `json:"path,omitempty"`

	// Protocols: Describes on which protocols the operations in this API can be invoked.
	Protocols []ApiCreateOrUpdateProperties_Protocols `json:"protocols,omitempty"`

	// +kubebuilder:validation:MaxLength=2000
	// +kubebuilder:validation:MinLength=0
	// ServiceUrl: Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
	ServiceUrl *string `json:"serviceUrl,omitempty"`

	// SourceApiReference: API identifier of the source API.
	SourceApiReference *genruntime.ResourceReference `armReference:"SourceApiId" json:"sourceApiReference,omitempty"`

	// SubscriptionKeyParameterNames: Protocols over which API is made available.
	SubscriptionKeyParameterNames *SubscriptionKeyParameterNamesContract `json:"subscriptionKeyParameterNames,omitempty"`

	// SubscriptionRequired: Specifies whether an API or Product subscription is required for accessing the API.
	SubscriptionRequired *bool `json:"subscriptionRequired,omitempty"`

	// TermsOfServiceUrl:  A URL to the Terms of Service for the API. MUST be in the format of a URL.
	TermsOfServiceUrl *string `json:"termsOfServiceUrl,omitempty"`

	// TranslateRequiredQueryParameters: Strategy of translating required query parameters to template ones. By default has
	// value 'template'. Possible values: 'template', 'query'
	TranslateRequiredQueryParameters *ApiCreateOrUpdateProperties_TranslateRequiredQueryParameters `json:"translateRequiredQueryParameters,omitempty"`

	// Type: Type of API.
	Type *ApiCreateOrUpdateProperties_Type `json:"type,omitempty"`

	// Value: Content value when Importing an API.
	Value *string `json:"value,omitempty"`

	// WsdlSelector: Criteria to limit import of WSDL to a subset of the document.
	WsdlSelector *ApiCreateOrUpdateProperties_WsdlSelector `json:"wsdlSelector,omitempty"`
}

var _ genruntime.ARMTransformer = &Service_Api_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (serviceApi *Service_Api_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if serviceApi == nil {
		return nil, nil
	}
	result := &Service_Api_Spec_ARM{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if serviceApi.APIVersion != nil ||
		serviceApi.ApiRevision != nil ||
		serviceApi.ApiRevisionDescription != nil ||
		serviceApi.ApiType != nil ||
		serviceApi.ApiVersionDescription != nil ||
		serviceApi.ApiVersionSet != nil ||
		serviceApi.ApiVersionSetReference != nil ||
		serviceApi.AuthenticationSettings != nil ||
		serviceApi.Contact != nil ||
		serviceApi.Description != nil ||
		serviceApi.DisplayName != nil ||
		serviceApi.Format != nil ||
		serviceApi.IsCurrent != nil ||
		serviceApi.License != nil ||
		serviceApi.Path != nil ||
		serviceApi.Protocols != nil ||
		serviceApi.ServiceUrl != nil ||
		serviceApi.SourceApiReference != nil ||
		serviceApi.SubscriptionKeyParameterNames != nil ||
		serviceApi.SubscriptionRequired != nil ||
		serviceApi.TermsOfServiceUrl != nil ||
		serviceApi.TranslateRequiredQueryParameters != nil ||
		serviceApi.Type != nil ||
		serviceApi.Value != nil ||
		serviceApi.WsdlSelector != nil {
		result.Properties = &ApiCreateOrUpdateProperties_ARM{}
	}
	if serviceApi.APIVersion != nil {
		apiVersion := *serviceApi.APIVersion
		result.Properties.APIVersion = &apiVersion
	}
	if serviceApi.ApiRevision != nil {
		apiRevision := *serviceApi.ApiRevision
		result.Properties.ApiRevision = &apiRevision
	}
	if serviceApi.ApiRevisionDescription != nil {
		apiRevisionDescription := *serviceApi.ApiRevisionDescription
		result.Properties.ApiRevisionDescription = &apiRevisionDescription
	}
	if serviceApi.ApiType != nil {
		apiType := *serviceApi.ApiType
		result.Properties.ApiType = &apiType
	}
	if serviceApi.ApiVersionDescription != nil {
		apiVersionDescription := *serviceApi.ApiVersionDescription
		result.Properties.ApiVersionDescription = &apiVersionDescription
	}
	if serviceApi.ApiVersionSet != nil {
		apiVersionSet_ARM, err := (*serviceApi.ApiVersionSet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		apiVersionSet := *apiVersionSet_ARM.(*ApiVersionSetContractDetails_ARM)
		result.Properties.ApiVersionSet = &apiVersionSet
	}
	if serviceApi.ApiVersionSetReference != nil {
		apiVersionSetIdARMID, err := resolved.ResolvedReferences.Lookup(*serviceApi.ApiVersionSetReference)
		if err != nil {
			return nil, err
		}
		apiVersionSetId := apiVersionSetIdARMID
		result.Properties.ApiVersionSetId = &apiVersionSetId
	}
	if serviceApi.AuthenticationSettings != nil {
		authenticationSettings_ARM, err := (*serviceApi.AuthenticationSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		authenticationSettings := *authenticationSettings_ARM.(*AuthenticationSettingsContract_ARM)
		result.Properties.AuthenticationSettings = &authenticationSettings
	}
	if serviceApi.Contact != nil {
		contact_ARM, err := (*serviceApi.Contact).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		contact := *contact_ARM.(*ApiContactInformation_ARM)
		result.Properties.Contact = &contact
	}
	if serviceApi.Description != nil {
		description := *serviceApi.Description
		result.Properties.Description = &description
	}
	if serviceApi.DisplayName != nil {
		displayName := *serviceApi.DisplayName
		result.Properties.DisplayName = &displayName
	}
	if serviceApi.Format != nil {
		format := *serviceApi.Format
		result.Properties.Format = &format
	}
	if serviceApi.IsCurrent != nil {
		isCurrent := *serviceApi.IsCurrent
		result.Properties.IsCurrent = &isCurrent
	}
	if serviceApi.License != nil {
		license_ARM, err := (*serviceApi.License).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		license := *license_ARM.(*ApiLicenseInformation_ARM)
		result.Properties.License = &license
	}
	if serviceApi.Path != nil {
		path := *serviceApi.Path
		result.Properties.Path = &path
	}
	for _, item := range serviceApi.Protocols {
		result.Properties.Protocols = append(result.Properties.Protocols, item)
	}
	if serviceApi.ServiceUrl != nil {
		serviceUrl := *serviceApi.ServiceUrl
		result.Properties.ServiceUrl = &serviceUrl
	}
	if serviceApi.SourceApiReference != nil {
		sourceApiIdARMID, err := resolved.ResolvedReferences.Lookup(*serviceApi.SourceApiReference)
		if err != nil {
			return nil, err
		}
		sourceApiId := sourceApiIdARMID
		result.Properties.SourceApiId = &sourceApiId
	}
	if serviceApi.SubscriptionKeyParameterNames != nil {
		subscriptionKeyParameterNames_ARM, err := (*serviceApi.SubscriptionKeyParameterNames).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		subscriptionKeyParameterNames := *subscriptionKeyParameterNames_ARM.(*SubscriptionKeyParameterNamesContract_ARM)
		result.Properties.SubscriptionKeyParameterNames = &subscriptionKeyParameterNames
	}
	if serviceApi.SubscriptionRequired != nil {
		subscriptionRequired := *serviceApi.SubscriptionRequired
		result.Properties.SubscriptionRequired = &subscriptionRequired
	}
	if serviceApi.TermsOfServiceUrl != nil {
		termsOfServiceUrl := *serviceApi.TermsOfServiceUrl
		result.Properties.TermsOfServiceUrl = &termsOfServiceUrl
	}
	if serviceApi.TranslateRequiredQueryParameters != nil {
		translateRequiredQueryParameters := *serviceApi.TranslateRequiredQueryParameters
		result.Properties.TranslateRequiredQueryParameters = &translateRequiredQueryParameters
	}
	if serviceApi.Type != nil {
		typeVar := *serviceApi.Type
		result.Properties.Type = &typeVar
	}
	if serviceApi.Value != nil {
		value := *serviceApi.Value
		result.Properties.Value = &value
	}
	if serviceApi.WsdlSelector != nil {
		wsdlSelector_ARM, err := (*serviceApi.WsdlSelector).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		wsdlSelector := *wsdlSelector_ARM.(*ApiCreateOrUpdateProperties_WsdlSelector_ARM)
		result.Properties.WsdlSelector = &wsdlSelector
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceApi *Service_Api_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Service_Api_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceApi *Service_Api_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Service_Api_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Service_Api_Spec_ARM, got %T", armInput)
	}

	// Set property "APIVersion":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.APIVersion != nil {
			apiVersion := *typedInput.Properties.APIVersion
			serviceApi.APIVersion = &apiVersion
		}
	}

	// Set property "ApiRevision":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiRevision != nil {
			apiRevision := *typedInput.Properties.ApiRevision
			serviceApi.ApiRevision = &apiRevision
		}
	}

	// Set property "ApiRevisionDescription":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiRevisionDescription != nil {
			apiRevisionDescription := *typedInput.Properties.ApiRevisionDescription
			serviceApi.ApiRevisionDescription = &apiRevisionDescription
		}
	}

	// Set property "ApiType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiType != nil {
			apiType := *typedInput.Properties.ApiType
			serviceApi.ApiType = &apiType
		}
	}

	// Set property "ApiVersionDescription":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiVersionDescription != nil {
			apiVersionDescription := *typedInput.Properties.ApiVersionDescription
			serviceApi.ApiVersionDescription = &apiVersionDescription
		}
	}

	// Set property "ApiVersionSet":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiVersionSet != nil {
			var apiVersionSet1 ApiVersionSetContractDetails
			err := apiVersionSet1.PopulateFromARM(owner, *typedInput.Properties.ApiVersionSet)
			if err != nil {
				return err
			}
			apiVersionSet := apiVersionSet1
			serviceApi.ApiVersionSet = &apiVersionSet
		}
	}

	// no assignment for property "ApiVersionSetReference"

	// Set property "AuthenticationSettings":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AuthenticationSettings != nil {
			var authenticationSettings1 AuthenticationSettingsContract
			err := authenticationSettings1.PopulateFromARM(owner, *typedInput.Properties.AuthenticationSettings)
			if err != nil {
				return err
			}
			authenticationSettings := authenticationSettings1
			serviceApi.AuthenticationSettings = &authenticationSettings
		}
	}

	// Set property "AzureName":
	serviceApi.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Contact":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Contact != nil {
			var contact1 ApiContactInformation
			err := contact1.PopulateFromARM(owner, *typedInput.Properties.Contact)
			if err != nil {
				return err
			}
			contact := contact1
			serviceApi.Contact = &contact
		}
	}

	// Set property "Description":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			serviceApi.Description = &description
		}
	}

	// Set property "DisplayName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisplayName != nil {
			displayName := *typedInput.Properties.DisplayName
			serviceApi.DisplayName = &displayName
		}
	}

	// Set property "Format":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Format != nil {
			format := *typedInput.Properties.Format
			serviceApi.Format = &format
		}
	}

	// Set property "IsCurrent":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsCurrent != nil {
			isCurrent := *typedInput.Properties.IsCurrent
			serviceApi.IsCurrent = &isCurrent
		}
	}

	// Set property "License":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.License != nil {
			var license1 ApiLicenseInformation
			err := license1.PopulateFromARM(owner, *typedInput.Properties.License)
			if err != nil {
				return err
			}
			license := license1
			serviceApi.License = &license
		}
	}

	// Set property "Owner":
	serviceApi.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Path":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Path != nil {
			path := *typedInput.Properties.Path
			serviceApi.Path = &path
		}
	}

	// Set property "Protocols":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Protocols {
			serviceApi.Protocols = append(serviceApi.Protocols, item)
		}
	}

	// Set property "ServiceUrl":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServiceUrl != nil {
			serviceUrl := *typedInput.Properties.ServiceUrl
			serviceApi.ServiceUrl = &serviceUrl
		}
	}

	// no assignment for property "SourceApiReference"

	// Set property "SubscriptionKeyParameterNames":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SubscriptionKeyParameterNames != nil {
			var subscriptionKeyParameterNames1 SubscriptionKeyParameterNamesContract
			err := subscriptionKeyParameterNames1.PopulateFromARM(owner, *typedInput.Properties.SubscriptionKeyParameterNames)
			if err != nil {
				return err
			}
			subscriptionKeyParameterNames := subscriptionKeyParameterNames1
			serviceApi.SubscriptionKeyParameterNames = &subscriptionKeyParameterNames
		}
	}

	// Set property "SubscriptionRequired":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SubscriptionRequired != nil {
			subscriptionRequired := *typedInput.Properties.SubscriptionRequired
			serviceApi.SubscriptionRequired = &subscriptionRequired
		}
	}

	// Set property "TermsOfServiceUrl":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TermsOfServiceUrl != nil {
			termsOfServiceUrl := *typedInput.Properties.TermsOfServiceUrl
			serviceApi.TermsOfServiceUrl = &termsOfServiceUrl
		}
	}

	// Set property "TranslateRequiredQueryParameters":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TranslateRequiredQueryParameters != nil {
			translateRequiredQueryParameters := *typedInput.Properties.TranslateRequiredQueryParameters
			serviceApi.TranslateRequiredQueryParameters = &translateRequiredQueryParameters
		}
	}

	// Set property "Type":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Type != nil {
			typeVar := *typedInput.Properties.Type
			serviceApi.Type = &typeVar
		}
	}

	// Set property "Value":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Value != nil {
			value := *typedInput.Properties.Value
			serviceApi.Value = &value
		}
	}

	// Set property "WsdlSelector":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WsdlSelector != nil {
			var wsdlSelector1 ApiCreateOrUpdateProperties_WsdlSelector
			err := wsdlSelector1.PopulateFromARM(owner, *typedInput.Properties.WsdlSelector)
			if err != nil {
				return err
			}
			wsdlSelector := wsdlSelector1
			serviceApi.WsdlSelector = &wsdlSelector
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Service_Api_Spec{}

// ConvertSpecFrom populates our Service_Api_Spec from the provided source
func (serviceApi *Service_Api_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20220801s.Service_Api_Spec)
	if ok {
		// Populate our instance from source
		return serviceApi.AssignProperties_From_Service_Api_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20220801s.Service_Api_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = serviceApi.AssignProperties_From_Service_Api_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Service_Api_Spec
func (serviceApi *Service_Api_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20220801s.Service_Api_Spec)
	if ok {
		// Populate destination from our instance
		return serviceApi.AssignProperties_To_Service_Api_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20220801s.Service_Api_Spec{}
	err := serviceApi.AssignProperties_To_Service_Api_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Service_Api_Spec populates our Service_Api_Spec from the provided source Service_Api_Spec
func (serviceApi *Service_Api_Spec) AssignProperties_From_Service_Api_Spec(source *v20220801s.Service_Api_Spec) error {

	// APIVersion
	if source.APIVersion != nil {
		apiVersion := *source.APIVersion
		serviceApi.APIVersion = &apiVersion
	} else {
		serviceApi.APIVersion = nil
	}

	// ApiRevision
	if source.ApiRevision != nil {
		apiRevision := *source.ApiRevision
		serviceApi.ApiRevision = &apiRevision
	} else {
		serviceApi.ApiRevision = nil
	}

	// ApiRevisionDescription
	if source.ApiRevisionDescription != nil {
		apiRevisionDescription := *source.ApiRevisionDescription
		serviceApi.ApiRevisionDescription = &apiRevisionDescription
	} else {
		serviceApi.ApiRevisionDescription = nil
	}

	// ApiType
	if source.ApiType != nil {
		apiType := ApiCreateOrUpdateProperties_ApiType(*source.ApiType)
		serviceApi.ApiType = &apiType
	} else {
		serviceApi.ApiType = nil
	}

	// ApiVersionDescription
	if source.ApiVersionDescription != nil {
		apiVersionDescription := *source.ApiVersionDescription
		serviceApi.ApiVersionDescription = &apiVersionDescription
	} else {
		serviceApi.ApiVersionDescription = nil
	}

	// ApiVersionSet
	if source.ApiVersionSet != nil {
		var apiVersionSet ApiVersionSetContractDetails
		err := apiVersionSet.AssignProperties_From_ApiVersionSetContractDetails(source.ApiVersionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ApiVersionSetContractDetails() to populate field ApiVersionSet")
		}
		serviceApi.ApiVersionSet = &apiVersionSet
	} else {
		serviceApi.ApiVersionSet = nil
	}

	// ApiVersionSetReference
	if source.ApiVersionSetReference != nil {
		apiVersionSetReference := source.ApiVersionSetReference.Copy()
		serviceApi.ApiVersionSetReference = &apiVersionSetReference
	} else {
		serviceApi.ApiVersionSetReference = nil
	}

	// AuthenticationSettings
	if source.AuthenticationSettings != nil {
		var authenticationSetting AuthenticationSettingsContract
		err := authenticationSetting.AssignProperties_From_AuthenticationSettingsContract(source.AuthenticationSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AuthenticationSettingsContract() to populate field AuthenticationSettings")
		}
		serviceApi.AuthenticationSettings = &authenticationSetting
	} else {
		serviceApi.AuthenticationSettings = nil
	}

	// AzureName
	serviceApi.AzureName = source.AzureName

	// Contact
	if source.Contact != nil {
		var contact ApiContactInformation
		err := contact.AssignProperties_From_ApiContactInformation(source.Contact)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ApiContactInformation() to populate field Contact")
		}
		serviceApi.Contact = &contact
	} else {
		serviceApi.Contact = nil
	}

	// Description
	serviceApi.Description = genruntime.ClonePointerToString(source.Description)

	// DisplayName
	if source.DisplayName != nil {
		displayName := *source.DisplayName
		serviceApi.DisplayName = &displayName
	} else {
		serviceApi.DisplayName = nil
	}

	// Format
	if source.Format != nil {
		format := ApiCreateOrUpdateProperties_Format(*source.Format)
		serviceApi.Format = &format
	} else {
		serviceApi.Format = nil
	}

	// IsCurrent
	if source.IsCurrent != nil {
		isCurrent := *source.IsCurrent
		serviceApi.IsCurrent = &isCurrent
	} else {
		serviceApi.IsCurrent = nil
	}

	// License
	if source.License != nil {
		var license ApiLicenseInformation
		err := license.AssignProperties_From_ApiLicenseInformation(source.License)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ApiLicenseInformation() to populate field License")
		}
		serviceApi.License = &license
	} else {
		serviceApi.License = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		serviceApi.Owner = &owner
	} else {
		serviceApi.Owner = nil
	}

	// Path
	if source.Path != nil {
		path := *source.Path
		serviceApi.Path = &path
	} else {
		serviceApi.Path = nil
	}

	// Protocols
	if source.Protocols != nil {
		protocolList := make([]ApiCreateOrUpdateProperties_Protocols, len(source.Protocols))
		for protocolIndex, protocolItem := range source.Protocols {
			// Shadow the loop variable to avoid aliasing
			protocolItem := protocolItem
			protocolList[protocolIndex] = ApiCreateOrUpdateProperties_Protocols(protocolItem)
		}
		serviceApi.Protocols = protocolList
	} else {
		serviceApi.Protocols = nil
	}

	// ServiceUrl
	if source.ServiceUrl != nil {
		serviceUrl := *source.ServiceUrl
		serviceApi.ServiceUrl = &serviceUrl
	} else {
		serviceApi.ServiceUrl = nil
	}

	// SourceApiReference
	if source.SourceApiReference != nil {
		sourceApiReference := source.SourceApiReference.Copy()
		serviceApi.SourceApiReference = &sourceApiReference
	} else {
		serviceApi.SourceApiReference = nil
	}

	// SubscriptionKeyParameterNames
	if source.SubscriptionKeyParameterNames != nil {
		var subscriptionKeyParameterName SubscriptionKeyParameterNamesContract
		err := subscriptionKeyParameterName.AssignProperties_From_SubscriptionKeyParameterNamesContract(source.SubscriptionKeyParameterNames)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubscriptionKeyParameterNamesContract() to populate field SubscriptionKeyParameterNames")
		}
		serviceApi.SubscriptionKeyParameterNames = &subscriptionKeyParameterName
	} else {
		serviceApi.SubscriptionKeyParameterNames = nil
	}

	// SubscriptionRequired
	if source.SubscriptionRequired != nil {
		subscriptionRequired := *source.SubscriptionRequired
		serviceApi.SubscriptionRequired = &subscriptionRequired
	} else {
		serviceApi.SubscriptionRequired = nil
	}

	// TermsOfServiceUrl
	serviceApi.TermsOfServiceUrl = genruntime.ClonePointerToString(source.TermsOfServiceUrl)

	// TranslateRequiredQueryParameters
	if source.TranslateRequiredQueryParameters != nil {
		translateRequiredQueryParameter := ApiCreateOrUpdateProperties_TranslateRequiredQueryParameters(*source.TranslateRequiredQueryParameters)
		serviceApi.TranslateRequiredQueryParameters = &translateRequiredQueryParameter
	} else {
		serviceApi.TranslateRequiredQueryParameters = nil
	}

	// Type
	if source.Type != nil {
		typeVar := ApiCreateOrUpdateProperties_Type(*source.Type)
		serviceApi.Type = &typeVar
	} else {
		serviceApi.Type = nil
	}

	// Value
	serviceApi.Value = genruntime.ClonePointerToString(source.Value)

	// WsdlSelector
	if source.WsdlSelector != nil {
		var wsdlSelector ApiCreateOrUpdateProperties_WsdlSelector
		err := wsdlSelector.AssignProperties_From_ApiCreateOrUpdateProperties_WsdlSelector(source.WsdlSelector)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ApiCreateOrUpdateProperties_WsdlSelector() to populate field WsdlSelector")
		}
		serviceApi.WsdlSelector = &wsdlSelector
	} else {
		serviceApi.WsdlSelector = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Service_Api_Spec populates the provided destination Service_Api_Spec from our Service_Api_Spec
func (serviceApi *Service_Api_Spec) AssignProperties_To_Service_Api_Spec(destination *v20220801s.Service_Api_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// APIVersion
	if serviceApi.APIVersion != nil {
		apiVersion := *serviceApi.APIVersion
		destination.APIVersion = &apiVersion
	} else {
		destination.APIVersion = nil
	}

	// ApiRevision
	if serviceApi.ApiRevision != nil {
		apiRevision := *serviceApi.ApiRevision
		destination.ApiRevision = &apiRevision
	} else {
		destination.ApiRevision = nil
	}

	// ApiRevisionDescription
	if serviceApi.ApiRevisionDescription != nil {
		apiRevisionDescription := *serviceApi.ApiRevisionDescription
		destination.ApiRevisionDescription = &apiRevisionDescription
	} else {
		destination.ApiRevisionDescription = nil
	}

	// ApiType
	if serviceApi.ApiType != nil {
		apiType := string(*serviceApi.ApiType)
		destination.ApiType = &apiType
	} else {
		destination.ApiType = nil
	}

	// ApiVersionDescription
	if serviceApi.ApiVersionDescription != nil {
		apiVersionDescription := *serviceApi.ApiVersionDescription
		destination.ApiVersionDescription = &apiVersionDescription
	} else {
		destination.ApiVersionDescription = nil
	}

	// ApiVersionSet
	if serviceApi.ApiVersionSet != nil {
		var apiVersionSet v20220801s.ApiVersionSetContractDetails
		err := serviceApi.ApiVersionSet.AssignProperties_To_ApiVersionSetContractDetails(&apiVersionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ApiVersionSetContractDetails() to populate field ApiVersionSet")
		}
		destination.ApiVersionSet = &apiVersionSet
	} else {
		destination.ApiVersionSet = nil
	}

	// ApiVersionSetReference
	if serviceApi.ApiVersionSetReference != nil {
		apiVersionSetReference := serviceApi.ApiVersionSetReference.Copy()
		destination.ApiVersionSetReference = &apiVersionSetReference
	} else {
		destination.ApiVersionSetReference = nil
	}

	// AuthenticationSettings
	if serviceApi.AuthenticationSettings != nil {
		var authenticationSetting v20220801s.AuthenticationSettingsContract
		err := serviceApi.AuthenticationSettings.AssignProperties_To_AuthenticationSettingsContract(&authenticationSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AuthenticationSettingsContract() to populate field AuthenticationSettings")
		}
		destination.AuthenticationSettings = &authenticationSetting
	} else {
		destination.AuthenticationSettings = nil
	}

	// AzureName
	destination.AzureName = serviceApi.AzureName

	// Contact
	if serviceApi.Contact != nil {
		var contact v20220801s.ApiContactInformation
		err := serviceApi.Contact.AssignProperties_To_ApiContactInformation(&contact)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ApiContactInformation() to populate field Contact")
		}
		destination.Contact = &contact
	} else {
		destination.Contact = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(serviceApi.Description)

	// DisplayName
	if serviceApi.DisplayName != nil {
		displayName := *serviceApi.DisplayName
		destination.DisplayName = &displayName
	} else {
		destination.DisplayName = nil
	}

	// Format
	if serviceApi.Format != nil {
		format := string(*serviceApi.Format)
		destination.Format = &format
	} else {
		destination.Format = nil
	}

	// IsCurrent
	if serviceApi.IsCurrent != nil {
		isCurrent := *serviceApi.IsCurrent
		destination.IsCurrent = &isCurrent
	} else {
		destination.IsCurrent = nil
	}

	// License
	if serviceApi.License != nil {
		var license v20220801s.ApiLicenseInformation
		err := serviceApi.License.AssignProperties_To_ApiLicenseInformation(&license)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ApiLicenseInformation() to populate field License")
		}
		destination.License = &license
	} else {
		destination.License = nil
	}

	// OriginalVersion
	destination.OriginalVersion = serviceApi.OriginalVersion()

	// Owner
	if serviceApi.Owner != nil {
		owner := serviceApi.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Path
	if serviceApi.Path != nil {
		path := *serviceApi.Path
		destination.Path = &path
	} else {
		destination.Path = nil
	}

	// Protocols
	if serviceApi.Protocols != nil {
		protocolList := make([]string, len(serviceApi.Protocols))
		for protocolIndex, protocolItem := range serviceApi.Protocols {
			// Shadow the loop variable to avoid aliasing
			protocolItem := protocolItem
			protocolList[protocolIndex] = string(protocolItem)
		}
		destination.Protocols = protocolList
	} else {
		destination.Protocols = nil
	}

	// ServiceUrl
	if serviceApi.ServiceUrl != nil {
		serviceUrl := *serviceApi.ServiceUrl
		destination.ServiceUrl = &serviceUrl
	} else {
		destination.ServiceUrl = nil
	}

	// SourceApiReference
	if serviceApi.SourceApiReference != nil {
		sourceApiReference := serviceApi.SourceApiReference.Copy()
		destination.SourceApiReference = &sourceApiReference
	} else {
		destination.SourceApiReference = nil
	}

	// SubscriptionKeyParameterNames
	if serviceApi.SubscriptionKeyParameterNames != nil {
		var subscriptionKeyParameterName v20220801s.SubscriptionKeyParameterNamesContract
		err := serviceApi.SubscriptionKeyParameterNames.AssignProperties_To_SubscriptionKeyParameterNamesContract(&subscriptionKeyParameterName)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubscriptionKeyParameterNamesContract() to populate field SubscriptionKeyParameterNames")
		}
		destination.SubscriptionKeyParameterNames = &subscriptionKeyParameterName
	} else {
		destination.SubscriptionKeyParameterNames = nil
	}

	// SubscriptionRequired
	if serviceApi.SubscriptionRequired != nil {
		subscriptionRequired := *serviceApi.SubscriptionRequired
		destination.SubscriptionRequired = &subscriptionRequired
	} else {
		destination.SubscriptionRequired = nil
	}

	// TermsOfServiceUrl
	destination.TermsOfServiceUrl = genruntime.ClonePointerToString(serviceApi.TermsOfServiceUrl)

	// TranslateRequiredQueryParameters
	if serviceApi.TranslateRequiredQueryParameters != nil {
		translateRequiredQueryParameter := string(*serviceApi.TranslateRequiredQueryParameters)
		destination.TranslateRequiredQueryParameters = &translateRequiredQueryParameter
	} else {
		destination.TranslateRequiredQueryParameters = nil
	}

	// Type
	if serviceApi.Type != nil {
		typeVar := string(*serviceApi.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToString(serviceApi.Value)

	// WsdlSelector
	if serviceApi.WsdlSelector != nil {
		var wsdlSelector v20220801s.ApiCreateOrUpdateProperties_WsdlSelector
		err := serviceApi.WsdlSelector.AssignProperties_To_ApiCreateOrUpdateProperties_WsdlSelector(&wsdlSelector)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ApiCreateOrUpdateProperties_WsdlSelector() to populate field WsdlSelector")
		}
		destination.WsdlSelector = &wsdlSelector
	} else {
		destination.WsdlSelector = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_Service_Api_STATUS populates our Service_Api_Spec from the provided source Service_Api_STATUS
func (serviceApi *Service_Api_Spec) Initialize_From_Service_Api_STATUS(source *Service_Api_STATUS) error {

	// APIVersion
	if source.APIVersion != nil {
		apiVersion := *source.APIVersion
		serviceApi.APIVersion = &apiVersion
	} else {
		serviceApi.APIVersion = nil
	}

	// ApiRevision
	if source.ApiRevision != nil {
		apiRevision := *source.ApiRevision
		serviceApi.ApiRevision = &apiRevision
	} else {
		serviceApi.ApiRevision = nil
	}

	// ApiRevisionDescription
	if source.ApiRevisionDescription != nil {
		apiRevisionDescription := *source.ApiRevisionDescription
		serviceApi.ApiRevisionDescription = &apiRevisionDescription
	} else {
		serviceApi.ApiRevisionDescription = nil
	}

	// ApiVersionDescription
	if source.ApiVersionDescription != nil {
		apiVersionDescription := *source.ApiVersionDescription
		serviceApi.ApiVersionDescription = &apiVersionDescription
	} else {
		serviceApi.ApiVersionDescription = nil
	}

	// ApiVersionSet
	if source.ApiVersionSet != nil {
		var apiVersionSet ApiVersionSetContractDetails
		err := apiVersionSet.Initialize_From_ApiVersionSetContractDetails_STATUS(source.ApiVersionSet)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_ApiVersionSetContractDetails_STATUS() to populate field ApiVersionSet")
		}
		serviceApi.ApiVersionSet = &apiVersionSet
	} else {
		serviceApi.ApiVersionSet = nil
	}

	// ApiVersionSetReference
	if source.ApiVersionSetId != nil {
		apiVersionSetReference := genruntime.CreateResourceReferenceFromARMID(*source.ApiVersionSetId)
		serviceApi.ApiVersionSetReference = &apiVersionSetReference
	} else {
		serviceApi.ApiVersionSetReference = nil
	}

	// AuthenticationSettings
	if source.AuthenticationSettings != nil {
		var authenticationSetting AuthenticationSettingsContract
		err := authenticationSetting.Initialize_From_AuthenticationSettingsContract_STATUS(source.AuthenticationSettings)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_AuthenticationSettingsContract_STATUS() to populate field AuthenticationSettings")
		}
		serviceApi.AuthenticationSettings = &authenticationSetting
	} else {
		serviceApi.AuthenticationSettings = nil
	}

	// Contact
	if source.Contact != nil {
		var contact ApiContactInformation
		err := contact.Initialize_From_ApiContactInformation_STATUS(source.Contact)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_ApiContactInformation_STATUS() to populate field Contact")
		}
		serviceApi.Contact = &contact
	} else {
		serviceApi.Contact = nil
	}

	// Description
	serviceApi.Description = genruntime.ClonePointerToString(source.Description)

	// DisplayName
	if source.DisplayName != nil {
		displayName := *source.DisplayName
		serviceApi.DisplayName = &displayName
	} else {
		serviceApi.DisplayName = nil
	}

	// IsCurrent
	if source.IsCurrent != nil {
		isCurrent := *source.IsCurrent
		serviceApi.IsCurrent = &isCurrent
	} else {
		serviceApi.IsCurrent = nil
	}

	// License
	if source.License != nil {
		var license ApiLicenseInformation
		err := license.Initialize_From_ApiLicenseInformation_STATUS(source.License)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_ApiLicenseInformation_STATUS() to populate field License")
		}
		serviceApi.License = &license
	} else {
		serviceApi.License = nil
	}

	// Path
	if source.Path != nil {
		path := *source.Path
		serviceApi.Path = &path
	} else {
		serviceApi.Path = nil
	}

	// Protocols
	if source.Protocols != nil {
		protocolList := make([]ApiCreateOrUpdateProperties_Protocols, len(source.Protocols))
		for protocolIndex, protocolItem := range source.Protocols {
			// Shadow the loop variable to avoid aliasing
			protocolItem := protocolItem
			protocol := ApiCreateOrUpdateProperties_Protocols(protocolItem)
			protocolList[protocolIndex] = protocol
		}
		serviceApi.Protocols = protocolList
	} else {
		serviceApi.Protocols = nil
	}

	// ServiceUrl
	if source.ServiceUrl != nil {
		serviceUrl := *source.ServiceUrl
		serviceApi.ServiceUrl = &serviceUrl
	} else {
		serviceApi.ServiceUrl = nil
	}

	// SourceApiReference
	if source.SourceApiId != nil {
		sourceApiReference := genruntime.CreateResourceReferenceFromARMID(*source.SourceApiId)
		serviceApi.SourceApiReference = &sourceApiReference
	} else {
		serviceApi.SourceApiReference = nil
	}

	// SubscriptionKeyParameterNames
	if source.SubscriptionKeyParameterNames != nil {
		var subscriptionKeyParameterName SubscriptionKeyParameterNamesContract
		err := subscriptionKeyParameterName.Initialize_From_SubscriptionKeyParameterNamesContract_STATUS(source.SubscriptionKeyParameterNames)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SubscriptionKeyParameterNamesContract_STATUS() to populate field SubscriptionKeyParameterNames")
		}
		serviceApi.SubscriptionKeyParameterNames = &subscriptionKeyParameterName
	} else {
		serviceApi.SubscriptionKeyParameterNames = nil
	}

	// SubscriptionRequired
	if source.SubscriptionRequired != nil {
		subscriptionRequired := *source.SubscriptionRequired
		serviceApi.SubscriptionRequired = &subscriptionRequired
	} else {
		serviceApi.SubscriptionRequired = nil
	}

	// TermsOfServiceUrl
	serviceApi.TermsOfServiceUrl = genruntime.ClonePointerToString(source.TermsOfServiceUrl)

	// Type
	if source.Type != nil {
		typeVar := ApiCreateOrUpdateProperties_Type(*source.Type)
		serviceApi.Type = &typeVar
	} else {
		serviceApi.Type = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (serviceApi *Service_Api_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (serviceApi *Service_Api_Spec) SetAzureName(azureName string) { serviceApi.AzureName = azureName }

type Service_Api_STATUS struct {
	// APIVersion: Indicates the version identifier of the API if the API is versioned
	APIVersion *string `json:"apiVersion,omitempty"`

	// ApiRevision: Describes the revision of the API. If no value is provided, default revision 1 is created
	ApiRevision *string `json:"apiRevision,omitempty"`

	// ApiRevisionDescription: Description of the API Revision.
	ApiRevisionDescription *string `json:"apiRevisionDescription,omitempty"`

	// ApiVersionDescription: Description of the API Version.
	ApiVersionDescription *string `json:"apiVersionDescription,omitempty"`

	// ApiVersionSet: Version set details
	ApiVersionSet *ApiVersionSetContractDetails_STATUS `json:"apiVersionSet,omitempty"`

	// ApiVersionSetId: A resource identifier for the related ApiVersionSet.
	ApiVersionSetId *string `json:"apiVersionSetId,omitempty"`

	// AuthenticationSettings: Collection of authentication settings included into this API.
	AuthenticationSettings *AuthenticationSettingsContract_STATUS `json:"authenticationSettings,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Contact: Contact information for the API.
	Contact *ApiContactInformation_STATUS `json:"contact,omitempty"`

	// Description: Description of the API. May include HTML formatting tags.
	Description *string `json:"description,omitempty"`

	// DisplayName: API name. Must be 1 to 300 characters long.
	DisplayName *string `json:"displayName,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// IsCurrent: Indicates if API revision is current api revision.
	IsCurrent *bool `json:"isCurrent,omitempty"`

	// IsOnline: Indicates if API revision is accessible via the gateway.
	IsOnline *bool `json:"isOnline,omitempty"`

	// License: License information for the API.
	License *ApiLicenseInformation_STATUS `json:"license,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Path: Relative URL uniquely identifying this API and all of its resource paths within the API Management service
	// instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public
	// URL for this API.
	Path *string `json:"path,omitempty"`

	// PropertiesType: Type of API.
	PropertiesType *ApiContractProperties_Type_STATUS `json:"properties_type,omitempty"`

	// Protocols: Describes on which protocols the operations in this API can be invoked.
	Protocols []ApiContractProperties_Protocols_STATUS `json:"protocols,omitempty"`

	// ServiceUrl: Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
	ServiceUrl *string `json:"serviceUrl,omitempty"`

	// SourceApiId: API identifier of the source API.
	SourceApiId *string `json:"sourceApiId,omitempty"`

	// SubscriptionKeyParameterNames: Protocols over which API is made available.
	SubscriptionKeyParameterNames *SubscriptionKeyParameterNamesContract_STATUS `json:"subscriptionKeyParameterNames,omitempty"`

	// SubscriptionRequired: Specifies whether an API or Product subscription is required for accessing the API.
	SubscriptionRequired *bool `json:"subscriptionRequired,omitempty"`

	// TermsOfServiceUrl:  A URL to the Terms of Service for the API. MUST be in the format of a URL.
	TermsOfServiceUrl *string `json:"termsOfServiceUrl,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Service_Api_STATUS{}

// ConvertStatusFrom populates our Service_Api_STATUS from the provided source
func (serviceApi *Service_Api_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20220801s.Service_Api_STATUS)
	if ok {
		// Populate our instance from source
		return serviceApi.AssignProperties_From_Service_Api_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20220801s.Service_Api_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = serviceApi.AssignProperties_From_Service_Api_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Service_Api_STATUS
func (serviceApi *Service_Api_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20220801s.Service_Api_STATUS)
	if ok {
		// Populate destination from our instance
		return serviceApi.AssignProperties_To_Service_Api_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20220801s.Service_Api_STATUS{}
	err := serviceApi.AssignProperties_To_Service_Api_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Service_Api_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (serviceApi *Service_Api_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Service_Api_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (serviceApi *Service_Api_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Service_Api_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Service_Api_STATUS_ARM, got %T", armInput)
	}

	// Set property "APIVersion":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.APIVersion != nil {
			apiVersion := *typedInput.Properties.APIVersion
			serviceApi.APIVersion = &apiVersion
		}
	}

	// Set property "ApiRevision":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiRevision != nil {
			apiRevision := *typedInput.Properties.ApiRevision
			serviceApi.ApiRevision = &apiRevision
		}
	}

	// Set property "ApiRevisionDescription":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiRevisionDescription != nil {
			apiRevisionDescription := *typedInput.Properties.ApiRevisionDescription
			serviceApi.ApiRevisionDescription = &apiRevisionDescription
		}
	}

	// Set property "ApiVersionDescription":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiVersionDescription != nil {
			apiVersionDescription := *typedInput.Properties.ApiVersionDescription
			serviceApi.ApiVersionDescription = &apiVersionDescription
		}
	}

	// Set property "ApiVersionSet":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiVersionSet != nil {
			var apiVersionSet1 ApiVersionSetContractDetails_STATUS
			err := apiVersionSet1.PopulateFromARM(owner, *typedInput.Properties.ApiVersionSet)
			if err != nil {
				return err
			}
			apiVersionSet := apiVersionSet1
			serviceApi.ApiVersionSet = &apiVersionSet
		}
	}

	// Set property "ApiVersionSetId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiVersionSetId != nil {
			apiVersionSetId := *typedInput.Properties.ApiVersionSetId
			serviceApi.ApiVersionSetId = &apiVersionSetId
		}
	}

	// Set property "AuthenticationSettings":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AuthenticationSettings != nil {
			var authenticationSettings1 AuthenticationSettingsContract_STATUS
			err := authenticationSettings1.PopulateFromARM(owner, *typedInput.Properties.AuthenticationSettings)
			if err != nil {
				return err
			}
			authenticationSettings := authenticationSettings1
			serviceApi.AuthenticationSettings = &authenticationSettings
		}
	}

	// no assignment for property "Conditions"

	// Set property "Contact":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Contact != nil {
			var contact1 ApiContactInformation_STATUS
			err := contact1.PopulateFromARM(owner, *typedInput.Properties.Contact)
			if err != nil {
				return err
			}
			contact := contact1
			serviceApi.Contact = &contact
		}
	}

	// Set property "Description":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Description != nil {
			description := *typedInput.Properties.Description
			serviceApi.Description = &description
		}
	}

	// Set property "DisplayName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisplayName != nil {
			displayName := *typedInput.Properties.DisplayName
			serviceApi.DisplayName = &displayName
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		serviceApi.Id = &id
	}

	// Set property "IsCurrent":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsCurrent != nil {
			isCurrent := *typedInput.Properties.IsCurrent
			serviceApi.IsCurrent = &isCurrent
		}
	}

	// Set property "IsOnline":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsOnline != nil {
			isOnline := *typedInput.Properties.IsOnline
			serviceApi.IsOnline = &isOnline
		}
	}

	// Set property "License":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.License != nil {
			var license1 ApiLicenseInformation_STATUS
			err := license1.PopulateFromARM(owner, *typedInput.Properties.License)
			if err != nil {
				return err
			}
			license := license1
			serviceApi.License = &license
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		serviceApi.Name = &name
	}

	// Set property "Path":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Path != nil {
			path := *typedInput.Properties.Path
			serviceApi.Path = &path
		}
	}

	// Set property "PropertiesType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Type != nil {
			propertiesType := *typedInput.Properties.Type
			serviceApi.PropertiesType = &propertiesType
		}
	}

	// Set property "Protocols":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Protocols {
			serviceApi.Protocols = append(serviceApi.Protocols, item)
		}
	}

	// Set property "ServiceUrl":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServiceUrl != nil {
			serviceUrl := *typedInput.Properties.ServiceUrl
			serviceApi.ServiceUrl = &serviceUrl
		}
	}

	// Set property "SourceApiId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceApiId != nil {
			sourceApiId := *typedInput.Properties.SourceApiId
			serviceApi.SourceApiId = &sourceApiId
		}
	}

	// Set property "SubscriptionKeyParameterNames":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SubscriptionKeyParameterNames != nil {
			var subscriptionKeyParameterNames1 SubscriptionKeyParameterNamesContract_STATUS
			err := subscriptionKeyParameterNames1.PopulateFromARM(owner, *typedInput.Properties.SubscriptionKeyParameterNames)
			if err != nil {
				return err
			}
			subscriptionKeyParameterNames := subscriptionKeyParameterNames1
			serviceApi.SubscriptionKeyParameterNames = &subscriptionKeyParameterNames
		}
	}

	// Set property "SubscriptionRequired":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SubscriptionRequired != nil {
			subscriptionRequired := *typedInput.Properties.SubscriptionRequired
			serviceApi.SubscriptionRequired = &subscriptionRequired
		}
	}

	// Set property "TermsOfServiceUrl":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TermsOfServiceUrl != nil {
			termsOfServiceUrl := *typedInput.Properties.TermsOfServiceUrl
			serviceApi.TermsOfServiceUrl = &termsOfServiceUrl
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		serviceApi.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_Service_Api_STATUS populates our Service_Api_STATUS from the provided source Service_Api_STATUS
func (serviceApi *Service_Api_STATUS) AssignProperties_From_Service_Api_STATUS(source *v20220801s.Service_Api_STATUS) error {

	// APIVersion
	serviceApi.APIVersion = genruntime.ClonePointerToString(source.APIVersion)

	// ApiRevision
	serviceApi.ApiRevision = genruntime.ClonePointerToString(source.ApiRevision)

	// ApiRevisionDescription
	serviceApi.ApiRevisionDescription = genruntime.ClonePointerToString(source.ApiRevisionDescription)

	// ApiVersionDescription
	serviceApi.ApiVersionDescription = genruntime.ClonePointerToString(source.ApiVersionDescription)

	// ApiVersionSet
	if source.ApiVersionSet != nil {
		var apiVersionSet ApiVersionSetContractDetails_STATUS
		err := apiVersionSet.AssignProperties_From_ApiVersionSetContractDetails_STATUS(source.ApiVersionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ApiVersionSetContractDetails_STATUS() to populate field ApiVersionSet")
		}
		serviceApi.ApiVersionSet = &apiVersionSet
	} else {
		serviceApi.ApiVersionSet = nil
	}

	// ApiVersionSetId
	serviceApi.ApiVersionSetId = genruntime.ClonePointerToString(source.ApiVersionSetId)

	// AuthenticationSettings
	if source.AuthenticationSettings != nil {
		var authenticationSetting AuthenticationSettingsContract_STATUS
		err := authenticationSetting.AssignProperties_From_AuthenticationSettingsContract_STATUS(source.AuthenticationSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_AuthenticationSettingsContract_STATUS() to populate field AuthenticationSettings")
		}
		serviceApi.AuthenticationSettings = &authenticationSetting
	} else {
		serviceApi.AuthenticationSettings = nil
	}

	// Conditions
	serviceApi.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Contact
	if source.Contact != nil {
		var contact ApiContactInformation_STATUS
		err := contact.AssignProperties_From_ApiContactInformation_STATUS(source.Contact)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ApiContactInformation_STATUS() to populate field Contact")
		}
		serviceApi.Contact = &contact
	} else {
		serviceApi.Contact = nil
	}

	// Description
	serviceApi.Description = genruntime.ClonePointerToString(source.Description)

	// DisplayName
	serviceApi.DisplayName = genruntime.ClonePointerToString(source.DisplayName)

	// Id
	serviceApi.Id = genruntime.ClonePointerToString(source.Id)

	// IsCurrent
	if source.IsCurrent != nil {
		isCurrent := *source.IsCurrent
		serviceApi.IsCurrent = &isCurrent
	} else {
		serviceApi.IsCurrent = nil
	}

	// IsOnline
	if source.IsOnline != nil {
		isOnline := *source.IsOnline
		serviceApi.IsOnline = &isOnline
	} else {
		serviceApi.IsOnline = nil
	}

	// License
	if source.License != nil {
		var license ApiLicenseInformation_STATUS
		err := license.AssignProperties_From_ApiLicenseInformation_STATUS(source.License)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ApiLicenseInformation_STATUS() to populate field License")
		}
		serviceApi.License = &license
	} else {
		serviceApi.License = nil
	}

	// Name
	serviceApi.Name = genruntime.ClonePointerToString(source.Name)

	// Path
	serviceApi.Path = genruntime.ClonePointerToString(source.Path)

	// PropertiesType
	if source.PropertiesType != nil {
		propertiesType := ApiContractProperties_Type_STATUS(*source.PropertiesType)
		serviceApi.PropertiesType = &propertiesType
	} else {
		serviceApi.PropertiesType = nil
	}

	// Protocols
	if source.Protocols != nil {
		protocolList := make([]ApiContractProperties_Protocols_STATUS, len(source.Protocols))
		for protocolIndex, protocolItem := range source.Protocols {
			// Shadow the loop variable to avoid aliasing
			protocolItem := protocolItem
			protocolList[protocolIndex] = ApiContractProperties_Protocols_STATUS(protocolItem)
		}
		serviceApi.Protocols = protocolList
	} else {
		serviceApi.Protocols = nil
	}

	// ServiceUrl
	serviceApi.ServiceUrl = genruntime.ClonePointerToString(source.ServiceUrl)

	// SourceApiId
	serviceApi.SourceApiId = genruntime.ClonePointerToString(source.SourceApiId)

	// SubscriptionKeyParameterNames
	if source.SubscriptionKeyParameterNames != nil {
		var subscriptionKeyParameterName SubscriptionKeyParameterNamesContract_STATUS
		err := subscriptionKeyParameterName.AssignProperties_From_SubscriptionKeyParameterNamesContract_STATUS(source.SubscriptionKeyParameterNames)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SubscriptionKeyParameterNamesContract_STATUS() to populate field SubscriptionKeyParameterNames")
		}
		serviceApi.SubscriptionKeyParameterNames = &subscriptionKeyParameterName
	} else {
		serviceApi.SubscriptionKeyParameterNames = nil
	}

	// SubscriptionRequired
	if source.SubscriptionRequired != nil {
		subscriptionRequired := *source.SubscriptionRequired
		serviceApi.SubscriptionRequired = &subscriptionRequired
	} else {
		serviceApi.SubscriptionRequired = nil
	}

	// TermsOfServiceUrl
	serviceApi.TermsOfServiceUrl = genruntime.ClonePointerToString(source.TermsOfServiceUrl)

	// Type
	serviceApi.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_Service_Api_STATUS populates the provided destination Service_Api_STATUS from our Service_Api_STATUS
func (serviceApi *Service_Api_STATUS) AssignProperties_To_Service_Api_STATUS(destination *v20220801s.Service_Api_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// APIVersion
	destination.APIVersion = genruntime.ClonePointerToString(serviceApi.APIVersion)

	// ApiRevision
	destination.ApiRevision = genruntime.ClonePointerToString(serviceApi.ApiRevision)

	// ApiRevisionDescription
	destination.ApiRevisionDescription = genruntime.ClonePointerToString(serviceApi.ApiRevisionDescription)

	// ApiVersionDescription
	destination.ApiVersionDescription = genruntime.ClonePointerToString(serviceApi.ApiVersionDescription)

	// ApiVersionSet
	if serviceApi.ApiVersionSet != nil {
		var apiVersionSet v20220801s.ApiVersionSetContractDetails_STATUS
		err := serviceApi.ApiVersionSet.AssignProperties_To_ApiVersionSetContractDetails_STATUS(&apiVersionSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ApiVersionSetContractDetails_STATUS() to populate field ApiVersionSet")
		}
		destination.ApiVersionSet = &apiVersionSet
	} else {
		destination.ApiVersionSet = nil
	}

	// ApiVersionSetId
	destination.ApiVersionSetId = genruntime.ClonePointerToString(serviceApi.ApiVersionSetId)

	// AuthenticationSettings
	if serviceApi.AuthenticationSettings != nil {
		var authenticationSetting v20220801s.AuthenticationSettingsContract_STATUS
		err := serviceApi.AuthenticationSettings.AssignProperties_To_AuthenticationSettingsContract_STATUS(&authenticationSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_AuthenticationSettingsContract_STATUS() to populate field AuthenticationSettings")
		}
		destination.AuthenticationSettings = &authenticationSetting
	} else {
		destination.AuthenticationSettings = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(serviceApi.Conditions)

	// Contact
	if serviceApi.Contact != nil {
		var contact v20220801s.ApiContactInformation_STATUS
		err := serviceApi.Contact.AssignProperties_To_ApiContactInformation_STATUS(&contact)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ApiContactInformation_STATUS() to populate field Contact")
		}
		destination.Contact = &contact
	} else {
		destination.Contact = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(serviceApi.Description)

	// DisplayName
	destination.DisplayName = genruntime.ClonePointerToString(serviceApi.DisplayName)

	// Id
	destination.Id = genruntime.ClonePointerToString(serviceApi.Id)

	// IsCurrent
	if serviceApi.IsCurrent != nil {
		isCurrent := *serviceApi.IsCurrent
		destination.IsCurrent = &isCurrent
	} else {
		destination.IsCurrent = nil
	}

	// IsOnline
	if serviceApi.IsOnline != nil {
		isOnline := *serviceApi.IsOnline
		destination.IsOnline = &isOnline
	} else {
		destination.IsOnline = nil
	}

	// License
	if serviceApi.License != nil {
		var license v20220801s.ApiLicenseInformation_STATUS
		err := serviceApi.License.AssignProperties_To_ApiLicenseInformation_STATUS(&license)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ApiLicenseInformation_STATUS() to populate field License")
		}
		destination.License = &license
	} else {
		destination.License = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(serviceApi.Name)

	// Path
	destination.Path = genruntime.ClonePointerToString(serviceApi.Path)

	// PropertiesType
	if serviceApi.PropertiesType != nil {
		propertiesType := string(*serviceApi.PropertiesType)
		destination.PropertiesType = &propertiesType
	} else {
		destination.PropertiesType = nil
	}

	// Protocols
	if serviceApi.Protocols != nil {
		protocolList := make([]string, len(serviceApi.Protocols))
		for protocolIndex, protocolItem := range serviceApi.Protocols {
			// Shadow the loop variable to avoid aliasing
			protocolItem := protocolItem
			protocolList[protocolIndex] = string(protocolItem)
		}
		destination.Protocols = protocolList
	} else {
		destination.Protocols = nil
	}

	// ServiceUrl
	destination.ServiceUrl = genruntime.ClonePointerToString(serviceApi.ServiceUrl)

	// SourceApiId
	destination.SourceApiId = genruntime.ClonePointerToString(serviceApi.SourceApiId)

	// SubscriptionKeyParameterNames
	if serviceApi.SubscriptionKeyParameterNames != nil {
		var subscriptionKeyParameterName v20220801s.SubscriptionKeyParameterNamesContract_STATUS
		err := serviceApi.SubscriptionKeyParameterNames.AssignProperties_To_SubscriptionKeyParameterNamesContract_STATUS(&subscriptionKeyParameterName)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SubscriptionKeyParameterNamesContract_STATUS() to populate field SubscriptionKeyParameterNames")
		}
		destination.SubscriptionKeyParameterNames = &subscriptionKeyParameterName
	} else {
		destination.SubscriptionKeyParameterNames = nil
	}

	// SubscriptionRequired
	if serviceApi.SubscriptionRequired != nil {
		subscriptionRequired := *serviceApi.SubscriptionRequired
		destination.SubscriptionRequired = &subscriptionRequired
	} else {
		destination.SubscriptionRequired = nil
	}

	// TermsOfServiceUrl
	destination.TermsOfServiceUrl = genruntime.ClonePointerToString(serviceApi.TermsOfServiceUrl)

	// Type
	destination.Type = genruntime.ClonePointerToString(serviceApi.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// API contact information
type ApiContactInformation struct {
	// Email: The email address of the contact person/organization. MUST be in the format of an email address
	Email *string `json:"email,omitempty"`

	// Name: The identifying name of the contact person/organization
	Name *string `json:"name,omitempty"`

	// Url: The URL pointing to the contact information. MUST be in the format of a URL
	Url *string `json:"url,omitempty"`
}

var _ genruntime.ARMTransformer = &ApiContactInformation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (information *ApiContactInformation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if information == nil {
		return nil, nil
	}
	result := &ApiContactInformation_ARM{}

	// Set property "Email":
	if information.Email != nil {
		email := *information.Email
		result.Email = &email
	}

	// Set property "Name":
	if information.Name != nil {
		name := *information.Name
		result.Name = &name
	}

	// Set property "Url":
	if information.Url != nil {
		url := *information.Url
		result.Url = &url
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (information *ApiContactInformation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiContactInformation_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (information *ApiContactInformation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiContactInformation_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiContactInformation_ARM, got %T", armInput)
	}

	// Set property "Email":
	if typedInput.Email != nil {
		email := *typedInput.Email
		information.Email = &email
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		information.Name = &name
	}

	// Set property "Url":
	if typedInput.Url != nil {
		url := *typedInput.Url
		information.Url = &url
	}

	// No error
	return nil
}

// AssignProperties_From_ApiContactInformation populates our ApiContactInformation from the provided source ApiContactInformation
func (information *ApiContactInformation) AssignProperties_From_ApiContactInformation(source *v20220801s.ApiContactInformation) error {

	// Email
	information.Email = genruntime.ClonePointerToString(source.Email)

	// Name
	information.Name = genruntime.ClonePointerToString(source.Name)

	// Url
	information.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// AssignProperties_To_ApiContactInformation populates the provided destination ApiContactInformation from our ApiContactInformation
func (information *ApiContactInformation) AssignProperties_To_ApiContactInformation(destination *v20220801s.ApiContactInformation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Email
	destination.Email = genruntime.ClonePointerToString(information.Email)

	// Name
	destination.Name = genruntime.ClonePointerToString(information.Name)

	// Url
	destination.Url = genruntime.ClonePointerToString(information.Url)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ApiContactInformation_STATUS populates our ApiContactInformation from the provided source ApiContactInformation_STATUS
func (information *ApiContactInformation) Initialize_From_ApiContactInformation_STATUS(source *ApiContactInformation_STATUS) error {

	// Email
	information.Email = genruntime.ClonePointerToString(source.Email)

	// Name
	information.Name = genruntime.ClonePointerToString(source.Name)

	// Url
	information.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// API contact information
type ApiContactInformation_STATUS struct {
	// Email: The email address of the contact person/organization. MUST be in the format of an email address
	Email *string `json:"email,omitempty"`

	// Name: The identifying name of the contact person/organization
	Name *string `json:"name,omitempty"`

	// Url: The URL pointing to the contact information. MUST be in the format of a URL
	Url *string `json:"url,omitempty"`
}

var _ genruntime.FromARMConverter = &ApiContactInformation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (information *ApiContactInformation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiContactInformation_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (information *ApiContactInformation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiContactInformation_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiContactInformation_STATUS_ARM, got %T", armInput)
	}

	// Set property "Email":
	if typedInput.Email != nil {
		email := *typedInput.Email
		information.Email = &email
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		information.Name = &name
	}

	// Set property "Url":
	if typedInput.Url != nil {
		url := *typedInput.Url
		information.Url = &url
	}

	// No error
	return nil
}

// AssignProperties_From_ApiContactInformation_STATUS populates our ApiContactInformation_STATUS from the provided source ApiContactInformation_STATUS
func (information *ApiContactInformation_STATUS) AssignProperties_From_ApiContactInformation_STATUS(source *v20220801s.ApiContactInformation_STATUS) error {

	// Email
	information.Email = genruntime.ClonePointerToString(source.Email)

	// Name
	information.Name = genruntime.ClonePointerToString(source.Name)

	// Url
	information.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// AssignProperties_To_ApiContactInformation_STATUS populates the provided destination ApiContactInformation_STATUS from our ApiContactInformation_STATUS
func (information *ApiContactInformation_STATUS) AssignProperties_To_ApiContactInformation_STATUS(destination *v20220801s.ApiContactInformation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Email
	destination.Email = genruntime.ClonePointerToString(information.Email)

	// Name
	destination.Name = genruntime.ClonePointerToString(information.Name)

	// Url
	destination.Url = genruntime.ClonePointerToString(information.Url)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ApiContractProperties_Protocols_STATUS string

const (
	ApiContractProperties_Protocols_STATUS_Http  = ApiContractProperties_Protocols_STATUS("http")
	ApiContractProperties_Protocols_STATUS_Https = ApiContractProperties_Protocols_STATUS("https")
	ApiContractProperties_Protocols_STATUS_Ws    = ApiContractProperties_Protocols_STATUS("ws")
	ApiContractProperties_Protocols_STATUS_Wss   = ApiContractProperties_Protocols_STATUS("wss")
)

type ApiContractProperties_Type_STATUS string

const (
	ApiContractProperties_Type_STATUS_Graphql   = ApiContractProperties_Type_STATUS("graphql")
	ApiContractProperties_Type_STATUS_Http      = ApiContractProperties_Type_STATUS("http")
	ApiContractProperties_Type_STATUS_Soap      = ApiContractProperties_Type_STATUS("soap")
	ApiContractProperties_Type_STATUS_Websocket = ApiContractProperties_Type_STATUS("websocket")
)

// +kubebuilder:validation:Enum={"graphql","http","soap","websocket"}
type ApiCreateOrUpdateProperties_ApiType string

const (
	ApiCreateOrUpdateProperties_ApiType_Graphql   = ApiCreateOrUpdateProperties_ApiType("graphql")
	ApiCreateOrUpdateProperties_ApiType_Http      = ApiCreateOrUpdateProperties_ApiType("http")
	ApiCreateOrUpdateProperties_ApiType_Soap      = ApiCreateOrUpdateProperties_ApiType("soap")
	ApiCreateOrUpdateProperties_ApiType_Websocket = ApiCreateOrUpdateProperties_ApiType("websocket")
)

// +kubebuilder:validation:Enum={"graphql-link","openapi","openapi+json","openapi+json-link","openapi-link","swagger-json","swagger-link-json","wadl-link-json","wadl-xml","wsdl","wsdl-link"}
type ApiCreateOrUpdateProperties_Format string

const (
	ApiCreateOrUpdateProperties_Format_GraphqlLink     = ApiCreateOrUpdateProperties_Format("graphql-link")
	ApiCreateOrUpdateProperties_Format_Openapi         = ApiCreateOrUpdateProperties_Format("openapi")
	ApiCreateOrUpdateProperties_Format_OpenapiJson     = ApiCreateOrUpdateProperties_Format("openapi+json")
	ApiCreateOrUpdateProperties_Format_OpenapiJsonLink = ApiCreateOrUpdateProperties_Format("openapi+json-link")
	ApiCreateOrUpdateProperties_Format_OpenapiLink     = ApiCreateOrUpdateProperties_Format("openapi-link")
	ApiCreateOrUpdateProperties_Format_SwaggerJson     = ApiCreateOrUpdateProperties_Format("swagger-json")
	ApiCreateOrUpdateProperties_Format_SwaggerLinkJson = ApiCreateOrUpdateProperties_Format("swagger-link-json")
	ApiCreateOrUpdateProperties_Format_WadlLinkJson    = ApiCreateOrUpdateProperties_Format("wadl-link-json")
	ApiCreateOrUpdateProperties_Format_WadlXml         = ApiCreateOrUpdateProperties_Format("wadl-xml")
	ApiCreateOrUpdateProperties_Format_Wsdl            = ApiCreateOrUpdateProperties_Format("wsdl")
	ApiCreateOrUpdateProperties_Format_WsdlLink        = ApiCreateOrUpdateProperties_Format("wsdl-link")
)

// +kubebuilder:validation:Enum={"http","https","ws","wss"}
type ApiCreateOrUpdateProperties_Protocols string

const (
	ApiCreateOrUpdateProperties_Protocols_Http  = ApiCreateOrUpdateProperties_Protocols("http")
	ApiCreateOrUpdateProperties_Protocols_Https = ApiCreateOrUpdateProperties_Protocols("https")
	ApiCreateOrUpdateProperties_Protocols_Ws    = ApiCreateOrUpdateProperties_Protocols("ws")
	ApiCreateOrUpdateProperties_Protocols_Wss   = ApiCreateOrUpdateProperties_Protocols("wss")
)

// +kubebuilder:validation:Enum={"query","template"}
type ApiCreateOrUpdateProperties_TranslateRequiredQueryParameters string

const (
	ApiCreateOrUpdateProperties_TranslateRequiredQueryParameters_Query    = ApiCreateOrUpdateProperties_TranslateRequiredQueryParameters("query")
	ApiCreateOrUpdateProperties_TranslateRequiredQueryParameters_Template = ApiCreateOrUpdateProperties_TranslateRequiredQueryParameters("template")
)

// +kubebuilder:validation:Enum={"graphql","http","soap","websocket"}
type ApiCreateOrUpdateProperties_Type string

const (
	ApiCreateOrUpdateProperties_Type_Graphql   = ApiCreateOrUpdateProperties_Type("graphql")
	ApiCreateOrUpdateProperties_Type_Http      = ApiCreateOrUpdateProperties_Type("http")
	ApiCreateOrUpdateProperties_Type_Soap      = ApiCreateOrUpdateProperties_Type("soap")
	ApiCreateOrUpdateProperties_Type_Websocket = ApiCreateOrUpdateProperties_Type("websocket")
)

type ApiCreateOrUpdateProperties_WsdlSelector struct {
	// WsdlEndpointName: Name of endpoint(port) to import from WSDL
	WsdlEndpointName *string `json:"wsdlEndpointName,omitempty"`

	// WsdlServiceName: Name of service to import from WSDL
	WsdlServiceName *string `json:"wsdlServiceName,omitempty"`
}

var _ genruntime.ARMTransformer = &ApiCreateOrUpdateProperties_WsdlSelector{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (selector *ApiCreateOrUpdateProperties_WsdlSelector) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if selector == nil {
		return nil, nil
	}
	result := &ApiCreateOrUpdateProperties_WsdlSelector_ARM{}

	// Set property "WsdlEndpointName":
	if selector.WsdlEndpointName != nil {
		wsdlEndpointName := *selector.WsdlEndpointName
		result.WsdlEndpointName = &wsdlEndpointName
	}

	// Set property "WsdlServiceName":
	if selector.WsdlServiceName != nil {
		wsdlServiceName := *selector.WsdlServiceName
		result.WsdlServiceName = &wsdlServiceName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (selector *ApiCreateOrUpdateProperties_WsdlSelector) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiCreateOrUpdateProperties_WsdlSelector_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (selector *ApiCreateOrUpdateProperties_WsdlSelector) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiCreateOrUpdateProperties_WsdlSelector_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiCreateOrUpdateProperties_WsdlSelector_ARM, got %T", armInput)
	}

	// Set property "WsdlEndpointName":
	if typedInput.WsdlEndpointName != nil {
		wsdlEndpointName := *typedInput.WsdlEndpointName
		selector.WsdlEndpointName = &wsdlEndpointName
	}

	// Set property "WsdlServiceName":
	if typedInput.WsdlServiceName != nil {
		wsdlServiceName := *typedInput.WsdlServiceName
		selector.WsdlServiceName = &wsdlServiceName
	}

	// No error
	return nil
}

// AssignProperties_From_ApiCreateOrUpdateProperties_WsdlSelector populates our ApiCreateOrUpdateProperties_WsdlSelector from the provided source ApiCreateOrUpdateProperties_WsdlSelector
func (selector *ApiCreateOrUpdateProperties_WsdlSelector) AssignProperties_From_ApiCreateOrUpdateProperties_WsdlSelector(source *v20220801s.ApiCreateOrUpdateProperties_WsdlSelector) error {

	// WsdlEndpointName
	selector.WsdlEndpointName = genruntime.ClonePointerToString(source.WsdlEndpointName)

	// WsdlServiceName
	selector.WsdlServiceName = genruntime.ClonePointerToString(source.WsdlServiceName)

	// No error
	return nil
}

// AssignProperties_To_ApiCreateOrUpdateProperties_WsdlSelector populates the provided destination ApiCreateOrUpdateProperties_WsdlSelector from our ApiCreateOrUpdateProperties_WsdlSelector
func (selector *ApiCreateOrUpdateProperties_WsdlSelector) AssignProperties_To_ApiCreateOrUpdateProperties_WsdlSelector(destination *v20220801s.ApiCreateOrUpdateProperties_WsdlSelector) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// WsdlEndpointName
	destination.WsdlEndpointName = genruntime.ClonePointerToString(selector.WsdlEndpointName)

	// WsdlServiceName
	destination.WsdlServiceName = genruntime.ClonePointerToString(selector.WsdlServiceName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// API license information
type ApiLicenseInformation struct {
	// Name: The license name used for the API
	Name *string `json:"name,omitempty"`

	// Url: A URL to the license used for the API. MUST be in the format of a URL
	Url *string `json:"url,omitempty"`
}

var _ genruntime.ARMTransformer = &ApiLicenseInformation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (information *ApiLicenseInformation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if information == nil {
		return nil, nil
	}
	result := &ApiLicenseInformation_ARM{}

	// Set property "Name":
	if information.Name != nil {
		name := *information.Name
		result.Name = &name
	}

	// Set property "Url":
	if information.Url != nil {
		url := *information.Url
		result.Url = &url
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (information *ApiLicenseInformation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiLicenseInformation_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (information *ApiLicenseInformation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiLicenseInformation_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiLicenseInformation_ARM, got %T", armInput)
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		information.Name = &name
	}

	// Set property "Url":
	if typedInput.Url != nil {
		url := *typedInput.Url
		information.Url = &url
	}

	// No error
	return nil
}

// AssignProperties_From_ApiLicenseInformation populates our ApiLicenseInformation from the provided source ApiLicenseInformation
func (information *ApiLicenseInformation) AssignProperties_From_ApiLicenseInformation(source *v20220801s.ApiLicenseInformation) error {

	// Name
	information.Name = genruntime.ClonePointerToString(source.Name)

	// Url
	information.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// AssignProperties_To_ApiLicenseInformation populates the provided destination ApiLicenseInformation from our ApiLicenseInformation
func (information *ApiLicenseInformation) AssignProperties_To_ApiLicenseInformation(destination *v20220801s.ApiLicenseInformation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(information.Name)

	// Url
	destination.Url = genruntime.ClonePointerToString(information.Url)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ApiLicenseInformation_STATUS populates our ApiLicenseInformation from the provided source ApiLicenseInformation_STATUS
func (information *ApiLicenseInformation) Initialize_From_ApiLicenseInformation_STATUS(source *ApiLicenseInformation_STATUS) error {

	// Name
	information.Name = genruntime.ClonePointerToString(source.Name)

	// Url
	information.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// API license information
type ApiLicenseInformation_STATUS struct {
	// Name: The license name used for the API
	Name *string `json:"name,omitempty"`

	// Url: A URL to the license used for the API. MUST be in the format of a URL
	Url *string `json:"url,omitempty"`
}

var _ genruntime.FromARMConverter = &ApiLicenseInformation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (information *ApiLicenseInformation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiLicenseInformation_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (information *ApiLicenseInformation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiLicenseInformation_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiLicenseInformation_STATUS_ARM, got %T", armInput)
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		information.Name = &name
	}

	// Set property "Url":
	if typedInput.Url != nil {
		url := *typedInput.Url
		information.Url = &url
	}

	// No error
	return nil
}

// AssignProperties_From_ApiLicenseInformation_STATUS populates our ApiLicenseInformation_STATUS from the provided source ApiLicenseInformation_STATUS
func (information *ApiLicenseInformation_STATUS) AssignProperties_From_ApiLicenseInformation_STATUS(source *v20220801s.ApiLicenseInformation_STATUS) error {

	// Name
	information.Name = genruntime.ClonePointerToString(source.Name)

	// Url
	information.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// AssignProperties_To_ApiLicenseInformation_STATUS populates the provided destination ApiLicenseInformation_STATUS from our ApiLicenseInformation_STATUS
func (information *ApiLicenseInformation_STATUS) AssignProperties_To_ApiLicenseInformation_STATUS(destination *v20220801s.ApiLicenseInformation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	destination.Name = genruntime.ClonePointerToString(information.Name)

	// Url
	destination.Url = genruntime.ClonePointerToString(information.Url)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// An API Version Set contains the common configuration for a set of API Versions relating
type ApiVersionSetContractDetails struct {
	// Description: Description of API Version Set.
	Description *string `json:"description,omitempty"`

	// Name: The display Name of the API Version Set.
	Name *string `json:"name,omitempty"`

	// Reference: Identifier for existing API Version Set. Omit this value to create a new Version Set.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	// VersionHeaderName: Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
	VersionHeaderName *string `json:"versionHeaderName,omitempty"`

	// VersionQueryName: Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
	VersionQueryName *string `json:"versionQueryName,omitempty"`

	// VersioningScheme: An value that determines where the API Version identifier will be located in a HTTP request.
	VersioningScheme *ApiVersionSetContractDetails_VersioningScheme `json:"versioningScheme,omitempty"`
}

var _ genruntime.ARMTransformer = &ApiVersionSetContractDetails{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (details *ApiVersionSetContractDetails) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if details == nil {
		return nil, nil
	}
	result := &ApiVersionSetContractDetails_ARM{}

	// Set property "Description":
	if details.Description != nil {
		description := *details.Description
		result.Description = &description
	}

	// Set property "Id":
	if details.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.Lookup(*details.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property "Name":
	if details.Name != nil {
		name := *details.Name
		result.Name = &name
	}

	// Set property "VersionHeaderName":
	if details.VersionHeaderName != nil {
		versionHeaderName := *details.VersionHeaderName
		result.VersionHeaderName = &versionHeaderName
	}

	// Set property "VersionQueryName":
	if details.VersionQueryName != nil {
		versionQueryName := *details.VersionQueryName
		result.VersionQueryName = &versionQueryName
	}

	// Set property "VersioningScheme":
	if details.VersioningScheme != nil {
		versioningScheme := *details.VersioningScheme
		result.VersioningScheme = &versioningScheme
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (details *ApiVersionSetContractDetails) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiVersionSetContractDetails_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (details *ApiVersionSetContractDetails) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiVersionSetContractDetails_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiVersionSetContractDetails_ARM, got %T", armInput)
	}

	// Set property "Description":
	if typedInput.Description != nil {
		description := *typedInput.Description
		details.Description = &description
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		details.Name = &name
	}

	// no assignment for property "Reference"

	// Set property "VersionHeaderName":
	if typedInput.VersionHeaderName != nil {
		versionHeaderName := *typedInput.VersionHeaderName
		details.VersionHeaderName = &versionHeaderName
	}

	// Set property "VersionQueryName":
	if typedInput.VersionQueryName != nil {
		versionQueryName := *typedInput.VersionQueryName
		details.VersionQueryName = &versionQueryName
	}

	// Set property "VersioningScheme":
	if typedInput.VersioningScheme != nil {
		versioningScheme := *typedInput.VersioningScheme
		details.VersioningScheme = &versioningScheme
	}

	// No error
	return nil
}

// AssignProperties_From_ApiVersionSetContractDetails populates our ApiVersionSetContractDetails from the provided source ApiVersionSetContractDetails
func (details *ApiVersionSetContractDetails) AssignProperties_From_ApiVersionSetContractDetails(source *v20220801s.ApiVersionSetContractDetails) error {

	// Description
	details.Description = genruntime.ClonePointerToString(source.Description)

	// Name
	details.Name = genruntime.ClonePointerToString(source.Name)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		details.Reference = &reference
	} else {
		details.Reference = nil
	}

	// VersionHeaderName
	details.VersionHeaderName = genruntime.ClonePointerToString(source.VersionHeaderName)

	// VersionQueryName
	details.VersionQueryName = genruntime.ClonePointerToString(source.VersionQueryName)

	// VersioningScheme
	if source.VersioningScheme != nil {
		versioningScheme := ApiVersionSetContractDetails_VersioningScheme(*source.VersioningScheme)
		details.VersioningScheme = &versioningScheme
	} else {
		details.VersioningScheme = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ApiVersionSetContractDetails populates the provided destination ApiVersionSetContractDetails from our ApiVersionSetContractDetails
func (details *ApiVersionSetContractDetails) AssignProperties_To_ApiVersionSetContractDetails(destination *v20220801s.ApiVersionSetContractDetails) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Description
	destination.Description = genruntime.ClonePointerToString(details.Description)

	// Name
	destination.Name = genruntime.ClonePointerToString(details.Name)

	// Reference
	if details.Reference != nil {
		reference := details.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// VersionHeaderName
	destination.VersionHeaderName = genruntime.ClonePointerToString(details.VersionHeaderName)

	// VersionQueryName
	destination.VersionQueryName = genruntime.ClonePointerToString(details.VersionQueryName)

	// VersioningScheme
	if details.VersioningScheme != nil {
		versioningScheme := string(*details.VersioningScheme)
		destination.VersioningScheme = &versioningScheme
	} else {
		destination.VersioningScheme = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ApiVersionSetContractDetails_STATUS populates our ApiVersionSetContractDetails from the provided source ApiVersionSetContractDetails_STATUS
func (details *ApiVersionSetContractDetails) Initialize_From_ApiVersionSetContractDetails_STATUS(source *ApiVersionSetContractDetails_STATUS) error {

	// Description
	details.Description = genruntime.ClonePointerToString(source.Description)

	// Name
	details.Name = genruntime.ClonePointerToString(source.Name)

	// Reference
	if source.Id != nil {
		reference := genruntime.CreateResourceReferenceFromARMID(*source.Id)
		details.Reference = &reference
	} else {
		details.Reference = nil
	}

	// VersionHeaderName
	details.VersionHeaderName = genruntime.ClonePointerToString(source.VersionHeaderName)

	// VersionQueryName
	details.VersionQueryName = genruntime.ClonePointerToString(source.VersionQueryName)

	// VersioningScheme
	if source.VersioningScheme != nil {
		versioningScheme := ApiVersionSetContractDetails_VersioningScheme(*source.VersioningScheme)
		details.VersioningScheme = &versioningScheme
	} else {
		details.VersioningScheme = nil
	}

	// No error
	return nil
}

// An API Version Set contains the common configuration for a set of API Versions relating
type ApiVersionSetContractDetails_STATUS struct {
	// Description: Description of API Version Set.
	Description *string `json:"description,omitempty"`

	// Id: Identifier for existing API Version Set. Omit this value to create a new Version Set.
	Id *string `json:"id,omitempty"`

	// Name: The display Name of the API Version Set.
	Name *string `json:"name,omitempty"`

	// VersionHeaderName: Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
	VersionHeaderName *string `json:"versionHeaderName,omitempty"`

	// VersionQueryName: Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
	VersionQueryName *string `json:"versionQueryName,omitempty"`

	// VersioningScheme: An value that determines where the API Version identifier will be located in a HTTP request.
	VersioningScheme *ApiVersionSetContractDetails_VersioningScheme_STATUS `json:"versioningScheme,omitempty"`
}

var _ genruntime.FromARMConverter = &ApiVersionSetContractDetails_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (details *ApiVersionSetContractDetails_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiVersionSetContractDetails_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (details *ApiVersionSetContractDetails_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiVersionSetContractDetails_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiVersionSetContractDetails_STATUS_ARM, got %T", armInput)
	}

	// Set property "Description":
	if typedInput.Description != nil {
		description := *typedInput.Description
		details.Description = &description
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		details.Id = &id
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		details.Name = &name
	}

	// Set property "VersionHeaderName":
	if typedInput.VersionHeaderName != nil {
		versionHeaderName := *typedInput.VersionHeaderName
		details.VersionHeaderName = &versionHeaderName
	}

	// Set property "VersionQueryName":
	if typedInput.VersionQueryName != nil {
		versionQueryName := *typedInput.VersionQueryName
		details.VersionQueryName = &versionQueryName
	}

	// Set property "VersioningScheme":
	if typedInput.VersioningScheme != nil {
		versioningScheme := *typedInput.VersioningScheme
		details.VersioningScheme = &versioningScheme
	}

	// No error
	return nil
}

// AssignProperties_From_ApiVersionSetContractDetails_STATUS populates our ApiVersionSetContractDetails_STATUS from the provided source ApiVersionSetContractDetails_STATUS
func (details *ApiVersionSetContractDetails_STATUS) AssignProperties_From_ApiVersionSetContractDetails_STATUS(source *v20220801s.ApiVersionSetContractDetails_STATUS) error {

	// Description
	details.Description = genruntime.ClonePointerToString(source.Description)

	// Id
	details.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	details.Name = genruntime.ClonePointerToString(source.Name)

	// VersionHeaderName
	details.VersionHeaderName = genruntime.ClonePointerToString(source.VersionHeaderName)

	// VersionQueryName
	details.VersionQueryName = genruntime.ClonePointerToString(source.VersionQueryName)

	// VersioningScheme
	if source.VersioningScheme != nil {
		versioningScheme := ApiVersionSetContractDetails_VersioningScheme_STATUS(*source.VersioningScheme)
		details.VersioningScheme = &versioningScheme
	} else {
		details.VersioningScheme = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ApiVersionSetContractDetails_STATUS populates the provided destination ApiVersionSetContractDetails_STATUS from our ApiVersionSetContractDetails_STATUS
func (details *ApiVersionSetContractDetails_STATUS) AssignProperties_To_ApiVersionSetContractDetails_STATUS(destination *v20220801s.ApiVersionSetContractDetails_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Description
	destination.Description = genruntime.ClonePointerToString(details.Description)

	// Id
	destination.Id = genruntime.ClonePointerToString(details.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(details.Name)

	// VersionHeaderName
	destination.VersionHeaderName = genruntime.ClonePointerToString(details.VersionHeaderName)

	// VersionQueryName
	destination.VersionQueryName = genruntime.ClonePointerToString(details.VersionQueryName)

	// VersioningScheme
	if details.VersioningScheme != nil {
		versioningScheme := string(*details.VersioningScheme)
		destination.VersioningScheme = &versioningScheme
	} else {
		destination.VersioningScheme = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// API Authentication Settings.
type AuthenticationSettingsContract struct {
	// OAuth2: OAuth2 Authentication settings
	OAuth2 *OAuth2AuthenticationSettingsContract `json:"oAuth2,omitempty"`

	// OAuth2AuthenticationSettings: Collection of OAuth2 authentication settings included into this API.
	OAuth2AuthenticationSettings []OAuth2AuthenticationSettingsContract `json:"oAuth2AuthenticationSettings,omitempty"`

	// Openid: OpenID Connect Authentication Settings
	Openid *OpenIdAuthenticationSettingsContract `json:"openid,omitempty"`

	// OpenidAuthenticationSettings: Collection of Open ID Connect authentication settings included into this API.
	OpenidAuthenticationSettings []OpenIdAuthenticationSettingsContract `json:"openidAuthenticationSettings,omitempty"`
}

var _ genruntime.ARMTransformer = &AuthenticationSettingsContract{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (contract *AuthenticationSettingsContract) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if contract == nil {
		return nil, nil
	}
	result := &AuthenticationSettingsContract_ARM{}

	// Set property "OAuth2":
	if contract.OAuth2 != nil {
		oAuth2_ARM, err := (*contract.OAuth2).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		oAuth2 := *oAuth2_ARM.(*OAuth2AuthenticationSettingsContract_ARM)
		result.OAuth2 = &oAuth2
	}

	// Set property "OAuth2AuthenticationSettings":
	for _, item := range contract.OAuth2AuthenticationSettings {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.OAuth2AuthenticationSettings = append(result.OAuth2AuthenticationSettings, *item_ARM.(*OAuth2AuthenticationSettingsContract_ARM))
	}

	// Set property "Openid":
	if contract.Openid != nil {
		openid_ARM, err := (*contract.Openid).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		openid := *openid_ARM.(*OpenIdAuthenticationSettingsContract_ARM)
		result.Openid = &openid
	}

	// Set property "OpenidAuthenticationSettings":
	for _, item := range contract.OpenidAuthenticationSettings {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.OpenidAuthenticationSettings = append(result.OpenidAuthenticationSettings, *item_ARM.(*OpenIdAuthenticationSettingsContract_ARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *AuthenticationSettingsContract) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AuthenticationSettingsContract_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *AuthenticationSettingsContract) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AuthenticationSettingsContract_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AuthenticationSettingsContract_ARM, got %T", armInput)
	}

	// Set property "OAuth2":
	if typedInput.OAuth2 != nil {
		var oAuth OAuth2AuthenticationSettingsContract
		err := oAuth.PopulateFromARM(owner, *typedInput.OAuth2)
		if err != nil {
			return err
		}
		oAuth2 := oAuth
		contract.OAuth2 = &oAuth2
	}

	// Set property "OAuth2AuthenticationSettings":
	for _, item := range typedInput.OAuth2AuthenticationSettings {
		var item1 OAuth2AuthenticationSettingsContract
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		contract.OAuth2AuthenticationSettings = append(contract.OAuth2AuthenticationSettings, item1)
	}

	// Set property "Openid":
	if typedInput.Openid != nil {
		var openid1 OpenIdAuthenticationSettingsContract
		err := openid1.PopulateFromARM(owner, *typedInput.Openid)
		if err != nil {
			return err
		}
		openid := openid1
		contract.Openid = &openid
	}

	// Set property "OpenidAuthenticationSettings":
	for _, item := range typedInput.OpenidAuthenticationSettings {
		var item1 OpenIdAuthenticationSettingsContract
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		contract.OpenidAuthenticationSettings = append(contract.OpenidAuthenticationSettings, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_AuthenticationSettingsContract populates our AuthenticationSettingsContract from the provided source AuthenticationSettingsContract
func (contract *AuthenticationSettingsContract) AssignProperties_From_AuthenticationSettingsContract(source *v20220801s.AuthenticationSettingsContract) error {

	// OAuth2
	if source.OAuth2 != nil {
		var oAuth2 OAuth2AuthenticationSettingsContract
		err := oAuth2.AssignProperties_From_OAuth2AuthenticationSettingsContract(source.OAuth2)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_OAuth2AuthenticationSettingsContract() to populate field OAuth2")
		}
		contract.OAuth2 = &oAuth2
	} else {
		contract.OAuth2 = nil
	}

	// OAuth2AuthenticationSettings
	if source.OAuth2AuthenticationSettings != nil {
		oAuth2AuthenticationSettingList := make([]OAuth2AuthenticationSettingsContract, len(source.OAuth2AuthenticationSettings))
		for oAuth2AuthenticationSettingIndex, oAuth2AuthenticationSettingItem := range source.OAuth2AuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			oAuth2AuthenticationSettingItem := oAuth2AuthenticationSettingItem
			var oAuth2AuthenticationSetting OAuth2AuthenticationSettingsContract
			err := oAuth2AuthenticationSetting.AssignProperties_From_OAuth2AuthenticationSettingsContract(&oAuth2AuthenticationSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_OAuth2AuthenticationSettingsContract() to populate field OAuth2AuthenticationSettings")
			}
			oAuth2AuthenticationSettingList[oAuth2AuthenticationSettingIndex] = oAuth2AuthenticationSetting
		}
		contract.OAuth2AuthenticationSettings = oAuth2AuthenticationSettingList
	} else {
		contract.OAuth2AuthenticationSettings = nil
	}

	// Openid
	if source.Openid != nil {
		var openid OpenIdAuthenticationSettingsContract
		err := openid.AssignProperties_From_OpenIdAuthenticationSettingsContract(source.Openid)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_OpenIdAuthenticationSettingsContract() to populate field Openid")
		}
		contract.Openid = &openid
	} else {
		contract.Openid = nil
	}

	// OpenidAuthenticationSettings
	if source.OpenidAuthenticationSettings != nil {
		openidAuthenticationSettingList := make([]OpenIdAuthenticationSettingsContract, len(source.OpenidAuthenticationSettings))
		for openidAuthenticationSettingIndex, openidAuthenticationSettingItem := range source.OpenidAuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			openidAuthenticationSettingItem := openidAuthenticationSettingItem
			var openidAuthenticationSetting OpenIdAuthenticationSettingsContract
			err := openidAuthenticationSetting.AssignProperties_From_OpenIdAuthenticationSettingsContract(&openidAuthenticationSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_OpenIdAuthenticationSettingsContract() to populate field OpenidAuthenticationSettings")
			}
			openidAuthenticationSettingList[openidAuthenticationSettingIndex] = openidAuthenticationSetting
		}
		contract.OpenidAuthenticationSettings = openidAuthenticationSettingList
	} else {
		contract.OpenidAuthenticationSettings = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AuthenticationSettingsContract populates the provided destination AuthenticationSettingsContract from our AuthenticationSettingsContract
func (contract *AuthenticationSettingsContract) AssignProperties_To_AuthenticationSettingsContract(destination *v20220801s.AuthenticationSettingsContract) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// OAuth2
	if contract.OAuth2 != nil {
		var oAuth2 v20220801s.OAuth2AuthenticationSettingsContract
		err := contract.OAuth2.AssignProperties_To_OAuth2AuthenticationSettingsContract(&oAuth2)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_OAuth2AuthenticationSettingsContract() to populate field OAuth2")
		}
		destination.OAuth2 = &oAuth2
	} else {
		destination.OAuth2 = nil
	}

	// OAuth2AuthenticationSettings
	if contract.OAuth2AuthenticationSettings != nil {
		oAuth2AuthenticationSettingList := make([]v20220801s.OAuth2AuthenticationSettingsContract, len(contract.OAuth2AuthenticationSettings))
		for oAuth2AuthenticationSettingIndex, oAuth2AuthenticationSettingItem := range contract.OAuth2AuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			oAuth2AuthenticationSettingItem := oAuth2AuthenticationSettingItem
			var oAuth2AuthenticationSetting v20220801s.OAuth2AuthenticationSettingsContract
			err := oAuth2AuthenticationSettingItem.AssignProperties_To_OAuth2AuthenticationSettingsContract(&oAuth2AuthenticationSetting)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_OAuth2AuthenticationSettingsContract() to populate field OAuth2AuthenticationSettings")
			}
			oAuth2AuthenticationSettingList[oAuth2AuthenticationSettingIndex] = oAuth2AuthenticationSetting
		}
		destination.OAuth2AuthenticationSettings = oAuth2AuthenticationSettingList
	} else {
		destination.OAuth2AuthenticationSettings = nil
	}

	// Openid
	if contract.Openid != nil {
		var openid v20220801s.OpenIdAuthenticationSettingsContract
		err := contract.Openid.AssignProperties_To_OpenIdAuthenticationSettingsContract(&openid)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_OpenIdAuthenticationSettingsContract() to populate field Openid")
		}
		destination.Openid = &openid
	} else {
		destination.Openid = nil
	}

	// OpenidAuthenticationSettings
	if contract.OpenidAuthenticationSettings != nil {
		openidAuthenticationSettingList := make([]v20220801s.OpenIdAuthenticationSettingsContract, len(contract.OpenidAuthenticationSettings))
		for openidAuthenticationSettingIndex, openidAuthenticationSettingItem := range contract.OpenidAuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			openidAuthenticationSettingItem := openidAuthenticationSettingItem
			var openidAuthenticationSetting v20220801s.OpenIdAuthenticationSettingsContract
			err := openidAuthenticationSettingItem.AssignProperties_To_OpenIdAuthenticationSettingsContract(&openidAuthenticationSetting)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_OpenIdAuthenticationSettingsContract() to populate field OpenidAuthenticationSettings")
			}
			openidAuthenticationSettingList[openidAuthenticationSettingIndex] = openidAuthenticationSetting
		}
		destination.OpenidAuthenticationSettings = openidAuthenticationSettingList
	} else {
		destination.OpenidAuthenticationSettings = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_AuthenticationSettingsContract_STATUS populates our AuthenticationSettingsContract from the provided source AuthenticationSettingsContract_STATUS
func (contract *AuthenticationSettingsContract) Initialize_From_AuthenticationSettingsContract_STATUS(source *AuthenticationSettingsContract_STATUS) error {

	// OAuth2
	if source.OAuth2 != nil {
		var oAuth2 OAuth2AuthenticationSettingsContract
		err := oAuth2.Initialize_From_OAuth2AuthenticationSettingsContract_STATUS(source.OAuth2)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_OAuth2AuthenticationSettingsContract_STATUS() to populate field OAuth2")
		}
		contract.OAuth2 = &oAuth2
	} else {
		contract.OAuth2 = nil
	}

	// OAuth2AuthenticationSettings
	if source.OAuth2AuthenticationSettings != nil {
		oAuth2AuthenticationSettingList := make([]OAuth2AuthenticationSettingsContract, len(source.OAuth2AuthenticationSettings))
		for oAuth2AuthenticationSettingIndex, oAuth2AuthenticationSettingItem := range source.OAuth2AuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			oAuth2AuthenticationSettingItem := oAuth2AuthenticationSettingItem
			var oAuth2AuthenticationSetting OAuth2AuthenticationSettingsContract
			err := oAuth2AuthenticationSetting.Initialize_From_OAuth2AuthenticationSettingsContract_STATUS(&oAuth2AuthenticationSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_OAuth2AuthenticationSettingsContract_STATUS() to populate field OAuth2AuthenticationSettings")
			}
			oAuth2AuthenticationSettingList[oAuth2AuthenticationSettingIndex] = oAuth2AuthenticationSetting
		}
		contract.OAuth2AuthenticationSettings = oAuth2AuthenticationSettingList
	} else {
		contract.OAuth2AuthenticationSettings = nil
	}

	// Openid
	if source.Openid != nil {
		var openid OpenIdAuthenticationSettingsContract
		err := openid.Initialize_From_OpenIdAuthenticationSettingsContract_STATUS(source.Openid)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_OpenIdAuthenticationSettingsContract_STATUS() to populate field Openid")
		}
		contract.Openid = &openid
	} else {
		contract.Openid = nil
	}

	// OpenidAuthenticationSettings
	if source.OpenidAuthenticationSettings != nil {
		openidAuthenticationSettingList := make([]OpenIdAuthenticationSettingsContract, len(source.OpenidAuthenticationSettings))
		for openidAuthenticationSettingIndex, openidAuthenticationSettingItem := range source.OpenidAuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			openidAuthenticationSettingItem := openidAuthenticationSettingItem
			var openidAuthenticationSetting OpenIdAuthenticationSettingsContract
			err := openidAuthenticationSetting.Initialize_From_OpenIdAuthenticationSettingsContract_STATUS(&openidAuthenticationSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_OpenIdAuthenticationSettingsContract_STATUS() to populate field OpenidAuthenticationSettings")
			}
			openidAuthenticationSettingList[openidAuthenticationSettingIndex] = openidAuthenticationSetting
		}
		contract.OpenidAuthenticationSettings = openidAuthenticationSettingList
	} else {
		contract.OpenidAuthenticationSettings = nil
	}

	// No error
	return nil
}

// API Authentication Settings.
type AuthenticationSettingsContract_STATUS struct {
	// OAuth2: OAuth2 Authentication settings
	OAuth2 *OAuth2AuthenticationSettingsContract_STATUS `json:"oAuth2,omitempty"`

	// OAuth2AuthenticationSettings: Collection of OAuth2 authentication settings included into this API.
	OAuth2AuthenticationSettings []OAuth2AuthenticationSettingsContract_STATUS `json:"oAuth2AuthenticationSettings,omitempty"`

	// Openid: OpenID Connect Authentication Settings
	Openid *OpenIdAuthenticationSettingsContract_STATUS `json:"openid,omitempty"`

	// OpenidAuthenticationSettings: Collection of Open ID Connect authentication settings included into this API.
	OpenidAuthenticationSettings []OpenIdAuthenticationSettingsContract_STATUS `json:"openidAuthenticationSettings,omitempty"`
}

var _ genruntime.FromARMConverter = &AuthenticationSettingsContract_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *AuthenticationSettingsContract_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AuthenticationSettingsContract_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *AuthenticationSettingsContract_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AuthenticationSettingsContract_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AuthenticationSettingsContract_STATUS_ARM, got %T", armInput)
	}

	// Set property "OAuth2":
	if typedInput.OAuth2 != nil {
		var oAuth OAuth2AuthenticationSettingsContract_STATUS
		err := oAuth.PopulateFromARM(owner, *typedInput.OAuth2)
		if err != nil {
			return err
		}
		oAuth2 := oAuth
		contract.OAuth2 = &oAuth2
	}

	// Set property "OAuth2AuthenticationSettings":
	for _, item := range typedInput.OAuth2AuthenticationSettings {
		var item1 OAuth2AuthenticationSettingsContract_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		contract.OAuth2AuthenticationSettings = append(contract.OAuth2AuthenticationSettings, item1)
	}

	// Set property "Openid":
	if typedInput.Openid != nil {
		var openid1 OpenIdAuthenticationSettingsContract_STATUS
		err := openid1.PopulateFromARM(owner, *typedInput.Openid)
		if err != nil {
			return err
		}
		openid := openid1
		contract.Openid = &openid
	}

	// Set property "OpenidAuthenticationSettings":
	for _, item := range typedInput.OpenidAuthenticationSettings {
		var item1 OpenIdAuthenticationSettingsContract_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		contract.OpenidAuthenticationSettings = append(contract.OpenidAuthenticationSettings, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_AuthenticationSettingsContract_STATUS populates our AuthenticationSettingsContract_STATUS from the provided source AuthenticationSettingsContract_STATUS
func (contract *AuthenticationSettingsContract_STATUS) AssignProperties_From_AuthenticationSettingsContract_STATUS(source *v20220801s.AuthenticationSettingsContract_STATUS) error {

	// OAuth2
	if source.OAuth2 != nil {
		var oAuth2 OAuth2AuthenticationSettingsContract_STATUS
		err := oAuth2.AssignProperties_From_OAuth2AuthenticationSettingsContract_STATUS(source.OAuth2)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_OAuth2AuthenticationSettingsContract_STATUS() to populate field OAuth2")
		}
		contract.OAuth2 = &oAuth2
	} else {
		contract.OAuth2 = nil
	}

	// OAuth2AuthenticationSettings
	if source.OAuth2AuthenticationSettings != nil {
		oAuth2AuthenticationSettingList := make([]OAuth2AuthenticationSettingsContract_STATUS, len(source.OAuth2AuthenticationSettings))
		for oAuth2AuthenticationSettingIndex, oAuth2AuthenticationSettingItem := range source.OAuth2AuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			oAuth2AuthenticationSettingItem := oAuth2AuthenticationSettingItem
			var oAuth2AuthenticationSetting OAuth2AuthenticationSettingsContract_STATUS
			err := oAuth2AuthenticationSetting.AssignProperties_From_OAuth2AuthenticationSettingsContract_STATUS(&oAuth2AuthenticationSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_OAuth2AuthenticationSettingsContract_STATUS() to populate field OAuth2AuthenticationSettings")
			}
			oAuth2AuthenticationSettingList[oAuth2AuthenticationSettingIndex] = oAuth2AuthenticationSetting
		}
		contract.OAuth2AuthenticationSettings = oAuth2AuthenticationSettingList
	} else {
		contract.OAuth2AuthenticationSettings = nil
	}

	// Openid
	if source.Openid != nil {
		var openid OpenIdAuthenticationSettingsContract_STATUS
		err := openid.AssignProperties_From_OpenIdAuthenticationSettingsContract_STATUS(source.Openid)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_OpenIdAuthenticationSettingsContract_STATUS() to populate field Openid")
		}
		contract.Openid = &openid
	} else {
		contract.Openid = nil
	}

	// OpenidAuthenticationSettings
	if source.OpenidAuthenticationSettings != nil {
		openidAuthenticationSettingList := make([]OpenIdAuthenticationSettingsContract_STATUS, len(source.OpenidAuthenticationSettings))
		for openidAuthenticationSettingIndex, openidAuthenticationSettingItem := range source.OpenidAuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			openidAuthenticationSettingItem := openidAuthenticationSettingItem
			var openidAuthenticationSetting OpenIdAuthenticationSettingsContract_STATUS
			err := openidAuthenticationSetting.AssignProperties_From_OpenIdAuthenticationSettingsContract_STATUS(&openidAuthenticationSettingItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_OpenIdAuthenticationSettingsContract_STATUS() to populate field OpenidAuthenticationSettings")
			}
			openidAuthenticationSettingList[openidAuthenticationSettingIndex] = openidAuthenticationSetting
		}
		contract.OpenidAuthenticationSettings = openidAuthenticationSettingList
	} else {
		contract.OpenidAuthenticationSettings = nil
	}

	// No error
	return nil
}

// AssignProperties_To_AuthenticationSettingsContract_STATUS populates the provided destination AuthenticationSettingsContract_STATUS from our AuthenticationSettingsContract_STATUS
func (contract *AuthenticationSettingsContract_STATUS) AssignProperties_To_AuthenticationSettingsContract_STATUS(destination *v20220801s.AuthenticationSettingsContract_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// OAuth2
	if contract.OAuth2 != nil {
		var oAuth2 v20220801s.OAuth2AuthenticationSettingsContract_STATUS
		err := contract.OAuth2.AssignProperties_To_OAuth2AuthenticationSettingsContract_STATUS(&oAuth2)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_OAuth2AuthenticationSettingsContract_STATUS() to populate field OAuth2")
		}
		destination.OAuth2 = &oAuth2
	} else {
		destination.OAuth2 = nil
	}

	// OAuth2AuthenticationSettings
	if contract.OAuth2AuthenticationSettings != nil {
		oAuth2AuthenticationSettingList := make([]v20220801s.OAuth2AuthenticationSettingsContract_STATUS, len(contract.OAuth2AuthenticationSettings))
		for oAuth2AuthenticationSettingIndex, oAuth2AuthenticationSettingItem := range contract.OAuth2AuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			oAuth2AuthenticationSettingItem := oAuth2AuthenticationSettingItem
			var oAuth2AuthenticationSetting v20220801s.OAuth2AuthenticationSettingsContract_STATUS
			err := oAuth2AuthenticationSettingItem.AssignProperties_To_OAuth2AuthenticationSettingsContract_STATUS(&oAuth2AuthenticationSetting)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_OAuth2AuthenticationSettingsContract_STATUS() to populate field OAuth2AuthenticationSettings")
			}
			oAuth2AuthenticationSettingList[oAuth2AuthenticationSettingIndex] = oAuth2AuthenticationSetting
		}
		destination.OAuth2AuthenticationSettings = oAuth2AuthenticationSettingList
	} else {
		destination.OAuth2AuthenticationSettings = nil
	}

	// Openid
	if contract.Openid != nil {
		var openid v20220801s.OpenIdAuthenticationSettingsContract_STATUS
		err := contract.Openid.AssignProperties_To_OpenIdAuthenticationSettingsContract_STATUS(&openid)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_OpenIdAuthenticationSettingsContract_STATUS() to populate field Openid")
		}
		destination.Openid = &openid
	} else {
		destination.Openid = nil
	}

	// OpenidAuthenticationSettings
	if contract.OpenidAuthenticationSettings != nil {
		openidAuthenticationSettingList := make([]v20220801s.OpenIdAuthenticationSettingsContract_STATUS, len(contract.OpenidAuthenticationSettings))
		for openidAuthenticationSettingIndex, openidAuthenticationSettingItem := range contract.OpenidAuthenticationSettings {
			// Shadow the loop variable to avoid aliasing
			openidAuthenticationSettingItem := openidAuthenticationSettingItem
			var openidAuthenticationSetting v20220801s.OpenIdAuthenticationSettingsContract_STATUS
			err := openidAuthenticationSettingItem.AssignProperties_To_OpenIdAuthenticationSettingsContract_STATUS(&openidAuthenticationSetting)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_OpenIdAuthenticationSettingsContract_STATUS() to populate field OpenidAuthenticationSettings")
			}
			openidAuthenticationSettingList[openidAuthenticationSettingIndex] = openidAuthenticationSetting
		}
		destination.OpenidAuthenticationSettings = openidAuthenticationSettingList
	} else {
		destination.OpenidAuthenticationSettings = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Subscription key parameter names details.
type SubscriptionKeyParameterNamesContract struct {
	// Header: Subscription key header name.
	Header *string `json:"header,omitempty"`

	// Query: Subscription key query string parameter name.
	Query *string `json:"query,omitempty"`
}

var _ genruntime.ARMTransformer = &SubscriptionKeyParameterNamesContract{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (contract *SubscriptionKeyParameterNamesContract) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if contract == nil {
		return nil, nil
	}
	result := &SubscriptionKeyParameterNamesContract_ARM{}

	// Set property "Header":
	if contract.Header != nil {
		header := *contract.Header
		result.Header = &header
	}

	// Set property "Query":
	if contract.Query != nil {
		query := *contract.Query
		result.Query = &query
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *SubscriptionKeyParameterNamesContract) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SubscriptionKeyParameterNamesContract_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *SubscriptionKeyParameterNamesContract) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SubscriptionKeyParameterNamesContract_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubscriptionKeyParameterNamesContract_ARM, got %T", armInput)
	}

	// Set property "Header":
	if typedInput.Header != nil {
		header := *typedInput.Header
		contract.Header = &header
	}

	// Set property "Query":
	if typedInput.Query != nil {
		query := *typedInput.Query
		contract.Query = &query
	}

	// No error
	return nil
}

// AssignProperties_From_SubscriptionKeyParameterNamesContract populates our SubscriptionKeyParameterNamesContract from the provided source SubscriptionKeyParameterNamesContract
func (contract *SubscriptionKeyParameterNamesContract) AssignProperties_From_SubscriptionKeyParameterNamesContract(source *v20220801s.SubscriptionKeyParameterNamesContract) error {

	// Header
	contract.Header = genruntime.ClonePointerToString(source.Header)

	// Query
	contract.Query = genruntime.ClonePointerToString(source.Query)

	// No error
	return nil
}

// AssignProperties_To_SubscriptionKeyParameterNamesContract populates the provided destination SubscriptionKeyParameterNamesContract from our SubscriptionKeyParameterNamesContract
func (contract *SubscriptionKeyParameterNamesContract) AssignProperties_To_SubscriptionKeyParameterNamesContract(destination *v20220801s.SubscriptionKeyParameterNamesContract) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Header
	destination.Header = genruntime.ClonePointerToString(contract.Header)

	// Query
	destination.Query = genruntime.ClonePointerToString(contract.Query)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_SubscriptionKeyParameterNamesContract_STATUS populates our SubscriptionKeyParameterNamesContract from the provided source SubscriptionKeyParameterNamesContract_STATUS
func (contract *SubscriptionKeyParameterNamesContract) Initialize_From_SubscriptionKeyParameterNamesContract_STATUS(source *SubscriptionKeyParameterNamesContract_STATUS) error {

	// Header
	contract.Header = genruntime.ClonePointerToString(source.Header)

	// Query
	contract.Query = genruntime.ClonePointerToString(source.Query)

	// No error
	return nil
}

// Subscription key parameter names details.
type SubscriptionKeyParameterNamesContract_STATUS struct {
	// Header: Subscription key header name.
	Header *string `json:"header,omitempty"`

	// Query: Subscription key query string parameter name.
	Query *string `json:"query,omitempty"`
}

var _ genruntime.FromARMConverter = &SubscriptionKeyParameterNamesContract_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *SubscriptionKeyParameterNamesContract_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SubscriptionKeyParameterNamesContract_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *SubscriptionKeyParameterNamesContract_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SubscriptionKeyParameterNamesContract_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubscriptionKeyParameterNamesContract_STATUS_ARM, got %T", armInput)
	}

	// Set property "Header":
	if typedInput.Header != nil {
		header := *typedInput.Header
		contract.Header = &header
	}

	// Set property "Query":
	if typedInput.Query != nil {
		query := *typedInput.Query
		contract.Query = &query
	}

	// No error
	return nil
}

// AssignProperties_From_SubscriptionKeyParameterNamesContract_STATUS populates our SubscriptionKeyParameterNamesContract_STATUS from the provided source SubscriptionKeyParameterNamesContract_STATUS
func (contract *SubscriptionKeyParameterNamesContract_STATUS) AssignProperties_From_SubscriptionKeyParameterNamesContract_STATUS(source *v20220801s.SubscriptionKeyParameterNamesContract_STATUS) error {

	// Header
	contract.Header = genruntime.ClonePointerToString(source.Header)

	// Query
	contract.Query = genruntime.ClonePointerToString(source.Query)

	// No error
	return nil
}

// AssignProperties_To_SubscriptionKeyParameterNamesContract_STATUS populates the provided destination SubscriptionKeyParameterNamesContract_STATUS from our SubscriptionKeyParameterNamesContract_STATUS
func (contract *SubscriptionKeyParameterNamesContract_STATUS) AssignProperties_To_SubscriptionKeyParameterNamesContract_STATUS(destination *v20220801s.SubscriptionKeyParameterNamesContract_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Header
	destination.Header = genruntime.ClonePointerToString(contract.Header)

	// Query
	destination.Query = genruntime.ClonePointerToString(contract.Query)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Header","Query","Segment"}
type ApiVersionSetContractDetails_VersioningScheme string

const (
	ApiVersionSetContractDetails_VersioningScheme_Header  = ApiVersionSetContractDetails_VersioningScheme("Header")
	ApiVersionSetContractDetails_VersioningScheme_Query   = ApiVersionSetContractDetails_VersioningScheme("Query")
	ApiVersionSetContractDetails_VersioningScheme_Segment = ApiVersionSetContractDetails_VersioningScheme("Segment")
)

type ApiVersionSetContractDetails_VersioningScheme_STATUS string

const (
	ApiVersionSetContractDetails_VersioningScheme_STATUS_Header  = ApiVersionSetContractDetails_VersioningScheme_STATUS("Header")
	ApiVersionSetContractDetails_VersioningScheme_STATUS_Query   = ApiVersionSetContractDetails_VersioningScheme_STATUS("Query")
	ApiVersionSetContractDetails_VersioningScheme_STATUS_Segment = ApiVersionSetContractDetails_VersioningScheme_STATUS("Segment")
)

// API OAuth2 Authentication settings details.
type OAuth2AuthenticationSettingsContract struct {
	// AuthorizationServerId: OAuth authorization server identifier.
	AuthorizationServerId *string `json:"authorizationServerId,omitempty"`

	// Scope: operations scope.
	Scope *string `json:"scope,omitempty"`
}

var _ genruntime.ARMTransformer = &OAuth2AuthenticationSettingsContract{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (contract *OAuth2AuthenticationSettingsContract) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if contract == nil {
		return nil, nil
	}
	result := &OAuth2AuthenticationSettingsContract_ARM{}

	// Set property "AuthorizationServerId":
	if contract.AuthorizationServerId != nil {
		authorizationServerId := *contract.AuthorizationServerId
		result.AuthorizationServerId = &authorizationServerId
	}

	// Set property "Scope":
	if contract.Scope != nil {
		scope := *contract.Scope
		result.Scope = &scope
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *OAuth2AuthenticationSettingsContract) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OAuth2AuthenticationSettingsContract_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *OAuth2AuthenticationSettingsContract) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OAuth2AuthenticationSettingsContract_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OAuth2AuthenticationSettingsContract_ARM, got %T", armInput)
	}

	// Set property "AuthorizationServerId":
	if typedInput.AuthorizationServerId != nil {
		authorizationServerId := *typedInput.AuthorizationServerId
		contract.AuthorizationServerId = &authorizationServerId
	}

	// Set property "Scope":
	if typedInput.Scope != nil {
		scope := *typedInput.Scope
		contract.Scope = &scope
	}

	// No error
	return nil
}

// AssignProperties_From_OAuth2AuthenticationSettingsContract populates our OAuth2AuthenticationSettingsContract from the provided source OAuth2AuthenticationSettingsContract
func (contract *OAuth2AuthenticationSettingsContract) AssignProperties_From_OAuth2AuthenticationSettingsContract(source *v20220801s.OAuth2AuthenticationSettingsContract) error {

	// AuthorizationServerId
	contract.AuthorizationServerId = genruntime.ClonePointerToString(source.AuthorizationServerId)

	// Scope
	contract.Scope = genruntime.ClonePointerToString(source.Scope)

	// No error
	return nil
}

// AssignProperties_To_OAuth2AuthenticationSettingsContract populates the provided destination OAuth2AuthenticationSettingsContract from our OAuth2AuthenticationSettingsContract
func (contract *OAuth2AuthenticationSettingsContract) AssignProperties_To_OAuth2AuthenticationSettingsContract(destination *v20220801s.OAuth2AuthenticationSettingsContract) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AuthorizationServerId
	destination.AuthorizationServerId = genruntime.ClonePointerToString(contract.AuthorizationServerId)

	// Scope
	destination.Scope = genruntime.ClonePointerToString(contract.Scope)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_OAuth2AuthenticationSettingsContract_STATUS populates our OAuth2AuthenticationSettingsContract from the provided source OAuth2AuthenticationSettingsContract_STATUS
func (contract *OAuth2AuthenticationSettingsContract) Initialize_From_OAuth2AuthenticationSettingsContract_STATUS(source *OAuth2AuthenticationSettingsContract_STATUS) error {

	// AuthorizationServerId
	contract.AuthorizationServerId = genruntime.ClonePointerToString(source.AuthorizationServerId)

	// Scope
	contract.Scope = genruntime.ClonePointerToString(source.Scope)

	// No error
	return nil
}

// API OAuth2 Authentication settings details.
type OAuth2AuthenticationSettingsContract_STATUS struct {
	// AuthorizationServerId: OAuth authorization server identifier.
	AuthorizationServerId *string `json:"authorizationServerId,omitempty"`

	// Scope: operations scope.
	Scope *string `json:"scope,omitempty"`
}

var _ genruntime.FromARMConverter = &OAuth2AuthenticationSettingsContract_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *OAuth2AuthenticationSettingsContract_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OAuth2AuthenticationSettingsContract_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *OAuth2AuthenticationSettingsContract_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OAuth2AuthenticationSettingsContract_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OAuth2AuthenticationSettingsContract_STATUS_ARM, got %T", armInput)
	}

	// Set property "AuthorizationServerId":
	if typedInput.AuthorizationServerId != nil {
		authorizationServerId := *typedInput.AuthorizationServerId
		contract.AuthorizationServerId = &authorizationServerId
	}

	// Set property "Scope":
	if typedInput.Scope != nil {
		scope := *typedInput.Scope
		contract.Scope = &scope
	}

	// No error
	return nil
}

// AssignProperties_From_OAuth2AuthenticationSettingsContract_STATUS populates our OAuth2AuthenticationSettingsContract_STATUS from the provided source OAuth2AuthenticationSettingsContract_STATUS
func (contract *OAuth2AuthenticationSettingsContract_STATUS) AssignProperties_From_OAuth2AuthenticationSettingsContract_STATUS(source *v20220801s.OAuth2AuthenticationSettingsContract_STATUS) error {

	// AuthorizationServerId
	contract.AuthorizationServerId = genruntime.ClonePointerToString(source.AuthorizationServerId)

	// Scope
	contract.Scope = genruntime.ClonePointerToString(source.Scope)

	// No error
	return nil
}

// AssignProperties_To_OAuth2AuthenticationSettingsContract_STATUS populates the provided destination OAuth2AuthenticationSettingsContract_STATUS from our OAuth2AuthenticationSettingsContract_STATUS
func (contract *OAuth2AuthenticationSettingsContract_STATUS) AssignProperties_To_OAuth2AuthenticationSettingsContract_STATUS(destination *v20220801s.OAuth2AuthenticationSettingsContract_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AuthorizationServerId
	destination.AuthorizationServerId = genruntime.ClonePointerToString(contract.AuthorizationServerId)

	// Scope
	destination.Scope = genruntime.ClonePointerToString(contract.Scope)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// API OAuth2 Authentication settings details.
type OpenIdAuthenticationSettingsContract struct {
	// BearerTokenSendingMethods: How to send token to the server.
	BearerTokenSendingMethods []BearerTokenSendingMethodsContract `json:"bearerTokenSendingMethods,omitempty"`

	// OpenidProviderId: OAuth authorization server identifier.
	OpenidProviderId *string `json:"openidProviderId,omitempty"`
}

var _ genruntime.ARMTransformer = &OpenIdAuthenticationSettingsContract{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (contract *OpenIdAuthenticationSettingsContract) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if contract == nil {
		return nil, nil
	}
	result := &OpenIdAuthenticationSettingsContract_ARM{}

	// Set property "BearerTokenSendingMethods":
	for _, item := range contract.BearerTokenSendingMethods {
		result.BearerTokenSendingMethods = append(result.BearerTokenSendingMethods, item)
	}

	// Set property "OpenidProviderId":
	if contract.OpenidProviderId != nil {
		openidProviderId := *contract.OpenidProviderId
		result.OpenidProviderId = &openidProviderId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *OpenIdAuthenticationSettingsContract) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OpenIdAuthenticationSettingsContract_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *OpenIdAuthenticationSettingsContract) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OpenIdAuthenticationSettingsContract_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OpenIdAuthenticationSettingsContract_ARM, got %T", armInput)
	}

	// Set property "BearerTokenSendingMethods":
	for _, item := range typedInput.BearerTokenSendingMethods {
		contract.BearerTokenSendingMethods = append(contract.BearerTokenSendingMethods, item)
	}

	// Set property "OpenidProviderId":
	if typedInput.OpenidProviderId != nil {
		openidProviderId := *typedInput.OpenidProviderId
		contract.OpenidProviderId = &openidProviderId
	}

	// No error
	return nil
}

// AssignProperties_From_OpenIdAuthenticationSettingsContract populates our OpenIdAuthenticationSettingsContract from the provided source OpenIdAuthenticationSettingsContract
func (contract *OpenIdAuthenticationSettingsContract) AssignProperties_From_OpenIdAuthenticationSettingsContract(source *v20220801s.OpenIdAuthenticationSettingsContract) error {

	// BearerTokenSendingMethods
	if source.BearerTokenSendingMethods != nil {
		bearerTokenSendingMethodList := make([]BearerTokenSendingMethodsContract, len(source.BearerTokenSendingMethods))
		for bearerTokenSendingMethodIndex, bearerTokenSendingMethodItem := range source.BearerTokenSendingMethods {
			// Shadow the loop variable to avoid aliasing
			bearerTokenSendingMethodItem := bearerTokenSendingMethodItem
			bearerTokenSendingMethodList[bearerTokenSendingMethodIndex] = BearerTokenSendingMethodsContract(bearerTokenSendingMethodItem)
		}
		contract.BearerTokenSendingMethods = bearerTokenSendingMethodList
	} else {
		contract.BearerTokenSendingMethods = nil
	}

	// OpenidProviderId
	contract.OpenidProviderId = genruntime.ClonePointerToString(source.OpenidProviderId)

	// No error
	return nil
}

// AssignProperties_To_OpenIdAuthenticationSettingsContract populates the provided destination OpenIdAuthenticationSettingsContract from our OpenIdAuthenticationSettingsContract
func (contract *OpenIdAuthenticationSettingsContract) AssignProperties_To_OpenIdAuthenticationSettingsContract(destination *v20220801s.OpenIdAuthenticationSettingsContract) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BearerTokenSendingMethods
	if contract.BearerTokenSendingMethods != nil {
		bearerTokenSendingMethodList := make([]string, len(contract.BearerTokenSendingMethods))
		for bearerTokenSendingMethodIndex, bearerTokenSendingMethodItem := range contract.BearerTokenSendingMethods {
			// Shadow the loop variable to avoid aliasing
			bearerTokenSendingMethodItem := bearerTokenSendingMethodItem
			bearerTokenSendingMethodList[bearerTokenSendingMethodIndex] = string(bearerTokenSendingMethodItem)
		}
		destination.BearerTokenSendingMethods = bearerTokenSendingMethodList
	} else {
		destination.BearerTokenSendingMethods = nil
	}

	// OpenidProviderId
	destination.OpenidProviderId = genruntime.ClonePointerToString(contract.OpenidProviderId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_OpenIdAuthenticationSettingsContract_STATUS populates our OpenIdAuthenticationSettingsContract from the provided source OpenIdAuthenticationSettingsContract_STATUS
func (contract *OpenIdAuthenticationSettingsContract) Initialize_From_OpenIdAuthenticationSettingsContract_STATUS(source *OpenIdAuthenticationSettingsContract_STATUS) error {

	// BearerTokenSendingMethods
	if source.BearerTokenSendingMethods != nil {
		bearerTokenSendingMethodList := make([]BearerTokenSendingMethodsContract, len(source.BearerTokenSendingMethods))
		for bearerTokenSendingMethodIndex, bearerTokenSendingMethodItem := range source.BearerTokenSendingMethods {
			// Shadow the loop variable to avoid aliasing
			bearerTokenSendingMethodItem := bearerTokenSendingMethodItem
			bearerTokenSendingMethod := BearerTokenSendingMethodsContract(bearerTokenSendingMethodItem)
			bearerTokenSendingMethodList[bearerTokenSendingMethodIndex] = bearerTokenSendingMethod
		}
		contract.BearerTokenSendingMethods = bearerTokenSendingMethodList
	} else {
		contract.BearerTokenSendingMethods = nil
	}

	// OpenidProviderId
	contract.OpenidProviderId = genruntime.ClonePointerToString(source.OpenidProviderId)

	// No error
	return nil
}

// API OAuth2 Authentication settings details.
type OpenIdAuthenticationSettingsContract_STATUS struct {
	// BearerTokenSendingMethods: How to send token to the server.
	BearerTokenSendingMethods []BearerTokenSendingMethodsContract_STATUS `json:"bearerTokenSendingMethods,omitempty"`

	// OpenidProviderId: OAuth authorization server identifier.
	OpenidProviderId *string `json:"openidProviderId,omitempty"`
}

var _ genruntime.FromARMConverter = &OpenIdAuthenticationSettingsContract_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *OpenIdAuthenticationSettingsContract_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OpenIdAuthenticationSettingsContract_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *OpenIdAuthenticationSettingsContract_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OpenIdAuthenticationSettingsContract_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OpenIdAuthenticationSettingsContract_STATUS_ARM, got %T", armInput)
	}

	// Set property "BearerTokenSendingMethods":
	for _, item := range typedInput.BearerTokenSendingMethods {
		contract.BearerTokenSendingMethods = append(contract.BearerTokenSendingMethods, item)
	}

	// Set property "OpenidProviderId":
	if typedInput.OpenidProviderId != nil {
		openidProviderId := *typedInput.OpenidProviderId
		contract.OpenidProviderId = &openidProviderId
	}

	// No error
	return nil
}

// AssignProperties_From_OpenIdAuthenticationSettingsContract_STATUS populates our OpenIdAuthenticationSettingsContract_STATUS from the provided source OpenIdAuthenticationSettingsContract_STATUS
func (contract *OpenIdAuthenticationSettingsContract_STATUS) AssignProperties_From_OpenIdAuthenticationSettingsContract_STATUS(source *v20220801s.OpenIdAuthenticationSettingsContract_STATUS) error {

	// BearerTokenSendingMethods
	if source.BearerTokenSendingMethods != nil {
		bearerTokenSendingMethodList := make([]BearerTokenSendingMethodsContract_STATUS, len(source.BearerTokenSendingMethods))
		for bearerTokenSendingMethodIndex, bearerTokenSendingMethodItem := range source.BearerTokenSendingMethods {
			// Shadow the loop variable to avoid aliasing
			bearerTokenSendingMethodItem := bearerTokenSendingMethodItem
			bearerTokenSendingMethodList[bearerTokenSendingMethodIndex] = BearerTokenSendingMethodsContract_STATUS(bearerTokenSendingMethodItem)
		}
		contract.BearerTokenSendingMethods = bearerTokenSendingMethodList
	} else {
		contract.BearerTokenSendingMethods = nil
	}

	// OpenidProviderId
	contract.OpenidProviderId = genruntime.ClonePointerToString(source.OpenidProviderId)

	// No error
	return nil
}

// AssignProperties_To_OpenIdAuthenticationSettingsContract_STATUS populates the provided destination OpenIdAuthenticationSettingsContract_STATUS from our OpenIdAuthenticationSettingsContract_STATUS
func (contract *OpenIdAuthenticationSettingsContract_STATUS) AssignProperties_To_OpenIdAuthenticationSettingsContract_STATUS(destination *v20220801s.OpenIdAuthenticationSettingsContract_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BearerTokenSendingMethods
	if contract.BearerTokenSendingMethods != nil {
		bearerTokenSendingMethodList := make([]string, len(contract.BearerTokenSendingMethods))
		for bearerTokenSendingMethodIndex, bearerTokenSendingMethodItem := range contract.BearerTokenSendingMethods {
			// Shadow the loop variable to avoid aliasing
			bearerTokenSendingMethodItem := bearerTokenSendingMethodItem
			bearerTokenSendingMethodList[bearerTokenSendingMethodIndex] = string(bearerTokenSendingMethodItem)
		}
		destination.BearerTokenSendingMethods = bearerTokenSendingMethodList
	} else {
		destination.BearerTokenSendingMethods = nil
	}

	// OpenidProviderId
	destination.OpenidProviderId = genruntime.ClonePointerToString(contract.OpenidProviderId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Form of an authorization grant, which the client uses to request the access token.
// +kubebuilder:validation:Enum={"authorizationHeader","query"}
type BearerTokenSendingMethodsContract string

const (
	BearerTokenSendingMethodsContract_AuthorizationHeader = BearerTokenSendingMethodsContract("authorizationHeader")
	BearerTokenSendingMethodsContract_Query               = BearerTokenSendingMethodsContract("query")
)

// Form of an authorization grant, which the client uses to request the access token.
type BearerTokenSendingMethodsContract_STATUS string

const (
	BearerTokenSendingMethodsContract_STATUS_AuthorizationHeader = BearerTokenSendingMethodsContract_STATUS("authorizationHeader")
	BearerTokenSendingMethodsContract_STATUS_Query               = BearerTokenSendingMethodsContract_STATUS("query")
)

func init() {
	SchemeBuilder.Register(&Api{}, &ApiList{})
}
