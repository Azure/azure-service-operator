// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220801

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Service_User_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_User_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_User_STATUS_ARM, Service_User_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_User_STATUS_ARM runs a test to see if a specific instance of Service_User_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForService_User_STATUS_ARM(subject Service_User_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_User_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_User_STATUS_ARM instances for property testing - lazily instantiated by
// Service_User_STATUS_ARMGenerator()
var service_User_STATUS_ARMGenerator gopter.Gen

// Service_User_STATUS_ARMGenerator returns a generator of Service_User_STATUS_ARM instances for property testing.
// We first initialize service_User_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Service_User_STATUS_ARMGenerator() gopter.Gen {
	if service_User_STATUS_ARMGenerator != nil {
		return service_User_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_User_STATUS_ARM(generators)
	service_User_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Service_User_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_User_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForService_User_STATUS_ARM(generators)
	service_User_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Service_User_STATUS_ARM{}), generators)

	return service_User_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForService_User_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_User_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForService_User_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForService_User_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(UserContractProperties_STATUS_ARMGenerator())
}

func Test_UserContractProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserContractProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserContractProperties_STATUS_ARM, UserContractProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserContractProperties_STATUS_ARM runs a test to see if a specific instance of UserContractProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserContractProperties_STATUS_ARM(subject UserContractProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserContractProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserContractProperties_STATUS_ARM instances for property testing - lazily instantiated by
// UserContractProperties_STATUS_ARMGenerator()
var userContractProperties_STATUS_ARMGenerator gopter.Gen

// UserContractProperties_STATUS_ARMGenerator returns a generator of UserContractProperties_STATUS_ARM instances for property testing.
// We first initialize userContractProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UserContractProperties_STATUS_ARMGenerator() gopter.Gen {
	if userContractProperties_STATUS_ARMGenerator != nil {
		return userContractProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserContractProperties_STATUS_ARM(generators)
	userContractProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserContractProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserContractProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUserContractProperties_STATUS_ARM(generators)
	userContractProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserContractProperties_STATUS_ARM{}), generators)

	return userContractProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUserContractProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserContractProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Email"] = gen.PtrOf(gen.AlphaString())
	gens["FirstName"] = gen.PtrOf(gen.AlphaString())
	gens["LastName"] = gen.PtrOf(gen.AlphaString())
	gens["Note"] = gen.PtrOf(gen.AlphaString())
	gens["RegistrationDate"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(
		UserContractProperties_State_STATUS_Active,
		UserContractProperties_State_STATUS_Blocked,
		UserContractProperties_State_STATUS_Deleted,
		UserContractProperties_State_STATUS_Pending))
}

// AddRelatedPropertyGeneratorsForUserContractProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUserContractProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Groups"] = gen.SliceOf(GroupContractProperties_STATUS_ARMGenerator())
	gens["Identities"] = gen.SliceOf(UserIdentityContract_STATUS_ARMGenerator())
}

func Test_GroupContractProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GroupContractProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGroupContractProperties_STATUS_ARM, GroupContractProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGroupContractProperties_STATUS_ARM runs a test to see if a specific instance of GroupContractProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGroupContractProperties_STATUS_ARM(subject GroupContractProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GroupContractProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GroupContractProperties_STATUS_ARM instances for property testing - lazily instantiated by
// GroupContractProperties_STATUS_ARMGenerator()
var groupContractProperties_STATUS_ARMGenerator gopter.Gen

// GroupContractProperties_STATUS_ARMGenerator returns a generator of GroupContractProperties_STATUS_ARM instances for property testing.
func GroupContractProperties_STATUS_ARMGenerator() gopter.Gen {
	if groupContractProperties_STATUS_ARMGenerator != nil {
		return groupContractProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGroupContractProperties_STATUS_ARM(generators)
	groupContractProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(GroupContractProperties_STATUS_ARM{}), generators)

	return groupContractProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForGroupContractProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGroupContractProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BuiltIn"] = gen.PtrOf(gen.Bool())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisplayName"] = gen.PtrOf(gen.AlphaString())
	gens["ExternalId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(GroupContractProperties_Type_STATUS_Custom, GroupContractProperties_Type_STATUS_External, GroupContractProperties_Type_STATUS_System))
}

func Test_UserIdentityContract_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserIdentityContract_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserIdentityContract_STATUS_ARM, UserIdentityContract_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserIdentityContract_STATUS_ARM runs a test to see if a specific instance of UserIdentityContract_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserIdentityContract_STATUS_ARM(subject UserIdentityContract_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserIdentityContract_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserIdentityContract_STATUS_ARM instances for property testing - lazily instantiated by
// UserIdentityContract_STATUS_ARMGenerator()
var userIdentityContract_STATUS_ARMGenerator gopter.Gen

// UserIdentityContract_STATUS_ARMGenerator returns a generator of UserIdentityContract_STATUS_ARM instances for property testing.
func UserIdentityContract_STATUS_ARMGenerator() gopter.Gen {
	if userIdentityContract_STATUS_ARMGenerator != nil {
		return userIdentityContract_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserIdentityContract_STATUS_ARM(generators)
	userIdentityContract_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserIdentityContract_STATUS_ARM{}), generators)

	return userIdentityContract_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUserIdentityContract_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserIdentityContract_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Provider"] = gen.PtrOf(gen.AlphaString())
}
