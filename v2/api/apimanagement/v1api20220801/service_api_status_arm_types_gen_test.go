// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220801

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApiContactInformation_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiContactInformation_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiContactInformation_STATUS_ARM, ApiContactInformation_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiContactInformation_STATUS_ARM runs a test to see if a specific instance of ApiContactInformation_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiContactInformation_STATUS_ARM(subject ApiContactInformation_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiContactInformation_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiContactInformation_STATUS_ARM instances for property testing - lazily instantiated by
// ApiContactInformation_STATUS_ARMGenerator()
var apiContactInformation_STATUS_ARMGenerator gopter.Gen

// ApiContactInformation_STATUS_ARMGenerator returns a generator of ApiContactInformation_STATUS_ARM instances for property testing.
func ApiContactInformation_STATUS_ARMGenerator() gopter.Gen {
	if apiContactInformation_STATUS_ARMGenerator != nil {
		return apiContactInformation_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiContactInformation_STATUS_ARM(generators)
	apiContactInformation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiContactInformation_STATUS_ARM{}), generators)

	return apiContactInformation_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiContactInformation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiContactInformation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Email"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApiContractProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiContractProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiContractProperties_STATUS_ARM, ApiContractProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiContractProperties_STATUS_ARM runs a test to see if a specific instance of ApiContractProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiContractProperties_STATUS_ARM(subject ApiContractProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiContractProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiContractProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ApiContractProperties_STATUS_ARMGenerator()
var apiContractProperties_STATUS_ARMGenerator gopter.Gen

// ApiContractProperties_STATUS_ARMGenerator returns a generator of ApiContractProperties_STATUS_ARM instances for property testing.
// We first initialize apiContractProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApiContractProperties_STATUS_ARMGenerator() gopter.Gen {
	if apiContractProperties_STATUS_ARMGenerator != nil {
		return apiContractProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiContractProperties_STATUS_ARM(generators)
	apiContractProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiContractProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiContractProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForApiContractProperties_STATUS_ARM(generators)
	apiContractProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiContractProperties_STATUS_ARM{}), generators)

	return apiContractProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiContractProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiContractProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["APIVersion"] = gen.PtrOf(gen.AlphaString())
	gens["ApiRevision"] = gen.PtrOf(gen.AlphaString())
	gens["ApiRevisionDescription"] = gen.PtrOf(gen.AlphaString())
	gens["ApiVersionDescription"] = gen.PtrOf(gen.AlphaString())
	gens["ApiVersionSetId"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisplayName"] = gen.PtrOf(gen.AlphaString())
	gens["IsCurrent"] = gen.PtrOf(gen.Bool())
	gens["IsOnline"] = gen.PtrOf(gen.Bool())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Protocols"] = gen.SliceOf(gen.OneConstOf(
		ApiContractProperties_Protocols_STATUS_Http,
		ApiContractProperties_Protocols_STATUS_Https,
		ApiContractProperties_Protocols_STATUS_Ws,
		ApiContractProperties_Protocols_STATUS_Wss))
	gens["ServiceUrl"] = gen.PtrOf(gen.AlphaString())
	gens["SourceApiId"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionRequired"] = gen.PtrOf(gen.Bool())
	gens["TermsOfServiceUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ApiContractProperties_Type_STATUS_Graphql,
		ApiContractProperties_Type_STATUS_Http,
		ApiContractProperties_Type_STATUS_Soap,
		ApiContractProperties_Type_STATUS_Websocket))
}

// AddRelatedPropertyGeneratorsForApiContractProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApiContractProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApiVersionSet"] = gen.PtrOf(ApiVersionSetContractDetails_STATUS_ARMGenerator())
	gens["AuthenticationSettings"] = gen.PtrOf(AuthenticationSettingsContract_STATUS_ARMGenerator())
	gens["Contact"] = gen.PtrOf(ApiContactInformation_STATUS_ARMGenerator())
	gens["License"] = gen.PtrOf(ApiLicenseInformation_STATUS_ARMGenerator())
	gens["SubscriptionKeyParameterNames"] = gen.PtrOf(SubscriptionKeyParameterNamesContract_STATUS_ARMGenerator())
}

func Test_ApiLicenseInformation_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiLicenseInformation_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiLicenseInformation_STATUS_ARM, ApiLicenseInformation_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiLicenseInformation_STATUS_ARM runs a test to see if a specific instance of ApiLicenseInformation_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiLicenseInformation_STATUS_ARM(subject ApiLicenseInformation_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiLicenseInformation_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiLicenseInformation_STATUS_ARM instances for property testing - lazily instantiated by
// ApiLicenseInformation_STATUS_ARMGenerator()
var apiLicenseInformation_STATUS_ARMGenerator gopter.Gen

// ApiLicenseInformation_STATUS_ARMGenerator returns a generator of ApiLicenseInformation_STATUS_ARM instances for property testing.
func ApiLicenseInformation_STATUS_ARMGenerator() gopter.Gen {
	if apiLicenseInformation_STATUS_ARMGenerator != nil {
		return apiLicenseInformation_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiLicenseInformation_STATUS_ARM(generators)
	apiLicenseInformation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiLicenseInformation_STATUS_ARM{}), generators)

	return apiLicenseInformation_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiLicenseInformation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiLicenseInformation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApiVersionSetContractDetails_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiVersionSetContractDetails_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiVersionSetContractDetails_STATUS_ARM, ApiVersionSetContractDetails_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiVersionSetContractDetails_STATUS_ARM runs a test to see if a specific instance of ApiVersionSetContractDetails_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiVersionSetContractDetails_STATUS_ARM(subject ApiVersionSetContractDetails_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiVersionSetContractDetails_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiVersionSetContractDetails_STATUS_ARM instances for property testing - lazily instantiated by
// ApiVersionSetContractDetails_STATUS_ARMGenerator()
var apiVersionSetContractDetails_STATUS_ARMGenerator gopter.Gen

// ApiVersionSetContractDetails_STATUS_ARMGenerator returns a generator of ApiVersionSetContractDetails_STATUS_ARM instances for property testing.
func ApiVersionSetContractDetails_STATUS_ARMGenerator() gopter.Gen {
	if apiVersionSetContractDetails_STATUS_ARMGenerator != nil {
		return apiVersionSetContractDetails_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiVersionSetContractDetails_STATUS_ARM(generators)
	apiVersionSetContractDetails_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiVersionSetContractDetails_STATUS_ARM{}), generators)

	return apiVersionSetContractDetails_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiVersionSetContractDetails_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiVersionSetContractDetails_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["VersionHeaderName"] = gen.PtrOf(gen.AlphaString())
	gens["VersionQueryName"] = gen.PtrOf(gen.AlphaString())
	gens["VersioningScheme"] = gen.PtrOf(gen.OneConstOf(ApiVersionSetContractDetails_VersioningScheme_STATUS_Header, ApiVersionSetContractDetails_VersioningScheme_STATUS_Query, ApiVersionSetContractDetails_VersioningScheme_STATUS_Segment))
}

func Test_AuthenticationSettingsContract_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AuthenticationSettingsContract_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAuthenticationSettingsContract_STATUS_ARM, AuthenticationSettingsContract_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAuthenticationSettingsContract_STATUS_ARM runs a test to see if a specific instance of AuthenticationSettingsContract_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAuthenticationSettingsContract_STATUS_ARM(subject AuthenticationSettingsContract_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AuthenticationSettingsContract_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AuthenticationSettingsContract_STATUS_ARM instances for property testing - lazily instantiated by
// AuthenticationSettingsContract_STATUS_ARMGenerator()
var authenticationSettingsContract_STATUS_ARMGenerator gopter.Gen

// AuthenticationSettingsContract_STATUS_ARMGenerator returns a generator of AuthenticationSettingsContract_STATUS_ARM instances for property testing.
func AuthenticationSettingsContract_STATUS_ARMGenerator() gopter.Gen {
	if authenticationSettingsContract_STATUS_ARMGenerator != nil {
		return authenticationSettingsContract_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAuthenticationSettingsContract_STATUS_ARM(generators)
	authenticationSettingsContract_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AuthenticationSettingsContract_STATUS_ARM{}), generators)

	return authenticationSettingsContract_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForAuthenticationSettingsContract_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAuthenticationSettingsContract_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OAuth2"] = gen.PtrOf(OAuth2AuthenticationSettingsContract_STATUS_ARMGenerator())
	gens["OAuth2AuthenticationSettings"] = gen.SliceOf(OAuth2AuthenticationSettingsContract_STATUS_ARMGenerator())
	gens["Openid"] = gen.PtrOf(OpenIdAuthenticationSettingsContract_STATUS_ARMGenerator())
	gens["OpenidAuthenticationSettings"] = gen.SliceOf(OpenIdAuthenticationSettingsContract_STATUS_ARMGenerator())
}

func Test_OAuth2AuthenticationSettingsContract_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OAuth2AuthenticationSettingsContract_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOAuth2AuthenticationSettingsContract_STATUS_ARM, OAuth2AuthenticationSettingsContract_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOAuth2AuthenticationSettingsContract_STATUS_ARM runs a test to see if a specific instance of OAuth2AuthenticationSettingsContract_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOAuth2AuthenticationSettingsContract_STATUS_ARM(subject OAuth2AuthenticationSettingsContract_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OAuth2AuthenticationSettingsContract_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OAuth2AuthenticationSettingsContract_STATUS_ARM instances for property testing - lazily instantiated by
// OAuth2AuthenticationSettingsContract_STATUS_ARMGenerator()
var oAuth2AuthenticationSettingsContract_STATUS_ARMGenerator gopter.Gen

// OAuth2AuthenticationSettingsContract_STATUS_ARMGenerator returns a generator of OAuth2AuthenticationSettingsContract_STATUS_ARM instances for property testing.
func OAuth2AuthenticationSettingsContract_STATUS_ARMGenerator() gopter.Gen {
	if oAuth2AuthenticationSettingsContract_STATUS_ARMGenerator != nil {
		return oAuth2AuthenticationSettingsContract_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOAuth2AuthenticationSettingsContract_STATUS_ARM(generators)
	oAuth2AuthenticationSettingsContract_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OAuth2AuthenticationSettingsContract_STATUS_ARM{}), generators)

	return oAuth2AuthenticationSettingsContract_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOAuth2AuthenticationSettingsContract_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOAuth2AuthenticationSettingsContract_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AuthorizationServerId"] = gen.PtrOf(gen.AlphaString())
	gens["Scope"] = gen.PtrOf(gen.AlphaString())
}

func Test_OpenIdAuthenticationSettingsContract_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OpenIdAuthenticationSettingsContract_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOpenIdAuthenticationSettingsContract_STATUS_ARM, OpenIdAuthenticationSettingsContract_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOpenIdAuthenticationSettingsContract_STATUS_ARM runs a test to see if a specific instance of OpenIdAuthenticationSettingsContract_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOpenIdAuthenticationSettingsContract_STATUS_ARM(subject OpenIdAuthenticationSettingsContract_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OpenIdAuthenticationSettingsContract_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OpenIdAuthenticationSettingsContract_STATUS_ARM instances for property testing - lazily instantiated by
// OpenIdAuthenticationSettingsContract_STATUS_ARMGenerator()
var openIdAuthenticationSettingsContract_STATUS_ARMGenerator gopter.Gen

// OpenIdAuthenticationSettingsContract_STATUS_ARMGenerator returns a generator of OpenIdAuthenticationSettingsContract_STATUS_ARM instances for property testing.
func OpenIdAuthenticationSettingsContract_STATUS_ARMGenerator() gopter.Gen {
	if openIdAuthenticationSettingsContract_STATUS_ARMGenerator != nil {
		return openIdAuthenticationSettingsContract_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOpenIdAuthenticationSettingsContract_STATUS_ARM(generators)
	openIdAuthenticationSettingsContract_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OpenIdAuthenticationSettingsContract_STATUS_ARM{}), generators)

	return openIdAuthenticationSettingsContract_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOpenIdAuthenticationSettingsContract_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOpenIdAuthenticationSettingsContract_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BearerTokenSendingMethods"] = gen.SliceOf(gen.OneConstOf(BearerTokenSendingMethodsContract_STATUS_AuthorizationHeader, BearerTokenSendingMethodsContract_STATUS_Query))
	gens["OpenidProviderId"] = gen.PtrOf(gen.AlphaString())
}

func Test_Service_Api_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_Api_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_Api_STATUS_ARM, Service_Api_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_Api_STATUS_ARM runs a test to see if a specific instance of Service_Api_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForService_Api_STATUS_ARM(subject Service_Api_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_Api_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_Api_STATUS_ARM instances for property testing - lazily instantiated by
// Service_Api_STATUS_ARMGenerator()
var service_Api_STATUS_ARMGenerator gopter.Gen

// Service_Api_STATUS_ARMGenerator returns a generator of Service_Api_STATUS_ARM instances for property testing.
// We first initialize service_Api_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Service_Api_STATUS_ARMGenerator() gopter.Gen {
	if service_Api_STATUS_ARMGenerator != nil {
		return service_Api_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_Api_STATUS_ARM(generators)
	service_Api_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Service_Api_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_Api_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForService_Api_STATUS_ARM(generators)
	service_Api_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Service_Api_STATUS_ARM{}), generators)

	return service_Api_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForService_Api_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_Api_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForService_Api_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForService_Api_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApiContractProperties_STATUS_ARMGenerator())
}

func Test_SubscriptionKeyParameterNamesContract_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubscriptionKeyParameterNamesContract_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubscriptionKeyParameterNamesContract_STATUS_ARM, SubscriptionKeyParameterNamesContract_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubscriptionKeyParameterNamesContract_STATUS_ARM runs a test to see if a specific instance of SubscriptionKeyParameterNamesContract_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubscriptionKeyParameterNamesContract_STATUS_ARM(subject SubscriptionKeyParameterNamesContract_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubscriptionKeyParameterNamesContract_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubscriptionKeyParameterNamesContract_STATUS_ARM instances for property testing - lazily instantiated by
// SubscriptionKeyParameterNamesContract_STATUS_ARMGenerator()
var subscriptionKeyParameterNamesContract_STATUS_ARMGenerator gopter.Gen

// SubscriptionKeyParameterNamesContract_STATUS_ARMGenerator returns a generator of SubscriptionKeyParameterNamesContract_STATUS_ARM instances for property testing.
func SubscriptionKeyParameterNamesContract_STATUS_ARMGenerator() gopter.Gen {
	if subscriptionKeyParameterNamesContract_STATUS_ARMGenerator != nil {
		return subscriptionKeyParameterNamesContract_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubscriptionKeyParameterNamesContract_STATUS_ARM(generators)
	subscriptionKeyParameterNamesContract_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SubscriptionKeyParameterNamesContract_STATUS_ARM{}), generators)

	return subscriptionKeyParameterNamesContract_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSubscriptionKeyParameterNamesContract_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubscriptionKeyParameterNamesContract_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Header"] = gen.PtrOf(gen.AlphaString())
	gens["Query"] = gen.PtrOf(gen.AlphaString())
}
