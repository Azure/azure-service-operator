// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220801

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AdditionalLocation_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdditionalLocation_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdditionalLocation_STATUS_ARM, AdditionalLocation_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdditionalLocation_STATUS_ARM runs a test to see if a specific instance of AdditionalLocation_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAdditionalLocation_STATUS_ARM(subject AdditionalLocation_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdditionalLocation_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdditionalLocation_STATUS_ARM instances for property testing - lazily instantiated by
// AdditionalLocation_STATUS_ARMGenerator()
var additionalLocation_STATUS_ARMGenerator gopter.Gen

// AdditionalLocation_STATUS_ARMGenerator returns a generator of AdditionalLocation_STATUS_ARM instances for property testing.
// We first initialize additionalLocation_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AdditionalLocation_STATUS_ARMGenerator() gopter.Gen {
	if additionalLocation_STATUS_ARMGenerator != nil {
		return additionalLocation_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalLocation_STATUS_ARM(generators)
	additionalLocation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AdditionalLocation_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdditionalLocation_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAdditionalLocation_STATUS_ARM(generators)
	additionalLocation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AdditionalLocation_STATUS_ARM{}), generators)

	return additionalLocation_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAdditionalLocation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdditionalLocation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DisableGateway"] = gen.PtrOf(gen.Bool())
	gens["GatewayRegionalUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["NatGatewayState"] = gen.PtrOf(gen.OneConstOf(AdditionalLocation_NatGatewayState_STATUS_Disabled, AdditionalLocation_NatGatewayState_STATUS_Enabled))
	gens["OutboundPublicIPAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["PlatformVersion"] = gen.PtrOf(gen.OneConstOf(
		AdditionalLocation_PlatformVersion_STATUS_Mtv1,
		AdditionalLocation_PlatformVersion_STATUS_Stv1,
		AdditionalLocation_PlatformVersion_STATUS_Stv2,
		AdditionalLocation_PlatformVersion_STATUS_Undetermined))
	gens["PrivateIPAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["PublicIPAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["PublicIpAddressId"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAdditionalLocation_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAdditionalLocation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Sku"] = gen.PtrOf(ApiManagementServiceSkuProperties_STATUS_ARMGenerator())
	gens["VirtualNetworkConfiguration"] = gen.PtrOf(VirtualNetworkConfiguration_STATUS_ARMGenerator())
}

func Test_ApiManagementServiceIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiManagementServiceIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiManagementServiceIdentity_STATUS_ARM, ApiManagementServiceIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiManagementServiceIdentity_STATUS_ARM runs a test to see if a specific instance of ApiManagementServiceIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiManagementServiceIdentity_STATUS_ARM(subject ApiManagementServiceIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiManagementServiceIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiManagementServiceIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ApiManagementServiceIdentity_STATUS_ARMGenerator()
var apiManagementServiceIdentity_STATUS_ARMGenerator gopter.Gen

// ApiManagementServiceIdentity_STATUS_ARMGenerator returns a generator of ApiManagementServiceIdentity_STATUS_ARM instances for property testing.
// We first initialize apiManagementServiceIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApiManagementServiceIdentity_STATUS_ARMGenerator() gopter.Gen {
	if apiManagementServiceIdentity_STATUS_ARMGenerator != nil {
		return apiManagementServiceIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiManagementServiceIdentity_STATUS_ARM(generators)
	apiManagementServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiManagementServiceIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiManagementServiceIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForApiManagementServiceIdentity_STATUS_ARM(generators)
	apiManagementServiceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiManagementServiceIdentity_STATUS_ARM{}), generators)

	return apiManagementServiceIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiManagementServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiManagementServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ApiManagementServiceIdentity_Type_STATUS_None,
		ApiManagementServiceIdentity_Type_STATUS_SystemAssigned,
		ApiManagementServiceIdentity_Type_STATUS_SystemAssignedUserAssigned,
		ApiManagementServiceIdentity_Type_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForApiManagementServiceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApiManagementServiceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		UserIdentityProperties_STATUS_ARMGenerator())
}

func Test_ApiManagementServiceProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiManagementServiceProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiManagementServiceProperties_STATUS_ARM, ApiManagementServiceProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiManagementServiceProperties_STATUS_ARM runs a test to see if a specific instance of ApiManagementServiceProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiManagementServiceProperties_STATUS_ARM(subject ApiManagementServiceProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiManagementServiceProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiManagementServiceProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ApiManagementServiceProperties_STATUS_ARMGenerator()
var apiManagementServiceProperties_STATUS_ARMGenerator gopter.Gen

// ApiManagementServiceProperties_STATUS_ARMGenerator returns a generator of ApiManagementServiceProperties_STATUS_ARM instances for property testing.
// We first initialize apiManagementServiceProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApiManagementServiceProperties_STATUS_ARMGenerator() gopter.Gen {
	if apiManagementServiceProperties_STATUS_ARMGenerator != nil {
		return apiManagementServiceProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiManagementServiceProperties_STATUS_ARM(generators)
	apiManagementServiceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiManagementServiceProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiManagementServiceProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForApiManagementServiceProperties_STATUS_ARM(generators)
	apiManagementServiceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiManagementServiceProperties_STATUS_ARM{}), generators)

	return apiManagementServiceProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiManagementServiceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiManagementServiceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAtUtc"] = gen.PtrOf(gen.AlphaString())
	gens["CustomProperties"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["DeveloperPortalUrl"] = gen.PtrOf(gen.AlphaString())
	gens["DisableGateway"] = gen.PtrOf(gen.Bool())
	gens["EnableClientCertificate"] = gen.PtrOf(gen.Bool())
	gens["GatewayRegionalUrl"] = gen.PtrOf(gen.AlphaString())
	gens["GatewayUrl"] = gen.PtrOf(gen.AlphaString())
	gens["ManagementApiUrl"] = gen.PtrOf(gen.AlphaString())
	gens["NatGatewayState"] = gen.PtrOf(gen.OneConstOf(ApiManagementServiceProperties_NatGatewayState_STATUS_Disabled, ApiManagementServiceProperties_NatGatewayState_STATUS_Enabled))
	gens["NotificationSenderEmail"] = gen.PtrOf(gen.AlphaString())
	gens["OutboundPublicIPAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["PlatformVersion"] = gen.PtrOf(gen.OneConstOf(
		ApiManagementServiceProperties_PlatformVersion_STATUS_Mtv1,
		ApiManagementServiceProperties_PlatformVersion_STATUS_Stv1,
		ApiManagementServiceProperties_PlatformVersion_STATUS_Stv2,
		ApiManagementServiceProperties_PlatformVersion_STATUS_Undetermined))
	gens["PortalUrl"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateIPAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["PublicIPAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["PublicIpAddressId"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(ApiManagementServiceProperties_PublicNetworkAccess_STATUS_Disabled, ApiManagementServiceProperties_PublicNetworkAccess_STATUS_Enabled))
	gens["PublisherEmail"] = gen.PtrOf(gen.AlphaString())
	gens["PublisherName"] = gen.PtrOf(gen.AlphaString())
	gens["Restore"] = gen.PtrOf(gen.Bool())
	gens["ScmUrl"] = gen.PtrOf(gen.AlphaString())
	gens["TargetProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["VirtualNetworkType"] = gen.PtrOf(gen.OneConstOf(ApiManagementServiceProperties_VirtualNetworkType_STATUS_External, ApiManagementServiceProperties_VirtualNetworkType_STATUS_Internal, ApiManagementServiceProperties_VirtualNetworkType_STATUS_None))
}

// AddRelatedPropertyGeneratorsForApiManagementServiceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApiManagementServiceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdditionalLocations"] = gen.SliceOf(AdditionalLocation_STATUS_ARMGenerator())
	gens["ApiVersionConstraint"] = gen.PtrOf(ApiVersionConstraint_STATUS_ARMGenerator())
	gens["Certificates"] = gen.SliceOf(CertificateConfiguration_STATUS_ARMGenerator())
	gens["HostnameConfigurations"] = gen.SliceOf(HostnameConfiguration_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(RemotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator())
	gens["VirtualNetworkConfiguration"] = gen.PtrOf(VirtualNetworkConfiguration_STATUS_ARMGenerator())
}

func Test_ApiManagementServiceSkuProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiManagementServiceSkuProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiManagementServiceSkuProperties_STATUS_ARM, ApiManagementServiceSkuProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiManagementServiceSkuProperties_STATUS_ARM runs a test to see if a specific instance of ApiManagementServiceSkuProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiManagementServiceSkuProperties_STATUS_ARM(subject ApiManagementServiceSkuProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiManagementServiceSkuProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiManagementServiceSkuProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ApiManagementServiceSkuProperties_STATUS_ARMGenerator()
var apiManagementServiceSkuProperties_STATUS_ARMGenerator gopter.Gen

// ApiManagementServiceSkuProperties_STATUS_ARMGenerator returns a generator of ApiManagementServiceSkuProperties_STATUS_ARM instances for property testing.
func ApiManagementServiceSkuProperties_STATUS_ARMGenerator() gopter.Gen {
	if apiManagementServiceSkuProperties_STATUS_ARMGenerator != nil {
		return apiManagementServiceSkuProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiManagementServiceSkuProperties_STATUS_ARM(generators)
	apiManagementServiceSkuProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiManagementServiceSkuProperties_STATUS_ARM{}), generators)

	return apiManagementServiceSkuProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiManagementServiceSkuProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiManagementServiceSkuProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		ApiManagementServiceSkuProperties_Name_STATUS_Basic,
		ApiManagementServiceSkuProperties_Name_STATUS_Consumption,
		ApiManagementServiceSkuProperties_Name_STATUS_Developer,
		ApiManagementServiceSkuProperties_Name_STATUS_Isolated,
		ApiManagementServiceSkuProperties_Name_STATUS_Premium,
		ApiManagementServiceSkuProperties_Name_STATUS_Standard))
}

func Test_ApiVersionConstraint_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiVersionConstraint_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiVersionConstraint_STATUS_ARM, ApiVersionConstraint_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiVersionConstraint_STATUS_ARM runs a test to see if a specific instance of ApiVersionConstraint_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiVersionConstraint_STATUS_ARM(subject ApiVersionConstraint_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiVersionConstraint_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiVersionConstraint_STATUS_ARM instances for property testing - lazily instantiated by
// ApiVersionConstraint_STATUS_ARMGenerator()
var apiVersionConstraint_STATUS_ARMGenerator gopter.Gen

// ApiVersionConstraint_STATUS_ARMGenerator returns a generator of ApiVersionConstraint_STATUS_ARM instances for property testing.
func ApiVersionConstraint_STATUS_ARMGenerator() gopter.Gen {
	if apiVersionConstraint_STATUS_ARMGenerator != nil {
		return apiVersionConstraint_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiVersionConstraint_STATUS_ARM(generators)
	apiVersionConstraint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ApiVersionConstraint_STATUS_ARM{}), generators)

	return apiVersionConstraint_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiVersionConstraint_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiVersionConstraint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MinApiVersion"] = gen.PtrOf(gen.AlphaString())
}

func Test_ArmIdWrapper_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ArmIdWrapper_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForArmIdWrapper_STATUS_ARM, ArmIdWrapper_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForArmIdWrapper_STATUS_ARM runs a test to see if a specific instance of ArmIdWrapper_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForArmIdWrapper_STATUS_ARM(subject ArmIdWrapper_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ArmIdWrapper_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ArmIdWrapper_STATUS_ARM instances for property testing - lazily instantiated by
// ArmIdWrapper_STATUS_ARMGenerator()
var armIdWrapper_STATUS_ARMGenerator gopter.Gen

// ArmIdWrapper_STATUS_ARMGenerator returns a generator of ArmIdWrapper_STATUS_ARM instances for property testing.
func ArmIdWrapper_STATUS_ARMGenerator() gopter.Gen {
	if armIdWrapper_STATUS_ARMGenerator != nil {
		return armIdWrapper_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForArmIdWrapper_STATUS_ARM(generators)
	armIdWrapper_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ArmIdWrapper_STATUS_ARM{}), generators)

	return armIdWrapper_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForArmIdWrapper_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForArmIdWrapper_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_CertificateConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CertificateConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCertificateConfiguration_STATUS_ARM, CertificateConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCertificateConfiguration_STATUS_ARM runs a test to see if a specific instance of CertificateConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCertificateConfiguration_STATUS_ARM(subject CertificateConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CertificateConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CertificateConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// CertificateConfiguration_STATUS_ARMGenerator()
var certificateConfiguration_STATUS_ARMGenerator gopter.Gen

// CertificateConfiguration_STATUS_ARMGenerator returns a generator of CertificateConfiguration_STATUS_ARM instances for property testing.
// We first initialize certificateConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CertificateConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if certificateConfiguration_STATUS_ARMGenerator != nil {
		return certificateConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCertificateConfiguration_STATUS_ARM(generators)
	certificateConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CertificateConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCertificateConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForCertificateConfiguration_STATUS_ARM(generators)
	certificateConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CertificateConfiguration_STATUS_ARM{}), generators)

	return certificateConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCertificateConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCertificateConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EncodedCertificate"] = gen.PtrOf(gen.AlphaString())
	gens["StoreName"] = gen.PtrOf(gen.OneConstOf(CertificateConfiguration_StoreName_STATUS_CertificateAuthority, CertificateConfiguration_StoreName_STATUS_Root))
}

// AddRelatedPropertyGeneratorsForCertificateConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCertificateConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Certificate"] = gen.PtrOf(CertificateInformation_STATUS_ARMGenerator())
}

func Test_CertificateInformation_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CertificateInformation_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCertificateInformation_STATUS_ARM, CertificateInformation_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCertificateInformation_STATUS_ARM runs a test to see if a specific instance of CertificateInformation_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCertificateInformation_STATUS_ARM(subject CertificateInformation_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CertificateInformation_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CertificateInformation_STATUS_ARM instances for property testing - lazily instantiated by
// CertificateInformation_STATUS_ARMGenerator()
var certificateInformation_STATUS_ARMGenerator gopter.Gen

// CertificateInformation_STATUS_ARMGenerator returns a generator of CertificateInformation_STATUS_ARM instances for property testing.
func CertificateInformation_STATUS_ARMGenerator() gopter.Gen {
	if certificateInformation_STATUS_ARMGenerator != nil {
		return certificateInformation_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCertificateInformation_STATUS_ARM(generators)
	certificateInformation_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CertificateInformation_STATUS_ARM{}), generators)

	return certificateInformation_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCertificateInformation_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCertificateInformation_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Expiry"] = gen.PtrOf(gen.AlphaString())
	gens["Subject"] = gen.PtrOf(gen.AlphaString())
	gens["Thumbprint"] = gen.PtrOf(gen.AlphaString())
}

func Test_HostnameConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostnameConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostnameConfiguration_STATUS_ARM, HostnameConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostnameConfiguration_STATUS_ARM runs a test to see if a specific instance of HostnameConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHostnameConfiguration_STATUS_ARM(subject HostnameConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostnameConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostnameConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// HostnameConfiguration_STATUS_ARMGenerator()
var hostnameConfiguration_STATUS_ARMGenerator gopter.Gen

// HostnameConfiguration_STATUS_ARMGenerator returns a generator of HostnameConfiguration_STATUS_ARM instances for property testing.
// We first initialize hostnameConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HostnameConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if hostnameConfiguration_STATUS_ARMGenerator != nil {
		return hostnameConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostnameConfiguration_STATUS_ARM(generators)
	hostnameConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HostnameConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostnameConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForHostnameConfiguration_STATUS_ARM(generators)
	hostnameConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HostnameConfiguration_STATUS_ARM{}), generators)

	return hostnameConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHostnameConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHostnameConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CertificateSource"] = gen.PtrOf(gen.OneConstOf(
		HostnameConfiguration_CertificateSource_STATUS_BuiltIn,
		HostnameConfiguration_CertificateSource_STATUS_Custom,
		HostnameConfiguration_CertificateSource_STATUS_KeyVault,
		HostnameConfiguration_CertificateSource_STATUS_Managed))
	gens["CertificateStatus"] = gen.PtrOf(gen.OneConstOf(HostnameConfiguration_CertificateStatus_STATUS_Completed, HostnameConfiguration_CertificateStatus_STATUS_Failed, HostnameConfiguration_CertificateStatus_STATUS_InProgress))
	gens["DefaultSslBinding"] = gen.PtrOf(gen.Bool())
	gens["EncodedCertificate"] = gen.PtrOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["IdentityClientId"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVaultId"] = gen.PtrOf(gen.AlphaString())
	gens["NegotiateClientCertificate"] = gen.PtrOf(gen.Bool())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		HostnameConfiguration_Type_STATUS_DeveloperPortal,
		HostnameConfiguration_Type_STATUS_Management,
		HostnameConfiguration_Type_STATUS_Portal,
		HostnameConfiguration_Type_STATUS_Proxy,
		HostnameConfiguration_Type_STATUS_Scm))
}

// AddRelatedPropertyGeneratorsForHostnameConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHostnameConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Certificate"] = gen.PtrOf(CertificateInformation_STATUS_ARMGenerator())
}

func Test_PrivateEndpointConnectionWrapperProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnectionWrapperProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionWrapperProperties_STATUS_ARM, PrivateEndpointConnectionWrapperProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionWrapperProperties_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointConnectionWrapperProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionWrapperProperties_STATUS_ARM(subject PrivateEndpointConnectionWrapperProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnectionWrapperProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnectionWrapperProperties_STATUS_ARM instances for property testing - lazily
// instantiated by PrivateEndpointConnectionWrapperProperties_STATUS_ARMGenerator()
var privateEndpointConnectionWrapperProperties_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointConnectionWrapperProperties_STATUS_ARMGenerator returns a generator of PrivateEndpointConnectionWrapperProperties_STATUS_ARM instances for property testing.
// We first initialize privateEndpointConnectionWrapperProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnectionWrapperProperties_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointConnectionWrapperProperties_STATUS_ARMGenerator != nil {
		return privateEndpointConnectionWrapperProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionWrapperProperties_STATUS_ARM(generators)
	privateEndpointConnectionWrapperProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionWrapperProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionWrapperProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnectionWrapperProperties_STATUS_ARM(generators)
	privateEndpointConnectionWrapperProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionWrapperProperties_STATUS_ARM{}), generators)

	return privateEndpointConnectionWrapperProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionWrapperProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionWrapperProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["GroupIds"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnectionWrapperProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnectionWrapperProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(ArmIdWrapper_STATUS_ARMGenerator())
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(PrivateLinkServiceConnectionState_STATUS_ARMGenerator())
}

func Test_PrivateLinkServiceConnectionState_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnectionState_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUS_ARM, PrivateLinkServiceConnectionState_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUS_ARM runs a test to see if a specific instance of PrivateLinkServiceConnectionState_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUS_ARM(subject PrivateLinkServiceConnectionState_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnectionState_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnectionState_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnectionState_STATUS_ARMGenerator()
var privateLinkServiceConnectionState_STATUS_ARMGenerator gopter.Gen

// PrivateLinkServiceConnectionState_STATUS_ARMGenerator returns a generator of PrivateLinkServiceConnectionState_STATUS_ARM instances for property testing.
func PrivateLinkServiceConnectionState_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkServiceConnectionState_STATUS_ARMGenerator != nil {
		return privateLinkServiceConnectionState_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUS_ARM(generators)
	privateLinkServiceConnectionState_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionState_STATUS_ARM{}), generators)

	return privateLinkServiceConnectionState_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(PrivateEndpointServiceConnectionStatus_STATUS_Approved, PrivateEndpointServiceConnectionStatus_STATUS_Pending, PrivateEndpointServiceConnectionStatus_STATUS_Rejected))
}

func Test_RemotePrivateEndpointConnectionWrapper_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RemotePrivateEndpointConnectionWrapper_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRemotePrivateEndpointConnectionWrapper_STATUS_ARM, RemotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRemotePrivateEndpointConnectionWrapper_STATUS_ARM runs a test to see if a specific instance of RemotePrivateEndpointConnectionWrapper_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRemotePrivateEndpointConnectionWrapper_STATUS_ARM(subject RemotePrivateEndpointConnectionWrapper_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RemotePrivateEndpointConnectionWrapper_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RemotePrivateEndpointConnectionWrapper_STATUS_ARM instances for property testing - lazily instantiated
// by RemotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator()
var remotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator gopter.Gen

// RemotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator returns a generator of RemotePrivateEndpointConnectionWrapper_STATUS_ARM instances for property testing.
// We first initialize remotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RemotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator() gopter.Gen {
	if remotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator != nil {
		return remotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRemotePrivateEndpointConnectionWrapper_STATUS_ARM(generators)
	remotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RemotePrivateEndpointConnectionWrapper_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRemotePrivateEndpointConnectionWrapper_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRemotePrivateEndpointConnectionWrapper_STATUS_ARM(generators)
	remotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RemotePrivateEndpointConnectionWrapper_STATUS_ARM{}), generators)

	return remotePrivateEndpointConnectionWrapper_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRemotePrivateEndpointConnectionWrapper_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRemotePrivateEndpointConnectionWrapper_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRemotePrivateEndpointConnectionWrapper_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRemotePrivateEndpointConnectionWrapper_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateEndpointConnectionWrapperProperties_STATUS_ARMGenerator())
}

func Test_Service_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_STATUS_ARM, Service_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_STATUS_ARM runs a test to see if a specific instance of Service_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForService_STATUS_ARM(subject Service_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_STATUS_ARM instances for property testing - lazily instantiated by Service_STATUS_ARMGenerator()
var service_STATUS_ARMGenerator gopter.Gen

// Service_STATUS_ARMGenerator returns a generator of Service_STATUS_ARM instances for property testing.
// We first initialize service_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Service_STATUS_ARMGenerator() gopter.Gen {
	if service_STATUS_ARMGenerator != nil {
		return service_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_STATUS_ARM(generators)
	service_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Service_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForService_STATUS_ARM(generators)
	service_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Service_STATUS_ARM{}), generators)

	return service_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForService_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForService_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForService_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ApiManagementServiceIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(ApiManagementServiceProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(ApiManagementServiceSkuProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}

func Test_UserIdentityProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserIdentityProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserIdentityProperties_STATUS_ARM, UserIdentityProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserIdentityProperties_STATUS_ARM runs a test to see if a specific instance of UserIdentityProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserIdentityProperties_STATUS_ARM(subject UserIdentityProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserIdentityProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserIdentityProperties_STATUS_ARM instances for property testing - lazily instantiated by
// UserIdentityProperties_STATUS_ARMGenerator()
var userIdentityProperties_STATUS_ARMGenerator gopter.Gen

// UserIdentityProperties_STATUS_ARMGenerator returns a generator of UserIdentityProperties_STATUS_ARM instances for property testing.
func UserIdentityProperties_STATUS_ARMGenerator() gopter.Gen {
	if userIdentityProperties_STATUS_ARMGenerator != nil {
		return userIdentityProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserIdentityProperties_STATUS_ARM(generators)
	userIdentityProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserIdentityProperties_STATUS_ARM{}), generators)

	return userIdentityProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUserIdentityProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserIdentityProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_VirtualNetworkConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkConfiguration_STATUS_ARM, VirtualNetworkConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkConfiguration_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkConfiguration_STATUS_ARM(subject VirtualNetworkConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkConfiguration_STATUS_ARMGenerator()
var virtualNetworkConfiguration_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkConfiguration_STATUS_ARMGenerator returns a generator of VirtualNetworkConfiguration_STATUS_ARM instances for property testing.
func VirtualNetworkConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkConfiguration_STATUS_ARMGenerator != nil {
		return virtualNetworkConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkConfiguration_STATUS_ARM(generators)
	virtualNetworkConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkConfiguration_STATUS_ARM{}), generators)

	return virtualNetworkConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["SubnetResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Subnetname"] = gen.PtrOf(gen.AlphaString())
	gens["Vnetid"] = gen.PtrOf(gen.AlphaString())
}
