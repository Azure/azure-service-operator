// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220801

import (
	"fmt"
	v20220801s "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20220801/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/apimusers.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Service_User_Spec   `json:"spec,omitempty"`
	Status            Service_User_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &User{}

// GetConditions returns the conditions of the resource
func (user *User) GetConditions() conditions.Conditions {
	return user.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (user *User) SetConditions(conditions conditions.Conditions) {
	user.Status.Conditions = conditions
}

var _ conversion.Convertible = &User{}

// ConvertFrom populates our User from the provided hub User
func (user *User) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20220801s.User)
	if !ok {
		return fmt.Errorf("expected apimanagement/v1api20220801/storage/User but received %T instead", hub)
	}

	return user.AssignProperties_From_User(source)
}

// ConvertTo populates the provided hub User from our User
func (user *User) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20220801s.User)
	if !ok {
		return fmt.Errorf("expected apimanagement/v1api20220801/storage/User but received %T instead", hub)
	}

	return user.AssignProperties_To_User(destination)
}

// +kubebuilder:webhook:path=/mutate-apimanagement-azure-com-v1api20220801-user,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=apimanagement.azure.com,resources=users,verbs=create;update,versions=v1api20220801,name=default.v1api20220801.users.apimanagement.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &User{}

// Default applies defaults to the User resource
func (user *User) Default() {
	user.defaultImpl()
	var temp any = user
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (user *User) defaultAzureName() {
	if user.Spec.AzureName == "" {
		user.Spec.AzureName = user.Name
	}
}

// defaultImpl applies the code generated defaults to the User resource
func (user *User) defaultImpl() { user.defaultAzureName() }

var _ genruntime.ImportableResource = &User{}

// InitializeSpec initializes the spec for this resource from the given status
func (user *User) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*Service_User_STATUS); ok {
		return user.Spec.Initialize_From_Service_User_STATUS(s)
	}

	return fmt.Errorf("expected Status of type Service_User_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &User{}

// AzureName returns the Azure name of the resource
func (user *User) AzureName() string {
	return user.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-08-01"
func (user User) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (user *User) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (user *User) GetSpec() genruntime.ConvertibleSpec {
	return &user.Spec
}

// GetStatus returns the status of this resource
func (user *User) GetStatus() genruntime.ConvertibleStatus {
	return &user.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (user *User) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationHead,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ApiManagement/service/users"
func (user *User) GetType() string {
	return "Microsoft.ApiManagement/service/users"
}

// NewEmptyStatus returns a new empty (blank) status
func (user *User) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Service_User_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (user *User) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(user.Spec)
	return user.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (user *User) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Service_User_STATUS); ok {
		user.Status = *st
		return nil
	}

	// Convert status to required version
	var st Service_User_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	user.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-apimanagement-azure-com-v1api20220801-user,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=apimanagement.azure.com,resources=users,verbs=create;update,versions=v1api20220801,name=validate.v1api20220801.users.apimanagement.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &User{}

// ValidateCreate validates the creation of the resource
func (user *User) ValidateCreate() (admission.Warnings, error) {
	validations := user.createValidations()
	var temp any = user
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (user *User) ValidateDelete() (admission.Warnings, error) {
	validations := user.deleteValidations()
	var temp any = user
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (user *User) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := user.updateValidations()
	var temp any = user
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (user *User) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){user.validateResourceReferences, user.validateOwnerReference}
}

// deleteValidations validates the deletion of the resource
func (user *User) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (user *User) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return user.validateResourceReferences()
		},
		user.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return user.validateOwnerReference()
		},
	}
}

// validateOwnerReference validates the owner field
func (user *User) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(user)
}

// validateResourceReferences validates all resource references
func (user *User) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&user.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (user *User) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*User)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, user)
}

// AssignProperties_From_User populates our User from the provided source User
func (user *User) AssignProperties_From_User(source *v20220801s.User) error {

	// ObjectMeta
	user.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Service_User_Spec
	err := spec.AssignProperties_From_Service_User_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Service_User_Spec() to populate field Spec")
	}
	user.Spec = spec

	// Status
	var status Service_User_STATUS
	err = status.AssignProperties_From_Service_User_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Service_User_STATUS() to populate field Status")
	}
	user.Status = status

	// No error
	return nil
}

// AssignProperties_To_User populates the provided destination User from our User
func (user *User) AssignProperties_To_User(destination *v20220801s.User) error {

	// ObjectMeta
	destination.ObjectMeta = *user.ObjectMeta.DeepCopy()

	// Spec
	var spec v20220801s.Service_User_Spec
	err := user.Spec.AssignProperties_To_Service_User_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Service_User_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20220801s.Service_User_STATUS
	err = user.Status.AssignProperties_To_Service_User_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Service_User_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (user *User) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: user.Spec.OriginalVersion(),
		Kind:    "User",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/apimusers.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

type Service_User_Spec struct {
	// AppType: Determines the type of application which send the create user request. Default is legacy portal.
	AppType *UserCreateParameterProperties_AppType `json:"appType,omitempty"`

	// +kubebuilder:validation:MaxLength=80
	// +kubebuilder:validation:MinLength=1
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Confirmation: Determines the type of confirmation e-mail that will be sent to the newly created user.
	Confirmation *UserCreateParameterProperties_Confirmation `json:"confirmation,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=254
	// +kubebuilder:validation:MinLength=1
	// Email: Email address. Must not be empty and must be unique within the service instance.
	Email *string `json:"email,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=100
	// +kubebuilder:validation:MinLength=1
	// FirstName: First name.
	FirstName *string `json:"firstName,omitempty"`

	// Identities: Collection of user identities.
	Identities []UserIdentityContract `json:"identities,omitempty"`

	// +kubebuilder:validation:Required
	// +kubebuilder:validation:MaxLength=100
	// +kubebuilder:validation:MinLength=1
	// LastName: Last name.
	LastName *string `json:"lastName,omitempty"`

	// Note: Optional note about a user set by the administrator.
	Note *string `json:"note,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a apimanagement.azure.com/Service resource
	Owner *genruntime.KnownResourceReference `group:"apimanagement.azure.com" json:"owner,omitempty" kind:"Service"`

	// Password: User Password. If no value is provided, a default password is generated.
	Password *genruntime.SecretReference `json:"password,omitempty"`

	// State: Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer
	// portal or call any APIs of subscribed products. Default state is Active.
	State *UserCreateParameterProperties_State `json:"state,omitempty"`
}

var _ genruntime.ARMTransformer = &Service_User_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (user *Service_User_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if user == nil {
		return nil, nil
	}
	result := &Service_User_Spec_ARM{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if user.AppType != nil ||
		user.Confirmation != nil ||
		user.Email != nil ||
		user.FirstName != nil ||
		user.Identities != nil ||
		user.LastName != nil ||
		user.Note != nil ||
		user.Password != nil ||
		user.State != nil {
		result.Properties = &UserCreateParameterProperties_ARM{}
	}
	if user.AppType != nil {
		appType := *user.AppType
		result.Properties.AppType = &appType
	}
	if user.Confirmation != nil {
		confirmation := *user.Confirmation
		result.Properties.Confirmation = &confirmation
	}
	if user.Email != nil {
		email := *user.Email
		result.Properties.Email = &email
	}
	if user.FirstName != nil {
		firstName := *user.FirstName
		result.Properties.FirstName = &firstName
	}
	for _, item := range user.Identities {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Identities = append(result.Properties.Identities, *item_ARM.(*UserIdentityContract_ARM))
	}
	if user.LastName != nil {
		lastName := *user.LastName
		result.Properties.LastName = &lastName
	}
	if user.Note != nil {
		note := *user.Note
		result.Properties.Note = &note
	}
	if user.Password != nil {
		passwordSecret, err := resolved.ResolvedSecrets.Lookup(*user.Password)
		if err != nil {
			return nil, errors.Wrap(err, "looking up secret for property Password")
		}
		password := passwordSecret
		result.Properties.Password = &password
	}
	if user.State != nil {
		state := *user.State
		result.Properties.State = &state
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (user *Service_User_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Service_User_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (user *Service_User_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Service_User_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Service_User_Spec_ARM, got %T", armInput)
	}

	// Set property "AppType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AppType != nil {
			appType := *typedInput.Properties.AppType
			user.AppType = &appType
		}
	}

	// Set property "AzureName":
	user.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Confirmation":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Confirmation != nil {
			confirmation := *typedInput.Properties.Confirmation
			user.Confirmation = &confirmation
		}
	}

	// Set property "Email":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Email != nil {
			email := *typedInput.Properties.Email
			user.Email = &email
		}
	}

	// Set property "FirstName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FirstName != nil {
			firstName := *typedInput.Properties.FirstName
			user.FirstName = &firstName
		}
	}

	// Set property "Identities":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Identities {
			var item1 UserIdentityContract
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			user.Identities = append(user.Identities, item1)
		}
	}

	// Set property "LastName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastName != nil {
			lastName := *typedInput.Properties.LastName
			user.LastName = &lastName
		}
	}

	// Set property "Note":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Note != nil {
			note := *typedInput.Properties.Note
			user.Note = &note
		}
	}

	// Set property "Owner":
	user.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// no assignment for property "Password"

	// Set property "State":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			state := *typedInput.Properties.State
			user.State = &state
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Service_User_Spec{}

// ConvertSpecFrom populates our Service_User_Spec from the provided source
func (user *Service_User_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20220801s.Service_User_Spec)
	if ok {
		// Populate our instance from source
		return user.AssignProperties_From_Service_User_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20220801s.Service_User_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = user.AssignProperties_From_Service_User_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Service_User_Spec
func (user *Service_User_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20220801s.Service_User_Spec)
	if ok {
		// Populate destination from our instance
		return user.AssignProperties_To_Service_User_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20220801s.Service_User_Spec{}
	err := user.AssignProperties_To_Service_User_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Service_User_Spec populates our Service_User_Spec from the provided source Service_User_Spec
func (user *Service_User_Spec) AssignProperties_From_Service_User_Spec(source *v20220801s.Service_User_Spec) error {

	// AppType
	if source.AppType != nil {
		appType := UserCreateParameterProperties_AppType(*source.AppType)
		user.AppType = &appType
	} else {
		user.AppType = nil
	}

	// AzureName
	user.AzureName = source.AzureName

	// Confirmation
	if source.Confirmation != nil {
		confirmation := UserCreateParameterProperties_Confirmation(*source.Confirmation)
		user.Confirmation = &confirmation
	} else {
		user.Confirmation = nil
	}

	// Email
	if source.Email != nil {
		email := *source.Email
		user.Email = &email
	} else {
		user.Email = nil
	}

	// FirstName
	if source.FirstName != nil {
		firstName := *source.FirstName
		user.FirstName = &firstName
	} else {
		user.FirstName = nil
	}

	// Identities
	if source.Identities != nil {
		identityList := make([]UserIdentityContract, len(source.Identities))
		for identityIndex, identityItem := range source.Identities {
			// Shadow the loop variable to avoid aliasing
			identityItem := identityItem
			var identity UserIdentityContract
			err := identity.AssignProperties_From_UserIdentityContract(&identityItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_UserIdentityContract() to populate field Identities")
			}
			identityList[identityIndex] = identity
		}
		user.Identities = identityList
	} else {
		user.Identities = nil
	}

	// LastName
	if source.LastName != nil {
		lastName := *source.LastName
		user.LastName = &lastName
	} else {
		user.LastName = nil
	}

	// Note
	user.Note = genruntime.ClonePointerToString(source.Note)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		user.Owner = &owner
	} else {
		user.Owner = nil
	}

	// Password
	if source.Password != nil {
		password := source.Password.Copy()
		user.Password = &password
	} else {
		user.Password = nil
	}

	// State
	if source.State != nil {
		state := UserCreateParameterProperties_State(*source.State)
		user.State = &state
	} else {
		user.State = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Service_User_Spec populates the provided destination Service_User_Spec from our Service_User_Spec
func (user *Service_User_Spec) AssignProperties_To_Service_User_Spec(destination *v20220801s.Service_User_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AppType
	if user.AppType != nil {
		appType := string(*user.AppType)
		destination.AppType = &appType
	} else {
		destination.AppType = nil
	}

	// AzureName
	destination.AzureName = user.AzureName

	// Confirmation
	if user.Confirmation != nil {
		confirmation := string(*user.Confirmation)
		destination.Confirmation = &confirmation
	} else {
		destination.Confirmation = nil
	}

	// Email
	if user.Email != nil {
		email := *user.Email
		destination.Email = &email
	} else {
		destination.Email = nil
	}

	// FirstName
	if user.FirstName != nil {
		firstName := *user.FirstName
		destination.FirstName = &firstName
	} else {
		destination.FirstName = nil
	}

	// Identities
	if user.Identities != nil {
		identityList := make([]v20220801s.UserIdentityContract, len(user.Identities))
		for identityIndex, identityItem := range user.Identities {
			// Shadow the loop variable to avoid aliasing
			identityItem := identityItem
			var identity v20220801s.UserIdentityContract
			err := identityItem.AssignProperties_To_UserIdentityContract(&identity)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_UserIdentityContract() to populate field Identities")
			}
			identityList[identityIndex] = identity
		}
		destination.Identities = identityList
	} else {
		destination.Identities = nil
	}

	// LastName
	if user.LastName != nil {
		lastName := *user.LastName
		destination.LastName = &lastName
	} else {
		destination.LastName = nil
	}

	// Note
	destination.Note = genruntime.ClonePointerToString(user.Note)

	// OriginalVersion
	destination.OriginalVersion = user.OriginalVersion()

	// Owner
	if user.Owner != nil {
		owner := user.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Password
	if user.Password != nil {
		password := user.Password.Copy()
		destination.Password = &password
	} else {
		destination.Password = nil
	}

	// State
	if user.State != nil {
		state := string(*user.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_Service_User_STATUS populates our Service_User_Spec from the provided source Service_User_STATUS
func (user *Service_User_Spec) Initialize_From_Service_User_STATUS(source *Service_User_STATUS) error {

	// Email
	if source.Email != nil {
		email := *source.Email
		user.Email = &email
	} else {
		user.Email = nil
	}

	// FirstName
	if source.FirstName != nil {
		firstName := *source.FirstName
		user.FirstName = &firstName
	} else {
		user.FirstName = nil
	}

	// Identities
	if source.Identities != nil {
		identityList := make([]UserIdentityContract, len(source.Identities))
		for identityIndex, identityItem := range source.Identities {
			// Shadow the loop variable to avoid aliasing
			identityItem := identityItem
			var identity UserIdentityContract
			err := identity.Initialize_From_UserIdentityContract_STATUS(&identityItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_UserIdentityContract_STATUS() to populate field Identities")
			}
			identityList[identityIndex] = identity
		}
		user.Identities = identityList
	} else {
		user.Identities = nil
	}

	// LastName
	if source.LastName != nil {
		lastName := *source.LastName
		user.LastName = &lastName
	} else {
		user.LastName = nil
	}

	// Note
	user.Note = genruntime.ClonePointerToString(source.Note)

	// State
	if source.State != nil {
		state := UserCreateParameterProperties_State(*source.State)
		user.State = &state
	} else {
		user.State = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (user *Service_User_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (user *Service_User_Spec) SetAzureName(azureName string) { user.AzureName = azureName }

type Service_User_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Email: Email address.
	Email *string `json:"email,omitempty"`

	// FirstName: First name.
	FirstName *string `json:"firstName,omitempty"`

	// Groups: Collection of groups user is part of.
	Groups []GroupContractProperties_STATUS `json:"groups,omitempty"`

	// Id: Fully qualified resource ID for the resource. Ex -
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	// Identities: Collection of user identities.
	Identities []UserIdentityContract_STATUS `json:"identities,omitempty"`

	// LastName: Last name.
	LastName *string `json:"lastName,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Note: Optional note about a user set by the administrator.
	Note *string `json:"note,omitempty"`

	// RegistrationDate: Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
	// specified by the ISO 8601 standard.
	RegistrationDate *string `json:"registrationDate,omitempty"`

	// State: Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer
	// portal or call any APIs of subscribed products. Default state is Active.
	State *UserContractProperties_State_STATUS `json:"state,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Service_User_STATUS{}

// ConvertStatusFrom populates our Service_User_STATUS from the provided source
func (user *Service_User_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20220801s.Service_User_STATUS)
	if ok {
		// Populate our instance from source
		return user.AssignProperties_From_Service_User_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20220801s.Service_User_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = user.AssignProperties_From_Service_User_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Service_User_STATUS
func (user *Service_User_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20220801s.Service_User_STATUS)
	if ok {
		// Populate destination from our instance
		return user.AssignProperties_To_Service_User_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20220801s.Service_User_STATUS{}
	err := user.AssignProperties_To_Service_User_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Service_User_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (user *Service_User_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Service_User_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (user *Service_User_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Service_User_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Service_User_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Email":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Email != nil {
			email := *typedInput.Properties.Email
			user.Email = &email
		}
	}

	// Set property "FirstName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FirstName != nil {
			firstName := *typedInput.Properties.FirstName
			user.FirstName = &firstName
		}
	}

	// Set property "Groups":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Groups {
			var item1 GroupContractProperties_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			user.Groups = append(user.Groups, item1)
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		user.Id = &id
	}

	// Set property "Identities":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Identities {
			var item1 UserIdentityContract_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			user.Identities = append(user.Identities, item1)
		}
	}

	// Set property "LastName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastName != nil {
			lastName := *typedInput.Properties.LastName
			user.LastName = &lastName
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		user.Name = &name
	}

	// Set property "Note":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Note != nil {
			note := *typedInput.Properties.Note
			user.Note = &note
		}
	}

	// Set property "RegistrationDate":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RegistrationDate != nil {
			registrationDate := *typedInput.Properties.RegistrationDate
			user.RegistrationDate = &registrationDate
		}
	}

	// Set property "State":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			state := *typedInput.Properties.State
			user.State = &state
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		user.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_Service_User_STATUS populates our Service_User_STATUS from the provided source Service_User_STATUS
func (user *Service_User_STATUS) AssignProperties_From_Service_User_STATUS(source *v20220801s.Service_User_STATUS) error {

	// Conditions
	user.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Email
	user.Email = genruntime.ClonePointerToString(source.Email)

	// FirstName
	user.FirstName = genruntime.ClonePointerToString(source.FirstName)

	// Groups
	if source.Groups != nil {
		groupList := make([]GroupContractProperties_STATUS, len(source.Groups))
		for groupIndex, groupItem := range source.Groups {
			// Shadow the loop variable to avoid aliasing
			groupItem := groupItem
			var group GroupContractProperties_STATUS
			err := group.AssignProperties_From_GroupContractProperties_STATUS(&groupItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_GroupContractProperties_STATUS() to populate field Groups")
			}
			groupList[groupIndex] = group
		}
		user.Groups = groupList
	} else {
		user.Groups = nil
	}

	// Id
	user.Id = genruntime.ClonePointerToString(source.Id)

	// Identities
	if source.Identities != nil {
		identityList := make([]UserIdentityContract_STATUS, len(source.Identities))
		for identityIndex, identityItem := range source.Identities {
			// Shadow the loop variable to avoid aliasing
			identityItem := identityItem
			var identity UserIdentityContract_STATUS
			err := identity.AssignProperties_From_UserIdentityContract_STATUS(&identityItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_UserIdentityContract_STATUS() to populate field Identities")
			}
			identityList[identityIndex] = identity
		}
		user.Identities = identityList
	} else {
		user.Identities = nil
	}

	// LastName
	user.LastName = genruntime.ClonePointerToString(source.LastName)

	// Name
	user.Name = genruntime.ClonePointerToString(source.Name)

	// Note
	user.Note = genruntime.ClonePointerToString(source.Note)

	// RegistrationDate
	user.RegistrationDate = genruntime.ClonePointerToString(source.RegistrationDate)

	// State
	if source.State != nil {
		state := UserContractProperties_State_STATUS(*source.State)
		user.State = &state
	} else {
		user.State = nil
	}

	// Type
	user.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_Service_User_STATUS populates the provided destination Service_User_STATUS from our Service_User_STATUS
func (user *Service_User_STATUS) AssignProperties_To_Service_User_STATUS(destination *v20220801s.Service_User_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(user.Conditions)

	// Email
	destination.Email = genruntime.ClonePointerToString(user.Email)

	// FirstName
	destination.FirstName = genruntime.ClonePointerToString(user.FirstName)

	// Groups
	if user.Groups != nil {
		groupList := make([]v20220801s.GroupContractProperties_STATUS, len(user.Groups))
		for groupIndex, groupItem := range user.Groups {
			// Shadow the loop variable to avoid aliasing
			groupItem := groupItem
			var group v20220801s.GroupContractProperties_STATUS
			err := groupItem.AssignProperties_To_GroupContractProperties_STATUS(&group)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_GroupContractProperties_STATUS() to populate field Groups")
			}
			groupList[groupIndex] = group
		}
		destination.Groups = groupList
	} else {
		destination.Groups = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(user.Id)

	// Identities
	if user.Identities != nil {
		identityList := make([]v20220801s.UserIdentityContract_STATUS, len(user.Identities))
		for identityIndex, identityItem := range user.Identities {
			// Shadow the loop variable to avoid aliasing
			identityItem := identityItem
			var identity v20220801s.UserIdentityContract_STATUS
			err := identityItem.AssignProperties_To_UserIdentityContract_STATUS(&identity)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_UserIdentityContract_STATUS() to populate field Identities")
			}
			identityList[identityIndex] = identity
		}
		destination.Identities = identityList
	} else {
		destination.Identities = nil
	}

	// LastName
	destination.LastName = genruntime.ClonePointerToString(user.LastName)

	// Name
	destination.Name = genruntime.ClonePointerToString(user.Name)

	// Note
	destination.Note = genruntime.ClonePointerToString(user.Note)

	// RegistrationDate
	destination.RegistrationDate = genruntime.ClonePointerToString(user.RegistrationDate)

	// State
	if user.State != nil {
		state := string(*user.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(user.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Group contract Properties.
type GroupContractProperties_STATUS struct {
	// BuiltIn: true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
	BuiltIn *bool `json:"builtIn,omitempty"`

	// Description: Group description. Can contain HTML formatting tags.
	Description *string `json:"description,omitempty"`

	// DisplayName: Group name.
	DisplayName *string `json:"displayName,omitempty"`

	// ExternalId: For external groups, this property contains the id of the group from the external identity provider, e.g.
	// for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null.
	ExternalId *string `json:"externalId,omitempty"`

	// Type: Group type.
	Type *GroupContractProperties_Type_STATUS `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &GroupContractProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *GroupContractProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &GroupContractProperties_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *GroupContractProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(GroupContractProperties_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected GroupContractProperties_STATUS_ARM, got %T", armInput)
	}

	// Set property "BuiltIn":
	if typedInput.BuiltIn != nil {
		builtIn := *typedInput.BuiltIn
		properties.BuiltIn = &builtIn
	}

	// Set property "Description":
	if typedInput.Description != nil {
		description := *typedInput.Description
		properties.Description = &description
	}

	// Set property "DisplayName":
	if typedInput.DisplayName != nil {
		displayName := *typedInput.DisplayName
		properties.DisplayName = &displayName
	}

	// Set property "ExternalId":
	if typedInput.ExternalId != nil {
		externalId := *typedInput.ExternalId
		properties.ExternalId = &externalId
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		properties.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_GroupContractProperties_STATUS populates our GroupContractProperties_STATUS from the provided source GroupContractProperties_STATUS
func (properties *GroupContractProperties_STATUS) AssignProperties_From_GroupContractProperties_STATUS(source *v20220801s.GroupContractProperties_STATUS) error {

	// BuiltIn
	if source.BuiltIn != nil {
		builtIn := *source.BuiltIn
		properties.BuiltIn = &builtIn
	} else {
		properties.BuiltIn = nil
	}

	// Description
	properties.Description = genruntime.ClonePointerToString(source.Description)

	// DisplayName
	properties.DisplayName = genruntime.ClonePointerToString(source.DisplayName)

	// ExternalId
	properties.ExternalId = genruntime.ClonePointerToString(source.ExternalId)

	// Type
	if source.Type != nil {
		typeVar := GroupContractProperties_Type_STATUS(*source.Type)
		properties.Type = &typeVar
	} else {
		properties.Type = nil
	}

	// No error
	return nil
}

// AssignProperties_To_GroupContractProperties_STATUS populates the provided destination GroupContractProperties_STATUS from our GroupContractProperties_STATUS
func (properties *GroupContractProperties_STATUS) AssignProperties_To_GroupContractProperties_STATUS(destination *v20220801s.GroupContractProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BuiltIn
	if properties.BuiltIn != nil {
		builtIn := *properties.BuiltIn
		destination.BuiltIn = &builtIn
	} else {
		destination.BuiltIn = nil
	}

	// Description
	destination.Description = genruntime.ClonePointerToString(properties.Description)

	// DisplayName
	destination.DisplayName = genruntime.ClonePointerToString(properties.DisplayName)

	// ExternalId
	destination.ExternalId = genruntime.ClonePointerToString(properties.ExternalId)

	// Type
	if properties.Type != nil {
		typeVar := string(*properties.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// User identity details.
type UserIdentityContract struct {
	// Provider: Identity provider name.
	Provider *string `json:"provider,omitempty"`

	// Reference: Identifier value within provider.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &UserIdentityContract{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (contract *UserIdentityContract) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if contract == nil {
		return nil, nil
	}
	result := &UserIdentityContract_ARM{}

	// Set property "Id":
	if contract.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.Lookup(*contract.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property "Provider":
	if contract.Provider != nil {
		provider := *contract.Provider
		result.Provider = &provider
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *UserIdentityContract) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserIdentityContract_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *UserIdentityContract) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserIdentityContract_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserIdentityContract_ARM, got %T", armInput)
	}

	// Set property "Provider":
	if typedInput.Provider != nil {
		provider := *typedInput.Provider
		contract.Provider = &provider
	}

	// no assignment for property "Reference"

	// No error
	return nil
}

// AssignProperties_From_UserIdentityContract populates our UserIdentityContract from the provided source UserIdentityContract
func (contract *UserIdentityContract) AssignProperties_From_UserIdentityContract(source *v20220801s.UserIdentityContract) error {

	// Provider
	contract.Provider = genruntime.ClonePointerToString(source.Provider)

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		contract.Reference = &reference
	} else {
		contract.Reference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UserIdentityContract populates the provided destination UserIdentityContract from our UserIdentityContract
func (contract *UserIdentityContract) AssignProperties_To_UserIdentityContract(destination *v20220801s.UserIdentityContract) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Provider
	destination.Provider = genruntime.ClonePointerToString(contract.Provider)

	// Reference
	if contract.Reference != nil {
		reference := contract.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_UserIdentityContract_STATUS populates our UserIdentityContract from the provided source UserIdentityContract_STATUS
func (contract *UserIdentityContract) Initialize_From_UserIdentityContract_STATUS(source *UserIdentityContract_STATUS) error {

	// Provider
	contract.Provider = genruntime.ClonePointerToString(source.Provider)

	// Reference
	if source.Id != nil {
		reference := genruntime.CreateResourceReferenceFromARMID(*source.Id)
		contract.Reference = &reference
	} else {
		contract.Reference = nil
	}

	// No error
	return nil
}

// User identity details.
type UserIdentityContract_STATUS struct {
	// Id: Identifier value within provider.
	Id *string `json:"id,omitempty"`

	// Provider: Identity provider name.
	Provider *string `json:"provider,omitempty"`
}

var _ genruntime.FromARMConverter = &UserIdentityContract_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (contract *UserIdentityContract_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserIdentityContract_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (contract *UserIdentityContract_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserIdentityContract_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserIdentityContract_STATUS_ARM, got %T", armInput)
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		contract.Id = &id
	}

	// Set property "Provider":
	if typedInput.Provider != nil {
		provider := *typedInput.Provider
		contract.Provider = &provider
	}

	// No error
	return nil
}

// AssignProperties_From_UserIdentityContract_STATUS populates our UserIdentityContract_STATUS from the provided source UserIdentityContract_STATUS
func (contract *UserIdentityContract_STATUS) AssignProperties_From_UserIdentityContract_STATUS(source *v20220801s.UserIdentityContract_STATUS) error {

	// Id
	contract.Id = genruntime.ClonePointerToString(source.Id)

	// Provider
	contract.Provider = genruntime.ClonePointerToString(source.Provider)

	// No error
	return nil
}

// AssignProperties_To_UserIdentityContract_STATUS populates the provided destination UserIdentityContract_STATUS from our UserIdentityContract_STATUS
func (contract *UserIdentityContract_STATUS) AssignProperties_To_UserIdentityContract_STATUS(destination *v20220801s.UserIdentityContract_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(contract.Id)

	// Provider
	destination.Provider = genruntime.ClonePointerToString(contract.Provider)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
