// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220801

import (
	"encoding/json"
	v20220801s "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20220801/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AuthorizationProvidersAuthorization_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AuthorizationProvidersAuthorization to hub returns original",
		prop.ForAll(RunResourceConversionTestForAuthorizationProvidersAuthorization, AuthorizationProvidersAuthorizationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForAuthorizationProvidersAuthorization tests if a specific instance of AuthorizationProvidersAuthorization round trips to the hub storage version and back losslessly
func RunResourceConversionTestForAuthorizationProvidersAuthorization(subject AuthorizationProvidersAuthorization) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20220801s.AuthorizationProvidersAuthorization
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual AuthorizationProvidersAuthorization
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AuthorizationProvidersAuthorization_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AuthorizationProvidersAuthorization to AuthorizationProvidersAuthorization via AssignProperties_To_AuthorizationProvidersAuthorization & AssignProperties_From_AuthorizationProvidersAuthorization returns original",
		prop.ForAll(RunPropertyAssignmentTestForAuthorizationProvidersAuthorization, AuthorizationProvidersAuthorizationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAuthorizationProvidersAuthorization tests if a specific instance of AuthorizationProvidersAuthorization can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForAuthorizationProvidersAuthorization(subject AuthorizationProvidersAuthorization) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220801s.AuthorizationProvidersAuthorization
	err := copied.AssignProperties_To_AuthorizationProvidersAuthorization(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AuthorizationProvidersAuthorization
	err = actual.AssignProperties_From_AuthorizationProvidersAuthorization(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AuthorizationProvidersAuthorization_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AuthorizationProvidersAuthorization via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAuthorizationProvidersAuthorization, AuthorizationProvidersAuthorizationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAuthorizationProvidersAuthorization runs a test to see if a specific instance of AuthorizationProvidersAuthorization round trips to JSON and back losslessly
func RunJSONSerializationTestForAuthorizationProvidersAuthorization(subject AuthorizationProvidersAuthorization) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AuthorizationProvidersAuthorization
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AuthorizationProvidersAuthorization instances for property testing - lazily instantiated by
// AuthorizationProvidersAuthorizationGenerator()
var authorizationProvidersAuthorizationGenerator gopter.Gen

// AuthorizationProvidersAuthorizationGenerator returns a generator of AuthorizationProvidersAuthorization instances for property testing.
func AuthorizationProvidersAuthorizationGenerator() gopter.Gen {
	if authorizationProvidersAuthorizationGenerator != nil {
		return authorizationProvidersAuthorizationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAuthorizationProvidersAuthorization(generators)
	authorizationProvidersAuthorizationGenerator = gen.Struct(reflect.TypeOf(AuthorizationProvidersAuthorization{}), generators)

	return authorizationProvidersAuthorizationGenerator
}

// AddRelatedPropertyGeneratorsForAuthorizationProvidersAuthorization is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAuthorizationProvidersAuthorization(gens map[string]gopter.Gen) {
	gens["Spec"] = Service_AuthorizationProviders_Authorization_SpecGenerator()
	gens["Status"] = Service_AuthorizationProviders_Authorization_STATUSGenerator()
}

func Test_Service_AuthorizationProviders_Authorization_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Service_AuthorizationProviders_Authorization_Spec to Service_AuthorizationProviders_Authorization_Spec via AssignProperties_To_Service_AuthorizationProviders_Authorization_Spec & AssignProperties_From_Service_AuthorizationProviders_Authorization_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForService_AuthorizationProviders_Authorization_Spec, Service_AuthorizationProviders_Authorization_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForService_AuthorizationProviders_Authorization_Spec tests if a specific instance of Service_AuthorizationProviders_Authorization_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForService_AuthorizationProviders_Authorization_Spec(subject Service_AuthorizationProviders_Authorization_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220801s.Service_AuthorizationProviders_Authorization_Spec
	err := copied.AssignProperties_To_Service_AuthorizationProviders_Authorization_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Service_AuthorizationProviders_Authorization_Spec
	err = actual.AssignProperties_From_Service_AuthorizationProviders_Authorization_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Service_AuthorizationProviders_Authorization_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_AuthorizationProviders_Authorization_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_AuthorizationProviders_Authorization_Spec, Service_AuthorizationProviders_Authorization_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_AuthorizationProviders_Authorization_Spec runs a test to see if a specific instance of Service_AuthorizationProviders_Authorization_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForService_AuthorizationProviders_Authorization_Spec(subject Service_AuthorizationProviders_Authorization_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_AuthorizationProviders_Authorization_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_AuthorizationProviders_Authorization_Spec instances for property testing - lazily instantiated
// by Service_AuthorizationProviders_Authorization_SpecGenerator()
var service_AuthorizationProviders_Authorization_SpecGenerator gopter.Gen

// Service_AuthorizationProviders_Authorization_SpecGenerator returns a generator of Service_AuthorizationProviders_Authorization_Spec instances for property testing.
func Service_AuthorizationProviders_Authorization_SpecGenerator() gopter.Gen {
	if service_AuthorizationProviders_Authorization_SpecGenerator != nil {
		return service_AuthorizationProviders_Authorization_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_AuthorizationProviders_Authorization_Spec(generators)
	service_AuthorizationProviders_Authorization_SpecGenerator = gen.Struct(reflect.TypeOf(Service_AuthorizationProviders_Authorization_Spec{}), generators)

	return service_AuthorizationProviders_Authorization_SpecGenerator
}

// AddIndependentPropertyGeneratorsForService_AuthorizationProviders_Authorization_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_AuthorizationProviders_Authorization_Spec(gens map[string]gopter.Gen) {
	gens["AuthorizationType"] = gen.PtrOf(gen.OneConstOf(AuthorizationContractProperties_AuthorizationType_OAuth2))
	gens["AzureName"] = gen.AlphaString()
	gens["Oauth2GrantType"] = gen.PtrOf(gen.OneConstOf(AuthorizationContractProperties_Oauth2GrantType_AuthorizationCode, AuthorizationContractProperties_Oauth2GrantType_ClientCredentials))
}

func Test_Service_AuthorizationProviders_Authorization_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Service_AuthorizationProviders_Authorization_STATUS to Service_AuthorizationProviders_Authorization_STATUS via AssignProperties_To_Service_AuthorizationProviders_Authorization_STATUS & AssignProperties_From_Service_AuthorizationProviders_Authorization_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForService_AuthorizationProviders_Authorization_STATUS, Service_AuthorizationProviders_Authorization_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForService_AuthorizationProviders_Authorization_STATUS tests if a specific instance of Service_AuthorizationProviders_Authorization_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForService_AuthorizationProviders_Authorization_STATUS(subject Service_AuthorizationProviders_Authorization_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220801s.Service_AuthorizationProviders_Authorization_STATUS
	err := copied.AssignProperties_To_Service_AuthorizationProviders_Authorization_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Service_AuthorizationProviders_Authorization_STATUS
	err = actual.AssignProperties_From_Service_AuthorizationProviders_Authorization_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Service_AuthorizationProviders_Authorization_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_AuthorizationProviders_Authorization_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_AuthorizationProviders_Authorization_STATUS, Service_AuthorizationProviders_Authorization_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_AuthorizationProviders_Authorization_STATUS runs a test to see if a specific instance of Service_AuthorizationProviders_Authorization_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForService_AuthorizationProviders_Authorization_STATUS(subject Service_AuthorizationProviders_Authorization_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_AuthorizationProviders_Authorization_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_AuthorizationProviders_Authorization_STATUS instances for property testing - lazily instantiated
// by Service_AuthorizationProviders_Authorization_STATUSGenerator()
var service_AuthorizationProviders_Authorization_STATUSGenerator gopter.Gen

// Service_AuthorizationProviders_Authorization_STATUSGenerator returns a generator of Service_AuthorizationProviders_Authorization_STATUS instances for property testing.
// We first initialize service_AuthorizationProviders_Authorization_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Service_AuthorizationProviders_Authorization_STATUSGenerator() gopter.Gen {
	if service_AuthorizationProviders_Authorization_STATUSGenerator != nil {
		return service_AuthorizationProviders_Authorization_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_AuthorizationProviders_Authorization_STATUS(generators)
	service_AuthorizationProviders_Authorization_STATUSGenerator = gen.Struct(reflect.TypeOf(Service_AuthorizationProviders_Authorization_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_AuthorizationProviders_Authorization_STATUS(generators)
	AddRelatedPropertyGeneratorsForService_AuthorizationProviders_Authorization_STATUS(generators)
	service_AuthorizationProviders_Authorization_STATUSGenerator = gen.Struct(reflect.TypeOf(Service_AuthorizationProviders_Authorization_STATUS{}), generators)

	return service_AuthorizationProviders_Authorization_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForService_AuthorizationProviders_Authorization_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_AuthorizationProviders_Authorization_STATUS(gens map[string]gopter.Gen) {
	gens["AuthorizationType"] = gen.PtrOf(gen.OneConstOf(AuthorizationContractProperties_AuthorizationType_STATUS_OAuth2))
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Oauth2GrantType"] = gen.PtrOf(gen.OneConstOf(AuthorizationContractProperties_Oauth2GrantType_STATUS_AuthorizationCode, AuthorizationContractProperties_Oauth2GrantType_STATUS_ClientCredentials))
	gens["Parameters"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForService_AuthorizationProviders_Authorization_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForService_AuthorizationProviders_Authorization_STATUS(gens map[string]gopter.Gen) {
	gens["Error"] = gen.PtrOf(AuthorizationError_STATUSGenerator())
}

func Test_AuthorizationError_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from AuthorizationError_STATUS to AuthorizationError_STATUS via AssignProperties_To_AuthorizationError_STATUS & AssignProperties_From_AuthorizationError_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForAuthorizationError_STATUS, AuthorizationError_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForAuthorizationError_STATUS tests if a specific instance of AuthorizationError_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForAuthorizationError_STATUS(subject AuthorizationError_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220801s.AuthorizationError_STATUS
	err := copied.AssignProperties_To_AuthorizationError_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual AuthorizationError_STATUS
	err = actual.AssignProperties_From_AuthorizationError_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_AuthorizationError_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AuthorizationError_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAuthorizationError_STATUS, AuthorizationError_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAuthorizationError_STATUS runs a test to see if a specific instance of AuthorizationError_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAuthorizationError_STATUS(subject AuthorizationError_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AuthorizationError_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AuthorizationError_STATUS instances for property testing - lazily instantiated by
// AuthorizationError_STATUSGenerator()
var authorizationError_STATUSGenerator gopter.Gen

// AuthorizationError_STATUSGenerator returns a generator of AuthorizationError_STATUS instances for property testing.
func AuthorizationError_STATUSGenerator() gopter.Gen {
	if authorizationError_STATUSGenerator != nil {
		return authorizationError_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAuthorizationError_STATUS(generators)
	authorizationError_STATUSGenerator = gen.Struct(reflect.TypeOf(AuthorizationError_STATUS{}), generators)

	return authorizationError_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAuthorizationError_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAuthorizationError_STATUS(gens map[string]gopter.Gen) {
	gens["Code"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
}
