// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220801

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PolicyFragmentContractProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PolicyFragmentContractProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPolicyFragmentContractProperties_STATUS_ARM, PolicyFragmentContractProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPolicyFragmentContractProperties_STATUS_ARM runs a test to see if a specific instance of PolicyFragmentContractProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPolicyFragmentContractProperties_STATUS_ARM(subject PolicyFragmentContractProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PolicyFragmentContractProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PolicyFragmentContractProperties_STATUS_ARM instances for property testing - lazily instantiated by
// PolicyFragmentContractProperties_STATUS_ARMGenerator()
var policyFragmentContractProperties_STATUS_ARMGenerator gopter.Gen

// PolicyFragmentContractProperties_STATUS_ARMGenerator returns a generator of PolicyFragmentContractProperties_STATUS_ARM instances for property testing.
func PolicyFragmentContractProperties_STATUS_ARMGenerator() gopter.Gen {
	if policyFragmentContractProperties_STATUS_ARMGenerator != nil {
		return policyFragmentContractProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicyFragmentContractProperties_STATUS_ARM(generators)
	policyFragmentContractProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PolicyFragmentContractProperties_STATUS_ARM{}), generators)

	return policyFragmentContractProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPolicyFragmentContractProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPolicyFragmentContractProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Format"] = gen.PtrOf(gen.OneConstOf(PolicyFragmentContractProperties_Format_STATUS_ARM_Rawxml, PolicyFragmentContractProperties_Format_STATUS_ARM_Xml))
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_PolicyFragment_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PolicyFragment_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPolicyFragment_STATUS_ARM, PolicyFragment_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPolicyFragment_STATUS_ARM runs a test to see if a specific instance of PolicyFragment_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPolicyFragment_STATUS_ARM(subject PolicyFragment_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PolicyFragment_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PolicyFragment_STATUS_ARM instances for property testing - lazily instantiated by
// PolicyFragment_STATUS_ARMGenerator()
var policyFragment_STATUS_ARMGenerator gopter.Gen

// PolicyFragment_STATUS_ARMGenerator returns a generator of PolicyFragment_STATUS_ARM instances for property testing.
// We first initialize policyFragment_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PolicyFragment_STATUS_ARMGenerator() gopter.Gen {
	if policyFragment_STATUS_ARMGenerator != nil {
		return policyFragment_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicyFragment_STATUS_ARM(generators)
	policyFragment_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PolicyFragment_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicyFragment_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPolicyFragment_STATUS_ARM(generators)
	policyFragment_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PolicyFragment_STATUS_ARM{}), generators)

	return policyFragment_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPolicyFragment_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPolicyFragment_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPolicyFragment_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPolicyFragment_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PolicyFragmentContractProperties_STATUS_ARMGenerator())
}
