// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ProductContractProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProductContractProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProductContractProperties, ProductContractPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProductContractProperties runs a test to see if a specific instance of ProductContractProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForProductContractProperties(subject ProductContractProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProductContractProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProductContractProperties instances for property testing - lazily instantiated by
// ProductContractPropertiesGenerator()
var productContractPropertiesGenerator gopter.Gen

// ProductContractPropertiesGenerator returns a generator of ProductContractProperties instances for property testing.
func ProductContractPropertiesGenerator() gopter.Gen {
	if productContractPropertiesGenerator != nil {
		return productContractPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProductContractProperties(generators)
	productContractPropertiesGenerator = gen.Struct(reflect.TypeOf(ProductContractProperties{}), generators)

	return productContractPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForProductContractProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProductContractProperties(gens map[string]gopter.Gen) {
	gens["ApprovalRequired"] = gen.PtrOf(gen.Bool())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisplayName"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(ProductContractProperties_State_NotPublished, ProductContractProperties_State_Published))
	gens["SubscriptionRequired"] = gen.PtrOf(gen.Bool())
	gens["SubscriptionsLimit"] = gen.PtrOf(gen.Int())
	gens["Terms"] = gen.PtrOf(gen.AlphaString())
}

func Test_Product_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Product_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProduct_Spec, Product_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProduct_Spec runs a test to see if a specific instance of Product_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForProduct_Spec(subject Product_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Product_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Product_Spec instances for property testing - lazily instantiated by Product_SpecGenerator()
var product_SpecGenerator gopter.Gen

// Product_SpecGenerator returns a generator of Product_Spec instances for property testing.
// We first initialize product_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Product_SpecGenerator() gopter.Gen {
	if product_SpecGenerator != nil {
		return product_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProduct_Spec(generators)
	product_SpecGenerator = gen.Struct(reflect.TypeOf(Product_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProduct_Spec(generators)
	AddRelatedPropertyGeneratorsForProduct_Spec(generators)
	product_SpecGenerator = gen.Struct(reflect.TypeOf(Product_Spec{}), generators)

	return product_SpecGenerator
}

// AddIndependentPropertyGeneratorsForProduct_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProduct_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForProduct_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProduct_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ProductContractPropertiesGenerator())
}
