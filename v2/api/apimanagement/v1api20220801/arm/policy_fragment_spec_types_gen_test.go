// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PolicyFragmentContractProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PolicyFragmentContractProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPolicyFragmentContractProperties, PolicyFragmentContractPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPolicyFragmentContractProperties runs a test to see if a specific instance of PolicyFragmentContractProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForPolicyFragmentContractProperties(subject PolicyFragmentContractProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PolicyFragmentContractProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PolicyFragmentContractProperties instances for property testing - lazily instantiated by
// PolicyFragmentContractPropertiesGenerator()
var policyFragmentContractPropertiesGenerator gopter.Gen

// PolicyFragmentContractPropertiesGenerator returns a generator of PolicyFragmentContractProperties instances for property testing.
func PolicyFragmentContractPropertiesGenerator() gopter.Gen {
	if policyFragmentContractPropertiesGenerator != nil {
		return policyFragmentContractPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicyFragmentContractProperties(generators)
	policyFragmentContractPropertiesGenerator = gen.Struct(reflect.TypeOf(PolicyFragmentContractProperties{}), generators)

	return policyFragmentContractPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForPolicyFragmentContractProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPolicyFragmentContractProperties(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Format"] = gen.PtrOf(gen.OneConstOf(PolicyFragmentContractProperties_Format_Rawxml, PolicyFragmentContractProperties_Format_Xml))
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_PolicyFragment_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PolicyFragment_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPolicyFragment_Spec, PolicyFragment_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPolicyFragment_Spec runs a test to see if a specific instance of PolicyFragment_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForPolicyFragment_Spec(subject PolicyFragment_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PolicyFragment_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PolicyFragment_Spec instances for property testing - lazily instantiated by
// PolicyFragment_SpecGenerator()
var policyFragment_SpecGenerator gopter.Gen

// PolicyFragment_SpecGenerator returns a generator of PolicyFragment_Spec instances for property testing.
// We first initialize policyFragment_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PolicyFragment_SpecGenerator() gopter.Gen {
	if policyFragment_SpecGenerator != nil {
		return policyFragment_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicyFragment_Spec(generators)
	policyFragment_SpecGenerator = gen.Struct(reflect.TypeOf(PolicyFragment_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPolicyFragment_Spec(generators)
	AddRelatedPropertyGeneratorsForPolicyFragment_Spec(generators)
	policyFragment_SpecGenerator = gen.Struct(reflect.TypeOf(PolicyFragment_Spec{}), generators)

	return policyFragment_SpecGenerator
}

// AddIndependentPropertyGeneratorsForPolicyFragment_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPolicyFragment_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForPolicyFragment_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPolicyFragment_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PolicyFragmentContractPropertiesGenerator())
}
