// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_BackendAuthorizationHeaderCredentials_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAuthorizationHeaderCredentials_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAuthorizationHeaderCredentials_STATUS, BackendAuthorizationHeaderCredentials_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAuthorizationHeaderCredentials_STATUS runs a test to see if a specific instance of BackendAuthorizationHeaderCredentials_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAuthorizationHeaderCredentials_STATUS(subject BackendAuthorizationHeaderCredentials_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAuthorizationHeaderCredentials_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAuthorizationHeaderCredentials_STATUS instances for property testing - lazily instantiated by
// BackendAuthorizationHeaderCredentials_STATUSGenerator()
var backendAuthorizationHeaderCredentials_STATUSGenerator gopter.Gen

// BackendAuthorizationHeaderCredentials_STATUSGenerator returns a generator of BackendAuthorizationHeaderCredentials_STATUS instances for property testing.
func BackendAuthorizationHeaderCredentials_STATUSGenerator() gopter.Gen {
	if backendAuthorizationHeaderCredentials_STATUSGenerator != nil {
		return backendAuthorizationHeaderCredentials_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAuthorizationHeaderCredentials_STATUS(generators)
	backendAuthorizationHeaderCredentials_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendAuthorizationHeaderCredentials_STATUS{}), generators)

	return backendAuthorizationHeaderCredentials_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForBackendAuthorizationHeaderCredentials_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAuthorizationHeaderCredentials_STATUS(gens map[string]gopter.Gen) {
	gens["Parameter"] = gen.PtrOf(gen.AlphaString())
	gens["Scheme"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendContractProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendContractProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendContractProperties_STATUS, BackendContractProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendContractProperties_STATUS runs a test to see if a specific instance of BackendContractProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendContractProperties_STATUS(subject BackendContractProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendContractProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendContractProperties_STATUS instances for property testing - lazily instantiated by
// BackendContractProperties_STATUSGenerator()
var backendContractProperties_STATUSGenerator gopter.Gen

// BackendContractProperties_STATUSGenerator returns a generator of BackendContractProperties_STATUS instances for property testing.
// We first initialize backendContractProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackendContractProperties_STATUSGenerator() gopter.Gen {
	if backendContractProperties_STATUSGenerator != nil {
		return backendContractProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendContractProperties_STATUS(generators)
	backendContractProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendContractProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendContractProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForBackendContractProperties_STATUS(generators)
	backendContractProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendContractProperties_STATUS{}), generators)

	return backendContractProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForBackendContractProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendContractProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(BackendContractProperties_Protocol_STATUS_Http, BackendContractProperties_Protocol_STATUS_Soap))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Title"] = gen.PtrOf(gen.AlphaString())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBackendContractProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendContractProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(BackendCredentialsContract_STATUSGenerator())
	gens["Properties"] = gen.PtrOf(BackendProperties_STATUSGenerator())
	gens["Proxy"] = gen.PtrOf(BackendProxyContract_STATUSGenerator())
	gens["Tls"] = gen.PtrOf(BackendTlsProperties_STATUSGenerator())
}

func Test_BackendCredentialsContract_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendCredentialsContract_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendCredentialsContract_STATUS, BackendCredentialsContract_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendCredentialsContract_STATUS runs a test to see if a specific instance of BackendCredentialsContract_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendCredentialsContract_STATUS(subject BackendCredentialsContract_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendCredentialsContract_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendCredentialsContract_STATUS instances for property testing - lazily instantiated by
// BackendCredentialsContract_STATUSGenerator()
var backendCredentialsContract_STATUSGenerator gopter.Gen

// BackendCredentialsContract_STATUSGenerator returns a generator of BackendCredentialsContract_STATUS instances for property testing.
// We first initialize backendCredentialsContract_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackendCredentialsContract_STATUSGenerator() gopter.Gen {
	if backendCredentialsContract_STATUSGenerator != nil {
		return backendCredentialsContract_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendCredentialsContract_STATUS(generators)
	backendCredentialsContract_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendCredentialsContract_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendCredentialsContract_STATUS(generators)
	AddRelatedPropertyGeneratorsForBackendCredentialsContract_STATUS(generators)
	backendCredentialsContract_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendCredentialsContract_STATUS{}), generators)

	return backendCredentialsContract_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForBackendCredentialsContract_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendCredentialsContract_STATUS(gens map[string]gopter.Gen) {
	gens["Certificate"] = gen.SliceOf(gen.AlphaString())
	gens["CertificateIds"] = gen.SliceOf(gen.AlphaString())
	gens["Header"] = gen.MapOf(
		gen.AlphaString(),
		gen.SliceOf(gen.AlphaString()))
	gens["Query"] = gen.MapOf(
		gen.AlphaString(),
		gen.SliceOf(gen.AlphaString()))
}

// AddRelatedPropertyGeneratorsForBackendCredentialsContract_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendCredentialsContract_STATUS(gens map[string]gopter.Gen) {
	gens["Authorization"] = gen.PtrOf(BackendAuthorizationHeaderCredentials_STATUSGenerator())
}

func Test_BackendProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendProperties_STATUS, BackendProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendProperties_STATUS runs a test to see if a specific instance of BackendProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendProperties_STATUS(subject BackendProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendProperties_STATUS instances for property testing - lazily instantiated by
// BackendProperties_STATUSGenerator()
var backendProperties_STATUSGenerator gopter.Gen

// BackendProperties_STATUSGenerator returns a generator of BackendProperties_STATUS instances for property testing.
func BackendProperties_STATUSGenerator() gopter.Gen {
	if backendProperties_STATUSGenerator != nil {
		return backendProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForBackendProperties_STATUS(generators)
	backendProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendProperties_STATUS{}), generators)

	return backendProperties_STATUSGenerator
}

// AddRelatedPropertyGeneratorsForBackendProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendProperties_STATUS(gens map[string]gopter.Gen) {
	gens["ServiceFabricCluster"] = gen.PtrOf(BackendServiceFabricClusterProperties_STATUSGenerator())
}

func Test_BackendProxyContract_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendProxyContract_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendProxyContract_STATUS, BackendProxyContract_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendProxyContract_STATUS runs a test to see if a specific instance of BackendProxyContract_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendProxyContract_STATUS(subject BackendProxyContract_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendProxyContract_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendProxyContract_STATUS instances for property testing - lazily instantiated by
// BackendProxyContract_STATUSGenerator()
var backendProxyContract_STATUSGenerator gopter.Gen

// BackendProxyContract_STATUSGenerator returns a generator of BackendProxyContract_STATUS instances for property testing.
func BackendProxyContract_STATUSGenerator() gopter.Gen {
	if backendProxyContract_STATUSGenerator != nil {
		return backendProxyContract_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendProxyContract_STATUS(generators)
	backendProxyContract_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendProxyContract_STATUS{}), generators)

	return backendProxyContract_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForBackendProxyContract_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendProxyContract_STATUS(gens map[string]gopter.Gen) {
	gens["Url"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendServiceFabricClusterProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendServiceFabricClusterProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendServiceFabricClusterProperties_STATUS, BackendServiceFabricClusterProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendServiceFabricClusterProperties_STATUS runs a test to see if a specific instance of BackendServiceFabricClusterProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendServiceFabricClusterProperties_STATUS(subject BackendServiceFabricClusterProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendServiceFabricClusterProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendServiceFabricClusterProperties_STATUS instances for property testing - lazily instantiated by
// BackendServiceFabricClusterProperties_STATUSGenerator()
var backendServiceFabricClusterProperties_STATUSGenerator gopter.Gen

// BackendServiceFabricClusterProperties_STATUSGenerator returns a generator of BackendServiceFabricClusterProperties_STATUS instances for property testing.
// We first initialize backendServiceFabricClusterProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackendServiceFabricClusterProperties_STATUSGenerator() gopter.Gen {
	if backendServiceFabricClusterProperties_STATUSGenerator != nil {
		return backendServiceFabricClusterProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS(generators)
	backendServiceFabricClusterProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendServiceFabricClusterProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS(generators)
	backendServiceFabricClusterProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendServiceFabricClusterProperties_STATUS{}), generators)

	return backendServiceFabricClusterProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS(gens map[string]gopter.Gen) {
	gens["ClientCertificateId"] = gen.PtrOf(gen.AlphaString())
	gens["ClientCertificatethumbprint"] = gen.PtrOf(gen.AlphaString())
	gens["ManagementEndpoints"] = gen.SliceOf(gen.AlphaString())
	gens["MaxPartitionResolutionRetries"] = gen.PtrOf(gen.Int())
	gens["ServerCertificateThumbprints"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS(gens map[string]gopter.Gen) {
	gens["ServerX509Names"] = gen.SliceOf(X509CertificateName_STATUSGenerator())
}

func Test_BackendTlsProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendTlsProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendTlsProperties_STATUS, BackendTlsProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendTlsProperties_STATUS runs a test to see if a specific instance of BackendTlsProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendTlsProperties_STATUS(subject BackendTlsProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendTlsProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendTlsProperties_STATUS instances for property testing - lazily instantiated by
// BackendTlsProperties_STATUSGenerator()
var backendTlsProperties_STATUSGenerator gopter.Gen

// BackendTlsProperties_STATUSGenerator returns a generator of BackendTlsProperties_STATUS instances for property testing.
func BackendTlsProperties_STATUSGenerator() gopter.Gen {
	if backendTlsProperties_STATUSGenerator != nil {
		return backendTlsProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendTlsProperties_STATUS(generators)
	backendTlsProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(BackendTlsProperties_STATUS{}), generators)

	return backendTlsProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForBackendTlsProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendTlsProperties_STATUS(gens map[string]gopter.Gen) {
	gens["ValidateCertificateChain"] = gen.PtrOf(gen.Bool())
	gens["ValidateCertificateName"] = gen.PtrOf(gen.Bool())
}

func Test_Backend_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Backend_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackend_STATUS, Backend_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackend_STATUS runs a test to see if a specific instance of Backend_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForBackend_STATUS(subject Backend_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Backend_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Backend_STATUS instances for property testing - lazily instantiated by Backend_STATUSGenerator()
var backend_STATUSGenerator gopter.Gen

// Backend_STATUSGenerator returns a generator of Backend_STATUS instances for property testing.
// We first initialize backend_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Backend_STATUSGenerator() gopter.Gen {
	if backend_STATUSGenerator != nil {
		return backend_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackend_STATUS(generators)
	backend_STATUSGenerator = gen.Struct(reflect.TypeOf(Backend_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackend_STATUS(generators)
	AddRelatedPropertyGeneratorsForBackend_STATUS(generators)
	backend_STATUSGenerator = gen.Struct(reflect.TypeOf(Backend_STATUS{}), generators)

	return backend_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForBackend_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackend_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBackend_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackend_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(BackendContractProperties_STATUSGenerator())
}

func Test_X509CertificateName_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of X509CertificateName_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForX509CertificateName_STATUS, X509CertificateName_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForX509CertificateName_STATUS runs a test to see if a specific instance of X509CertificateName_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForX509CertificateName_STATUS(subject X509CertificateName_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual X509CertificateName_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of X509CertificateName_STATUS instances for property testing - lazily instantiated by
// X509CertificateName_STATUSGenerator()
var x509CertificateName_STATUSGenerator gopter.Gen

// X509CertificateName_STATUSGenerator returns a generator of X509CertificateName_STATUS instances for property testing.
func X509CertificateName_STATUSGenerator() gopter.Gen {
	if x509CertificateName_STATUSGenerator != nil {
		return x509CertificateName_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForX509CertificateName_STATUS(generators)
	x509CertificateName_STATUSGenerator = gen.Struct(reflect.TypeOf(X509CertificateName_STATUS{}), generators)

	return x509CertificateName_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForX509CertificateName_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForX509CertificateName_STATUS(gens map[string]gopter.Gen) {
	gens["IssuerCertificateThumbprint"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}
