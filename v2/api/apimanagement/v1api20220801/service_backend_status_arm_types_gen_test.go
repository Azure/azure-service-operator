// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20220801

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_BackendAuthorizationHeaderCredentials_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendAuthorizationHeaderCredentials_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendAuthorizationHeaderCredentials_STATUS_ARM, BackendAuthorizationHeaderCredentials_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendAuthorizationHeaderCredentials_STATUS_ARM runs a test to see if a specific instance of BackendAuthorizationHeaderCredentials_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendAuthorizationHeaderCredentials_STATUS_ARM(subject BackendAuthorizationHeaderCredentials_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendAuthorizationHeaderCredentials_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendAuthorizationHeaderCredentials_STATUS_ARM instances for property testing - lazily instantiated by
// BackendAuthorizationHeaderCredentials_STATUS_ARMGenerator()
var backendAuthorizationHeaderCredentials_STATUS_ARMGenerator gopter.Gen

// BackendAuthorizationHeaderCredentials_STATUS_ARMGenerator returns a generator of BackendAuthorizationHeaderCredentials_STATUS_ARM instances for property testing.
func BackendAuthorizationHeaderCredentials_STATUS_ARMGenerator() gopter.Gen {
	if backendAuthorizationHeaderCredentials_STATUS_ARMGenerator != nil {
		return backendAuthorizationHeaderCredentials_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendAuthorizationHeaderCredentials_STATUS_ARM(generators)
	backendAuthorizationHeaderCredentials_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendAuthorizationHeaderCredentials_STATUS_ARM{}), generators)

	return backendAuthorizationHeaderCredentials_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendAuthorizationHeaderCredentials_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendAuthorizationHeaderCredentials_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameter"] = gen.PtrOf(gen.AlphaString())
	gens["Scheme"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendContractProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendContractProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendContractProperties_STATUS_ARM, BackendContractProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendContractProperties_STATUS_ARM runs a test to see if a specific instance of BackendContractProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendContractProperties_STATUS_ARM(subject BackendContractProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendContractProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendContractProperties_STATUS_ARM instances for property testing - lazily instantiated by
// BackendContractProperties_STATUS_ARMGenerator()
var backendContractProperties_STATUS_ARMGenerator gopter.Gen

// BackendContractProperties_STATUS_ARMGenerator returns a generator of BackendContractProperties_STATUS_ARM instances for property testing.
// We first initialize backendContractProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackendContractProperties_STATUS_ARMGenerator() gopter.Gen {
	if backendContractProperties_STATUS_ARMGenerator != nil {
		return backendContractProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendContractProperties_STATUS_ARM(generators)
	backendContractProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendContractProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendContractProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForBackendContractProperties_STATUS_ARM(generators)
	backendContractProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendContractProperties_STATUS_ARM{}), generators)

	return backendContractProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendContractProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendContractProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(BackendContractProperties_Protocol_STATUS_ARM_Http, BackendContractProperties_Protocol_STATUS_ARM_Soap))
	gens["ResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Title"] = gen.PtrOf(gen.AlphaString())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBackendContractProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendContractProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Credentials"] = gen.PtrOf(BackendCredentialsContract_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(BackendProperties_STATUS_ARMGenerator())
	gens["Proxy"] = gen.PtrOf(BackendProxyContract_STATUS_ARMGenerator())
	gens["Tls"] = gen.PtrOf(BackendTlsProperties_STATUS_ARMGenerator())
}

func Test_BackendCredentialsContract_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendCredentialsContract_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendCredentialsContract_STATUS_ARM, BackendCredentialsContract_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendCredentialsContract_STATUS_ARM runs a test to see if a specific instance of BackendCredentialsContract_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendCredentialsContract_STATUS_ARM(subject BackendCredentialsContract_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendCredentialsContract_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendCredentialsContract_STATUS_ARM instances for property testing - lazily instantiated by
// BackendCredentialsContract_STATUS_ARMGenerator()
var backendCredentialsContract_STATUS_ARMGenerator gopter.Gen

// BackendCredentialsContract_STATUS_ARMGenerator returns a generator of BackendCredentialsContract_STATUS_ARM instances for property testing.
// We first initialize backendCredentialsContract_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackendCredentialsContract_STATUS_ARMGenerator() gopter.Gen {
	if backendCredentialsContract_STATUS_ARMGenerator != nil {
		return backendCredentialsContract_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendCredentialsContract_STATUS_ARM(generators)
	backendCredentialsContract_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendCredentialsContract_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendCredentialsContract_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForBackendCredentialsContract_STATUS_ARM(generators)
	backendCredentialsContract_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendCredentialsContract_STATUS_ARM{}), generators)

	return backendCredentialsContract_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendCredentialsContract_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendCredentialsContract_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Certificate"] = gen.SliceOf(gen.AlphaString())
	gens["CertificateIds"] = gen.SliceOf(gen.AlphaString())
	gens["Header"] = gen.MapOf(
		gen.AlphaString(),
		gen.SliceOf(gen.AlphaString()))
	gens["Query"] = gen.MapOf(
		gen.AlphaString(),
		gen.SliceOf(gen.AlphaString()))
}

// AddRelatedPropertyGeneratorsForBackendCredentialsContract_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendCredentialsContract_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Authorization"] = gen.PtrOf(BackendAuthorizationHeaderCredentials_STATUS_ARMGenerator())
}

func Test_BackendProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendProperties_STATUS_ARM, BackendProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendProperties_STATUS_ARM runs a test to see if a specific instance of BackendProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendProperties_STATUS_ARM(subject BackendProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendProperties_STATUS_ARM instances for property testing - lazily instantiated by
// BackendProperties_STATUS_ARMGenerator()
var backendProperties_STATUS_ARMGenerator gopter.Gen

// BackendProperties_STATUS_ARMGenerator returns a generator of BackendProperties_STATUS_ARM instances for property testing.
func BackendProperties_STATUS_ARMGenerator() gopter.Gen {
	if backendProperties_STATUS_ARMGenerator != nil {
		return backendProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForBackendProperties_STATUS_ARM(generators)
	backendProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendProperties_STATUS_ARM{}), generators)

	return backendProperties_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForBackendProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ServiceFabricCluster"] = gen.PtrOf(BackendServiceFabricClusterProperties_STATUS_ARMGenerator())
}

func Test_BackendProxyContract_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendProxyContract_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendProxyContract_STATUS_ARM, BackendProxyContract_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendProxyContract_STATUS_ARM runs a test to see if a specific instance of BackendProxyContract_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendProxyContract_STATUS_ARM(subject BackendProxyContract_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendProxyContract_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendProxyContract_STATUS_ARM instances for property testing - lazily instantiated by
// BackendProxyContract_STATUS_ARMGenerator()
var backendProxyContract_STATUS_ARMGenerator gopter.Gen

// BackendProxyContract_STATUS_ARMGenerator returns a generator of BackendProxyContract_STATUS_ARM instances for property testing.
func BackendProxyContract_STATUS_ARMGenerator() gopter.Gen {
	if backendProxyContract_STATUS_ARMGenerator != nil {
		return backendProxyContract_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendProxyContract_STATUS_ARM(generators)
	backendProxyContract_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendProxyContract_STATUS_ARM{}), generators)

	return backendProxyContract_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendProxyContract_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendProxyContract_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Url"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendServiceFabricClusterProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendServiceFabricClusterProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendServiceFabricClusterProperties_STATUS_ARM, BackendServiceFabricClusterProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendServiceFabricClusterProperties_STATUS_ARM runs a test to see if a specific instance of BackendServiceFabricClusterProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendServiceFabricClusterProperties_STATUS_ARM(subject BackendServiceFabricClusterProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendServiceFabricClusterProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendServiceFabricClusterProperties_STATUS_ARM instances for property testing - lazily instantiated by
// BackendServiceFabricClusterProperties_STATUS_ARMGenerator()
var backendServiceFabricClusterProperties_STATUS_ARMGenerator gopter.Gen

// BackendServiceFabricClusterProperties_STATUS_ARMGenerator returns a generator of BackendServiceFabricClusterProperties_STATUS_ARM instances for property testing.
// We first initialize backendServiceFabricClusterProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BackendServiceFabricClusterProperties_STATUS_ARMGenerator() gopter.Gen {
	if backendServiceFabricClusterProperties_STATUS_ARMGenerator != nil {
		return backendServiceFabricClusterProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS_ARM(generators)
	backendServiceFabricClusterProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendServiceFabricClusterProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS_ARM(generators)
	backendServiceFabricClusterProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendServiceFabricClusterProperties_STATUS_ARM{}), generators)

	return backendServiceFabricClusterProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientCertificateId"] = gen.PtrOf(gen.AlphaString())
	gens["ClientCertificatethumbprint"] = gen.PtrOf(gen.AlphaString())
	gens["ManagementEndpoints"] = gen.SliceOf(gen.AlphaString())
	gens["MaxPartitionResolutionRetries"] = gen.PtrOf(gen.Int())
	gens["ServerCertificateThumbprints"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBackendServiceFabricClusterProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ServerX509Names"] = gen.SliceOf(X509CertificateName_STATUS_ARMGenerator())
}

func Test_BackendTlsProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendTlsProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendTlsProperties_STATUS_ARM, BackendTlsProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendTlsProperties_STATUS_ARM runs a test to see if a specific instance of BackendTlsProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendTlsProperties_STATUS_ARM(subject BackendTlsProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendTlsProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendTlsProperties_STATUS_ARM instances for property testing - lazily instantiated by
// BackendTlsProperties_STATUS_ARMGenerator()
var backendTlsProperties_STATUS_ARMGenerator gopter.Gen

// BackendTlsProperties_STATUS_ARMGenerator returns a generator of BackendTlsProperties_STATUS_ARM instances for property testing.
func BackendTlsProperties_STATUS_ARMGenerator() gopter.Gen {
	if backendTlsProperties_STATUS_ARMGenerator != nil {
		return backendTlsProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendTlsProperties_STATUS_ARM(generators)
	backendTlsProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendTlsProperties_STATUS_ARM{}), generators)

	return backendTlsProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendTlsProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendTlsProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ValidateCertificateChain"] = gen.PtrOf(gen.Bool())
	gens["ValidateCertificateName"] = gen.PtrOf(gen.Bool())
}

func Test_Service_Backend_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_Backend_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_Backend_STATUS_ARM, Service_Backend_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_Backend_STATUS_ARM runs a test to see if a specific instance of Service_Backend_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForService_Backend_STATUS_ARM(subject Service_Backend_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_Backend_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_Backend_STATUS_ARM instances for property testing - lazily instantiated by
// Service_Backend_STATUS_ARMGenerator()
var service_Backend_STATUS_ARMGenerator gopter.Gen

// Service_Backend_STATUS_ARMGenerator returns a generator of Service_Backend_STATUS_ARM instances for property testing.
// We first initialize service_Backend_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Service_Backend_STATUS_ARMGenerator() gopter.Gen {
	if service_Backend_STATUS_ARMGenerator != nil {
		return service_Backend_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_Backend_STATUS_ARM(generators)
	service_Backend_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Service_Backend_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_Backend_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForService_Backend_STATUS_ARM(generators)
	service_Backend_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Service_Backend_STATUS_ARM{}), generators)

	return service_Backend_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForService_Backend_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_Backend_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForService_Backend_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForService_Backend_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(BackendContractProperties_STATUS_ARMGenerator())
}

func Test_X509CertificateName_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of X509CertificateName_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForX509CertificateName_STATUS_ARM, X509CertificateName_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForX509CertificateName_STATUS_ARM runs a test to see if a specific instance of X509CertificateName_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForX509CertificateName_STATUS_ARM(subject X509CertificateName_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual X509CertificateName_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of X509CertificateName_STATUS_ARM instances for property testing - lazily instantiated by
// X509CertificateName_STATUS_ARMGenerator()
var x509CertificateName_STATUS_ARMGenerator gopter.Gen

// X509CertificateName_STATUS_ARMGenerator returns a generator of X509CertificateName_STATUS_ARM instances for property testing.
func X509CertificateName_STATUS_ARMGenerator() gopter.Gen {
	if x509CertificateName_STATUS_ARMGenerator != nil {
		return x509CertificateName_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForX509CertificateName_STATUS_ARM(generators)
	x509CertificateName_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(X509CertificateName_STATUS_ARM{}), generators)

	return x509CertificateName_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForX509CertificateName_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForX509CertificateName_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IssuerCertificateThumbprint"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}
