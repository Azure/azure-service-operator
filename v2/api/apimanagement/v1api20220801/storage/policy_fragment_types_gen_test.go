// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_PolicyFragment_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PolicyFragment via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPolicyFragment, PolicyFragmentGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPolicyFragment runs a test to see if a specific instance of PolicyFragment round trips to JSON and back losslessly
func RunJSONSerializationTestForPolicyFragment(subject PolicyFragment) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PolicyFragment
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PolicyFragment instances for property testing - lazily instantiated by PolicyFragmentGenerator()
var policyFragmentGenerator gopter.Gen

// PolicyFragmentGenerator returns a generator of PolicyFragment instances for property testing.
func PolicyFragmentGenerator() gopter.Gen {
	if policyFragmentGenerator != nil {
		return policyFragmentGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForPolicyFragment(generators)
	policyFragmentGenerator = gen.Struct(reflect.TypeOf(PolicyFragment{}), generators)

	return policyFragmentGenerator
}

// AddRelatedPropertyGeneratorsForPolicyFragment is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPolicyFragment(gens map[string]gopter.Gen) {
	gens["Spec"] = Service_PolicyFragment_SpecGenerator()
	gens["Status"] = Service_PolicyFragment_STATUSGenerator()
}

func Test_Service_PolicyFragment_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_PolicyFragment_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_PolicyFragment_STATUS, Service_PolicyFragment_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_PolicyFragment_STATUS runs a test to see if a specific instance of Service_PolicyFragment_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForService_PolicyFragment_STATUS(subject Service_PolicyFragment_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_PolicyFragment_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_PolicyFragment_STATUS instances for property testing - lazily instantiated by
// Service_PolicyFragment_STATUSGenerator()
var service_PolicyFragment_STATUSGenerator gopter.Gen

// Service_PolicyFragment_STATUSGenerator returns a generator of Service_PolicyFragment_STATUS instances for property testing.
func Service_PolicyFragment_STATUSGenerator() gopter.Gen {
	if service_PolicyFragment_STATUSGenerator != nil {
		return service_PolicyFragment_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_PolicyFragment_STATUS(generators)
	service_PolicyFragment_STATUSGenerator = gen.Struct(reflect.TypeOf(Service_PolicyFragment_STATUS{}), generators)

	return service_PolicyFragment_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForService_PolicyFragment_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_PolicyFragment_STATUS(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Format"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_Service_PolicyFragment_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_PolicyFragment_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_PolicyFragment_Spec, Service_PolicyFragment_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_PolicyFragment_Spec runs a test to see if a specific instance of Service_PolicyFragment_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForService_PolicyFragment_Spec(subject Service_PolicyFragment_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_PolicyFragment_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_PolicyFragment_Spec instances for property testing - lazily instantiated by
// Service_PolicyFragment_SpecGenerator()
var service_PolicyFragment_SpecGenerator gopter.Gen

// Service_PolicyFragment_SpecGenerator returns a generator of Service_PolicyFragment_Spec instances for property testing.
func Service_PolicyFragment_SpecGenerator() gopter.Gen {
	if service_PolicyFragment_SpecGenerator != nil {
		return service_PolicyFragment_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_PolicyFragment_Spec(generators)
	service_PolicyFragment_SpecGenerator = gen.Struct(reflect.TypeOf(Service_PolicyFragment_Spec{}), generators)

	return service_PolicyFragment_SpecGenerator
}

// AddIndependentPropertyGeneratorsForService_PolicyFragment_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_PolicyFragment_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Format"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
