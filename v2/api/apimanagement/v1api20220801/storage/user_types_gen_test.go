// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_User_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of User via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUser, UserGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUser runs a test to see if a specific instance of User round trips to JSON and back losslessly
func RunJSONSerializationTestForUser(subject User) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual User
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of User instances for property testing - lazily instantiated by UserGenerator()
var userGenerator gopter.Gen

// UserGenerator returns a generator of User instances for property testing.
func UserGenerator() gopter.Gen {
	if userGenerator != nil {
		return userGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForUser(generators)
	userGenerator = gen.Struct(reflect.TypeOf(User{}), generators)

	return userGenerator
}

// AddRelatedPropertyGeneratorsForUser is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUser(gens map[string]gopter.Gen) {
	gens["Spec"] = Service_User_SpecGenerator()
	gens["Status"] = Service_User_STATUSGenerator()
}

func Test_Service_User_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_User_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_User_Spec, Service_User_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_User_Spec runs a test to see if a specific instance of Service_User_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForService_User_Spec(subject Service_User_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_User_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_User_Spec instances for property testing - lazily instantiated by Service_User_SpecGenerator()
var service_User_SpecGenerator gopter.Gen

// Service_User_SpecGenerator returns a generator of Service_User_Spec instances for property testing.
// We first initialize service_User_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Service_User_SpecGenerator() gopter.Gen {
	if service_User_SpecGenerator != nil {
		return service_User_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_User_Spec(generators)
	service_User_SpecGenerator = gen.Struct(reflect.TypeOf(Service_User_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_User_Spec(generators)
	AddRelatedPropertyGeneratorsForService_User_Spec(generators)
	service_User_SpecGenerator = gen.Struct(reflect.TypeOf(Service_User_Spec{}), generators)

	return service_User_SpecGenerator
}

// AddIndependentPropertyGeneratorsForService_User_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_User_Spec(gens map[string]gopter.Gen) {
	gens["AppType"] = gen.PtrOf(gen.AlphaString())
	gens["AzureName"] = gen.AlphaString()
	gens["Confirmation"] = gen.PtrOf(gen.AlphaString())
	gens["Email"] = gen.PtrOf(gen.AlphaString())
	gens["FirstName"] = gen.PtrOf(gen.AlphaString())
	gens["LastName"] = gen.PtrOf(gen.AlphaString())
	gens["Note"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForService_User_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForService_User_Spec(gens map[string]gopter.Gen) {
	gens["Identities"] = gen.SliceOf(UserIdentityContractGenerator())
}

func Test_Service_User_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_User_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_User_STATUS, Service_User_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_User_STATUS runs a test to see if a specific instance of Service_User_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForService_User_STATUS(subject Service_User_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_User_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_User_STATUS instances for property testing - lazily instantiated by
// Service_User_STATUSGenerator()
var service_User_STATUSGenerator gopter.Gen

// Service_User_STATUSGenerator returns a generator of Service_User_STATUS instances for property testing.
// We first initialize service_User_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Service_User_STATUSGenerator() gopter.Gen {
	if service_User_STATUSGenerator != nil {
		return service_User_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_User_STATUS(generators)
	service_User_STATUSGenerator = gen.Struct(reflect.TypeOf(Service_User_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_User_STATUS(generators)
	AddRelatedPropertyGeneratorsForService_User_STATUS(generators)
	service_User_STATUSGenerator = gen.Struct(reflect.TypeOf(Service_User_STATUS{}), generators)

	return service_User_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForService_User_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_User_STATUS(gens map[string]gopter.Gen) {
	gens["Email"] = gen.PtrOf(gen.AlphaString())
	gens["FirstName"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["LastName"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Note"] = gen.PtrOf(gen.AlphaString())
	gens["RegistrationDate"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForService_User_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForService_User_STATUS(gens map[string]gopter.Gen) {
	gens["Groups"] = gen.SliceOf(GroupContractProperties_STATUSGenerator())
	gens["Identities"] = gen.SliceOf(UserIdentityContract_STATUSGenerator())
}

func Test_GroupContractProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GroupContractProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGroupContractProperties_STATUS, GroupContractProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGroupContractProperties_STATUS runs a test to see if a specific instance of GroupContractProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForGroupContractProperties_STATUS(subject GroupContractProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GroupContractProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GroupContractProperties_STATUS instances for property testing - lazily instantiated by
// GroupContractProperties_STATUSGenerator()
var groupContractProperties_STATUSGenerator gopter.Gen

// GroupContractProperties_STATUSGenerator returns a generator of GroupContractProperties_STATUS instances for property testing.
func GroupContractProperties_STATUSGenerator() gopter.Gen {
	if groupContractProperties_STATUSGenerator != nil {
		return groupContractProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGroupContractProperties_STATUS(generators)
	groupContractProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(GroupContractProperties_STATUS{}), generators)

	return groupContractProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForGroupContractProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGroupContractProperties_STATUS(gens map[string]gopter.Gen) {
	gens["BuiltIn"] = gen.PtrOf(gen.Bool())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisplayName"] = gen.PtrOf(gen.AlphaString())
	gens["ExternalId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserIdentityContract_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserIdentityContract via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserIdentityContract, UserIdentityContractGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserIdentityContract runs a test to see if a specific instance of UserIdentityContract round trips to JSON and back losslessly
func RunJSONSerializationTestForUserIdentityContract(subject UserIdentityContract) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserIdentityContract
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserIdentityContract instances for property testing - lazily instantiated by
// UserIdentityContractGenerator()
var userIdentityContractGenerator gopter.Gen

// UserIdentityContractGenerator returns a generator of UserIdentityContract instances for property testing.
func UserIdentityContractGenerator() gopter.Gen {
	if userIdentityContractGenerator != nil {
		return userIdentityContractGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserIdentityContract(generators)
	userIdentityContractGenerator = gen.Struct(reflect.TypeOf(UserIdentityContract{}), generators)

	return userIdentityContractGenerator
}

// AddIndependentPropertyGeneratorsForUserIdentityContract is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserIdentityContract(gens map[string]gopter.Gen) {
	gens["Provider"] = gen.PtrOf(gen.AlphaString())
}

func Test_UserIdentityContract_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserIdentityContract_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserIdentityContract_STATUS, UserIdentityContract_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserIdentityContract_STATUS runs a test to see if a specific instance of UserIdentityContract_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForUserIdentityContract_STATUS(subject UserIdentityContract_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserIdentityContract_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserIdentityContract_STATUS instances for property testing - lazily instantiated by
// UserIdentityContract_STATUSGenerator()
var userIdentityContract_STATUSGenerator gopter.Gen

// UserIdentityContract_STATUSGenerator returns a generator of UserIdentityContract_STATUS instances for property testing.
func UserIdentityContract_STATUSGenerator() gopter.Gen {
	if userIdentityContract_STATUSGenerator != nil {
		return userIdentityContract_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserIdentityContract_STATUS(generators)
	userIdentityContract_STATUSGenerator = gen.Struct(reflect.TypeOf(UserIdentityContract_STATUS{}), generators)

	return userIdentityContract_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForUserIdentityContract_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserIdentityContract_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Provider"] = gen.PtrOf(gen.AlphaString())
}
