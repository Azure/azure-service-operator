// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=apimanagement.azure.com,resources=users,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=apimanagement.azure.com,resources={users/status,users/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20220801.User
// Generator information:
// - Generated from: /apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/apimusers.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Service_User_Spec   `json:"spec,omitempty"`
	Status            Service_User_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &User{}

// GetConditions returns the conditions of the resource
func (user *User) GetConditions() conditions.Conditions {
	return user.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (user *User) SetConditions(conditions conditions.Conditions) {
	user.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &User{}

// AzureName returns the Azure name of the resource
func (user *User) AzureName() string {
	return user.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2022-08-01"
func (user User) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (user *User) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (user *User) GetSpec() genruntime.ConvertibleSpec {
	return &user.Spec
}

// GetStatus returns the status of this resource
func (user *User) GetStatus() genruntime.ConvertibleStatus {
	return &user.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (user *User) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationHead,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ApiManagement/service/users"
func (user *User) GetType() string {
	return "Microsoft.ApiManagement/service/users"
}

// NewEmptyStatus returns a new empty (blank) status
func (user *User) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Service_User_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (user *User) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(user.Spec)
	return user.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (user *User) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Service_User_STATUS); ok {
		user.Status = *st
		return nil
	}

	// Convert status to required version
	var st Service_User_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	user.Status = st
	return nil
}

// Hub marks that this User is the hub type for conversion
func (user *User) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (user *User) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: user.Spec.OriginalVersion,
		Kind:    "User",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20220801.User
// Generator information:
// - Generated from: /apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/apimusers.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/users/{userId}
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Storage version of v1api20220801.Service_User_Spec
type Service_User_Spec struct {
	AppType *string `json:"appType,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName       string                 `json:"azureName,omitempty"`
	Confirmation    *string                `json:"confirmation,omitempty"`
	Email           *string                `json:"email,omitempty"`
	FirstName       *string                `json:"firstName,omitempty"`
	Identities      []UserIdentityContract `json:"identities,omitempty"`
	LastName        *string                `json:"lastName,omitempty"`
	Note            *string                `json:"note,omitempty"`
	OriginalVersion string                 `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a apimanagement.azure.com/Service resource
	Owner       *genruntime.KnownResourceReference `group:"apimanagement.azure.com" json:"owner,omitempty" kind:"Service"`
	Password    *genruntime.SecretReference        `json:"password,omitempty"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	State       *string                            `json:"state,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Service_User_Spec{}

// ConvertSpecFrom populates our Service_User_Spec from the provided source
func (user *Service_User_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == user {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(user)
}

// ConvertSpecTo populates the provided destination from our Service_User_Spec
func (user *Service_User_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == user {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(user)
}

// Storage version of v1api20220801.Service_User_STATUS
type Service_User_STATUS struct {
	Conditions       []conditions.Condition           `json:"conditions,omitempty"`
	Email            *string                          `json:"email,omitempty"`
	FirstName        *string                          `json:"firstName,omitempty"`
	Groups           []GroupContractProperties_STATUS `json:"groups,omitempty"`
	Id               *string                          `json:"id,omitempty"`
	Identities       []UserIdentityContract_STATUS    `json:"identities,omitempty"`
	LastName         *string                          `json:"lastName,omitempty"`
	Name             *string                          `json:"name,omitempty"`
	Note             *string                          `json:"note,omitempty"`
	PropertyBag      genruntime.PropertyBag           `json:"$propertyBag,omitempty"`
	RegistrationDate *string                          `json:"registrationDate,omitempty"`
	State            *string                          `json:"state,omitempty"`
	Type             *string                          `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Service_User_STATUS{}

// ConvertStatusFrom populates our Service_User_STATUS from the provided source
func (user *Service_User_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == user {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(user)
}

// ConvertStatusTo populates the provided destination from our Service_User_STATUS
func (user *Service_User_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == user {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(user)
}

// Storage version of v1api20220801.GroupContractProperties_STATUS
// Group contract Properties.
type GroupContractProperties_STATUS struct {
	BuiltIn     *bool                  `json:"builtIn,omitempty"`
	Description *string                `json:"description,omitempty"`
	DisplayName *string                `json:"displayName,omitempty"`
	ExternalId  *string                `json:"externalId,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// Storage version of v1api20220801.UserIdentityContract
// User identity details.
type UserIdentityContract struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Provider    *string                `json:"provider,omitempty"`

	// Reference: Identifier value within provider.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// Storage version of v1api20220801.UserIdentityContract_STATUS
// User identity details.
type UserIdentityContract_STATUS struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Provider    *string                `json:"provider,omitempty"`
}

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
