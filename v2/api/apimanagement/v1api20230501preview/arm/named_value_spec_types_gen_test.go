// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_KeyVaultContractCreateProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultContractCreateProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultContractCreateProperties, KeyVaultContractCreatePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultContractCreateProperties runs a test to see if a specific instance of KeyVaultContractCreateProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultContractCreateProperties(subject KeyVaultContractCreateProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultContractCreateProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultContractCreateProperties instances for property testing - lazily instantiated by
// KeyVaultContractCreatePropertiesGenerator()
var keyVaultContractCreatePropertiesGenerator gopter.Gen

// KeyVaultContractCreatePropertiesGenerator returns a generator of KeyVaultContractCreateProperties instances for property testing.
func KeyVaultContractCreatePropertiesGenerator() gopter.Gen {
	if keyVaultContractCreatePropertiesGenerator != nil {
		return keyVaultContractCreatePropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultContractCreateProperties(generators)
	keyVaultContractCreatePropertiesGenerator = gen.Struct(reflect.TypeOf(KeyVaultContractCreateProperties{}), generators)

	return keyVaultContractCreatePropertiesGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultContractCreateProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultContractCreateProperties(gens map[string]gopter.Gen) {
	gens["IdentityClientId"] = gen.PtrOf(gen.AlphaString())
	gens["SecretIdentifier"] = gen.PtrOf(gen.AlphaString())
}

func Test_NamedValueCreateContractProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamedValueCreateContractProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamedValueCreateContractProperties, NamedValueCreateContractPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamedValueCreateContractProperties runs a test to see if a specific instance of NamedValueCreateContractProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForNamedValueCreateContractProperties(subject NamedValueCreateContractProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamedValueCreateContractProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamedValueCreateContractProperties instances for property testing - lazily instantiated by
// NamedValueCreateContractPropertiesGenerator()
var namedValueCreateContractPropertiesGenerator gopter.Gen

// NamedValueCreateContractPropertiesGenerator returns a generator of NamedValueCreateContractProperties instances for property testing.
// We first initialize namedValueCreateContractPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamedValueCreateContractPropertiesGenerator() gopter.Gen {
	if namedValueCreateContractPropertiesGenerator != nil {
		return namedValueCreateContractPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamedValueCreateContractProperties(generators)
	namedValueCreateContractPropertiesGenerator = gen.Struct(reflect.TypeOf(NamedValueCreateContractProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamedValueCreateContractProperties(generators)
	AddRelatedPropertyGeneratorsForNamedValueCreateContractProperties(generators)
	namedValueCreateContractPropertiesGenerator = gen.Struct(reflect.TypeOf(NamedValueCreateContractProperties{}), generators)

	return namedValueCreateContractPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForNamedValueCreateContractProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamedValueCreateContractProperties(gens map[string]gopter.Gen) {
	gens["DisplayName"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.PtrOf(gen.Bool())
	gens["Tags"] = gen.SliceOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForNamedValueCreateContractProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamedValueCreateContractProperties(gens map[string]gopter.Gen) {
	gens["KeyVault"] = gen.PtrOf(KeyVaultContractCreatePropertiesGenerator())
}

func Test_NamedValue_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NamedValue_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNamedValue_Spec, NamedValue_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNamedValue_Spec runs a test to see if a specific instance of NamedValue_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForNamedValue_Spec(subject NamedValue_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NamedValue_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NamedValue_Spec instances for property testing - lazily instantiated by NamedValue_SpecGenerator()
var namedValue_SpecGenerator gopter.Gen

// NamedValue_SpecGenerator returns a generator of NamedValue_Spec instances for property testing.
// We first initialize namedValue_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NamedValue_SpecGenerator() gopter.Gen {
	if namedValue_SpecGenerator != nil {
		return namedValue_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamedValue_Spec(generators)
	namedValue_SpecGenerator = gen.Struct(reflect.TypeOf(NamedValue_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNamedValue_Spec(generators)
	AddRelatedPropertyGeneratorsForNamedValue_Spec(generators)
	namedValue_SpecGenerator = gen.Struct(reflect.TypeOf(NamedValue_Spec{}), generators)

	return namedValue_SpecGenerator
}

// AddIndependentPropertyGeneratorsForNamedValue_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNamedValue_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForNamedValue_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNamedValue_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(NamedValueCreateContractPropertiesGenerator())
}
