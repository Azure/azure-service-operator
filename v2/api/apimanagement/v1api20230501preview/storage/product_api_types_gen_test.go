// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	v20220801s "github.com/Azure/azure-service-operator/v2/api/apimanagement/v1api20220801/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ProductApi_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ProductApi to hub returns original",
		prop.ForAll(RunResourceConversionTestForProductApi, ProductApiGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForProductApi tests if a specific instance of ProductApi round trips to the hub storage version and back losslessly
func RunResourceConversionTestForProductApi(subject ProductApi) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20220801s.ProductApi
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual ProductApi
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ProductApi_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ProductApi to ProductApi via AssignProperties_To_ProductApi & AssignProperties_From_ProductApi returns original",
		prop.ForAll(RunPropertyAssignmentTestForProductApi, ProductApiGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForProductApi tests if a specific instance of ProductApi can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForProductApi(subject ProductApi) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220801s.ProductApi
	err := copied.AssignProperties_To_ProductApi(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ProductApi
	err = actual.AssignProperties_From_ProductApi(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ProductApi_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProductApi via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProductApi, ProductApiGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProductApi runs a test to see if a specific instance of ProductApi round trips to JSON and back losslessly
func RunJSONSerializationTestForProductApi(subject ProductApi) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProductApi
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProductApi instances for property testing - lazily instantiated by ProductApiGenerator()
var productApiGenerator gopter.Gen

// ProductApiGenerator returns a generator of ProductApi instances for property testing.
func ProductApiGenerator() gopter.Gen {
	if productApiGenerator != nil {
		return productApiGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForProductApi(generators)
	productApiGenerator = gen.Struct(reflect.TypeOf(ProductApi{}), generators)

	return productApiGenerator
}

// AddRelatedPropertyGeneratorsForProductApi is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProductApi(gens map[string]gopter.Gen) {
	gens["Spec"] = Service_Products_Api_SpecGenerator()
	gens["Status"] = Service_Products_Api_STATUSGenerator()
}

func Test_Service_Products_Api_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Service_Products_Api_Spec to Service_Products_Api_Spec via AssignProperties_To_Service_Products_Api_Spec & AssignProperties_From_Service_Products_Api_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForService_Products_Api_Spec, Service_Products_Api_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForService_Products_Api_Spec tests if a specific instance of Service_Products_Api_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForService_Products_Api_Spec(subject Service_Products_Api_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220801s.Service_Products_Api_Spec
	err := copied.AssignProperties_To_Service_Products_Api_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Service_Products_Api_Spec
	err = actual.AssignProperties_From_Service_Products_Api_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Service_Products_Api_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_Products_Api_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_Products_Api_Spec, Service_Products_Api_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_Products_Api_Spec runs a test to see if a specific instance of Service_Products_Api_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForService_Products_Api_Spec(subject Service_Products_Api_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_Products_Api_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_Products_Api_Spec instances for property testing - lazily instantiated by
// Service_Products_Api_SpecGenerator()
var service_Products_Api_SpecGenerator gopter.Gen

// Service_Products_Api_SpecGenerator returns a generator of Service_Products_Api_Spec instances for property testing.
func Service_Products_Api_SpecGenerator() gopter.Gen {
	if service_Products_Api_SpecGenerator != nil {
		return service_Products_Api_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_Products_Api_Spec(generators)
	service_Products_Api_SpecGenerator = gen.Struct(reflect.TypeOf(Service_Products_Api_Spec{}), generators)

	return service_Products_Api_SpecGenerator
}

// AddIndependentPropertyGeneratorsForService_Products_Api_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_Products_Api_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["OriginalVersion"] = gen.AlphaString()
}

func Test_Service_Products_Api_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Service_Products_Api_STATUS to Service_Products_Api_STATUS via AssignProperties_To_Service_Products_Api_STATUS & AssignProperties_From_Service_Products_Api_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForService_Products_Api_STATUS, Service_Products_Api_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForService_Products_Api_STATUS tests if a specific instance of Service_Products_Api_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForService_Products_Api_STATUS(subject Service_Products_Api_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20220801s.Service_Products_Api_STATUS
	err := copied.AssignProperties_To_Service_Products_Api_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Service_Products_Api_STATUS
	err = actual.AssignProperties_From_Service_Products_Api_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Service_Products_Api_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_Products_Api_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_Products_Api_STATUS, Service_Products_Api_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_Products_Api_STATUS runs a test to see if a specific instance of Service_Products_Api_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForService_Products_Api_STATUS(subject Service_Products_Api_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_Products_Api_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_Products_Api_STATUS instances for property testing - lazily instantiated by
// Service_Products_Api_STATUSGenerator()
var service_Products_Api_STATUSGenerator gopter.Gen

// Service_Products_Api_STATUSGenerator returns a generator of Service_Products_Api_STATUS instances for property testing.
func Service_Products_Api_STATUSGenerator() gopter.Gen {
	if service_Products_Api_STATUSGenerator != nil {
		return service_Products_Api_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	service_Products_Api_STATUSGenerator = gen.Struct(reflect.TypeOf(Service_Products_Api_STATUS{}), generators)

	return service_Products_Api_STATUSGenerator
}
