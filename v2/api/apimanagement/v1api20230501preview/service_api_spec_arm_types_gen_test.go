// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ApiContactInformation_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiContactInformation_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiContactInformation_ARM, ApiContactInformation_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiContactInformation_ARM runs a test to see if a specific instance of ApiContactInformation_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiContactInformation_ARM(subject ApiContactInformation_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiContactInformation_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiContactInformation_ARM instances for property testing - lazily instantiated by
// ApiContactInformation_ARMGenerator()
var apiContactInformation_ARMGenerator gopter.Gen

// ApiContactInformation_ARMGenerator returns a generator of ApiContactInformation_ARM instances for property testing.
func ApiContactInformation_ARMGenerator() gopter.Gen {
	if apiContactInformation_ARMGenerator != nil {
		return apiContactInformation_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiContactInformation_ARM(generators)
	apiContactInformation_ARMGenerator = gen.Struct(reflect.TypeOf(ApiContactInformation_ARM{}), generators)

	return apiContactInformation_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiContactInformation_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiContactInformation_ARM(gens map[string]gopter.Gen) {
	gens["Email"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApiCreateOrUpdateProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiCreateOrUpdateProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiCreateOrUpdateProperties_ARM, ApiCreateOrUpdateProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiCreateOrUpdateProperties_ARM runs a test to see if a specific instance of ApiCreateOrUpdateProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiCreateOrUpdateProperties_ARM(subject ApiCreateOrUpdateProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiCreateOrUpdateProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiCreateOrUpdateProperties_ARM instances for property testing - lazily instantiated by
// ApiCreateOrUpdateProperties_ARMGenerator()
var apiCreateOrUpdateProperties_ARMGenerator gopter.Gen

// ApiCreateOrUpdateProperties_ARMGenerator returns a generator of ApiCreateOrUpdateProperties_ARM instances for property testing.
// We first initialize apiCreateOrUpdateProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ApiCreateOrUpdateProperties_ARMGenerator() gopter.Gen {
	if apiCreateOrUpdateProperties_ARMGenerator != nil {
		return apiCreateOrUpdateProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiCreateOrUpdateProperties_ARM(generators)
	apiCreateOrUpdateProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ApiCreateOrUpdateProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiCreateOrUpdateProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForApiCreateOrUpdateProperties_ARM(generators)
	apiCreateOrUpdateProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ApiCreateOrUpdateProperties_ARM{}), generators)

	return apiCreateOrUpdateProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiCreateOrUpdateProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiCreateOrUpdateProperties_ARM(gens map[string]gopter.Gen) {
	gens["APIVersion"] = gen.PtrOf(gen.AlphaString())
	gens["ApiRevision"] = gen.PtrOf(gen.AlphaString())
	gens["ApiRevisionDescription"] = gen.PtrOf(gen.AlphaString())
	gens["ApiType"] = gen.PtrOf(gen.OneConstOf(
		ApiCreateOrUpdateProperties_ApiType_Graphql,
		ApiCreateOrUpdateProperties_ApiType_Grpc,
		ApiCreateOrUpdateProperties_ApiType_Http,
		ApiCreateOrUpdateProperties_ApiType_Odata,
		ApiCreateOrUpdateProperties_ApiType_Soap,
		ApiCreateOrUpdateProperties_ApiType_Websocket))
	gens["ApiVersionDescription"] = gen.PtrOf(gen.AlphaString())
	gens["ApiVersionSetId"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DisplayName"] = gen.PtrOf(gen.AlphaString())
	gens["Format"] = gen.PtrOf(gen.OneConstOf(
		ApiCreateOrUpdateProperties_Format_GraphqlLink,
		ApiCreateOrUpdateProperties_Format_Grpc,
		ApiCreateOrUpdateProperties_Format_GrpcLink,
		ApiCreateOrUpdateProperties_Format_Odata,
		ApiCreateOrUpdateProperties_Format_OdataLink,
		ApiCreateOrUpdateProperties_Format_Openapi,
		ApiCreateOrUpdateProperties_Format_OpenapiJson,
		ApiCreateOrUpdateProperties_Format_OpenapiJsonLink,
		ApiCreateOrUpdateProperties_Format_OpenapiLink,
		ApiCreateOrUpdateProperties_Format_SwaggerJson,
		ApiCreateOrUpdateProperties_Format_SwaggerLinkJson,
		ApiCreateOrUpdateProperties_Format_WadlLinkJson,
		ApiCreateOrUpdateProperties_Format_WadlXml,
		ApiCreateOrUpdateProperties_Format_Wsdl,
		ApiCreateOrUpdateProperties_Format_WsdlLink))
	gens["IsCurrent"] = gen.PtrOf(gen.Bool())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Protocols"] = gen.SliceOf(gen.OneConstOf(
		ApiCreateOrUpdateProperties_Protocols_Http,
		ApiCreateOrUpdateProperties_Protocols_Https,
		ApiCreateOrUpdateProperties_Protocols_Ws,
		ApiCreateOrUpdateProperties_Protocols_Wss))
	gens["ServiceUrl"] = gen.PtrOf(gen.AlphaString())
	gens["SourceApiId"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionRequired"] = gen.PtrOf(gen.Bool())
	gens["TermsOfServiceUrl"] = gen.PtrOf(gen.AlphaString())
	gens["TranslateRequiredQueryParameters"] = gen.PtrOf(gen.OneConstOf(ApiCreateOrUpdateProperties_TranslateRequiredQueryParameters_Query, ApiCreateOrUpdateProperties_TranslateRequiredQueryParameters_Template))
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ApiCreateOrUpdateProperties_Type_Graphql,
		ApiCreateOrUpdateProperties_Type_Grpc,
		ApiCreateOrUpdateProperties_Type_Http,
		ApiCreateOrUpdateProperties_Type_Odata,
		ApiCreateOrUpdateProperties_Type_Soap,
		ApiCreateOrUpdateProperties_Type_Websocket))
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForApiCreateOrUpdateProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForApiCreateOrUpdateProperties_ARM(gens map[string]gopter.Gen) {
	gens["ApiVersionSet"] = gen.PtrOf(ApiVersionSetContractDetails_ARMGenerator())
	gens["AuthenticationSettings"] = gen.PtrOf(AuthenticationSettingsContract_ARMGenerator())
	gens["Contact"] = gen.PtrOf(ApiContactInformation_ARMGenerator())
	gens["License"] = gen.PtrOf(ApiLicenseInformation_ARMGenerator())
	gens["SubscriptionKeyParameterNames"] = gen.PtrOf(SubscriptionKeyParameterNamesContract_ARMGenerator())
	gens["WsdlSelector"] = gen.PtrOf(ApiCreateOrUpdateProperties_WsdlSelector_ARMGenerator())
}

func Test_ApiCreateOrUpdateProperties_WsdlSelector_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiCreateOrUpdateProperties_WsdlSelector_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiCreateOrUpdateProperties_WsdlSelector_ARM, ApiCreateOrUpdateProperties_WsdlSelector_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiCreateOrUpdateProperties_WsdlSelector_ARM runs a test to see if a specific instance of ApiCreateOrUpdateProperties_WsdlSelector_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiCreateOrUpdateProperties_WsdlSelector_ARM(subject ApiCreateOrUpdateProperties_WsdlSelector_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiCreateOrUpdateProperties_WsdlSelector_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiCreateOrUpdateProperties_WsdlSelector_ARM instances for property testing - lazily instantiated by
// ApiCreateOrUpdateProperties_WsdlSelector_ARMGenerator()
var apiCreateOrUpdateProperties_WsdlSelector_ARMGenerator gopter.Gen

// ApiCreateOrUpdateProperties_WsdlSelector_ARMGenerator returns a generator of ApiCreateOrUpdateProperties_WsdlSelector_ARM instances for property testing.
func ApiCreateOrUpdateProperties_WsdlSelector_ARMGenerator() gopter.Gen {
	if apiCreateOrUpdateProperties_WsdlSelector_ARMGenerator != nil {
		return apiCreateOrUpdateProperties_WsdlSelector_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiCreateOrUpdateProperties_WsdlSelector_ARM(generators)
	apiCreateOrUpdateProperties_WsdlSelector_ARMGenerator = gen.Struct(reflect.TypeOf(ApiCreateOrUpdateProperties_WsdlSelector_ARM{}), generators)

	return apiCreateOrUpdateProperties_WsdlSelector_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiCreateOrUpdateProperties_WsdlSelector_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiCreateOrUpdateProperties_WsdlSelector_ARM(gens map[string]gopter.Gen) {
	gens["WsdlEndpointName"] = gen.PtrOf(gen.AlphaString())
	gens["WsdlServiceName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApiLicenseInformation_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiLicenseInformation_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiLicenseInformation_ARM, ApiLicenseInformation_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiLicenseInformation_ARM runs a test to see if a specific instance of ApiLicenseInformation_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiLicenseInformation_ARM(subject ApiLicenseInformation_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiLicenseInformation_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiLicenseInformation_ARM instances for property testing - lazily instantiated by
// ApiLicenseInformation_ARMGenerator()
var apiLicenseInformation_ARMGenerator gopter.Gen

// ApiLicenseInformation_ARMGenerator returns a generator of ApiLicenseInformation_ARM instances for property testing.
func ApiLicenseInformation_ARMGenerator() gopter.Gen {
	if apiLicenseInformation_ARMGenerator != nil {
		return apiLicenseInformation_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiLicenseInformation_ARM(generators)
	apiLicenseInformation_ARMGenerator = gen.Struct(reflect.TypeOf(ApiLicenseInformation_ARM{}), generators)

	return apiLicenseInformation_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiLicenseInformation_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiLicenseInformation_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

func Test_ApiVersionSetContractDetails_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ApiVersionSetContractDetails_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForApiVersionSetContractDetails_ARM, ApiVersionSetContractDetails_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForApiVersionSetContractDetails_ARM runs a test to see if a specific instance of ApiVersionSetContractDetails_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForApiVersionSetContractDetails_ARM(subject ApiVersionSetContractDetails_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ApiVersionSetContractDetails_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ApiVersionSetContractDetails_ARM instances for property testing - lazily instantiated by
// ApiVersionSetContractDetails_ARMGenerator()
var apiVersionSetContractDetails_ARMGenerator gopter.Gen

// ApiVersionSetContractDetails_ARMGenerator returns a generator of ApiVersionSetContractDetails_ARM instances for property testing.
func ApiVersionSetContractDetails_ARMGenerator() gopter.Gen {
	if apiVersionSetContractDetails_ARMGenerator != nil {
		return apiVersionSetContractDetails_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForApiVersionSetContractDetails_ARM(generators)
	apiVersionSetContractDetails_ARMGenerator = gen.Struct(reflect.TypeOf(ApiVersionSetContractDetails_ARM{}), generators)

	return apiVersionSetContractDetails_ARMGenerator
}

// AddIndependentPropertyGeneratorsForApiVersionSetContractDetails_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForApiVersionSetContractDetails_ARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["VersionHeaderName"] = gen.PtrOf(gen.AlphaString())
	gens["VersionQueryName"] = gen.PtrOf(gen.AlphaString())
	gens["VersioningScheme"] = gen.PtrOf(gen.OneConstOf(ApiVersionSetContractDetails_VersioningScheme_Header, ApiVersionSetContractDetails_VersioningScheme_Query, ApiVersionSetContractDetails_VersioningScheme_Segment))
}

func Test_AuthenticationSettingsContract_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AuthenticationSettingsContract_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAuthenticationSettingsContract_ARM, AuthenticationSettingsContract_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAuthenticationSettingsContract_ARM runs a test to see if a specific instance of AuthenticationSettingsContract_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAuthenticationSettingsContract_ARM(subject AuthenticationSettingsContract_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AuthenticationSettingsContract_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AuthenticationSettingsContract_ARM instances for property testing - lazily instantiated by
// AuthenticationSettingsContract_ARMGenerator()
var authenticationSettingsContract_ARMGenerator gopter.Gen

// AuthenticationSettingsContract_ARMGenerator returns a generator of AuthenticationSettingsContract_ARM instances for property testing.
func AuthenticationSettingsContract_ARMGenerator() gopter.Gen {
	if authenticationSettingsContract_ARMGenerator != nil {
		return authenticationSettingsContract_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAuthenticationSettingsContract_ARM(generators)
	authenticationSettingsContract_ARMGenerator = gen.Struct(reflect.TypeOf(AuthenticationSettingsContract_ARM{}), generators)

	return authenticationSettingsContract_ARMGenerator
}

// AddRelatedPropertyGeneratorsForAuthenticationSettingsContract_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAuthenticationSettingsContract_ARM(gens map[string]gopter.Gen) {
	gens["OAuth2"] = gen.PtrOf(OAuth2AuthenticationSettingsContract_ARMGenerator())
	gens["OAuth2AuthenticationSettings"] = gen.SliceOf(OAuth2AuthenticationSettingsContract_ARMGenerator())
	gens["Openid"] = gen.PtrOf(OpenIdAuthenticationSettingsContract_ARMGenerator())
	gens["OpenidAuthenticationSettings"] = gen.SliceOf(OpenIdAuthenticationSettingsContract_ARMGenerator())
}

func Test_OAuth2AuthenticationSettingsContract_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OAuth2AuthenticationSettingsContract_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOAuth2AuthenticationSettingsContract_ARM, OAuth2AuthenticationSettingsContract_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOAuth2AuthenticationSettingsContract_ARM runs a test to see if a specific instance of OAuth2AuthenticationSettingsContract_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOAuth2AuthenticationSettingsContract_ARM(subject OAuth2AuthenticationSettingsContract_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OAuth2AuthenticationSettingsContract_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OAuth2AuthenticationSettingsContract_ARM instances for property testing - lazily instantiated by
// OAuth2AuthenticationSettingsContract_ARMGenerator()
var oAuth2AuthenticationSettingsContract_ARMGenerator gopter.Gen

// OAuth2AuthenticationSettingsContract_ARMGenerator returns a generator of OAuth2AuthenticationSettingsContract_ARM instances for property testing.
func OAuth2AuthenticationSettingsContract_ARMGenerator() gopter.Gen {
	if oAuth2AuthenticationSettingsContract_ARMGenerator != nil {
		return oAuth2AuthenticationSettingsContract_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOAuth2AuthenticationSettingsContract_ARM(generators)
	oAuth2AuthenticationSettingsContract_ARMGenerator = gen.Struct(reflect.TypeOf(OAuth2AuthenticationSettingsContract_ARM{}), generators)

	return oAuth2AuthenticationSettingsContract_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOAuth2AuthenticationSettingsContract_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOAuth2AuthenticationSettingsContract_ARM(gens map[string]gopter.Gen) {
	gens["AuthorizationServerId"] = gen.PtrOf(gen.AlphaString())
	gens["Scope"] = gen.PtrOf(gen.AlphaString())
}

func Test_OpenIdAuthenticationSettingsContract_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OpenIdAuthenticationSettingsContract_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOpenIdAuthenticationSettingsContract_ARM, OpenIdAuthenticationSettingsContract_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOpenIdAuthenticationSettingsContract_ARM runs a test to see if a specific instance of OpenIdAuthenticationSettingsContract_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOpenIdAuthenticationSettingsContract_ARM(subject OpenIdAuthenticationSettingsContract_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OpenIdAuthenticationSettingsContract_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OpenIdAuthenticationSettingsContract_ARM instances for property testing - lazily instantiated by
// OpenIdAuthenticationSettingsContract_ARMGenerator()
var openIdAuthenticationSettingsContract_ARMGenerator gopter.Gen

// OpenIdAuthenticationSettingsContract_ARMGenerator returns a generator of OpenIdAuthenticationSettingsContract_ARM instances for property testing.
func OpenIdAuthenticationSettingsContract_ARMGenerator() gopter.Gen {
	if openIdAuthenticationSettingsContract_ARMGenerator != nil {
		return openIdAuthenticationSettingsContract_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOpenIdAuthenticationSettingsContract_ARM(generators)
	openIdAuthenticationSettingsContract_ARMGenerator = gen.Struct(reflect.TypeOf(OpenIdAuthenticationSettingsContract_ARM{}), generators)

	return openIdAuthenticationSettingsContract_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOpenIdAuthenticationSettingsContract_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOpenIdAuthenticationSettingsContract_ARM(gens map[string]gopter.Gen) {
	gens["BearerTokenSendingMethods"] = gen.SliceOf(gen.OneConstOf(BearerTokenSendingMethodsContract_AuthorizationHeader, BearerTokenSendingMethodsContract_Query))
	gens["OpenidProviderId"] = gen.PtrOf(gen.AlphaString())
}

func Test_Service_Api_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Service_Api_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForService_Api_Spec_ARM, Service_Api_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForService_Api_Spec_ARM runs a test to see if a specific instance of Service_Api_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForService_Api_Spec_ARM(subject Service_Api_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Service_Api_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Service_Api_Spec_ARM instances for property testing - lazily instantiated by
// Service_Api_Spec_ARMGenerator()
var service_Api_Spec_ARMGenerator gopter.Gen

// Service_Api_Spec_ARMGenerator returns a generator of Service_Api_Spec_ARM instances for property testing.
// We first initialize service_Api_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Service_Api_Spec_ARMGenerator() gopter.Gen {
	if service_Api_Spec_ARMGenerator != nil {
		return service_Api_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_Api_Spec_ARM(generators)
	service_Api_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Service_Api_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForService_Api_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForService_Api_Spec_ARM(generators)
	service_Api_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Service_Api_Spec_ARM{}), generators)

	return service_Api_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForService_Api_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForService_Api_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForService_Api_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForService_Api_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ApiCreateOrUpdateProperties_ARMGenerator())
}

func Test_SubscriptionKeyParameterNamesContract_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubscriptionKeyParameterNamesContract_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubscriptionKeyParameterNamesContract_ARM, SubscriptionKeyParameterNamesContract_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubscriptionKeyParameterNamesContract_ARM runs a test to see if a specific instance of SubscriptionKeyParameterNamesContract_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubscriptionKeyParameterNamesContract_ARM(subject SubscriptionKeyParameterNamesContract_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubscriptionKeyParameterNamesContract_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubscriptionKeyParameterNamesContract_ARM instances for property testing - lazily instantiated by
// SubscriptionKeyParameterNamesContract_ARMGenerator()
var subscriptionKeyParameterNamesContract_ARMGenerator gopter.Gen

// SubscriptionKeyParameterNamesContract_ARMGenerator returns a generator of SubscriptionKeyParameterNamesContract_ARM instances for property testing.
func SubscriptionKeyParameterNamesContract_ARMGenerator() gopter.Gen {
	if subscriptionKeyParameterNamesContract_ARMGenerator != nil {
		return subscriptionKeyParameterNamesContract_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubscriptionKeyParameterNamesContract_ARM(generators)
	subscriptionKeyParameterNamesContract_ARMGenerator = gen.Struct(reflect.TypeOf(SubscriptionKeyParameterNamesContract_ARM{}), generators)

	return subscriptionKeyParameterNamesContract_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSubscriptionKeyParameterNamesContract_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubscriptionKeyParameterNamesContract_ARM(gens map[string]gopter.Gen) {
	gens["Header"] = gen.PtrOf(gen.AlphaString())
	gens["Query"] = gen.PtrOf(gen.AlphaString())
}
