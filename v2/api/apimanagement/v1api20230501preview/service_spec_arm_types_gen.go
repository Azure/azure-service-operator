// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501preview

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Service_Spec_ARM struct {
	// Identity: Managed service identity of the Api Management service.
	Identity *ApiManagementServiceIdentity_ARM `json:"identity,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Properties of the API Management service.
	Properties *ApiManagementServiceProperties_ARM `json:"properties,omitempty"`

	// Sku: SKU properties of the API Management service.
	Sku *ApiManagementServiceSkuProperties_ARM `json:"sku,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Zones: A list of availability zones denoting where the resource needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Service_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-05-01-preview"
func (service Service_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (service *Service_Spec_ARM) GetName() string {
	return service.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ApiManagement/service"
func (service *Service_Spec_ARM) GetType() string {
	return "Microsoft.ApiManagement/service"
}

// Identity properties of the Api Management service resource.
type ApiManagementServiceIdentity_ARM struct {
	// Type: The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly
	// created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.
	Type                   *ApiManagementServiceIdentity_Type_ARM     `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserAssignedIdentityDetails_ARM `json:"userAssignedIdentities,omitempty"`
}

// Properties of an API Management service resource description.
type ApiManagementServiceProperties_ARM struct {
	// AdditionalLocations: Additional datacenter locations of the API Management service.
	AdditionalLocations []AdditionalLocation_ARM `json:"additionalLocations,omitempty"`

	// ApiVersionConstraint: Control Plane Apis version constraint for the API Management service.
	ApiVersionConstraint *ApiVersionConstraint_ARM `json:"apiVersionConstraint,omitempty"`

	// Certificates: List of Certificates that need to be installed in the API Management service. Max supported certificates
	// that can be installed is 10.
	Certificates []CertificateConfiguration_ARM `json:"certificates,omitempty"`

	// ConfigurationApi: Configuration API configuration of the API Management service.
	ConfigurationApi *ConfigurationApi_ARM `json:"configurationApi,omitempty"`

	// CustomProperties: Custom properties of the API Management service.</br>Setting
	// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher
	// TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting
	// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting
	// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API
	// Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be
	// used to disable just TLS 1.1 for communications with backends.</br>Setting
	// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for
	// communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be
	// used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH
	// operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value
	// is `True` if the service was created on or before April 1, 2018 and `False` otherwise. Http2 setting's default value is
	// `False`.</br></br>You can disable any of the following ciphers by using settings
	// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
	// TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
	// TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256,
	// TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example,
	// `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default
	// value is `true` for them.</br> Note: The following ciphers can't be disabled since they are required by internal
	// platform components:
	// TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
	CustomProperties map[string]string `json:"customProperties,omitempty"`

	// DeveloperPortalStatus: Status of developer portal in this API Management service.
	DeveloperPortalStatus *ApiManagementServiceProperties_DeveloperPortalStatus_ARM `json:"developerPortalStatus,omitempty"`

	// DisableGateway: Property only valid for an Api Management service deployed in multiple locations. This can be used to
	// disable the gateway in master region.
	DisableGateway *bool `json:"disableGateway,omitempty"`

	// EnableClientCertificate: Property only meant to be used for Consumption SKU Service. This enforces a client certificate
	// to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the
	// policy on the gateway.
	EnableClientCertificate *bool `json:"enableClientCertificate,omitempty"`

	// HostnameConfigurations: Custom hostname configuration of the API Management service.
	HostnameConfigurations []HostnameConfiguration_ARM `json:"hostnameConfigurations,omitempty"`

	// LegacyPortalStatus: Status of legacy portal in the API Management service.
	LegacyPortalStatus *ApiManagementServiceProperties_LegacyPortalStatus_ARM `json:"legacyPortalStatus,omitempty"`

	// NatGatewayState: Property can be used to enable NAT Gateway for this API Management service.
	NatGatewayState *ApiManagementServiceProperties_NatGatewayState_ARM `json:"natGatewayState,omitempty"`

	// NotificationSenderEmail: Email address from which the notification will be sent.
	NotificationSenderEmail *string `json:"notificationSenderEmail,omitempty"`
	PublicIpAddressId       *string `json:"publicIpAddressId,omitempty"`

	// PublicNetworkAccess: Whether or not public endpoint access is allowed for this API Management service.  Value is
	// optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access
	// method. Default value is 'Enabled'
	PublicNetworkAccess *ApiManagementServiceProperties_PublicNetworkAccess_ARM `json:"publicNetworkAccess,omitempty"`

	// PublisherEmail: Publisher email.
	PublisherEmail *string `json:"publisherEmail,omitempty"`

	// PublisherName: Publisher name.
	PublisherName *string `json:"publisherName,omitempty"`

	// Restore: Undelete Api Management Service if it was previously soft-deleted. If this flag is specified and set to True
	// all other properties will be ignored.
	Restore *bool `json:"restore,omitempty"`

	// VirtualNetworkConfiguration: Virtual network configuration of the API Management service.
	VirtualNetworkConfiguration *VirtualNetworkConfiguration_ARM `json:"virtualNetworkConfiguration,omitempty"`

	// VirtualNetworkType: The type of VPN in which API Management service needs to be configured in. None (Default Value)
	// means the API Management service is not part of any Virtual Network, External means the API Management deployment is set
	// up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is
	// setup inside a Virtual Network having an Intranet Facing Endpoint only.
	VirtualNetworkType *ApiManagementServiceProperties_VirtualNetworkType_ARM `json:"virtualNetworkType,omitempty"`
}

// API Management service resource SKU properties.
type ApiManagementServiceSkuProperties_ARM struct {
	// Capacity: Capacity of the SKU (number of deployed units of the SKU). For Consumption SKU capacity must be specified as 0.
	Capacity *int `json:"capacity,omitempty"`

	// Name: Name of the Sku.
	Name *ApiManagementServiceSkuProperties_Name_ARM `json:"name,omitempty"`
}

// Description of an additional API Management resource location.
type AdditionalLocation_ARM struct {
	// DisableGateway: Property only valid for an Api Management service deployed in multiple locations. This can be used to
	// disable the gateway in this additional location.
	DisableGateway *bool `json:"disableGateway,omitempty"`

	// Location: The location name of the additional region among Azure Data center regions.
	Location *string `json:"location,omitempty"`

	// NatGatewayState: Property can be used to enable NAT Gateway for this API Management service.
	NatGatewayState   *AdditionalLocation_NatGatewayState_ARM `json:"natGatewayState,omitempty"`
	PublicIpAddressId *string                                 `json:"publicIpAddressId,omitempty"`

	// Sku: SKU properties of the API Management service.
	Sku *ApiManagementServiceSkuProperties_ARM `json:"sku,omitempty"`

	// VirtualNetworkConfiguration: Virtual network configuration for the location.
	VirtualNetworkConfiguration *VirtualNetworkConfiguration_ARM `json:"virtualNetworkConfiguration,omitempty"`

	// Zones: A list of availability zones denoting where the resource needs to come from.
	Zones []string `json:"zones,omitempty"`
}

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned, UserAssigned","UserAssigned"}
type ApiManagementServiceIdentity_Type_ARM string

const (
	ApiManagementServiceIdentity_Type_ARM_None                       = ApiManagementServiceIdentity_Type_ARM("None")
	ApiManagementServiceIdentity_Type_ARM_SystemAssigned             = ApiManagementServiceIdentity_Type_ARM("SystemAssigned")
	ApiManagementServiceIdentity_Type_ARM_SystemAssignedUserAssigned = ApiManagementServiceIdentity_Type_ARM("SystemAssigned, UserAssigned")
	ApiManagementServiceIdentity_Type_ARM_UserAssigned               = ApiManagementServiceIdentity_Type_ARM("UserAssigned")
)

// Mapping from string to ApiManagementServiceIdentity_Type_ARM
var apiManagementServiceIdentity_Type_ARM_Values = map[string]ApiManagementServiceIdentity_Type_ARM{
	"none":                         ApiManagementServiceIdentity_Type_ARM_None,
	"systemassigned":               ApiManagementServiceIdentity_Type_ARM_SystemAssigned,
	"systemassigned, userassigned": ApiManagementServiceIdentity_Type_ARM_SystemAssignedUserAssigned,
	"userassigned":                 ApiManagementServiceIdentity_Type_ARM_UserAssigned,
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ApiManagementServiceProperties_DeveloperPortalStatus_ARM string

const (
	ApiManagementServiceProperties_DeveloperPortalStatus_ARM_Disabled = ApiManagementServiceProperties_DeveloperPortalStatus_ARM("Disabled")
	ApiManagementServiceProperties_DeveloperPortalStatus_ARM_Enabled  = ApiManagementServiceProperties_DeveloperPortalStatus_ARM("Enabled")
)

// Mapping from string to ApiManagementServiceProperties_DeveloperPortalStatus_ARM
var apiManagementServiceProperties_DeveloperPortalStatus_ARM_Values = map[string]ApiManagementServiceProperties_DeveloperPortalStatus_ARM{
	"disabled": ApiManagementServiceProperties_DeveloperPortalStatus_ARM_Disabled,
	"enabled":  ApiManagementServiceProperties_DeveloperPortalStatus_ARM_Enabled,
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ApiManagementServiceProperties_LegacyPortalStatus_ARM string

const (
	ApiManagementServiceProperties_LegacyPortalStatus_ARM_Disabled = ApiManagementServiceProperties_LegacyPortalStatus_ARM("Disabled")
	ApiManagementServiceProperties_LegacyPortalStatus_ARM_Enabled  = ApiManagementServiceProperties_LegacyPortalStatus_ARM("Enabled")
)

// Mapping from string to ApiManagementServiceProperties_LegacyPortalStatus_ARM
var apiManagementServiceProperties_LegacyPortalStatus_ARM_Values = map[string]ApiManagementServiceProperties_LegacyPortalStatus_ARM{
	"disabled": ApiManagementServiceProperties_LegacyPortalStatus_ARM_Disabled,
	"enabled":  ApiManagementServiceProperties_LegacyPortalStatus_ARM_Enabled,
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ApiManagementServiceProperties_NatGatewayState_ARM string

const (
	ApiManagementServiceProperties_NatGatewayState_ARM_Disabled = ApiManagementServiceProperties_NatGatewayState_ARM("Disabled")
	ApiManagementServiceProperties_NatGatewayState_ARM_Enabled  = ApiManagementServiceProperties_NatGatewayState_ARM("Enabled")
)

// Mapping from string to ApiManagementServiceProperties_NatGatewayState_ARM
var apiManagementServiceProperties_NatGatewayState_ARM_Values = map[string]ApiManagementServiceProperties_NatGatewayState_ARM{
	"disabled": ApiManagementServiceProperties_NatGatewayState_ARM_Disabled,
	"enabled":  ApiManagementServiceProperties_NatGatewayState_ARM_Enabled,
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ApiManagementServiceProperties_PublicNetworkAccess_ARM string

const (
	ApiManagementServiceProperties_PublicNetworkAccess_ARM_Disabled = ApiManagementServiceProperties_PublicNetworkAccess_ARM("Disabled")
	ApiManagementServiceProperties_PublicNetworkAccess_ARM_Enabled  = ApiManagementServiceProperties_PublicNetworkAccess_ARM("Enabled")
)

// Mapping from string to ApiManagementServiceProperties_PublicNetworkAccess_ARM
var apiManagementServiceProperties_PublicNetworkAccess_ARM_Values = map[string]ApiManagementServiceProperties_PublicNetworkAccess_ARM{
	"disabled": ApiManagementServiceProperties_PublicNetworkAccess_ARM_Disabled,
	"enabled":  ApiManagementServiceProperties_PublicNetworkAccess_ARM_Enabled,
}

// +kubebuilder:validation:Enum={"External","Internal","None"}
type ApiManagementServiceProperties_VirtualNetworkType_ARM string

const (
	ApiManagementServiceProperties_VirtualNetworkType_ARM_External = ApiManagementServiceProperties_VirtualNetworkType_ARM("External")
	ApiManagementServiceProperties_VirtualNetworkType_ARM_Internal = ApiManagementServiceProperties_VirtualNetworkType_ARM("Internal")
	ApiManagementServiceProperties_VirtualNetworkType_ARM_None     = ApiManagementServiceProperties_VirtualNetworkType_ARM("None")
)

// Mapping from string to ApiManagementServiceProperties_VirtualNetworkType_ARM
var apiManagementServiceProperties_VirtualNetworkType_ARM_Values = map[string]ApiManagementServiceProperties_VirtualNetworkType_ARM{
	"external": ApiManagementServiceProperties_VirtualNetworkType_ARM_External,
	"internal": ApiManagementServiceProperties_VirtualNetworkType_ARM_Internal,
	"none":     ApiManagementServiceProperties_VirtualNetworkType_ARM_None,
}

// +kubebuilder:validation:Enum={"Basic","BasicV2","Consumption","Developer","Isolated","Premium","Standard","StandardV2"}
type ApiManagementServiceSkuProperties_Name_ARM string

const (
	ApiManagementServiceSkuProperties_Name_ARM_Basic       = ApiManagementServiceSkuProperties_Name_ARM("Basic")
	ApiManagementServiceSkuProperties_Name_ARM_BasicV2     = ApiManagementServiceSkuProperties_Name_ARM("BasicV2")
	ApiManagementServiceSkuProperties_Name_ARM_Consumption = ApiManagementServiceSkuProperties_Name_ARM("Consumption")
	ApiManagementServiceSkuProperties_Name_ARM_Developer   = ApiManagementServiceSkuProperties_Name_ARM("Developer")
	ApiManagementServiceSkuProperties_Name_ARM_Isolated    = ApiManagementServiceSkuProperties_Name_ARM("Isolated")
	ApiManagementServiceSkuProperties_Name_ARM_Premium     = ApiManagementServiceSkuProperties_Name_ARM("Premium")
	ApiManagementServiceSkuProperties_Name_ARM_Standard    = ApiManagementServiceSkuProperties_Name_ARM("Standard")
	ApiManagementServiceSkuProperties_Name_ARM_StandardV2  = ApiManagementServiceSkuProperties_Name_ARM("StandardV2")
)

// Mapping from string to ApiManagementServiceSkuProperties_Name_ARM
var apiManagementServiceSkuProperties_Name_ARM_Values = map[string]ApiManagementServiceSkuProperties_Name_ARM{
	"basic":       ApiManagementServiceSkuProperties_Name_ARM_Basic,
	"basicv2":     ApiManagementServiceSkuProperties_Name_ARM_BasicV2,
	"consumption": ApiManagementServiceSkuProperties_Name_ARM_Consumption,
	"developer":   ApiManagementServiceSkuProperties_Name_ARM_Developer,
	"isolated":    ApiManagementServiceSkuProperties_Name_ARM_Isolated,
	"premium":     ApiManagementServiceSkuProperties_Name_ARM_Premium,
	"standard":    ApiManagementServiceSkuProperties_Name_ARM_Standard,
	"standardv2":  ApiManagementServiceSkuProperties_Name_ARM_StandardV2,
}

// Control Plane Apis version constraint for the API Management service.
type ApiVersionConstraint_ARM struct {
	// MinApiVersion: Limit control plane API calls to API Management service with version equal to or newer than this value.
	MinApiVersion *string `json:"minApiVersion,omitempty"`
}

// Certificate configuration which consist of non-trusted intermediates and root certificates.
type CertificateConfiguration_ARM struct {
	// Certificate: Certificate information.
	Certificate *CertificateInformation_ARM `json:"certificate,omitempty"`

	// CertificatePassword: Certificate Password.
	CertificatePassword *string `json:"certificatePassword,omitempty"`

	// EncodedCertificate: Base64 Encoded certificate.
	EncodedCertificate *string `json:"encodedCertificate,omitempty"`

	// StoreName: The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and
	// CertificateAuthority are valid locations.
	StoreName *CertificateConfiguration_StoreName_ARM `json:"storeName,omitempty"`
}

// Information regarding the Configuration API of the API Management service.
type ConfigurationApi_ARM struct {
	// LegacyApi: Indication whether or not the legacy Configuration API (v1) should be exposed on the API Management service.
	// Value is optional but must be 'Enabled' or 'Disabled'. If 'Disabled', legacy Configuration API (v1) will not be
	// available for self-hosted gateways. Default value is 'Enabled'
	LegacyApi *ConfigurationApi_LegacyApi_ARM `json:"legacyApi,omitempty"`
}

// Custom hostname configuration.
type HostnameConfiguration_ARM struct {
	// Certificate: Certificate information.
	Certificate *CertificateInformation_ARM `json:"certificate,omitempty"`

	// CertificatePassword: Certificate Password.
	CertificatePassword *string `json:"certificatePassword,omitempty"`

	// CertificateSource: Certificate Source.
	CertificateSource *HostnameConfiguration_CertificateSource_ARM `json:"certificateSource,omitempty"`

	// CertificateStatus: Certificate Status.
	CertificateStatus *HostnameConfiguration_CertificateStatus_ARM `json:"certificateStatus,omitempty"`

	// DefaultSslBinding: Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate.
	// If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is
	// useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The
	// setting only applied to gateway Hostname Type.
	DefaultSslBinding *bool `json:"defaultSslBinding,omitempty"`

	// EncodedCertificate: Base64 Encoded certificate.
	EncodedCertificate *string `json:"encodedCertificate,omitempty"`

	// HostName: Hostname to configure on the Api Management service.
	HostName *string `json:"hostName,omitempty"`

	// IdentityClientId: System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to
	// the keyVault containing the SSL certificate.
	IdentityClientId *string `json:"identityClientId,omitempty" optionalConfigMapPair:"IdentityClientId"`

	// KeyVaultId: Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided,
	// auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi.
	// The secret should be of type *application/x-pkcs12*
	KeyVaultId *string `json:"keyVaultId,omitempty"`

	// NegotiateClientCertificate: Specify true to always negotiate client certificate on the hostname. Default Value is false.
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty"`

	// Type: Hostname type.
	Type *HostnameConfiguration_Type_ARM `json:"type,omitempty"`
}

// Information about the user assigned identity for the resource
type UserAssignedIdentityDetails_ARM struct {
}

// Configuration of a virtual network to which API Management service is deployed.
type VirtualNetworkConfiguration_ARM struct {
	SubnetResourceId *string `json:"subnetResourceId,omitempty"`
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type AdditionalLocation_NatGatewayState_ARM string

const (
	AdditionalLocation_NatGatewayState_ARM_Disabled = AdditionalLocation_NatGatewayState_ARM("Disabled")
	AdditionalLocation_NatGatewayState_ARM_Enabled  = AdditionalLocation_NatGatewayState_ARM("Enabled")
)

// Mapping from string to AdditionalLocation_NatGatewayState_ARM
var additionalLocation_NatGatewayState_ARM_Values = map[string]AdditionalLocation_NatGatewayState_ARM{
	"disabled": AdditionalLocation_NatGatewayState_ARM_Disabled,
	"enabled":  AdditionalLocation_NatGatewayState_ARM_Enabled,
}

// +kubebuilder:validation:Enum={"CertificateAuthority","Root"}
type CertificateConfiguration_StoreName_ARM string

const (
	CertificateConfiguration_StoreName_ARM_CertificateAuthority = CertificateConfiguration_StoreName_ARM("CertificateAuthority")
	CertificateConfiguration_StoreName_ARM_Root                 = CertificateConfiguration_StoreName_ARM("Root")
)

// Mapping from string to CertificateConfiguration_StoreName_ARM
var certificateConfiguration_StoreName_ARM_Values = map[string]CertificateConfiguration_StoreName_ARM{
	"certificateauthority": CertificateConfiguration_StoreName_ARM_CertificateAuthority,
	"root":                 CertificateConfiguration_StoreName_ARM_Root,
}

// SSL certificate information.
type CertificateInformation_ARM struct {
	// Expiry: Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
	// specified by the ISO 8601 standard.
	Expiry *string `json:"expiry,omitempty" optionalConfigMapPair:"Expiry"`

	// Subject: Subject of the certificate.
	Subject *string `json:"subject,omitempty" optionalConfigMapPair:"Subject"`

	// Thumbprint: Thumbprint of the certificate.
	Thumbprint *string `json:"thumbprint,omitempty" optionalConfigMapPair:"Thumbprint"`
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ConfigurationApi_LegacyApi_ARM string

const (
	ConfigurationApi_LegacyApi_ARM_Disabled = ConfigurationApi_LegacyApi_ARM("Disabled")
	ConfigurationApi_LegacyApi_ARM_Enabled  = ConfigurationApi_LegacyApi_ARM("Enabled")
)

// Mapping from string to ConfigurationApi_LegacyApi_ARM
var configurationApi_LegacyApi_ARM_Values = map[string]ConfigurationApi_LegacyApi_ARM{
	"disabled": ConfigurationApi_LegacyApi_ARM_Disabled,
	"enabled":  ConfigurationApi_LegacyApi_ARM_Enabled,
}

// +kubebuilder:validation:Enum={"BuiltIn","Custom","KeyVault","Managed"}
type HostnameConfiguration_CertificateSource_ARM string

const (
	HostnameConfiguration_CertificateSource_ARM_BuiltIn  = HostnameConfiguration_CertificateSource_ARM("BuiltIn")
	HostnameConfiguration_CertificateSource_ARM_Custom   = HostnameConfiguration_CertificateSource_ARM("Custom")
	HostnameConfiguration_CertificateSource_ARM_KeyVault = HostnameConfiguration_CertificateSource_ARM("KeyVault")
	HostnameConfiguration_CertificateSource_ARM_Managed  = HostnameConfiguration_CertificateSource_ARM("Managed")
)

// Mapping from string to HostnameConfiguration_CertificateSource_ARM
var hostnameConfiguration_CertificateSource_ARM_Values = map[string]HostnameConfiguration_CertificateSource_ARM{
	"builtin":  HostnameConfiguration_CertificateSource_ARM_BuiltIn,
	"custom":   HostnameConfiguration_CertificateSource_ARM_Custom,
	"keyvault": HostnameConfiguration_CertificateSource_ARM_KeyVault,
	"managed":  HostnameConfiguration_CertificateSource_ARM_Managed,
}

// +kubebuilder:validation:Enum={"Completed","Failed","InProgress"}
type HostnameConfiguration_CertificateStatus_ARM string

const (
	HostnameConfiguration_CertificateStatus_ARM_Completed  = HostnameConfiguration_CertificateStatus_ARM("Completed")
	HostnameConfiguration_CertificateStatus_ARM_Failed     = HostnameConfiguration_CertificateStatus_ARM("Failed")
	HostnameConfiguration_CertificateStatus_ARM_InProgress = HostnameConfiguration_CertificateStatus_ARM("InProgress")
)

// Mapping from string to HostnameConfiguration_CertificateStatus_ARM
var hostnameConfiguration_CertificateStatus_ARM_Values = map[string]HostnameConfiguration_CertificateStatus_ARM{
	"completed":  HostnameConfiguration_CertificateStatus_ARM_Completed,
	"failed":     HostnameConfiguration_CertificateStatus_ARM_Failed,
	"inprogress": HostnameConfiguration_CertificateStatus_ARM_InProgress,
}

// +kubebuilder:validation:Enum={"ConfigurationApi","DeveloperPortal","Management","Portal","Proxy","Scm"}
type HostnameConfiguration_Type_ARM string

const (
	HostnameConfiguration_Type_ARM_ConfigurationApi = HostnameConfiguration_Type_ARM("ConfigurationApi")
	HostnameConfiguration_Type_ARM_DeveloperPortal  = HostnameConfiguration_Type_ARM("DeveloperPortal")
	HostnameConfiguration_Type_ARM_Management       = HostnameConfiguration_Type_ARM("Management")
	HostnameConfiguration_Type_ARM_Portal           = HostnameConfiguration_Type_ARM("Portal")
	HostnameConfiguration_Type_ARM_Proxy            = HostnameConfiguration_Type_ARM("Proxy")
	HostnameConfiguration_Type_ARM_Scm              = HostnameConfiguration_Type_ARM("Scm")
)

// Mapping from string to HostnameConfiguration_Type_ARM
var hostnameConfiguration_Type_ARM_Values = map[string]HostnameConfiguration_Type_ARM{
	"configurationapi": HostnameConfiguration_Type_ARM_ConfigurationApi,
	"developerportal":  HostnameConfiguration_Type_ARM_DeveloperPortal,
	"management":       HostnameConfiguration_Type_ARM_Management,
	"portal":           HostnameConfiguration_Type_ARM_Portal,
	"proxy":            HostnameConfiguration_Type_ARM_Proxy,
	"scm":              HostnameConfiguration_Type_ARM_Scm,
}
