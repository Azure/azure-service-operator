// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211001

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SubscriptionAliasResponse_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubscriptionAliasResponse_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubscriptionAliasResponseStatusARM, SubscriptionAliasResponseStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubscriptionAliasResponseStatusARM runs a test to see if a specific instance of SubscriptionAliasResponse_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubscriptionAliasResponseStatusARM(subject SubscriptionAliasResponse_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubscriptionAliasResponse_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubscriptionAliasResponse_StatusARM instances for property testing - lazily instantiated by
// SubscriptionAliasResponseStatusARMGenerator()
var subscriptionAliasResponseStatusARMGenerator gopter.Gen

// SubscriptionAliasResponseStatusARMGenerator returns a generator of SubscriptionAliasResponse_StatusARM instances for property testing.
// We first initialize subscriptionAliasResponseStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SubscriptionAliasResponseStatusARMGenerator() gopter.Gen {
	if subscriptionAliasResponseStatusARMGenerator != nil {
		return subscriptionAliasResponseStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubscriptionAliasResponseStatusARM(generators)
	subscriptionAliasResponseStatusARMGenerator = gen.Struct(reflect.TypeOf(SubscriptionAliasResponse_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubscriptionAliasResponseStatusARM(generators)
	AddRelatedPropertyGeneratorsForSubscriptionAliasResponseStatusARM(generators)
	subscriptionAliasResponseStatusARMGenerator = gen.Struct(reflect.TypeOf(SubscriptionAliasResponse_StatusARM{}), generators)

	return subscriptionAliasResponseStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSubscriptionAliasResponseStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubscriptionAliasResponseStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSubscriptionAliasResponseStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSubscriptionAliasResponseStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SubscriptionAliasResponsePropertiesStatusARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataStatusARMGenerator())
}

func Test_SubscriptionAliasResponseProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubscriptionAliasResponseProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubscriptionAliasResponsePropertiesStatusARM, SubscriptionAliasResponsePropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubscriptionAliasResponsePropertiesStatusARM runs a test to see if a specific instance of SubscriptionAliasResponseProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubscriptionAliasResponsePropertiesStatusARM(subject SubscriptionAliasResponseProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubscriptionAliasResponseProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubscriptionAliasResponseProperties_StatusARM instances for property testing - lazily instantiated by
// SubscriptionAliasResponsePropertiesStatusARMGenerator()
var subscriptionAliasResponsePropertiesStatusARMGenerator gopter.Gen

// SubscriptionAliasResponsePropertiesStatusARMGenerator returns a generator of SubscriptionAliasResponseProperties_StatusARM instances for property testing.
func SubscriptionAliasResponsePropertiesStatusARMGenerator() gopter.Gen {
	if subscriptionAliasResponsePropertiesStatusARMGenerator != nil {
		return subscriptionAliasResponsePropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubscriptionAliasResponsePropertiesStatusARM(generators)
	subscriptionAliasResponsePropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(SubscriptionAliasResponseProperties_StatusARM{}), generators)

	return subscriptionAliasResponsePropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSubscriptionAliasResponsePropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubscriptionAliasResponsePropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["AcceptOwnershipState"] = gen.PtrOf(gen.OneConstOf(AcceptOwnershipState_Status_Completed, AcceptOwnershipState_Status_Expired, AcceptOwnershipState_Status_Pending))
	gens["AcceptOwnershipUrl"] = gen.PtrOf(gen.AlphaString())
	gens["BillingScope"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedTime"] = gen.PtrOf(gen.AlphaString())
	gens["DisplayName"] = gen.PtrOf(gen.AlphaString())
	gens["ManagementGroupId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(SubscriptionAliasResponsePropertiesStatusProvisioningState_Accepted, SubscriptionAliasResponsePropertiesStatusProvisioningState_Failed, SubscriptionAliasResponsePropertiesStatusProvisioningState_Succeeded))
	gens["ResellerId"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionOwnerId"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Workload"] = gen.PtrOf(gen.OneConstOf(Workload_Status_DevTest, Workload_Status_Production))
}

func Test_SystemData_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemDataStatusARM, SystemDataStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemDataStatusARM runs a test to see if a specific instance of SystemData_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemDataStatusARM(subject SystemData_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_StatusARM instances for property testing - lazily instantiated by
// SystemDataStatusARMGenerator()
var systemDataStatusARMGenerator gopter.Gen

// SystemDataStatusARMGenerator returns a generator of SystemData_StatusARM instances for property testing.
func SystemDataStatusARMGenerator() gopter.Gen {
	if systemDataStatusARMGenerator != nil {
		return systemDataStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemDataStatusARM(generators)
	systemDataStatusARMGenerator = gen.Struct(reflect.TypeOf(SystemData_StatusARM{}), generators)

	return systemDataStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemDataStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemDataStatusARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemDataStatusCreatedByType_Application,
		SystemDataStatusCreatedByType_Key,
		SystemDataStatusCreatedByType_ManagedIdentity,
		SystemDataStatusCreatedByType_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemDataStatusLastModifiedByType_Application,
		SystemDataStatusLastModifiedByType_Key,
		SystemDataStatusLastModifiedByType_ManagedIdentity,
		SystemDataStatusLastModifiedByType_User))
}
