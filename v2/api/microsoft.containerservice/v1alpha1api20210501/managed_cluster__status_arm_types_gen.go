// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"

//Generated from:
type ManagedCluster_StatusARM struct {
	//ExtendedLocation: The extended location of the Virtual Machine.
	ExtendedLocation *ExtendedLocation_StatusARM `json:"extendedLocation,omitempty"`

	//Id: Resource Id
	Id *string `json:"id,omitempty"`

	//Identity: The identity of the managed cluster, if configured.
	Identity *ManagedClusterIdentity_StatusARM `json:"identity,omitempty"`

	//Location: Resource location
	Location *string `json:"location,omitempty"`

	//Name: Resource name
	Name *string `json:"name,omitempty"`

	//Properties: Properties of a managed cluster.
	Properties *ManagedClusterProperties_StatusARM `json:"properties,omitempty"`

	//Sku: The managed cluster SKU.
	Sku *ManagedClusterSKU_StatusARM `json:"sku,omitempty"`

	//Tags: Resource tags
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`
}

//Generated from:
type ExtendedLocation_StatusARM struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

//Generated from:
type ManagedClusterIdentity_StatusARM struct {
	//PrincipalId: The principal id of the system assigned identity which is used by
	//master components.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant id of the system assigned identity which is used by master
	//components.
	TenantId *string `json:"tenantId,omitempty"`

	//Type: The type of identity used for the managed cluster. Type 'SystemAssigned'
	//will use an implicitly created identity in master components and an auto-created
	//user assigned identity in MC_ resource group in agent nodes. Type 'None' will
	//not use MSI for the managed cluster, service principal will be used instead.
	Type *ManagedClusterIdentityStatusType `json:"type,omitempty"`

	//UserAssignedIdentities: The user identity associated with the managed cluster.
	//This identity will be used in control plane and only one user assigned identity
	//is allowed. The user identity dictionary key references will be ARM resource ids
	//in the form:
	//'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]ManagedClusterIdentity_Status_UserAssignedIdentitiesARM `json:"userAssignedIdentities,omitempty"`
}

//Generated from:
type ManagedClusterProperties_StatusARM struct {
	//AadProfile: Profile of Azure Active Directory configuration.
	AadProfile *ManagedClusterAADProfile_StatusARM `json:"aadProfile,omitempty"`

	//AddonProfiles: Profile of managed cluster add-on.
	AddonProfiles *v1.JSON `json:"addonProfiles,omitempty"`

	//AgentPoolProfiles: Properties of the agent pool.
	AgentPoolProfiles []ManagedClusterAgentPoolProfile_StatusARM `json:"agentPoolProfiles,omitempty"`

	//ApiServerAccessProfile: Access profile for managed cluster API server.
	ApiServerAccessProfile *ManagedClusterAPIServerAccessProfile_StatusARM `json:"apiServerAccessProfile,omitempty"`

	//AutoScalerProfile: Parameters to be applied to the cluster-autoscaler when
	//enabled
	AutoScalerProfile *ManagedClusterProperties_Status_AutoScalerProfileARM `json:"autoScalerProfile,omitempty"`

	//AutoUpgradeProfile: Profile of auto upgrade configuration.
	AutoUpgradeProfile *ManagedClusterAutoUpgradeProfile_StatusARM `json:"autoUpgradeProfile,omitempty"`

	//AzurePortalFQDN: FQDN for the master pool which used by proxy config.
	AzurePortalFQDN *string `json:"azurePortalFQDN,omitempty"`

	//DisableLocalAccounts: If set to true, getting static credential will be disabled
	//for this cluster. Expected to only be used for AAD clusters.
	DisableLocalAccounts *bool `json:"disableLocalAccounts,omitempty"`

	//DiskEncryptionSetID: ResourceId of the disk encryption set to use for enabling
	//encryption at rest.
	DiskEncryptionSetID *string `json:"diskEncryptionSetID,omitempty"`

	//DnsPrefix: DNS prefix specified when creating the managed cluster.
	DnsPrefix *string `json:"dnsPrefix,omitempty"`

	//EnablePodSecurityPolicy: (DEPRECATING) Whether to enable Kubernetes pod security
	//policy (preview). This feature is set for removal on October 15th, 2020. Learn
	//more at aka.ms/aks/azpodpolicy.
	EnablePodSecurityPolicy *bool `json:"enablePodSecurityPolicy,omitempty"`

	//EnableRBAC: Whether to enable Kubernetes Role-Based Access Control.
	EnableRBAC *bool `json:"enableRBAC,omitempty"`

	//Fqdn: FQDN for the master pool.
	Fqdn *string `json:"fqdn,omitempty"`

	//FqdnSubdomain: FQDN subdomain specified when creating private cluster with
	//custom private dns zone.
	FqdnSubdomain *string `json:"fqdnSubdomain,omitempty"`

	//HttpProxyConfig: Configurations for provisioning the cluster with HTTP proxy
	//servers.
	HttpProxyConfig *ManagedClusterHTTPProxyConfig_StatusARM `json:"httpProxyConfig,omitempty"`

	//IdentityProfile: Identities associated with the cluster.
	IdentityProfile *v1.JSON `json:"identityProfile,omitempty"`

	//KubernetesVersion: Version of Kubernetes specified when creating the managed
	//cluster.
	KubernetesVersion *string `json:"kubernetesVersion,omitempty"`

	//LinuxProfile: Profile for Linux VMs in the container service cluster.
	LinuxProfile *ContainerServiceLinuxProfile_StatusARM `json:"linuxProfile,omitempty"`

	//MaxAgentPools: The max number of agent pools for the managed cluster.
	MaxAgentPools *int `json:"maxAgentPools,omitempty"`

	//NetworkProfile: Profile of network configuration.
	NetworkProfile *ContainerServiceNetworkProfile_StatusARM `json:"networkProfile,omitempty"`

	//NodeResourceGroup: Name of the resource group containing agent pool nodes.
	NodeResourceGroup *string `json:"nodeResourceGroup,omitempty"`

	//PodIdentityProfile: Profile of managed cluster pod identity.
	PodIdentityProfile *ManagedClusterPodIdentityProfile_StatusARM `json:"podIdentityProfile,omitempty"`

	//PowerState: Represents the Power State of the cluster
	PowerState *PowerState_StatusARM `json:"powerState,omitempty"`

	//PrivateFQDN: FQDN of private cluster.
	PrivateFQDN *string `json:"privateFQDN,omitempty"`

	//PrivateLinkResources: Private link resources associated with the cluster.
	PrivateLinkResources []PrivateLinkResource_StatusARM `json:"privateLinkResources,omitempty"`

	//ProvisioningState: The current deployment or provisioning state, which only
	//appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//ServicePrincipalProfile: Information about a service principal identity for the
	//cluster to use for manipulating Azure APIs.
	ServicePrincipalProfile *ManagedClusterServicePrincipalProfile_StatusARM `json:"servicePrincipalProfile,omitempty"`

	//WindowsProfile: Profile for Windows VMs in the container service cluster.
	WindowsProfile *ManagedClusterWindowsProfile_StatusARM `json:"windowsProfile,omitempty"`
}

//Generated from:
type ManagedClusterSKU_StatusARM struct {
	//Name: Name of a managed cluster SKU.
	Name *ManagedClusterSKUStatusName `json:"name,omitempty"`

	//Tier: Tier of a managed cluster SKU.
	Tier *ManagedClusterSKUStatusTier `json:"tier,omitempty"`
}

//Generated from:
type ContainerServiceLinuxProfile_StatusARM struct {
	//AdminUsername: The administrator username to use for Linux VMs.
	AdminUsername string `json:"adminUsername"`

	//Ssh: SSH configuration for Linux-based VMs running on Azure.
	Ssh ContainerServiceSshConfiguration_StatusARM `json:"ssh"`
}

//Generated from:
type ContainerServiceNetworkProfile_StatusARM struct {
	//DnsServiceIP: An IP address assigned to the Kubernetes DNS service. It must be
	//within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `json:"dnsServiceIP,omitempty"`

	//DockerBridgeCidr: A CIDR notation IP range assigned to the Docker bridge
	//network. It must not overlap with any Subnet IP ranges or the Kubernetes service
	//address range.
	DockerBridgeCidr *string `json:"dockerBridgeCidr,omitempty"`

	//LoadBalancerProfile: Profile of the cluster load balancer.
	LoadBalancerProfile *ManagedClusterLoadBalancerProfile_StatusARM `json:"loadBalancerProfile,omitempty"`

	//LoadBalancerSku: The load balancer sku for the managed cluster.
	LoadBalancerSku *ContainerServiceNetworkProfileStatusLoadBalancerSku `json:"loadBalancerSku,omitempty"`

	//NetworkMode: Network mode used for building Kubernetes network.
	NetworkMode *ContainerServiceNetworkProfileStatusNetworkMode `json:"networkMode,omitempty"`

	//NetworkPlugin: Network plugin used for building Kubernetes network.
	NetworkPlugin *ContainerServiceNetworkProfileStatusNetworkPlugin `json:"networkPlugin,omitempty"`

	//NetworkPolicy: Network policy used for building Kubernetes network.
	NetworkPolicy *ContainerServiceNetworkProfileStatusNetworkPolicy `json:"networkPolicy,omitempty"`

	//OutboundType: The outbound (egress) routing method.
	OutboundType *ContainerServiceNetworkProfileStatusOutboundType `json:"outboundType,omitempty"`

	//PodCidr: A CIDR notation IP range from which to assign pod IPs when kubenet is
	//used.
	PodCidr *string `json:"podCidr,omitempty"`

	//ServiceCidr: A CIDR notation IP range from which to assign service cluster IPs.
	//It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `json:"serviceCidr,omitempty"`
}

//Generated from:
type ExtendedLocationType_Status string

const ExtendedLocationType_StatusEdgeZone = ExtendedLocationType_Status("EdgeZone")

//Generated from:
type ManagedClusterAADProfile_StatusARM struct {
	//AdminGroupObjectIDs: AAD group object IDs that will have admin role of the
	//cluster.
	AdminGroupObjectIDs []string `json:"adminGroupObjectIDs,omitempty"`

	//ClientAppID: The client AAD application ID.
	ClientAppID *string `json:"clientAppID,omitempty"`

	//EnableAzureRBAC: Whether to enable Azure RBAC for Kubernetes authorization.
	EnableAzureRBAC *bool `json:"enableAzureRBAC,omitempty"`

	//Managed: Whether to enable managed AAD.
	Managed *bool `json:"managed,omitempty"`

	//ServerAppID: The server AAD application ID.
	ServerAppID *string `json:"serverAppID,omitempty"`

	//ServerAppSecret: The server AAD application secret.
	ServerAppSecret *string `json:"serverAppSecret,omitempty"`

	//TenantID: The AAD tenant ID to use for authentication. If not specified, will
	//use the tenant of the deployment subscription.
	TenantID *string `json:"tenantID,omitempty"`
}

//Generated from:
type ManagedClusterAPIServerAccessProfile_StatusARM struct {
	//AuthorizedIPRanges: Authorized IP Ranges to kubernetes API server.
	AuthorizedIPRanges []string `json:"authorizedIPRanges,omitempty"`

	//EnablePrivateCluster: Whether to create the cluster as a private cluster or not.
	EnablePrivateCluster *bool `json:"enablePrivateCluster,omitempty"`

	//EnablePrivateClusterPublicFQDN: Whether to create additional public FQDN for
	//private cluster or not.
	EnablePrivateClusterPublicFQDN *bool `json:"enablePrivateClusterPublicFQDN,omitempty"`

	//PrivateDNSZone: Private dns zone mode for private cluster.
	PrivateDNSZone *string `json:"privateDNSZone,omitempty"`
}

//Generated from:
type ManagedClusterAgentPoolProfile_StatusARM struct {
	//AvailabilityZones: Availability zones for nodes. Must use
	//VirtualMachineScaleSets AgentPoolType.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`

	//Count: Number of agents (VMs) to host docker containers. Allowed values must be
	//in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to
	//1000 (inclusive) for system pools. The default value is 1.
	Count *int `json:"count,omitempty"`

	//EnableAutoScaling: Whether to enable auto-scaler
	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty"`

	//EnableEncryptionAtHost: Whether to enable EncryptionAtHost
	EnableEncryptionAtHost *bool `json:"enableEncryptionAtHost,omitempty"`

	//EnableFIPS: Whether to use FIPS enabled OS
	EnableFIPS *bool `json:"enableFIPS,omitempty"`

	//EnableNodePublicIP: Enable public IP for nodes
	EnableNodePublicIP *bool `json:"enableNodePublicIP,omitempty"`

	//EnableUltraSSD: Whether to enable UltraSSD
	EnableUltraSSD *bool `json:"enableUltraSSD,omitempty"`

	//GpuInstanceProfile: GPUInstanceProfile to be used to specify GPU MIG instance
	//profile for supported GPU VM SKU. Supported values are MIG1g, MIG2g, MIG3g,
	//MIG4g and MIG7g.
	GpuInstanceProfile *GPUInstanceProfile_Status `json:"gpuInstanceProfile,omitempty"`

	//KubeletConfig: KubeletConfig specifies the configuration of kubelet on agent
	//nodes.
	KubeletConfig *KubeletConfig_StatusARM `json:"kubeletConfig,omitempty"`

	//KubeletDiskType: KubeletDiskType determines the placement of emptyDir volumes,
	//container runtime data root, and Kubelet ephemeral storage. Currently allows one
	//value, OS, resulting in Kubelet using the OS disk for data.
	KubeletDiskType *KubeletDiskType_Status `json:"kubeletDiskType,omitempty"`

	//LinuxOSConfig: LinuxOSConfig specifies the OS configuration of linux agent nodes.
	LinuxOSConfig *LinuxOSConfig_StatusARM `json:"linuxOSConfig,omitempty"`

	//MaxCount: Maximum number of nodes for auto-scaling
	MaxCount *int `json:"maxCount,omitempty"`

	//MaxPods: Maximum number of pods that can run on a node.
	MaxPods *int `json:"maxPods,omitempty"`

	//MinCount: Minimum number of nodes for auto-scaling
	MinCount *int `json:"minCount,omitempty"`

	//Mode: AgentPoolMode represents mode of an agent pool
	Mode *AgentPoolMode_Status `json:"mode,omitempty"`

	//Name: Unique name of the agent pool profile in the context of the subscription
	//and resource group.
	Name *string `json:"name,omitempty"`

	//NodeImageVersion: Version of node image
	NodeImageVersion *string `json:"nodeImageVersion,omitempty"`

	//NodeLabels: Agent pool node labels to be persisted across all nodes in agent
	//pool.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	//NodePublicIPPrefixID: Public IP Prefix ID. VM nodes use IPs assigned from this
	//Public IP Prefix.
	NodePublicIPPrefixID *string `json:"nodePublicIPPrefixID,omitempty"`

	//NodeTaints: Taints added to new nodes during node pool create and scale. For
	//example, key=value:NoSchedule.
	NodeTaints []string `json:"nodeTaints,omitempty"`

	//OrchestratorVersion: Version of orchestrator specified when creating the managed
	//cluster.
	OrchestratorVersion *string `json:"orchestratorVersion,omitempty"`

	//OsDiskSizeGB: OS Disk Size in GB to be used to specify the disk size for every
	//machine in this master/agent pool. If you specify 0, it will apply the default
	//osDisk size according to the vmSize specified.
	OsDiskSizeGB *int `json:"osDiskSizeGB,omitempty"`

	//OsDiskType: OS disk type to be used for machines in a given agent pool. Allowed
	//values are 'Ephemeral' and 'Managed'. If unspecified, defaults to 'Ephemeral'
	//when the VM supports ephemeral OS and has a cache disk larger than the requested
	//OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after
	//creation.
	OsDiskType *OSDiskType_Status `json:"osDiskType,omitempty"`

	//OsSKU: OsSKU to be used to specify os sku. Choose from Ubuntu(default) and
	//CBLMariner for Linux OSType. Not applicable to Windows OSType.
	OsSKU *OSSKU_Status `json:"osSKU,omitempty"`

	//OsType: OsType to be used to specify os type. Choose from Linux and Windows.
	//Default to Linux.
	OsType *OSType_Status `json:"osType,omitempty"`

	//PodSubnetID: Pod SubnetID specifies the VNet's subnet identifier for pods.
	PodSubnetID *string `json:"podSubnetID,omitempty"`

	//PowerState: Describes whether the Agent Pool is Running or Stopped
	PowerState *PowerState_StatusARM `json:"powerState,omitempty"`

	//ProvisioningState: The current deployment or provisioning state, which only
	//appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//ProximityPlacementGroupID: The ID for Proximity Placement Group.
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupID,omitempty"`

	//ScaleSetEvictionPolicy: ScaleSetEvictionPolicy to be used to specify eviction
	//policy for Spot virtual machine scale set. Default to Delete.
	ScaleSetEvictionPolicy *ScaleSetEvictionPolicy_Status `json:"scaleSetEvictionPolicy,omitempty"`

	//ScaleSetPriority: ScaleSetPriority to be used to specify virtual machine scale
	//set priority. Default to regular.
	ScaleSetPriority *ScaleSetPriority_Status `json:"scaleSetPriority,omitempty"`

	//SpotMaxPrice: SpotMaxPrice to be used to specify the maximum price you are
	//willing to pay in US Dollars. Possible values are any decimal value greater than
	//zero or -1 which indicates default price to be up-to on-demand.
	SpotMaxPrice *float64 `json:"spotMaxPrice,omitempty"`

	//Tags: Agent pool tags to be persisted on the agent pool virtual machine scale
	//set.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: AgentPoolType represents types of an agent pool
	Type *AgentPoolType_Status `json:"type,omitempty"`

	//UpgradeSettings: Settings for upgrading the agentpool
	UpgradeSettings *AgentPoolUpgradeSettings_StatusARM `json:"upgradeSettings,omitempty"`

	//VmSize: Size of agent VMs.
	VmSize *string `json:"vmSize,omitempty"`

	//VnetSubnetID: VNet SubnetID specifies the VNet's subnet identifier for nodes and
	//maybe pods
	VnetSubnetID *string `json:"vnetSubnetID,omitempty"`
}

//Generated from:
type ManagedClusterAutoUpgradeProfile_StatusARM struct {
	//UpgradeChannel: upgrade channel for auto upgrade.
	UpgradeChannel *ManagedClusterAutoUpgradeProfileStatusUpgradeChannel `json:"upgradeChannel,omitempty"`
}

//Generated from:
type ManagedClusterHTTPProxyConfig_StatusARM struct {
	//HttpProxy: HTTP proxy server endpoint to use.
	HttpProxy *string `json:"httpProxy,omitempty"`

	//HttpsProxy: HTTPS proxy server endpoint to use.
	HttpsProxy *string `json:"httpsProxy,omitempty"`

	//NoProxy: Endpoints that should not go through proxy.
	NoProxy []string `json:"noProxy,omitempty"`

	//TrustedCa: Alternative CA cert to use for connecting to proxy servers.
	TrustedCa *string `json:"trustedCa,omitempty"`
}

type ManagedClusterIdentityStatusType string

const (
	ManagedClusterIdentityStatusTypeNone           = ManagedClusterIdentityStatusType("None")
	ManagedClusterIdentityStatusTypeSystemAssigned = ManagedClusterIdentityStatusType("SystemAssigned")
	ManagedClusterIdentityStatusTypeUserAssigned   = ManagedClusterIdentityStatusType("UserAssigned")
)

type ManagedClusterIdentity_Status_UserAssignedIdentitiesARM struct {
	//ClientId: The client id of user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal id of user assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

//Generated from:
type ManagedClusterPodIdentityProfile_StatusARM struct {
	//AllowNetworkPluginKubenet: Customer consent for enabling AAD pod identity addon
	//in cluster using Kubenet network plugin.
	AllowNetworkPluginKubenet *bool `json:"allowNetworkPluginKubenet,omitempty"`

	//Enabled: Whether the pod identity addon is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	//UserAssignedIdentities: User assigned pod identity settings.
	UserAssignedIdentities []ManagedClusterPodIdentity_StatusARM `json:"userAssignedIdentities,omitempty"`

	//UserAssignedIdentityExceptions: User assigned pod identity exception settings.
	UserAssignedIdentityExceptions []ManagedClusterPodIdentityException_StatusARM `json:"userAssignedIdentityExceptions,omitempty"`
}

type ManagedClusterProperties_Status_AutoScalerProfileARM struct {
	BalanceSimilarNodeGroups      *string                                                  `json:"balance-similar-node-groups,omitempty"`
	Expander                      *ManagedClusterPropertiesStatusAutoScalerProfileExpander `json:"expander,omitempty"`
	MaxEmptyBulkDelete            *string                                                  `json:"max-empty-bulk-delete,omitempty"`
	MaxGracefulTerminationSec     *string                                                  `json:"max-graceful-termination-sec,omitempty"`
	MaxNodeProvisionTime          *string                                                  `json:"max-node-provision-time,omitempty"`
	MaxTotalUnreadyPercentage     *string                                                  `json:"max-total-unready-percentage,omitempty"`
	NewPodScaleUpDelay            *string                                                  `json:"new-pod-scale-up-delay,omitempty"`
	OkTotalUnreadyCount           *string                                                  `json:"ok-total-unready-count,omitempty"`
	ScaleDownDelayAfterAdd        *string                                                  `json:"scale-down-delay-after-add,omitempty"`
	ScaleDownDelayAfterDelete     *string                                                  `json:"scale-down-delay-after-delete,omitempty"`
	ScaleDownDelayAfterFailure    *string                                                  `json:"scale-down-delay-after-failure,omitempty"`
	ScaleDownUnneededTime         *string                                                  `json:"scale-down-unneeded-time,omitempty"`
	ScaleDownUnreadyTime          *string                                                  `json:"scale-down-unready-time,omitempty"`
	ScaleDownUtilizationThreshold *string                                                  `json:"scale-down-utilization-threshold,omitempty"`
	ScanInterval                  *string                                                  `json:"scan-interval,omitempty"`
	SkipNodesWithLocalStorage     *string                                                  `json:"skip-nodes-with-local-storage,omitempty"`
	SkipNodesWithSystemPods       *string                                                  `json:"skip-nodes-with-system-pods,omitempty"`
}

type ManagedClusterSKUStatusName string

const ManagedClusterSKUStatusNameBasic = ManagedClusterSKUStatusName("Basic")

type ManagedClusterSKUStatusTier string

const (
	ManagedClusterSKUStatusTierFree = ManagedClusterSKUStatusTier("Free")
	ManagedClusterSKUStatusTierPaid = ManagedClusterSKUStatusTier("Paid")
)

//Generated from:
type ManagedClusterServicePrincipalProfile_StatusARM struct {
	//ClientId: The ID for the service principal.
	ClientId string `json:"clientId"`

	//Secret: The secret password associated with the service principal in plain text.
	Secret *string `json:"secret,omitempty"`
}

//Generated from:
type ManagedClusterWindowsProfile_StatusARM struct {
	//AdminPassword: Specifies the password of the administrator account.
	//Minimum-length: 8 characters
	//Max-length: 123 characters
	//Complexity requirements: 3 out of 4 conditions below need to be fulfilled
	//Has lower characters
	//Has upper characters
	//Has a digit
	//Has a special character (Regex match [\W_])
	//Disallowed values: "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word",
	//"pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	AdminPassword *string `json:"adminPassword,omitempty"`

	//AdminUsername: Specifies the name of the administrator account.
	//restriction: Cannot end in "."
	//Disallowed values: "administrator", "admin", "user", "user1", "test", "user2",
	//"test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2",
	//"aspnet", "backup", "console", "david", "guest", "john", "owner", "root",
	//"server", "sql", "support", "support_388945a0", "sys", "test2", "test3",
	//"user4", "user5".
	//Minimum-length: 1 character
	//Max-length: 20 characters
	AdminUsername string `json:"adminUsername"`

	//EnableCSIProxy: Whether to enable CSI proxy.
	EnableCSIProxy *bool `json:"enableCSIProxy,omitempty"`

	//LicenseType: The licenseType to use for Windows VMs. Windows_Server is used to
	//enable Azure Hybrid User Benefits for Windows VMs.
	LicenseType *ManagedClusterWindowsProfileStatusLicenseType `json:"licenseType,omitempty"`
}

//Generated from:
type PrivateLinkResource_StatusARM struct {
	//GroupId: The group ID of the resource.
	GroupId *string `json:"groupId,omitempty"`

	//Id: The ID of the private link resource.
	Id *string `json:"id,omitempty"`

	//Name: The name of the private link resource.
	Name *string `json:"name,omitempty"`

	//PrivateLinkServiceID: The private link service ID of the resource, this field is
	//exposed only to NRP internally.
	PrivateLinkServiceID *string `json:"privateLinkServiceID,omitempty"`

	//RequiredMembers: RequiredMembers of the resource
	RequiredMembers []string `json:"requiredMembers,omitempty"`

	//Type: The resource type.
	Type *string `json:"type,omitempty"`
}

//Generated from:
type ContainerServiceSshConfiguration_StatusARM struct {
	//PublicKeys: The list of SSH public keys used to authenticate with Linux-based
	//VMs. Only expect one key specified.
	PublicKeys []ContainerServiceSshPublicKey_StatusARM `json:"publicKeys"`
}

//Generated from:
type ManagedClusterLoadBalancerProfile_StatusARM struct {
	//AllocatedOutboundPorts: Desired number of allocated SNAT ports per VM. Allowed
	//values must be in the range of 0 to 64000 (inclusive). The default value is 0
	//which results in Azure dynamically allocating ports.
	AllocatedOutboundPorts *int `json:"allocatedOutboundPorts,omitempty"`

	//EffectiveOutboundIPs: The effective outbound IP resources of the cluster load
	//balancer.
	EffectiveOutboundIPs []ResourceReference_StatusARM `json:"effectiveOutboundIPs,omitempty"`

	//IdleTimeoutInMinutes: Desired outbound flow idle timeout in minutes. Allowed
	//values must be in the range of 4 to 120 (inclusive). The default value is 30
	//minutes.
	IdleTimeoutInMinutes *int `json:"idleTimeoutInMinutes,omitempty"`

	//ManagedOutboundIPs: Desired managed outbound IPs for the cluster load balancer.
	ManagedOutboundIPs *ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM `json:"managedOutboundIPs,omitempty"`

	//OutboundIPPrefixes: Desired outbound IP Prefix resources for the cluster load
	//balancer.
	OutboundIPPrefixes *ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM `json:"outboundIPPrefixes,omitempty"`

	//OutboundIPs: Desired outbound IP resources for the cluster load balancer.
	OutboundIPs *ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM `json:"outboundIPs,omitempty"`
}

//Generated from:
type ManagedClusterPodIdentityException_StatusARM struct {
	//Name: Name of the pod identity exception.
	Name string `json:"name"`

	//Namespace: Namespace of the pod identity exception.
	Namespace string `json:"namespace"`

	//PodLabels: Pod labels to match.
	PodLabels map[string]string `json:"podLabels"`
}

//Generated from:
type ManagedClusterPodIdentity_StatusARM struct {
	//BindingSelector: Binding selector to use for the AzureIdentityBinding resource.
	BindingSelector *string `json:"bindingSelector,omitempty"`

	//Identity: Information of the user assigned identity.
	Identity UserAssignedIdentity_StatusARM `json:"identity"`

	//Name: Name of the pod identity.
	Name string `json:"name"`

	//Namespace: Namespace of the pod identity.
	Namespace        string                                                `json:"namespace"`
	ProvisioningInfo *ManagedClusterPodIdentity_Status_ProvisioningInfoARM `json:"provisioningInfo,omitempty"`

	//ProvisioningState: The current provisioning state of the pod identity.
	ProvisioningState *ManagedClusterPodIdentityStatusProvisioningState `json:"provisioningState,omitempty"`
}

//Generated from:
type ContainerServiceSshPublicKey_StatusARM struct {
	//KeyData: Certificate public key used to authenticate with VMs through SSH. The
	//certificate must be in PEM format with or without headers.
	KeyData string `json:"keyData"`
}

type ManagedClusterLoadBalancerProfile_Status_ManagedOutboundIPsARM struct {
	//Count: Desired number of outbound IP created/managed by Azure for the cluster
	//load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The
	//default value is 1.
	Count *int `json:"count,omitempty"`
}

type ManagedClusterLoadBalancerProfile_Status_OutboundIPPrefixesARM struct {
	//PublicIPPrefixes: A list of public IP prefix resources.
	PublicIPPrefixes []ResourceReference_StatusARM `json:"publicIPPrefixes,omitempty"`
}

type ManagedClusterLoadBalancerProfile_Status_OutboundIPsARM struct {
	//PublicIPs: A list of public IP resources.
	PublicIPs []ResourceReference_StatusARM `json:"publicIPs,omitempty"`
}

type ManagedClusterPodIdentity_Status_ProvisioningInfoARM struct {
	//Error: Pod identity assignment error (if any).
	Error *CloudError_StatusARM `json:"error,omitempty"`
}

//Generated from:
type ResourceReference_StatusARM struct {
	//Id: The fully qualified Azure resource id.
	Id *string `json:"id,omitempty"`
}

//Generated from:
type UserAssignedIdentity_StatusARM struct {
	//ClientId: The client id of the user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	//ObjectId: The object id of the user assigned identity.
	ObjectId *string `json:"objectId,omitempty"`

	//ResourceId: The resource id of the user assigned identity.
	ResourceId *string `json:"resourceId,omitempty"`
}

//Generated from:
type CloudError_StatusARM struct {
	//Error: Details about the error.
	Error *CloudErrorBody_StatusARM `json:"error,omitempty"`
}

//Generated from:
type CloudErrorBody_StatusARM struct {
	//Code: An identifier for the error. Codes are invariant and are intended to be
	//consumed programmatically.
	Code *string `json:"code,omitempty"`

	//Details: A list of additional details about the error.
	Details []CloudErrorBody_Status_UnrolledARM `json:"details,omitempty"`

	//Message: A message describing the error, intended to be suitable for display in
	//a user interface.
	Message *string `json:"message,omitempty"`

	//Target: The target of the particular error. For example, the name of the
	//property in error.
	Target *string `json:"target,omitempty"`
}

type CloudErrorBody_Status_UnrolledARM struct {
	//Code: An identifier for the error. Codes are invariant and are intended to be
	//consumed programmatically.
	Code *string `json:"code,omitempty"`

	//Message: A message describing the error, intended to be suitable for display in
	//a user interface.
	Message *string `json:"message,omitempty"`

	//Target: The target of the particular error. For example, the name of the
	//property in error.
	Target *string `json:"target,omitempty"`
}
