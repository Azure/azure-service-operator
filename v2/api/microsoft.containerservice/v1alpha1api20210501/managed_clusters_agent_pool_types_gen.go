// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210501

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.containerservice/v1alpha1api20210501storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.containerservice.azure.com,resources=managedclustersagentpools,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.containerservice.azure.com,resources={managedclustersagentpools/status,managedclustersagentpools/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/resourceDefinitions/managedClusters_agentPools
type ManagedClustersAgentPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedClustersAgentPools_Spec `json:"spec,omitempty"`
	Status            AgentPool_Status               `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ManagedClustersAgentPool{}

// GetConditions returns the conditions of the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) GetConditions() conditions.Conditions {
	return managedClustersAgentPool.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (managedClustersAgentPool *ManagedClustersAgentPool) SetConditions(conditions conditions.Conditions) {
	managedClustersAgentPool.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-containerservice-azure-com-v1alpha1api20210501-managedclustersagentpool,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.containerservice.azure.com,resources=managedclustersagentpools,verbs=create;update,versions=v1alpha1api20210501,name=default.v1alpha1api20210501.managedclustersagentpools.microsoft.containerservice.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &ManagedClustersAgentPool{}

// Default applies defaults to the ManagedClustersAgentPool resource
func (managedClustersAgentPool *ManagedClustersAgentPool) Default() {
	managedClustersAgentPool.defaultImpl()
	var temp interface{} = managedClustersAgentPool
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (managedClustersAgentPool *ManagedClustersAgentPool) defaultAzureName() {
	if managedClustersAgentPool.Spec.AzureName == "" {
		managedClustersAgentPool.Spec.AzureName = managedClustersAgentPool.Name
	}
}

// defaultImpl applies the code generated defaults to the ManagedClustersAgentPool resource
func (managedClustersAgentPool *ManagedClustersAgentPool) defaultImpl() {
	managedClustersAgentPool.defaultAzureName()
}

var _ genruntime.KubernetesResource = &ManagedClustersAgentPool{}

// AzureName returns the Azure name of the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) AzureName() string {
	return managedClustersAgentPool.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (managedClustersAgentPool *ManagedClustersAgentPool) GetSpec() genruntime.ConvertibleSpec {
	return &managedClustersAgentPool.Spec
}

// GetStatus returns the status of this resource
func (managedClustersAgentPool *ManagedClustersAgentPool) GetStatus() genruntime.ConvertibleStatus {
	return &managedClustersAgentPool.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerService/managedClusters/agentPools"
func (managedClustersAgentPool *ManagedClustersAgentPool) GetType() string {
	return "Microsoft.ContainerService/managedClusters/agentPools"
}

// NewEmptyStatus returns a new empty (blank) status
func (managedClustersAgentPool *ManagedClustersAgentPool) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &AgentPool_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (managedClustersAgentPool *ManagedClustersAgentPool) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(managedClustersAgentPool.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: managedClustersAgentPool.Namespace,
		Name:      managedClustersAgentPool.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (managedClustersAgentPool *ManagedClustersAgentPool) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*AgentPool_Status); ok {
		managedClustersAgentPool.Status = *st
		return nil
	}

	// Convert status to required version
	var st AgentPool_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	managedClustersAgentPool.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-containerservice-azure-com-v1alpha1api20210501-managedclustersagentpool,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.containerservice.azure.com,resources=managedclustersagentpools,verbs=create;update,versions=v1alpha1api20210501,name=validate.v1alpha1api20210501.managedclustersagentpools.microsoft.containerservice.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &ManagedClustersAgentPool{}

// ValidateCreate validates the creation of the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) ValidateCreate() error {
	validations := managedClustersAgentPool.createValidations()
	var temp interface{} = managedClustersAgentPool
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) ValidateDelete() error {
	validations := managedClustersAgentPool.deleteValidations()
	var temp interface{} = managedClustersAgentPool
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) ValidateUpdate(old runtime.Object) error {
	validations := managedClustersAgentPool.updateValidations()
	var temp interface{} = managedClustersAgentPool
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) createValidations() []func() error {
	return []func() error{managedClustersAgentPool.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return managedClustersAgentPool.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (managedClustersAgentPool *ManagedClustersAgentPool) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&managedClustersAgentPool.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromManagedClustersAgentPool populates our ManagedClustersAgentPool from the provided source ManagedClustersAgentPool
func (managedClustersAgentPool *ManagedClustersAgentPool) AssignPropertiesFromManagedClustersAgentPool(source *v1alpha1api20210501storage.ManagedClustersAgentPool) error {

	// Spec
	var spec ManagedClustersAgentPools_Spec
	err := spec.AssignPropertiesFromManagedClustersAgentPoolsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromManagedClustersAgentPoolsSpec()")
	}
	managedClustersAgentPool.Spec = spec

	// Status
	var status AgentPool_Status
	err = status.AssignPropertiesFromAgentPoolStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromAgentPoolStatus()")
	}
	managedClustersAgentPool.Status = status

	// No error
	return nil
}

// AssignPropertiesToManagedClustersAgentPool populates the provided destination ManagedClustersAgentPool from our ManagedClustersAgentPool
func (managedClustersAgentPool *ManagedClustersAgentPool) AssignPropertiesToManagedClustersAgentPool(destination *v1alpha1api20210501storage.ManagedClustersAgentPool) error {

	// Spec
	var spec v1alpha1api20210501storage.ManagedClustersAgentPools_Spec
	err := managedClustersAgentPool.Spec.AssignPropertiesToManagedClustersAgentPoolsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToManagedClustersAgentPoolsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210501storage.AgentPool_Status
	err = managedClustersAgentPool.Status.AssignPropertiesToAgentPoolStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToAgentPoolStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (managedClustersAgentPool *ManagedClustersAgentPool) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: managedClustersAgentPool.Spec.OriginalVersion(),
		Kind:    "ManagedClustersAgentPool",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/resourceDefinitions/managedClusters_agentPools
type ManagedClustersAgentPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedClustersAgentPool `json:"items"`
}

//Generated from:
type AgentPool_Status struct {
	//AvailabilityZones: Availability zones for nodes. Must use
	//VirtualMachineScaleSets AgentPoolType.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Count: Number of agents (VMs) to host docker containers. Allowed values must be
	//in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to
	//1000 (inclusive) for system pools. The default value is 1.
	Count *int `json:"count,omitempty"`

	//EnableAutoScaling: Whether to enable auto-scaler
	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty"`

	//EnableEncryptionAtHost: Whether to enable EncryptionAtHost
	EnableEncryptionAtHost *bool `json:"enableEncryptionAtHost,omitempty"`

	//EnableFIPS: Whether to use FIPS enabled OS
	EnableFIPS *bool `json:"enableFIPS,omitempty"`

	//EnableNodePublicIP: Enable public IP for nodes
	EnableNodePublicIP *bool `json:"enableNodePublicIP,omitempty"`

	//EnableUltraSSD: Whether to enable UltraSSD
	EnableUltraSSD *bool `json:"enableUltraSSD,omitempty"`

	//GpuInstanceProfile: GPUInstanceProfile to be used to specify GPU MIG instance
	//profile for supported GPU VM SKU. Supported values are MIG1g, MIG2g, MIG3g,
	//MIG4g and MIG7g.
	GpuInstanceProfile *GPUInstanceProfile_Status `json:"gpuInstanceProfile,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//KubeletConfig: KubeletConfig specifies the configuration of kubelet on agent
	//nodes.
	KubeletConfig *KubeletConfig_Status `json:"kubeletConfig,omitempty"`

	//KubeletDiskType: KubeletDiskType determines the placement of emptyDir volumes,
	//container runtime data root, and Kubelet ephemeral storage. Currently allows one
	//value, OS, resulting in Kubelet using the OS disk for data.
	KubeletDiskType *KubeletDiskType_Status `json:"kubeletDiskType,omitempty"`

	//LinuxOSConfig: LinuxOSConfig specifies the OS configuration of linux agent nodes.
	LinuxOSConfig *LinuxOSConfig_Status `json:"linuxOSConfig,omitempty"`

	//MaxCount: Maximum number of nodes for auto-scaling
	MaxCount *int `json:"maxCount,omitempty"`

	//MaxPods: Maximum number of pods that can run on a node.
	MaxPods *int `json:"maxPods,omitempty"`

	//MinCount: Minimum number of nodes for auto-scaling
	MinCount *int `json:"minCount,omitempty"`

	//Mode: AgentPoolMode represents mode of an agent pool
	Mode *AgentPoolMode_Status `json:"mode,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//NodeImageVersion: Version of node image
	NodeImageVersion *string `json:"nodeImageVersion,omitempty"`

	//NodeLabels: Agent pool node labels to be persisted across all nodes in agent
	//pool.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	//NodePublicIPPrefixID: Public IP Prefix ID. VM nodes use IPs assigned from this
	//Public IP Prefix.
	NodePublicIPPrefixID *string `json:"nodePublicIPPrefixID,omitempty"`

	//NodeTaints: Taints added to new nodes during node pool create and scale. For
	//example, key=value:NoSchedule.
	NodeTaints []string `json:"nodeTaints,omitempty"`

	//OrchestratorVersion: Version of orchestrator specified when creating the managed
	//cluster.
	OrchestratorVersion *string `json:"orchestratorVersion,omitempty"`

	//OsDiskSizeGB: OS Disk Size in GB to be used to specify the disk size for every
	//machine in this master/agent pool. If you specify 0, it will apply the default
	//osDisk size according to the vmSize specified.
	OsDiskSizeGB *int `json:"osDiskSizeGB,omitempty"`

	//OsDiskType: OS disk type to be used for machines in a given agent pool. Allowed
	//values are 'Ephemeral' and 'Managed'. If unspecified, defaults to 'Ephemeral'
	//when the VM supports ephemeral OS and has a cache disk larger than the requested
	//OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after
	//creation.
	OsDiskType *OSDiskType_Status `json:"osDiskType,omitempty"`

	//OsSKU: OsSKU to be used to specify os sku. Choose from Ubuntu(default) and
	//CBLMariner for Linux OSType. Not applicable to Windows OSType.
	OsSKU *OSSKU_Status `json:"osSKU,omitempty"`

	//OsType: OsType to be used to specify os type. Choose from Linux and Windows.
	//Default to Linux.
	OsType *OSType_Status `json:"osType,omitempty"`

	//PodSubnetID: Pod SubnetID specifies the VNet's subnet identifier for pods.
	PodSubnetID *string `json:"podSubnetID,omitempty"`

	//PowerState: Describes whether the Agent Pool is Running or Stopped
	PowerState *PowerState_Status `json:"powerState,omitempty"`

	//PropertiesType: AgentPoolType represents types of an agent pool
	PropertiesType *AgentPoolType_Status `json:"properties_type,omitempty"`

	//ProvisioningState: The current deployment or provisioning state, which only
	//appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	//ProximityPlacementGroupID: The ID for Proximity Placement Group.
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupID,omitempty"`

	//ScaleSetEvictionPolicy: ScaleSetEvictionPolicy to be used to specify eviction
	//policy for Spot virtual machine scale set. Default to Delete.
	ScaleSetEvictionPolicy *ScaleSetEvictionPolicy_Status `json:"scaleSetEvictionPolicy,omitempty"`

	//ScaleSetPriority: ScaleSetPriority to be used to specify virtual machine scale
	//set priority. Default to regular.
	ScaleSetPriority *ScaleSetPriority_Status `json:"scaleSetPriority,omitempty"`

	//SpotMaxPrice: SpotMaxPrice to be used to specify the maximum price you are
	//willing to pay in US Dollars. Possible values are any decimal value greater than
	//zero or -1 which indicates default price to be up-to on-demand.
	SpotMaxPrice *float64 `json:"spotMaxPrice,omitempty"`

	//Tags: Agent pool tags to be persisted on the agent pool virtual machine scale
	//set.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type
	Type *string `json:"type,omitempty"`

	//UpgradeSettings: Settings for upgrading the agentpool
	UpgradeSettings *AgentPoolUpgradeSettings_Status `json:"upgradeSettings,omitempty"`

	//VmSize: Size of agent VMs.
	VmSize *string `json:"vmSize,omitempty"`

	//VnetSubnetID: VNet SubnetID specifies the VNet's subnet identifier for nodes and
	//maybe pods
	VnetSubnetID *string `json:"vnetSubnetID,omitempty"`
}

var _ genruntime.ConvertibleStatus = &AgentPool_Status{}

// ConvertStatusFrom populates our AgentPool_Status from the provided source
func (agentPoolStatus *AgentPool_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210501storage.AgentPool_Status)
	if ok {
		// Populate our instance from source
		return agentPoolStatus.AssignPropertiesFromAgentPoolStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210501storage.AgentPool_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = agentPoolStatus.AssignPropertiesFromAgentPoolStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our AgentPool_Status
func (agentPoolStatus *AgentPool_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210501storage.AgentPool_Status)
	if ok {
		// Populate destination from our instance
		return agentPoolStatus.AssignPropertiesToAgentPoolStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210501storage.AgentPool_Status{}
	err := agentPoolStatus.AssignPropertiesToAgentPoolStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &AgentPool_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (agentPoolStatus *AgentPool_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AgentPool_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (agentPoolStatus *AgentPool_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AgentPool_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AgentPool_StatusARM, got %T", armInput)
	}

	// Set property ‘AvailabilityZones’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.AvailabilityZones {
			agentPoolStatus.AvailabilityZones = append(agentPoolStatus.AvailabilityZones, item)
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Count’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Count != nil {
			count := *typedInput.Properties.Count
			agentPoolStatus.Count = &count
		}
	}

	// Set property ‘EnableAutoScaling’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableAutoScaling != nil {
			enableAutoScaling := *typedInput.Properties.EnableAutoScaling
			agentPoolStatus.EnableAutoScaling = &enableAutoScaling
		}
	}

	// Set property ‘EnableEncryptionAtHost’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableEncryptionAtHost != nil {
			enableEncryptionAtHost := *typedInput.Properties.EnableEncryptionAtHost
			agentPoolStatus.EnableEncryptionAtHost = &enableEncryptionAtHost
		}
	}

	// Set property ‘EnableFIPS’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableFIPS != nil {
			enableFIPS := *typedInput.Properties.EnableFIPS
			agentPoolStatus.EnableFIPS = &enableFIPS
		}
	}

	// Set property ‘EnableNodePublicIP’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableNodePublicIP != nil {
			enableNodePublicIP := *typedInput.Properties.EnableNodePublicIP
			agentPoolStatus.EnableNodePublicIP = &enableNodePublicIP
		}
	}

	// Set property ‘EnableUltraSSD’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableUltraSSD != nil {
			enableUltraSSD := *typedInput.Properties.EnableUltraSSD
			agentPoolStatus.EnableUltraSSD = &enableUltraSSD
		}
	}

	// Set property ‘GpuInstanceProfile’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GpuInstanceProfile != nil {
			gpuInstanceProfile := *typedInput.Properties.GpuInstanceProfile
			agentPoolStatus.GpuInstanceProfile = &gpuInstanceProfile
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		agentPoolStatus.Id = &id
	}

	// Set property ‘KubeletConfig’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KubeletConfig != nil {
			var kubeletConfig1 KubeletConfig_Status
			err := kubeletConfig1.PopulateFromARM(owner, *typedInput.Properties.KubeletConfig)
			if err != nil {
				return err
			}
			kubeletConfig := kubeletConfig1
			agentPoolStatus.KubeletConfig = &kubeletConfig
		}
	}

	// Set property ‘KubeletDiskType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KubeletDiskType != nil {
			kubeletDiskType := *typedInput.Properties.KubeletDiskType
			agentPoolStatus.KubeletDiskType = &kubeletDiskType
		}
	}

	// Set property ‘LinuxOSConfig’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinuxOSConfig != nil {
			var linuxOSConfig1 LinuxOSConfig_Status
			err := linuxOSConfig1.PopulateFromARM(owner, *typedInput.Properties.LinuxOSConfig)
			if err != nil {
				return err
			}
			linuxOSConfig := linuxOSConfig1
			agentPoolStatus.LinuxOSConfig = &linuxOSConfig
		}
	}

	// Set property ‘MaxCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxCount != nil {
			maxCount := *typedInput.Properties.MaxCount
			agentPoolStatus.MaxCount = &maxCount
		}
	}

	// Set property ‘MaxPods’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxPods != nil {
			maxPods := *typedInput.Properties.MaxPods
			agentPoolStatus.MaxPods = &maxPods
		}
	}

	// Set property ‘MinCount’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinCount != nil {
			minCount := *typedInput.Properties.MinCount
			agentPoolStatus.MinCount = &minCount
		}
	}

	// Set property ‘Mode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Mode != nil {
			mode := *typedInput.Properties.Mode
			agentPoolStatus.Mode = &mode
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		agentPoolStatus.Name = &name
	}

	// Set property ‘NodeImageVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NodeImageVersion != nil {
			nodeImageVersion := *typedInput.Properties.NodeImageVersion
			agentPoolStatus.NodeImageVersion = &nodeImageVersion
		}
	}

	// Set property ‘NodeLabels’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NodeLabels != nil {
			agentPoolStatus.NodeLabels = make(map[string]string)
			for key, value := range typedInput.Properties.NodeLabels {
				agentPoolStatus.NodeLabels[key] = value
			}
		}
	}

	// Set property ‘NodePublicIPPrefixID’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NodePublicIPPrefixID != nil {
			nodePublicIPPrefixID := *typedInput.Properties.NodePublicIPPrefixID
			agentPoolStatus.NodePublicIPPrefixID = &nodePublicIPPrefixID
		}
	}

	// Set property ‘NodeTaints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NodeTaints {
			agentPoolStatus.NodeTaints = append(agentPoolStatus.NodeTaints, item)
		}
	}

	// Set property ‘OrchestratorVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OrchestratorVersion != nil {
			orchestratorVersion := *typedInput.Properties.OrchestratorVersion
			agentPoolStatus.OrchestratorVersion = &orchestratorVersion
		}
	}

	// Set property ‘OsDiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsDiskSizeGB != nil {
			osDiskSizeGB := *typedInput.Properties.OsDiskSizeGB
			agentPoolStatus.OsDiskSizeGB = &osDiskSizeGB
		}
	}

	// Set property ‘OsDiskType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsDiskType != nil {
			osDiskType := *typedInput.Properties.OsDiskType
			agentPoolStatus.OsDiskType = &osDiskType
		}
	}

	// Set property ‘OsSKU’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsSKU != nil {
			osSKU := *typedInput.Properties.OsSKU
			agentPoolStatus.OsSKU = &osSKU
		}
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OsType != nil {
			osType := *typedInput.Properties.OsType
			agentPoolStatus.OsType = &osType
		}
	}

	// Set property ‘PodSubnetID’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PodSubnetID != nil {
			podSubnetID := *typedInput.Properties.PodSubnetID
			agentPoolStatus.PodSubnetID = &podSubnetID
		}
	}

	// Set property ‘PowerState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PowerState != nil {
			var powerState1 PowerState_Status
			err := powerState1.PopulateFromARM(owner, *typedInput.Properties.PowerState)
			if err != nil {
				return err
			}
			powerState := powerState1
			agentPoolStatus.PowerState = &powerState
		}
	}

	// Set property ‘PropertiesType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Type != nil {
			propertiesType := *typedInput.Properties.Type
			agentPoolStatus.PropertiesType = &propertiesType
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			agentPoolStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ProximityPlacementGroupID’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProximityPlacementGroupID != nil {
			proximityPlacementGroupID := *typedInput.Properties.ProximityPlacementGroupID
			agentPoolStatus.ProximityPlacementGroupID = &proximityPlacementGroupID
		}
	}

	// Set property ‘ScaleSetEvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ScaleSetEvictionPolicy != nil {
			scaleSetEvictionPolicy := *typedInput.Properties.ScaleSetEvictionPolicy
			agentPoolStatus.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
		}
	}

	// Set property ‘ScaleSetPriority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ScaleSetPriority != nil {
			scaleSetPriority := *typedInput.Properties.ScaleSetPriority
			agentPoolStatus.ScaleSetPriority = &scaleSetPriority
		}
	}

	// Set property ‘SpotMaxPrice’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SpotMaxPrice != nil {
			spotMaxPrice := *typedInput.Properties.SpotMaxPrice
			agentPoolStatus.SpotMaxPrice = &spotMaxPrice
		}
	}

	// Set property ‘Tags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tags != nil {
			agentPoolStatus.Tags = make(map[string]string)
			for key, value := range typedInput.Properties.Tags {
				agentPoolStatus.Tags[key] = value
			}
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		agentPoolStatus.Type = &typeVar
	}

	// Set property ‘UpgradeSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UpgradeSettings != nil {
			var upgradeSettings1 AgentPoolUpgradeSettings_Status
			err := upgradeSettings1.PopulateFromARM(owner, *typedInput.Properties.UpgradeSettings)
			if err != nil {
				return err
			}
			upgradeSettings := upgradeSettings1
			agentPoolStatus.UpgradeSettings = &upgradeSettings
		}
	}

	// Set property ‘VmSize’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VmSize != nil {
			vmSize := *typedInput.Properties.VmSize
			agentPoolStatus.VmSize = &vmSize
		}
	}

	// Set property ‘VnetSubnetID’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.VnetSubnetID != nil {
			vnetSubnetID := *typedInput.Properties.VnetSubnetID
			agentPoolStatus.VnetSubnetID = &vnetSubnetID
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromAgentPoolStatus populates our AgentPool_Status from the provided source AgentPool_Status
func (agentPoolStatus *AgentPool_Status) AssignPropertiesFromAgentPoolStatus(source *v1alpha1api20210501storage.AgentPool_Status) error {

	// AvailabilityZones
	agentPoolStatus.AvailabilityZones = genruntime.CloneSliceOfString(source.AvailabilityZones)

	// Conditions
	agentPoolStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Count
	agentPoolStatus.Count = genruntime.ClonePointerToInt(source.Count)

	// EnableAutoScaling
	if source.EnableAutoScaling != nil {
		enableAutoScaling := *source.EnableAutoScaling
		agentPoolStatus.EnableAutoScaling = &enableAutoScaling
	} else {
		agentPoolStatus.EnableAutoScaling = nil
	}

	// EnableEncryptionAtHost
	if source.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *source.EnableEncryptionAtHost
		agentPoolStatus.EnableEncryptionAtHost = &enableEncryptionAtHost
	} else {
		agentPoolStatus.EnableEncryptionAtHost = nil
	}

	// EnableFIPS
	if source.EnableFIPS != nil {
		enableFIPS := *source.EnableFIPS
		agentPoolStatus.EnableFIPS = &enableFIPS
	} else {
		agentPoolStatus.EnableFIPS = nil
	}

	// EnableNodePublicIP
	if source.EnableNodePublicIP != nil {
		enableNodePublicIP := *source.EnableNodePublicIP
		agentPoolStatus.EnableNodePublicIP = &enableNodePublicIP
	} else {
		agentPoolStatus.EnableNodePublicIP = nil
	}

	// EnableUltraSSD
	if source.EnableUltraSSD != nil {
		enableUltraSSD := *source.EnableUltraSSD
		agentPoolStatus.EnableUltraSSD = &enableUltraSSD
	} else {
		agentPoolStatus.EnableUltraSSD = nil
	}

	// GpuInstanceProfile
	if source.GpuInstanceProfile != nil {
		gpuInstanceProfile := GPUInstanceProfile_Status(*source.GpuInstanceProfile)
		agentPoolStatus.GpuInstanceProfile = &gpuInstanceProfile
	} else {
		agentPoolStatus.GpuInstanceProfile = nil
	}

	// Id
	agentPoolStatus.Id = genruntime.ClonePointerToString(source.Id)

	// KubeletConfig
	if source.KubeletConfig != nil {
		var kubeletConfig KubeletConfig_Status
		err := kubeletConfig.AssignPropertiesFromKubeletConfigStatus(source.KubeletConfig)
		if err != nil {
			return errors.Wrap(err, "populating KubeletConfig from KubeletConfig, calling AssignPropertiesFromKubeletConfigStatus()")
		}
		agentPoolStatus.KubeletConfig = &kubeletConfig
	} else {
		agentPoolStatus.KubeletConfig = nil
	}

	// KubeletDiskType
	if source.KubeletDiskType != nil {
		kubeletDiskType := KubeletDiskType_Status(*source.KubeletDiskType)
		agentPoolStatus.KubeletDiskType = &kubeletDiskType
	} else {
		agentPoolStatus.KubeletDiskType = nil
	}

	// LinuxOSConfig
	if source.LinuxOSConfig != nil {
		var linuxOSConfig LinuxOSConfig_Status
		err := linuxOSConfig.AssignPropertiesFromLinuxOSConfigStatus(source.LinuxOSConfig)
		if err != nil {
			return errors.Wrap(err, "populating LinuxOSConfig from LinuxOSConfig, calling AssignPropertiesFromLinuxOSConfigStatus()")
		}
		agentPoolStatus.LinuxOSConfig = &linuxOSConfig
	} else {
		agentPoolStatus.LinuxOSConfig = nil
	}

	// MaxCount
	agentPoolStatus.MaxCount = genruntime.ClonePointerToInt(source.MaxCount)

	// MaxPods
	agentPoolStatus.MaxPods = genruntime.ClonePointerToInt(source.MaxPods)

	// MinCount
	agentPoolStatus.MinCount = genruntime.ClonePointerToInt(source.MinCount)

	// Mode
	if source.Mode != nil {
		mode := AgentPoolMode_Status(*source.Mode)
		agentPoolStatus.Mode = &mode
	} else {
		agentPoolStatus.Mode = nil
	}

	// Name
	agentPoolStatus.Name = genruntime.ClonePointerToString(source.Name)

	// NodeImageVersion
	agentPoolStatus.NodeImageVersion = genruntime.ClonePointerToString(source.NodeImageVersion)

	// NodeLabels
	agentPoolStatus.NodeLabels = genruntime.CloneMapOfStringToString(source.NodeLabels)

	// NodePublicIPPrefixID
	agentPoolStatus.NodePublicIPPrefixID = genruntime.ClonePointerToString(source.NodePublicIPPrefixID)

	// NodeTaints
	agentPoolStatus.NodeTaints = genruntime.CloneSliceOfString(source.NodeTaints)

	// OrchestratorVersion
	agentPoolStatus.OrchestratorVersion = genruntime.ClonePointerToString(source.OrchestratorVersion)

	// OsDiskSizeGB
	agentPoolStatus.OsDiskSizeGB = genruntime.ClonePointerToInt(source.OsDiskSizeGB)

	// OsDiskType
	if source.OsDiskType != nil {
		osDiskType := OSDiskType_Status(*source.OsDiskType)
		agentPoolStatus.OsDiskType = &osDiskType
	} else {
		agentPoolStatus.OsDiskType = nil
	}

	// OsSKU
	if source.OsSKU != nil {
		osSKU := OSSKU_Status(*source.OsSKU)
		agentPoolStatus.OsSKU = &osSKU
	} else {
		agentPoolStatus.OsSKU = nil
	}

	// OsType
	if source.OsType != nil {
		osType := OSType_Status(*source.OsType)
		agentPoolStatus.OsType = &osType
	} else {
		agentPoolStatus.OsType = nil
	}

	// PodSubnetID
	agentPoolStatus.PodSubnetID = genruntime.ClonePointerToString(source.PodSubnetID)

	// PowerState
	if source.PowerState != nil {
		var powerState PowerState_Status
		err := powerState.AssignPropertiesFromPowerStateStatus(source.PowerState)
		if err != nil {
			return errors.Wrap(err, "populating PowerState from PowerState, calling AssignPropertiesFromPowerStateStatus()")
		}
		agentPoolStatus.PowerState = &powerState
	} else {
		agentPoolStatus.PowerState = nil
	}

	// PropertiesType
	if source.PropertiesType != nil {
		propertiesType := AgentPoolType_Status(*source.PropertiesType)
		agentPoolStatus.PropertiesType = &propertiesType
	} else {
		agentPoolStatus.PropertiesType = nil
	}

	// ProvisioningState
	agentPoolStatus.ProvisioningState = genruntime.ClonePointerToString(source.ProvisioningState)

	// ProximityPlacementGroupID
	agentPoolStatus.ProximityPlacementGroupID = genruntime.ClonePointerToString(source.ProximityPlacementGroupID)

	// ScaleSetEvictionPolicy
	if source.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := ScaleSetEvictionPolicy_Status(*source.ScaleSetEvictionPolicy)
		agentPoolStatus.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	} else {
		agentPoolStatus.ScaleSetEvictionPolicy = nil
	}

	// ScaleSetPriority
	if source.ScaleSetPriority != nil {
		scaleSetPriority := ScaleSetPriority_Status(*source.ScaleSetPriority)
		agentPoolStatus.ScaleSetPriority = &scaleSetPriority
	} else {
		agentPoolStatus.ScaleSetPriority = nil
	}

	// SpotMaxPrice
	if source.SpotMaxPrice != nil {
		spotMaxPrice := *source.SpotMaxPrice
		agentPoolStatus.SpotMaxPrice = &spotMaxPrice
	} else {
		agentPoolStatus.SpotMaxPrice = nil
	}

	// Tags
	agentPoolStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	agentPoolStatus.Type = genruntime.ClonePointerToString(source.Type)

	// UpgradeSettings
	if source.UpgradeSettings != nil {
		var upgradeSetting AgentPoolUpgradeSettings_Status
		err := upgradeSetting.AssignPropertiesFromAgentPoolUpgradeSettingsStatus(source.UpgradeSettings)
		if err != nil {
			return errors.Wrap(err, "populating UpgradeSettings from UpgradeSettings, calling AssignPropertiesFromAgentPoolUpgradeSettingsStatus()")
		}
		agentPoolStatus.UpgradeSettings = &upgradeSetting
	} else {
		agentPoolStatus.UpgradeSettings = nil
	}

	// VmSize
	agentPoolStatus.VmSize = genruntime.ClonePointerToString(source.VmSize)

	// VnetSubnetID
	agentPoolStatus.VnetSubnetID = genruntime.ClonePointerToString(source.VnetSubnetID)

	// No error
	return nil
}

// AssignPropertiesToAgentPoolStatus populates the provided destination AgentPool_Status from our AgentPool_Status
func (agentPoolStatus *AgentPool_Status) AssignPropertiesToAgentPoolStatus(destination *v1alpha1api20210501storage.AgentPool_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AvailabilityZones
	destination.AvailabilityZones = genruntime.CloneSliceOfString(agentPoolStatus.AvailabilityZones)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(agentPoolStatus.Conditions)

	// Count
	destination.Count = genruntime.ClonePointerToInt(agentPoolStatus.Count)

	// EnableAutoScaling
	if agentPoolStatus.EnableAutoScaling != nil {
		enableAutoScaling := *agentPoolStatus.EnableAutoScaling
		destination.EnableAutoScaling = &enableAutoScaling
	} else {
		destination.EnableAutoScaling = nil
	}

	// EnableEncryptionAtHost
	if agentPoolStatus.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *agentPoolStatus.EnableEncryptionAtHost
		destination.EnableEncryptionAtHost = &enableEncryptionAtHost
	} else {
		destination.EnableEncryptionAtHost = nil
	}

	// EnableFIPS
	if agentPoolStatus.EnableFIPS != nil {
		enableFIPS := *agentPoolStatus.EnableFIPS
		destination.EnableFIPS = &enableFIPS
	} else {
		destination.EnableFIPS = nil
	}

	// EnableNodePublicIP
	if agentPoolStatus.EnableNodePublicIP != nil {
		enableNodePublicIP := *agentPoolStatus.EnableNodePublicIP
		destination.EnableNodePublicIP = &enableNodePublicIP
	} else {
		destination.EnableNodePublicIP = nil
	}

	// EnableUltraSSD
	if agentPoolStatus.EnableUltraSSD != nil {
		enableUltraSSD := *agentPoolStatus.EnableUltraSSD
		destination.EnableUltraSSD = &enableUltraSSD
	} else {
		destination.EnableUltraSSD = nil
	}

	// GpuInstanceProfile
	if agentPoolStatus.GpuInstanceProfile != nil {
		gpuInstanceProfile := string(*agentPoolStatus.GpuInstanceProfile)
		destination.GpuInstanceProfile = &gpuInstanceProfile
	} else {
		destination.GpuInstanceProfile = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(agentPoolStatus.Id)

	// KubeletConfig
	if agentPoolStatus.KubeletConfig != nil {
		var kubeletConfig v1alpha1api20210501storage.KubeletConfig_Status
		err := (*agentPoolStatus.KubeletConfig).AssignPropertiesToKubeletConfigStatus(&kubeletConfig)
		if err != nil {
			return errors.Wrap(err, "populating KubeletConfig from KubeletConfig, calling AssignPropertiesToKubeletConfigStatus()")
		}
		destination.KubeletConfig = &kubeletConfig
	} else {
		destination.KubeletConfig = nil
	}

	// KubeletDiskType
	if agentPoolStatus.KubeletDiskType != nil {
		kubeletDiskType := string(*agentPoolStatus.KubeletDiskType)
		destination.KubeletDiskType = &kubeletDiskType
	} else {
		destination.KubeletDiskType = nil
	}

	// LinuxOSConfig
	if agentPoolStatus.LinuxOSConfig != nil {
		var linuxOSConfig v1alpha1api20210501storage.LinuxOSConfig_Status
		err := (*agentPoolStatus.LinuxOSConfig).AssignPropertiesToLinuxOSConfigStatus(&linuxOSConfig)
		if err != nil {
			return errors.Wrap(err, "populating LinuxOSConfig from LinuxOSConfig, calling AssignPropertiesToLinuxOSConfigStatus()")
		}
		destination.LinuxOSConfig = &linuxOSConfig
	} else {
		destination.LinuxOSConfig = nil
	}

	// MaxCount
	destination.MaxCount = genruntime.ClonePointerToInt(agentPoolStatus.MaxCount)

	// MaxPods
	destination.MaxPods = genruntime.ClonePointerToInt(agentPoolStatus.MaxPods)

	// MinCount
	destination.MinCount = genruntime.ClonePointerToInt(agentPoolStatus.MinCount)

	// Mode
	if agentPoolStatus.Mode != nil {
		mode := string(*agentPoolStatus.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(agentPoolStatus.Name)

	// NodeImageVersion
	destination.NodeImageVersion = genruntime.ClonePointerToString(agentPoolStatus.NodeImageVersion)

	// NodeLabels
	destination.NodeLabels = genruntime.CloneMapOfStringToString(agentPoolStatus.NodeLabels)

	// NodePublicIPPrefixID
	destination.NodePublicIPPrefixID = genruntime.ClonePointerToString(agentPoolStatus.NodePublicIPPrefixID)

	// NodeTaints
	destination.NodeTaints = genruntime.CloneSliceOfString(agentPoolStatus.NodeTaints)

	// OrchestratorVersion
	destination.OrchestratorVersion = genruntime.ClonePointerToString(agentPoolStatus.OrchestratorVersion)

	// OsDiskSizeGB
	destination.OsDiskSizeGB = genruntime.ClonePointerToInt(agentPoolStatus.OsDiskSizeGB)

	// OsDiskType
	if agentPoolStatus.OsDiskType != nil {
		osDiskType := string(*agentPoolStatus.OsDiskType)
		destination.OsDiskType = &osDiskType
	} else {
		destination.OsDiskType = nil
	}

	// OsSKU
	if agentPoolStatus.OsSKU != nil {
		osSKU := string(*agentPoolStatus.OsSKU)
		destination.OsSKU = &osSKU
	} else {
		destination.OsSKU = nil
	}

	// OsType
	if agentPoolStatus.OsType != nil {
		osType := string(*agentPoolStatus.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// PodSubnetID
	destination.PodSubnetID = genruntime.ClonePointerToString(agentPoolStatus.PodSubnetID)

	// PowerState
	if agentPoolStatus.PowerState != nil {
		var powerState v1alpha1api20210501storage.PowerState_Status
		err := (*agentPoolStatus.PowerState).AssignPropertiesToPowerStateStatus(&powerState)
		if err != nil {
			return errors.Wrap(err, "populating PowerState from PowerState, calling AssignPropertiesToPowerStateStatus()")
		}
		destination.PowerState = &powerState
	} else {
		destination.PowerState = nil
	}

	// PropertiesType
	if agentPoolStatus.PropertiesType != nil {
		propertiesType := string(*agentPoolStatus.PropertiesType)
		destination.PropertiesType = &propertiesType
	} else {
		destination.PropertiesType = nil
	}

	// ProvisioningState
	destination.ProvisioningState = genruntime.ClonePointerToString(agentPoolStatus.ProvisioningState)

	// ProximityPlacementGroupID
	destination.ProximityPlacementGroupID = genruntime.ClonePointerToString(agentPoolStatus.ProximityPlacementGroupID)

	// ScaleSetEvictionPolicy
	if agentPoolStatus.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := string(*agentPoolStatus.ScaleSetEvictionPolicy)
		destination.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	} else {
		destination.ScaleSetEvictionPolicy = nil
	}

	// ScaleSetPriority
	if agentPoolStatus.ScaleSetPriority != nil {
		scaleSetPriority := string(*agentPoolStatus.ScaleSetPriority)
		destination.ScaleSetPriority = &scaleSetPriority
	} else {
		destination.ScaleSetPriority = nil
	}

	// SpotMaxPrice
	if agentPoolStatus.SpotMaxPrice != nil {
		spotMaxPrice := *agentPoolStatus.SpotMaxPrice
		destination.SpotMaxPrice = &spotMaxPrice
	} else {
		destination.SpotMaxPrice = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(agentPoolStatus.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(agentPoolStatus.Type)

	// UpgradeSettings
	if agentPoolStatus.UpgradeSettings != nil {
		var upgradeSetting v1alpha1api20210501storage.AgentPoolUpgradeSettings_Status
		err := (*agentPoolStatus.UpgradeSettings).AssignPropertiesToAgentPoolUpgradeSettingsStatus(&upgradeSetting)
		if err != nil {
			return errors.Wrap(err, "populating UpgradeSettings from UpgradeSettings, calling AssignPropertiesToAgentPoolUpgradeSettingsStatus()")
		}
		destination.UpgradeSettings = &upgradeSetting
	} else {
		destination.UpgradeSettings = nil
	}

	// VmSize
	destination.VmSize = genruntime.ClonePointerToString(agentPoolStatus.VmSize)

	// VnetSubnetID
	destination.VnetSubnetID = genruntime.ClonePointerToString(agentPoolStatus.VnetSubnetID)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2021-05-01"}
type ManagedClustersAgentPoolsSpecAPIVersion string

const ManagedClustersAgentPoolsSpecAPIVersion20210501 = ManagedClustersAgentPoolsSpecAPIVersion("2021-05-01")

type ManagedClustersAgentPools_Spec struct {
	//AvailabilityZones: The list of Availability zones to use for nodes. This can
	//only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Count: Number of agents (VMs) to host docker containers. Allowed values must be
	//in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to
	//1000 (inclusive) for system pools. The default value is 1.
	Count *int `json:"count,omitempty"`

	//EnableAutoScaling: Whether to enable auto-scaler
	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty"`

	//EnableEncryptionAtHost: This is only supported on certain VM sizes and in
	//certain Azure regions. For more information, see:
	//https://docs.microsoft.com/azure/aks/enable-host-encryption
	EnableEncryptionAtHost *bool `json:"enableEncryptionAtHost,omitempty"`

	//EnableFIPS: See [Add a FIPS-enabled node
	//pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview)
	//for more details.
	EnableFIPS *bool `json:"enableFIPS,omitempty"`

	//EnableNodePublicIP: Some scenarios may require nodes in a node pool to receive
	//their own dedicated public IP addresses. A common scenario is for gaming
	//workloads, where a console needs to make a direct connection to a cloud virtual
	//machine to minimize hops. For more information see [assigning a public IP per
	//node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools).
	//The default is false.
	EnableNodePublicIP *bool `json:"enableNodePublicIP,omitempty"`

	//EnableUltraSSD: Whether to enable UltraSSD
	EnableUltraSSD *bool `json:"enableUltraSSD,omitempty"`

	//GpuInstanceProfile: GPUInstanceProfile to be used to specify GPU MIG instance
	//profile for supported GPU VM SKU.
	GpuInstanceProfile *ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile `json:"gpuInstanceProfile,omitempty"`

	//KubeletConfig: See [AKS custom node
	//configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration)
	//for more details.
	KubeletConfig   *KubeletConfig                                           `json:"kubeletConfig,omitempty"`
	KubeletDiskType *ManagedClusterAgentPoolProfilePropertiesKubeletDiskType `json:"kubeletDiskType,omitempty"`

	//LinuxOSConfig: See [AKS custom node
	//configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration)
	//for more details.
	LinuxOSConfig *LinuxOSConfig `json:"linuxOSConfig,omitempty"`

	//Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	//MaxCount: The maximum number of nodes for auto-scaling
	MaxCount *int `json:"maxCount,omitempty"`

	//MaxPods: The maximum number of pods that can run on a node.
	MaxPods *int `json:"maxPods,omitempty"`

	//MinCount: The minimum number of nodes for auto-scaling
	MinCount *int                                          `json:"minCount,omitempty"`
	Mode     *ManagedClusterAgentPoolProfilePropertiesMode `json:"mode,omitempty"`

	//NodeLabels: The node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	//NodePublicIPPrefixIDReference: This is of the form:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
	NodePublicIPPrefixIDReference *genruntime.ResourceReference `armReference:"NodePublicIPPrefixID" json:"nodePublicIPPrefixIDReference,omitempty"`

	//NodeTaints: The taints added to new nodes during node pool create and scale. For
	//example, key=value:NoSchedule.
	NodeTaints []string `json:"nodeTaints,omitempty"`

	//OrchestratorVersion: As a best practice, you should upgrade all node pools in an
	//AKS cluster to the same Kubernetes version. The node pool version must have the
	//same major version as the control plane. The node pool minor version must be
	//within two minor versions of the control plane version. The node pool version
	//cannot be greater than the control plane version. For more information see
	//[upgrading a node
	//pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
	OrchestratorVersion *string `json:"orchestratorVersion,omitempty"`

	// +kubebuilder:validation:Maximum=2048
	// +kubebuilder:validation:Minimum=0
	//OsDiskSizeGB: OS Disk Size in GB to be used to specify the disk size for every
	//machine in the master/agent pool. If you specify 0, it will apply the default
	//osDisk size according to the vmSize specified.
	OsDiskSizeGB *int                                                `json:"osDiskSizeGB,omitempty"`
	OsDiskType   *ManagedClusterAgentPoolProfilePropertiesOsDiskType `json:"osDiskType,omitempty"`
	OsSKU        *ManagedClusterAgentPoolProfilePropertiesOsSKU      `json:"osSKU,omitempty"`
	OsType       *ManagedClusterAgentPoolProfilePropertiesOsType     `json:"osType,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.containerservice.azure.com" json:"owner" kind:"ManagedCluster"`

	//PodSubnetIDReference: If omitted, pod IPs are statically assigned on the node
	//subnet (see vnetSubnetID for more details). This is of the form:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	PodSubnetIDReference *genruntime.ResourceReference `armReference:"PodSubnetID" json:"podSubnetIDReference,omitempty"`

	//ProximityPlacementGroupID: The ID for Proximity Placement Group.
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupID,omitempty"`

	//ScaleSetEvictionPolicy: This cannot be specified unless the scaleSetPriority is
	//'Spot'. If not specified, the default is 'Delete'.
	ScaleSetEvictionPolicy *ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy `json:"scaleSetEvictionPolicy,omitempty"`

	//ScaleSetPriority: The Virtual Machine Scale Set priority. If not specified, the
	//default is 'Regular'.
	ScaleSetPriority *ManagedClusterAgentPoolProfilePropertiesScaleSetPriority `json:"scaleSetPriority,omitempty"`

	//SpotMaxPrice: Possible values are any decimal value greater than zero or -1
	//which indicates the willingness to pay any on-demand price. For more details on
	//spot pricing, see [spot VMs
	//pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
	SpotMaxPrice *float64 `json:"spotMaxPrice,omitempty"`

	//Tags: The tags to be persisted on the agent pool virtual machine scale set.
	Tags map[string]string                             `json:"tags,omitempty"`
	Type *ManagedClusterAgentPoolProfilePropertiesType `json:"type,omitempty"`

	//UpgradeSettings: Settings for upgrading an agentpool
	UpgradeSettings *AgentPoolUpgradeSettings `json:"upgradeSettings,omitempty"`

	//VmSize: VM size availability varies by region. If a node contains insufficient
	//compute resources (memory, cpu, etc) pods might fail to run correctly. For more
	//details on restricted VM sizes, see:
	//https://docs.microsoft.com/azure/aks/quotas-skus-regions
	VmSize *string `json:"vmSize,omitempty"`

	//VnetSubnetIDReference: If this is not specified, a VNET and subnet will be
	//generated and used. If no podSubnetID is specified, this applies to nodes and
	//pods, otherwise it applies to just nodes. This is of the form:
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	VnetSubnetIDReference *genruntime.ResourceReference `armReference:"VnetSubnetID" json:"vnetSubnetIDReference,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedClustersAgentPools_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (managedClustersAgentPoolsSpec *ManagedClustersAgentPools_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if managedClustersAgentPoolsSpec == nil {
		return nil, nil
	}
	var result ManagedClustersAgentPools_SpecARM

	// Set property ‘Location’:
	if managedClustersAgentPoolsSpec.Location != nil {
		location := *managedClustersAgentPoolsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	for _, item := range managedClustersAgentPoolsSpec.AvailabilityZones {
		result.Properties.AvailabilityZones = append(result.Properties.AvailabilityZones, item)
	}
	if managedClustersAgentPoolsSpec.Count != nil {
		count := *managedClustersAgentPoolsSpec.Count
		result.Properties.Count = &count
	}
	if managedClustersAgentPoolsSpec.EnableAutoScaling != nil {
		enableAutoScaling := *managedClustersAgentPoolsSpec.EnableAutoScaling
		result.Properties.EnableAutoScaling = &enableAutoScaling
	}
	if managedClustersAgentPoolsSpec.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *managedClustersAgentPoolsSpec.EnableEncryptionAtHost
		result.Properties.EnableEncryptionAtHost = &enableEncryptionAtHost
	}
	if managedClustersAgentPoolsSpec.EnableFIPS != nil {
		enableFIPS := *managedClustersAgentPoolsSpec.EnableFIPS
		result.Properties.EnableFIPS = &enableFIPS
	}
	if managedClustersAgentPoolsSpec.EnableNodePublicIP != nil {
		enableNodePublicIP := *managedClustersAgentPoolsSpec.EnableNodePublicIP
		result.Properties.EnableNodePublicIP = &enableNodePublicIP
	}
	if managedClustersAgentPoolsSpec.EnableUltraSSD != nil {
		enableUltraSSD := *managedClustersAgentPoolsSpec.EnableUltraSSD
		result.Properties.EnableUltraSSD = &enableUltraSSD
	}
	if managedClustersAgentPoolsSpec.GpuInstanceProfile != nil {
		gpuInstanceProfile := *managedClustersAgentPoolsSpec.GpuInstanceProfile
		result.Properties.GpuInstanceProfile = &gpuInstanceProfile
	}
	if managedClustersAgentPoolsSpec.KubeletConfig != nil {
		kubeletConfigARM, err := (*managedClustersAgentPoolsSpec.KubeletConfig).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		kubeletConfig := kubeletConfigARM.(KubeletConfigARM)
		result.Properties.KubeletConfig = &kubeletConfig
	}
	if managedClustersAgentPoolsSpec.KubeletDiskType != nil {
		kubeletDiskType := *managedClustersAgentPoolsSpec.KubeletDiskType
		result.Properties.KubeletDiskType = &kubeletDiskType
	}
	if managedClustersAgentPoolsSpec.LinuxOSConfig != nil {
		linuxOSConfigARM, err := (*managedClustersAgentPoolsSpec.LinuxOSConfig).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		linuxOSConfig := linuxOSConfigARM.(LinuxOSConfigARM)
		result.Properties.LinuxOSConfig = &linuxOSConfig
	}
	if managedClustersAgentPoolsSpec.MaxCount != nil {
		maxCount := *managedClustersAgentPoolsSpec.MaxCount
		result.Properties.MaxCount = &maxCount
	}
	if managedClustersAgentPoolsSpec.MaxPods != nil {
		maxPods := *managedClustersAgentPoolsSpec.MaxPods
		result.Properties.MaxPods = &maxPods
	}
	if managedClustersAgentPoolsSpec.MinCount != nil {
		minCount := *managedClustersAgentPoolsSpec.MinCount
		result.Properties.MinCount = &minCount
	}
	if managedClustersAgentPoolsSpec.Mode != nil {
		mode := *managedClustersAgentPoolsSpec.Mode
		result.Properties.Mode = &mode
	}
	if managedClustersAgentPoolsSpec.NodeLabels != nil {
		result.Properties.NodeLabels = make(map[string]string)
		for key, value := range managedClustersAgentPoolsSpec.NodeLabels {
			result.Properties.NodeLabels[key] = value
		}
	}
	if managedClustersAgentPoolsSpec.NodePublicIPPrefixIDReference != nil {
		nodePublicIPPrefixIDARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*managedClustersAgentPoolsSpec.NodePublicIPPrefixIDReference)
		if err != nil {
			return nil, err
		}
		nodePublicIPPrefixID := nodePublicIPPrefixIDARMID
		result.Properties.NodePublicIPPrefixID = &nodePublicIPPrefixID
	}
	for _, item := range managedClustersAgentPoolsSpec.NodeTaints {
		result.Properties.NodeTaints = append(result.Properties.NodeTaints, item)
	}
	if managedClustersAgentPoolsSpec.OrchestratorVersion != nil {
		orchestratorVersion := *managedClustersAgentPoolsSpec.OrchestratorVersion
		result.Properties.OrchestratorVersion = &orchestratorVersion
	}
	if managedClustersAgentPoolsSpec.OsDiskSizeGB != nil {
		osDiskSizeGB := *managedClustersAgentPoolsSpec.OsDiskSizeGB
		result.Properties.OsDiskSizeGB = &osDiskSizeGB
	}
	if managedClustersAgentPoolsSpec.OsDiskType != nil {
		osDiskType := *managedClustersAgentPoolsSpec.OsDiskType
		result.Properties.OsDiskType = &osDiskType
	}
	if managedClustersAgentPoolsSpec.OsSKU != nil {
		osSKU := *managedClustersAgentPoolsSpec.OsSKU
		result.Properties.OsSKU = &osSKU
	}
	if managedClustersAgentPoolsSpec.OsType != nil {
		osType := *managedClustersAgentPoolsSpec.OsType
		result.Properties.OsType = &osType
	}
	if managedClustersAgentPoolsSpec.PodSubnetIDReference != nil {
		podSubnetIDARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*managedClustersAgentPoolsSpec.PodSubnetIDReference)
		if err != nil {
			return nil, err
		}
		podSubnetID := podSubnetIDARMID
		result.Properties.PodSubnetID = &podSubnetID
	}
	if managedClustersAgentPoolsSpec.ProximityPlacementGroupID != nil {
		proximityPlacementGroupID := *managedClustersAgentPoolsSpec.ProximityPlacementGroupID
		result.Properties.ProximityPlacementGroupID = &proximityPlacementGroupID
	}
	if managedClustersAgentPoolsSpec.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := *managedClustersAgentPoolsSpec.ScaleSetEvictionPolicy
		result.Properties.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	}
	if managedClustersAgentPoolsSpec.ScaleSetPriority != nil {
		scaleSetPriority := *managedClustersAgentPoolsSpec.ScaleSetPriority
		result.Properties.ScaleSetPriority = &scaleSetPriority
	}
	if managedClustersAgentPoolsSpec.SpotMaxPrice != nil {
		spotMaxPrice := *managedClustersAgentPoolsSpec.SpotMaxPrice
		result.Properties.SpotMaxPrice = &spotMaxPrice
	}
	if managedClustersAgentPoolsSpec.Tags != nil {
		result.Properties.Tags = make(map[string]string)
		for key, value := range managedClustersAgentPoolsSpec.Tags {
			result.Properties.Tags[key] = value
		}
	}
	if managedClustersAgentPoolsSpec.Type != nil {
		typeVar := *managedClustersAgentPoolsSpec.Type
		result.Properties.Type = &typeVar
	}
	if managedClustersAgentPoolsSpec.UpgradeSettings != nil {
		upgradeSettingsARM, err := (*managedClustersAgentPoolsSpec.UpgradeSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		upgradeSettings := upgradeSettingsARM.(AgentPoolUpgradeSettingsARM)
		result.Properties.UpgradeSettings = &upgradeSettings
	}
	if managedClustersAgentPoolsSpec.VmSize != nil {
		vmSize := *managedClustersAgentPoolsSpec.VmSize
		result.Properties.VmSize = &vmSize
	}
	if managedClustersAgentPoolsSpec.VnetSubnetIDReference != nil {
		vnetSubnetIDARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*managedClustersAgentPoolsSpec.VnetSubnetIDReference)
		if err != nil {
			return nil, err
		}
		vnetSubnetID := vnetSubnetIDARMID
		result.Properties.VnetSubnetID = &vnetSubnetID
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (managedClustersAgentPoolsSpec *ManagedClustersAgentPools_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedClustersAgentPools_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (managedClustersAgentPoolsSpec *ManagedClustersAgentPools_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedClustersAgentPools_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedClustersAgentPools_SpecARM, got %T", armInput)
	}

	// Set property ‘AvailabilityZones’:
	// copying flattened property:
	for _, item := range typedInput.Properties.AvailabilityZones {
		managedClustersAgentPoolsSpec.AvailabilityZones = append(managedClustersAgentPoolsSpec.AvailabilityZones, item)
	}

	// Set property ‘AzureName’:
	managedClustersAgentPoolsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Count’:
	// copying flattened property:
	if typedInput.Properties.Count != nil {
		count := *typedInput.Properties.Count
		managedClustersAgentPoolsSpec.Count = &count
	}

	// Set property ‘EnableAutoScaling’:
	// copying flattened property:
	if typedInput.Properties.EnableAutoScaling != nil {
		enableAutoScaling := *typedInput.Properties.EnableAutoScaling
		managedClustersAgentPoolsSpec.EnableAutoScaling = &enableAutoScaling
	}

	// Set property ‘EnableEncryptionAtHost’:
	// copying flattened property:
	if typedInput.Properties.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *typedInput.Properties.EnableEncryptionAtHost
		managedClustersAgentPoolsSpec.EnableEncryptionAtHost = &enableEncryptionAtHost
	}

	// Set property ‘EnableFIPS’:
	// copying flattened property:
	if typedInput.Properties.EnableFIPS != nil {
		enableFIPS := *typedInput.Properties.EnableFIPS
		managedClustersAgentPoolsSpec.EnableFIPS = &enableFIPS
	}

	// Set property ‘EnableNodePublicIP’:
	// copying flattened property:
	if typedInput.Properties.EnableNodePublicIP != nil {
		enableNodePublicIP := *typedInput.Properties.EnableNodePublicIP
		managedClustersAgentPoolsSpec.EnableNodePublicIP = &enableNodePublicIP
	}

	// Set property ‘EnableUltraSSD’:
	// copying flattened property:
	if typedInput.Properties.EnableUltraSSD != nil {
		enableUltraSSD := *typedInput.Properties.EnableUltraSSD
		managedClustersAgentPoolsSpec.EnableUltraSSD = &enableUltraSSD
	}

	// Set property ‘GpuInstanceProfile’:
	// copying flattened property:
	if typedInput.Properties.GpuInstanceProfile != nil {
		gpuInstanceProfile := *typedInput.Properties.GpuInstanceProfile
		managedClustersAgentPoolsSpec.GpuInstanceProfile = &gpuInstanceProfile
	}

	// Set property ‘KubeletConfig’:
	// copying flattened property:
	if typedInput.Properties.KubeletConfig != nil {
		var kubeletConfig1 KubeletConfig
		err := kubeletConfig1.PopulateFromARM(owner, *typedInput.Properties.KubeletConfig)
		if err != nil {
			return err
		}
		kubeletConfig := kubeletConfig1
		managedClustersAgentPoolsSpec.KubeletConfig = &kubeletConfig
	}

	// Set property ‘KubeletDiskType’:
	// copying flattened property:
	if typedInput.Properties.KubeletDiskType != nil {
		kubeletDiskType := *typedInput.Properties.KubeletDiskType
		managedClustersAgentPoolsSpec.KubeletDiskType = &kubeletDiskType
	}

	// Set property ‘LinuxOSConfig’:
	// copying flattened property:
	if typedInput.Properties.LinuxOSConfig != nil {
		var linuxOSConfig1 LinuxOSConfig
		err := linuxOSConfig1.PopulateFromARM(owner, *typedInput.Properties.LinuxOSConfig)
		if err != nil {
			return err
		}
		linuxOSConfig := linuxOSConfig1
		managedClustersAgentPoolsSpec.LinuxOSConfig = &linuxOSConfig
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		managedClustersAgentPoolsSpec.Location = &location
	}

	// Set property ‘MaxCount’:
	// copying flattened property:
	if typedInput.Properties.MaxCount != nil {
		maxCount := *typedInput.Properties.MaxCount
		managedClustersAgentPoolsSpec.MaxCount = &maxCount
	}

	// Set property ‘MaxPods’:
	// copying flattened property:
	if typedInput.Properties.MaxPods != nil {
		maxPods := *typedInput.Properties.MaxPods
		managedClustersAgentPoolsSpec.MaxPods = &maxPods
	}

	// Set property ‘MinCount’:
	// copying flattened property:
	if typedInput.Properties.MinCount != nil {
		minCount := *typedInput.Properties.MinCount
		managedClustersAgentPoolsSpec.MinCount = &minCount
	}

	// Set property ‘Mode’:
	// copying flattened property:
	if typedInput.Properties.Mode != nil {
		mode := *typedInput.Properties.Mode
		managedClustersAgentPoolsSpec.Mode = &mode
	}

	// Set property ‘NodeLabels’:
	// copying flattened property:
	if typedInput.Properties.NodeLabels != nil {
		managedClustersAgentPoolsSpec.NodeLabels = make(map[string]string)
		for key, value := range typedInput.Properties.NodeLabels {
			managedClustersAgentPoolsSpec.NodeLabels[key] = value
		}
	}

	// no assignment for property ‘NodePublicIPPrefixIDReference’

	// Set property ‘NodeTaints’:
	// copying flattened property:
	for _, item := range typedInput.Properties.NodeTaints {
		managedClustersAgentPoolsSpec.NodeTaints = append(managedClustersAgentPoolsSpec.NodeTaints, item)
	}

	// Set property ‘OrchestratorVersion’:
	// copying flattened property:
	if typedInput.Properties.OrchestratorVersion != nil {
		orchestratorVersion := *typedInput.Properties.OrchestratorVersion
		managedClustersAgentPoolsSpec.OrchestratorVersion = &orchestratorVersion
	}

	// Set property ‘OsDiskSizeGB’:
	// copying flattened property:
	if typedInput.Properties.OsDiskSizeGB != nil {
		osDiskSizeGB := *typedInput.Properties.OsDiskSizeGB
		managedClustersAgentPoolsSpec.OsDiskSizeGB = &osDiskSizeGB
	}

	// Set property ‘OsDiskType’:
	// copying flattened property:
	if typedInput.Properties.OsDiskType != nil {
		osDiskType := *typedInput.Properties.OsDiskType
		managedClustersAgentPoolsSpec.OsDiskType = &osDiskType
	}

	// Set property ‘OsSKU’:
	// copying flattened property:
	if typedInput.Properties.OsSKU != nil {
		osSKU := *typedInput.Properties.OsSKU
		managedClustersAgentPoolsSpec.OsSKU = &osSKU
	}

	// Set property ‘OsType’:
	// copying flattened property:
	if typedInput.Properties.OsType != nil {
		osType := *typedInput.Properties.OsType
		managedClustersAgentPoolsSpec.OsType = &osType
	}

	// Set property ‘Owner’:
	managedClustersAgentPoolsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// no assignment for property ‘PodSubnetIDReference’

	// Set property ‘ProximityPlacementGroupID’:
	// copying flattened property:
	if typedInput.Properties.ProximityPlacementGroupID != nil {
		proximityPlacementGroupID := *typedInput.Properties.ProximityPlacementGroupID
		managedClustersAgentPoolsSpec.ProximityPlacementGroupID = &proximityPlacementGroupID
	}

	// Set property ‘ScaleSetEvictionPolicy’:
	// copying flattened property:
	if typedInput.Properties.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := *typedInput.Properties.ScaleSetEvictionPolicy
		managedClustersAgentPoolsSpec.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	}

	// Set property ‘ScaleSetPriority’:
	// copying flattened property:
	if typedInput.Properties.ScaleSetPriority != nil {
		scaleSetPriority := *typedInput.Properties.ScaleSetPriority
		managedClustersAgentPoolsSpec.ScaleSetPriority = &scaleSetPriority
	}

	// Set property ‘SpotMaxPrice’:
	// copying flattened property:
	if typedInput.Properties.SpotMaxPrice != nil {
		spotMaxPrice := *typedInput.Properties.SpotMaxPrice
		managedClustersAgentPoolsSpec.SpotMaxPrice = &spotMaxPrice
	}

	// Set property ‘Tags’:
	// copying flattened property:
	if typedInput.Properties.Tags != nil {
		managedClustersAgentPoolsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Properties.Tags {
			managedClustersAgentPoolsSpec.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	// copying flattened property:
	if typedInput.Properties.Type != nil {
		typeVar := *typedInput.Properties.Type
		managedClustersAgentPoolsSpec.Type = &typeVar
	}

	// Set property ‘UpgradeSettings’:
	// copying flattened property:
	if typedInput.Properties.UpgradeSettings != nil {
		var upgradeSettings1 AgentPoolUpgradeSettings
		err := upgradeSettings1.PopulateFromARM(owner, *typedInput.Properties.UpgradeSettings)
		if err != nil {
			return err
		}
		upgradeSettings := upgradeSettings1
		managedClustersAgentPoolsSpec.UpgradeSettings = &upgradeSettings
	}

	// Set property ‘VmSize’:
	// copying flattened property:
	if typedInput.Properties.VmSize != nil {
		vmSize := *typedInput.Properties.VmSize
		managedClustersAgentPoolsSpec.VmSize = &vmSize
	}

	// no assignment for property ‘VnetSubnetIDReference’

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &ManagedClustersAgentPools_Spec{}

// ConvertSpecFrom populates our ManagedClustersAgentPools_Spec from the provided source
func (managedClustersAgentPoolsSpec *ManagedClustersAgentPools_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210501storage.ManagedClustersAgentPools_Spec)
	if ok {
		// Populate our instance from source
		return managedClustersAgentPoolsSpec.AssignPropertiesFromManagedClustersAgentPoolsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210501storage.ManagedClustersAgentPools_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = managedClustersAgentPoolsSpec.AssignPropertiesFromManagedClustersAgentPoolsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our ManagedClustersAgentPools_Spec
func (managedClustersAgentPoolsSpec *ManagedClustersAgentPools_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210501storage.ManagedClustersAgentPools_Spec)
	if ok {
		// Populate destination from our instance
		return managedClustersAgentPoolsSpec.AssignPropertiesToManagedClustersAgentPoolsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210501storage.ManagedClustersAgentPools_Spec{}
	err := managedClustersAgentPoolsSpec.AssignPropertiesToManagedClustersAgentPoolsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromManagedClustersAgentPoolsSpec populates our ManagedClustersAgentPools_Spec from the provided source ManagedClustersAgentPools_Spec
func (managedClustersAgentPoolsSpec *ManagedClustersAgentPools_Spec) AssignPropertiesFromManagedClustersAgentPoolsSpec(source *v1alpha1api20210501storage.ManagedClustersAgentPools_Spec) error {

	// AvailabilityZones
	managedClustersAgentPoolsSpec.AvailabilityZones = genruntime.CloneSliceOfString(source.AvailabilityZones)

	// AzureName
	managedClustersAgentPoolsSpec.AzureName = source.AzureName

	// Count
	managedClustersAgentPoolsSpec.Count = genruntime.ClonePointerToInt(source.Count)

	// EnableAutoScaling
	if source.EnableAutoScaling != nil {
		enableAutoScaling := *source.EnableAutoScaling
		managedClustersAgentPoolsSpec.EnableAutoScaling = &enableAutoScaling
	} else {
		managedClustersAgentPoolsSpec.EnableAutoScaling = nil
	}

	// EnableEncryptionAtHost
	if source.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *source.EnableEncryptionAtHost
		managedClustersAgentPoolsSpec.EnableEncryptionAtHost = &enableEncryptionAtHost
	} else {
		managedClustersAgentPoolsSpec.EnableEncryptionAtHost = nil
	}

	// EnableFIPS
	if source.EnableFIPS != nil {
		enableFIPS := *source.EnableFIPS
		managedClustersAgentPoolsSpec.EnableFIPS = &enableFIPS
	} else {
		managedClustersAgentPoolsSpec.EnableFIPS = nil
	}

	// EnableNodePublicIP
	if source.EnableNodePublicIP != nil {
		enableNodePublicIP := *source.EnableNodePublicIP
		managedClustersAgentPoolsSpec.EnableNodePublicIP = &enableNodePublicIP
	} else {
		managedClustersAgentPoolsSpec.EnableNodePublicIP = nil
	}

	// EnableUltraSSD
	if source.EnableUltraSSD != nil {
		enableUltraSSD := *source.EnableUltraSSD
		managedClustersAgentPoolsSpec.EnableUltraSSD = &enableUltraSSD
	} else {
		managedClustersAgentPoolsSpec.EnableUltraSSD = nil
	}

	// GpuInstanceProfile
	if source.GpuInstanceProfile != nil {
		gpuInstanceProfile := ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile(*source.GpuInstanceProfile)
		managedClustersAgentPoolsSpec.GpuInstanceProfile = &gpuInstanceProfile
	} else {
		managedClustersAgentPoolsSpec.GpuInstanceProfile = nil
	}

	// KubeletConfig
	if source.KubeletConfig != nil {
		var kubeletConfig KubeletConfig
		err := kubeletConfig.AssignPropertiesFromKubeletConfig(source.KubeletConfig)
		if err != nil {
			return errors.Wrap(err, "populating KubeletConfig from KubeletConfig, calling AssignPropertiesFromKubeletConfig()")
		}
		managedClustersAgentPoolsSpec.KubeletConfig = &kubeletConfig
	} else {
		managedClustersAgentPoolsSpec.KubeletConfig = nil
	}

	// KubeletDiskType
	if source.KubeletDiskType != nil {
		kubeletDiskType := ManagedClusterAgentPoolProfilePropertiesKubeletDiskType(*source.KubeletDiskType)
		managedClustersAgentPoolsSpec.KubeletDiskType = &kubeletDiskType
	} else {
		managedClustersAgentPoolsSpec.KubeletDiskType = nil
	}

	// LinuxOSConfig
	if source.LinuxOSConfig != nil {
		var linuxOSConfig LinuxOSConfig
		err := linuxOSConfig.AssignPropertiesFromLinuxOSConfig(source.LinuxOSConfig)
		if err != nil {
			return errors.Wrap(err, "populating LinuxOSConfig from LinuxOSConfig, calling AssignPropertiesFromLinuxOSConfig()")
		}
		managedClustersAgentPoolsSpec.LinuxOSConfig = &linuxOSConfig
	} else {
		managedClustersAgentPoolsSpec.LinuxOSConfig = nil
	}

	// Location
	managedClustersAgentPoolsSpec.Location = genruntime.ClonePointerToString(source.Location)

	// MaxCount
	managedClustersAgentPoolsSpec.MaxCount = genruntime.ClonePointerToInt(source.MaxCount)

	// MaxPods
	managedClustersAgentPoolsSpec.MaxPods = genruntime.ClonePointerToInt(source.MaxPods)

	// MinCount
	managedClustersAgentPoolsSpec.MinCount = genruntime.ClonePointerToInt(source.MinCount)

	// Mode
	if source.Mode != nil {
		mode := ManagedClusterAgentPoolProfilePropertiesMode(*source.Mode)
		managedClustersAgentPoolsSpec.Mode = &mode
	} else {
		managedClustersAgentPoolsSpec.Mode = nil
	}

	// NodeLabels
	managedClustersAgentPoolsSpec.NodeLabels = genruntime.CloneMapOfStringToString(source.NodeLabels)

	// NodePublicIPPrefixIDReference
	if source.NodePublicIPPrefixIDReference != nil {
		nodePublicIPPrefixIDReference := source.NodePublicIPPrefixIDReference.Copy()
		managedClustersAgentPoolsSpec.NodePublicIPPrefixIDReference = &nodePublicIPPrefixIDReference
	} else {
		managedClustersAgentPoolsSpec.NodePublicIPPrefixIDReference = nil
	}

	// NodeTaints
	managedClustersAgentPoolsSpec.NodeTaints = genruntime.CloneSliceOfString(source.NodeTaints)

	// OrchestratorVersion
	managedClustersAgentPoolsSpec.OrchestratorVersion = genruntime.ClonePointerToString(source.OrchestratorVersion)

	// OsDiskSizeGB
	if source.OsDiskSizeGB != nil {
		osDiskSizeGB := *source.OsDiskSizeGB
		managedClustersAgentPoolsSpec.OsDiskSizeGB = &osDiskSizeGB
	} else {
		managedClustersAgentPoolsSpec.OsDiskSizeGB = nil
	}

	// OsDiskType
	if source.OsDiskType != nil {
		osDiskType := ManagedClusterAgentPoolProfilePropertiesOsDiskType(*source.OsDiskType)
		managedClustersAgentPoolsSpec.OsDiskType = &osDiskType
	} else {
		managedClustersAgentPoolsSpec.OsDiskType = nil
	}

	// OsSKU
	if source.OsSKU != nil {
		osSKU := ManagedClusterAgentPoolProfilePropertiesOsSKU(*source.OsSKU)
		managedClustersAgentPoolsSpec.OsSKU = &osSKU
	} else {
		managedClustersAgentPoolsSpec.OsSKU = nil
	}

	// OsType
	if source.OsType != nil {
		osType := ManagedClusterAgentPoolProfilePropertiesOsType(*source.OsType)
		managedClustersAgentPoolsSpec.OsType = &osType
	} else {
		managedClustersAgentPoolsSpec.OsType = nil
	}

	// Owner
	managedClustersAgentPoolsSpec.Owner = source.Owner.Copy()

	// PodSubnetIDReference
	if source.PodSubnetIDReference != nil {
		podSubnetIDReference := source.PodSubnetIDReference.Copy()
		managedClustersAgentPoolsSpec.PodSubnetIDReference = &podSubnetIDReference
	} else {
		managedClustersAgentPoolsSpec.PodSubnetIDReference = nil
	}

	// ProximityPlacementGroupID
	managedClustersAgentPoolsSpec.ProximityPlacementGroupID = genruntime.ClonePointerToString(source.ProximityPlacementGroupID)

	// ScaleSetEvictionPolicy
	if source.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy(*source.ScaleSetEvictionPolicy)
		managedClustersAgentPoolsSpec.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	} else {
		managedClustersAgentPoolsSpec.ScaleSetEvictionPolicy = nil
	}

	// ScaleSetPriority
	if source.ScaleSetPriority != nil {
		scaleSetPriority := ManagedClusterAgentPoolProfilePropertiesScaleSetPriority(*source.ScaleSetPriority)
		managedClustersAgentPoolsSpec.ScaleSetPriority = &scaleSetPriority
	} else {
		managedClustersAgentPoolsSpec.ScaleSetPriority = nil
	}

	// SpotMaxPrice
	if source.SpotMaxPrice != nil {
		spotMaxPrice := *source.SpotMaxPrice
		managedClustersAgentPoolsSpec.SpotMaxPrice = &spotMaxPrice
	} else {
		managedClustersAgentPoolsSpec.SpotMaxPrice = nil
	}

	// Tags
	managedClustersAgentPoolsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	if source.Type != nil {
		typeVar := ManagedClusterAgentPoolProfilePropertiesType(*source.Type)
		managedClustersAgentPoolsSpec.Type = &typeVar
	} else {
		managedClustersAgentPoolsSpec.Type = nil
	}

	// UpgradeSettings
	if source.UpgradeSettings != nil {
		var upgradeSetting AgentPoolUpgradeSettings
		err := upgradeSetting.AssignPropertiesFromAgentPoolUpgradeSettings(source.UpgradeSettings)
		if err != nil {
			return errors.Wrap(err, "populating UpgradeSettings from UpgradeSettings, calling AssignPropertiesFromAgentPoolUpgradeSettings()")
		}
		managedClustersAgentPoolsSpec.UpgradeSettings = &upgradeSetting
	} else {
		managedClustersAgentPoolsSpec.UpgradeSettings = nil
	}

	// VmSize
	managedClustersAgentPoolsSpec.VmSize = genruntime.ClonePointerToString(source.VmSize)

	// VnetSubnetIDReference
	if source.VnetSubnetIDReference != nil {
		vnetSubnetIDReference := source.VnetSubnetIDReference.Copy()
		managedClustersAgentPoolsSpec.VnetSubnetIDReference = &vnetSubnetIDReference
	} else {
		managedClustersAgentPoolsSpec.VnetSubnetIDReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedClustersAgentPoolsSpec populates the provided destination ManagedClustersAgentPools_Spec from our ManagedClustersAgentPools_Spec
func (managedClustersAgentPoolsSpec *ManagedClustersAgentPools_Spec) AssignPropertiesToManagedClustersAgentPoolsSpec(destination *v1alpha1api20210501storage.ManagedClustersAgentPools_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AvailabilityZones
	destination.AvailabilityZones = genruntime.CloneSliceOfString(managedClustersAgentPoolsSpec.AvailabilityZones)

	// AzureName
	destination.AzureName = managedClustersAgentPoolsSpec.AzureName

	// Count
	destination.Count = genruntime.ClonePointerToInt(managedClustersAgentPoolsSpec.Count)

	// EnableAutoScaling
	if managedClustersAgentPoolsSpec.EnableAutoScaling != nil {
		enableAutoScaling := *managedClustersAgentPoolsSpec.EnableAutoScaling
		destination.EnableAutoScaling = &enableAutoScaling
	} else {
		destination.EnableAutoScaling = nil
	}

	// EnableEncryptionAtHost
	if managedClustersAgentPoolsSpec.EnableEncryptionAtHost != nil {
		enableEncryptionAtHost := *managedClustersAgentPoolsSpec.EnableEncryptionAtHost
		destination.EnableEncryptionAtHost = &enableEncryptionAtHost
	} else {
		destination.EnableEncryptionAtHost = nil
	}

	// EnableFIPS
	if managedClustersAgentPoolsSpec.EnableFIPS != nil {
		enableFIPS := *managedClustersAgentPoolsSpec.EnableFIPS
		destination.EnableFIPS = &enableFIPS
	} else {
		destination.EnableFIPS = nil
	}

	// EnableNodePublicIP
	if managedClustersAgentPoolsSpec.EnableNodePublicIP != nil {
		enableNodePublicIP := *managedClustersAgentPoolsSpec.EnableNodePublicIP
		destination.EnableNodePublicIP = &enableNodePublicIP
	} else {
		destination.EnableNodePublicIP = nil
	}

	// EnableUltraSSD
	if managedClustersAgentPoolsSpec.EnableUltraSSD != nil {
		enableUltraSSD := *managedClustersAgentPoolsSpec.EnableUltraSSD
		destination.EnableUltraSSD = &enableUltraSSD
	} else {
		destination.EnableUltraSSD = nil
	}

	// GpuInstanceProfile
	if managedClustersAgentPoolsSpec.GpuInstanceProfile != nil {
		gpuInstanceProfile := string(*managedClustersAgentPoolsSpec.GpuInstanceProfile)
		destination.GpuInstanceProfile = &gpuInstanceProfile
	} else {
		destination.GpuInstanceProfile = nil
	}

	// KubeletConfig
	if managedClustersAgentPoolsSpec.KubeletConfig != nil {
		var kubeletConfig v1alpha1api20210501storage.KubeletConfig
		err := (*managedClustersAgentPoolsSpec.KubeletConfig).AssignPropertiesToKubeletConfig(&kubeletConfig)
		if err != nil {
			return errors.Wrap(err, "populating KubeletConfig from KubeletConfig, calling AssignPropertiesToKubeletConfig()")
		}
		destination.KubeletConfig = &kubeletConfig
	} else {
		destination.KubeletConfig = nil
	}

	// KubeletDiskType
	if managedClustersAgentPoolsSpec.KubeletDiskType != nil {
		kubeletDiskType := string(*managedClustersAgentPoolsSpec.KubeletDiskType)
		destination.KubeletDiskType = &kubeletDiskType
	} else {
		destination.KubeletDiskType = nil
	}

	// LinuxOSConfig
	if managedClustersAgentPoolsSpec.LinuxOSConfig != nil {
		var linuxOSConfig v1alpha1api20210501storage.LinuxOSConfig
		err := (*managedClustersAgentPoolsSpec.LinuxOSConfig).AssignPropertiesToLinuxOSConfig(&linuxOSConfig)
		if err != nil {
			return errors.Wrap(err, "populating LinuxOSConfig from LinuxOSConfig, calling AssignPropertiesToLinuxOSConfig()")
		}
		destination.LinuxOSConfig = &linuxOSConfig
	} else {
		destination.LinuxOSConfig = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(managedClustersAgentPoolsSpec.Location)

	// MaxCount
	destination.MaxCount = genruntime.ClonePointerToInt(managedClustersAgentPoolsSpec.MaxCount)

	// MaxPods
	destination.MaxPods = genruntime.ClonePointerToInt(managedClustersAgentPoolsSpec.MaxPods)

	// MinCount
	destination.MinCount = genruntime.ClonePointerToInt(managedClustersAgentPoolsSpec.MinCount)

	// Mode
	if managedClustersAgentPoolsSpec.Mode != nil {
		mode := string(*managedClustersAgentPoolsSpec.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// NodeLabels
	destination.NodeLabels = genruntime.CloneMapOfStringToString(managedClustersAgentPoolsSpec.NodeLabels)

	// NodePublicIPPrefixIDReference
	if managedClustersAgentPoolsSpec.NodePublicIPPrefixIDReference != nil {
		nodePublicIPPrefixIDReference := managedClustersAgentPoolsSpec.NodePublicIPPrefixIDReference.Copy()
		destination.NodePublicIPPrefixIDReference = &nodePublicIPPrefixIDReference
	} else {
		destination.NodePublicIPPrefixIDReference = nil
	}

	// NodeTaints
	destination.NodeTaints = genruntime.CloneSliceOfString(managedClustersAgentPoolsSpec.NodeTaints)

	// OrchestratorVersion
	destination.OrchestratorVersion = genruntime.ClonePointerToString(managedClustersAgentPoolsSpec.OrchestratorVersion)

	// OriginalVersion
	destination.OriginalVersion = managedClustersAgentPoolsSpec.OriginalVersion()

	// OsDiskSizeGB
	if managedClustersAgentPoolsSpec.OsDiskSizeGB != nil {
		osDiskSizeGB := *managedClustersAgentPoolsSpec.OsDiskSizeGB
		destination.OsDiskSizeGB = &osDiskSizeGB
	} else {
		destination.OsDiskSizeGB = nil
	}

	// OsDiskType
	if managedClustersAgentPoolsSpec.OsDiskType != nil {
		osDiskType := string(*managedClustersAgentPoolsSpec.OsDiskType)
		destination.OsDiskType = &osDiskType
	} else {
		destination.OsDiskType = nil
	}

	// OsSKU
	if managedClustersAgentPoolsSpec.OsSKU != nil {
		osSKU := string(*managedClustersAgentPoolsSpec.OsSKU)
		destination.OsSKU = &osSKU
	} else {
		destination.OsSKU = nil
	}

	// OsType
	if managedClustersAgentPoolsSpec.OsType != nil {
		osType := string(*managedClustersAgentPoolsSpec.OsType)
		destination.OsType = &osType
	} else {
		destination.OsType = nil
	}

	// Owner
	destination.Owner = managedClustersAgentPoolsSpec.Owner.Copy()

	// PodSubnetIDReference
	if managedClustersAgentPoolsSpec.PodSubnetIDReference != nil {
		podSubnetIDReference := managedClustersAgentPoolsSpec.PodSubnetIDReference.Copy()
		destination.PodSubnetIDReference = &podSubnetIDReference
	} else {
		destination.PodSubnetIDReference = nil
	}

	// ProximityPlacementGroupID
	destination.ProximityPlacementGroupID = genruntime.ClonePointerToString(managedClustersAgentPoolsSpec.ProximityPlacementGroupID)

	// ScaleSetEvictionPolicy
	if managedClustersAgentPoolsSpec.ScaleSetEvictionPolicy != nil {
		scaleSetEvictionPolicy := string(*managedClustersAgentPoolsSpec.ScaleSetEvictionPolicy)
		destination.ScaleSetEvictionPolicy = &scaleSetEvictionPolicy
	} else {
		destination.ScaleSetEvictionPolicy = nil
	}

	// ScaleSetPriority
	if managedClustersAgentPoolsSpec.ScaleSetPriority != nil {
		scaleSetPriority := string(*managedClustersAgentPoolsSpec.ScaleSetPriority)
		destination.ScaleSetPriority = &scaleSetPriority
	} else {
		destination.ScaleSetPriority = nil
	}

	// SpotMaxPrice
	if managedClustersAgentPoolsSpec.SpotMaxPrice != nil {
		spotMaxPrice := *managedClustersAgentPoolsSpec.SpotMaxPrice
		destination.SpotMaxPrice = &spotMaxPrice
	} else {
		destination.SpotMaxPrice = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(managedClustersAgentPoolsSpec.Tags)

	// Type
	if managedClustersAgentPoolsSpec.Type != nil {
		typeVar := string(*managedClustersAgentPoolsSpec.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UpgradeSettings
	if managedClustersAgentPoolsSpec.UpgradeSettings != nil {
		var upgradeSetting v1alpha1api20210501storage.AgentPoolUpgradeSettings
		err := (*managedClustersAgentPoolsSpec.UpgradeSettings).AssignPropertiesToAgentPoolUpgradeSettings(&upgradeSetting)
		if err != nil {
			return errors.Wrap(err, "populating UpgradeSettings from UpgradeSettings, calling AssignPropertiesToAgentPoolUpgradeSettings()")
		}
		destination.UpgradeSettings = &upgradeSetting
	} else {
		destination.UpgradeSettings = nil
	}

	// VmSize
	destination.VmSize = genruntime.ClonePointerToString(managedClustersAgentPoolsSpec.VmSize)

	// VnetSubnetIDReference
	if managedClustersAgentPoolsSpec.VnetSubnetIDReference != nil {
		vnetSubnetIDReference := managedClustersAgentPoolsSpec.VnetSubnetIDReference.Copy()
		destination.VnetSubnetIDReference = &vnetSubnetIDReference
	} else {
		destination.VnetSubnetIDReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (managedClustersAgentPoolsSpec *ManagedClustersAgentPools_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (managedClustersAgentPoolsSpec *ManagedClustersAgentPools_Spec) SetAzureName(azureName string) {
	managedClustersAgentPoolsSpec.AzureName = azureName
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/definitions/AgentPoolUpgradeSettings
type AgentPoolUpgradeSettings struct {
	//MaxSurge: This can either be set to an integer (e.g. '5') or a percentage (e.g.
	//'50%'). If a percentage is specified, it is the percentage of the total agent
	//pool size at the time of the upgrade. For percentages, fractional nodes are
	//rounded up. If not specified, the default is 1. For more information, including
	//best practices, see:
	//https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
	MaxSurge *string `json:"maxSurge,omitempty"`
}

var _ genruntime.ARMTransformer = &AgentPoolUpgradeSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (agentPoolUpgradeSettings *AgentPoolUpgradeSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if agentPoolUpgradeSettings == nil {
		return nil, nil
	}
	var result AgentPoolUpgradeSettingsARM

	// Set property ‘MaxSurge’:
	if agentPoolUpgradeSettings.MaxSurge != nil {
		maxSurge := *agentPoolUpgradeSettings.MaxSurge
		result.MaxSurge = &maxSurge
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (agentPoolUpgradeSettings *AgentPoolUpgradeSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AgentPoolUpgradeSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (agentPoolUpgradeSettings *AgentPoolUpgradeSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AgentPoolUpgradeSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AgentPoolUpgradeSettingsARM, got %T", armInput)
	}

	// Set property ‘MaxSurge’:
	if typedInput.MaxSurge != nil {
		maxSurge := *typedInput.MaxSurge
		agentPoolUpgradeSettings.MaxSurge = &maxSurge
	}

	// No error
	return nil
}

// AssignPropertiesFromAgentPoolUpgradeSettings populates our AgentPoolUpgradeSettings from the provided source AgentPoolUpgradeSettings
func (agentPoolUpgradeSettings *AgentPoolUpgradeSettings) AssignPropertiesFromAgentPoolUpgradeSettings(source *v1alpha1api20210501storage.AgentPoolUpgradeSettings) error {

	// MaxSurge
	agentPoolUpgradeSettings.MaxSurge = genruntime.ClonePointerToString(source.MaxSurge)

	// No error
	return nil
}

// AssignPropertiesToAgentPoolUpgradeSettings populates the provided destination AgentPoolUpgradeSettings from our AgentPoolUpgradeSettings
func (agentPoolUpgradeSettings *AgentPoolUpgradeSettings) AssignPropertiesToAgentPoolUpgradeSettings(destination *v1alpha1api20210501storage.AgentPoolUpgradeSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxSurge
	destination.MaxSurge = genruntime.ClonePointerToString(agentPoolUpgradeSettings.MaxSurge)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type AgentPoolUpgradeSettings_Status struct {
	//MaxSurge: Count or percentage of additional nodes to be added during upgrade. If
	//empty uses AKS default
	MaxSurge *string `json:"maxSurge,omitempty"`
}

var _ genruntime.FromARMConverter = &AgentPoolUpgradeSettings_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (agentPoolUpgradeSettingsStatus *AgentPoolUpgradeSettings_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AgentPoolUpgradeSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (agentPoolUpgradeSettingsStatus *AgentPoolUpgradeSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AgentPoolUpgradeSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AgentPoolUpgradeSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘MaxSurge’:
	if typedInput.MaxSurge != nil {
		maxSurge := *typedInput.MaxSurge
		agentPoolUpgradeSettingsStatus.MaxSurge = &maxSurge
	}

	// No error
	return nil
}

// AssignPropertiesFromAgentPoolUpgradeSettingsStatus populates our AgentPoolUpgradeSettings_Status from the provided source AgentPoolUpgradeSettings_Status
func (agentPoolUpgradeSettingsStatus *AgentPoolUpgradeSettings_Status) AssignPropertiesFromAgentPoolUpgradeSettingsStatus(source *v1alpha1api20210501storage.AgentPoolUpgradeSettings_Status) error {

	// MaxSurge
	agentPoolUpgradeSettingsStatus.MaxSurge = genruntime.ClonePointerToString(source.MaxSurge)

	// No error
	return nil
}

// AssignPropertiesToAgentPoolUpgradeSettingsStatus populates the provided destination AgentPoolUpgradeSettings_Status from our AgentPoolUpgradeSettings_Status
func (agentPoolUpgradeSettingsStatus *AgentPoolUpgradeSettings_Status) AssignPropertiesToAgentPoolUpgradeSettingsStatus(destination *v1alpha1api20210501storage.AgentPoolUpgradeSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxSurge
	destination.MaxSurge = genruntime.ClonePointerToString(agentPoolUpgradeSettingsStatus.MaxSurge)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/definitions/KubeletConfig
type KubeletConfig struct {
	//AllowedUnsafeSysctls: Allowed list of unsafe sysctls or unsafe sysctl patterns
	//(ending in `*`).
	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty"`

	// +kubebuilder:validation:Minimum=2
	//ContainerLogMaxFiles: The maximum number of container log files that can be
	//present for a container. The number must be ≥ 2.
	ContainerLogMaxFiles *int `json:"containerLogMaxFiles,omitempty"`

	//ContainerLogMaxSizeMB: The maximum size (e.g. 10Mi) of container log file before
	//it is rotated.
	ContainerLogMaxSizeMB *int `json:"containerLogMaxSizeMB,omitempty"`

	//CpuCfsQuota: The default is true.
	CpuCfsQuota *bool `json:"cpuCfsQuota,omitempty"`

	//CpuCfsQuotaPeriod: The default is '100ms.' Valid values are a sequence of
	//decimal numbers with an optional fraction and a unit suffix. For example:
	//'300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
	CpuCfsQuotaPeriod *string `json:"cpuCfsQuotaPeriod,omitempty"`

	//CpuManagerPolicy: The default is 'none'. See [Kubernetes CPU management
	//policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies)
	//for more information. Allowed values are 'none' and 'static'.
	CpuManagerPolicy *string `json:"cpuManagerPolicy,omitempty"`

	//FailSwapOn: If set to true it will make the Kubelet fail to start if swap is
	//enabled on the node.
	FailSwapOn *bool `json:"failSwapOn,omitempty"`

	//ImageGcHighThreshold: To disable image garbage collection, set to 100. The
	//default is 85%
	ImageGcHighThreshold *int `json:"imageGcHighThreshold,omitempty"`

	//ImageGcLowThreshold: This cannot be set higher than imageGcHighThreshold. The
	//default is 80%
	ImageGcLowThreshold *int `json:"imageGcLowThreshold,omitempty"`

	//PodMaxPids: The maximum number of processes per pod.
	PodMaxPids *int `json:"podMaxPids,omitempty"`

	//TopologyManagerPolicy: For more information see [Kubernetes Topology
	//Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager).
	//The default is 'none'. Allowed values are 'none', 'best-effort', 'restricted',
	//and 'single-numa-node'.
	TopologyManagerPolicy *string `json:"topologyManagerPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &KubeletConfig{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (kubeletConfig *KubeletConfig) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if kubeletConfig == nil {
		return nil, nil
	}
	var result KubeletConfigARM

	// Set property ‘AllowedUnsafeSysctls’:
	for _, item := range kubeletConfig.AllowedUnsafeSysctls {
		result.AllowedUnsafeSysctls = append(result.AllowedUnsafeSysctls, item)
	}

	// Set property ‘ContainerLogMaxFiles’:
	if kubeletConfig.ContainerLogMaxFiles != nil {
		containerLogMaxFiles := *kubeletConfig.ContainerLogMaxFiles
		result.ContainerLogMaxFiles = &containerLogMaxFiles
	}

	// Set property ‘ContainerLogMaxSizeMB’:
	if kubeletConfig.ContainerLogMaxSizeMB != nil {
		containerLogMaxSizeMB := *kubeletConfig.ContainerLogMaxSizeMB
		result.ContainerLogMaxSizeMB = &containerLogMaxSizeMB
	}

	// Set property ‘CpuCfsQuota’:
	if kubeletConfig.CpuCfsQuota != nil {
		cpuCfsQuota := *kubeletConfig.CpuCfsQuota
		result.CpuCfsQuota = &cpuCfsQuota
	}

	// Set property ‘CpuCfsQuotaPeriod’:
	if kubeletConfig.CpuCfsQuotaPeriod != nil {
		cpuCfsQuotaPeriod := *kubeletConfig.CpuCfsQuotaPeriod
		result.CpuCfsQuotaPeriod = &cpuCfsQuotaPeriod
	}

	// Set property ‘CpuManagerPolicy’:
	if kubeletConfig.CpuManagerPolicy != nil {
		cpuManagerPolicy := *kubeletConfig.CpuManagerPolicy
		result.CpuManagerPolicy = &cpuManagerPolicy
	}

	// Set property ‘FailSwapOn’:
	if kubeletConfig.FailSwapOn != nil {
		failSwapOn := *kubeletConfig.FailSwapOn
		result.FailSwapOn = &failSwapOn
	}

	// Set property ‘ImageGcHighThreshold’:
	if kubeletConfig.ImageGcHighThreshold != nil {
		imageGcHighThreshold := *kubeletConfig.ImageGcHighThreshold
		result.ImageGcHighThreshold = &imageGcHighThreshold
	}

	// Set property ‘ImageGcLowThreshold’:
	if kubeletConfig.ImageGcLowThreshold != nil {
		imageGcLowThreshold := *kubeletConfig.ImageGcLowThreshold
		result.ImageGcLowThreshold = &imageGcLowThreshold
	}

	// Set property ‘PodMaxPids’:
	if kubeletConfig.PodMaxPids != nil {
		podMaxPids := *kubeletConfig.PodMaxPids
		result.PodMaxPids = &podMaxPids
	}

	// Set property ‘TopologyManagerPolicy’:
	if kubeletConfig.TopologyManagerPolicy != nil {
		topologyManagerPolicy := *kubeletConfig.TopologyManagerPolicy
		result.TopologyManagerPolicy = &topologyManagerPolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (kubeletConfig *KubeletConfig) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KubeletConfigARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (kubeletConfig *KubeletConfig) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KubeletConfigARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KubeletConfigARM, got %T", armInput)
	}

	// Set property ‘AllowedUnsafeSysctls’:
	for _, item := range typedInput.AllowedUnsafeSysctls {
		kubeletConfig.AllowedUnsafeSysctls = append(kubeletConfig.AllowedUnsafeSysctls, item)
	}

	// Set property ‘ContainerLogMaxFiles’:
	if typedInput.ContainerLogMaxFiles != nil {
		containerLogMaxFiles := *typedInput.ContainerLogMaxFiles
		kubeletConfig.ContainerLogMaxFiles = &containerLogMaxFiles
	}

	// Set property ‘ContainerLogMaxSizeMB’:
	if typedInput.ContainerLogMaxSizeMB != nil {
		containerLogMaxSizeMB := *typedInput.ContainerLogMaxSizeMB
		kubeletConfig.ContainerLogMaxSizeMB = &containerLogMaxSizeMB
	}

	// Set property ‘CpuCfsQuota’:
	if typedInput.CpuCfsQuota != nil {
		cpuCfsQuota := *typedInput.CpuCfsQuota
		kubeletConfig.CpuCfsQuota = &cpuCfsQuota
	}

	// Set property ‘CpuCfsQuotaPeriod’:
	if typedInput.CpuCfsQuotaPeriod != nil {
		cpuCfsQuotaPeriod := *typedInput.CpuCfsQuotaPeriod
		kubeletConfig.CpuCfsQuotaPeriod = &cpuCfsQuotaPeriod
	}

	// Set property ‘CpuManagerPolicy’:
	if typedInput.CpuManagerPolicy != nil {
		cpuManagerPolicy := *typedInput.CpuManagerPolicy
		kubeletConfig.CpuManagerPolicy = &cpuManagerPolicy
	}

	// Set property ‘FailSwapOn’:
	if typedInput.FailSwapOn != nil {
		failSwapOn := *typedInput.FailSwapOn
		kubeletConfig.FailSwapOn = &failSwapOn
	}

	// Set property ‘ImageGcHighThreshold’:
	if typedInput.ImageGcHighThreshold != nil {
		imageGcHighThreshold := *typedInput.ImageGcHighThreshold
		kubeletConfig.ImageGcHighThreshold = &imageGcHighThreshold
	}

	// Set property ‘ImageGcLowThreshold’:
	if typedInput.ImageGcLowThreshold != nil {
		imageGcLowThreshold := *typedInput.ImageGcLowThreshold
		kubeletConfig.ImageGcLowThreshold = &imageGcLowThreshold
	}

	// Set property ‘PodMaxPids’:
	if typedInput.PodMaxPids != nil {
		podMaxPids := *typedInput.PodMaxPids
		kubeletConfig.PodMaxPids = &podMaxPids
	}

	// Set property ‘TopologyManagerPolicy’:
	if typedInput.TopologyManagerPolicy != nil {
		topologyManagerPolicy := *typedInput.TopologyManagerPolicy
		kubeletConfig.TopologyManagerPolicy = &topologyManagerPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromKubeletConfig populates our KubeletConfig from the provided source KubeletConfig
func (kubeletConfig *KubeletConfig) AssignPropertiesFromKubeletConfig(source *v1alpha1api20210501storage.KubeletConfig) error {

	// AllowedUnsafeSysctls
	kubeletConfig.AllowedUnsafeSysctls = genruntime.CloneSliceOfString(source.AllowedUnsafeSysctls)

	// ContainerLogMaxFiles
	if source.ContainerLogMaxFiles != nil {
		containerLogMaxFile := *source.ContainerLogMaxFiles
		kubeletConfig.ContainerLogMaxFiles = &containerLogMaxFile
	} else {
		kubeletConfig.ContainerLogMaxFiles = nil
	}

	// ContainerLogMaxSizeMB
	kubeletConfig.ContainerLogMaxSizeMB = genruntime.ClonePointerToInt(source.ContainerLogMaxSizeMB)

	// CpuCfsQuota
	if source.CpuCfsQuota != nil {
		cpuCfsQuotum := *source.CpuCfsQuota
		kubeletConfig.CpuCfsQuota = &cpuCfsQuotum
	} else {
		kubeletConfig.CpuCfsQuota = nil
	}

	// CpuCfsQuotaPeriod
	kubeletConfig.CpuCfsQuotaPeriod = genruntime.ClonePointerToString(source.CpuCfsQuotaPeriod)

	// CpuManagerPolicy
	kubeletConfig.CpuManagerPolicy = genruntime.ClonePointerToString(source.CpuManagerPolicy)

	// FailSwapOn
	if source.FailSwapOn != nil {
		failSwapOn := *source.FailSwapOn
		kubeletConfig.FailSwapOn = &failSwapOn
	} else {
		kubeletConfig.FailSwapOn = nil
	}

	// ImageGcHighThreshold
	kubeletConfig.ImageGcHighThreshold = genruntime.ClonePointerToInt(source.ImageGcHighThreshold)

	// ImageGcLowThreshold
	kubeletConfig.ImageGcLowThreshold = genruntime.ClonePointerToInt(source.ImageGcLowThreshold)

	// PodMaxPids
	kubeletConfig.PodMaxPids = genruntime.ClonePointerToInt(source.PodMaxPids)

	// TopologyManagerPolicy
	kubeletConfig.TopologyManagerPolicy = genruntime.ClonePointerToString(source.TopologyManagerPolicy)

	// No error
	return nil
}

// AssignPropertiesToKubeletConfig populates the provided destination KubeletConfig from our KubeletConfig
func (kubeletConfig *KubeletConfig) AssignPropertiesToKubeletConfig(destination *v1alpha1api20210501storage.KubeletConfig) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedUnsafeSysctls
	destination.AllowedUnsafeSysctls = genruntime.CloneSliceOfString(kubeletConfig.AllowedUnsafeSysctls)

	// ContainerLogMaxFiles
	if kubeletConfig.ContainerLogMaxFiles != nil {
		containerLogMaxFile := *kubeletConfig.ContainerLogMaxFiles
		destination.ContainerLogMaxFiles = &containerLogMaxFile
	} else {
		destination.ContainerLogMaxFiles = nil
	}

	// ContainerLogMaxSizeMB
	destination.ContainerLogMaxSizeMB = genruntime.ClonePointerToInt(kubeletConfig.ContainerLogMaxSizeMB)

	// CpuCfsQuota
	if kubeletConfig.CpuCfsQuota != nil {
		cpuCfsQuotum := *kubeletConfig.CpuCfsQuota
		destination.CpuCfsQuota = &cpuCfsQuotum
	} else {
		destination.CpuCfsQuota = nil
	}

	// CpuCfsQuotaPeriod
	destination.CpuCfsQuotaPeriod = genruntime.ClonePointerToString(kubeletConfig.CpuCfsQuotaPeriod)

	// CpuManagerPolicy
	destination.CpuManagerPolicy = genruntime.ClonePointerToString(kubeletConfig.CpuManagerPolicy)

	// FailSwapOn
	if kubeletConfig.FailSwapOn != nil {
		failSwapOn := *kubeletConfig.FailSwapOn
		destination.FailSwapOn = &failSwapOn
	} else {
		destination.FailSwapOn = nil
	}

	// ImageGcHighThreshold
	destination.ImageGcHighThreshold = genruntime.ClonePointerToInt(kubeletConfig.ImageGcHighThreshold)

	// ImageGcLowThreshold
	destination.ImageGcLowThreshold = genruntime.ClonePointerToInt(kubeletConfig.ImageGcLowThreshold)

	// PodMaxPids
	destination.PodMaxPids = genruntime.ClonePointerToInt(kubeletConfig.PodMaxPids)

	// TopologyManagerPolicy
	destination.TopologyManagerPolicy = genruntime.ClonePointerToString(kubeletConfig.TopologyManagerPolicy)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type KubeletConfig_Status struct {
	//AllowedUnsafeSysctls: Allowlist of unsafe sysctls or unsafe sysctl patterns
	//(ending in `*`).
	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty"`

	//ContainerLogMaxFiles: The maximum number of container log files that can be
	//present for a container. The number must be ≥ 2.
	ContainerLogMaxFiles *int `json:"containerLogMaxFiles,omitempty"`

	//ContainerLogMaxSizeMB: The maximum size (e.g. 10Mi) of container log file before
	//it is rotated.
	ContainerLogMaxSizeMB *int `json:"containerLogMaxSizeMB,omitempty"`

	//CpuCfsQuota: Enable CPU CFS quota enforcement for containers that specify CPU
	//limits.
	CpuCfsQuota *bool `json:"cpuCfsQuota,omitempty"`

	//CpuCfsQuotaPeriod: Sets CPU CFS quota period value.
	CpuCfsQuotaPeriod *string `json:"cpuCfsQuotaPeriod,omitempty"`

	//CpuManagerPolicy: CPU Manager policy to use.
	CpuManagerPolicy *string `json:"cpuManagerPolicy,omitempty"`

	//FailSwapOn: If set to true it will make the Kubelet fail to start if swap is
	//enabled on the node.
	FailSwapOn *bool `json:"failSwapOn,omitempty"`

	//ImageGcHighThreshold: The percent of disk usage after which image garbage
	//collection is always run.
	ImageGcHighThreshold *int `json:"imageGcHighThreshold,omitempty"`

	//ImageGcLowThreshold: The percent of disk usage before which image garbage
	//collection is never run.
	ImageGcLowThreshold *int `json:"imageGcLowThreshold,omitempty"`

	//PodMaxPids: The maximum number of processes per pod.
	PodMaxPids *int `json:"podMaxPids,omitempty"`

	//TopologyManagerPolicy: Topology Manager policy to use.
	TopologyManagerPolicy *string `json:"topologyManagerPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &KubeletConfig_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (kubeletConfigStatus *KubeletConfig_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KubeletConfig_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (kubeletConfigStatus *KubeletConfig_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KubeletConfig_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KubeletConfig_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowedUnsafeSysctls’:
	for _, item := range typedInput.AllowedUnsafeSysctls {
		kubeletConfigStatus.AllowedUnsafeSysctls = append(kubeletConfigStatus.AllowedUnsafeSysctls, item)
	}

	// Set property ‘ContainerLogMaxFiles’:
	if typedInput.ContainerLogMaxFiles != nil {
		containerLogMaxFiles := *typedInput.ContainerLogMaxFiles
		kubeletConfigStatus.ContainerLogMaxFiles = &containerLogMaxFiles
	}

	// Set property ‘ContainerLogMaxSizeMB’:
	if typedInput.ContainerLogMaxSizeMB != nil {
		containerLogMaxSizeMB := *typedInput.ContainerLogMaxSizeMB
		kubeletConfigStatus.ContainerLogMaxSizeMB = &containerLogMaxSizeMB
	}

	// Set property ‘CpuCfsQuota’:
	if typedInput.CpuCfsQuota != nil {
		cpuCfsQuota := *typedInput.CpuCfsQuota
		kubeletConfigStatus.CpuCfsQuota = &cpuCfsQuota
	}

	// Set property ‘CpuCfsQuotaPeriod’:
	if typedInput.CpuCfsQuotaPeriod != nil {
		cpuCfsQuotaPeriod := *typedInput.CpuCfsQuotaPeriod
		kubeletConfigStatus.CpuCfsQuotaPeriod = &cpuCfsQuotaPeriod
	}

	// Set property ‘CpuManagerPolicy’:
	if typedInput.CpuManagerPolicy != nil {
		cpuManagerPolicy := *typedInput.CpuManagerPolicy
		kubeletConfigStatus.CpuManagerPolicy = &cpuManagerPolicy
	}

	// Set property ‘FailSwapOn’:
	if typedInput.FailSwapOn != nil {
		failSwapOn := *typedInput.FailSwapOn
		kubeletConfigStatus.FailSwapOn = &failSwapOn
	}

	// Set property ‘ImageGcHighThreshold’:
	if typedInput.ImageGcHighThreshold != nil {
		imageGcHighThreshold := *typedInput.ImageGcHighThreshold
		kubeletConfigStatus.ImageGcHighThreshold = &imageGcHighThreshold
	}

	// Set property ‘ImageGcLowThreshold’:
	if typedInput.ImageGcLowThreshold != nil {
		imageGcLowThreshold := *typedInput.ImageGcLowThreshold
		kubeletConfigStatus.ImageGcLowThreshold = &imageGcLowThreshold
	}

	// Set property ‘PodMaxPids’:
	if typedInput.PodMaxPids != nil {
		podMaxPids := *typedInput.PodMaxPids
		kubeletConfigStatus.PodMaxPids = &podMaxPids
	}

	// Set property ‘TopologyManagerPolicy’:
	if typedInput.TopologyManagerPolicy != nil {
		topologyManagerPolicy := *typedInput.TopologyManagerPolicy
		kubeletConfigStatus.TopologyManagerPolicy = &topologyManagerPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromKubeletConfigStatus populates our KubeletConfig_Status from the provided source KubeletConfig_Status
func (kubeletConfigStatus *KubeletConfig_Status) AssignPropertiesFromKubeletConfigStatus(source *v1alpha1api20210501storage.KubeletConfig_Status) error {

	// AllowedUnsafeSysctls
	kubeletConfigStatus.AllowedUnsafeSysctls = genruntime.CloneSliceOfString(source.AllowedUnsafeSysctls)

	// ContainerLogMaxFiles
	kubeletConfigStatus.ContainerLogMaxFiles = genruntime.ClonePointerToInt(source.ContainerLogMaxFiles)

	// ContainerLogMaxSizeMB
	kubeletConfigStatus.ContainerLogMaxSizeMB = genruntime.ClonePointerToInt(source.ContainerLogMaxSizeMB)

	// CpuCfsQuota
	if source.CpuCfsQuota != nil {
		cpuCfsQuotum := *source.CpuCfsQuota
		kubeletConfigStatus.CpuCfsQuota = &cpuCfsQuotum
	} else {
		kubeletConfigStatus.CpuCfsQuota = nil
	}

	// CpuCfsQuotaPeriod
	kubeletConfigStatus.CpuCfsQuotaPeriod = genruntime.ClonePointerToString(source.CpuCfsQuotaPeriod)

	// CpuManagerPolicy
	kubeletConfigStatus.CpuManagerPolicy = genruntime.ClonePointerToString(source.CpuManagerPolicy)

	// FailSwapOn
	if source.FailSwapOn != nil {
		failSwapOn := *source.FailSwapOn
		kubeletConfigStatus.FailSwapOn = &failSwapOn
	} else {
		kubeletConfigStatus.FailSwapOn = nil
	}

	// ImageGcHighThreshold
	kubeletConfigStatus.ImageGcHighThreshold = genruntime.ClonePointerToInt(source.ImageGcHighThreshold)

	// ImageGcLowThreshold
	kubeletConfigStatus.ImageGcLowThreshold = genruntime.ClonePointerToInt(source.ImageGcLowThreshold)

	// PodMaxPids
	kubeletConfigStatus.PodMaxPids = genruntime.ClonePointerToInt(source.PodMaxPids)

	// TopologyManagerPolicy
	kubeletConfigStatus.TopologyManagerPolicy = genruntime.ClonePointerToString(source.TopologyManagerPolicy)

	// No error
	return nil
}

// AssignPropertiesToKubeletConfigStatus populates the provided destination KubeletConfig_Status from our KubeletConfig_Status
func (kubeletConfigStatus *KubeletConfig_Status) AssignPropertiesToKubeletConfigStatus(destination *v1alpha1api20210501storage.KubeletConfig_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedUnsafeSysctls
	destination.AllowedUnsafeSysctls = genruntime.CloneSliceOfString(kubeletConfigStatus.AllowedUnsafeSysctls)

	// ContainerLogMaxFiles
	destination.ContainerLogMaxFiles = genruntime.ClonePointerToInt(kubeletConfigStatus.ContainerLogMaxFiles)

	// ContainerLogMaxSizeMB
	destination.ContainerLogMaxSizeMB = genruntime.ClonePointerToInt(kubeletConfigStatus.ContainerLogMaxSizeMB)

	// CpuCfsQuota
	if kubeletConfigStatus.CpuCfsQuota != nil {
		cpuCfsQuotum := *kubeletConfigStatus.CpuCfsQuota
		destination.CpuCfsQuota = &cpuCfsQuotum
	} else {
		destination.CpuCfsQuota = nil
	}

	// CpuCfsQuotaPeriod
	destination.CpuCfsQuotaPeriod = genruntime.ClonePointerToString(kubeletConfigStatus.CpuCfsQuotaPeriod)

	// CpuManagerPolicy
	destination.CpuManagerPolicy = genruntime.ClonePointerToString(kubeletConfigStatus.CpuManagerPolicy)

	// FailSwapOn
	if kubeletConfigStatus.FailSwapOn != nil {
		failSwapOn := *kubeletConfigStatus.FailSwapOn
		destination.FailSwapOn = &failSwapOn
	} else {
		destination.FailSwapOn = nil
	}

	// ImageGcHighThreshold
	destination.ImageGcHighThreshold = genruntime.ClonePointerToInt(kubeletConfigStatus.ImageGcHighThreshold)

	// ImageGcLowThreshold
	destination.ImageGcLowThreshold = genruntime.ClonePointerToInt(kubeletConfigStatus.ImageGcLowThreshold)

	// PodMaxPids
	destination.PodMaxPids = genruntime.ClonePointerToInt(kubeletConfigStatus.PodMaxPids)

	// TopologyManagerPolicy
	destination.TopologyManagerPolicy = genruntime.ClonePointerToString(kubeletConfigStatus.TopologyManagerPolicy)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/definitions/LinuxOSConfig
type LinuxOSConfig struct {
	//SwapFileSizeMB: The size in MB of a swap file that will be created on each node.
	SwapFileSizeMB *int `json:"swapFileSizeMB,omitempty"`

	//Sysctls: Sysctl settings for Linux agent nodes.
	Sysctls *SysctlConfig `json:"sysctls,omitempty"`

	//TransparentHugePageDefrag: Valid values are 'always', 'defer', 'defer+madvise',
	//'madvise' and 'never'. The default is 'madvise'. For more information see
	//[Transparent
	//Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageDefrag *string `json:"transparentHugePageDefrag,omitempty"`

	//TransparentHugePageEnabled: Valid values are 'always', 'madvise', and 'never'.
	//The default is 'always'. For more information see [Transparent
	//Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageEnabled *string `json:"transparentHugePageEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &LinuxOSConfig{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (linuxOSConfig *LinuxOSConfig) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if linuxOSConfig == nil {
		return nil, nil
	}
	var result LinuxOSConfigARM

	// Set property ‘SwapFileSizeMB’:
	if linuxOSConfig.SwapFileSizeMB != nil {
		swapFileSizeMB := *linuxOSConfig.SwapFileSizeMB
		result.SwapFileSizeMB = &swapFileSizeMB
	}

	// Set property ‘Sysctls’:
	if linuxOSConfig.Sysctls != nil {
		sysctlsARM, err := (*linuxOSConfig.Sysctls).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sysctls := sysctlsARM.(SysctlConfigARM)
		result.Sysctls = &sysctls
	}

	// Set property ‘TransparentHugePageDefrag’:
	if linuxOSConfig.TransparentHugePageDefrag != nil {
		transparentHugePageDefrag := *linuxOSConfig.TransparentHugePageDefrag
		result.TransparentHugePageDefrag = &transparentHugePageDefrag
	}

	// Set property ‘TransparentHugePageEnabled’:
	if linuxOSConfig.TransparentHugePageEnabled != nil {
		transparentHugePageEnabled := *linuxOSConfig.TransparentHugePageEnabled
		result.TransparentHugePageEnabled = &transparentHugePageEnabled
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (linuxOSConfig *LinuxOSConfig) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LinuxOSConfigARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (linuxOSConfig *LinuxOSConfig) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LinuxOSConfigARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LinuxOSConfigARM, got %T", armInput)
	}

	// Set property ‘SwapFileSizeMB’:
	if typedInput.SwapFileSizeMB != nil {
		swapFileSizeMB := *typedInput.SwapFileSizeMB
		linuxOSConfig.SwapFileSizeMB = &swapFileSizeMB
	}

	// Set property ‘Sysctls’:
	if typedInput.Sysctls != nil {
		var sysctls1 SysctlConfig
		err := sysctls1.PopulateFromARM(owner, *typedInput.Sysctls)
		if err != nil {
			return err
		}
		sysctls := sysctls1
		linuxOSConfig.Sysctls = &sysctls
	}

	// Set property ‘TransparentHugePageDefrag’:
	if typedInput.TransparentHugePageDefrag != nil {
		transparentHugePageDefrag := *typedInput.TransparentHugePageDefrag
		linuxOSConfig.TransparentHugePageDefrag = &transparentHugePageDefrag
	}

	// Set property ‘TransparentHugePageEnabled’:
	if typedInput.TransparentHugePageEnabled != nil {
		transparentHugePageEnabled := *typedInput.TransparentHugePageEnabled
		linuxOSConfig.TransparentHugePageEnabled = &transparentHugePageEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromLinuxOSConfig populates our LinuxOSConfig from the provided source LinuxOSConfig
func (linuxOSConfig *LinuxOSConfig) AssignPropertiesFromLinuxOSConfig(source *v1alpha1api20210501storage.LinuxOSConfig) error {

	// SwapFileSizeMB
	linuxOSConfig.SwapFileSizeMB = genruntime.ClonePointerToInt(source.SwapFileSizeMB)

	// Sysctls
	if source.Sysctls != nil {
		var sysctl SysctlConfig
		err := sysctl.AssignPropertiesFromSysctlConfig(source.Sysctls)
		if err != nil {
			return errors.Wrap(err, "populating Sysctls from Sysctls, calling AssignPropertiesFromSysctlConfig()")
		}
		linuxOSConfig.Sysctls = &sysctl
	} else {
		linuxOSConfig.Sysctls = nil
	}

	// TransparentHugePageDefrag
	linuxOSConfig.TransparentHugePageDefrag = genruntime.ClonePointerToString(source.TransparentHugePageDefrag)

	// TransparentHugePageEnabled
	linuxOSConfig.TransparentHugePageEnabled = genruntime.ClonePointerToString(source.TransparentHugePageEnabled)

	// No error
	return nil
}

// AssignPropertiesToLinuxOSConfig populates the provided destination LinuxOSConfig from our LinuxOSConfig
func (linuxOSConfig *LinuxOSConfig) AssignPropertiesToLinuxOSConfig(destination *v1alpha1api20210501storage.LinuxOSConfig) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SwapFileSizeMB
	destination.SwapFileSizeMB = genruntime.ClonePointerToInt(linuxOSConfig.SwapFileSizeMB)

	// Sysctls
	if linuxOSConfig.Sysctls != nil {
		var sysctl v1alpha1api20210501storage.SysctlConfig
		err := (*linuxOSConfig.Sysctls).AssignPropertiesToSysctlConfig(&sysctl)
		if err != nil {
			return errors.Wrap(err, "populating Sysctls from Sysctls, calling AssignPropertiesToSysctlConfig()")
		}
		destination.Sysctls = &sysctl
	} else {
		destination.Sysctls = nil
	}

	// TransparentHugePageDefrag
	destination.TransparentHugePageDefrag = genruntime.ClonePointerToString(linuxOSConfig.TransparentHugePageDefrag)

	// TransparentHugePageEnabled
	destination.TransparentHugePageEnabled = genruntime.ClonePointerToString(linuxOSConfig.TransparentHugePageEnabled)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type LinuxOSConfig_Status struct {
	//SwapFileSizeMB: SwapFileSizeMB specifies size in MB of a swap file will be
	//created on each node.
	SwapFileSizeMB *int `json:"swapFileSizeMB,omitempty"`

	//Sysctls: Sysctl settings for Linux agent nodes.
	Sysctls *SysctlConfig_Status `json:"sysctls,omitempty"`

	//TransparentHugePageDefrag: Transparent Huge Page defrag configuration.
	TransparentHugePageDefrag *string `json:"transparentHugePageDefrag,omitempty"`

	//TransparentHugePageEnabled: Transparent Huge Page enabled configuration.
	TransparentHugePageEnabled *string `json:"transparentHugePageEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &LinuxOSConfig_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (linuxOSConfigStatus *LinuxOSConfig_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &LinuxOSConfig_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (linuxOSConfigStatus *LinuxOSConfig_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LinuxOSConfig_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LinuxOSConfig_StatusARM, got %T", armInput)
	}

	// Set property ‘SwapFileSizeMB’:
	if typedInput.SwapFileSizeMB != nil {
		swapFileSizeMB := *typedInput.SwapFileSizeMB
		linuxOSConfigStatus.SwapFileSizeMB = &swapFileSizeMB
	}

	// Set property ‘Sysctls’:
	if typedInput.Sysctls != nil {
		var sysctls1 SysctlConfig_Status
		err := sysctls1.PopulateFromARM(owner, *typedInput.Sysctls)
		if err != nil {
			return err
		}
		sysctls := sysctls1
		linuxOSConfigStatus.Sysctls = &sysctls
	}

	// Set property ‘TransparentHugePageDefrag’:
	if typedInput.TransparentHugePageDefrag != nil {
		transparentHugePageDefrag := *typedInput.TransparentHugePageDefrag
		linuxOSConfigStatus.TransparentHugePageDefrag = &transparentHugePageDefrag
	}

	// Set property ‘TransparentHugePageEnabled’:
	if typedInput.TransparentHugePageEnabled != nil {
		transparentHugePageEnabled := *typedInput.TransparentHugePageEnabled
		linuxOSConfigStatus.TransparentHugePageEnabled = &transparentHugePageEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromLinuxOSConfigStatus populates our LinuxOSConfig_Status from the provided source LinuxOSConfig_Status
func (linuxOSConfigStatus *LinuxOSConfig_Status) AssignPropertiesFromLinuxOSConfigStatus(source *v1alpha1api20210501storage.LinuxOSConfig_Status) error {

	// SwapFileSizeMB
	linuxOSConfigStatus.SwapFileSizeMB = genruntime.ClonePointerToInt(source.SwapFileSizeMB)

	// Sysctls
	if source.Sysctls != nil {
		var sysctl SysctlConfig_Status
		err := sysctl.AssignPropertiesFromSysctlConfigStatus(source.Sysctls)
		if err != nil {
			return errors.Wrap(err, "populating Sysctls from Sysctls, calling AssignPropertiesFromSysctlConfigStatus()")
		}
		linuxOSConfigStatus.Sysctls = &sysctl
	} else {
		linuxOSConfigStatus.Sysctls = nil
	}

	// TransparentHugePageDefrag
	linuxOSConfigStatus.TransparentHugePageDefrag = genruntime.ClonePointerToString(source.TransparentHugePageDefrag)

	// TransparentHugePageEnabled
	linuxOSConfigStatus.TransparentHugePageEnabled = genruntime.ClonePointerToString(source.TransparentHugePageEnabled)

	// No error
	return nil
}

// AssignPropertiesToLinuxOSConfigStatus populates the provided destination LinuxOSConfig_Status from our LinuxOSConfig_Status
func (linuxOSConfigStatus *LinuxOSConfig_Status) AssignPropertiesToLinuxOSConfigStatus(destination *v1alpha1api20210501storage.LinuxOSConfig_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SwapFileSizeMB
	destination.SwapFileSizeMB = genruntime.ClonePointerToInt(linuxOSConfigStatus.SwapFileSizeMB)

	// Sysctls
	if linuxOSConfigStatus.Sysctls != nil {
		var sysctl v1alpha1api20210501storage.SysctlConfig_Status
		err := (*linuxOSConfigStatus.Sysctls).AssignPropertiesToSysctlConfigStatus(&sysctl)
		if err != nil {
			return errors.Wrap(err, "populating Sysctls from Sysctls, calling AssignPropertiesToSysctlConfigStatus()")
		}
		destination.Sysctls = &sysctl
	} else {
		destination.Sysctls = nil
	}

	// TransparentHugePageDefrag
	destination.TransparentHugePageDefrag = genruntime.ClonePointerToString(linuxOSConfigStatus.TransparentHugePageDefrag)

	// TransparentHugePageEnabled
	destination.TransparentHugePageEnabled = genruntime.ClonePointerToString(linuxOSConfigStatus.TransparentHugePageEnabled)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"MIG1g","MIG2g","MIG3g","MIG4g","MIG7g"}
type ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile string

const (
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG1G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG1g")
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG2G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG2g")
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG3G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG3g")
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG4G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG4g")
	ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfileMIG7G = ManagedClusterAgentPoolProfilePropertiesGpuInstanceProfile("MIG7g")
)

// +kubebuilder:validation:Enum={"OS","Temporary"}
type ManagedClusterAgentPoolProfilePropertiesKubeletDiskType string

const (
	ManagedClusterAgentPoolProfilePropertiesKubeletDiskTypeOS        = ManagedClusterAgentPoolProfilePropertiesKubeletDiskType("OS")
	ManagedClusterAgentPoolProfilePropertiesKubeletDiskTypeTemporary = ManagedClusterAgentPoolProfilePropertiesKubeletDiskType("Temporary")
)

// +kubebuilder:validation:Enum={"System","User"}
type ManagedClusterAgentPoolProfilePropertiesMode string

const (
	ManagedClusterAgentPoolProfilePropertiesModeSystem = ManagedClusterAgentPoolProfilePropertiesMode("System")
	ManagedClusterAgentPoolProfilePropertiesModeUser   = ManagedClusterAgentPoolProfilePropertiesMode("User")
)

// +kubebuilder:validation:Enum={"Ephemeral","Managed"}
type ManagedClusterAgentPoolProfilePropertiesOsDiskType string

const (
	ManagedClusterAgentPoolProfilePropertiesOsDiskTypeEphemeral = ManagedClusterAgentPoolProfilePropertiesOsDiskType("Ephemeral")
	ManagedClusterAgentPoolProfilePropertiesOsDiskTypeManaged   = ManagedClusterAgentPoolProfilePropertiesOsDiskType("Managed")
)

// +kubebuilder:validation:Enum={"CBLMariner","Ubuntu"}
type ManagedClusterAgentPoolProfilePropertiesOsSKU string

const (
	ManagedClusterAgentPoolProfilePropertiesOsSKUCBLMariner = ManagedClusterAgentPoolProfilePropertiesOsSKU("CBLMariner")
	ManagedClusterAgentPoolProfilePropertiesOsSKUUbuntu     = ManagedClusterAgentPoolProfilePropertiesOsSKU("Ubuntu")
)

// +kubebuilder:validation:Enum={"Linux","Windows"}
type ManagedClusterAgentPoolProfilePropertiesOsType string

const (
	ManagedClusterAgentPoolProfilePropertiesOsTypeLinux   = ManagedClusterAgentPoolProfilePropertiesOsType("Linux")
	ManagedClusterAgentPoolProfilePropertiesOsTypeWindows = ManagedClusterAgentPoolProfilePropertiesOsType("Windows")
)

// +kubebuilder:validation:Enum={"Deallocate","Delete"}
type ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy string

const (
	ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicyDeallocate = ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy("Deallocate")
	ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicyDelete     = ManagedClusterAgentPoolProfilePropertiesScaleSetEvictionPolicy("Delete")
)

// +kubebuilder:validation:Enum={"Regular","Spot"}
type ManagedClusterAgentPoolProfilePropertiesScaleSetPriority string

const (
	ManagedClusterAgentPoolProfilePropertiesScaleSetPriorityRegular = ManagedClusterAgentPoolProfilePropertiesScaleSetPriority("Regular")
	ManagedClusterAgentPoolProfilePropertiesScaleSetPrioritySpot    = ManagedClusterAgentPoolProfilePropertiesScaleSetPriority("Spot")
)

// +kubebuilder:validation:Enum={"AvailabilitySet","VirtualMachineScaleSets"}
type ManagedClusterAgentPoolProfilePropertiesType string

const (
	ManagedClusterAgentPoolProfilePropertiesTypeAvailabilitySet         = ManagedClusterAgentPoolProfilePropertiesType("AvailabilitySet")
	ManagedClusterAgentPoolProfilePropertiesTypeVirtualMachineScaleSets = ManagedClusterAgentPoolProfilePropertiesType("VirtualMachineScaleSets")
)

//Generated from: https://schema.management.azure.com/schemas/2021-05-01/Microsoft.ContainerService.json#/definitions/SysctlConfig
type SysctlConfig struct {
	//FsAioMaxNr: Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int `json:"fsAioMaxNr,omitempty"`

	//FsFileMax: Sysctl setting fs.file-max.
	FsFileMax *int `json:"fsFileMax,omitempty"`

	//FsInotifyMaxUserWatches: Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int `json:"fsInotifyMaxUserWatches,omitempty"`

	//FsNrOpen: Sysctl setting fs.nr_open.
	FsNrOpen *int `json:"fsNrOpen,omitempty"`

	//KernelThreadsMax: Sysctl setting kernel.threads-max.
	KernelThreadsMax *int `json:"kernelThreadsMax,omitempty"`

	//NetCoreNetdevMaxBacklog: Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int `json:"netCoreNetdevMaxBacklog,omitempty"`

	//NetCoreOptmemMax: Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int `json:"netCoreOptmemMax,omitempty"`

	//NetCoreRmemDefault: Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int `json:"netCoreRmemDefault,omitempty"`

	//NetCoreRmemMax: Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int `json:"netCoreRmemMax,omitempty"`

	//NetCoreSomaxconn: Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int `json:"netCoreSomaxconn,omitempty"`

	//NetCoreWmemDefault: Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int `json:"netCoreWmemDefault,omitempty"`

	//NetCoreWmemMax: Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int `json:"netCoreWmemMax,omitempty"`

	//NetIpv4IpLocalPortRange: Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `json:"netIpv4IpLocalPortRange,omitempty"`

	//NetIpv4NeighDefaultGcThresh1: Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int `json:"netIpv4NeighDefaultGcThresh1,omitempty"`

	//NetIpv4NeighDefaultGcThresh2: Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int `json:"netIpv4NeighDefaultGcThresh2,omitempty"`

	//NetIpv4NeighDefaultGcThresh3: Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int `json:"netIpv4NeighDefaultGcThresh3,omitempty"`

	//NetIpv4TcpFinTimeout: Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int `json:"netIpv4TcpFinTimeout,omitempty"`

	//NetIpv4TcpKeepaliveProbes: Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int `json:"netIpv4TcpKeepaliveProbes,omitempty"`

	//NetIpv4TcpKeepaliveTime: Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int `json:"netIpv4TcpKeepaliveTime,omitempty"`

	//NetIpv4TcpMaxSynBacklog: Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int `json:"netIpv4TcpMaxSynBacklog,omitempty"`

	//NetIpv4TcpMaxTwBuckets: Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int `json:"netIpv4TcpMaxTwBuckets,omitempty"`

	//NetIpv4TcpTwReuse: Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `json:"netIpv4TcpTwReuse,omitempty"`

	//NetIpv4TcpkeepaliveIntvl: Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int `json:"netIpv4TcpkeepaliveIntvl,omitempty"`

	//NetNetfilterNfConntrackBuckets: Sysctl setting
	//net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int `json:"netNetfilterNfConntrackBuckets,omitempty"`

	//NetNetfilterNfConntrackMax: Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int `json:"netNetfilterNfConntrackMax,omitempty"`

	//VmMaxMapCount: Sysctl setting vm.max_map_count.
	VmMaxMapCount *int `json:"vmMaxMapCount,omitempty"`

	//VmSwappiness: Sysctl setting vm.swappiness.
	VmSwappiness *int `json:"vmSwappiness,omitempty"`

	//VmVfsCachePressure: Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int `json:"vmVfsCachePressure,omitempty"`
}

var _ genruntime.ARMTransformer = &SysctlConfig{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sysctlConfig *SysctlConfig) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sysctlConfig == nil {
		return nil, nil
	}
	var result SysctlConfigARM

	// Set property ‘FsAioMaxNr’:
	if sysctlConfig.FsAioMaxNr != nil {
		fsAioMaxNr := *sysctlConfig.FsAioMaxNr
		result.FsAioMaxNr = &fsAioMaxNr
	}

	// Set property ‘FsFileMax’:
	if sysctlConfig.FsFileMax != nil {
		fsFileMax := *sysctlConfig.FsFileMax
		result.FsFileMax = &fsFileMax
	}

	// Set property ‘FsInotifyMaxUserWatches’:
	if sysctlConfig.FsInotifyMaxUserWatches != nil {
		fsInotifyMaxUserWatches := *sysctlConfig.FsInotifyMaxUserWatches
		result.FsInotifyMaxUserWatches = &fsInotifyMaxUserWatches
	}

	// Set property ‘FsNrOpen’:
	if sysctlConfig.FsNrOpen != nil {
		fsNrOpen := *sysctlConfig.FsNrOpen
		result.FsNrOpen = &fsNrOpen
	}

	// Set property ‘KernelThreadsMax’:
	if sysctlConfig.KernelThreadsMax != nil {
		kernelThreadsMax := *sysctlConfig.KernelThreadsMax
		result.KernelThreadsMax = &kernelThreadsMax
	}

	// Set property ‘NetCoreNetdevMaxBacklog’:
	if sysctlConfig.NetCoreNetdevMaxBacklog != nil {
		netCoreNetdevMaxBacklog := *sysctlConfig.NetCoreNetdevMaxBacklog
		result.NetCoreNetdevMaxBacklog = &netCoreNetdevMaxBacklog
	}

	// Set property ‘NetCoreOptmemMax’:
	if sysctlConfig.NetCoreOptmemMax != nil {
		netCoreOptmemMax := *sysctlConfig.NetCoreOptmemMax
		result.NetCoreOptmemMax = &netCoreOptmemMax
	}

	// Set property ‘NetCoreRmemDefault’:
	if sysctlConfig.NetCoreRmemDefault != nil {
		netCoreRmemDefault := *sysctlConfig.NetCoreRmemDefault
		result.NetCoreRmemDefault = &netCoreRmemDefault
	}

	// Set property ‘NetCoreRmemMax’:
	if sysctlConfig.NetCoreRmemMax != nil {
		netCoreRmemMax := *sysctlConfig.NetCoreRmemMax
		result.NetCoreRmemMax = &netCoreRmemMax
	}

	// Set property ‘NetCoreSomaxconn’:
	if sysctlConfig.NetCoreSomaxconn != nil {
		netCoreSomaxconn := *sysctlConfig.NetCoreSomaxconn
		result.NetCoreSomaxconn = &netCoreSomaxconn
	}

	// Set property ‘NetCoreWmemDefault’:
	if sysctlConfig.NetCoreWmemDefault != nil {
		netCoreWmemDefault := *sysctlConfig.NetCoreWmemDefault
		result.NetCoreWmemDefault = &netCoreWmemDefault
	}

	// Set property ‘NetCoreWmemMax’:
	if sysctlConfig.NetCoreWmemMax != nil {
		netCoreWmemMax := *sysctlConfig.NetCoreWmemMax
		result.NetCoreWmemMax = &netCoreWmemMax
	}

	// Set property ‘NetIpv4IpLocalPortRange’:
	if sysctlConfig.NetIpv4IpLocalPortRange != nil {
		netIpv4IpLocalPortRange := *sysctlConfig.NetIpv4IpLocalPortRange
		result.NetIpv4IpLocalPortRange = &netIpv4IpLocalPortRange
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh1’:
	if sysctlConfig.NetIpv4NeighDefaultGcThresh1 != nil {
		netIpv4NeighDefaultGcThresh1 := *sysctlConfig.NetIpv4NeighDefaultGcThresh1
		result.NetIpv4NeighDefaultGcThresh1 = &netIpv4NeighDefaultGcThresh1
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh2’:
	if sysctlConfig.NetIpv4NeighDefaultGcThresh2 != nil {
		netIpv4NeighDefaultGcThresh2 := *sysctlConfig.NetIpv4NeighDefaultGcThresh2
		result.NetIpv4NeighDefaultGcThresh2 = &netIpv4NeighDefaultGcThresh2
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh3’:
	if sysctlConfig.NetIpv4NeighDefaultGcThresh3 != nil {
		netIpv4NeighDefaultGcThresh3 := *sysctlConfig.NetIpv4NeighDefaultGcThresh3
		result.NetIpv4NeighDefaultGcThresh3 = &netIpv4NeighDefaultGcThresh3
	}

	// Set property ‘NetIpv4TcpFinTimeout’:
	if sysctlConfig.NetIpv4TcpFinTimeout != nil {
		netIpv4TcpFinTimeout := *sysctlConfig.NetIpv4TcpFinTimeout
		result.NetIpv4TcpFinTimeout = &netIpv4TcpFinTimeout
	}

	// Set property ‘NetIpv4TcpKeepaliveProbes’:
	if sysctlConfig.NetIpv4TcpKeepaliveProbes != nil {
		netIpv4TcpKeepaliveProbes := *sysctlConfig.NetIpv4TcpKeepaliveProbes
		result.NetIpv4TcpKeepaliveProbes = &netIpv4TcpKeepaliveProbes
	}

	// Set property ‘NetIpv4TcpKeepaliveTime’:
	if sysctlConfig.NetIpv4TcpKeepaliveTime != nil {
		netIpv4TcpKeepaliveTime := *sysctlConfig.NetIpv4TcpKeepaliveTime
		result.NetIpv4TcpKeepaliveTime = &netIpv4TcpKeepaliveTime
	}

	// Set property ‘NetIpv4TcpMaxSynBacklog’:
	if sysctlConfig.NetIpv4TcpMaxSynBacklog != nil {
		netIpv4TcpMaxSynBacklog := *sysctlConfig.NetIpv4TcpMaxSynBacklog
		result.NetIpv4TcpMaxSynBacklog = &netIpv4TcpMaxSynBacklog
	}

	// Set property ‘NetIpv4TcpMaxTwBuckets’:
	if sysctlConfig.NetIpv4TcpMaxTwBuckets != nil {
		netIpv4TcpMaxTwBuckets := *sysctlConfig.NetIpv4TcpMaxTwBuckets
		result.NetIpv4TcpMaxTwBuckets = &netIpv4TcpMaxTwBuckets
	}

	// Set property ‘NetIpv4TcpTwReuse’:
	if sysctlConfig.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *sysctlConfig.NetIpv4TcpTwReuse
		result.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	}

	// Set property ‘NetIpv4TcpkeepaliveIntvl’:
	if sysctlConfig.NetIpv4TcpkeepaliveIntvl != nil {
		netIpv4TcpkeepaliveIntvl := *sysctlConfig.NetIpv4TcpkeepaliveIntvl
		result.NetIpv4TcpkeepaliveIntvl = &netIpv4TcpkeepaliveIntvl
	}

	// Set property ‘NetNetfilterNfConntrackBuckets’:
	if sysctlConfig.NetNetfilterNfConntrackBuckets != nil {
		netNetfilterNfConntrackBuckets := *sysctlConfig.NetNetfilterNfConntrackBuckets
		result.NetNetfilterNfConntrackBuckets = &netNetfilterNfConntrackBuckets
	}

	// Set property ‘NetNetfilterNfConntrackMax’:
	if sysctlConfig.NetNetfilterNfConntrackMax != nil {
		netNetfilterNfConntrackMax := *sysctlConfig.NetNetfilterNfConntrackMax
		result.NetNetfilterNfConntrackMax = &netNetfilterNfConntrackMax
	}

	// Set property ‘VmMaxMapCount’:
	if sysctlConfig.VmMaxMapCount != nil {
		vmMaxMapCount := *sysctlConfig.VmMaxMapCount
		result.VmMaxMapCount = &vmMaxMapCount
	}

	// Set property ‘VmSwappiness’:
	if sysctlConfig.VmSwappiness != nil {
		vmSwappiness := *sysctlConfig.VmSwappiness
		result.VmSwappiness = &vmSwappiness
	}

	// Set property ‘VmVfsCachePressure’:
	if sysctlConfig.VmVfsCachePressure != nil {
		vmVfsCachePressure := *sysctlConfig.VmVfsCachePressure
		result.VmVfsCachePressure = &vmVfsCachePressure
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sysctlConfig *SysctlConfig) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SysctlConfigARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sysctlConfig *SysctlConfig) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SysctlConfigARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SysctlConfigARM, got %T", armInput)
	}

	// Set property ‘FsAioMaxNr’:
	if typedInput.FsAioMaxNr != nil {
		fsAioMaxNr := *typedInput.FsAioMaxNr
		sysctlConfig.FsAioMaxNr = &fsAioMaxNr
	}

	// Set property ‘FsFileMax’:
	if typedInput.FsFileMax != nil {
		fsFileMax := *typedInput.FsFileMax
		sysctlConfig.FsFileMax = &fsFileMax
	}

	// Set property ‘FsInotifyMaxUserWatches’:
	if typedInput.FsInotifyMaxUserWatches != nil {
		fsInotifyMaxUserWatches := *typedInput.FsInotifyMaxUserWatches
		sysctlConfig.FsInotifyMaxUserWatches = &fsInotifyMaxUserWatches
	}

	// Set property ‘FsNrOpen’:
	if typedInput.FsNrOpen != nil {
		fsNrOpen := *typedInput.FsNrOpen
		sysctlConfig.FsNrOpen = &fsNrOpen
	}

	// Set property ‘KernelThreadsMax’:
	if typedInput.KernelThreadsMax != nil {
		kernelThreadsMax := *typedInput.KernelThreadsMax
		sysctlConfig.KernelThreadsMax = &kernelThreadsMax
	}

	// Set property ‘NetCoreNetdevMaxBacklog’:
	if typedInput.NetCoreNetdevMaxBacklog != nil {
		netCoreNetdevMaxBacklog := *typedInput.NetCoreNetdevMaxBacklog
		sysctlConfig.NetCoreNetdevMaxBacklog = &netCoreNetdevMaxBacklog
	}

	// Set property ‘NetCoreOptmemMax’:
	if typedInput.NetCoreOptmemMax != nil {
		netCoreOptmemMax := *typedInput.NetCoreOptmemMax
		sysctlConfig.NetCoreOptmemMax = &netCoreOptmemMax
	}

	// Set property ‘NetCoreRmemDefault’:
	if typedInput.NetCoreRmemDefault != nil {
		netCoreRmemDefault := *typedInput.NetCoreRmemDefault
		sysctlConfig.NetCoreRmemDefault = &netCoreRmemDefault
	}

	// Set property ‘NetCoreRmemMax’:
	if typedInput.NetCoreRmemMax != nil {
		netCoreRmemMax := *typedInput.NetCoreRmemMax
		sysctlConfig.NetCoreRmemMax = &netCoreRmemMax
	}

	// Set property ‘NetCoreSomaxconn’:
	if typedInput.NetCoreSomaxconn != nil {
		netCoreSomaxconn := *typedInput.NetCoreSomaxconn
		sysctlConfig.NetCoreSomaxconn = &netCoreSomaxconn
	}

	// Set property ‘NetCoreWmemDefault’:
	if typedInput.NetCoreWmemDefault != nil {
		netCoreWmemDefault := *typedInput.NetCoreWmemDefault
		sysctlConfig.NetCoreWmemDefault = &netCoreWmemDefault
	}

	// Set property ‘NetCoreWmemMax’:
	if typedInput.NetCoreWmemMax != nil {
		netCoreWmemMax := *typedInput.NetCoreWmemMax
		sysctlConfig.NetCoreWmemMax = &netCoreWmemMax
	}

	// Set property ‘NetIpv4IpLocalPortRange’:
	if typedInput.NetIpv4IpLocalPortRange != nil {
		netIpv4IpLocalPortRange := *typedInput.NetIpv4IpLocalPortRange
		sysctlConfig.NetIpv4IpLocalPortRange = &netIpv4IpLocalPortRange
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh1’:
	if typedInput.NetIpv4NeighDefaultGcThresh1 != nil {
		netIpv4NeighDefaultGcThresh1 := *typedInput.NetIpv4NeighDefaultGcThresh1
		sysctlConfig.NetIpv4NeighDefaultGcThresh1 = &netIpv4NeighDefaultGcThresh1
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh2’:
	if typedInput.NetIpv4NeighDefaultGcThresh2 != nil {
		netIpv4NeighDefaultGcThresh2 := *typedInput.NetIpv4NeighDefaultGcThresh2
		sysctlConfig.NetIpv4NeighDefaultGcThresh2 = &netIpv4NeighDefaultGcThresh2
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh3’:
	if typedInput.NetIpv4NeighDefaultGcThresh3 != nil {
		netIpv4NeighDefaultGcThresh3 := *typedInput.NetIpv4NeighDefaultGcThresh3
		sysctlConfig.NetIpv4NeighDefaultGcThresh3 = &netIpv4NeighDefaultGcThresh3
	}

	// Set property ‘NetIpv4TcpFinTimeout’:
	if typedInput.NetIpv4TcpFinTimeout != nil {
		netIpv4TcpFinTimeout := *typedInput.NetIpv4TcpFinTimeout
		sysctlConfig.NetIpv4TcpFinTimeout = &netIpv4TcpFinTimeout
	}

	// Set property ‘NetIpv4TcpKeepaliveProbes’:
	if typedInput.NetIpv4TcpKeepaliveProbes != nil {
		netIpv4TcpKeepaliveProbes := *typedInput.NetIpv4TcpKeepaliveProbes
		sysctlConfig.NetIpv4TcpKeepaliveProbes = &netIpv4TcpKeepaliveProbes
	}

	// Set property ‘NetIpv4TcpKeepaliveTime’:
	if typedInput.NetIpv4TcpKeepaliveTime != nil {
		netIpv4TcpKeepaliveTime := *typedInput.NetIpv4TcpKeepaliveTime
		sysctlConfig.NetIpv4TcpKeepaliveTime = &netIpv4TcpKeepaliveTime
	}

	// Set property ‘NetIpv4TcpMaxSynBacklog’:
	if typedInput.NetIpv4TcpMaxSynBacklog != nil {
		netIpv4TcpMaxSynBacklog := *typedInput.NetIpv4TcpMaxSynBacklog
		sysctlConfig.NetIpv4TcpMaxSynBacklog = &netIpv4TcpMaxSynBacklog
	}

	// Set property ‘NetIpv4TcpMaxTwBuckets’:
	if typedInput.NetIpv4TcpMaxTwBuckets != nil {
		netIpv4TcpMaxTwBuckets := *typedInput.NetIpv4TcpMaxTwBuckets
		sysctlConfig.NetIpv4TcpMaxTwBuckets = &netIpv4TcpMaxTwBuckets
	}

	// Set property ‘NetIpv4TcpTwReuse’:
	if typedInput.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *typedInput.NetIpv4TcpTwReuse
		sysctlConfig.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	}

	// Set property ‘NetIpv4TcpkeepaliveIntvl’:
	if typedInput.NetIpv4TcpkeepaliveIntvl != nil {
		netIpv4TcpkeepaliveIntvl := *typedInput.NetIpv4TcpkeepaliveIntvl
		sysctlConfig.NetIpv4TcpkeepaliveIntvl = &netIpv4TcpkeepaliveIntvl
	}

	// Set property ‘NetNetfilterNfConntrackBuckets’:
	if typedInput.NetNetfilterNfConntrackBuckets != nil {
		netNetfilterNfConntrackBuckets := *typedInput.NetNetfilterNfConntrackBuckets
		sysctlConfig.NetNetfilterNfConntrackBuckets = &netNetfilterNfConntrackBuckets
	}

	// Set property ‘NetNetfilterNfConntrackMax’:
	if typedInput.NetNetfilterNfConntrackMax != nil {
		netNetfilterNfConntrackMax := *typedInput.NetNetfilterNfConntrackMax
		sysctlConfig.NetNetfilterNfConntrackMax = &netNetfilterNfConntrackMax
	}

	// Set property ‘VmMaxMapCount’:
	if typedInput.VmMaxMapCount != nil {
		vmMaxMapCount := *typedInput.VmMaxMapCount
		sysctlConfig.VmMaxMapCount = &vmMaxMapCount
	}

	// Set property ‘VmSwappiness’:
	if typedInput.VmSwappiness != nil {
		vmSwappiness := *typedInput.VmSwappiness
		sysctlConfig.VmSwappiness = &vmSwappiness
	}

	// Set property ‘VmVfsCachePressure’:
	if typedInput.VmVfsCachePressure != nil {
		vmVfsCachePressure := *typedInput.VmVfsCachePressure
		sysctlConfig.VmVfsCachePressure = &vmVfsCachePressure
	}

	// No error
	return nil
}

// AssignPropertiesFromSysctlConfig populates our SysctlConfig from the provided source SysctlConfig
func (sysctlConfig *SysctlConfig) AssignPropertiesFromSysctlConfig(source *v1alpha1api20210501storage.SysctlConfig) error {

	// FsAioMaxNr
	sysctlConfig.FsAioMaxNr = genruntime.ClonePointerToInt(source.FsAioMaxNr)

	// FsFileMax
	sysctlConfig.FsFileMax = genruntime.ClonePointerToInt(source.FsFileMax)

	// FsInotifyMaxUserWatches
	sysctlConfig.FsInotifyMaxUserWatches = genruntime.ClonePointerToInt(source.FsInotifyMaxUserWatches)

	// FsNrOpen
	sysctlConfig.FsNrOpen = genruntime.ClonePointerToInt(source.FsNrOpen)

	// KernelThreadsMax
	sysctlConfig.KernelThreadsMax = genruntime.ClonePointerToInt(source.KernelThreadsMax)

	// NetCoreNetdevMaxBacklog
	sysctlConfig.NetCoreNetdevMaxBacklog = genruntime.ClonePointerToInt(source.NetCoreNetdevMaxBacklog)

	// NetCoreOptmemMax
	sysctlConfig.NetCoreOptmemMax = genruntime.ClonePointerToInt(source.NetCoreOptmemMax)

	// NetCoreRmemDefault
	sysctlConfig.NetCoreRmemDefault = genruntime.ClonePointerToInt(source.NetCoreRmemDefault)

	// NetCoreRmemMax
	sysctlConfig.NetCoreRmemMax = genruntime.ClonePointerToInt(source.NetCoreRmemMax)

	// NetCoreSomaxconn
	sysctlConfig.NetCoreSomaxconn = genruntime.ClonePointerToInt(source.NetCoreSomaxconn)

	// NetCoreWmemDefault
	sysctlConfig.NetCoreWmemDefault = genruntime.ClonePointerToInt(source.NetCoreWmemDefault)

	// NetCoreWmemMax
	sysctlConfig.NetCoreWmemMax = genruntime.ClonePointerToInt(source.NetCoreWmemMax)

	// NetIpv4IpLocalPortRange
	sysctlConfig.NetIpv4IpLocalPortRange = genruntime.ClonePointerToString(source.NetIpv4IpLocalPortRange)

	// NetIpv4NeighDefaultGcThresh1
	sysctlConfig.NetIpv4NeighDefaultGcThresh1 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh1)

	// NetIpv4NeighDefaultGcThresh2
	sysctlConfig.NetIpv4NeighDefaultGcThresh2 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh2)

	// NetIpv4NeighDefaultGcThresh3
	sysctlConfig.NetIpv4NeighDefaultGcThresh3 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh3)

	// NetIpv4TcpFinTimeout
	sysctlConfig.NetIpv4TcpFinTimeout = genruntime.ClonePointerToInt(source.NetIpv4TcpFinTimeout)

	// NetIpv4TcpKeepaliveProbes
	sysctlConfig.NetIpv4TcpKeepaliveProbes = genruntime.ClonePointerToInt(source.NetIpv4TcpKeepaliveProbes)

	// NetIpv4TcpKeepaliveTime
	sysctlConfig.NetIpv4TcpKeepaliveTime = genruntime.ClonePointerToInt(source.NetIpv4TcpKeepaliveTime)

	// NetIpv4TcpMaxSynBacklog
	sysctlConfig.NetIpv4TcpMaxSynBacklog = genruntime.ClonePointerToInt(source.NetIpv4TcpMaxSynBacklog)

	// NetIpv4TcpMaxTwBuckets
	sysctlConfig.NetIpv4TcpMaxTwBuckets = genruntime.ClonePointerToInt(source.NetIpv4TcpMaxTwBuckets)

	// NetIpv4TcpTwReuse
	if source.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *source.NetIpv4TcpTwReuse
		sysctlConfig.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	} else {
		sysctlConfig.NetIpv4TcpTwReuse = nil
	}

	// NetIpv4TcpkeepaliveIntvl
	sysctlConfig.NetIpv4TcpkeepaliveIntvl = genruntime.ClonePointerToInt(source.NetIpv4TcpkeepaliveIntvl)

	// NetNetfilterNfConntrackBuckets
	sysctlConfig.NetNetfilterNfConntrackBuckets = genruntime.ClonePointerToInt(source.NetNetfilterNfConntrackBuckets)

	// NetNetfilterNfConntrackMax
	sysctlConfig.NetNetfilterNfConntrackMax = genruntime.ClonePointerToInt(source.NetNetfilterNfConntrackMax)

	// VmMaxMapCount
	sysctlConfig.VmMaxMapCount = genruntime.ClonePointerToInt(source.VmMaxMapCount)

	// VmSwappiness
	sysctlConfig.VmSwappiness = genruntime.ClonePointerToInt(source.VmSwappiness)

	// VmVfsCachePressure
	sysctlConfig.VmVfsCachePressure = genruntime.ClonePointerToInt(source.VmVfsCachePressure)

	// No error
	return nil
}

// AssignPropertiesToSysctlConfig populates the provided destination SysctlConfig from our SysctlConfig
func (sysctlConfig *SysctlConfig) AssignPropertiesToSysctlConfig(destination *v1alpha1api20210501storage.SysctlConfig) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FsAioMaxNr
	destination.FsAioMaxNr = genruntime.ClonePointerToInt(sysctlConfig.FsAioMaxNr)

	// FsFileMax
	destination.FsFileMax = genruntime.ClonePointerToInt(sysctlConfig.FsFileMax)

	// FsInotifyMaxUserWatches
	destination.FsInotifyMaxUserWatches = genruntime.ClonePointerToInt(sysctlConfig.FsInotifyMaxUserWatches)

	// FsNrOpen
	destination.FsNrOpen = genruntime.ClonePointerToInt(sysctlConfig.FsNrOpen)

	// KernelThreadsMax
	destination.KernelThreadsMax = genruntime.ClonePointerToInt(sysctlConfig.KernelThreadsMax)

	// NetCoreNetdevMaxBacklog
	destination.NetCoreNetdevMaxBacklog = genruntime.ClonePointerToInt(sysctlConfig.NetCoreNetdevMaxBacklog)

	// NetCoreOptmemMax
	destination.NetCoreOptmemMax = genruntime.ClonePointerToInt(sysctlConfig.NetCoreOptmemMax)

	// NetCoreRmemDefault
	destination.NetCoreRmemDefault = genruntime.ClonePointerToInt(sysctlConfig.NetCoreRmemDefault)

	// NetCoreRmemMax
	destination.NetCoreRmemMax = genruntime.ClonePointerToInt(sysctlConfig.NetCoreRmemMax)

	// NetCoreSomaxconn
	destination.NetCoreSomaxconn = genruntime.ClonePointerToInt(sysctlConfig.NetCoreSomaxconn)

	// NetCoreWmemDefault
	destination.NetCoreWmemDefault = genruntime.ClonePointerToInt(sysctlConfig.NetCoreWmemDefault)

	// NetCoreWmemMax
	destination.NetCoreWmemMax = genruntime.ClonePointerToInt(sysctlConfig.NetCoreWmemMax)

	// NetIpv4IpLocalPortRange
	destination.NetIpv4IpLocalPortRange = genruntime.ClonePointerToString(sysctlConfig.NetIpv4IpLocalPortRange)

	// NetIpv4NeighDefaultGcThresh1
	destination.NetIpv4NeighDefaultGcThresh1 = genruntime.ClonePointerToInt(sysctlConfig.NetIpv4NeighDefaultGcThresh1)

	// NetIpv4NeighDefaultGcThresh2
	destination.NetIpv4NeighDefaultGcThresh2 = genruntime.ClonePointerToInt(sysctlConfig.NetIpv4NeighDefaultGcThresh2)

	// NetIpv4NeighDefaultGcThresh3
	destination.NetIpv4NeighDefaultGcThresh3 = genruntime.ClonePointerToInt(sysctlConfig.NetIpv4NeighDefaultGcThresh3)

	// NetIpv4TcpFinTimeout
	destination.NetIpv4TcpFinTimeout = genruntime.ClonePointerToInt(sysctlConfig.NetIpv4TcpFinTimeout)

	// NetIpv4TcpKeepaliveProbes
	destination.NetIpv4TcpKeepaliveProbes = genruntime.ClonePointerToInt(sysctlConfig.NetIpv4TcpKeepaliveProbes)

	// NetIpv4TcpKeepaliveTime
	destination.NetIpv4TcpKeepaliveTime = genruntime.ClonePointerToInt(sysctlConfig.NetIpv4TcpKeepaliveTime)

	// NetIpv4TcpMaxSynBacklog
	destination.NetIpv4TcpMaxSynBacklog = genruntime.ClonePointerToInt(sysctlConfig.NetIpv4TcpMaxSynBacklog)

	// NetIpv4TcpMaxTwBuckets
	destination.NetIpv4TcpMaxTwBuckets = genruntime.ClonePointerToInt(sysctlConfig.NetIpv4TcpMaxTwBuckets)

	// NetIpv4TcpTwReuse
	if sysctlConfig.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *sysctlConfig.NetIpv4TcpTwReuse
		destination.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	} else {
		destination.NetIpv4TcpTwReuse = nil
	}

	// NetIpv4TcpkeepaliveIntvl
	destination.NetIpv4TcpkeepaliveIntvl = genruntime.ClonePointerToInt(sysctlConfig.NetIpv4TcpkeepaliveIntvl)

	// NetNetfilterNfConntrackBuckets
	destination.NetNetfilterNfConntrackBuckets = genruntime.ClonePointerToInt(sysctlConfig.NetNetfilterNfConntrackBuckets)

	// NetNetfilterNfConntrackMax
	destination.NetNetfilterNfConntrackMax = genruntime.ClonePointerToInt(sysctlConfig.NetNetfilterNfConntrackMax)

	// VmMaxMapCount
	destination.VmMaxMapCount = genruntime.ClonePointerToInt(sysctlConfig.VmMaxMapCount)

	// VmSwappiness
	destination.VmSwappiness = genruntime.ClonePointerToInt(sysctlConfig.VmSwappiness)

	// VmVfsCachePressure
	destination.VmVfsCachePressure = genruntime.ClonePointerToInt(sysctlConfig.VmVfsCachePressure)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type SysctlConfig_Status struct {
	//FsAioMaxNr: Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int `json:"fsAioMaxNr,omitempty"`

	//FsFileMax: Sysctl setting fs.file-max.
	FsFileMax *int `json:"fsFileMax,omitempty"`

	//FsInotifyMaxUserWatches: Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int `json:"fsInotifyMaxUserWatches,omitempty"`

	//FsNrOpen: Sysctl setting fs.nr_open.
	FsNrOpen *int `json:"fsNrOpen,omitempty"`

	//KernelThreadsMax: Sysctl setting kernel.threads-max.
	KernelThreadsMax *int `json:"kernelThreadsMax,omitempty"`

	//NetCoreNetdevMaxBacklog: Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int `json:"netCoreNetdevMaxBacklog,omitempty"`

	//NetCoreOptmemMax: Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int `json:"netCoreOptmemMax,omitempty"`

	//NetCoreRmemDefault: Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int `json:"netCoreRmemDefault,omitempty"`

	//NetCoreRmemMax: Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int `json:"netCoreRmemMax,omitempty"`

	//NetCoreSomaxconn: Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int `json:"netCoreSomaxconn,omitempty"`

	//NetCoreWmemDefault: Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int `json:"netCoreWmemDefault,omitempty"`

	//NetCoreWmemMax: Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int `json:"netCoreWmemMax,omitempty"`

	//NetIpv4IpLocalPortRange: Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `json:"netIpv4IpLocalPortRange,omitempty"`

	//NetIpv4NeighDefaultGcThresh1: Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int `json:"netIpv4NeighDefaultGcThresh1,omitempty"`

	//NetIpv4NeighDefaultGcThresh2: Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int `json:"netIpv4NeighDefaultGcThresh2,omitempty"`

	//NetIpv4NeighDefaultGcThresh3: Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int `json:"netIpv4NeighDefaultGcThresh3,omitempty"`

	//NetIpv4TcpFinTimeout: Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int `json:"netIpv4TcpFinTimeout,omitempty"`

	//NetIpv4TcpKeepaliveProbes: Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int `json:"netIpv4TcpKeepaliveProbes,omitempty"`

	//NetIpv4TcpKeepaliveTime: Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int `json:"netIpv4TcpKeepaliveTime,omitempty"`

	//NetIpv4TcpMaxSynBacklog: Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int `json:"netIpv4TcpMaxSynBacklog,omitempty"`

	//NetIpv4TcpMaxTwBuckets: Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int `json:"netIpv4TcpMaxTwBuckets,omitempty"`

	//NetIpv4TcpTwReuse: Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `json:"netIpv4TcpTwReuse,omitempty"`

	//NetIpv4TcpkeepaliveIntvl: Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int `json:"netIpv4TcpkeepaliveIntvl,omitempty"`

	//NetNetfilterNfConntrackBuckets: Sysctl setting
	//net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int `json:"netNetfilterNfConntrackBuckets,omitempty"`

	//NetNetfilterNfConntrackMax: Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int `json:"netNetfilterNfConntrackMax,omitempty"`

	//VmMaxMapCount: Sysctl setting vm.max_map_count.
	VmMaxMapCount *int `json:"vmMaxMapCount,omitempty"`

	//VmSwappiness: Sysctl setting vm.swappiness.
	VmSwappiness *int `json:"vmSwappiness,omitempty"`

	//VmVfsCachePressure: Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int `json:"vmVfsCachePressure,omitempty"`
}

var _ genruntime.FromARMConverter = &SysctlConfig_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sysctlConfigStatus *SysctlConfig_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SysctlConfig_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sysctlConfigStatus *SysctlConfig_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SysctlConfig_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SysctlConfig_StatusARM, got %T", armInput)
	}

	// Set property ‘FsAioMaxNr’:
	if typedInput.FsAioMaxNr != nil {
		fsAioMaxNr := *typedInput.FsAioMaxNr
		sysctlConfigStatus.FsAioMaxNr = &fsAioMaxNr
	}

	// Set property ‘FsFileMax’:
	if typedInput.FsFileMax != nil {
		fsFileMax := *typedInput.FsFileMax
		sysctlConfigStatus.FsFileMax = &fsFileMax
	}

	// Set property ‘FsInotifyMaxUserWatches’:
	if typedInput.FsInotifyMaxUserWatches != nil {
		fsInotifyMaxUserWatches := *typedInput.FsInotifyMaxUserWatches
		sysctlConfigStatus.FsInotifyMaxUserWatches = &fsInotifyMaxUserWatches
	}

	// Set property ‘FsNrOpen’:
	if typedInput.FsNrOpen != nil {
		fsNrOpen := *typedInput.FsNrOpen
		sysctlConfigStatus.FsNrOpen = &fsNrOpen
	}

	// Set property ‘KernelThreadsMax’:
	if typedInput.KernelThreadsMax != nil {
		kernelThreadsMax := *typedInput.KernelThreadsMax
		sysctlConfigStatus.KernelThreadsMax = &kernelThreadsMax
	}

	// Set property ‘NetCoreNetdevMaxBacklog’:
	if typedInput.NetCoreNetdevMaxBacklog != nil {
		netCoreNetdevMaxBacklog := *typedInput.NetCoreNetdevMaxBacklog
		sysctlConfigStatus.NetCoreNetdevMaxBacklog = &netCoreNetdevMaxBacklog
	}

	// Set property ‘NetCoreOptmemMax’:
	if typedInput.NetCoreOptmemMax != nil {
		netCoreOptmemMax := *typedInput.NetCoreOptmemMax
		sysctlConfigStatus.NetCoreOptmemMax = &netCoreOptmemMax
	}

	// Set property ‘NetCoreRmemDefault’:
	if typedInput.NetCoreRmemDefault != nil {
		netCoreRmemDefault := *typedInput.NetCoreRmemDefault
		sysctlConfigStatus.NetCoreRmemDefault = &netCoreRmemDefault
	}

	// Set property ‘NetCoreRmemMax’:
	if typedInput.NetCoreRmemMax != nil {
		netCoreRmemMax := *typedInput.NetCoreRmemMax
		sysctlConfigStatus.NetCoreRmemMax = &netCoreRmemMax
	}

	// Set property ‘NetCoreSomaxconn’:
	if typedInput.NetCoreSomaxconn != nil {
		netCoreSomaxconn := *typedInput.NetCoreSomaxconn
		sysctlConfigStatus.NetCoreSomaxconn = &netCoreSomaxconn
	}

	// Set property ‘NetCoreWmemDefault’:
	if typedInput.NetCoreWmemDefault != nil {
		netCoreWmemDefault := *typedInput.NetCoreWmemDefault
		sysctlConfigStatus.NetCoreWmemDefault = &netCoreWmemDefault
	}

	// Set property ‘NetCoreWmemMax’:
	if typedInput.NetCoreWmemMax != nil {
		netCoreWmemMax := *typedInput.NetCoreWmemMax
		sysctlConfigStatus.NetCoreWmemMax = &netCoreWmemMax
	}

	// Set property ‘NetIpv4IpLocalPortRange’:
	if typedInput.NetIpv4IpLocalPortRange != nil {
		netIpv4IpLocalPortRange := *typedInput.NetIpv4IpLocalPortRange
		sysctlConfigStatus.NetIpv4IpLocalPortRange = &netIpv4IpLocalPortRange
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh1’:
	if typedInput.NetIpv4NeighDefaultGcThresh1 != nil {
		netIpv4NeighDefaultGcThresh1 := *typedInput.NetIpv4NeighDefaultGcThresh1
		sysctlConfigStatus.NetIpv4NeighDefaultGcThresh1 = &netIpv4NeighDefaultGcThresh1
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh2’:
	if typedInput.NetIpv4NeighDefaultGcThresh2 != nil {
		netIpv4NeighDefaultGcThresh2 := *typedInput.NetIpv4NeighDefaultGcThresh2
		sysctlConfigStatus.NetIpv4NeighDefaultGcThresh2 = &netIpv4NeighDefaultGcThresh2
	}

	// Set property ‘NetIpv4NeighDefaultGcThresh3’:
	if typedInput.NetIpv4NeighDefaultGcThresh3 != nil {
		netIpv4NeighDefaultGcThresh3 := *typedInput.NetIpv4NeighDefaultGcThresh3
		sysctlConfigStatus.NetIpv4NeighDefaultGcThresh3 = &netIpv4NeighDefaultGcThresh3
	}

	// Set property ‘NetIpv4TcpFinTimeout’:
	if typedInput.NetIpv4TcpFinTimeout != nil {
		netIpv4TcpFinTimeout := *typedInput.NetIpv4TcpFinTimeout
		sysctlConfigStatus.NetIpv4TcpFinTimeout = &netIpv4TcpFinTimeout
	}

	// Set property ‘NetIpv4TcpKeepaliveProbes’:
	if typedInput.NetIpv4TcpKeepaliveProbes != nil {
		netIpv4TcpKeepaliveProbes := *typedInput.NetIpv4TcpKeepaliveProbes
		sysctlConfigStatus.NetIpv4TcpKeepaliveProbes = &netIpv4TcpKeepaliveProbes
	}

	// Set property ‘NetIpv4TcpKeepaliveTime’:
	if typedInput.NetIpv4TcpKeepaliveTime != nil {
		netIpv4TcpKeepaliveTime := *typedInput.NetIpv4TcpKeepaliveTime
		sysctlConfigStatus.NetIpv4TcpKeepaliveTime = &netIpv4TcpKeepaliveTime
	}

	// Set property ‘NetIpv4TcpMaxSynBacklog’:
	if typedInput.NetIpv4TcpMaxSynBacklog != nil {
		netIpv4TcpMaxSynBacklog := *typedInput.NetIpv4TcpMaxSynBacklog
		sysctlConfigStatus.NetIpv4TcpMaxSynBacklog = &netIpv4TcpMaxSynBacklog
	}

	// Set property ‘NetIpv4TcpMaxTwBuckets’:
	if typedInput.NetIpv4TcpMaxTwBuckets != nil {
		netIpv4TcpMaxTwBuckets := *typedInput.NetIpv4TcpMaxTwBuckets
		sysctlConfigStatus.NetIpv4TcpMaxTwBuckets = &netIpv4TcpMaxTwBuckets
	}

	// Set property ‘NetIpv4TcpTwReuse’:
	if typedInput.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *typedInput.NetIpv4TcpTwReuse
		sysctlConfigStatus.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	}

	// Set property ‘NetIpv4TcpkeepaliveIntvl’:
	if typedInput.NetIpv4TcpkeepaliveIntvl != nil {
		netIpv4TcpkeepaliveIntvl := *typedInput.NetIpv4TcpkeepaliveIntvl
		sysctlConfigStatus.NetIpv4TcpkeepaliveIntvl = &netIpv4TcpkeepaliveIntvl
	}

	// Set property ‘NetNetfilterNfConntrackBuckets’:
	if typedInput.NetNetfilterNfConntrackBuckets != nil {
		netNetfilterNfConntrackBuckets := *typedInput.NetNetfilterNfConntrackBuckets
		sysctlConfigStatus.NetNetfilterNfConntrackBuckets = &netNetfilterNfConntrackBuckets
	}

	// Set property ‘NetNetfilterNfConntrackMax’:
	if typedInput.NetNetfilterNfConntrackMax != nil {
		netNetfilterNfConntrackMax := *typedInput.NetNetfilterNfConntrackMax
		sysctlConfigStatus.NetNetfilterNfConntrackMax = &netNetfilterNfConntrackMax
	}

	// Set property ‘VmMaxMapCount’:
	if typedInput.VmMaxMapCount != nil {
		vmMaxMapCount := *typedInput.VmMaxMapCount
		sysctlConfigStatus.VmMaxMapCount = &vmMaxMapCount
	}

	// Set property ‘VmSwappiness’:
	if typedInput.VmSwappiness != nil {
		vmSwappiness := *typedInput.VmSwappiness
		sysctlConfigStatus.VmSwappiness = &vmSwappiness
	}

	// Set property ‘VmVfsCachePressure’:
	if typedInput.VmVfsCachePressure != nil {
		vmVfsCachePressure := *typedInput.VmVfsCachePressure
		sysctlConfigStatus.VmVfsCachePressure = &vmVfsCachePressure
	}

	// No error
	return nil
}

// AssignPropertiesFromSysctlConfigStatus populates our SysctlConfig_Status from the provided source SysctlConfig_Status
func (sysctlConfigStatus *SysctlConfig_Status) AssignPropertiesFromSysctlConfigStatus(source *v1alpha1api20210501storage.SysctlConfig_Status) error {

	// FsAioMaxNr
	sysctlConfigStatus.FsAioMaxNr = genruntime.ClonePointerToInt(source.FsAioMaxNr)

	// FsFileMax
	sysctlConfigStatus.FsFileMax = genruntime.ClonePointerToInt(source.FsFileMax)

	// FsInotifyMaxUserWatches
	sysctlConfigStatus.FsInotifyMaxUserWatches = genruntime.ClonePointerToInt(source.FsInotifyMaxUserWatches)

	// FsNrOpen
	sysctlConfigStatus.FsNrOpen = genruntime.ClonePointerToInt(source.FsNrOpen)

	// KernelThreadsMax
	sysctlConfigStatus.KernelThreadsMax = genruntime.ClonePointerToInt(source.KernelThreadsMax)

	// NetCoreNetdevMaxBacklog
	sysctlConfigStatus.NetCoreNetdevMaxBacklog = genruntime.ClonePointerToInt(source.NetCoreNetdevMaxBacklog)

	// NetCoreOptmemMax
	sysctlConfigStatus.NetCoreOptmemMax = genruntime.ClonePointerToInt(source.NetCoreOptmemMax)

	// NetCoreRmemDefault
	sysctlConfigStatus.NetCoreRmemDefault = genruntime.ClonePointerToInt(source.NetCoreRmemDefault)

	// NetCoreRmemMax
	sysctlConfigStatus.NetCoreRmemMax = genruntime.ClonePointerToInt(source.NetCoreRmemMax)

	// NetCoreSomaxconn
	sysctlConfigStatus.NetCoreSomaxconn = genruntime.ClonePointerToInt(source.NetCoreSomaxconn)

	// NetCoreWmemDefault
	sysctlConfigStatus.NetCoreWmemDefault = genruntime.ClonePointerToInt(source.NetCoreWmemDefault)

	// NetCoreWmemMax
	sysctlConfigStatus.NetCoreWmemMax = genruntime.ClonePointerToInt(source.NetCoreWmemMax)

	// NetIpv4IpLocalPortRange
	sysctlConfigStatus.NetIpv4IpLocalPortRange = genruntime.ClonePointerToString(source.NetIpv4IpLocalPortRange)

	// NetIpv4NeighDefaultGcThresh1
	sysctlConfigStatus.NetIpv4NeighDefaultGcThresh1 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh1)

	// NetIpv4NeighDefaultGcThresh2
	sysctlConfigStatus.NetIpv4NeighDefaultGcThresh2 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh2)

	// NetIpv4NeighDefaultGcThresh3
	sysctlConfigStatus.NetIpv4NeighDefaultGcThresh3 = genruntime.ClonePointerToInt(source.NetIpv4NeighDefaultGcThresh3)

	// NetIpv4TcpFinTimeout
	sysctlConfigStatus.NetIpv4TcpFinTimeout = genruntime.ClonePointerToInt(source.NetIpv4TcpFinTimeout)

	// NetIpv4TcpKeepaliveProbes
	sysctlConfigStatus.NetIpv4TcpKeepaliveProbes = genruntime.ClonePointerToInt(source.NetIpv4TcpKeepaliveProbes)

	// NetIpv4TcpKeepaliveTime
	sysctlConfigStatus.NetIpv4TcpKeepaliveTime = genruntime.ClonePointerToInt(source.NetIpv4TcpKeepaliveTime)

	// NetIpv4TcpMaxSynBacklog
	sysctlConfigStatus.NetIpv4TcpMaxSynBacklog = genruntime.ClonePointerToInt(source.NetIpv4TcpMaxSynBacklog)

	// NetIpv4TcpMaxTwBuckets
	sysctlConfigStatus.NetIpv4TcpMaxTwBuckets = genruntime.ClonePointerToInt(source.NetIpv4TcpMaxTwBuckets)

	// NetIpv4TcpTwReuse
	if source.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *source.NetIpv4TcpTwReuse
		sysctlConfigStatus.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	} else {
		sysctlConfigStatus.NetIpv4TcpTwReuse = nil
	}

	// NetIpv4TcpkeepaliveIntvl
	sysctlConfigStatus.NetIpv4TcpkeepaliveIntvl = genruntime.ClonePointerToInt(source.NetIpv4TcpkeepaliveIntvl)

	// NetNetfilterNfConntrackBuckets
	sysctlConfigStatus.NetNetfilterNfConntrackBuckets = genruntime.ClonePointerToInt(source.NetNetfilterNfConntrackBuckets)

	// NetNetfilterNfConntrackMax
	sysctlConfigStatus.NetNetfilterNfConntrackMax = genruntime.ClonePointerToInt(source.NetNetfilterNfConntrackMax)

	// VmMaxMapCount
	sysctlConfigStatus.VmMaxMapCount = genruntime.ClonePointerToInt(source.VmMaxMapCount)

	// VmSwappiness
	sysctlConfigStatus.VmSwappiness = genruntime.ClonePointerToInt(source.VmSwappiness)

	// VmVfsCachePressure
	sysctlConfigStatus.VmVfsCachePressure = genruntime.ClonePointerToInt(source.VmVfsCachePressure)

	// No error
	return nil
}

// AssignPropertiesToSysctlConfigStatus populates the provided destination SysctlConfig_Status from our SysctlConfig_Status
func (sysctlConfigStatus *SysctlConfig_Status) AssignPropertiesToSysctlConfigStatus(destination *v1alpha1api20210501storage.SysctlConfig_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FsAioMaxNr
	destination.FsAioMaxNr = genruntime.ClonePointerToInt(sysctlConfigStatus.FsAioMaxNr)

	// FsFileMax
	destination.FsFileMax = genruntime.ClonePointerToInt(sysctlConfigStatus.FsFileMax)

	// FsInotifyMaxUserWatches
	destination.FsInotifyMaxUserWatches = genruntime.ClonePointerToInt(sysctlConfigStatus.FsInotifyMaxUserWatches)

	// FsNrOpen
	destination.FsNrOpen = genruntime.ClonePointerToInt(sysctlConfigStatus.FsNrOpen)

	// KernelThreadsMax
	destination.KernelThreadsMax = genruntime.ClonePointerToInt(sysctlConfigStatus.KernelThreadsMax)

	// NetCoreNetdevMaxBacklog
	destination.NetCoreNetdevMaxBacklog = genruntime.ClonePointerToInt(sysctlConfigStatus.NetCoreNetdevMaxBacklog)

	// NetCoreOptmemMax
	destination.NetCoreOptmemMax = genruntime.ClonePointerToInt(sysctlConfigStatus.NetCoreOptmemMax)

	// NetCoreRmemDefault
	destination.NetCoreRmemDefault = genruntime.ClonePointerToInt(sysctlConfigStatus.NetCoreRmemDefault)

	// NetCoreRmemMax
	destination.NetCoreRmemMax = genruntime.ClonePointerToInt(sysctlConfigStatus.NetCoreRmemMax)

	// NetCoreSomaxconn
	destination.NetCoreSomaxconn = genruntime.ClonePointerToInt(sysctlConfigStatus.NetCoreSomaxconn)

	// NetCoreWmemDefault
	destination.NetCoreWmemDefault = genruntime.ClonePointerToInt(sysctlConfigStatus.NetCoreWmemDefault)

	// NetCoreWmemMax
	destination.NetCoreWmemMax = genruntime.ClonePointerToInt(sysctlConfigStatus.NetCoreWmemMax)

	// NetIpv4IpLocalPortRange
	destination.NetIpv4IpLocalPortRange = genruntime.ClonePointerToString(sysctlConfigStatus.NetIpv4IpLocalPortRange)

	// NetIpv4NeighDefaultGcThresh1
	destination.NetIpv4NeighDefaultGcThresh1 = genruntime.ClonePointerToInt(sysctlConfigStatus.NetIpv4NeighDefaultGcThresh1)

	// NetIpv4NeighDefaultGcThresh2
	destination.NetIpv4NeighDefaultGcThresh2 = genruntime.ClonePointerToInt(sysctlConfigStatus.NetIpv4NeighDefaultGcThresh2)

	// NetIpv4NeighDefaultGcThresh3
	destination.NetIpv4NeighDefaultGcThresh3 = genruntime.ClonePointerToInt(sysctlConfigStatus.NetIpv4NeighDefaultGcThresh3)

	// NetIpv4TcpFinTimeout
	destination.NetIpv4TcpFinTimeout = genruntime.ClonePointerToInt(sysctlConfigStatus.NetIpv4TcpFinTimeout)

	// NetIpv4TcpKeepaliveProbes
	destination.NetIpv4TcpKeepaliveProbes = genruntime.ClonePointerToInt(sysctlConfigStatus.NetIpv4TcpKeepaliveProbes)

	// NetIpv4TcpKeepaliveTime
	destination.NetIpv4TcpKeepaliveTime = genruntime.ClonePointerToInt(sysctlConfigStatus.NetIpv4TcpKeepaliveTime)

	// NetIpv4TcpMaxSynBacklog
	destination.NetIpv4TcpMaxSynBacklog = genruntime.ClonePointerToInt(sysctlConfigStatus.NetIpv4TcpMaxSynBacklog)

	// NetIpv4TcpMaxTwBuckets
	destination.NetIpv4TcpMaxTwBuckets = genruntime.ClonePointerToInt(sysctlConfigStatus.NetIpv4TcpMaxTwBuckets)

	// NetIpv4TcpTwReuse
	if sysctlConfigStatus.NetIpv4TcpTwReuse != nil {
		netIpv4TcpTwReuse := *sysctlConfigStatus.NetIpv4TcpTwReuse
		destination.NetIpv4TcpTwReuse = &netIpv4TcpTwReuse
	} else {
		destination.NetIpv4TcpTwReuse = nil
	}

	// NetIpv4TcpkeepaliveIntvl
	destination.NetIpv4TcpkeepaliveIntvl = genruntime.ClonePointerToInt(sysctlConfigStatus.NetIpv4TcpkeepaliveIntvl)

	// NetNetfilterNfConntrackBuckets
	destination.NetNetfilterNfConntrackBuckets = genruntime.ClonePointerToInt(sysctlConfigStatus.NetNetfilterNfConntrackBuckets)

	// NetNetfilterNfConntrackMax
	destination.NetNetfilterNfConntrackMax = genruntime.ClonePointerToInt(sysctlConfigStatus.NetNetfilterNfConntrackMax)

	// VmMaxMapCount
	destination.VmMaxMapCount = genruntime.ClonePointerToInt(sysctlConfigStatus.VmMaxMapCount)

	// VmSwappiness
	destination.VmSwappiness = genruntime.ClonePointerToInt(sysctlConfigStatus.VmSwappiness)

	// VmVfsCachePressure
	destination.VmVfsCachePressure = genruntime.ClonePointerToInt(sysctlConfigStatus.VmVfsCachePressure)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&ManagedClustersAgentPool{}, &ManagedClustersAgentPoolList{})
}
