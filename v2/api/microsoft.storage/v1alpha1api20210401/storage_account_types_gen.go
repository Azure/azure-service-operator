// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210401

import (
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/apis/microsoft.storage/v1alpha1api20210401storage"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/reflecthelpers"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.storage.azure.com,resources=storageaccounts,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.storage.azure.com,resources={storageaccounts/status,storageaccounts/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/resourceDefinitions/storageAccounts
type StorageAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccounts_Spec  `json:"spec,omitempty"`
	Status            StorageAccount_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &StorageAccount{}

// GetConditions returns the conditions of the resource
func (storageAccount *StorageAccount) GetConditions() conditions.Conditions {
	return storageAccount.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (storageAccount *StorageAccount) SetConditions(conditions conditions.Conditions) {
	storageAccount.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-storage-azure-com-v1alpha1api20210401-storageaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.storage.azure.com,resources=storageaccounts,verbs=create;update,versions=v1alpha1api20210401,name=default.v1alpha1api20210401.storageaccounts.microsoft.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &StorageAccount{}

// Default applies defaults to the StorageAccount resource
func (storageAccount *StorageAccount) Default() {
	storageAccount.defaultImpl()
	var temp interface{} = storageAccount
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (storageAccount *StorageAccount) defaultAzureName() {
	if storageAccount.Spec.AzureName == "" {
		storageAccount.Spec.AzureName = storageAccount.Name
	}
}

// defaultImpl applies the code generated defaults to the StorageAccount resource
func (storageAccount *StorageAccount) defaultImpl() { storageAccount.defaultAzureName() }

var _ genruntime.KubernetesResource = &StorageAccount{}

// AzureName returns the Azure name of the resource
func (storageAccount *StorageAccount) AzureName() string {
	return storageAccount.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (storageAccount *StorageAccount) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (storageAccount *StorageAccount) GetSpec() genruntime.ConvertibleSpec {
	return &storageAccount.Spec
}

// GetStatus returns the status of this resource
func (storageAccount *StorageAccount) GetStatus() genruntime.ConvertibleStatus {
	return &storageAccount.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Storage/storageAccounts"
func (storageAccount *StorageAccount) GetType() string {
	return "Microsoft.Storage/storageAccounts"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (storageAccount *StorageAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(storageAccount.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: storageAccount.Namespace, Name: storageAccount.Spec.Owner.Name}
}

// SetStatus sets the status of this resource
func (storageAccount *StorageAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*StorageAccount_Status); ok {
		storageAccount.Status = *st
		return nil
	}

	// Convert status to required version
	var st StorageAccount_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	storageAccount.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-storage-azure-com-v1alpha1api20210401-storageaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.storage.azure.com,resources=storageaccounts,verbs=create;update,versions=v1alpha1api20210401,name=validate.v1alpha1api20210401.storageaccounts.microsoft.storage.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &StorageAccount{}

// ValidateCreate validates the creation of the resource
func (storageAccount *StorageAccount) ValidateCreate() error {
	validations := storageAccount.createValidations()
	var temp interface{} = storageAccount
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (storageAccount *StorageAccount) ValidateDelete() error {
	validations := storageAccount.deleteValidations()
	var temp interface{} = storageAccount
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (storageAccount *StorageAccount) ValidateUpdate(old runtime.Object) error {
	validations := storageAccount.updateValidations()
	var temp interface{} = storageAccount
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (storageAccount *StorageAccount) createValidations() []func() error {
	return []func() error{storageAccount.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (storageAccount *StorageAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (storageAccount *StorageAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return storageAccount.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (storageAccount *StorageAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&storageAccount.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromStorageAccount populates our StorageAccount from the provided source StorageAccount
func (storageAccount *StorageAccount) AssignPropertiesFromStorageAccount(source *v1alpha1api20210401storage.StorageAccount) error {

	// Spec
	var spec StorageAccounts_Spec
	err := spec.AssignPropertiesFromStorageAccountsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromStorageAccountsSpec()")
	}
	storageAccount.Spec = spec

	// Status
	var status StorageAccount_Status
	err = status.AssignPropertiesFromStorageAccountStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromStorageAccountStatus()")
	}
	storageAccount.Status = status

	// No error
	return nil
}

// AssignPropertiesToStorageAccount populates the provided destination StorageAccount from our StorageAccount
func (storageAccount *StorageAccount) AssignPropertiesToStorageAccount(destination *v1alpha1api20210401storage.StorageAccount) error {

	// Spec
	var spec v1alpha1api20210401storage.StorageAccounts_Spec
	err := storageAccount.Spec.AssignPropertiesToStorageAccountsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToStorageAccountsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210401storage.StorageAccount_Status
	err = storageAccount.Status.AssignPropertiesToStorageAccountStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToStorageAccountStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (storageAccount *StorageAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: storageAccount.Spec.OriginalVersion(),
		Kind:    "StorageAccount",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/resourceDefinitions/storageAccounts
type StorageAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccount `json:"items"`
}

//Generated from:
type StorageAccount_Status struct {
	//AccessTier: Required for storage accounts where kind = BlobStorage. The access
	//tier used for billing.
	AccessTier *StorageAccountPropertiesStatusAccessTier `json:"accessTier,omitempty"`

	//AllowBlobPublicAccess: Allow or disallow public access to all blobs or
	//containers in the storage account. The default interpretation is true for this
	//property.
	AllowBlobPublicAccess *bool `json:"allowBlobPublicAccess,omitempty"`

	//AllowCrossTenantReplication: Allow or disallow cross AAD tenant object
	//replication. The default interpretation is true for this property.
	AllowCrossTenantReplication *bool `json:"allowCrossTenantReplication,omitempty"`

	//AllowSharedKeyAccess: Indicates whether the storage account permits requests to
	//be authorized with the account access key via Shared Key. If false, then all
	//requests, including shared access signatures, must be authorized with Azure
	//Active Directory (Azure AD). The default value is null, which is equivalent to
	//true.
	AllowSharedKeyAccess *bool `json:"allowSharedKeyAccess,omitempty"`

	//AzureFilesIdentityBasedAuthentication: Provides the identity based
	//authentication settings for Azure Files.
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication_Status `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	//BlobRestoreStatus: Blob restore status
	BlobRestoreStatus *BlobRestoreStatus_Status `json:"blobRestoreStatus,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreationTime: Gets the creation date and time of the storage account in UTC.
	CreationTime *string `json:"creationTime,omitempty"`

	//CustomDomain: Gets the custom domain the user assigned to this storage account.
	CustomDomain *CustomDomain_Status `json:"customDomain,omitempty"`

	//Encryption: Gets the encryption settings on the account. If unspecified, the
	//account is unencrypted.
	Encryption *Encryption_Status `json:"encryption,omitempty"`

	//ExtendedLocation: The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//FailoverInProgress: If the failover is in progress, the value will be true,
	//otherwise, it will be null.
	FailoverInProgress *bool `json:"failoverInProgress,omitempty"`

	//GeoReplicationStats: Geo Replication Stats
	GeoReplicationStats *GeoReplicationStats_Status `json:"geoReplicationStats,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Identity: The identity of the resource.
	Identity *Identity_Status `json:"identity,omitempty"`

	//IsHnsEnabled: Account HierarchicalNamespace enabled if sets to true.
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty"`

	//IsNfsV3Enabled: NFS 3.0 protocol support enabled if set to true.
	IsNfsV3Enabled *bool `json:"isNfsV3Enabled,omitempty"`

	//KeyCreationTime: Storage account keys creation time.
	KeyCreationTime *KeyCreationTime_Status `json:"keyCreationTime,omitempty"`

	//KeyPolicy: KeyPolicy assigned to the storage account.
	KeyPolicy *KeyPolicy_Status `json:"keyPolicy,omitempty"`

	//Kind: Gets the Kind.
	Kind *StorageAccountStatusKind `json:"kind,omitempty"`

	//LargeFileSharesState: Allow large file shares if sets to Enabled. It cannot be
	//disabled once it is enabled.
	LargeFileSharesState *StorageAccountPropertiesStatusLargeFileSharesState `json:"largeFileSharesState,omitempty"`

	//LastGeoFailoverTime: Gets the timestamp of the most recent instance of a
	//failover to the secondary location. Only the most recent timestamp is retained.
	//This element is not returned if there has never been a failover instance. Only
	//available if the accountType is Standard_GRS or Standard_RAGRS.
	LastGeoFailoverTime *string `json:"lastGeoFailoverTime,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MinimumTlsVersion: Set the minimum TLS version to be permitted on requests to
	//storage. The default interpretation is TLS 1.0 for this property.
	MinimumTlsVersion *StorageAccountPropertiesStatusMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//NetworkAcls: Network rule set
	NetworkAcls *NetworkRuleSet_Status `json:"networkAcls,omitempty"`

	//PrimaryEndpoints: Gets the URLs that are used to perform a retrieval of a public
	//blob, queue, or table object. Note that Standard_ZRS and Premium_LRS accounts
	//only return the blob endpoint.
	PrimaryEndpoints *Endpoints_Status `json:"primaryEndpoints,omitempty"`

	//PrimaryLocation: Gets the location of the primary data center for the storage
	//account.
	PrimaryLocation *string `json:"primaryLocation,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connection associated with
	//the specified storage account
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: Gets the status of the storage account at the time the
	//operation was called.
	ProvisioningState *StorageAccountPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//RoutingPreference: Maintains information about the network routing choice opted
	//by the user for data transfer
	RoutingPreference *RoutingPreference_Status `json:"routingPreference,omitempty"`

	//SasPolicy: SasPolicy assigned to the storage account.
	SasPolicy *SasPolicy_Status `json:"sasPolicy,omitempty"`

	//SecondaryEndpoints: Gets the URLs that are used to perform a retrieval of a
	//public blob, queue, or table object from the secondary location of the storage
	//account. Only available if the SKU name is Standard_RAGRS.
	SecondaryEndpoints *Endpoints_Status `json:"secondaryEndpoints,omitempty"`

	//SecondaryLocation: Gets the location of the geo-replicated secondary for the
	//storage account. Only available if the accountType is Standard_GRS or
	//Standard_RAGRS.
	SecondaryLocation *string `json:"secondaryLocation,omitempty"`

	//Sku: Gets the SKU.
	Sku *Sku_Status `json:"sku,omitempty"`

	//StatusOfPrimary: Gets the status indicating whether the primary location of the
	//storage account is available or unavailable.
	StatusOfPrimary *StorageAccountPropertiesStatusStatusOfPrimary `json:"statusOfPrimary,omitempty"`

	//StatusOfSecondary: Gets the status indicating whether the secondary location of
	//the storage account is available or unavailable. Only available if the SKU name
	//is Standard_GRS or Standard_RAGRS.
	StatusOfSecondary *StorageAccountPropertiesStatusStatusOfSecondary `json:"statusOfSecondary,omitempty"`

	//SupportsHttpsTrafficOnly: Allows https traffic only to storage service if sets
	//to true.
	SupportsHttpsTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &StorageAccount_Status{}

// ConvertStatusFrom populates our StorageAccount_Status from the provided source
func (storageAccountStatus *StorageAccount_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210401storage.StorageAccount_Status)
	if ok {
		// Populate our instance from source
		return storageAccountStatus.AssignPropertiesFromStorageAccountStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.StorageAccount_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = storageAccountStatus.AssignPropertiesFromStorageAccountStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our StorageAccount_Status
func (storageAccountStatus *StorageAccount_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210401storage.StorageAccount_Status)
	if ok {
		// Populate destination from our instance
		return storageAccountStatus.AssignPropertiesToStorageAccountStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.StorageAccount_Status{}
	err := storageAccountStatus.AssignPropertiesToStorageAccountStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &StorageAccount_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageAccountStatus *StorageAccount_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccount_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageAccountStatus *StorageAccount_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccount_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccount_StatusARM, got %T", armInput)
	}

	// Set property ‘AccessTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			storageAccountStatus.AccessTier = &accessTier
		}
	}

	// Set property ‘AllowBlobPublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowBlobPublicAccess != nil {
			allowBlobPublicAccess := *typedInput.Properties.AllowBlobPublicAccess
			storageAccountStatus.AllowBlobPublicAccess = &allowBlobPublicAccess
		}
	}

	// Set property ‘AllowCrossTenantReplication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowCrossTenantReplication != nil {
			allowCrossTenantReplication := *typedInput.Properties.AllowCrossTenantReplication
			storageAccountStatus.AllowCrossTenantReplication = &allowCrossTenantReplication
		}
	}

	// Set property ‘AllowSharedKeyAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowSharedKeyAccess != nil {
			allowSharedKeyAccess := *typedInput.Properties.AllowSharedKeyAccess
			storageAccountStatus.AllowSharedKeyAccess = &allowSharedKeyAccess
		}
	}

	// Set property ‘AzureFilesIdentityBasedAuthentication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AzureFilesIdentityBasedAuthentication != nil {
			var azureFilesIdentityBasedAuthentication1 AzureFilesIdentityBasedAuthentication_Status
			err := azureFilesIdentityBasedAuthentication1.PopulateFromARM(owner, *typedInput.Properties.AzureFilesIdentityBasedAuthentication)
			if err != nil {
				return err
			}
			azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthentication1
			storageAccountStatus.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
		}
	}

	// Set property ‘BlobRestoreStatus’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BlobRestoreStatus != nil {
			var blobRestoreStatus1 BlobRestoreStatus_Status
			err := blobRestoreStatus1.PopulateFromARM(owner, *typedInput.Properties.BlobRestoreStatus)
			if err != nil {
				return err
			}
			blobRestoreStatus := blobRestoreStatus1
			storageAccountStatus.BlobRestoreStatus = &blobRestoreStatus
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationTime != nil {
			creationTime := *typedInput.Properties.CreationTime
			storageAccountStatus.CreationTime = &creationTime
		}
	}

	// Set property ‘CustomDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomDomain != nil {
			var customDomain1 CustomDomain_Status
			err := customDomain1.PopulateFromARM(owner, *typedInput.Properties.CustomDomain)
			if err != nil {
				return err
			}
			customDomain := customDomain1
			storageAccountStatus.CustomDomain = &customDomain
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			storageAccountStatus.Encryption = &encryption
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		storageAccountStatus.ExtendedLocation = &extendedLocation
	}

	// Set property ‘FailoverInProgress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FailoverInProgress != nil {
			failoverInProgress := *typedInput.Properties.FailoverInProgress
			storageAccountStatus.FailoverInProgress = &failoverInProgress
		}
	}

	// Set property ‘GeoReplicationStats’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.GeoReplicationStats != nil {
			var geoReplicationStats1 GeoReplicationStats_Status
			err := geoReplicationStats1.PopulateFromARM(owner, *typedInput.Properties.GeoReplicationStats)
			if err != nil {
				return err
			}
			geoReplicationStats := geoReplicationStats1
			storageAccountStatus.GeoReplicationStats = &geoReplicationStats
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		storageAccountStatus.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		storageAccountStatus.Identity = &identity
	}

	// Set property ‘IsHnsEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHnsEnabled != nil {
			isHnsEnabled := *typedInput.Properties.IsHnsEnabled
			storageAccountStatus.IsHnsEnabled = &isHnsEnabled
		}
	}

	// Set property ‘IsNfsV3Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsNfsV3Enabled != nil {
			isNfsV3Enabled := *typedInput.Properties.IsNfsV3Enabled
			storageAccountStatus.IsNfsV3Enabled = &isNfsV3Enabled
		}
	}

	// Set property ‘KeyCreationTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyCreationTime != nil {
			var keyCreationTime1 KeyCreationTime_Status
			err := keyCreationTime1.PopulateFromARM(owner, *typedInput.Properties.KeyCreationTime)
			if err != nil {
				return err
			}
			keyCreationTime := keyCreationTime1
			storageAccountStatus.KeyCreationTime = &keyCreationTime
		}
	}

	// Set property ‘KeyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyPolicy != nil {
			var keyPolicy1 KeyPolicy_Status
			err := keyPolicy1.PopulateFromARM(owner, *typedInput.Properties.KeyPolicy)
			if err != nil {
				return err
			}
			keyPolicy := keyPolicy1
			storageAccountStatus.KeyPolicy = &keyPolicy
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		storageAccountStatus.Kind = &kind
	}

	// Set property ‘LargeFileSharesState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LargeFileSharesState != nil {
			largeFileSharesState := *typedInput.Properties.LargeFileSharesState
			storageAccountStatus.LargeFileSharesState = &largeFileSharesState
		}
	}

	// Set property ‘LastGeoFailoverTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastGeoFailoverTime != nil {
			lastGeoFailoverTime := *typedInput.Properties.LastGeoFailoverTime
			storageAccountStatus.LastGeoFailoverTime = &lastGeoFailoverTime
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		storageAccountStatus.Location = &location
	}

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			storageAccountStatus.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		storageAccountStatus.Name = &name
	}

	// Set property ‘NetworkAcls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAcls != nil {
			var networkAcls1 NetworkRuleSet_Status
			err := networkAcls1.PopulateFromARM(owner, *typedInput.Properties.NetworkAcls)
			if err != nil {
				return err
			}
			networkAcls := networkAcls1
			storageAccountStatus.NetworkAcls = &networkAcls
		}
	}

	// Set property ‘PrimaryEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrimaryEndpoints != nil {
			var primaryEndpoints1 Endpoints_Status
			err := primaryEndpoints1.PopulateFromARM(owner, *typedInput.Properties.PrimaryEndpoints)
			if err != nil {
				return err
			}
			primaryEndpoints := primaryEndpoints1
			storageAccountStatus.PrimaryEndpoints = &primaryEndpoints
		}
	}

	// Set property ‘PrimaryLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrimaryLocation != nil {
			primaryLocation := *typedInput.Properties.PrimaryLocation
			storageAccountStatus.PrimaryLocation = &primaryLocation
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			storageAccountStatus.PrivateEndpointConnections = append(storageAccountStatus.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			storageAccountStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘RoutingPreference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RoutingPreference != nil {
			var routingPreference1 RoutingPreference_Status
			err := routingPreference1.PopulateFromARM(owner, *typedInput.Properties.RoutingPreference)
			if err != nil {
				return err
			}
			routingPreference := routingPreference1
			storageAccountStatus.RoutingPreference = &routingPreference
		}
	}

	// Set property ‘SasPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SasPolicy != nil {
			var sasPolicy1 SasPolicy_Status
			err := sasPolicy1.PopulateFromARM(owner, *typedInput.Properties.SasPolicy)
			if err != nil {
				return err
			}
			sasPolicy := sasPolicy1
			storageAccountStatus.SasPolicy = &sasPolicy
		}
	}

	// Set property ‘SecondaryEndpoints’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecondaryEndpoints != nil {
			var secondaryEndpoints1 Endpoints_Status
			err := secondaryEndpoints1.PopulateFromARM(owner, *typedInput.Properties.SecondaryEndpoints)
			if err != nil {
				return err
			}
			secondaryEndpoints := secondaryEndpoints1
			storageAccountStatus.SecondaryEndpoints = &secondaryEndpoints
		}
	}

	// Set property ‘SecondaryLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecondaryLocation != nil {
			secondaryLocation := *typedInput.Properties.SecondaryLocation
			storageAccountStatus.SecondaryLocation = &secondaryLocation
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		storageAccountStatus.Sku = &sku
	}

	// Set property ‘StatusOfPrimary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StatusOfPrimary != nil {
			statusOfPrimary := *typedInput.Properties.StatusOfPrimary
			storageAccountStatus.StatusOfPrimary = &statusOfPrimary
		}
	}

	// Set property ‘StatusOfSecondary’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StatusOfSecondary != nil {
			statusOfSecondary := *typedInput.Properties.StatusOfSecondary
			storageAccountStatus.StatusOfSecondary = &statusOfSecondary
		}
	}

	// Set property ‘SupportsHttpsTrafficOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportsHttpsTrafficOnly != nil {
			supportsHttpsTrafficOnly := *typedInput.Properties.SupportsHttpsTrafficOnly
			storageAccountStatus.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		storageAccountStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			storageAccountStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		storageAccountStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountStatus populates our StorageAccount_Status from the provided source StorageAccount_Status
func (storageAccountStatus *StorageAccount_Status) AssignPropertiesFromStorageAccountStatus(source *v1alpha1api20210401storage.StorageAccount_Status) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := StorageAccountPropertiesStatusAccessTier(*source.AccessTier)
		storageAccountStatus.AccessTier = &accessTier
	} else {
		storageAccountStatus.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		storageAccountStatus.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		storageAccountStatus.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		storageAccountStatus.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		storageAccountStatus.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		storageAccountStatus.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		storageAccountStatus.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication_Status
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthenticationStatus(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "populating AzureFilesIdentityBasedAuthentication from AzureFilesIdentityBasedAuthentication, calling AssignPropertiesFromAzureFilesIdentityBasedAuthenticationStatus()")
		}
		storageAccountStatus.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		storageAccountStatus.AzureFilesIdentityBasedAuthentication = nil
	}

	// BlobRestoreStatus
	if source.BlobRestoreStatus != nil {
		var blobRestoreStatus BlobRestoreStatus_Status
		err := blobRestoreStatus.AssignPropertiesFromBlobRestoreStatusStatus(source.BlobRestoreStatus)
		if err != nil {
			return errors.Wrap(err, "populating BlobRestoreStatus from BlobRestoreStatus, calling AssignPropertiesFromBlobRestoreStatusStatus()")
		}
		storageAccountStatus.BlobRestoreStatus = &blobRestoreStatus
	} else {
		storageAccountStatus.BlobRestoreStatus = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	storageAccountStatus.Conditions = conditionList

	// CreationTime
	if source.CreationTime != nil {
		creationTime := *source.CreationTime
		storageAccountStatus.CreationTime = &creationTime
	} else {
		storageAccountStatus.CreationTime = nil
	}

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain_Status
		err := customDomain.AssignPropertiesFromCustomDomainStatus(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "populating CustomDomain from CustomDomain, calling AssignPropertiesFromCustomDomainStatus()")
		}
		storageAccountStatus.CustomDomain = &customDomain
	} else {
		storageAccountStatus.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption_Status
		err := encryption.AssignPropertiesFromEncryptionStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "populating Encryption from Encryption, calling AssignPropertiesFromEncryptionStatus()")
		}
		storageAccountStatus.Encryption = &encryption
	} else {
		storageAccountStatus.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesFromExtendedLocationStatus()")
		}
		storageAccountStatus.ExtendedLocation = &extendedLocation
	} else {
		storageAccountStatus.ExtendedLocation = nil
	}

	// FailoverInProgress
	if source.FailoverInProgress != nil {
		failoverInProgress := *source.FailoverInProgress
		storageAccountStatus.FailoverInProgress = &failoverInProgress
	} else {
		storageAccountStatus.FailoverInProgress = nil
	}

	// GeoReplicationStats
	if source.GeoReplicationStats != nil {
		var geoReplicationStat GeoReplicationStats_Status
		err := geoReplicationStat.AssignPropertiesFromGeoReplicationStatsStatus(source.GeoReplicationStats)
		if err != nil {
			return errors.Wrap(err, "populating GeoReplicationStats from GeoReplicationStats, calling AssignPropertiesFromGeoReplicationStatsStatus()")
		}
		storageAccountStatus.GeoReplicationStats = &geoReplicationStat
	} else {
		storageAccountStatus.GeoReplicationStats = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		storageAccountStatus.Id = &id
	} else {
		storageAccountStatus.Id = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity_Status
		err := identity.AssignPropertiesFromIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromIdentityStatus()")
		}
		storageAccountStatus.Identity = &identity
	} else {
		storageAccountStatus.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		storageAccountStatus.IsHnsEnabled = &isHnsEnabled
	} else {
		storageAccountStatus.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		storageAccountStatus.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		storageAccountStatus.IsNfsV3Enabled = nil
	}

	// KeyCreationTime
	if source.KeyCreationTime != nil {
		var keyCreationTime KeyCreationTime_Status
		err := keyCreationTime.AssignPropertiesFromKeyCreationTimeStatus(source.KeyCreationTime)
		if err != nil {
			return errors.Wrap(err, "populating KeyCreationTime from KeyCreationTime, calling AssignPropertiesFromKeyCreationTimeStatus()")
		}
		storageAccountStatus.KeyCreationTime = &keyCreationTime
	} else {
		storageAccountStatus.KeyCreationTime = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy_Status
		err := keyPolicy.AssignPropertiesFromKeyPolicyStatus(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating KeyPolicy from KeyPolicy, calling AssignPropertiesFromKeyPolicyStatus()")
		}
		storageAccountStatus.KeyPolicy = &keyPolicy
	} else {
		storageAccountStatus.KeyPolicy = nil
	}

	// Kind
	if source.Kind != nil {
		kind := StorageAccountStatusKind(*source.Kind)
		storageAccountStatus.Kind = &kind
	} else {
		storageAccountStatus.Kind = nil
	}

	// LargeFileSharesState
	if source.LargeFileSharesState != nil {
		largeFileSharesState := StorageAccountPropertiesStatusLargeFileSharesState(*source.LargeFileSharesState)
		storageAccountStatus.LargeFileSharesState = &largeFileSharesState
	} else {
		storageAccountStatus.LargeFileSharesState = nil
	}

	// LastGeoFailoverTime
	if source.LastGeoFailoverTime != nil {
		lastGeoFailoverTime := *source.LastGeoFailoverTime
		storageAccountStatus.LastGeoFailoverTime = &lastGeoFailoverTime
	} else {
		storageAccountStatus.LastGeoFailoverTime = nil
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		storageAccountStatus.Location = &location
	} else {
		storageAccountStatus.Location = nil
	}

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := StorageAccountPropertiesStatusMinimumTlsVersion(*source.MinimumTlsVersion)
		storageAccountStatus.MinimumTlsVersion = &minimumTlsVersion
	} else {
		storageAccountStatus.MinimumTlsVersion = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		storageAccountStatus.Name = &name
	} else {
		storageAccountStatus.Name = nil
	}

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet_Status
		err := networkAcl.AssignPropertiesFromNetworkRuleSetStatus(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "populating NetworkAcls from NetworkAcls, calling AssignPropertiesFromNetworkRuleSetStatus()")
		}
		storageAccountStatus.NetworkAcls = &networkAcl
	} else {
		storageAccountStatus.NetworkAcls = nil
	}

	// PrimaryEndpoints
	if source.PrimaryEndpoints != nil {
		var primaryEndpoint Endpoints_Status
		err := primaryEndpoint.AssignPropertiesFromEndpointsStatus(source.PrimaryEndpoints)
		if err != nil {
			return errors.Wrap(err, "populating PrimaryEndpoints from PrimaryEndpoints, calling AssignPropertiesFromEndpointsStatus()")
		}
		storageAccountStatus.PrimaryEndpoints = &primaryEndpoint
	} else {
		storageAccountStatus.PrimaryEndpoints = nil
	}

	// PrimaryLocation
	if source.PrimaryLocation != nil {
		primaryLocation := *source.PrimaryLocation
		storageAccountStatus.PrimaryLocation = &primaryLocation
	} else {
		storageAccountStatus.PrimaryLocation = nil
	}

	// PrivateEndpointConnections
	privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
	for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
		// Shadow the loop variable to avoid aliasing
		privateEndpointConnectionItem := privateEndpointConnectionItem
		var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
		err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionItem)
		if err != nil {
			return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded()")
		}
		privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
	}
	storageAccountStatus.PrivateEndpointConnections = privateEndpointConnectionList

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := StorageAccountPropertiesStatusProvisioningState(*source.ProvisioningState)
		storageAccountStatus.ProvisioningState = &provisioningState
	} else {
		storageAccountStatus.ProvisioningState = nil
	}

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference_Status
		err := routingPreference.AssignPropertiesFromRoutingPreferenceStatus(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "populating RoutingPreference from RoutingPreference, calling AssignPropertiesFromRoutingPreferenceStatus()")
		}
		storageAccountStatus.RoutingPreference = &routingPreference
	} else {
		storageAccountStatus.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy_Status
		err := sasPolicy.AssignPropertiesFromSasPolicyStatus(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "populating SasPolicy from SasPolicy, calling AssignPropertiesFromSasPolicyStatus()")
		}
		storageAccountStatus.SasPolicy = &sasPolicy
	} else {
		storageAccountStatus.SasPolicy = nil
	}

	// SecondaryEndpoints
	if source.SecondaryEndpoints != nil {
		var secondaryEndpoint Endpoints_Status
		err := secondaryEndpoint.AssignPropertiesFromEndpointsStatus(source.SecondaryEndpoints)
		if err != nil {
			return errors.Wrap(err, "populating SecondaryEndpoints from SecondaryEndpoints, calling AssignPropertiesFromEndpointsStatus()")
		}
		storageAccountStatus.SecondaryEndpoints = &secondaryEndpoint
	} else {
		storageAccountStatus.SecondaryEndpoints = nil
	}

	// SecondaryLocation
	if source.SecondaryLocation != nil {
		secondaryLocation := *source.SecondaryLocation
		storageAccountStatus.SecondaryLocation = &secondaryLocation
	} else {
		storageAccountStatus.SecondaryLocation = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromSkuStatus()")
		}
		storageAccountStatus.Sku = &sku
	} else {
		storageAccountStatus.Sku = nil
	}

	// StatusOfPrimary
	if source.StatusOfPrimary != nil {
		statusOfPrimary := StorageAccountPropertiesStatusStatusOfPrimary(*source.StatusOfPrimary)
		storageAccountStatus.StatusOfPrimary = &statusOfPrimary
	} else {
		storageAccountStatus.StatusOfPrimary = nil
	}

	// StatusOfSecondary
	if source.StatusOfSecondary != nil {
		statusOfSecondary := StorageAccountPropertiesStatusStatusOfSecondary(*source.StatusOfSecondary)
		storageAccountStatus.StatusOfSecondary = &statusOfSecondary
	} else {
		storageAccountStatus.StatusOfSecondary = nil
	}

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		storageAccountStatus.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		storageAccountStatus.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	storageAccountStatus.Tags = tagMap

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		storageAccountStatus.Type = &typeVar
	} else {
		storageAccountStatus.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountStatus populates the provided destination StorageAccount_Status from our StorageAccount_Status
func (storageAccountStatus *StorageAccount_Status) AssignPropertiesToStorageAccountStatus(destination *v1alpha1api20210401storage.StorageAccount_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if storageAccountStatus.AccessTier != nil {
		accessTier := string(*storageAccountStatus.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if storageAccountStatus.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *storageAccountStatus.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if storageAccountStatus.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *storageAccountStatus.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if storageAccountStatus.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *storageAccountStatus.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if storageAccountStatus.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication_Status
		err := (*storageAccountStatus.AzureFilesIdentityBasedAuthentication).AssignPropertiesToAzureFilesIdentityBasedAuthenticationStatus(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "populating AzureFilesIdentityBasedAuthentication from AzureFilesIdentityBasedAuthentication, calling AssignPropertiesToAzureFilesIdentityBasedAuthenticationStatus()")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// BlobRestoreStatus
	if storageAccountStatus.BlobRestoreStatus != nil {
		var blobRestoreStatus v1alpha1api20210401storage.BlobRestoreStatus_Status
		err := (*storageAccountStatus.BlobRestoreStatus).AssignPropertiesToBlobRestoreStatusStatus(&blobRestoreStatus)
		if err != nil {
			return errors.Wrap(err, "populating BlobRestoreStatus from BlobRestoreStatus, calling AssignPropertiesToBlobRestoreStatusStatus()")
		}
		destination.BlobRestoreStatus = &blobRestoreStatus
	} else {
		destination.BlobRestoreStatus = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(storageAccountStatus.Conditions))
	for conditionIndex, conditionItem := range storageAccountStatus.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// CreationTime
	if storageAccountStatus.CreationTime != nil {
		creationTime := *storageAccountStatus.CreationTime
		destination.CreationTime = &creationTime
	} else {
		destination.CreationTime = nil
	}

	// CustomDomain
	if storageAccountStatus.CustomDomain != nil {
		var customDomain v1alpha1api20210401storage.CustomDomain_Status
		err := (*storageAccountStatus.CustomDomain).AssignPropertiesToCustomDomainStatus(&customDomain)
		if err != nil {
			return errors.Wrap(err, "populating CustomDomain from CustomDomain, calling AssignPropertiesToCustomDomainStatus()")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if storageAccountStatus.Encryption != nil {
		var encryption v1alpha1api20210401storage.Encryption_Status
		err := (*storageAccountStatus.Encryption).AssignPropertiesToEncryptionStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "populating Encryption from Encryption, calling AssignPropertiesToEncryptionStatus()")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if storageAccountStatus.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20210401storage.ExtendedLocation_Status
		err := (*storageAccountStatus.ExtendedLocation).AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesToExtendedLocationStatus()")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// FailoverInProgress
	if storageAccountStatus.FailoverInProgress != nil {
		failoverInProgress := *storageAccountStatus.FailoverInProgress
		destination.FailoverInProgress = &failoverInProgress
	} else {
		destination.FailoverInProgress = nil
	}

	// GeoReplicationStats
	if storageAccountStatus.GeoReplicationStats != nil {
		var geoReplicationStat v1alpha1api20210401storage.GeoReplicationStats_Status
		err := (*storageAccountStatus.GeoReplicationStats).AssignPropertiesToGeoReplicationStatsStatus(&geoReplicationStat)
		if err != nil {
			return errors.Wrap(err, "populating GeoReplicationStats from GeoReplicationStats, calling AssignPropertiesToGeoReplicationStatsStatus()")
		}
		destination.GeoReplicationStats = &geoReplicationStat
	} else {
		destination.GeoReplicationStats = nil
	}

	// Id
	if storageAccountStatus.Id != nil {
		id := *storageAccountStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Identity
	if storageAccountStatus.Identity != nil {
		var identity v1alpha1api20210401storage.Identity_Status
		err := (*storageAccountStatus.Identity).AssignPropertiesToIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToIdentityStatus()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if storageAccountStatus.IsHnsEnabled != nil {
		isHnsEnabled := *storageAccountStatus.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if storageAccountStatus.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *storageAccountStatus.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyCreationTime
	if storageAccountStatus.KeyCreationTime != nil {
		var keyCreationTime v1alpha1api20210401storage.KeyCreationTime_Status
		err := (*storageAccountStatus.KeyCreationTime).AssignPropertiesToKeyCreationTimeStatus(&keyCreationTime)
		if err != nil {
			return errors.Wrap(err, "populating KeyCreationTime from KeyCreationTime, calling AssignPropertiesToKeyCreationTimeStatus()")
		}
		destination.KeyCreationTime = &keyCreationTime
	} else {
		destination.KeyCreationTime = nil
	}

	// KeyPolicy
	if storageAccountStatus.KeyPolicy != nil {
		var keyPolicy v1alpha1api20210401storage.KeyPolicy_Status
		err := (*storageAccountStatus.KeyPolicy).AssignPropertiesToKeyPolicyStatus(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating KeyPolicy from KeyPolicy, calling AssignPropertiesToKeyPolicyStatus()")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	if storageAccountStatus.Kind != nil {
		kind := string(*storageAccountStatus.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// LargeFileSharesState
	if storageAccountStatus.LargeFileSharesState != nil {
		largeFileSharesState := string(*storageAccountStatus.LargeFileSharesState)
		destination.LargeFileSharesState = &largeFileSharesState
	} else {
		destination.LargeFileSharesState = nil
	}

	// LastGeoFailoverTime
	if storageAccountStatus.LastGeoFailoverTime != nil {
		lastGeoFailoverTime := *storageAccountStatus.LastGeoFailoverTime
		destination.LastGeoFailoverTime = &lastGeoFailoverTime
	} else {
		destination.LastGeoFailoverTime = nil
	}

	// Location
	if storageAccountStatus.Location != nil {
		location := *storageAccountStatus.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// MinimumTlsVersion
	if storageAccountStatus.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*storageAccountStatus.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// Name
	if storageAccountStatus.Name != nil {
		name := *storageAccountStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// NetworkAcls
	if storageAccountStatus.NetworkAcls != nil {
		var networkAcl v1alpha1api20210401storage.NetworkRuleSet_Status
		err := (*storageAccountStatus.NetworkAcls).AssignPropertiesToNetworkRuleSetStatus(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "populating NetworkAcls from NetworkAcls, calling AssignPropertiesToNetworkRuleSetStatus()")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// PrimaryEndpoints
	if storageAccountStatus.PrimaryEndpoints != nil {
		var primaryEndpoint v1alpha1api20210401storage.Endpoints_Status
		err := (*storageAccountStatus.PrimaryEndpoints).AssignPropertiesToEndpointsStatus(&primaryEndpoint)
		if err != nil {
			return errors.Wrap(err, "populating PrimaryEndpoints from PrimaryEndpoints, calling AssignPropertiesToEndpointsStatus()")
		}
		destination.PrimaryEndpoints = &primaryEndpoint
	} else {
		destination.PrimaryEndpoints = nil
	}

	// PrimaryLocation
	if storageAccountStatus.PrimaryLocation != nil {
		primaryLocation := *storageAccountStatus.PrimaryLocation
		destination.PrimaryLocation = &primaryLocation
	} else {
		destination.PrimaryLocation = nil
	}

	// PrivateEndpointConnections
	privateEndpointConnectionList := make([]v1alpha1api20210401storage.PrivateEndpointConnection_Status_SubResourceEmbedded, len(storageAccountStatus.PrivateEndpointConnections))
	for privateEndpointConnectionIndex, privateEndpointConnectionItem := range storageAccountStatus.PrivateEndpointConnections {
		// Shadow the loop variable to avoid aliasing
		privateEndpointConnectionItem := privateEndpointConnectionItem
		var privateEndpointConnection v1alpha1api20210401storage.PrivateEndpointConnection_Status_SubResourceEmbedded
		err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnection)
		if err != nil {
			return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded()")
		}
		privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
	}
	destination.PrivateEndpointConnections = privateEndpointConnectionList

	// ProvisioningState
	if storageAccountStatus.ProvisioningState != nil {
		provisioningState := string(*storageAccountStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RoutingPreference
	if storageAccountStatus.RoutingPreference != nil {
		var routingPreference v1alpha1api20210401storage.RoutingPreference_Status
		err := (*storageAccountStatus.RoutingPreference).AssignPropertiesToRoutingPreferenceStatus(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "populating RoutingPreference from RoutingPreference, calling AssignPropertiesToRoutingPreferenceStatus()")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if storageAccountStatus.SasPolicy != nil {
		var sasPolicy v1alpha1api20210401storage.SasPolicy_Status
		err := (*storageAccountStatus.SasPolicy).AssignPropertiesToSasPolicyStatus(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "populating SasPolicy from SasPolicy, calling AssignPropertiesToSasPolicyStatus()")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// SecondaryEndpoints
	if storageAccountStatus.SecondaryEndpoints != nil {
		var secondaryEndpoint v1alpha1api20210401storage.Endpoints_Status
		err := (*storageAccountStatus.SecondaryEndpoints).AssignPropertiesToEndpointsStatus(&secondaryEndpoint)
		if err != nil {
			return errors.Wrap(err, "populating SecondaryEndpoints from SecondaryEndpoints, calling AssignPropertiesToEndpointsStatus()")
		}
		destination.SecondaryEndpoints = &secondaryEndpoint
	} else {
		destination.SecondaryEndpoints = nil
	}

	// SecondaryLocation
	if storageAccountStatus.SecondaryLocation != nil {
		secondaryLocation := *storageAccountStatus.SecondaryLocation
		destination.SecondaryLocation = &secondaryLocation
	} else {
		destination.SecondaryLocation = nil
	}

	// Sku
	if storageAccountStatus.Sku != nil {
		var sku v1alpha1api20210401storage.Sku_Status
		err := (*storageAccountStatus.Sku).AssignPropertiesToSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToSkuStatus()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// StatusOfPrimary
	if storageAccountStatus.StatusOfPrimary != nil {
		statusOfPrimary := string(*storageAccountStatus.StatusOfPrimary)
		destination.StatusOfPrimary = &statusOfPrimary
	} else {
		destination.StatusOfPrimary = nil
	}

	// StatusOfSecondary
	if storageAccountStatus.StatusOfSecondary != nil {
		statusOfSecondary := string(*storageAccountStatus.StatusOfSecondary)
		destination.StatusOfSecondary = &statusOfSecondary
	} else {
		destination.StatusOfSecondary = nil
	}

	// SupportsHttpsTrafficOnly
	if storageAccountStatus.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *storageAccountStatus.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range storageAccountStatus.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Type
	if storageAccountStatus.Type != nil {
		typeVar := *storageAccountStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type StorageAccounts_Spec struct {
	//AccessTier: Required for storage accounts where kind = BlobStorage. The access
	//tier used for billing.
	AccessTier *StorageAccountPropertiesCreateParametersAccessTier `json:"accessTier,omitempty"`

	//AllowBlobPublicAccess: Allow or disallow public access to all blobs or
	//containers in the storage account. The default interpretation is true for this
	//property.
	AllowBlobPublicAccess *bool `json:"allowBlobPublicAccess,omitempty"`

	//AllowCrossTenantReplication: Allow or disallow cross AAD tenant object
	//replication. The default interpretation is true for this property.
	AllowCrossTenantReplication *bool `json:"allowCrossTenantReplication,omitempty"`

	//AllowSharedKeyAccess: Indicates whether the storage account permits requests to
	//be authorized with the account access key via Shared Key. If false, then all
	//requests, including shared access signatures, must be authorized with Azure
	//Active Directory (Azure AD). The default value is null, which is equivalent to
	//true.
	AllowSharedKeyAccess *bool `json:"allowSharedKeyAccess,omitempty"`

	//AzureFilesIdentityBasedAuthentication: Settings for Azure Files identity based
	//authentication.
	AzureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication `json:"azureFilesIdentityBasedAuthentication,omitempty"`

	// +kubebuilder:validation:MaxLength=24
	// +kubebuilder:validation:MinLength=3
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//CustomDomain: The custom domain assigned to this storage account. This can be
	//set via Update.
	CustomDomain *CustomDomain `json:"customDomain,omitempty"`

	//Encryption: The encryption settings on the storage account.
	Encryption *Encryption `json:"encryption,omitempty"`

	//ExtendedLocation: The complex type of the extended location.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	//Identity: Identity for the resource.
	Identity *Identity `json:"identity,omitempty"`

	//IsHnsEnabled: Account HierarchicalNamespace enabled if sets to true.
	IsHnsEnabled *bool `json:"isHnsEnabled,omitempty"`

	//IsNfsV3Enabled: NFS 3.0 protocol support enabled if set to true.
	IsNfsV3Enabled *bool `json:"isNfsV3Enabled,omitempty"`

	//KeyPolicy: KeyPolicy assigned to the storage account.
	KeyPolicy *KeyPolicy `json:"keyPolicy,omitempty"`

	// +kubebuilder:validation:Required
	//Kind: Required. Indicates the type of storage account.
	Kind StorageAccountsSpecKind `json:"kind"`

	//LargeFileSharesState: Allow large file shares if sets to Enabled. It cannot be
	//disabled once it is enabled.
	LargeFileSharesState *StorageAccountPropertiesCreateParametersLargeFileSharesState `json:"largeFileSharesState,omitempty"`

	//Location: Required. Gets or sets the location of the resource. This will be one
	//of the supported and registered Azure Geo Regions (e.g. West US, East US,
	//Southeast Asia, etc.). The geo region of a resource cannot be changed once it is
	//created, but if an identical geo region is specified on update, the request will
	//succeed.
	Location string `json:"location,omitempty"`

	//MinimumTlsVersion: Set the minimum TLS version to be permitted on requests to
	//storage. The default interpretation is TLS 1.0 for this property.
	MinimumTlsVersion *StorageAccountPropertiesCreateParametersMinimumTlsVersion `json:"minimumTlsVersion,omitempty"`

	//NetworkAcls: Network rule set
	NetworkAcls *NetworkRuleSet `json:"networkAcls,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//RoutingPreference: Routing preference defines the type of network, either
	//microsoft or internet routing to be used to deliver the user data, the default
	//option is microsoft routing
	RoutingPreference *RoutingPreference `json:"routingPreference,omitempty"`

	//SasPolicy: SasPolicy assigned to the storage account.
	SasPolicy *SasPolicy `json:"sasPolicy,omitempty"`

	// +kubebuilder:validation:Required
	//Sku: The SKU of the storage account.
	Sku Sku `json:"sku"`

	//SupportsHttpsTrafficOnly: Allows https traffic only to storage service if sets
	//to true. The default value is true since API version 2019-04-01.
	SupportsHttpsTrafficOnly *bool `json:"supportsHttpsTrafficOnly,omitempty"`

	//Tags: Gets or sets a list of key value pairs that describe the resource. These
	//tags can be used for viewing and grouping this resource (across resource
	//groups). A maximum of 15 tags can be provided for a resource. Each tag must have
	//a key with a length no greater than 128 characters and a value with a length no
	//greater than 256 characters.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &StorageAccounts_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storageAccountsSpec *StorageAccounts_Spec) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if storageAccountsSpec == nil {
		return nil, nil
	}
	var result StorageAccounts_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = StorageAccountsSpecAPIVersion20210401

	// Set property ‘ExtendedLocation’:
	if storageAccountsSpec.ExtendedLocation != nil {
		extendedLocationARM, err := (*storageAccountsSpec.ExtendedLocation).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if storageAccountsSpec.Identity != nil {
		identityARM, err := (*storageAccountsSpec.Identity).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(IdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Kind’:
	result.Kind = storageAccountsSpec.Kind

	// Set property ‘Location’:
	result.Location = storageAccountsSpec.Location

	// Set property ‘Name’:
	result.Name = name

	// Set property ‘Properties’:
	if storageAccountsSpec.AccessTier != nil || storageAccountsSpec.AllowBlobPublicAccess != nil || storageAccountsSpec.AllowCrossTenantReplication != nil || storageAccountsSpec.AllowSharedKeyAccess != nil || storageAccountsSpec.AzureFilesIdentityBasedAuthentication != nil || storageAccountsSpec.CustomDomain != nil || storageAccountsSpec.Encryption != nil || storageAccountsSpec.IsHnsEnabled != nil || storageAccountsSpec.IsNfsV3Enabled != nil || storageAccountsSpec.KeyPolicy != nil || storageAccountsSpec.LargeFileSharesState != nil || storageAccountsSpec.MinimumTlsVersion != nil || storageAccountsSpec.NetworkAcls != nil || storageAccountsSpec.RoutingPreference != nil || storageAccountsSpec.SasPolicy != nil || storageAccountsSpec.SupportsHttpsTrafficOnly != nil {
		result.Properties = &StorageAccountPropertiesCreateParametersARM{}
	}
	if storageAccountsSpec.AccessTier != nil {
		accessTier := *storageAccountsSpec.AccessTier
		result.Properties.AccessTier = &accessTier
	}
	if storageAccountsSpec.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *storageAccountsSpec.AllowBlobPublicAccess
		result.Properties.AllowBlobPublicAccess = &allowBlobPublicAccess
	}
	if storageAccountsSpec.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *storageAccountsSpec.AllowCrossTenantReplication
		result.Properties.AllowCrossTenantReplication = &allowCrossTenantReplication
	}
	if storageAccountsSpec.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *storageAccountsSpec.AllowSharedKeyAccess
		result.Properties.AllowSharedKeyAccess = &allowSharedKeyAccess
	}
	if storageAccountsSpec.AzureFilesIdentityBasedAuthentication != nil {
		azureFilesIdentityBasedAuthenticationARM, err := (*storageAccountsSpec.AzureFilesIdentityBasedAuthentication).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthenticationARM.(AzureFilesIdentityBasedAuthenticationARM)
		result.Properties.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	}
	if storageAccountsSpec.CustomDomain != nil {
		customDomainARM, err := (*storageAccountsSpec.CustomDomain).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		customDomain := customDomainARM.(CustomDomainARM)
		result.Properties.CustomDomain = &customDomain
	}
	if storageAccountsSpec.Encryption != nil {
		encryptionARM, err := (*storageAccountsSpec.Encryption).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(EncryptionARM)
		result.Properties.Encryption = &encryption
	}
	if storageAccountsSpec.IsHnsEnabled != nil {
		isHnsEnabled := *storageAccountsSpec.IsHnsEnabled
		result.Properties.IsHnsEnabled = &isHnsEnabled
	}
	if storageAccountsSpec.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *storageAccountsSpec.IsNfsV3Enabled
		result.Properties.IsNfsV3Enabled = &isNfsV3Enabled
	}
	if storageAccountsSpec.KeyPolicy != nil {
		keyPolicyARM, err := (*storageAccountsSpec.KeyPolicy).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		keyPolicy := keyPolicyARM.(KeyPolicyARM)
		result.Properties.KeyPolicy = &keyPolicy
	}
	if storageAccountsSpec.LargeFileSharesState != nil {
		largeFileSharesState := *storageAccountsSpec.LargeFileSharesState
		result.Properties.LargeFileSharesState = &largeFileSharesState
	}
	if storageAccountsSpec.MinimumTlsVersion != nil {
		minimumTlsVersion := *storageAccountsSpec.MinimumTlsVersion
		result.Properties.MinimumTlsVersion = &minimumTlsVersion
	}
	if storageAccountsSpec.NetworkAcls != nil {
		networkAclsARM, err := (*storageAccountsSpec.NetworkAcls).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		networkAcls := networkAclsARM.(NetworkRuleSetARM)
		result.Properties.NetworkAcls = &networkAcls
	}
	if storageAccountsSpec.RoutingPreference != nil {
		routingPreferenceARM, err := (*storageAccountsSpec.RoutingPreference).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		routingPreference := routingPreferenceARM.(RoutingPreferenceARM)
		result.Properties.RoutingPreference = &routingPreference
	}
	if storageAccountsSpec.SasPolicy != nil {
		sasPolicyARM, err := (*storageAccountsSpec.SasPolicy).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		sasPolicy := sasPolicyARM.(SasPolicyARM)
		result.Properties.SasPolicy = &sasPolicy
	}
	if storageAccountsSpec.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *storageAccountsSpec.SupportsHttpsTrafficOnly
		result.Properties.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	}

	// Set property ‘Sku’:
	skuARM, err := storageAccountsSpec.Sku.ConvertToARM(name, resolvedReferences)
	if err != nil {
		return nil, err
	}
	result.Sku = skuARM.(SkuARM)

	// Set property ‘Tags’:
	if storageAccountsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range storageAccountsSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = StorageAccountsSpecTypeMicrosoftStorageStorageAccounts
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageAccountsSpec *StorageAccounts_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccounts_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageAccountsSpec *StorageAccounts_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccounts_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccounts_SpecARM, got %T", armInput)
	}

	// Set property ‘AccessTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccessTier != nil {
			accessTier := *typedInput.Properties.AccessTier
			storageAccountsSpec.AccessTier = &accessTier
		}
	}

	// Set property ‘AllowBlobPublicAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowBlobPublicAccess != nil {
			allowBlobPublicAccess := *typedInput.Properties.AllowBlobPublicAccess
			storageAccountsSpec.AllowBlobPublicAccess = &allowBlobPublicAccess
		}
	}

	// Set property ‘AllowCrossTenantReplication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowCrossTenantReplication != nil {
			allowCrossTenantReplication := *typedInput.Properties.AllowCrossTenantReplication
			storageAccountsSpec.AllowCrossTenantReplication = &allowCrossTenantReplication
		}
	}

	// Set property ‘AllowSharedKeyAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AllowSharedKeyAccess != nil {
			allowSharedKeyAccess := *typedInput.Properties.AllowSharedKeyAccess
			storageAccountsSpec.AllowSharedKeyAccess = &allowSharedKeyAccess
		}
	}

	// Set property ‘AzureFilesIdentityBasedAuthentication’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AzureFilesIdentityBasedAuthentication != nil {
			var azureFilesIdentityBasedAuthentication1 AzureFilesIdentityBasedAuthentication
			err := azureFilesIdentityBasedAuthentication1.PopulateFromARM(owner, *typedInput.Properties.AzureFilesIdentityBasedAuthentication)
			if err != nil {
				return err
			}
			azureFilesIdentityBasedAuthentication := azureFilesIdentityBasedAuthentication1
			storageAccountsSpec.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
		}
	}

	// Set property ‘AzureName’:
	storageAccountsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘CustomDomain’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CustomDomain != nil {
			var customDomain1 CustomDomain
			err := customDomain1.PopulateFromARM(owner, *typedInput.Properties.CustomDomain)
			if err != nil {
				return err
			}
			customDomain := customDomain1
			storageAccountsSpec.CustomDomain = &customDomain
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 Encryption
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			storageAccountsSpec.Encryption = &encryption
		}
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		storageAccountsSpec.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 Identity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		storageAccountsSpec.Identity = &identity
	}

	// Set property ‘IsHnsEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHnsEnabled != nil {
			isHnsEnabled := *typedInput.Properties.IsHnsEnabled
			storageAccountsSpec.IsHnsEnabled = &isHnsEnabled
		}
	}

	// Set property ‘IsNfsV3Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsNfsV3Enabled != nil {
			isNfsV3Enabled := *typedInput.Properties.IsNfsV3Enabled
			storageAccountsSpec.IsNfsV3Enabled = &isNfsV3Enabled
		}
	}

	// Set property ‘KeyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyPolicy != nil {
			var keyPolicy1 KeyPolicy
			err := keyPolicy1.PopulateFromARM(owner, *typedInput.Properties.KeyPolicy)
			if err != nil {
				return err
			}
			keyPolicy := keyPolicy1
			storageAccountsSpec.KeyPolicy = &keyPolicy
		}
	}

	// Set property ‘Kind’:
	storageAccountsSpec.Kind = typedInput.Kind

	// Set property ‘LargeFileSharesState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LargeFileSharesState != nil {
			largeFileSharesState := *typedInput.Properties.LargeFileSharesState
			storageAccountsSpec.LargeFileSharesState = &largeFileSharesState
		}
	}

	// Set property ‘Location’:
	storageAccountsSpec.Location = typedInput.Location

	// Set property ‘MinimumTlsVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinimumTlsVersion != nil {
			minimumTlsVersion := *typedInput.Properties.MinimumTlsVersion
			storageAccountsSpec.MinimumTlsVersion = &minimumTlsVersion
		}
	}

	// Set property ‘NetworkAcls’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAcls != nil {
			var networkAcls1 NetworkRuleSet
			err := networkAcls1.PopulateFromARM(owner, *typedInput.Properties.NetworkAcls)
			if err != nil {
				return err
			}
			networkAcls := networkAcls1
			storageAccountsSpec.NetworkAcls = &networkAcls
		}
	}

	// Set property ‘Owner’:
	storageAccountsSpec.Owner = owner

	// Set property ‘RoutingPreference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RoutingPreference != nil {
			var routingPreference1 RoutingPreference
			err := routingPreference1.PopulateFromARM(owner, *typedInput.Properties.RoutingPreference)
			if err != nil {
				return err
			}
			routingPreference := routingPreference1
			storageAccountsSpec.RoutingPreference = &routingPreference
		}
	}

	// Set property ‘SasPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SasPolicy != nil {
			var sasPolicy1 SasPolicy
			err := sasPolicy1.PopulateFromARM(owner, *typedInput.Properties.SasPolicy)
			if err != nil {
				return err
			}
			sasPolicy := sasPolicy1
			storageAccountsSpec.SasPolicy = &sasPolicy
		}
	}

	// Set property ‘Sku’:
	var sku Sku
	err := sku.PopulateFromARM(owner, typedInput.Sku)
	if err != nil {
		return err
	}
	storageAccountsSpec.Sku = sku

	// Set property ‘SupportsHttpsTrafficOnly’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SupportsHttpsTrafficOnly != nil {
			supportsHttpsTrafficOnly := *typedInput.Properties.SupportsHttpsTrafficOnly
			storageAccountsSpec.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		storageAccountsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			storageAccountsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &StorageAccounts_Spec{}

// ConvertSpecFrom populates our StorageAccounts_Spec from the provided source
func (storageAccountsSpec *StorageAccounts_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210401storage.StorageAccounts_Spec)
	if ok {
		// Populate our instance from source
		return storageAccountsSpec.AssignPropertiesFromStorageAccountsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210401storage.StorageAccounts_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = storageAccountsSpec.AssignPropertiesFromStorageAccountsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our StorageAccounts_Spec
func (storageAccountsSpec *StorageAccounts_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210401storage.StorageAccounts_Spec)
	if ok {
		// Populate destination from our instance
		return storageAccountsSpec.AssignPropertiesToStorageAccountsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210401storage.StorageAccounts_Spec{}
	err := storageAccountsSpec.AssignPropertiesToStorageAccountsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromStorageAccountsSpec populates our StorageAccounts_Spec from the provided source StorageAccounts_Spec
func (storageAccountsSpec *StorageAccounts_Spec) AssignPropertiesFromStorageAccountsSpec(source *v1alpha1api20210401storage.StorageAccounts_Spec) error {

	// AccessTier
	if source.AccessTier != nil {
		accessTier := StorageAccountPropertiesCreateParametersAccessTier(*source.AccessTier)
		storageAccountsSpec.AccessTier = &accessTier
	} else {
		storageAccountsSpec.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if source.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *source.AllowBlobPublicAccess
		storageAccountsSpec.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		storageAccountsSpec.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if source.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *source.AllowCrossTenantReplication
		storageAccountsSpec.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		storageAccountsSpec.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if source.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *source.AllowSharedKeyAccess
		storageAccountsSpec.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		storageAccountsSpec.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if source.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication
		err := azureFilesIdentityBasedAuthentication.AssignPropertiesFromAzureFilesIdentityBasedAuthentication(source.AzureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "populating AzureFilesIdentityBasedAuthentication from AzureFilesIdentityBasedAuthentication, calling AssignPropertiesFromAzureFilesIdentityBasedAuthentication()")
		}
		storageAccountsSpec.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		storageAccountsSpec.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	storageAccountsSpec.AzureName = source.AzureName

	// CustomDomain
	if source.CustomDomain != nil {
		var customDomain CustomDomain
		err := customDomain.AssignPropertiesFromCustomDomain(source.CustomDomain)
		if err != nil {
			return errors.Wrap(err, "populating CustomDomain from CustomDomain, calling AssignPropertiesFromCustomDomain()")
		}
		storageAccountsSpec.CustomDomain = &customDomain
	} else {
		storageAccountsSpec.CustomDomain = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption Encryption
		err := encryption.AssignPropertiesFromEncryption(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "populating Encryption from Encryption, calling AssignPropertiesFromEncryption()")
		}
		storageAccountsSpec.Encryption = &encryption
	} else {
		storageAccountsSpec.Encryption = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesFromExtendedLocation()")
		}
		storageAccountsSpec.ExtendedLocation = &extendedLocation
	} else {
		storageAccountsSpec.ExtendedLocation = nil
	}

	// Identity
	if source.Identity != nil {
		var identity Identity
		err := identity.AssignPropertiesFromIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromIdentity()")
		}
		storageAccountsSpec.Identity = &identity
	} else {
		storageAccountsSpec.Identity = nil
	}

	// IsHnsEnabled
	if source.IsHnsEnabled != nil {
		isHnsEnabled := *source.IsHnsEnabled
		storageAccountsSpec.IsHnsEnabled = &isHnsEnabled
	} else {
		storageAccountsSpec.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if source.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *source.IsNfsV3Enabled
		storageAccountsSpec.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		storageAccountsSpec.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if source.KeyPolicy != nil {
		var keyPolicy KeyPolicy
		err := keyPolicy.AssignPropertiesFromKeyPolicy(source.KeyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating KeyPolicy from KeyPolicy, calling AssignPropertiesFromKeyPolicy()")
		}
		storageAccountsSpec.KeyPolicy = &keyPolicy
	} else {
		storageAccountsSpec.KeyPolicy = nil
	}

	// Kind
	if source.Kind != nil {
		storageAccountsSpec.Kind = StorageAccountsSpecKind(*source.Kind)
	} else {
		storageAccountsSpec.Kind = ""
	}

	// LargeFileSharesState
	if source.LargeFileSharesState != nil {
		largeFileSharesState := StorageAccountPropertiesCreateParametersLargeFileSharesState(*source.LargeFileSharesState)
		storageAccountsSpec.LargeFileSharesState = &largeFileSharesState
	} else {
		storageAccountsSpec.LargeFileSharesState = nil
	}

	// Location
	if source.Location != nil {
		storageAccountsSpec.Location = *source.Location
	} else {
		storageAccountsSpec.Location = ""
	}

	// MinimumTlsVersion
	if source.MinimumTlsVersion != nil {
		minimumTlsVersion := StorageAccountPropertiesCreateParametersMinimumTlsVersion(*source.MinimumTlsVersion)
		storageAccountsSpec.MinimumTlsVersion = &minimumTlsVersion
	} else {
		storageAccountsSpec.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if source.NetworkAcls != nil {
		var networkAcl NetworkRuleSet
		err := networkAcl.AssignPropertiesFromNetworkRuleSet(source.NetworkAcls)
		if err != nil {
			return errors.Wrap(err, "populating NetworkAcls from NetworkAcls, calling AssignPropertiesFromNetworkRuleSet()")
		}
		storageAccountsSpec.NetworkAcls = &networkAcl
	} else {
		storageAccountsSpec.NetworkAcls = nil
	}

	// Owner
	storageAccountsSpec.Owner = source.Owner.Copy()

	// RoutingPreference
	if source.RoutingPreference != nil {
		var routingPreference RoutingPreference
		err := routingPreference.AssignPropertiesFromRoutingPreference(source.RoutingPreference)
		if err != nil {
			return errors.Wrap(err, "populating RoutingPreference from RoutingPreference, calling AssignPropertiesFromRoutingPreference()")
		}
		storageAccountsSpec.RoutingPreference = &routingPreference
	} else {
		storageAccountsSpec.RoutingPreference = nil
	}

	// SasPolicy
	if source.SasPolicy != nil {
		var sasPolicy SasPolicy
		err := sasPolicy.AssignPropertiesFromSasPolicy(source.SasPolicy)
		if err != nil {
			return errors.Wrap(err, "populating SasPolicy from SasPolicy, calling AssignPropertiesFromSasPolicy()")
		}
		storageAccountsSpec.SasPolicy = &sasPolicy
	} else {
		storageAccountsSpec.SasPolicy = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromSku()")
		}
		storageAccountsSpec.Sku = sku
	} else {
		storageAccountsSpec.Sku = Sku{}
	}

	// SupportsHttpsTrafficOnly
	if source.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *source.SupportsHttpsTrafficOnly
		storageAccountsSpec.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		storageAccountsSpec.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	storageAccountsSpec.Tags = tagMap

	// No error
	return nil
}

// AssignPropertiesToStorageAccountsSpec populates the provided destination StorageAccounts_Spec from our StorageAccounts_Spec
func (storageAccountsSpec *StorageAccounts_Spec) AssignPropertiesToStorageAccountsSpec(destination *v1alpha1api20210401storage.StorageAccounts_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccessTier
	if storageAccountsSpec.AccessTier != nil {
		accessTier := string(*storageAccountsSpec.AccessTier)
		destination.AccessTier = &accessTier
	} else {
		destination.AccessTier = nil
	}

	// AllowBlobPublicAccess
	if storageAccountsSpec.AllowBlobPublicAccess != nil {
		allowBlobPublicAccess := *storageAccountsSpec.AllowBlobPublicAccess
		destination.AllowBlobPublicAccess = &allowBlobPublicAccess
	} else {
		destination.AllowBlobPublicAccess = nil
	}

	// AllowCrossTenantReplication
	if storageAccountsSpec.AllowCrossTenantReplication != nil {
		allowCrossTenantReplication := *storageAccountsSpec.AllowCrossTenantReplication
		destination.AllowCrossTenantReplication = &allowCrossTenantReplication
	} else {
		destination.AllowCrossTenantReplication = nil
	}

	// AllowSharedKeyAccess
	if storageAccountsSpec.AllowSharedKeyAccess != nil {
		allowSharedKeyAccess := *storageAccountsSpec.AllowSharedKeyAccess
		destination.AllowSharedKeyAccess = &allowSharedKeyAccess
	} else {
		destination.AllowSharedKeyAccess = nil
	}

	// AzureFilesIdentityBasedAuthentication
	if storageAccountsSpec.AzureFilesIdentityBasedAuthentication != nil {
		var azureFilesIdentityBasedAuthentication v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication
		err := (*storageAccountsSpec.AzureFilesIdentityBasedAuthentication).AssignPropertiesToAzureFilesIdentityBasedAuthentication(&azureFilesIdentityBasedAuthentication)
		if err != nil {
			return errors.Wrap(err, "populating AzureFilesIdentityBasedAuthentication from AzureFilesIdentityBasedAuthentication, calling AssignPropertiesToAzureFilesIdentityBasedAuthentication()")
		}
		destination.AzureFilesIdentityBasedAuthentication = &azureFilesIdentityBasedAuthentication
	} else {
		destination.AzureFilesIdentityBasedAuthentication = nil
	}

	// AzureName
	destination.AzureName = storageAccountsSpec.AzureName

	// CustomDomain
	if storageAccountsSpec.CustomDomain != nil {
		var customDomain v1alpha1api20210401storage.CustomDomain
		err := (*storageAccountsSpec.CustomDomain).AssignPropertiesToCustomDomain(&customDomain)
		if err != nil {
			return errors.Wrap(err, "populating CustomDomain from CustomDomain, calling AssignPropertiesToCustomDomain()")
		}
		destination.CustomDomain = &customDomain
	} else {
		destination.CustomDomain = nil
	}

	// Encryption
	if storageAccountsSpec.Encryption != nil {
		var encryption v1alpha1api20210401storage.Encryption
		err := (*storageAccountsSpec.Encryption).AssignPropertiesToEncryption(&encryption)
		if err != nil {
			return errors.Wrap(err, "populating Encryption from Encryption, calling AssignPropertiesToEncryption()")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// ExtendedLocation
	if storageAccountsSpec.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20210401storage.ExtendedLocation
		err := (*storageAccountsSpec.ExtendedLocation).AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesToExtendedLocation()")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Identity
	if storageAccountsSpec.Identity != nil {
		var identity v1alpha1api20210401storage.Identity
		err := (*storageAccountsSpec.Identity).AssignPropertiesToIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToIdentity()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IsHnsEnabled
	if storageAccountsSpec.IsHnsEnabled != nil {
		isHnsEnabled := *storageAccountsSpec.IsHnsEnabled
		destination.IsHnsEnabled = &isHnsEnabled
	} else {
		destination.IsHnsEnabled = nil
	}

	// IsNfsV3Enabled
	if storageAccountsSpec.IsNfsV3Enabled != nil {
		isNfsV3Enabled := *storageAccountsSpec.IsNfsV3Enabled
		destination.IsNfsV3Enabled = &isNfsV3Enabled
	} else {
		destination.IsNfsV3Enabled = nil
	}

	// KeyPolicy
	if storageAccountsSpec.KeyPolicy != nil {
		var keyPolicy v1alpha1api20210401storage.KeyPolicy
		err := (*storageAccountsSpec.KeyPolicy).AssignPropertiesToKeyPolicy(&keyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating KeyPolicy from KeyPolicy, calling AssignPropertiesToKeyPolicy()")
		}
		destination.KeyPolicy = &keyPolicy
	} else {
		destination.KeyPolicy = nil
	}

	// Kind
	kind := string(storageAccountsSpec.Kind)
	destination.Kind = &kind

	// LargeFileSharesState
	if storageAccountsSpec.LargeFileSharesState != nil {
		largeFileSharesState := string(*storageAccountsSpec.LargeFileSharesState)
		destination.LargeFileSharesState = &largeFileSharesState
	} else {
		destination.LargeFileSharesState = nil
	}

	// Location
	location := storageAccountsSpec.Location
	destination.Location = &location

	// MinimumTlsVersion
	if storageAccountsSpec.MinimumTlsVersion != nil {
		minimumTlsVersion := string(*storageAccountsSpec.MinimumTlsVersion)
		destination.MinimumTlsVersion = &minimumTlsVersion
	} else {
		destination.MinimumTlsVersion = nil
	}

	// NetworkAcls
	if storageAccountsSpec.NetworkAcls != nil {
		var networkAcl v1alpha1api20210401storage.NetworkRuleSet
		err := (*storageAccountsSpec.NetworkAcls).AssignPropertiesToNetworkRuleSet(&networkAcl)
		if err != nil {
			return errors.Wrap(err, "populating NetworkAcls from NetworkAcls, calling AssignPropertiesToNetworkRuleSet()")
		}
		destination.NetworkAcls = &networkAcl
	} else {
		destination.NetworkAcls = nil
	}

	// OriginalVersion
	destination.OriginalVersion = storageAccountsSpec.OriginalVersion()

	// Owner
	destination.Owner = storageAccountsSpec.Owner.Copy()

	// RoutingPreference
	if storageAccountsSpec.RoutingPreference != nil {
		var routingPreference v1alpha1api20210401storage.RoutingPreference
		err := (*storageAccountsSpec.RoutingPreference).AssignPropertiesToRoutingPreference(&routingPreference)
		if err != nil {
			return errors.Wrap(err, "populating RoutingPreference from RoutingPreference, calling AssignPropertiesToRoutingPreference()")
		}
		destination.RoutingPreference = &routingPreference
	} else {
		destination.RoutingPreference = nil
	}

	// SasPolicy
	if storageAccountsSpec.SasPolicy != nil {
		var sasPolicy v1alpha1api20210401storage.SasPolicy
		err := (*storageAccountsSpec.SasPolicy).AssignPropertiesToSasPolicy(&sasPolicy)
		if err != nil {
			return errors.Wrap(err, "populating SasPolicy from SasPolicy, calling AssignPropertiesToSasPolicy()")
		}
		destination.SasPolicy = &sasPolicy
	} else {
		destination.SasPolicy = nil
	}

	// Sku
	var sku v1alpha1api20210401storage.Sku
	err := storageAccountsSpec.Sku.AssignPropertiesToSku(&sku)
	if err != nil {
		return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToSku()")
	}
	destination.Sku = &sku

	// SupportsHttpsTrafficOnly
	if storageAccountsSpec.SupportsHttpsTrafficOnly != nil {
		supportsHttpsTrafficOnly := *storageAccountsSpec.SupportsHttpsTrafficOnly
		destination.SupportsHttpsTrafficOnly = &supportsHttpsTrafficOnly
	} else {
		destination.SupportsHttpsTrafficOnly = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range storageAccountsSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (storageAccountsSpec *StorageAccounts_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (storageAccountsSpec *StorageAccounts_Spec) SetAzureName(azureName string) {
	storageAccountsSpec.AzureName = azureName
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/AzureFilesIdentityBasedAuthentication
type AzureFilesIdentityBasedAuthentication struct {
	//ActiveDirectoryProperties: Settings properties for Active Directory (AD).
	ActiveDirectoryProperties *ActiveDirectoryProperties `json:"activeDirectoryProperties,omitempty"`

	//DefaultSharePermission: Default share permission for users using Kerberos
	//authentication if RBAC role is not assigned.
	DefaultSharePermission *AzureFilesIdentityBasedAuthenticationDefaultSharePermission `json:"defaultSharePermission,omitempty"`

	// +kubebuilder:validation:Required
	//DirectoryServiceOptions: Indicates the directory service used.
	DirectoryServiceOptions AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions `json:"directoryServiceOptions"`
}

var _ genruntime.ARMTransformer = &AzureFilesIdentityBasedAuthentication{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (azureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if azureFilesIdentityBasedAuthentication == nil {
		return nil, nil
	}
	var result AzureFilesIdentityBasedAuthenticationARM

	// Set property ‘ActiveDirectoryProperties’:
	if azureFilesIdentityBasedAuthentication.ActiveDirectoryProperties != nil {
		activeDirectoryPropertiesARM, err := (*azureFilesIdentityBasedAuthentication.ActiveDirectoryProperties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		activeDirectoryProperties := activeDirectoryPropertiesARM.(ActiveDirectoryPropertiesARM)
		result.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if azureFilesIdentityBasedAuthentication.DefaultSharePermission != nil {
		defaultSharePermission := *azureFilesIdentityBasedAuthentication.DefaultSharePermission
		result.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	result.DirectoryServiceOptions = azureFilesIdentityBasedAuthentication.DirectoryServiceOptions
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (azureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFilesIdentityBasedAuthenticationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (azureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFilesIdentityBasedAuthenticationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFilesIdentityBasedAuthenticationARM, got %T", armInput)
	}

	// Set property ‘ActiveDirectoryProperties’:
	if typedInput.ActiveDirectoryProperties != nil {
		var activeDirectoryProperties1 ActiveDirectoryProperties
		err := activeDirectoryProperties1.PopulateFromARM(owner, *typedInput.ActiveDirectoryProperties)
		if err != nil {
			return err
		}
		activeDirectoryProperties := activeDirectoryProperties1
		azureFilesIdentityBasedAuthentication.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if typedInput.DefaultSharePermission != nil {
		defaultSharePermission := *typedInput.DefaultSharePermission
		azureFilesIdentityBasedAuthentication.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	azureFilesIdentityBasedAuthentication.DirectoryServiceOptions = typedInput.DirectoryServiceOptions

	// No error
	return nil
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthentication populates our AzureFilesIdentityBasedAuthentication from the provided source AzureFilesIdentityBasedAuthentication
func (azureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication) AssignPropertiesFromAzureFilesIdentityBasedAuthentication(source *v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication) error {

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryProperties(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "populating ActiveDirectoryProperties from ActiveDirectoryProperties, calling AssignPropertiesFromActiveDirectoryProperties()")
		}
		azureFilesIdentityBasedAuthentication.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		azureFilesIdentityBasedAuthentication.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if source.DefaultSharePermission != nil {
		defaultSharePermission := AzureFilesIdentityBasedAuthenticationDefaultSharePermission(*source.DefaultSharePermission)
		azureFilesIdentityBasedAuthentication.DefaultSharePermission = &defaultSharePermission
	} else {
		azureFilesIdentityBasedAuthentication.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if source.DirectoryServiceOptions != nil {
		azureFilesIdentityBasedAuthentication.DirectoryServiceOptions = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions(*source.DirectoryServiceOptions)
	} else {
		azureFilesIdentityBasedAuthentication.DirectoryServiceOptions = ""
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthentication populates the provided destination AzureFilesIdentityBasedAuthentication from our AzureFilesIdentityBasedAuthentication
func (azureFilesIdentityBasedAuthentication *AzureFilesIdentityBasedAuthentication) AssignPropertiesToAzureFilesIdentityBasedAuthentication(destination *v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveDirectoryProperties
	if azureFilesIdentityBasedAuthentication.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty v1alpha1api20210401storage.ActiveDirectoryProperties
		err := (*azureFilesIdentityBasedAuthentication.ActiveDirectoryProperties).AssignPropertiesToActiveDirectoryProperties(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "populating ActiveDirectoryProperties from ActiveDirectoryProperties, calling AssignPropertiesToActiveDirectoryProperties()")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if azureFilesIdentityBasedAuthentication.DefaultSharePermission != nil {
		defaultSharePermission := string(*azureFilesIdentityBasedAuthentication.DefaultSharePermission)
		destination.DefaultSharePermission = &defaultSharePermission
	} else {
		destination.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	directoryServiceOption := string(azureFilesIdentityBasedAuthentication.DirectoryServiceOptions)
	destination.DirectoryServiceOptions = &directoryServiceOption

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type AzureFilesIdentityBasedAuthentication_Status struct {
	//ActiveDirectoryProperties: Required if choose AD.
	ActiveDirectoryProperties *ActiveDirectoryProperties_Status `json:"activeDirectoryProperties,omitempty"`

	//DefaultSharePermission: Default share permission for users using Kerberos
	//authentication if RBAC role is not assigned.
	DefaultSharePermission *AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission `json:"defaultSharePermission,omitempty"`

	// +kubebuilder:validation:Required
	//DirectoryServiceOptions: Indicates the directory service used.
	DirectoryServiceOptions AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions `json:"directoryServiceOptions"`
}

var _ genruntime.FromARMConverter = &AzureFilesIdentityBasedAuthentication_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (azureFilesIdentityBasedAuthenticationStatus *AzureFilesIdentityBasedAuthentication_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AzureFilesIdentityBasedAuthentication_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (azureFilesIdentityBasedAuthenticationStatus *AzureFilesIdentityBasedAuthentication_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(AzureFilesIdentityBasedAuthentication_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AzureFilesIdentityBasedAuthentication_StatusARM, got %T", armInput)
	}

	// Set property ‘ActiveDirectoryProperties’:
	if typedInput.ActiveDirectoryProperties != nil {
		var activeDirectoryProperties1 ActiveDirectoryProperties_Status
		err := activeDirectoryProperties1.PopulateFromARM(owner, *typedInput.ActiveDirectoryProperties)
		if err != nil {
			return err
		}
		activeDirectoryProperties := activeDirectoryProperties1
		azureFilesIdentityBasedAuthenticationStatus.ActiveDirectoryProperties = &activeDirectoryProperties
	}

	// Set property ‘DefaultSharePermission’:
	if typedInput.DefaultSharePermission != nil {
		defaultSharePermission := *typedInput.DefaultSharePermission
		azureFilesIdentityBasedAuthenticationStatus.DefaultSharePermission = &defaultSharePermission
	}

	// Set property ‘DirectoryServiceOptions’:
	azureFilesIdentityBasedAuthenticationStatus.DirectoryServiceOptions = typedInput.DirectoryServiceOptions

	// No error
	return nil
}

// AssignPropertiesFromAzureFilesIdentityBasedAuthenticationStatus populates our AzureFilesIdentityBasedAuthentication_Status from the provided source AzureFilesIdentityBasedAuthentication_Status
func (azureFilesIdentityBasedAuthenticationStatus *AzureFilesIdentityBasedAuthentication_Status) AssignPropertiesFromAzureFilesIdentityBasedAuthenticationStatus(source *v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication_Status) error {

	// ActiveDirectoryProperties
	if source.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty ActiveDirectoryProperties_Status
		err := activeDirectoryProperty.AssignPropertiesFromActiveDirectoryPropertiesStatus(source.ActiveDirectoryProperties)
		if err != nil {
			return errors.Wrap(err, "populating ActiveDirectoryProperties from ActiveDirectoryProperties, calling AssignPropertiesFromActiveDirectoryPropertiesStatus()")
		}
		azureFilesIdentityBasedAuthenticationStatus.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		azureFilesIdentityBasedAuthenticationStatus.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if source.DefaultSharePermission != nil {
		defaultSharePermission := AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission(*source.DefaultSharePermission)
		azureFilesIdentityBasedAuthenticationStatus.DefaultSharePermission = &defaultSharePermission
	} else {
		azureFilesIdentityBasedAuthenticationStatus.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	if source.DirectoryServiceOptions != nil {
		azureFilesIdentityBasedAuthenticationStatus.DirectoryServiceOptions = AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions(*source.DirectoryServiceOptions)
	} else {
		azureFilesIdentityBasedAuthenticationStatus.DirectoryServiceOptions = ""
	}

	// No error
	return nil
}

// AssignPropertiesToAzureFilesIdentityBasedAuthenticationStatus populates the provided destination AzureFilesIdentityBasedAuthentication_Status from our AzureFilesIdentityBasedAuthentication_Status
func (azureFilesIdentityBasedAuthenticationStatus *AzureFilesIdentityBasedAuthentication_Status) AssignPropertiesToAzureFilesIdentityBasedAuthenticationStatus(destination *v1alpha1api20210401storage.AzureFilesIdentityBasedAuthentication_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActiveDirectoryProperties
	if azureFilesIdentityBasedAuthenticationStatus.ActiveDirectoryProperties != nil {
		var activeDirectoryProperty v1alpha1api20210401storage.ActiveDirectoryProperties_Status
		err := (*azureFilesIdentityBasedAuthenticationStatus.ActiveDirectoryProperties).AssignPropertiesToActiveDirectoryPropertiesStatus(&activeDirectoryProperty)
		if err != nil {
			return errors.Wrap(err, "populating ActiveDirectoryProperties from ActiveDirectoryProperties, calling AssignPropertiesToActiveDirectoryPropertiesStatus()")
		}
		destination.ActiveDirectoryProperties = &activeDirectoryProperty
	} else {
		destination.ActiveDirectoryProperties = nil
	}

	// DefaultSharePermission
	if azureFilesIdentityBasedAuthenticationStatus.DefaultSharePermission != nil {
		defaultSharePermission := string(*azureFilesIdentityBasedAuthenticationStatus.DefaultSharePermission)
		destination.DefaultSharePermission = &defaultSharePermission
	} else {
		destination.DefaultSharePermission = nil
	}

	// DirectoryServiceOptions
	directoryServiceOption := string(azureFilesIdentityBasedAuthenticationStatus.DirectoryServiceOptions)
	destination.DirectoryServiceOptions = &directoryServiceOption

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type BlobRestoreStatus_Status struct {
	//FailureReason: Failure reason when blob restore is failed.
	FailureReason *string `json:"failureReason,omitempty"`

	//Parameters: Blob restore request parameters.
	Parameters *BlobRestoreParameters_Status `json:"parameters,omitempty"`

	//RestoreId: Id for tracking blob restore request.
	RestoreId *string `json:"restoreId,omitempty"`

	//Status: The status of blob restore progress. Possible values are: - InProgress:
	//Indicates that blob restore is ongoing. - Complete: Indicates that blob restore
	//has been completed successfully. - Failed: Indicates that blob restore is failed.
	Status *BlobRestoreStatusStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &BlobRestoreStatus_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (blobRestoreStatusStatus *BlobRestoreStatus_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobRestoreStatus_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (blobRestoreStatusStatus *BlobRestoreStatus_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobRestoreStatus_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobRestoreStatus_StatusARM, got %T", armInput)
	}

	// Set property ‘FailureReason’:
	if typedInput.FailureReason != nil {
		failureReason := *typedInput.FailureReason
		blobRestoreStatusStatus.FailureReason = &failureReason
	}

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 BlobRestoreParameters_Status
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		blobRestoreStatusStatus.Parameters = &parameters
	}

	// Set property ‘RestoreId’:
	if typedInput.RestoreId != nil {
		restoreId := *typedInput.RestoreId
		blobRestoreStatusStatus.RestoreId = &restoreId
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		blobRestoreStatusStatus.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromBlobRestoreStatusStatus populates our BlobRestoreStatus_Status from the provided source BlobRestoreStatus_Status
func (blobRestoreStatusStatus *BlobRestoreStatus_Status) AssignPropertiesFromBlobRestoreStatusStatus(source *v1alpha1api20210401storage.BlobRestoreStatus_Status) error {

	// FailureReason
	if source.FailureReason != nil {
		failureReason := *source.FailureReason
		blobRestoreStatusStatus.FailureReason = &failureReason
	} else {
		blobRestoreStatusStatus.FailureReason = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter BlobRestoreParameters_Status
		err := parameter.AssignPropertiesFromBlobRestoreParametersStatus(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "populating Parameters from Parameters, calling AssignPropertiesFromBlobRestoreParametersStatus()")
		}
		blobRestoreStatusStatus.Parameters = &parameter
	} else {
		blobRestoreStatusStatus.Parameters = nil
	}

	// RestoreId
	if source.RestoreId != nil {
		restoreId := *source.RestoreId
		blobRestoreStatusStatus.RestoreId = &restoreId
	} else {
		blobRestoreStatusStatus.RestoreId = nil
	}

	// Status
	if source.Status != nil {
		status := BlobRestoreStatusStatusStatus(*source.Status)
		blobRestoreStatusStatus.Status = &status
	} else {
		blobRestoreStatusStatus.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreStatusStatus populates the provided destination BlobRestoreStatus_Status from our BlobRestoreStatus_Status
func (blobRestoreStatusStatus *BlobRestoreStatus_Status) AssignPropertiesToBlobRestoreStatusStatus(destination *v1alpha1api20210401storage.BlobRestoreStatus_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FailureReason
	if blobRestoreStatusStatus.FailureReason != nil {
		failureReason := *blobRestoreStatusStatus.FailureReason
		destination.FailureReason = &failureReason
	} else {
		destination.FailureReason = nil
	}

	// Parameters
	if blobRestoreStatusStatus.Parameters != nil {
		var parameter v1alpha1api20210401storage.BlobRestoreParameters_Status
		err := (*blobRestoreStatusStatus.Parameters).AssignPropertiesToBlobRestoreParametersStatus(&parameter)
		if err != nil {
			return errors.Wrap(err, "populating Parameters from Parameters, calling AssignPropertiesToBlobRestoreParametersStatus()")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// RestoreId
	if blobRestoreStatusStatus.RestoreId != nil {
		restoreId := *blobRestoreStatusStatus.RestoreId
		destination.RestoreId = &restoreId
	} else {
		destination.RestoreId = nil
	}

	// Status
	if blobRestoreStatusStatus.Status != nil {
		status := string(*blobRestoreStatusStatus.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/CustomDomain
type CustomDomain struct {
	// +kubebuilder:validation:Required
	//Name: Gets or sets the custom domain name assigned to the storage account. Name
	//is the CNAME source.
	Name string `json:"name"`

	//UseSubDomainName: Indicates whether indirect CName validation is enabled.
	//Default value is false. This should only be set on updates.
	UseSubDomainName *bool `json:"useSubDomainName,omitempty"`
}

var _ genruntime.ARMTransformer = &CustomDomain{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (customDomain *CustomDomain) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if customDomain == nil {
		return nil, nil
	}
	var result CustomDomainARM

	// Set property ‘Name’:
	result.Name = customDomain.Name

	// Set property ‘UseSubDomainName’:
	if customDomain.UseSubDomainName != nil {
		useSubDomainName := *customDomain.UseSubDomainName
		result.UseSubDomainName = &useSubDomainName
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (customDomain *CustomDomain) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomDomainARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (customDomain *CustomDomain) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomDomainARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomDomainARM, got %T", armInput)
	}

	// Set property ‘Name’:
	customDomain.Name = typedInput.Name

	// Set property ‘UseSubDomainName’:
	if typedInput.UseSubDomainName != nil {
		useSubDomainName := *typedInput.UseSubDomainName
		customDomain.UseSubDomainName = &useSubDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromCustomDomain populates our CustomDomain from the provided source CustomDomain
func (customDomain *CustomDomain) AssignPropertiesFromCustomDomain(source *v1alpha1api20210401storage.CustomDomain) error {

	// Name
	if source.Name != nil {
		customDomain.Name = *source.Name
	} else {
		customDomain.Name = ""
	}

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		customDomain.UseSubDomainName = &useSubDomainName
	} else {
		customDomain.UseSubDomainName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomain populates the provided destination CustomDomain from our CustomDomain
func (customDomain *CustomDomain) AssignPropertiesToCustomDomain(destination *v1alpha1api20210401storage.CustomDomain) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := customDomain.Name
	destination.Name = &name

	// UseSubDomainName
	if customDomain.UseSubDomainName != nil {
		useSubDomainName := *customDomain.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type CustomDomain_Status struct {
	// +kubebuilder:validation:Required
	//Name: Gets or sets the custom domain name assigned to the storage account. Name
	//is the CNAME source.
	Name string `json:"name"`

	//UseSubDomainName: Indicates whether indirect CName validation is enabled.
	//Default value is false. This should only be set on updates.
	UseSubDomainName *bool `json:"useSubDomainName,omitempty"`
}

var _ genruntime.FromARMConverter = &CustomDomain_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (customDomainStatus *CustomDomain_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomDomain_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (customDomainStatus *CustomDomain_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomDomain_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomDomain_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	customDomainStatus.Name = typedInput.Name

	// Set property ‘UseSubDomainName’:
	if typedInput.UseSubDomainName != nil {
		useSubDomainName := *typedInput.UseSubDomainName
		customDomainStatus.UseSubDomainName = &useSubDomainName
	}

	// No error
	return nil
}

// AssignPropertiesFromCustomDomainStatus populates our CustomDomain_Status from the provided source CustomDomain_Status
func (customDomainStatus *CustomDomain_Status) AssignPropertiesFromCustomDomainStatus(source *v1alpha1api20210401storage.CustomDomain_Status) error {

	// Name
	if source.Name != nil {
		customDomainStatus.Name = *source.Name
	} else {
		customDomainStatus.Name = ""
	}

	// UseSubDomainName
	if source.UseSubDomainName != nil {
		useSubDomainName := *source.UseSubDomainName
		customDomainStatus.UseSubDomainName = &useSubDomainName
	} else {
		customDomainStatus.UseSubDomainName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCustomDomainStatus populates the provided destination CustomDomain_Status from our CustomDomain_Status
func (customDomainStatus *CustomDomain_Status) AssignPropertiesToCustomDomainStatus(destination *v1alpha1api20210401storage.CustomDomain_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := customDomainStatus.Name
	destination.Name = &name

	// UseSubDomainName
	if customDomainStatus.UseSubDomainName != nil {
		useSubDomainName := *customDomainStatus.UseSubDomainName
		destination.UseSubDomainName = &useSubDomainName
	} else {
		destination.UseSubDomainName = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/Encryption
type Encryption struct {
	//Identity: Encryption identity for the storage account.
	Identity *EncryptionIdentity `json:"identity,omitempty"`

	// +kubebuilder:validation:Required
	//KeySource: The encryption keySource (provider). Possible values
	//(case-insensitive):  Microsoft.Storage, Microsoft.Keyvault.
	KeySource EncryptionKeySource `json:"keySource"`

	//Keyvaultproperties: Properties of key vault.
	Keyvaultproperties *KeyVaultProperties `json:"keyvaultproperties,omitempty"`

	//RequireInfrastructureEncryption: A boolean indicating whether or not the service
	//applies a secondary layer of encryption with platform managed keys for data at
	//rest.
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`

	//Services: A list of services that support encryption.
	Services *EncryptionServices `json:"services,omitempty"`
}

var _ genruntime.ARMTransformer = &Encryption{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryption *Encryption) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if encryption == nil {
		return nil, nil
	}
	var result EncryptionARM

	// Set property ‘Identity’:
	if encryption.Identity != nil {
		identityARM, err := (*encryption.Identity).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(EncryptionIdentityARM)
		result.Identity = &identity
	}

	// Set property ‘KeySource’:
	result.KeySource = encryption.KeySource

	// Set property ‘Keyvaultproperties’:
	if encryption.Keyvaultproperties != nil {
		keyvaultpropertiesARM, err := (*encryption.Keyvaultproperties).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		keyvaultproperties := keyvaultpropertiesARM.(KeyVaultPropertiesARM)
		result.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		result.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if encryption.Services != nil {
		servicesARM, err := (*encryption.Services).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		services := servicesARM.(EncryptionServicesARM)
		result.Services = &services
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryption *Encryption) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryption *Encryption) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 EncryptionIdentity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		encryption.Identity = &identity
	}

	// Set property ‘KeySource’:
	encryption.KeySource = typedInput.KeySource

	// Set property ‘Keyvaultproperties’:
	if typedInput.Keyvaultproperties != nil {
		var keyvaultproperties1 KeyVaultProperties
		err := keyvaultproperties1.PopulateFromARM(owner, *typedInput.Keyvaultproperties)
		if err != nil {
			return err
		}
		keyvaultproperties := keyvaultproperties1
		encryption.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if typedInput.Services != nil {
		var services1 EncryptionServices
		err := services1.PopulateFromARM(owner, *typedInput.Services)
		if err != nil {
			return err
		}
		services := services1
		encryption.Services = &services
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryption populates our Encryption from the provided source Encryption
func (encryption *Encryption) AssignPropertiesFromEncryption(source *v1alpha1api20210401storage.Encryption) error {

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity
		err := identity.AssignPropertiesFromEncryptionIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromEncryptionIdentity()")
		}
		encryption.Identity = &identity
	} else {
		encryption.Identity = nil
	}

	// KeySource
	if source.KeySource != nil {
		encryption.KeySource = EncryptionKeySource(*source.KeySource)
	} else {
		encryption.KeySource = ""
	}

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties
		err := keyvaultproperty.AssignPropertiesFromKeyVaultProperties(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "populating Keyvaultproperties from Keyvaultproperties, calling AssignPropertiesFromKeyVaultProperties()")
		}
		encryption.Keyvaultproperties = &keyvaultproperty
	} else {
		encryption.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryption.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryption.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices
		err := service.AssignPropertiesFromEncryptionServices(source.Services)
		if err != nil {
			return errors.Wrap(err, "populating Services from Services, calling AssignPropertiesFromEncryptionServices()")
		}
		encryption.Services = &service
	} else {
		encryption.Services = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryption populates the provided destination Encryption from our Encryption
func (encryption *Encryption) AssignPropertiesToEncryption(destination *v1alpha1api20210401storage.Encryption) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if encryption.Identity != nil {
		var identity v1alpha1api20210401storage.EncryptionIdentity
		err := (*encryption.Identity).AssignPropertiesToEncryptionIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToEncryptionIdentity()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	keySource := string(encryption.KeySource)
	destination.KeySource = &keySource

	// Keyvaultproperties
	if encryption.Keyvaultproperties != nil {
		var keyvaultproperty v1alpha1api20210401storage.KeyVaultProperties
		err := (*encryption.Keyvaultproperties).AssignPropertiesToKeyVaultProperties(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "populating Keyvaultproperties from Keyvaultproperties, calling AssignPropertiesToKeyVaultProperties()")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryption.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryption.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryption.Services != nil {
		var service v1alpha1api20210401storage.EncryptionServices
		err := (*encryption.Services).AssignPropertiesToEncryptionServices(&service)
		if err != nil {
			return errors.Wrap(err, "populating Services from Services, calling AssignPropertiesToEncryptionServices()")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type Encryption_Status struct {
	//Identity: The identity to be used with service-side encryption at rest.
	Identity *EncryptionIdentity_Status `json:"identity,omitempty"`

	// +kubebuilder:validation:Required
	//KeySource: The encryption keySource (provider). Possible values
	//(case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
	KeySource EncryptionStatusKeySource `json:"keySource"`

	//Keyvaultproperties: Properties provided by key vault.
	Keyvaultproperties *KeyVaultProperties_Status `json:"keyvaultproperties,omitempty"`

	//RequireInfrastructureEncryption: A boolean indicating whether or not the service
	//applies a secondary layer of encryption with platform managed keys for data at
	//rest.
	RequireInfrastructureEncryption *bool `json:"requireInfrastructureEncryption,omitempty"`

	//Services: List of services which support encryption.
	Services *EncryptionServices_Status `json:"services,omitempty"`
}

var _ genruntime.FromARMConverter = &Encryption_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryptionStatus *Encryption_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &Encryption_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryptionStatus *Encryption_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Encryption_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Encryption_StatusARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 EncryptionIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		encryptionStatus.Identity = &identity
	}

	// Set property ‘KeySource’:
	encryptionStatus.KeySource = typedInput.KeySource

	// Set property ‘Keyvaultproperties’:
	if typedInput.Keyvaultproperties != nil {
		var keyvaultproperties1 KeyVaultProperties_Status
		err := keyvaultproperties1.PopulateFromARM(owner, *typedInput.Keyvaultproperties)
		if err != nil {
			return err
		}
		keyvaultproperties := keyvaultproperties1
		encryptionStatus.Keyvaultproperties = &keyvaultproperties
	}

	// Set property ‘RequireInfrastructureEncryption’:
	if typedInput.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *typedInput.RequireInfrastructureEncryption
		encryptionStatus.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	}

	// Set property ‘Services’:
	if typedInput.Services != nil {
		var services1 EncryptionServices_Status
		err := services1.PopulateFromARM(owner, *typedInput.Services)
		if err != nil {
			return err
		}
		services := services1
		encryptionStatus.Services = &services
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionStatus populates our Encryption_Status from the provided source Encryption_Status
func (encryptionStatus *Encryption_Status) AssignPropertiesFromEncryptionStatus(source *v1alpha1api20210401storage.Encryption_Status) error {

	// Identity
	if source.Identity != nil {
		var identity EncryptionIdentity_Status
		err := identity.AssignPropertiesFromEncryptionIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromEncryptionIdentityStatus()")
		}
		encryptionStatus.Identity = &identity
	} else {
		encryptionStatus.Identity = nil
	}

	// KeySource
	if source.KeySource != nil {
		encryptionStatus.KeySource = EncryptionStatusKeySource(*source.KeySource)
	} else {
		encryptionStatus.KeySource = ""
	}

	// Keyvaultproperties
	if source.Keyvaultproperties != nil {
		var keyvaultproperty KeyVaultProperties_Status
		err := keyvaultproperty.AssignPropertiesFromKeyVaultPropertiesStatus(source.Keyvaultproperties)
		if err != nil {
			return errors.Wrap(err, "populating Keyvaultproperties from Keyvaultproperties, calling AssignPropertiesFromKeyVaultPropertiesStatus()")
		}
		encryptionStatus.Keyvaultproperties = &keyvaultproperty
	} else {
		encryptionStatus.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if source.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *source.RequireInfrastructureEncryption
		encryptionStatus.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		encryptionStatus.RequireInfrastructureEncryption = nil
	}

	// Services
	if source.Services != nil {
		var service EncryptionServices_Status
		err := service.AssignPropertiesFromEncryptionServicesStatus(source.Services)
		if err != nil {
			return errors.Wrap(err, "populating Services from Services, calling AssignPropertiesFromEncryptionServicesStatus()")
		}
		encryptionStatus.Services = &service
	} else {
		encryptionStatus.Services = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionStatus populates the provided destination Encryption_Status from our Encryption_Status
func (encryptionStatus *Encryption_Status) AssignPropertiesToEncryptionStatus(destination *v1alpha1api20210401storage.Encryption_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	if encryptionStatus.Identity != nil {
		var identity v1alpha1api20210401storage.EncryptionIdentity_Status
		err := (*encryptionStatus.Identity).AssignPropertiesToEncryptionIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToEncryptionIdentityStatus()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeySource
	keySource := string(encryptionStatus.KeySource)
	destination.KeySource = &keySource

	// Keyvaultproperties
	if encryptionStatus.Keyvaultproperties != nil {
		var keyvaultproperty v1alpha1api20210401storage.KeyVaultProperties_Status
		err := (*encryptionStatus.Keyvaultproperties).AssignPropertiesToKeyVaultPropertiesStatus(&keyvaultproperty)
		if err != nil {
			return errors.Wrap(err, "populating Keyvaultproperties from Keyvaultproperties, calling AssignPropertiesToKeyVaultPropertiesStatus()")
		}
		destination.Keyvaultproperties = &keyvaultproperty
	} else {
		destination.Keyvaultproperties = nil
	}

	// RequireInfrastructureEncryption
	if encryptionStatus.RequireInfrastructureEncryption != nil {
		requireInfrastructureEncryption := *encryptionStatus.RequireInfrastructureEncryption
		destination.RequireInfrastructureEncryption = &requireInfrastructureEncryption
	} else {
		destination.RequireInfrastructureEncryption = nil
	}

	// Services
	if encryptionStatus.Services != nil {
		var service v1alpha1api20210401storage.EncryptionServices_Status
		err := (*encryptionStatus.Services).AssignPropertiesToEncryptionServicesStatus(&service)
		if err != nil {
			return errors.Wrap(err, "populating Services from Services, calling AssignPropertiesToEncryptionServicesStatus()")
		}
		destination.Services = &service
	} else {
		destination.Services = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type Endpoints_Status struct {
	//Blob: Gets the blob endpoint.
	Blob *string `json:"blob,omitempty"`

	//Dfs: Gets the dfs endpoint.
	Dfs *string `json:"dfs,omitempty"`

	//File: Gets the file endpoint.
	File *string `json:"file,omitempty"`

	//InternetEndpoints: Gets the internet routing storage endpoints
	InternetEndpoints *StorageAccountInternetEndpoints_Status `json:"internetEndpoints,omitempty"`

	//MicrosoftEndpoints: Gets the microsoft routing storage endpoints.
	MicrosoftEndpoints *StorageAccountMicrosoftEndpoints_Status `json:"microsoftEndpoints,omitempty"`

	//Queue: Gets the queue endpoint.
	Queue *string `json:"queue,omitempty"`

	//Table: Gets the table endpoint.
	Table *string `json:"table,omitempty"`

	//Web: Gets the web endpoint.
	Web *string `json:"web,omitempty"`
}

var _ genruntime.FromARMConverter = &Endpoints_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpointsStatus *Endpoints_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &Endpoints_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpointsStatus *Endpoints_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Endpoints_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Endpoints_StatusARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		blob := *typedInput.Blob
		endpointsStatus.Blob = &blob
	}

	// Set property ‘Dfs’:
	if typedInput.Dfs != nil {
		dfs := *typedInput.Dfs
		endpointsStatus.Dfs = &dfs
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		file := *typedInput.File
		endpointsStatus.File = &file
	}

	// Set property ‘InternetEndpoints’:
	if typedInput.InternetEndpoints != nil {
		var internetEndpoints1 StorageAccountInternetEndpoints_Status
		err := internetEndpoints1.PopulateFromARM(owner, *typedInput.InternetEndpoints)
		if err != nil {
			return err
		}
		internetEndpoints := internetEndpoints1
		endpointsStatus.InternetEndpoints = &internetEndpoints
	}

	// Set property ‘MicrosoftEndpoints’:
	if typedInput.MicrosoftEndpoints != nil {
		var microsoftEndpoints1 StorageAccountMicrosoftEndpoints_Status
		err := microsoftEndpoints1.PopulateFromARM(owner, *typedInput.MicrosoftEndpoints)
		if err != nil {
			return err
		}
		microsoftEndpoints := microsoftEndpoints1
		endpointsStatus.MicrosoftEndpoints = &microsoftEndpoints
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		queue := *typedInput.Queue
		endpointsStatus.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		table := *typedInput.Table
		endpointsStatus.Table = &table
	}

	// Set property ‘Web’:
	if typedInput.Web != nil {
		web := *typedInput.Web
		endpointsStatus.Web = &web
	}

	// No error
	return nil
}

// AssignPropertiesFromEndpointsStatus populates our Endpoints_Status from the provided source Endpoints_Status
func (endpointsStatus *Endpoints_Status) AssignPropertiesFromEndpointsStatus(source *v1alpha1api20210401storage.Endpoints_Status) error {

	// Blob
	if source.Blob != nil {
		blob := *source.Blob
		endpointsStatus.Blob = &blob
	} else {
		endpointsStatus.Blob = nil
	}

	// Dfs
	if source.Dfs != nil {
		df := *source.Dfs
		endpointsStatus.Dfs = &df
	} else {
		endpointsStatus.Dfs = nil
	}

	// File
	if source.File != nil {
		file := *source.File
		endpointsStatus.File = &file
	} else {
		endpointsStatus.File = nil
	}

	// InternetEndpoints
	if source.InternetEndpoints != nil {
		var internetEndpoint StorageAccountInternetEndpoints_Status
		err := internetEndpoint.AssignPropertiesFromStorageAccountInternetEndpointsStatus(source.InternetEndpoints)
		if err != nil {
			return errors.Wrap(err, "populating InternetEndpoints from InternetEndpoints, calling AssignPropertiesFromStorageAccountInternetEndpointsStatus()")
		}
		endpointsStatus.InternetEndpoints = &internetEndpoint
	} else {
		endpointsStatus.InternetEndpoints = nil
	}

	// MicrosoftEndpoints
	if source.MicrosoftEndpoints != nil {
		var microsoftEndpoint StorageAccountMicrosoftEndpoints_Status
		err := microsoftEndpoint.AssignPropertiesFromStorageAccountMicrosoftEndpointsStatus(source.MicrosoftEndpoints)
		if err != nil {
			return errors.Wrap(err, "populating MicrosoftEndpoints from MicrosoftEndpoints, calling AssignPropertiesFromStorageAccountMicrosoftEndpointsStatus()")
		}
		endpointsStatus.MicrosoftEndpoints = &microsoftEndpoint
	} else {
		endpointsStatus.MicrosoftEndpoints = nil
	}

	// Queue
	if source.Queue != nil {
		queue := *source.Queue
		endpointsStatus.Queue = &queue
	} else {
		endpointsStatus.Queue = nil
	}

	// Table
	if source.Table != nil {
		table := *source.Table
		endpointsStatus.Table = &table
	} else {
		endpointsStatus.Table = nil
	}

	// Web
	if source.Web != nil {
		web := *source.Web
		endpointsStatus.Web = &web
	} else {
		endpointsStatus.Web = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEndpointsStatus populates the provided destination Endpoints_Status from our Endpoints_Status
func (endpointsStatus *Endpoints_Status) AssignPropertiesToEndpointsStatus(destination *v1alpha1api20210401storage.Endpoints_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if endpointsStatus.Blob != nil {
		blob := *endpointsStatus.Blob
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// Dfs
	if endpointsStatus.Dfs != nil {
		df := *endpointsStatus.Dfs
		destination.Dfs = &df
	} else {
		destination.Dfs = nil
	}

	// File
	if endpointsStatus.File != nil {
		file := *endpointsStatus.File
		destination.File = &file
	} else {
		destination.File = nil
	}

	// InternetEndpoints
	if endpointsStatus.InternetEndpoints != nil {
		var internetEndpoint v1alpha1api20210401storage.StorageAccountInternetEndpoints_Status
		err := (*endpointsStatus.InternetEndpoints).AssignPropertiesToStorageAccountInternetEndpointsStatus(&internetEndpoint)
		if err != nil {
			return errors.Wrap(err, "populating InternetEndpoints from InternetEndpoints, calling AssignPropertiesToStorageAccountInternetEndpointsStatus()")
		}
		destination.InternetEndpoints = &internetEndpoint
	} else {
		destination.InternetEndpoints = nil
	}

	// MicrosoftEndpoints
	if endpointsStatus.MicrosoftEndpoints != nil {
		var microsoftEndpoint v1alpha1api20210401storage.StorageAccountMicrosoftEndpoints_Status
		err := (*endpointsStatus.MicrosoftEndpoints).AssignPropertiesToStorageAccountMicrosoftEndpointsStatus(&microsoftEndpoint)
		if err != nil {
			return errors.Wrap(err, "populating MicrosoftEndpoints from MicrosoftEndpoints, calling AssignPropertiesToStorageAccountMicrosoftEndpointsStatus()")
		}
		destination.MicrosoftEndpoints = &microsoftEndpoint
	} else {
		destination.MicrosoftEndpoints = nil
	}

	// Queue
	if endpointsStatus.Queue != nil {
		queue := *endpointsStatus.Queue
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if endpointsStatus.Table != nil {
		table := *endpointsStatus.Table
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Web
	if endpointsStatus.Web != nil {
		web := *endpointsStatus.Web
		destination.Web = &web
	} else {
		destination.Web = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/ExtendedLocation
type ExtendedLocation struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ExtendedLocation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (extendedLocation *ExtendedLocation) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if extendedLocation == nil {
		return nil, nil
	}
	var result ExtendedLocationARM

	// Set property ‘Name’:
	if extendedLocation.Name != nil {
		name := *extendedLocation.Name
		result.Name = &name
	}

	// Set property ‘Type’:
	if extendedLocation.Type != nil {
		typeVar := *extendedLocation.Type
		result.Type = &typeVar
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (extendedLocation *ExtendedLocation) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (extendedLocation *ExtendedLocation) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocationARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		extendedLocation.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		extendedLocation.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocation populates our ExtendedLocation from the provided source ExtendedLocation
func (extendedLocation *ExtendedLocation) AssignPropertiesFromExtendedLocation(source *v1alpha1api20210401storage.ExtendedLocation) error {

	// Name
	if source.Name != nil {
		name := *source.Name
		extendedLocation.Name = &name
	} else {
		extendedLocation.Name = nil
	}

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType(*source.Type)
		extendedLocation.Type = &typeVar
	} else {
		extendedLocation.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocation populates the provided destination ExtendedLocation from our ExtendedLocation
func (extendedLocation *ExtendedLocation) AssignPropertiesToExtendedLocation(destination *v1alpha1api20210401storage.ExtendedLocation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if extendedLocation.Name != nil {
		name := *extendedLocation.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Type
	if extendedLocation.Type != nil {
		typeVar := string(*extendedLocation.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type ExtendedLocation_Status struct {
	//Name: The name of the extended location.
	Name *string `json:"name,omitempty"`

	//Type: The type of the extended location.
	Type *ExtendedLocationType_Status `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &ExtendedLocation_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (extendedLocationStatus *ExtendedLocation_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExtendedLocation_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (extendedLocationStatus *ExtendedLocation_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExtendedLocation_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExtendedLocation_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		extendedLocationStatus.Name = &name
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		extendedLocationStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromExtendedLocationStatus populates our ExtendedLocation_Status from the provided source ExtendedLocation_Status
func (extendedLocationStatus *ExtendedLocation_Status) AssignPropertiesFromExtendedLocationStatus(source *v1alpha1api20210401storage.ExtendedLocation_Status) error {

	// Name
	if source.Name != nil {
		name := *source.Name
		extendedLocationStatus.Name = &name
	} else {
		extendedLocationStatus.Name = nil
	}

	// Type
	if source.Type != nil {
		typeVar := ExtendedLocationType_Status(*source.Type)
		extendedLocationStatus.Type = &typeVar
	} else {
		extendedLocationStatus.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExtendedLocationStatus populates the provided destination ExtendedLocation_Status from our ExtendedLocation_Status
func (extendedLocationStatus *ExtendedLocation_Status) AssignPropertiesToExtendedLocationStatus(destination *v1alpha1api20210401storage.ExtendedLocation_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if extendedLocationStatus.Name != nil {
		name := *extendedLocationStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Type
	if extendedLocationStatus.Type != nil {
		typeVar := string(*extendedLocationStatus.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type GeoReplicationStats_Status struct {
	//CanFailover: A boolean flag which indicates whether or not account failover is
	//supported for the account.
	CanFailover *bool `json:"canFailover,omitempty"`

	//LastSyncTime: All primary writes preceding this UTC date/time value are
	//guaranteed to be available for read operations. Primary writes following this
	//point in time may or may not be available for reads. Element may be default
	//value if value of LastSyncTime is not available, this can happen if secondary is
	//offline or we are in bootstrap.
	LastSyncTime *string `json:"lastSyncTime,omitempty"`

	//Status: The status of the secondary location. Possible values are: - Live:
	//Indicates that the secondary location is active and operational. - Bootstrap:
	//Indicates initial synchronization from the primary location to the secondary
	//location is in progress.This typically occurs when replication is first enabled.
	//- Unavailable: Indicates that the secondary location is temporarily unavailable.
	Status *GeoReplicationStatsStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &GeoReplicationStats_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (geoReplicationStatsStatus *GeoReplicationStats_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &GeoReplicationStats_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (geoReplicationStatsStatus *GeoReplicationStats_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(GeoReplicationStats_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected GeoReplicationStats_StatusARM, got %T", armInput)
	}

	// Set property ‘CanFailover’:
	if typedInput.CanFailover != nil {
		canFailover := *typedInput.CanFailover
		geoReplicationStatsStatus.CanFailover = &canFailover
	}

	// Set property ‘LastSyncTime’:
	if typedInput.LastSyncTime != nil {
		lastSyncTime := *typedInput.LastSyncTime
		geoReplicationStatsStatus.LastSyncTime = &lastSyncTime
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		geoReplicationStatsStatus.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromGeoReplicationStatsStatus populates our GeoReplicationStats_Status from the provided source GeoReplicationStats_Status
func (geoReplicationStatsStatus *GeoReplicationStats_Status) AssignPropertiesFromGeoReplicationStatsStatus(source *v1alpha1api20210401storage.GeoReplicationStats_Status) error {

	// CanFailover
	if source.CanFailover != nil {
		canFailover := *source.CanFailover
		geoReplicationStatsStatus.CanFailover = &canFailover
	} else {
		geoReplicationStatsStatus.CanFailover = nil
	}

	// LastSyncTime
	if source.LastSyncTime != nil {
		lastSyncTime := *source.LastSyncTime
		geoReplicationStatsStatus.LastSyncTime = &lastSyncTime
	} else {
		geoReplicationStatsStatus.LastSyncTime = nil
	}

	// Status
	if source.Status != nil {
		status := GeoReplicationStatsStatusStatus(*source.Status)
		geoReplicationStatsStatus.Status = &status
	} else {
		geoReplicationStatsStatus.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToGeoReplicationStatsStatus populates the provided destination GeoReplicationStats_Status from our GeoReplicationStats_Status
func (geoReplicationStatsStatus *GeoReplicationStats_Status) AssignPropertiesToGeoReplicationStatsStatus(destination *v1alpha1api20210401storage.GeoReplicationStats_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CanFailover
	if geoReplicationStatsStatus.CanFailover != nil {
		canFailover := *geoReplicationStatsStatus.CanFailover
		destination.CanFailover = &canFailover
	} else {
		destination.CanFailover = nil
	}

	// LastSyncTime
	if geoReplicationStatsStatus.LastSyncTime != nil {
		lastSyncTime := *geoReplicationStatsStatus.LastSyncTime
		destination.LastSyncTime = &lastSyncTime
	} else {
		destination.LastSyncTime = nil
	}

	// Status
	if geoReplicationStatsStatus.Status != nil {
		status := string(*geoReplicationStatsStatus.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/Identity
type Identity struct {
	// +kubebuilder:validation:Required
	//Type: The identity type.
	Type IdentityType `json:"type"`
}

var _ genruntime.ARMTransformer = &Identity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *Identity) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	var result IdentityARM

	// Set property ‘Type’:
	result.Type = identity.Type
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *Identity) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *Identity) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	identity.Type = typedInput.Type

	// No error
	return nil
}

// AssignPropertiesFromIdentity populates our Identity from the provided source Identity
func (identity *Identity) AssignPropertiesFromIdentity(source *v1alpha1api20210401storage.Identity) error {

	// Type
	if source.Type != nil {
		identity.Type = IdentityType(*source.Type)
	} else {
		identity.Type = ""
	}

	// No error
	return nil
}

// AssignPropertiesToIdentity populates the provided destination Identity from our Identity
func (identity *Identity) AssignPropertiesToIdentity(destination *v1alpha1api20210401storage.Identity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	typeVar := string(identity.Type)
	destination.Type = &typeVar

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type Identity_Status struct {
	//PrincipalId: The principal ID of resource identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant ID of resource.
	TenantId *string `json:"tenantId,omitempty"`

	// +kubebuilder:validation:Required
	//Type: The identity type.
	Type IdentityStatusType `json:"type"`

	//UserAssignedIdentities: Gets or sets a list of key value pairs that describe the
	//set of User Assigned identities that will be used with this storage account. The
	//key is the ARM resource identifier of the identity. Only 1 User Assigned
	//identity is permitted here.
	UserAssignedIdentities map[string]UserAssignedIdentity_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &Identity_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identityStatus *Identity_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &Identity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identityStatus *Identity_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Identity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Identity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identityStatus.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identityStatus.TenantId = &tenantId
	}

	// Set property ‘Type’:
	identityStatus.Type = typedInput.Type

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identityStatus.UserAssignedIdentities = make(map[string]UserAssignedIdentity_Status)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserAssignedIdentity_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identityStatus.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentityStatus populates our Identity_Status from the provided source Identity_Status
func (identityStatus *Identity_Status) AssignPropertiesFromIdentityStatus(source *v1alpha1api20210401storage.Identity_Status) error {

	// PrincipalId
	if source.PrincipalId != nil {
		principalId := *source.PrincipalId
		identityStatus.PrincipalId = &principalId
	} else {
		identityStatus.PrincipalId = nil
	}

	// TenantId
	if source.TenantId != nil {
		tenantId := *source.TenantId
		identityStatus.TenantId = &tenantId
	} else {
		identityStatus.TenantId = nil
	}

	// Type
	if source.Type != nil {
		identityStatus.Type = IdentityStatusType(*source.Type)
	} else {
		identityStatus.Type = ""
	}

	// UserAssignedIdentities
	userAssignedIdentityMap := make(map[string]UserAssignedIdentity_Status)
	for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
		// Shadow the loop variable to avoid aliasing
		userAssignedIdentityValue := userAssignedIdentityValue
		var userAssignedIdentity UserAssignedIdentity_Status
		err := userAssignedIdentity.AssignPropertiesFromUserAssignedIdentityStatus(&userAssignedIdentityValue)
		if err != nil {
			return errors.Wrap(err, "populating UserAssignedIdentities from UserAssignedIdentities, calling AssignPropertiesFromUserAssignedIdentityStatus()")
		}
		userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
	}
	identityStatus.UserAssignedIdentities = userAssignedIdentityMap

	// No error
	return nil
}

// AssignPropertiesToIdentityStatus populates the provided destination Identity_Status from our Identity_Status
func (identityStatus *Identity_Status) AssignPropertiesToIdentityStatus(destination *v1alpha1api20210401storage.Identity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	if identityStatus.PrincipalId != nil {
		principalId := *identityStatus.PrincipalId
		destination.PrincipalId = &principalId
	} else {
		destination.PrincipalId = nil
	}

	// TenantId
	if identityStatus.TenantId != nil {
		tenantId := *identityStatus.TenantId
		destination.TenantId = &tenantId
	} else {
		destination.TenantId = nil
	}

	// Type
	typeVar := string(identityStatus.Type)
	destination.Type = &typeVar

	// UserAssignedIdentities
	userAssignedIdentityMap := make(map[string]v1alpha1api20210401storage.UserAssignedIdentity_Status)
	for userAssignedIdentityKey, userAssignedIdentityValue := range identityStatus.UserAssignedIdentities {
		// Shadow the loop variable to avoid aliasing
		userAssignedIdentityValue := userAssignedIdentityValue
		var userAssignedIdentity v1alpha1api20210401storage.UserAssignedIdentity_Status
		err := userAssignedIdentityValue.AssignPropertiesToUserAssignedIdentityStatus(&userAssignedIdentity)
		if err != nil {
			return errors.Wrap(err, "populating UserAssignedIdentities from UserAssignedIdentities, calling AssignPropertiesToUserAssignedIdentityStatus()")
		}
		userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
	}
	destination.UserAssignedIdentities = userAssignedIdentityMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type KeyCreationTime_Status struct {
	Key1 *string `json:"key1,omitempty"`
	Key2 *string `json:"key2,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyCreationTime_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keyCreationTimeStatus *KeyCreationTime_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyCreationTime_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keyCreationTimeStatus *KeyCreationTime_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyCreationTime_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyCreationTime_StatusARM, got %T", armInput)
	}

	// Set property ‘Key1’:
	if typedInput.Key1 != nil {
		key1 := *typedInput.Key1
		keyCreationTimeStatus.Key1 = &key1
	}

	// Set property ‘Key2’:
	if typedInput.Key2 != nil {
		key2 := *typedInput.Key2
		keyCreationTimeStatus.Key2 = &key2
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyCreationTimeStatus populates our KeyCreationTime_Status from the provided source KeyCreationTime_Status
func (keyCreationTimeStatus *KeyCreationTime_Status) AssignPropertiesFromKeyCreationTimeStatus(source *v1alpha1api20210401storage.KeyCreationTime_Status) error {

	// Key1
	if source.Key1 != nil {
		key1 := *source.Key1
		keyCreationTimeStatus.Key1 = &key1
	} else {
		keyCreationTimeStatus.Key1 = nil
	}

	// Key2
	if source.Key2 != nil {
		key2 := *source.Key2
		keyCreationTimeStatus.Key2 = &key2
	} else {
		keyCreationTimeStatus.Key2 = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyCreationTimeStatus populates the provided destination KeyCreationTime_Status from our KeyCreationTime_Status
func (keyCreationTimeStatus *KeyCreationTime_Status) AssignPropertiesToKeyCreationTimeStatus(destination *v1alpha1api20210401storage.KeyCreationTime_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Key1
	if keyCreationTimeStatus.Key1 != nil {
		key1 := *keyCreationTimeStatus.Key1
		destination.Key1 = &key1
	} else {
		destination.Key1 = nil
	}

	// Key2
	if keyCreationTimeStatus.Key2 != nil {
		key2 := *keyCreationTimeStatus.Key2
		destination.Key2 = &key2
	} else {
		destination.Key2 = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/KeyPolicy
type KeyPolicy struct {
	// +kubebuilder:validation:Required
	//KeyExpirationPeriodInDays: The key expiration period in days.
	KeyExpirationPeriodInDays int `json:"keyExpirationPeriodInDays"`
}

var _ genruntime.ARMTransformer = &KeyPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (keyPolicy *KeyPolicy) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if keyPolicy == nil {
		return nil, nil
	}
	var result KeyPolicyARM

	// Set property ‘KeyExpirationPeriodInDays’:
	result.KeyExpirationPeriodInDays = keyPolicy.KeyExpirationPeriodInDays
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keyPolicy *KeyPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keyPolicy *KeyPolicy) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyPolicyARM, got %T", armInput)
	}

	// Set property ‘KeyExpirationPeriodInDays’:
	keyPolicy.KeyExpirationPeriodInDays = typedInput.KeyExpirationPeriodInDays

	// No error
	return nil
}

// AssignPropertiesFromKeyPolicy populates our KeyPolicy from the provided source KeyPolicy
func (keyPolicy *KeyPolicy) AssignPropertiesFromKeyPolicy(source *v1alpha1api20210401storage.KeyPolicy) error {

	// KeyExpirationPeriodInDays
	if source.KeyExpirationPeriodInDays != nil {
		keyPolicy.KeyExpirationPeriodInDays = *source.KeyExpirationPeriodInDays
	} else {
		keyPolicy.KeyExpirationPeriodInDays = 0
	}

	// No error
	return nil
}

// AssignPropertiesToKeyPolicy populates the provided destination KeyPolicy from our KeyPolicy
func (keyPolicy *KeyPolicy) AssignPropertiesToKeyPolicy(destination *v1alpha1api20210401storage.KeyPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyExpirationPeriodInDays
	keyExpirationPeriodInDay := keyPolicy.KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = &keyExpirationPeriodInDay

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type KeyPolicy_Status struct {
	// +kubebuilder:validation:Required
	//KeyExpirationPeriodInDays: The key expiration period in days.
	KeyExpirationPeriodInDays int `json:"keyExpirationPeriodInDays"`
}

var _ genruntime.FromARMConverter = &KeyPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keyPolicyStatus *KeyPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keyPolicyStatus *KeyPolicy_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyExpirationPeriodInDays’:
	keyPolicyStatus.KeyExpirationPeriodInDays = typedInput.KeyExpirationPeriodInDays

	// No error
	return nil
}

// AssignPropertiesFromKeyPolicyStatus populates our KeyPolicy_Status from the provided source KeyPolicy_Status
func (keyPolicyStatus *KeyPolicy_Status) AssignPropertiesFromKeyPolicyStatus(source *v1alpha1api20210401storage.KeyPolicy_Status) error {

	// KeyExpirationPeriodInDays
	if source.KeyExpirationPeriodInDays != nil {
		keyPolicyStatus.KeyExpirationPeriodInDays = *source.KeyExpirationPeriodInDays
	} else {
		keyPolicyStatus.KeyExpirationPeriodInDays = 0
	}

	// No error
	return nil
}

// AssignPropertiesToKeyPolicyStatus populates the provided destination KeyPolicy_Status from our KeyPolicy_Status
func (keyPolicyStatus *KeyPolicy_Status) AssignPropertiesToKeyPolicyStatus(destination *v1alpha1api20210401storage.KeyPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyExpirationPeriodInDays
	keyExpirationPeriodInDay := keyPolicyStatus.KeyExpirationPeriodInDays
	destination.KeyExpirationPeriodInDays = &keyExpirationPeriodInDay

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/NetworkRuleSet
type NetworkRuleSet struct {
	//Bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
	//Possible values are any combination of Logging|Metrics|AzureServices (For
	//example, "Logging, Metrics"), or None to bypass none of those traffics.
	Bypass *NetworkRuleSetBypass `json:"bypass,omitempty"`

	// +kubebuilder:validation:Required
	//DefaultAction: Specifies the default action of allow or deny when no other rules
	//match.
	DefaultAction NetworkRuleSetDefaultAction `json:"defaultAction"`

	//IpRules: Sets the IP ACL rules
	IpRules []IPRule `json:"ipRules,omitempty"`

	//ResourceAccessRules: Sets the resource access rules
	ResourceAccessRules []ResourceAccessRule `json:"resourceAccessRules,omitempty"`

	//VirtualNetworkRules: Sets the virtual network rules
	VirtualNetworkRules []VirtualNetworkRule `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkRuleSet{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (networkRuleSet *NetworkRuleSet) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if networkRuleSet == nil {
		return nil, nil
	}
	var result NetworkRuleSetARM

	// Set property ‘Bypass’:
	if networkRuleSet.Bypass != nil {
		bypass := *networkRuleSet.Bypass
		result.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	result.DefaultAction = networkRuleSet.DefaultAction

	// Set property ‘IpRules’:
	for _, item := range networkRuleSet.IpRules {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.IpRules = append(result.IpRules, itemARM.(IPRuleARM))
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range networkRuleSet.ResourceAccessRules {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.ResourceAccessRules = append(result.ResourceAccessRules, itemARM.(ResourceAccessRuleARM))
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range networkRuleSet.VirtualNetworkRules {
		itemARM, err := item.ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		result.VirtualNetworkRules = append(result.VirtualNetworkRules, itemARM.(VirtualNetworkRuleARM))
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkRuleSet *NetworkRuleSet) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSetARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkRuleSet *NetworkRuleSet) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSetARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSetARM, got %T", armInput)
	}

	// Set property ‘Bypass’:
	if typedInput.Bypass != nil {
		bypass := *typedInput.Bypass
		networkRuleSet.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	networkRuleSet.DefaultAction = typedInput.DefaultAction

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		networkRuleSet.IpRules = append(networkRuleSet.IpRules, item1)
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range typedInput.ResourceAccessRules {
		var item1 ResourceAccessRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		networkRuleSet.ResourceAccessRules = append(networkRuleSet.ResourceAccessRules, item1)
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range typedInput.VirtualNetworkRules {
		var item1 VirtualNetworkRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		networkRuleSet.VirtualNetworkRules = append(networkRuleSet.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSet populates our NetworkRuleSet from the provided source NetworkRuleSet
func (networkRuleSet *NetworkRuleSet) AssignPropertiesFromNetworkRuleSet(source *v1alpha1api20210401storage.NetworkRuleSet) error {

	// Bypass
	if source.Bypass != nil {
		bypass := NetworkRuleSetBypass(*source.Bypass)
		networkRuleSet.Bypass = &bypass
	} else {
		networkRuleSet.Bypass = nil
	}

	// DefaultAction
	if source.DefaultAction != nil {
		networkRuleSet.DefaultAction = NetworkRuleSetDefaultAction(*source.DefaultAction)
	} else {
		networkRuleSet.DefaultAction = ""
	}

	// IpRules
	ipRuleList := make([]IPRule, len(source.IpRules))
	for ipRuleIndex, ipRuleItem := range source.IpRules {
		// Shadow the loop variable to avoid aliasing
		ipRuleItem := ipRuleItem
		var ipRule IPRule
		err := ipRule.AssignPropertiesFromIPRule(&ipRuleItem)
		if err != nil {
			return errors.Wrap(err, "populating IpRules from IpRules, calling AssignPropertiesFromIPRule()")
		}
		ipRuleList[ipRuleIndex] = ipRule
	}
	networkRuleSet.IpRules = ipRuleList

	// ResourceAccessRules
	resourceAccessRuleList := make([]ResourceAccessRule, len(source.ResourceAccessRules))
	for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
		// Shadow the loop variable to avoid aliasing
		resourceAccessRuleItem := resourceAccessRuleItem
		var resourceAccessRule ResourceAccessRule
		err := resourceAccessRule.AssignPropertiesFromResourceAccessRule(&resourceAccessRuleItem)
		if err != nil {
			return errors.Wrap(err, "populating ResourceAccessRules from ResourceAccessRules, calling AssignPropertiesFromResourceAccessRule()")
		}
		resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
	}
	networkRuleSet.ResourceAccessRules = resourceAccessRuleList

	// VirtualNetworkRules
	virtualNetworkRuleList := make([]VirtualNetworkRule, len(source.VirtualNetworkRules))
	for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
		// Shadow the loop variable to avoid aliasing
		virtualNetworkRuleItem := virtualNetworkRuleItem
		var virtualNetworkRule VirtualNetworkRule
		err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRule(&virtualNetworkRuleItem)
		if err != nil {
			return errors.Wrap(err, "populating VirtualNetworkRules from VirtualNetworkRules, calling AssignPropertiesFromVirtualNetworkRule()")
		}
		virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
	}
	networkRuleSet.VirtualNetworkRules = virtualNetworkRuleList

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSet populates the provided destination NetworkRuleSet from our NetworkRuleSet
func (networkRuleSet *NetworkRuleSet) AssignPropertiesToNetworkRuleSet(destination *v1alpha1api20210401storage.NetworkRuleSet) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bypass
	if networkRuleSet.Bypass != nil {
		bypass := string(*networkRuleSet.Bypass)
		destination.Bypass = &bypass
	} else {
		destination.Bypass = nil
	}

	// DefaultAction
	defaultAction := string(networkRuleSet.DefaultAction)
	destination.DefaultAction = &defaultAction

	// IpRules
	ipRuleList := make([]v1alpha1api20210401storage.IPRule, len(networkRuleSet.IpRules))
	for ipRuleIndex, ipRuleItem := range networkRuleSet.IpRules {
		// Shadow the loop variable to avoid aliasing
		ipRuleItem := ipRuleItem
		var ipRule v1alpha1api20210401storage.IPRule
		err := ipRuleItem.AssignPropertiesToIPRule(&ipRule)
		if err != nil {
			return errors.Wrap(err, "populating IpRules from IpRules, calling AssignPropertiesToIPRule()")
		}
		ipRuleList[ipRuleIndex] = ipRule
	}
	destination.IpRules = ipRuleList

	// ResourceAccessRules
	resourceAccessRuleList := make([]v1alpha1api20210401storage.ResourceAccessRule, len(networkRuleSet.ResourceAccessRules))
	for resourceAccessRuleIndex, resourceAccessRuleItem := range networkRuleSet.ResourceAccessRules {
		// Shadow the loop variable to avoid aliasing
		resourceAccessRuleItem := resourceAccessRuleItem
		var resourceAccessRule v1alpha1api20210401storage.ResourceAccessRule
		err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRule(&resourceAccessRule)
		if err != nil {
			return errors.Wrap(err, "populating ResourceAccessRules from ResourceAccessRules, calling AssignPropertiesToResourceAccessRule()")
		}
		resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
	}
	destination.ResourceAccessRules = resourceAccessRuleList

	// VirtualNetworkRules
	virtualNetworkRuleList := make([]v1alpha1api20210401storage.VirtualNetworkRule, len(networkRuleSet.VirtualNetworkRules))
	for virtualNetworkRuleIndex, virtualNetworkRuleItem := range networkRuleSet.VirtualNetworkRules {
		// Shadow the loop variable to avoid aliasing
		virtualNetworkRuleItem := virtualNetworkRuleItem
		var virtualNetworkRule v1alpha1api20210401storage.VirtualNetworkRule
		err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRule(&virtualNetworkRule)
		if err != nil {
			return errors.Wrap(err, "populating VirtualNetworkRules from VirtualNetworkRules, calling AssignPropertiesToVirtualNetworkRule()")
		}
		virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
	}
	destination.VirtualNetworkRules = virtualNetworkRuleList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type NetworkRuleSet_Status struct {
	//Bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
	//Possible values are any combination of Logging|Metrics|AzureServices (For
	//example, "Logging, Metrics"), or None to bypass none of those traffics.
	Bypass *NetworkRuleSetStatusBypass `json:"bypass,omitempty"`

	// +kubebuilder:validation:Required
	//DefaultAction: Specifies the default action of allow or deny when no other rules
	//match.
	DefaultAction NetworkRuleSetStatusDefaultAction `json:"defaultAction"`

	//IpRules: Sets the IP ACL rules
	IpRules []IPRule_Status `json:"ipRules,omitempty"`

	//ResourceAccessRules: Sets the resource access rules
	ResourceAccessRules []ResourceAccessRule_Status `json:"resourceAccessRules,omitempty"`

	//VirtualNetworkRules: Sets the virtual network rules
	VirtualNetworkRules []VirtualNetworkRule_Status `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkRuleSet_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkRuleSetStatus *NetworkRuleSet_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSet_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkRuleSetStatus *NetworkRuleSet_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSet_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSet_StatusARM, got %T", armInput)
	}

	// Set property ‘Bypass’:
	if typedInput.Bypass != nil {
		bypass := *typedInput.Bypass
		networkRuleSetStatus.Bypass = &bypass
	}

	// Set property ‘DefaultAction’:
	networkRuleSetStatus.DefaultAction = typedInput.DefaultAction

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		networkRuleSetStatus.IpRules = append(networkRuleSetStatus.IpRules, item1)
	}

	// Set property ‘ResourceAccessRules’:
	for _, item := range typedInput.ResourceAccessRules {
		var item1 ResourceAccessRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		networkRuleSetStatus.ResourceAccessRules = append(networkRuleSetStatus.ResourceAccessRules, item1)
	}

	// Set property ‘VirtualNetworkRules’:
	for _, item := range typedInput.VirtualNetworkRules {
		var item1 VirtualNetworkRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		networkRuleSetStatus.VirtualNetworkRules = append(networkRuleSetStatus.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSetStatus populates our NetworkRuleSet_Status from the provided source NetworkRuleSet_Status
func (networkRuleSetStatus *NetworkRuleSet_Status) AssignPropertiesFromNetworkRuleSetStatus(source *v1alpha1api20210401storage.NetworkRuleSet_Status) error {

	// Bypass
	if source.Bypass != nil {
		bypass := NetworkRuleSetStatusBypass(*source.Bypass)
		networkRuleSetStatus.Bypass = &bypass
	} else {
		networkRuleSetStatus.Bypass = nil
	}

	// DefaultAction
	if source.DefaultAction != nil {
		networkRuleSetStatus.DefaultAction = NetworkRuleSetStatusDefaultAction(*source.DefaultAction)
	} else {
		networkRuleSetStatus.DefaultAction = ""
	}

	// IpRules
	ipRuleList := make([]IPRule_Status, len(source.IpRules))
	for ipRuleIndex, ipRuleItem := range source.IpRules {
		// Shadow the loop variable to avoid aliasing
		ipRuleItem := ipRuleItem
		var ipRule IPRule_Status
		err := ipRule.AssignPropertiesFromIPRuleStatus(&ipRuleItem)
		if err != nil {
			return errors.Wrap(err, "populating IpRules from IpRules, calling AssignPropertiesFromIPRuleStatus()")
		}
		ipRuleList[ipRuleIndex] = ipRule
	}
	networkRuleSetStatus.IpRules = ipRuleList

	// ResourceAccessRules
	resourceAccessRuleList := make([]ResourceAccessRule_Status, len(source.ResourceAccessRules))
	for resourceAccessRuleIndex, resourceAccessRuleItem := range source.ResourceAccessRules {
		// Shadow the loop variable to avoid aliasing
		resourceAccessRuleItem := resourceAccessRuleItem
		var resourceAccessRule ResourceAccessRule_Status
		err := resourceAccessRule.AssignPropertiesFromResourceAccessRuleStatus(&resourceAccessRuleItem)
		if err != nil {
			return errors.Wrap(err, "populating ResourceAccessRules from ResourceAccessRules, calling AssignPropertiesFromResourceAccessRuleStatus()")
		}
		resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
	}
	networkRuleSetStatus.ResourceAccessRules = resourceAccessRuleList

	// VirtualNetworkRules
	virtualNetworkRuleList := make([]VirtualNetworkRule_Status, len(source.VirtualNetworkRules))
	for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
		// Shadow the loop variable to avoid aliasing
		virtualNetworkRuleItem := virtualNetworkRuleItem
		var virtualNetworkRule VirtualNetworkRule_Status
		err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRuleStatus(&virtualNetworkRuleItem)
		if err != nil {
			return errors.Wrap(err, "populating VirtualNetworkRules from VirtualNetworkRules, calling AssignPropertiesFromVirtualNetworkRuleStatus()")
		}
		virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
	}
	networkRuleSetStatus.VirtualNetworkRules = virtualNetworkRuleList

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSetStatus populates the provided destination NetworkRuleSet_Status from our NetworkRuleSet_Status
func (networkRuleSetStatus *NetworkRuleSet_Status) AssignPropertiesToNetworkRuleSetStatus(destination *v1alpha1api20210401storage.NetworkRuleSet_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Bypass
	if networkRuleSetStatus.Bypass != nil {
		bypass := string(*networkRuleSetStatus.Bypass)
		destination.Bypass = &bypass
	} else {
		destination.Bypass = nil
	}

	// DefaultAction
	defaultAction := string(networkRuleSetStatus.DefaultAction)
	destination.DefaultAction = &defaultAction

	// IpRules
	ipRuleList := make([]v1alpha1api20210401storage.IPRule_Status, len(networkRuleSetStatus.IpRules))
	for ipRuleIndex, ipRuleItem := range networkRuleSetStatus.IpRules {
		// Shadow the loop variable to avoid aliasing
		ipRuleItem := ipRuleItem
		var ipRule v1alpha1api20210401storage.IPRule_Status
		err := ipRuleItem.AssignPropertiesToIPRuleStatus(&ipRule)
		if err != nil {
			return errors.Wrap(err, "populating IpRules from IpRules, calling AssignPropertiesToIPRuleStatus()")
		}
		ipRuleList[ipRuleIndex] = ipRule
	}
	destination.IpRules = ipRuleList

	// ResourceAccessRules
	resourceAccessRuleList := make([]v1alpha1api20210401storage.ResourceAccessRule_Status, len(networkRuleSetStatus.ResourceAccessRules))
	for resourceAccessRuleIndex, resourceAccessRuleItem := range networkRuleSetStatus.ResourceAccessRules {
		// Shadow the loop variable to avoid aliasing
		resourceAccessRuleItem := resourceAccessRuleItem
		var resourceAccessRule v1alpha1api20210401storage.ResourceAccessRule_Status
		err := resourceAccessRuleItem.AssignPropertiesToResourceAccessRuleStatus(&resourceAccessRule)
		if err != nil {
			return errors.Wrap(err, "populating ResourceAccessRules from ResourceAccessRules, calling AssignPropertiesToResourceAccessRuleStatus()")
		}
		resourceAccessRuleList[resourceAccessRuleIndex] = resourceAccessRule
	}
	destination.ResourceAccessRules = resourceAccessRuleList

	// VirtualNetworkRules
	virtualNetworkRuleList := make([]v1alpha1api20210401storage.VirtualNetworkRule_Status, len(networkRuleSetStatus.VirtualNetworkRules))
	for virtualNetworkRuleIndex, virtualNetworkRuleItem := range networkRuleSetStatus.VirtualNetworkRules {
		// Shadow the loop variable to avoid aliasing
		virtualNetworkRuleItem := virtualNetworkRuleItem
		var virtualNetworkRule v1alpha1api20210401storage.VirtualNetworkRule_Status
		err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRuleStatus(&virtualNetworkRule)
		if err != nil {
			return errors.Wrap(err, "populating VirtualNetworkRules from VirtualNetworkRules, calling AssignPropertiesToVirtualNetworkRuleStatus()")
		}
		virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
	}
	destination.VirtualNetworkRules = virtualNetworkRuleList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		privateEndpointConnectionStatusSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(source *v1alpha1api20210401storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		privateEndpointConnectionStatusSubResourceEmbedded.Id = &id
	} else {
		privateEndpointConnectionStatusSubResourceEmbedded.Id = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(destination *v1alpha1api20210401storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if privateEndpointConnectionStatusSubResourceEmbedded.Id != nil {
		id := *privateEndpointConnectionStatusSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/RoutingPreference
type RoutingPreference struct {
	//PublishInternetEndpoints: A boolean flag which indicates whether internet
	//routing storage endpoints are to be published
	PublishInternetEndpoints *bool `json:"publishInternetEndpoints,omitempty"`

	//PublishMicrosoftEndpoints: A boolean flag which indicates whether microsoft
	//routing storage endpoints are to be published
	PublishMicrosoftEndpoints *bool `json:"publishMicrosoftEndpoints,omitempty"`

	//RoutingChoice: Routing Choice defines the kind of network routing opted by the
	//user.
	RoutingChoice *RoutingPreferenceRoutingChoice `json:"routingChoice,omitempty"`
}

var _ genruntime.ARMTransformer = &RoutingPreference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (routingPreference *RoutingPreference) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if routingPreference == nil {
		return nil, nil
	}
	var result RoutingPreferenceARM

	// Set property ‘PublishInternetEndpoints’:
	if routingPreference.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *routingPreference.PublishInternetEndpoints
		result.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if routingPreference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *routingPreference.PublishMicrosoftEndpoints
		result.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if routingPreference.RoutingChoice != nil {
		routingChoice := *routingPreference.RoutingChoice
		result.RoutingChoice = &routingChoice
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (routingPreference *RoutingPreference) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoutingPreferenceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (routingPreference *RoutingPreference) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoutingPreferenceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoutingPreferenceARM, got %T", armInput)
	}

	// Set property ‘PublishInternetEndpoints’:
	if typedInput.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *typedInput.PublishInternetEndpoints
		routingPreference.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if typedInput.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *typedInput.PublishMicrosoftEndpoints
		routingPreference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if typedInput.RoutingChoice != nil {
		routingChoice := *typedInput.RoutingChoice
		routingPreference.RoutingChoice = &routingChoice
	}

	// No error
	return nil
}

// AssignPropertiesFromRoutingPreference populates our RoutingPreference from the provided source RoutingPreference
func (routingPreference *RoutingPreference) AssignPropertiesFromRoutingPreference(source *v1alpha1api20210401storage.RoutingPreference) error {

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		routingPreference.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		routingPreference.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		routingPreference.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		routingPreference.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if source.RoutingChoice != nil {
		routingChoice := RoutingPreferenceRoutingChoice(*source.RoutingChoice)
		routingPreference.RoutingChoice = &routingChoice
	} else {
		routingPreference.RoutingChoice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreference populates the provided destination RoutingPreference from our RoutingPreference
func (routingPreference *RoutingPreference) AssignPropertiesToRoutingPreference(destination *v1alpha1api20210401storage.RoutingPreference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublishInternetEndpoints
	if routingPreference.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *routingPreference.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if routingPreference.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *routingPreference.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if routingPreference.RoutingChoice != nil {
		routingChoice := string(*routingPreference.RoutingChoice)
		destination.RoutingChoice = &routingChoice
	} else {
		destination.RoutingChoice = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type RoutingPreference_Status struct {
	//PublishInternetEndpoints: A boolean flag which indicates whether internet
	//routing storage endpoints are to be published
	PublishInternetEndpoints *bool `json:"publishInternetEndpoints,omitempty"`

	//PublishMicrosoftEndpoints: A boolean flag which indicates whether microsoft
	//routing storage endpoints are to be published
	PublishMicrosoftEndpoints *bool `json:"publishMicrosoftEndpoints,omitempty"`

	//RoutingChoice: Routing Choice defines the kind of network routing opted by the
	//user.
	RoutingChoice *RoutingPreferenceStatusRoutingChoice `json:"routingChoice,omitempty"`
}

var _ genruntime.FromARMConverter = &RoutingPreference_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (routingPreferenceStatus *RoutingPreference_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &RoutingPreference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (routingPreferenceStatus *RoutingPreference_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(RoutingPreference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RoutingPreference_StatusARM, got %T", armInput)
	}

	// Set property ‘PublishInternetEndpoints’:
	if typedInput.PublishInternetEndpoints != nil {
		publishInternetEndpoints := *typedInput.PublishInternetEndpoints
		routingPreferenceStatus.PublishInternetEndpoints = &publishInternetEndpoints
	}

	// Set property ‘PublishMicrosoftEndpoints’:
	if typedInput.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoints := *typedInput.PublishMicrosoftEndpoints
		routingPreferenceStatus.PublishMicrosoftEndpoints = &publishMicrosoftEndpoints
	}

	// Set property ‘RoutingChoice’:
	if typedInput.RoutingChoice != nil {
		routingChoice := *typedInput.RoutingChoice
		routingPreferenceStatus.RoutingChoice = &routingChoice
	}

	// No error
	return nil
}

// AssignPropertiesFromRoutingPreferenceStatus populates our RoutingPreference_Status from the provided source RoutingPreference_Status
func (routingPreferenceStatus *RoutingPreference_Status) AssignPropertiesFromRoutingPreferenceStatus(source *v1alpha1api20210401storage.RoutingPreference_Status) error {

	// PublishInternetEndpoints
	if source.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *source.PublishInternetEndpoints
		routingPreferenceStatus.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		routingPreferenceStatus.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if source.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *source.PublishMicrosoftEndpoints
		routingPreferenceStatus.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		routingPreferenceStatus.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if source.RoutingChoice != nil {
		routingChoice := RoutingPreferenceStatusRoutingChoice(*source.RoutingChoice)
		routingPreferenceStatus.RoutingChoice = &routingChoice
	} else {
		routingPreferenceStatus.RoutingChoice = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRoutingPreferenceStatus populates the provided destination RoutingPreference_Status from our RoutingPreference_Status
func (routingPreferenceStatus *RoutingPreference_Status) AssignPropertiesToRoutingPreferenceStatus(destination *v1alpha1api20210401storage.RoutingPreference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PublishInternetEndpoints
	if routingPreferenceStatus.PublishInternetEndpoints != nil {
		publishInternetEndpoint := *routingPreferenceStatus.PublishInternetEndpoints
		destination.PublishInternetEndpoints = &publishInternetEndpoint
	} else {
		destination.PublishInternetEndpoints = nil
	}

	// PublishMicrosoftEndpoints
	if routingPreferenceStatus.PublishMicrosoftEndpoints != nil {
		publishMicrosoftEndpoint := *routingPreferenceStatus.PublishMicrosoftEndpoints
		destination.PublishMicrosoftEndpoints = &publishMicrosoftEndpoint
	} else {
		destination.PublishMicrosoftEndpoints = nil
	}

	// RoutingChoice
	if routingPreferenceStatus.RoutingChoice != nil {
		routingChoice := string(*routingPreferenceStatus.RoutingChoice)
		destination.RoutingChoice = &routingChoice
	} else {
		destination.RoutingChoice = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/SasPolicy
type SasPolicy struct {
	// +kubebuilder:validation:Required
	//ExpirationAction: The SAS expiration action. Can only be Log.
	ExpirationAction SasPolicyExpirationAction `json:"expirationAction"`

	// +kubebuilder:validation:Required
	//SasExpirationPeriod: The SAS expiration period, DD.HH:MM:SS.
	SasExpirationPeriod string `json:"sasExpirationPeriod"`
}

var _ genruntime.ARMTransformer = &SasPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sasPolicy *SasPolicy) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if sasPolicy == nil {
		return nil, nil
	}
	var result SasPolicyARM

	// Set property ‘ExpirationAction’:
	result.ExpirationAction = sasPolicy.ExpirationAction

	// Set property ‘SasExpirationPeriod’:
	result.SasExpirationPeriod = sasPolicy.SasExpirationPeriod
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sasPolicy *SasPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SasPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sasPolicy *SasPolicy) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(SasPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SasPolicyARM, got %T", armInput)
	}

	// Set property ‘ExpirationAction’:
	sasPolicy.ExpirationAction = typedInput.ExpirationAction

	// Set property ‘SasExpirationPeriod’:
	sasPolicy.SasExpirationPeriod = typedInput.SasExpirationPeriod

	// No error
	return nil
}

// AssignPropertiesFromSasPolicy populates our SasPolicy from the provided source SasPolicy
func (sasPolicy *SasPolicy) AssignPropertiesFromSasPolicy(source *v1alpha1api20210401storage.SasPolicy) error {

	// ExpirationAction
	if source.ExpirationAction != nil {
		sasPolicy.ExpirationAction = SasPolicyExpirationAction(*source.ExpirationAction)
	} else {
		sasPolicy.ExpirationAction = ""
	}

	// SasExpirationPeriod
	if source.SasExpirationPeriod != nil {
		sasPolicy.SasExpirationPeriod = *source.SasExpirationPeriod
	} else {
		sasPolicy.SasExpirationPeriod = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSasPolicy populates the provided destination SasPolicy from our SasPolicy
func (sasPolicy *SasPolicy) AssignPropertiesToSasPolicy(destination *v1alpha1api20210401storage.SasPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpirationAction
	expirationAction := string(sasPolicy.ExpirationAction)
	destination.ExpirationAction = &expirationAction

	// SasExpirationPeriod
	sasExpirationPeriod := sasPolicy.SasExpirationPeriod
	destination.SasExpirationPeriod = &sasExpirationPeriod

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type SasPolicy_Status struct {
	// +kubebuilder:validation:Required
	//ExpirationAction: The SAS expiration action. Can only be Log.
	ExpirationAction SasPolicyStatusExpirationAction `json:"expirationAction"`

	// +kubebuilder:validation:Required
	//SasExpirationPeriod: The SAS expiration period, DD.HH:MM:SS.
	SasExpirationPeriod string `json:"sasExpirationPeriod"`
}

var _ genruntime.FromARMConverter = &SasPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sasPolicyStatus *SasPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SasPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sasPolicyStatus *SasPolicy_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(SasPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SasPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘ExpirationAction’:
	sasPolicyStatus.ExpirationAction = typedInput.ExpirationAction

	// Set property ‘SasExpirationPeriod’:
	sasPolicyStatus.SasExpirationPeriod = typedInput.SasExpirationPeriod

	// No error
	return nil
}

// AssignPropertiesFromSasPolicyStatus populates our SasPolicy_Status from the provided source SasPolicy_Status
func (sasPolicyStatus *SasPolicy_Status) AssignPropertiesFromSasPolicyStatus(source *v1alpha1api20210401storage.SasPolicy_Status) error {

	// ExpirationAction
	if source.ExpirationAction != nil {
		sasPolicyStatus.ExpirationAction = SasPolicyStatusExpirationAction(*source.ExpirationAction)
	} else {
		sasPolicyStatus.ExpirationAction = ""
	}

	// SasExpirationPeriod
	if source.SasExpirationPeriod != nil {
		sasPolicyStatus.SasExpirationPeriod = *source.SasExpirationPeriod
	} else {
		sasPolicyStatus.SasExpirationPeriod = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSasPolicyStatus populates the provided destination SasPolicy_Status from our SasPolicy_Status
func (sasPolicyStatus *SasPolicy_Status) AssignPropertiesToSasPolicyStatus(destination *v1alpha1api20210401storage.SasPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExpirationAction
	expirationAction := string(sasPolicyStatus.ExpirationAction)
	destination.ExpirationAction = &expirationAction

	// SasExpirationPeriod
	sasExpirationPeriod := sasPolicyStatus.SasExpirationPeriod
	destination.SasExpirationPeriod = &sasExpirationPeriod

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/Sku
type Sku struct {
	// +kubebuilder:validation:Required
	Name SkuName  `json:"name"`
	Tier *SkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	var result SkuARM

	// Set property ‘Name’:
	result.Name = sku.Name

	// Set property ‘Tier’:
	if sku.Tier != nil {
		tier := *sku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v1alpha1api20210401storage.Sku) error {

	// Name
	if source.Name != nil {
		sku.Name = SkuName(*source.Name)
	} else {
		sku.Name = ""
	}

	// Tier
	if source.Tier != nil {
		tier := SkuTier(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v1alpha1api20210401storage.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := string(sku.Name)
	destination.Name = &name

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type Sku_Status struct {
	// +kubebuilder:validation:Required
	Name SkuName_Status `json:"name"`
	Tier *Tier_Status   `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (skuStatus *Sku_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (skuStatus *Sku_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	skuStatus.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		skuStatus.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuStatus populates our Sku_Status from the provided source Sku_Status
func (skuStatus *Sku_Status) AssignPropertiesFromSkuStatus(source *v1alpha1api20210401storage.Sku_Status) error {

	// Name
	if source.Name != nil {
		skuStatus.Name = SkuName_Status(*source.Name)
	} else {
		skuStatus.Name = ""
	}

	// Tier
	if source.Tier != nil {
		tier := Tier_Status(*source.Tier)
		skuStatus.Tier = &tier
	} else {
		skuStatus.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSkuStatus populates the provided destination Sku_Status from our Sku_Status
func (skuStatus *Sku_Status) AssignPropertiesToSkuStatus(destination *v1alpha1api20210401storage.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := string(skuStatus.Name)
	destination.Name = &name

	// Tier
	if skuStatus.Tier != nil {
		tier := string(*skuStatus.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Cool","Hot"}
type StorageAccountPropertiesCreateParametersAccessTier string

const (
	StorageAccountPropertiesCreateParametersAccessTierCool = StorageAccountPropertiesCreateParametersAccessTier("Cool")
	StorageAccountPropertiesCreateParametersAccessTierHot  = StorageAccountPropertiesCreateParametersAccessTier("Hot")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type StorageAccountPropertiesCreateParametersLargeFileSharesState string

const (
	StorageAccountPropertiesCreateParametersLargeFileSharesStateDisabled = StorageAccountPropertiesCreateParametersLargeFileSharesState("Disabled")
	StorageAccountPropertiesCreateParametersLargeFileSharesStateEnabled  = StorageAccountPropertiesCreateParametersLargeFileSharesState("Enabled")
)

// +kubebuilder:validation:Enum={"TLS1_0","TLS1_1","TLS1_2"}
type StorageAccountPropertiesCreateParametersMinimumTlsVersion string

const (
	StorageAccountPropertiesCreateParametersMinimumTlsVersionTLS10 = StorageAccountPropertiesCreateParametersMinimumTlsVersion("TLS1_0")
	StorageAccountPropertiesCreateParametersMinimumTlsVersionTLS11 = StorageAccountPropertiesCreateParametersMinimumTlsVersion("TLS1_1")
	StorageAccountPropertiesCreateParametersMinimumTlsVersionTLS12 = StorageAccountPropertiesCreateParametersMinimumTlsVersion("TLS1_2")
)

type StorageAccountPropertiesStatusAccessTier string

const (
	StorageAccountPropertiesStatusAccessTierCool = StorageAccountPropertiesStatusAccessTier("Cool")
	StorageAccountPropertiesStatusAccessTierHot  = StorageAccountPropertiesStatusAccessTier("Hot")
)

type StorageAccountPropertiesStatusLargeFileSharesState string

const (
	StorageAccountPropertiesStatusLargeFileSharesStateDisabled = StorageAccountPropertiesStatusLargeFileSharesState("Disabled")
	StorageAccountPropertiesStatusLargeFileSharesStateEnabled  = StorageAccountPropertiesStatusLargeFileSharesState("Enabled")
)

type StorageAccountPropertiesStatusMinimumTlsVersion string

const (
	StorageAccountPropertiesStatusMinimumTlsVersionTLS10 = StorageAccountPropertiesStatusMinimumTlsVersion("TLS1_0")
	StorageAccountPropertiesStatusMinimumTlsVersionTLS11 = StorageAccountPropertiesStatusMinimumTlsVersion("TLS1_1")
	StorageAccountPropertiesStatusMinimumTlsVersionTLS12 = StorageAccountPropertiesStatusMinimumTlsVersion("TLS1_2")
)

type StorageAccountPropertiesStatusProvisioningState string

const (
	StorageAccountPropertiesStatusProvisioningStateCreating     = StorageAccountPropertiesStatusProvisioningState("Creating")
	StorageAccountPropertiesStatusProvisioningStateResolvingDNS = StorageAccountPropertiesStatusProvisioningState("ResolvingDNS")
	StorageAccountPropertiesStatusProvisioningStateSucceeded    = StorageAccountPropertiesStatusProvisioningState("Succeeded")
)

type StorageAccountPropertiesStatusStatusOfPrimary string

const (
	StorageAccountPropertiesStatusStatusOfPrimaryAvailable   = StorageAccountPropertiesStatusStatusOfPrimary("available")
	StorageAccountPropertiesStatusStatusOfPrimaryUnavailable = StorageAccountPropertiesStatusStatusOfPrimary("unavailable")
)

type StorageAccountPropertiesStatusStatusOfSecondary string

const (
	StorageAccountPropertiesStatusStatusOfSecondaryAvailable   = StorageAccountPropertiesStatusStatusOfSecondary("available")
	StorageAccountPropertiesStatusStatusOfSecondaryUnavailable = StorageAccountPropertiesStatusStatusOfSecondary("unavailable")
)

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/ActiveDirectoryProperties
type ActiveDirectoryProperties struct {
	// +kubebuilder:validation:Required
	//AzureStorageSid: Specifies the security identifier (SID) for Azure Storage.
	AzureStorageSid string `json:"azureStorageSid"`

	// +kubebuilder:validation:Required
	//DomainGuid: Specifies the domain GUID.
	DomainGuid string `json:"domainGuid"`

	// +kubebuilder:validation:Required
	//DomainName: Specifies the primary domain that the AD DNS server is authoritative
	//for.
	DomainName string `json:"domainName"`

	// +kubebuilder:validation:Required
	//DomainSid: Specifies the security identifier (SID).
	DomainSid string `json:"domainSid"`

	// +kubebuilder:validation:Required
	//ForestName: Specifies the Active Directory forest to get.
	ForestName string `json:"forestName"`

	// +kubebuilder:validation:Required
	//NetBiosDomainName: Specifies the NetBIOS domain name.
	NetBiosDomainName string `json:"netBiosDomainName"`
}

var _ genruntime.ARMTransformer = &ActiveDirectoryProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (activeDirectoryProperties *ActiveDirectoryProperties) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if activeDirectoryProperties == nil {
		return nil, nil
	}
	var result ActiveDirectoryPropertiesARM

	// Set property ‘AzureStorageSid’:
	result.AzureStorageSid = activeDirectoryProperties.AzureStorageSid

	// Set property ‘DomainGuid’:
	result.DomainGuid = activeDirectoryProperties.DomainGuid

	// Set property ‘DomainName’:
	result.DomainName = activeDirectoryProperties.DomainName

	// Set property ‘DomainSid’:
	result.DomainSid = activeDirectoryProperties.DomainSid

	// Set property ‘ForestName’:
	result.ForestName = activeDirectoryProperties.ForestName

	// Set property ‘NetBiosDomainName’:
	result.NetBiosDomainName = activeDirectoryProperties.NetBiosDomainName
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (activeDirectoryProperties *ActiveDirectoryProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ActiveDirectoryPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (activeDirectoryProperties *ActiveDirectoryProperties) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(ActiveDirectoryPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ActiveDirectoryPropertiesARM, got %T", armInput)
	}

	// Set property ‘AzureStorageSid’:
	activeDirectoryProperties.AzureStorageSid = typedInput.AzureStorageSid

	// Set property ‘DomainGuid’:
	activeDirectoryProperties.DomainGuid = typedInput.DomainGuid

	// Set property ‘DomainName’:
	activeDirectoryProperties.DomainName = typedInput.DomainName

	// Set property ‘DomainSid’:
	activeDirectoryProperties.DomainSid = typedInput.DomainSid

	// Set property ‘ForestName’:
	activeDirectoryProperties.ForestName = typedInput.ForestName

	// Set property ‘NetBiosDomainName’:
	activeDirectoryProperties.NetBiosDomainName = typedInput.NetBiosDomainName

	// No error
	return nil
}

// AssignPropertiesFromActiveDirectoryProperties populates our ActiveDirectoryProperties from the provided source ActiveDirectoryProperties
func (activeDirectoryProperties *ActiveDirectoryProperties) AssignPropertiesFromActiveDirectoryProperties(source *v1alpha1api20210401storage.ActiveDirectoryProperties) error {

	// AzureStorageSid
	if source.AzureStorageSid != nil {
		activeDirectoryProperties.AzureStorageSid = *source.AzureStorageSid
	} else {
		activeDirectoryProperties.AzureStorageSid = ""
	}

	// DomainGuid
	if source.DomainGuid != nil {
		activeDirectoryProperties.DomainGuid = *source.DomainGuid
	} else {
		activeDirectoryProperties.DomainGuid = ""
	}

	// DomainName
	if source.DomainName != nil {
		activeDirectoryProperties.DomainName = *source.DomainName
	} else {
		activeDirectoryProperties.DomainName = ""
	}

	// DomainSid
	if source.DomainSid != nil {
		activeDirectoryProperties.DomainSid = *source.DomainSid
	} else {
		activeDirectoryProperties.DomainSid = ""
	}

	// ForestName
	if source.ForestName != nil {
		activeDirectoryProperties.ForestName = *source.ForestName
	} else {
		activeDirectoryProperties.ForestName = ""
	}

	// NetBiosDomainName
	if source.NetBiosDomainName != nil {
		activeDirectoryProperties.NetBiosDomainName = *source.NetBiosDomainName
	} else {
		activeDirectoryProperties.NetBiosDomainName = ""
	}

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryProperties populates the provided destination ActiveDirectoryProperties from our ActiveDirectoryProperties
func (activeDirectoryProperties *ActiveDirectoryProperties) AssignPropertiesToActiveDirectoryProperties(destination *v1alpha1api20210401storage.ActiveDirectoryProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureStorageSid
	azureStorageSid := activeDirectoryProperties.AzureStorageSid
	destination.AzureStorageSid = &azureStorageSid

	// DomainGuid
	domainGuid := activeDirectoryProperties.DomainGuid
	destination.DomainGuid = &domainGuid

	// DomainName
	domainName := activeDirectoryProperties.DomainName
	destination.DomainName = &domainName

	// DomainSid
	domainSid := activeDirectoryProperties.DomainSid
	destination.DomainSid = &domainSid

	// ForestName
	forestName := activeDirectoryProperties.ForestName
	destination.ForestName = &forestName

	// NetBiosDomainName
	netBiosDomainName := activeDirectoryProperties.NetBiosDomainName
	destination.NetBiosDomainName = &netBiosDomainName

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type ActiveDirectoryProperties_Status struct {
	// +kubebuilder:validation:Required
	//AzureStorageSid: Specifies the security identifier (SID) for Azure Storage.
	AzureStorageSid string `json:"azureStorageSid"`

	// +kubebuilder:validation:Required
	//DomainGuid: Specifies the domain GUID.
	DomainGuid string `json:"domainGuid"`

	// +kubebuilder:validation:Required
	//DomainName: Specifies the primary domain that the AD DNS server is authoritative
	//for.
	DomainName string `json:"domainName"`

	// +kubebuilder:validation:Required
	//DomainSid: Specifies the security identifier (SID).
	DomainSid string `json:"domainSid"`

	// +kubebuilder:validation:Required
	//ForestName: Specifies the Active Directory forest to get.
	ForestName string `json:"forestName"`

	// +kubebuilder:validation:Required
	//NetBiosDomainName: Specifies the NetBIOS domain name.
	NetBiosDomainName string `json:"netBiosDomainName"`
}

var _ genruntime.FromARMConverter = &ActiveDirectoryProperties_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (activeDirectoryPropertiesStatus *ActiveDirectoryProperties_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ActiveDirectoryProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (activeDirectoryPropertiesStatus *ActiveDirectoryProperties_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(ActiveDirectoryProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ActiveDirectoryProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘AzureStorageSid’:
	activeDirectoryPropertiesStatus.AzureStorageSid = typedInput.AzureStorageSid

	// Set property ‘DomainGuid’:
	activeDirectoryPropertiesStatus.DomainGuid = typedInput.DomainGuid

	// Set property ‘DomainName’:
	activeDirectoryPropertiesStatus.DomainName = typedInput.DomainName

	// Set property ‘DomainSid’:
	activeDirectoryPropertiesStatus.DomainSid = typedInput.DomainSid

	// Set property ‘ForestName’:
	activeDirectoryPropertiesStatus.ForestName = typedInput.ForestName

	// Set property ‘NetBiosDomainName’:
	activeDirectoryPropertiesStatus.NetBiosDomainName = typedInput.NetBiosDomainName

	// No error
	return nil
}

// AssignPropertiesFromActiveDirectoryPropertiesStatus populates our ActiveDirectoryProperties_Status from the provided source ActiveDirectoryProperties_Status
func (activeDirectoryPropertiesStatus *ActiveDirectoryProperties_Status) AssignPropertiesFromActiveDirectoryPropertiesStatus(source *v1alpha1api20210401storage.ActiveDirectoryProperties_Status) error {

	// AzureStorageSid
	if source.AzureStorageSid != nil {
		activeDirectoryPropertiesStatus.AzureStorageSid = *source.AzureStorageSid
	} else {
		activeDirectoryPropertiesStatus.AzureStorageSid = ""
	}

	// DomainGuid
	if source.DomainGuid != nil {
		activeDirectoryPropertiesStatus.DomainGuid = *source.DomainGuid
	} else {
		activeDirectoryPropertiesStatus.DomainGuid = ""
	}

	// DomainName
	if source.DomainName != nil {
		activeDirectoryPropertiesStatus.DomainName = *source.DomainName
	} else {
		activeDirectoryPropertiesStatus.DomainName = ""
	}

	// DomainSid
	if source.DomainSid != nil {
		activeDirectoryPropertiesStatus.DomainSid = *source.DomainSid
	} else {
		activeDirectoryPropertiesStatus.DomainSid = ""
	}

	// ForestName
	if source.ForestName != nil {
		activeDirectoryPropertiesStatus.ForestName = *source.ForestName
	} else {
		activeDirectoryPropertiesStatus.ForestName = ""
	}

	// NetBiosDomainName
	if source.NetBiosDomainName != nil {
		activeDirectoryPropertiesStatus.NetBiosDomainName = *source.NetBiosDomainName
	} else {
		activeDirectoryPropertiesStatus.NetBiosDomainName = ""
	}

	// No error
	return nil
}

// AssignPropertiesToActiveDirectoryPropertiesStatus populates the provided destination ActiveDirectoryProperties_Status from our ActiveDirectoryProperties_Status
func (activeDirectoryPropertiesStatus *ActiveDirectoryProperties_Status) AssignPropertiesToActiveDirectoryPropertiesStatus(destination *v1alpha1api20210401storage.ActiveDirectoryProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureStorageSid
	azureStorageSid := activeDirectoryPropertiesStatus.AzureStorageSid
	destination.AzureStorageSid = &azureStorageSid

	// DomainGuid
	domainGuid := activeDirectoryPropertiesStatus.DomainGuid
	destination.DomainGuid = &domainGuid

	// DomainName
	domainName := activeDirectoryPropertiesStatus.DomainName
	destination.DomainName = &domainName

	// DomainSid
	domainSid := activeDirectoryPropertiesStatus.DomainSid
	destination.DomainSid = &domainSid

	// ForestName
	forestName := activeDirectoryPropertiesStatus.ForestName
	destination.ForestName = &forestName

	// NetBiosDomainName
	netBiosDomainName := activeDirectoryPropertiesStatus.NetBiosDomainName
	destination.NetBiosDomainName = &netBiosDomainName

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"None","StorageFileDataSmbShareContributor","StorageFileDataSmbShareElevatedContributor","StorageFileDataSmbShareOwner","StorageFileDataSmbShareReader"}
type AzureFilesIdentityBasedAuthenticationDefaultSharePermission string

const (
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionNone                                       = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("None")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionStorageFileDataSmbShareContributor         = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareContributor")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionStorageFileDataSmbShareElevatedContributor = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareElevatedContributor")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionStorageFileDataSmbShareOwner               = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareOwner")
	AzureFilesIdentityBasedAuthenticationDefaultSharePermissionStorageFileDataSmbShareReader              = AzureFilesIdentityBasedAuthenticationDefaultSharePermission("StorageFileDataSmbShareReader")
)

// +kubebuilder:validation:Enum={"AADDS","AD","None"}
type AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions string

const (
	AzureFilesIdentityBasedAuthenticationDirectoryServiceOptionsAADDS = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions("AADDS")
	AzureFilesIdentityBasedAuthenticationDirectoryServiceOptionsAD    = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions("AD")
	AzureFilesIdentityBasedAuthenticationDirectoryServiceOptionsNone  = AzureFilesIdentityBasedAuthenticationDirectoryServiceOptions("None")
)

type AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission string

const (
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionNone                                       = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("None")
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionStorageFileDataSmbShareContributor         = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("StorageFileDataSmbShareContributor")
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionStorageFileDataSmbShareElevatedContributor = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("StorageFileDataSmbShareElevatedContributor")
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionStorageFileDataSmbShareOwner               = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("StorageFileDataSmbShareOwner")
	AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermissionStorageFileDataSmbShareReader              = AzureFilesIdentityBasedAuthenticationStatusDefaultSharePermission("StorageFileDataSmbShareReader")
)

type AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions string

const (
	AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptionsAADDS = AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions("AADDS")
	AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptionsAD    = AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions("AD")
	AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptionsNone  = AzureFilesIdentityBasedAuthenticationStatusDirectoryServiceOptions("None")
)

//Generated from:
type BlobRestoreParameters_Status struct {
	// +kubebuilder:validation:Required
	//BlobRanges: Blob ranges to restore.
	BlobRanges []BlobRestoreRange_Status `json:"blobRanges"`

	// +kubebuilder:validation:Required
	//TimeToRestore: Restore blob to the specified time.
	TimeToRestore string `json:"timeToRestore"`
}

var _ genruntime.FromARMConverter = &BlobRestoreParameters_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (blobRestoreParametersStatus *BlobRestoreParameters_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobRestoreParameters_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (blobRestoreParametersStatus *BlobRestoreParameters_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobRestoreParameters_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobRestoreParameters_StatusARM, got %T", armInput)
	}

	// Set property ‘BlobRanges’:
	for _, item := range typedInput.BlobRanges {
		var item1 BlobRestoreRange_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		blobRestoreParametersStatus.BlobRanges = append(blobRestoreParametersStatus.BlobRanges, item1)
	}

	// Set property ‘TimeToRestore’:
	blobRestoreParametersStatus.TimeToRestore = typedInput.TimeToRestore

	// No error
	return nil
}

// AssignPropertiesFromBlobRestoreParametersStatus populates our BlobRestoreParameters_Status from the provided source BlobRestoreParameters_Status
func (blobRestoreParametersStatus *BlobRestoreParameters_Status) AssignPropertiesFromBlobRestoreParametersStatus(source *v1alpha1api20210401storage.BlobRestoreParameters_Status) error {

	// BlobRanges
	blobRangeList := make([]BlobRestoreRange_Status, len(source.BlobRanges))
	for blobRangeIndex, blobRangeItem := range source.BlobRanges {
		// Shadow the loop variable to avoid aliasing
		blobRangeItem := blobRangeItem
		var blobRange BlobRestoreRange_Status
		err := blobRange.AssignPropertiesFromBlobRestoreRangeStatus(&blobRangeItem)
		if err != nil {
			return errors.Wrap(err, "populating BlobRanges from BlobRanges, calling AssignPropertiesFromBlobRestoreRangeStatus()")
		}
		blobRangeList[blobRangeIndex] = blobRange
	}
	blobRestoreParametersStatus.BlobRanges = blobRangeList

	// TimeToRestore
	if source.TimeToRestore != nil {
		blobRestoreParametersStatus.TimeToRestore = *source.TimeToRestore
	} else {
		blobRestoreParametersStatus.TimeToRestore = ""
	}

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreParametersStatus populates the provided destination BlobRestoreParameters_Status from our BlobRestoreParameters_Status
func (blobRestoreParametersStatus *BlobRestoreParameters_Status) AssignPropertiesToBlobRestoreParametersStatus(destination *v1alpha1api20210401storage.BlobRestoreParameters_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BlobRanges
	blobRangeList := make([]v1alpha1api20210401storage.BlobRestoreRange_Status, len(blobRestoreParametersStatus.BlobRanges))
	for blobRangeIndex, blobRangeItem := range blobRestoreParametersStatus.BlobRanges {
		// Shadow the loop variable to avoid aliasing
		blobRangeItem := blobRangeItem
		var blobRange v1alpha1api20210401storage.BlobRestoreRange_Status
		err := blobRangeItem.AssignPropertiesToBlobRestoreRangeStatus(&blobRange)
		if err != nil {
			return errors.Wrap(err, "populating BlobRanges from BlobRanges, calling AssignPropertiesToBlobRestoreRangeStatus()")
		}
		blobRangeList[blobRangeIndex] = blobRange
	}
	destination.BlobRanges = blobRangeList

	// TimeToRestore
	timeToRestore := blobRestoreParametersStatus.TimeToRestore
	destination.TimeToRestore = &timeToRestore

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type BlobRestoreStatusStatusStatus string

const (
	BlobRestoreStatusStatusStatusComplete   = BlobRestoreStatusStatusStatus("Complete")
	BlobRestoreStatusStatusStatusFailed     = BlobRestoreStatusStatusStatus("Failed")
	BlobRestoreStatusStatusStatusInProgress = BlobRestoreStatusStatusStatus("InProgress")
)

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/EncryptionIdentity
type EncryptionIdentity struct {
	//UserAssignedIdentityReference: Resource identifier of the UserAssigned identity
	//to be associated with server-side encryption on the storage account.
	UserAssignedIdentityReference *genruntime.ResourceReference `armReference:"UserAssignedIdentity" json:"userAssignedIdentityReference,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionIdentity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryptionIdentity *EncryptionIdentity) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if encryptionIdentity == nil {
		return nil, nil
	}
	var result EncryptionIdentityARM

	// Set property ‘UserAssignedIdentity’:
	if encryptionIdentity.UserAssignedIdentityReference != nil {
		userAssignedIdentityReferenceARMID, err := resolvedReferences.ARMIDOrErr(*encryptionIdentity.UserAssignedIdentityReference)
		if err != nil {
			return nil, err
		}
		userAssignedIdentityReference := userAssignedIdentityReferenceARMID
		result.UserAssignedIdentity = &userAssignedIdentityReference
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryptionIdentity *EncryptionIdentity) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionIdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryptionIdentity *EncryptionIdentity) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	_, ok := armInput.(EncryptionIdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionIdentityARM, got %T", armInput)
	}

	// no assignment for property ‘UserAssignedIdentityReference’

	// No error
	return nil
}

// AssignPropertiesFromEncryptionIdentity populates our EncryptionIdentity from the provided source EncryptionIdentity
func (encryptionIdentity *EncryptionIdentity) AssignPropertiesFromEncryptionIdentity(source *v1alpha1api20210401storage.EncryptionIdentity) error {

	// UserAssignedIdentityReference
	if source.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := source.UserAssignedIdentityReference.Copy()
		encryptionIdentity.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		encryptionIdentity.UserAssignedIdentityReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentity populates the provided destination EncryptionIdentity from our EncryptionIdentity
func (encryptionIdentity *EncryptionIdentity) AssignPropertiesToEncryptionIdentity(destination *v1alpha1api20210401storage.EncryptionIdentity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentityReference
	if encryptionIdentity.UserAssignedIdentityReference != nil {
		userAssignedIdentityReference := encryptionIdentity.UserAssignedIdentityReference.Copy()
		destination.UserAssignedIdentityReference = &userAssignedIdentityReference
	} else {
		destination.UserAssignedIdentityReference = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type EncryptionIdentity_Status struct {
	//UserAssignedIdentity: Resource identifier of the UserAssigned identity to be
	//associated with server-side encryption on the storage account.
	UserAssignedIdentity *string `json:"userAssignedIdentity,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionIdentity_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryptionIdentityStatus *EncryptionIdentity_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryptionIdentityStatus *EncryptionIdentity_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘UserAssignedIdentity’:
	if typedInput.UserAssignedIdentity != nil {
		userAssignedIdentity := *typedInput.UserAssignedIdentity
		encryptionIdentityStatus.UserAssignedIdentity = &userAssignedIdentity
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionIdentityStatus populates our EncryptionIdentity_Status from the provided source EncryptionIdentity_Status
func (encryptionIdentityStatus *EncryptionIdentity_Status) AssignPropertiesFromEncryptionIdentityStatus(source *v1alpha1api20210401storage.EncryptionIdentity_Status) error {

	// UserAssignedIdentity
	if source.UserAssignedIdentity != nil {
		userAssignedIdentity := *source.UserAssignedIdentity
		encryptionIdentityStatus.UserAssignedIdentity = &userAssignedIdentity
	} else {
		encryptionIdentityStatus.UserAssignedIdentity = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionIdentityStatus populates the provided destination EncryptionIdentity_Status from our EncryptionIdentity_Status
func (encryptionIdentityStatus *EncryptionIdentity_Status) AssignPropertiesToEncryptionIdentityStatus(destination *v1alpha1api20210401storage.EncryptionIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UserAssignedIdentity
	if encryptionIdentityStatus.UserAssignedIdentity != nil {
		userAssignedIdentity := *encryptionIdentityStatus.UserAssignedIdentity
		destination.UserAssignedIdentity = &userAssignedIdentity
	} else {
		destination.UserAssignedIdentity = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Microsoft.Keyvault","Microsoft.Storage"}
type EncryptionKeySource string

const (
	EncryptionKeySourceMicrosoftKeyvault = EncryptionKeySource("Microsoft.Keyvault")
	EncryptionKeySourceMicrosoftStorage  = EncryptionKeySource("Microsoft.Storage")
)

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/EncryptionServices
type EncryptionServices struct {
	//Blob: A service that allows server-side encryption to be used.
	Blob *EncryptionService `json:"blob,omitempty"`

	//File: A service that allows server-side encryption to be used.
	File *EncryptionService `json:"file,omitempty"`

	//Queue: A service that allows server-side encryption to be used.
	Queue *EncryptionService `json:"queue,omitempty"`

	//Table: A service that allows server-side encryption to be used.
	Table *EncryptionService `json:"table,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionServices{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryptionServices *EncryptionServices) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if encryptionServices == nil {
		return nil, nil
	}
	var result EncryptionServicesARM

	// Set property ‘Blob’:
	if encryptionServices.Blob != nil {
		blobARM, err := (*encryptionServices.Blob).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		blob := blobARM.(EncryptionServiceARM)
		result.Blob = &blob
	}

	// Set property ‘File’:
	if encryptionServices.File != nil {
		fileARM, err := (*encryptionServices.File).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		file := fileARM.(EncryptionServiceARM)
		result.File = &file
	}

	// Set property ‘Queue’:
	if encryptionServices.Queue != nil {
		queueARM, err := (*encryptionServices.Queue).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		queue := queueARM.(EncryptionServiceARM)
		result.Queue = &queue
	}

	// Set property ‘Table’:
	if encryptionServices.Table != nil {
		tableARM, err := (*encryptionServices.Table).ConvertToARM(name, resolvedReferences)
		if err != nil {
			return nil, err
		}
		table := tableARM.(EncryptionServiceARM)
		result.Table = &table
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryptionServices *EncryptionServices) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServicesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryptionServices *EncryptionServices) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServicesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServicesARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		var blob1 EncryptionService
		err := blob1.PopulateFromARM(owner, *typedInput.Blob)
		if err != nil {
			return err
		}
		blob := blob1
		encryptionServices.Blob = &blob
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		var file1 EncryptionService
		err := file1.PopulateFromARM(owner, *typedInput.File)
		if err != nil {
			return err
		}
		file := file1
		encryptionServices.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		var queue1 EncryptionService
		err := queue1.PopulateFromARM(owner, *typedInput.Queue)
		if err != nil {
			return err
		}
		queue := queue1
		encryptionServices.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		var table1 EncryptionService
		err := table1.PopulateFromARM(owner, *typedInput.Table)
		if err != nil {
			return err
		}
		table := table1
		encryptionServices.Table = &table
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServices populates our EncryptionServices from the provided source EncryptionServices
func (encryptionServices *EncryptionServices) AssignPropertiesFromEncryptionServices(source *v1alpha1api20210401storage.EncryptionServices) error {

	// Blob
	if source.Blob != nil {
		var blob EncryptionService
		err := blob.AssignPropertiesFromEncryptionService(source.Blob)
		if err != nil {
			return errors.Wrap(err, "populating Blob from Blob, calling AssignPropertiesFromEncryptionService()")
		}
		encryptionServices.Blob = &blob
	} else {
		encryptionServices.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService
		err := file.AssignPropertiesFromEncryptionService(source.File)
		if err != nil {
			return errors.Wrap(err, "populating File from File, calling AssignPropertiesFromEncryptionService()")
		}
		encryptionServices.File = &file
	} else {
		encryptionServices.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService
		err := queue.AssignPropertiesFromEncryptionService(source.Queue)
		if err != nil {
			return errors.Wrap(err, "populating Queue from Queue, calling AssignPropertiesFromEncryptionService()")
		}
		encryptionServices.Queue = &queue
	} else {
		encryptionServices.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService
		err := table.AssignPropertiesFromEncryptionService(source.Table)
		if err != nil {
			return errors.Wrap(err, "populating Table from Table, calling AssignPropertiesFromEncryptionService()")
		}
		encryptionServices.Table = &table
	} else {
		encryptionServices.Table = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServices populates the provided destination EncryptionServices from our EncryptionServices
func (encryptionServices *EncryptionServices) AssignPropertiesToEncryptionServices(destination *v1alpha1api20210401storage.EncryptionServices) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if encryptionServices.Blob != nil {
		var blob v1alpha1api20210401storage.EncryptionService
		err := (*encryptionServices.Blob).AssignPropertiesToEncryptionService(&blob)
		if err != nil {
			return errors.Wrap(err, "populating Blob from Blob, calling AssignPropertiesToEncryptionService()")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if encryptionServices.File != nil {
		var file v1alpha1api20210401storage.EncryptionService
		err := (*encryptionServices.File).AssignPropertiesToEncryptionService(&file)
		if err != nil {
			return errors.Wrap(err, "populating File from File, calling AssignPropertiesToEncryptionService()")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if encryptionServices.Queue != nil {
		var queue v1alpha1api20210401storage.EncryptionService
		err := (*encryptionServices.Queue).AssignPropertiesToEncryptionService(&queue)
		if err != nil {
			return errors.Wrap(err, "populating Queue from Queue, calling AssignPropertiesToEncryptionService()")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if encryptionServices.Table != nil {
		var table v1alpha1api20210401storage.EncryptionService
		err := (*encryptionServices.Table).AssignPropertiesToEncryptionService(&table)
		if err != nil {
			return errors.Wrap(err, "populating Table from Table, calling AssignPropertiesToEncryptionService()")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type EncryptionServices_Status struct {
	//Blob: The encryption function of the blob storage service.
	Blob *EncryptionService_Status `json:"blob,omitempty"`

	//File: The encryption function of the file storage service.
	File *EncryptionService_Status `json:"file,omitempty"`

	//Queue: The encryption function of the queue storage service.
	Queue *EncryptionService_Status `json:"queue,omitempty"`

	//Table: The encryption function of the table storage service.
	Table *EncryptionService_Status `json:"table,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionServices_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryptionServicesStatus *EncryptionServices_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServices_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryptionServicesStatus *EncryptionServices_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServices_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServices_StatusARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		var blob1 EncryptionService_Status
		err := blob1.PopulateFromARM(owner, *typedInput.Blob)
		if err != nil {
			return err
		}
		blob := blob1
		encryptionServicesStatus.Blob = &blob
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		var file1 EncryptionService_Status
		err := file1.PopulateFromARM(owner, *typedInput.File)
		if err != nil {
			return err
		}
		file := file1
		encryptionServicesStatus.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		var queue1 EncryptionService_Status
		err := queue1.PopulateFromARM(owner, *typedInput.Queue)
		if err != nil {
			return err
		}
		queue := queue1
		encryptionServicesStatus.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		var table1 EncryptionService_Status
		err := table1.PopulateFromARM(owner, *typedInput.Table)
		if err != nil {
			return err
		}
		table := table1
		encryptionServicesStatus.Table = &table
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServicesStatus populates our EncryptionServices_Status from the provided source EncryptionServices_Status
func (encryptionServicesStatus *EncryptionServices_Status) AssignPropertiesFromEncryptionServicesStatus(source *v1alpha1api20210401storage.EncryptionServices_Status) error {

	// Blob
	if source.Blob != nil {
		var blob EncryptionService_Status
		err := blob.AssignPropertiesFromEncryptionServiceStatus(source.Blob)
		if err != nil {
			return errors.Wrap(err, "populating Blob from Blob, calling AssignPropertiesFromEncryptionServiceStatus()")
		}
		encryptionServicesStatus.Blob = &blob
	} else {
		encryptionServicesStatus.Blob = nil
	}

	// File
	if source.File != nil {
		var file EncryptionService_Status
		err := file.AssignPropertiesFromEncryptionServiceStatus(source.File)
		if err != nil {
			return errors.Wrap(err, "populating File from File, calling AssignPropertiesFromEncryptionServiceStatus()")
		}
		encryptionServicesStatus.File = &file
	} else {
		encryptionServicesStatus.File = nil
	}

	// Queue
	if source.Queue != nil {
		var queue EncryptionService_Status
		err := queue.AssignPropertiesFromEncryptionServiceStatus(source.Queue)
		if err != nil {
			return errors.Wrap(err, "populating Queue from Queue, calling AssignPropertiesFromEncryptionServiceStatus()")
		}
		encryptionServicesStatus.Queue = &queue
	} else {
		encryptionServicesStatus.Queue = nil
	}

	// Table
	if source.Table != nil {
		var table EncryptionService_Status
		err := table.AssignPropertiesFromEncryptionServiceStatus(source.Table)
		if err != nil {
			return errors.Wrap(err, "populating Table from Table, calling AssignPropertiesFromEncryptionServiceStatus()")
		}
		encryptionServicesStatus.Table = &table
	} else {
		encryptionServicesStatus.Table = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServicesStatus populates the provided destination EncryptionServices_Status from our EncryptionServices_Status
func (encryptionServicesStatus *EncryptionServices_Status) AssignPropertiesToEncryptionServicesStatus(destination *v1alpha1api20210401storage.EncryptionServices_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if encryptionServicesStatus.Blob != nil {
		var blob v1alpha1api20210401storage.EncryptionService_Status
		err := (*encryptionServicesStatus.Blob).AssignPropertiesToEncryptionServiceStatus(&blob)
		if err != nil {
			return errors.Wrap(err, "populating Blob from Blob, calling AssignPropertiesToEncryptionServiceStatus()")
		}
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// File
	if encryptionServicesStatus.File != nil {
		var file v1alpha1api20210401storage.EncryptionService_Status
		err := (*encryptionServicesStatus.File).AssignPropertiesToEncryptionServiceStatus(&file)
		if err != nil {
			return errors.Wrap(err, "populating File from File, calling AssignPropertiesToEncryptionServiceStatus()")
		}
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if encryptionServicesStatus.Queue != nil {
		var queue v1alpha1api20210401storage.EncryptionService_Status
		err := (*encryptionServicesStatus.Queue).AssignPropertiesToEncryptionServiceStatus(&queue)
		if err != nil {
			return errors.Wrap(err, "populating Queue from Queue, calling AssignPropertiesToEncryptionServiceStatus()")
		}
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if encryptionServicesStatus.Table != nil {
		var table v1alpha1api20210401storage.EncryptionService_Status
		err := (*encryptionServicesStatus.Table).AssignPropertiesToEncryptionServiceStatus(&table)
		if err != nil {
			return errors.Wrap(err, "populating Table from Table, calling AssignPropertiesToEncryptionServiceStatus()")
		}
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type EncryptionStatusKeySource string

const (
	EncryptionStatusKeySourceMicrosoftKeyvault = EncryptionStatusKeySource("Microsoft.Keyvault")
	EncryptionStatusKeySourceMicrosoftStorage  = EncryptionStatusKeySource("Microsoft.Storage")
)

type GeoReplicationStatsStatusStatus string

const (
	GeoReplicationStatsStatusStatusBootstrap   = GeoReplicationStatsStatusStatus("Bootstrap")
	GeoReplicationStatsStatusStatusLive        = GeoReplicationStatsStatusStatus("Live")
	GeoReplicationStatsStatusStatusUnavailable = GeoReplicationStatsStatusStatus("Unavailable")
)

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/IPRule
type IPRule struct {
	//Action: The action of IP ACL rule.
	Action *IPRuleAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value string `json:"value"`
}

var _ genruntime.ARMTransformer = &IPRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ipRule *IPRule) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if ipRule == nil {
		return nil, nil
	}
	var result IPRuleARM

	// Set property ‘Action’:
	if ipRule.Action != nil {
		action := *ipRule.Action
		result.Action = &action
	}

	// Set property ‘Value’:
	result.Value = ipRule.Value
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipRule *IPRule) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipRule *IPRule) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRuleARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		ipRule.Action = &action
	}

	// Set property ‘Value’:
	ipRule.Value = typedInput.Value

	// No error
	return nil
}

// AssignPropertiesFromIPRule populates our IPRule from the provided source IPRule
func (ipRule *IPRule) AssignPropertiesFromIPRule(source *v1alpha1api20210401storage.IPRule) error {

	// Action
	if source.Action != nil {
		action := IPRuleAction(*source.Action)
		ipRule.Action = &action
	} else {
		ipRule.Action = nil
	}

	// Value
	if source.Value != nil {
		ipRule.Value = *source.Value
	} else {
		ipRule.Value = ""
	}

	// No error
	return nil
}

// AssignPropertiesToIPRule populates the provided destination IPRule from our IPRule
func (ipRule *IPRule) AssignPropertiesToIPRule(destination *v1alpha1api20210401storage.IPRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if ipRule.Action != nil {
		action := string(*ipRule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	value := ipRule.Value
	destination.Value = &value

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type IPRule_Status struct {
	//Action: The action of IP ACL rule.
	Action *IPRuleStatusAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value string `json:"value"`
}

var _ genruntime.FromARMConverter = &IPRule_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipRuleStatus *IPRule_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipRuleStatus *IPRule_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		ipRuleStatus.Action = &action
	}

	// Set property ‘Value’:
	ipRuleStatus.Value = typedInput.Value

	// No error
	return nil
}

// AssignPropertiesFromIPRuleStatus populates our IPRule_Status from the provided source IPRule_Status
func (ipRuleStatus *IPRule_Status) AssignPropertiesFromIPRuleStatus(source *v1alpha1api20210401storage.IPRule_Status) error {

	// Action
	if source.Action != nil {
		action := IPRuleStatusAction(*source.Action)
		ipRuleStatus.Action = &action
	} else {
		ipRuleStatus.Action = nil
	}

	// Value
	if source.Value != nil {
		ipRuleStatus.Value = *source.Value
	} else {
		ipRuleStatus.Value = ""
	}

	// No error
	return nil
}

// AssignPropertiesToIPRuleStatus populates the provided destination IPRule_Status from our IPRule_Status
func (ipRuleStatus *IPRule_Status) AssignPropertiesToIPRuleStatus(destination *v1alpha1api20210401storage.IPRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if ipRuleStatus.Action != nil {
		action := string(*ipRuleStatus.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	value := ipRuleStatus.Value
	destination.Value = &value

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/KeyVaultProperties
type KeyVaultProperties struct {
	//Keyname: The name of KeyVault key.
	Keyname *string `json:"keyname,omitempty"`

	//Keyvaulturi: The Uri of KeyVault.
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`

	//Keyversion: The version of KeyVault key.
	Keyversion *string `json:"keyversion,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (keyVaultProperties *KeyVaultProperties) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if keyVaultProperties == nil {
		return nil, nil
	}
	var result KeyVaultPropertiesARM

	// Set property ‘Keyname’:
	if keyVaultProperties.Keyname != nil {
		keyname := *keyVaultProperties.Keyname
		result.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if keyVaultProperties.Keyvaulturi != nil {
		keyvaulturi := *keyVaultProperties.Keyvaulturi
		result.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if keyVaultProperties.Keyversion != nil {
		keyversion := *keyVaultProperties.Keyversion
		result.Keyversion = &keyversion
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keyVaultProperties *KeyVaultProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keyVaultProperties *KeyVaultProperties) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultPropertiesARM, got %T", armInput)
	}

	// Set property ‘Keyname’:
	if typedInput.Keyname != nil {
		keyname := *typedInput.Keyname
		keyVaultProperties.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if typedInput.Keyvaulturi != nil {
		keyvaulturi := *typedInput.Keyvaulturi
		keyVaultProperties.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if typedInput.Keyversion != nil {
		keyversion := *typedInput.Keyversion
		keyVaultProperties.Keyversion = &keyversion
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (keyVaultProperties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *v1alpha1api20210401storage.KeyVaultProperties) error {

	// Keyname
	if source.Keyname != nil {
		keyname := *source.Keyname
		keyVaultProperties.Keyname = &keyname
	} else {
		keyVaultProperties.Keyname = nil
	}

	// Keyvaulturi
	if source.Keyvaulturi != nil {
		keyvaulturi := *source.Keyvaulturi
		keyVaultProperties.Keyvaulturi = &keyvaulturi
	} else {
		keyVaultProperties.Keyvaulturi = nil
	}

	// Keyversion
	if source.Keyversion != nil {
		keyversion := *source.Keyversion
		keyVaultProperties.Keyversion = &keyversion
	} else {
		keyVaultProperties.Keyversion = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (keyVaultProperties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *v1alpha1api20210401storage.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Keyname
	if keyVaultProperties.Keyname != nil {
		keyname := *keyVaultProperties.Keyname
		destination.Keyname = &keyname
	} else {
		destination.Keyname = nil
	}

	// Keyvaulturi
	if keyVaultProperties.Keyvaulturi != nil {
		keyvaulturi := *keyVaultProperties.Keyvaulturi
		destination.Keyvaulturi = &keyvaulturi
	} else {
		destination.Keyvaulturi = nil
	}

	// Keyversion
	if keyVaultProperties.Keyversion != nil {
		keyversion := *keyVaultProperties.Keyversion
		destination.Keyversion = &keyversion
	} else {
		destination.Keyversion = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type KeyVaultProperties_Status struct {
	//CurrentVersionedKeyIdentifier: The object identifier of the current versioned
	//Key Vault Key in use.
	CurrentVersionedKeyIdentifier *string `json:"currentVersionedKeyIdentifier,omitempty"`

	//Keyname: The name of KeyVault key.
	Keyname *string `json:"keyname,omitempty"`

	//Keyvaulturi: The Uri of KeyVault.
	Keyvaulturi *string `json:"keyvaulturi,omitempty"`

	//Keyversion: The version of KeyVault key.
	Keyversion *string `json:"keyversion,omitempty"`

	//LastKeyRotationTimestamp: Timestamp of last rotation of the Key Vault Key.
	LastKeyRotationTimestamp *string `json:"lastKeyRotationTimestamp,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keyVaultPropertiesStatus *KeyVaultProperties_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keyVaultPropertiesStatus *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘CurrentVersionedKeyIdentifier’:
	if typedInput.CurrentVersionedKeyIdentifier != nil {
		currentVersionedKeyIdentifier := *typedInput.CurrentVersionedKeyIdentifier
		keyVaultPropertiesStatus.CurrentVersionedKeyIdentifier = &currentVersionedKeyIdentifier
	}

	// Set property ‘Keyname’:
	if typedInput.Keyname != nil {
		keyname := *typedInput.Keyname
		keyVaultPropertiesStatus.Keyname = &keyname
	}

	// Set property ‘Keyvaulturi’:
	if typedInput.Keyvaulturi != nil {
		keyvaulturi := *typedInput.Keyvaulturi
		keyVaultPropertiesStatus.Keyvaulturi = &keyvaulturi
	}

	// Set property ‘Keyversion’:
	if typedInput.Keyversion != nil {
		keyversion := *typedInput.Keyversion
		keyVaultPropertiesStatus.Keyversion = &keyversion
	}

	// Set property ‘LastKeyRotationTimestamp’:
	if typedInput.LastKeyRotationTimestamp != nil {
		lastKeyRotationTimestamp := *typedInput.LastKeyRotationTimestamp
		keyVaultPropertiesStatus.LastKeyRotationTimestamp = &lastKeyRotationTimestamp
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesStatus populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (keyVaultPropertiesStatus *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultPropertiesStatus(source *v1alpha1api20210401storage.KeyVaultProperties_Status) error {

	// CurrentVersionedKeyIdentifier
	if source.CurrentVersionedKeyIdentifier != nil {
		currentVersionedKeyIdentifier := *source.CurrentVersionedKeyIdentifier
		keyVaultPropertiesStatus.CurrentVersionedKeyIdentifier = &currentVersionedKeyIdentifier
	} else {
		keyVaultPropertiesStatus.CurrentVersionedKeyIdentifier = nil
	}

	// Keyname
	if source.Keyname != nil {
		keyname := *source.Keyname
		keyVaultPropertiesStatus.Keyname = &keyname
	} else {
		keyVaultPropertiesStatus.Keyname = nil
	}

	// Keyvaulturi
	if source.Keyvaulturi != nil {
		keyvaulturi := *source.Keyvaulturi
		keyVaultPropertiesStatus.Keyvaulturi = &keyvaulturi
	} else {
		keyVaultPropertiesStatus.Keyvaulturi = nil
	}

	// Keyversion
	if source.Keyversion != nil {
		keyversion := *source.Keyversion
		keyVaultPropertiesStatus.Keyversion = &keyversion
	} else {
		keyVaultPropertiesStatus.Keyversion = nil
	}

	// LastKeyRotationTimestamp
	if source.LastKeyRotationTimestamp != nil {
		lastKeyRotationTimestamp := *source.LastKeyRotationTimestamp
		keyVaultPropertiesStatus.LastKeyRotationTimestamp = &lastKeyRotationTimestamp
	} else {
		keyVaultPropertiesStatus.LastKeyRotationTimestamp = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesStatus populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (keyVaultPropertiesStatus *KeyVaultProperties_Status) AssignPropertiesToKeyVaultPropertiesStatus(destination *v1alpha1api20210401storage.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CurrentVersionedKeyIdentifier
	if keyVaultPropertiesStatus.CurrentVersionedKeyIdentifier != nil {
		currentVersionedKeyIdentifier := *keyVaultPropertiesStatus.CurrentVersionedKeyIdentifier
		destination.CurrentVersionedKeyIdentifier = &currentVersionedKeyIdentifier
	} else {
		destination.CurrentVersionedKeyIdentifier = nil
	}

	// Keyname
	if keyVaultPropertiesStatus.Keyname != nil {
		keyname := *keyVaultPropertiesStatus.Keyname
		destination.Keyname = &keyname
	} else {
		destination.Keyname = nil
	}

	// Keyvaulturi
	if keyVaultPropertiesStatus.Keyvaulturi != nil {
		keyvaulturi := *keyVaultPropertiesStatus.Keyvaulturi
		destination.Keyvaulturi = &keyvaulturi
	} else {
		destination.Keyvaulturi = nil
	}

	// Keyversion
	if keyVaultPropertiesStatus.Keyversion != nil {
		keyversion := *keyVaultPropertiesStatus.Keyversion
		destination.Keyversion = &keyversion
	} else {
		destination.Keyversion = nil
	}

	// LastKeyRotationTimestamp
	if keyVaultPropertiesStatus.LastKeyRotationTimestamp != nil {
		lastKeyRotationTimestamp := *keyVaultPropertiesStatus.LastKeyRotationTimestamp
		destination.LastKeyRotationTimestamp = &lastKeyRotationTimestamp
	} else {
		destination.LastKeyRotationTimestamp = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AzureServices","Logging","Metrics","None"}
type NetworkRuleSetBypass string

const (
	NetworkRuleSetBypassAzureServices = NetworkRuleSetBypass("AzureServices")
	NetworkRuleSetBypassLogging       = NetworkRuleSetBypass("Logging")
	NetworkRuleSetBypassMetrics       = NetworkRuleSetBypass("Metrics")
	NetworkRuleSetBypassNone          = NetworkRuleSetBypass("None")
)

// +kubebuilder:validation:Enum={"Allow","Deny"}
type NetworkRuleSetDefaultAction string

const (
	NetworkRuleSetDefaultActionAllow = NetworkRuleSetDefaultAction("Allow")
	NetworkRuleSetDefaultActionDeny  = NetworkRuleSetDefaultAction("Deny")
)

type NetworkRuleSetStatusBypass string

const (
	NetworkRuleSetStatusBypassAzureServices = NetworkRuleSetStatusBypass("AzureServices")
	NetworkRuleSetStatusBypassLogging       = NetworkRuleSetStatusBypass("Logging")
	NetworkRuleSetStatusBypassMetrics       = NetworkRuleSetStatusBypass("Metrics")
	NetworkRuleSetStatusBypassNone          = NetworkRuleSetStatusBypass("None")
)

type NetworkRuleSetStatusDefaultAction string

const (
	NetworkRuleSetStatusDefaultActionAllow = NetworkRuleSetStatusDefaultAction("Allow")
	NetworkRuleSetStatusDefaultActionDeny  = NetworkRuleSetStatusDefaultAction("Deny")
)

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/ResourceAccessRule
type ResourceAccessRule struct {
	//ResourceReference: Resource Id
	ResourceReference *genruntime.ResourceReference `armReference:"ResourceId" json:"resourceReference,omitempty"`

	//TenantId: Tenant Id
	TenantId *string `json:"tenantId,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceAccessRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (resourceAccessRule *ResourceAccessRule) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if resourceAccessRule == nil {
		return nil, nil
	}
	var result ResourceAccessRuleARM

	// Set property ‘ResourceId’:
	if resourceAccessRule.ResourceReference != nil {
		resourceReferenceARMID, err := resolvedReferences.ARMIDOrErr(*resourceAccessRule.ResourceReference)
		if err != nil {
			return nil, err
		}
		resourceReference := resourceReferenceARMID
		result.ResourceId = &resourceReference
	}

	// Set property ‘TenantId’:
	if resourceAccessRule.TenantId != nil {
		tenantId := *resourceAccessRule.TenantId
		result.TenantId = &tenantId
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceAccessRule *ResourceAccessRule) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceAccessRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceAccessRule *ResourceAccessRule) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceAccessRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceAccessRuleARM, got %T", armInput)
	}

	// no assignment for property ‘ResourceReference’

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		resourceAccessRule.TenantId = &tenantId
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceAccessRule populates our ResourceAccessRule from the provided source ResourceAccessRule
func (resourceAccessRule *ResourceAccessRule) AssignPropertiesFromResourceAccessRule(source *v1alpha1api20210401storage.ResourceAccessRule) error {

	// ResourceReference
	if source.ResourceReference != nil {
		resourceReference := source.ResourceReference.Copy()
		resourceAccessRule.ResourceReference = &resourceReference
	} else {
		resourceAccessRule.ResourceReference = nil
	}

	// TenantId
	if source.TenantId != nil {
		tenantId := *source.TenantId
		resourceAccessRule.TenantId = &tenantId
	} else {
		resourceAccessRule.TenantId = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRule populates the provided destination ResourceAccessRule from our ResourceAccessRule
func (resourceAccessRule *ResourceAccessRule) AssignPropertiesToResourceAccessRule(destination *v1alpha1api20210401storage.ResourceAccessRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceReference
	if resourceAccessRule.ResourceReference != nil {
		resourceReference := resourceAccessRule.ResourceReference.Copy()
		destination.ResourceReference = &resourceReference
	} else {
		destination.ResourceReference = nil
	}

	// TenantId
	if resourceAccessRule.TenantId != nil {
		tenantId := *resourceAccessRule.TenantId
		destination.TenantId = &tenantId
	} else {
		destination.TenantId = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type ResourceAccessRule_Status struct {
	//ResourceId: Resource Id
	ResourceId *string `json:"resourceId,omitempty"`

	//TenantId: Tenant Id
	TenantId *string `json:"tenantId,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceAccessRule_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (resourceAccessRuleStatus *ResourceAccessRule_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceAccessRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (resourceAccessRuleStatus *ResourceAccessRule_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceAccessRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceAccessRule_StatusARM, got %T", armInput)
	}

	// Set property ‘ResourceId’:
	if typedInput.ResourceId != nil {
		resourceId := *typedInput.ResourceId
		resourceAccessRuleStatus.ResourceId = &resourceId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		resourceAccessRuleStatus.TenantId = &tenantId
	}

	// No error
	return nil
}

// AssignPropertiesFromResourceAccessRuleStatus populates our ResourceAccessRule_Status from the provided source ResourceAccessRule_Status
func (resourceAccessRuleStatus *ResourceAccessRule_Status) AssignPropertiesFromResourceAccessRuleStatus(source *v1alpha1api20210401storage.ResourceAccessRule_Status) error {

	// ResourceId
	if source.ResourceId != nil {
		resourceId := *source.ResourceId
		resourceAccessRuleStatus.ResourceId = &resourceId
	} else {
		resourceAccessRuleStatus.ResourceId = nil
	}

	// TenantId
	if source.TenantId != nil {
		tenantId := *source.TenantId
		resourceAccessRuleStatus.TenantId = &tenantId
	} else {
		resourceAccessRuleStatus.TenantId = nil
	}

	// No error
	return nil
}

// AssignPropertiesToResourceAccessRuleStatus populates the provided destination ResourceAccessRule_Status from our ResourceAccessRule_Status
func (resourceAccessRuleStatus *ResourceAccessRule_Status) AssignPropertiesToResourceAccessRuleStatus(destination *v1alpha1api20210401storage.ResourceAccessRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceId
	if resourceAccessRuleStatus.ResourceId != nil {
		resourceId := *resourceAccessRuleStatus.ResourceId
		destination.ResourceId = &resourceId
	} else {
		destination.ResourceId = nil
	}

	// TenantId
	if resourceAccessRuleStatus.TenantId != nil {
		tenantId := *resourceAccessRuleStatus.TenantId
		destination.TenantId = &tenantId
	} else {
		destination.TenantId = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"InternetRouting","MicrosoftRouting"}
type RoutingPreferenceRoutingChoice string

const (
	RoutingPreferenceRoutingChoiceInternetRouting  = RoutingPreferenceRoutingChoice("InternetRouting")
	RoutingPreferenceRoutingChoiceMicrosoftRouting = RoutingPreferenceRoutingChoice("MicrosoftRouting")
)

type RoutingPreferenceStatusRoutingChoice string

const (
	RoutingPreferenceStatusRoutingChoiceInternetRouting  = RoutingPreferenceStatusRoutingChoice("InternetRouting")
	RoutingPreferenceStatusRoutingChoiceMicrosoftRouting = RoutingPreferenceStatusRoutingChoice("MicrosoftRouting")
)

// +kubebuilder:validation:Enum={"Log"}
type SasPolicyExpirationAction string

const SasPolicyExpirationActionLog = SasPolicyExpirationAction("Log")

type SasPolicyStatusExpirationAction string

const SasPolicyStatusExpirationActionLog = SasPolicyStatusExpirationAction("Log")

//Generated from:
type StorageAccountInternetEndpoints_Status struct {
	//Blob: Gets the blob endpoint.
	Blob *string `json:"blob,omitempty"`

	//Dfs: Gets the dfs endpoint.
	Dfs *string `json:"dfs,omitempty"`

	//File: Gets the file endpoint.
	File *string `json:"file,omitempty"`

	//Web: Gets the web endpoint.
	Web *string `json:"web,omitempty"`
}

var _ genruntime.FromARMConverter = &StorageAccountInternetEndpoints_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageAccountInternetEndpointsStatus *StorageAccountInternetEndpoints_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountInternetEndpoints_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageAccountInternetEndpointsStatus *StorageAccountInternetEndpoints_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountInternetEndpoints_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountInternetEndpoints_StatusARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		blob := *typedInput.Blob
		storageAccountInternetEndpointsStatus.Blob = &blob
	}

	// Set property ‘Dfs’:
	if typedInput.Dfs != nil {
		dfs := *typedInput.Dfs
		storageAccountInternetEndpointsStatus.Dfs = &dfs
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		file := *typedInput.File
		storageAccountInternetEndpointsStatus.File = &file
	}

	// Set property ‘Web’:
	if typedInput.Web != nil {
		web := *typedInput.Web
		storageAccountInternetEndpointsStatus.Web = &web
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountInternetEndpointsStatus populates our StorageAccountInternetEndpoints_Status from the provided source StorageAccountInternetEndpoints_Status
func (storageAccountInternetEndpointsStatus *StorageAccountInternetEndpoints_Status) AssignPropertiesFromStorageAccountInternetEndpointsStatus(source *v1alpha1api20210401storage.StorageAccountInternetEndpoints_Status) error {

	// Blob
	if source.Blob != nil {
		blob := *source.Blob
		storageAccountInternetEndpointsStatus.Blob = &blob
	} else {
		storageAccountInternetEndpointsStatus.Blob = nil
	}

	// Dfs
	if source.Dfs != nil {
		df := *source.Dfs
		storageAccountInternetEndpointsStatus.Dfs = &df
	} else {
		storageAccountInternetEndpointsStatus.Dfs = nil
	}

	// File
	if source.File != nil {
		file := *source.File
		storageAccountInternetEndpointsStatus.File = &file
	} else {
		storageAccountInternetEndpointsStatus.File = nil
	}

	// Web
	if source.Web != nil {
		web := *source.Web
		storageAccountInternetEndpointsStatus.Web = &web
	} else {
		storageAccountInternetEndpointsStatus.Web = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountInternetEndpointsStatus populates the provided destination StorageAccountInternetEndpoints_Status from our StorageAccountInternetEndpoints_Status
func (storageAccountInternetEndpointsStatus *StorageAccountInternetEndpoints_Status) AssignPropertiesToStorageAccountInternetEndpointsStatus(destination *v1alpha1api20210401storage.StorageAccountInternetEndpoints_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if storageAccountInternetEndpointsStatus.Blob != nil {
		blob := *storageAccountInternetEndpointsStatus.Blob
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// Dfs
	if storageAccountInternetEndpointsStatus.Dfs != nil {
		df := *storageAccountInternetEndpointsStatus.Dfs
		destination.Dfs = &df
	} else {
		destination.Dfs = nil
	}

	// File
	if storageAccountInternetEndpointsStatus.File != nil {
		file := *storageAccountInternetEndpointsStatus.File
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Web
	if storageAccountInternetEndpointsStatus.Web != nil {
		web := *storageAccountInternetEndpointsStatus.Web
		destination.Web = &web
	} else {
		destination.Web = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type StorageAccountMicrosoftEndpoints_Status struct {
	//Blob: Gets the blob endpoint.
	Blob *string `json:"blob,omitempty"`

	//Dfs: Gets the dfs endpoint.
	Dfs *string `json:"dfs,omitempty"`

	//File: Gets the file endpoint.
	File *string `json:"file,omitempty"`

	//Queue: Gets the queue endpoint.
	Queue *string `json:"queue,omitempty"`

	//Table: Gets the table endpoint.
	Table *string `json:"table,omitempty"`

	//Web: Gets the web endpoint.
	Web *string `json:"web,omitempty"`
}

var _ genruntime.FromARMConverter = &StorageAccountMicrosoftEndpoints_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storageAccountMicrosoftEndpointsStatus *StorageAccountMicrosoftEndpoints_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageAccountMicrosoftEndpoints_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storageAccountMicrosoftEndpointsStatus *StorageAccountMicrosoftEndpoints_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageAccountMicrosoftEndpoints_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageAccountMicrosoftEndpoints_StatusARM, got %T", armInput)
	}

	// Set property ‘Blob’:
	if typedInput.Blob != nil {
		blob := *typedInput.Blob
		storageAccountMicrosoftEndpointsStatus.Blob = &blob
	}

	// Set property ‘Dfs’:
	if typedInput.Dfs != nil {
		dfs := *typedInput.Dfs
		storageAccountMicrosoftEndpointsStatus.Dfs = &dfs
	}

	// Set property ‘File’:
	if typedInput.File != nil {
		file := *typedInput.File
		storageAccountMicrosoftEndpointsStatus.File = &file
	}

	// Set property ‘Queue’:
	if typedInput.Queue != nil {
		queue := *typedInput.Queue
		storageAccountMicrosoftEndpointsStatus.Queue = &queue
	}

	// Set property ‘Table’:
	if typedInput.Table != nil {
		table := *typedInput.Table
		storageAccountMicrosoftEndpointsStatus.Table = &table
	}

	// Set property ‘Web’:
	if typedInput.Web != nil {
		web := *typedInput.Web
		storageAccountMicrosoftEndpointsStatus.Web = &web
	}

	// No error
	return nil
}

// AssignPropertiesFromStorageAccountMicrosoftEndpointsStatus populates our StorageAccountMicrosoftEndpoints_Status from the provided source StorageAccountMicrosoftEndpoints_Status
func (storageAccountMicrosoftEndpointsStatus *StorageAccountMicrosoftEndpoints_Status) AssignPropertiesFromStorageAccountMicrosoftEndpointsStatus(source *v1alpha1api20210401storage.StorageAccountMicrosoftEndpoints_Status) error {

	// Blob
	if source.Blob != nil {
		blob := *source.Blob
		storageAccountMicrosoftEndpointsStatus.Blob = &blob
	} else {
		storageAccountMicrosoftEndpointsStatus.Blob = nil
	}

	// Dfs
	if source.Dfs != nil {
		df := *source.Dfs
		storageAccountMicrosoftEndpointsStatus.Dfs = &df
	} else {
		storageAccountMicrosoftEndpointsStatus.Dfs = nil
	}

	// File
	if source.File != nil {
		file := *source.File
		storageAccountMicrosoftEndpointsStatus.File = &file
	} else {
		storageAccountMicrosoftEndpointsStatus.File = nil
	}

	// Queue
	if source.Queue != nil {
		queue := *source.Queue
		storageAccountMicrosoftEndpointsStatus.Queue = &queue
	} else {
		storageAccountMicrosoftEndpointsStatus.Queue = nil
	}

	// Table
	if source.Table != nil {
		table := *source.Table
		storageAccountMicrosoftEndpointsStatus.Table = &table
	} else {
		storageAccountMicrosoftEndpointsStatus.Table = nil
	}

	// Web
	if source.Web != nil {
		web := *source.Web
		storageAccountMicrosoftEndpointsStatus.Web = &web
	} else {
		storageAccountMicrosoftEndpointsStatus.Web = nil
	}

	// No error
	return nil
}

// AssignPropertiesToStorageAccountMicrosoftEndpointsStatus populates the provided destination StorageAccountMicrosoftEndpoints_Status from our StorageAccountMicrosoftEndpoints_Status
func (storageAccountMicrosoftEndpointsStatus *StorageAccountMicrosoftEndpoints_Status) AssignPropertiesToStorageAccountMicrosoftEndpointsStatus(destination *v1alpha1api20210401storage.StorageAccountMicrosoftEndpoints_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Blob
	if storageAccountMicrosoftEndpointsStatus.Blob != nil {
		blob := *storageAccountMicrosoftEndpointsStatus.Blob
		destination.Blob = &blob
	} else {
		destination.Blob = nil
	}

	// Dfs
	if storageAccountMicrosoftEndpointsStatus.Dfs != nil {
		df := *storageAccountMicrosoftEndpointsStatus.Dfs
		destination.Dfs = &df
	} else {
		destination.Dfs = nil
	}

	// File
	if storageAccountMicrosoftEndpointsStatus.File != nil {
		file := *storageAccountMicrosoftEndpointsStatus.File
		destination.File = &file
	} else {
		destination.File = nil
	}

	// Queue
	if storageAccountMicrosoftEndpointsStatus.Queue != nil {
		queue := *storageAccountMicrosoftEndpointsStatus.Queue
		destination.Queue = &queue
	} else {
		destination.Queue = nil
	}

	// Table
	if storageAccountMicrosoftEndpointsStatus.Table != nil {
		table := *storageAccountMicrosoftEndpointsStatus.Table
		destination.Table = &table
	} else {
		destination.Table = nil
	}

	// Web
	if storageAccountMicrosoftEndpointsStatus.Web != nil {
		web := *storageAccountMicrosoftEndpointsStatus.Web
		destination.Web = &web
	} else {
		destination.Web = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type UserAssignedIdentity_Status struct {
	//ClientId: The client ID of the identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal ID of the identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserAssignedIdentity_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (userAssignedIdentityStatus *UserAssignedIdentity_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserAssignedIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (userAssignedIdentityStatus *UserAssignedIdentity_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserAssignedIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserAssignedIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		userAssignedIdentityStatus.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		userAssignedIdentityStatus.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserAssignedIdentityStatus populates our UserAssignedIdentity_Status from the provided source UserAssignedIdentity_Status
func (userAssignedIdentityStatus *UserAssignedIdentity_Status) AssignPropertiesFromUserAssignedIdentityStatus(source *v1alpha1api20210401storage.UserAssignedIdentity_Status) error {

	// ClientId
	if source.ClientId != nil {
		clientId := *source.ClientId
		userAssignedIdentityStatus.ClientId = &clientId
	} else {
		userAssignedIdentityStatus.ClientId = nil
	}

	// PrincipalId
	if source.PrincipalId != nil {
		principalId := *source.PrincipalId
		userAssignedIdentityStatus.PrincipalId = &principalId
	} else {
		userAssignedIdentityStatus.PrincipalId = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUserAssignedIdentityStatus populates the provided destination UserAssignedIdentity_Status from our UserAssignedIdentity_Status
func (userAssignedIdentityStatus *UserAssignedIdentity_Status) AssignPropertiesToUserAssignedIdentityStatus(destination *v1alpha1api20210401storage.UserAssignedIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	if userAssignedIdentityStatus.ClientId != nil {
		clientId := *userAssignedIdentityStatus.ClientId
		destination.ClientId = &clientId
	} else {
		destination.ClientId = nil
	}

	// PrincipalId
	if userAssignedIdentityStatus.PrincipalId != nil {
		principalId := *userAssignedIdentityStatus.PrincipalId
		destination.PrincipalId = &principalId
	} else {
		destination.PrincipalId = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/VirtualNetworkRule
type VirtualNetworkRule struct {
	//Action: The action of virtual network rule.
	Action *VirtualNetworkRuleAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Reference: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	Reference genruntime.ResourceReference `armReference:"Id" json:"reference"`

	//State: Gets the state of virtual network rule.
	State *VirtualNetworkRuleState `json:"state,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworkRule *VirtualNetworkRule) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if virtualNetworkRule == nil {
		return nil, nil
	}
	var result VirtualNetworkRuleARM

	// Set property ‘Action’:
	if virtualNetworkRule.Action != nil {
		action := *virtualNetworkRule.Action
		result.Action = &action
	}

	// Set property ‘Id’:
	referenceARMID, err := resolvedReferences.ARMIDOrErr(virtualNetworkRule.Reference)
	if err != nil {
		return nil, err
	}
	result.Id = referenceARMID

	// Set property ‘State’:
	if virtualNetworkRule.State != nil {
		state := *virtualNetworkRule.State
		result.State = &state
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkRule *VirtualNetworkRule) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkRule *VirtualNetworkRule) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRuleARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		virtualNetworkRule.Action = &action
	}

	// no assignment for property ‘Reference’

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		virtualNetworkRule.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRule populates our VirtualNetworkRule from the provided source VirtualNetworkRule
func (virtualNetworkRule *VirtualNetworkRule) AssignPropertiesFromVirtualNetworkRule(source *v1alpha1api20210401storage.VirtualNetworkRule) error {

	// Action
	if source.Action != nil {
		action := VirtualNetworkRuleAction(*source.Action)
		virtualNetworkRule.Action = &action
	} else {
		virtualNetworkRule.Action = nil
	}

	// Reference
	virtualNetworkRule.Reference = source.Reference.Copy()

	// State
	if source.State != nil {
		state := VirtualNetworkRuleState(*source.State)
		virtualNetworkRule.State = &state
	} else {
		virtualNetworkRule.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRule populates the provided destination VirtualNetworkRule from our VirtualNetworkRule
func (virtualNetworkRule *VirtualNetworkRule) AssignPropertiesToVirtualNetworkRule(destination *v1alpha1api20210401storage.VirtualNetworkRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if virtualNetworkRule.Action != nil {
		action := string(*virtualNetworkRule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Reference
	destination.Reference = virtualNetworkRule.Reference.Copy()

	// State
	if virtualNetworkRule.State != nil {
		state := string(*virtualNetworkRule.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type VirtualNetworkRule_Status struct {
	//Action: The action of virtual network rule.
	Action *VirtualNetworkRuleStatusAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
	Id string `json:"id"`

	//State: Gets the state of virtual network rule.
	State *VirtualNetworkRuleStatusState `json:"state,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkRule_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkRuleStatus *VirtualNetworkRule_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkRuleStatus *VirtualNetworkRule_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		virtualNetworkRuleStatus.Action = &action
	}

	// Set property ‘Id’:
	virtualNetworkRuleStatus.Id = typedInput.Id

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		virtualNetworkRuleStatus.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRuleStatus populates our VirtualNetworkRule_Status from the provided source VirtualNetworkRule_Status
func (virtualNetworkRuleStatus *VirtualNetworkRule_Status) AssignPropertiesFromVirtualNetworkRuleStatus(source *v1alpha1api20210401storage.VirtualNetworkRule_Status) error {

	// Action
	if source.Action != nil {
		action := VirtualNetworkRuleStatusAction(*source.Action)
		virtualNetworkRuleStatus.Action = &action
	} else {
		virtualNetworkRuleStatus.Action = nil
	}

	// Id
	if source.Id != nil {
		virtualNetworkRuleStatus.Id = *source.Id
	} else {
		virtualNetworkRuleStatus.Id = ""
	}

	// State
	if source.State != nil {
		state := VirtualNetworkRuleStatusState(*source.State)
		virtualNetworkRuleStatus.State = &state
	} else {
		virtualNetworkRuleStatus.State = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRuleStatus populates the provided destination VirtualNetworkRule_Status from our VirtualNetworkRule_Status
func (virtualNetworkRuleStatus *VirtualNetworkRule_Status) AssignPropertiesToVirtualNetworkRuleStatus(destination *v1alpha1api20210401storage.VirtualNetworkRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if virtualNetworkRuleStatus.Action != nil {
		action := string(*virtualNetworkRuleStatus.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Id
	id := virtualNetworkRuleStatus.Id
	destination.Id = &id

	// State
	if virtualNetworkRuleStatus.State != nil {
		state := string(*virtualNetworkRuleStatus.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type BlobRestoreRange_Status struct {
	// +kubebuilder:validation:Required
	//EndRange: Blob end range. This is exclusive. Empty means account end.
	EndRange string `json:"endRange"`

	// +kubebuilder:validation:Required
	//StartRange: Blob start range. This is inclusive. Empty means account start.
	StartRange string `json:"startRange"`
}

var _ genruntime.FromARMConverter = &BlobRestoreRange_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (blobRestoreRangeStatus *BlobRestoreRange_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BlobRestoreRange_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (blobRestoreRangeStatus *BlobRestoreRange_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(BlobRestoreRange_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BlobRestoreRange_StatusARM, got %T", armInput)
	}

	// Set property ‘EndRange’:
	blobRestoreRangeStatus.EndRange = typedInput.EndRange

	// Set property ‘StartRange’:
	blobRestoreRangeStatus.StartRange = typedInput.StartRange

	// No error
	return nil
}

// AssignPropertiesFromBlobRestoreRangeStatus populates our BlobRestoreRange_Status from the provided source BlobRestoreRange_Status
func (blobRestoreRangeStatus *BlobRestoreRange_Status) AssignPropertiesFromBlobRestoreRangeStatus(source *v1alpha1api20210401storage.BlobRestoreRange_Status) error {

	// EndRange
	if source.EndRange != nil {
		blobRestoreRangeStatus.EndRange = *source.EndRange
	} else {
		blobRestoreRangeStatus.EndRange = ""
	}

	// StartRange
	if source.StartRange != nil {
		blobRestoreRangeStatus.StartRange = *source.StartRange
	} else {
		blobRestoreRangeStatus.StartRange = ""
	}

	// No error
	return nil
}

// AssignPropertiesToBlobRestoreRangeStatus populates the provided destination BlobRestoreRange_Status from our BlobRestoreRange_Status
func (blobRestoreRangeStatus *BlobRestoreRange_Status) AssignPropertiesToBlobRestoreRangeStatus(destination *v1alpha1api20210401storage.BlobRestoreRange_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// EndRange
	endRange := blobRestoreRangeStatus.EndRange
	destination.EndRange = &endRange

	// StartRange
	startRange := blobRestoreRangeStatus.StartRange
	destination.StartRange = &startRange

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-04-01/Microsoft.Storage.json#/definitions/EncryptionService
type EncryptionService struct {
	//Enabled: A boolean indicating whether or not the service encrypts the data as it
	//is stored.
	Enabled *bool `json:"enabled,omitempty"`

	//KeyType: Encryption key type to be used for the encryption service. 'Account'
	//key type implies that an account-scoped encryption key will be used. 'Service'
	//key type implies that a default service key is used.
	KeyType *EncryptionServiceKeyType `json:"keyType,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionService{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryptionService *EncryptionService) ConvertToARM(name string, resolvedReferences genruntime.ResolvedReferences) (interface{}, error) {
	if encryptionService == nil {
		return nil, nil
	}
	var result EncryptionServiceARM

	// Set property ‘Enabled’:
	if encryptionService.Enabled != nil {
		enabled := *encryptionService.Enabled
		result.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if encryptionService.KeyType != nil {
		keyType := *encryptionService.KeyType
		result.KeyType = &keyType
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryptionService *EncryptionService) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionServiceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryptionService *EncryptionService) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionServiceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionServiceARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		encryptionService.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if typedInput.KeyType != nil {
		keyType := *typedInput.KeyType
		encryptionService.KeyType = &keyType
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionService populates our EncryptionService from the provided source EncryptionService
func (encryptionService *EncryptionService) AssignPropertiesFromEncryptionService(source *v1alpha1api20210401storage.EncryptionService) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		encryptionService.Enabled = &enabled
	} else {
		encryptionService.Enabled = nil
	}

	// KeyType
	if source.KeyType != nil {
		keyType := EncryptionServiceKeyType(*source.KeyType)
		encryptionService.KeyType = &keyType
	} else {
		encryptionService.KeyType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionService populates the provided destination EncryptionService from our EncryptionService
func (encryptionService *EncryptionService) AssignPropertiesToEncryptionService(destination *v1alpha1api20210401storage.EncryptionService) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if encryptionService.Enabled != nil {
		enabled := *encryptionService.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	if encryptionService.KeyType != nil {
		keyType := string(*encryptionService.KeyType)
		destination.KeyType = &keyType
	} else {
		destination.KeyType = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type EncryptionService_Status struct {
	//Enabled: A boolean indicating whether or not the service encrypts the data as it
	//is stored.
	Enabled *bool `json:"enabled,omitempty"`

	//KeyType: Encryption key type to be used for the encryption service. 'Account'
	//key type implies that an account-scoped encryption key will be used. 'Service'
	//key type implies that a default service key is used.
	KeyType *EncryptionServiceStatusKeyType `json:"keyType,omitempty"`

	//LastEnabledTime: Gets a rough estimate of the date/time when the encryption was
	//last enabled by the user. Only returned when encryption is enabled. There might
	//be some unencrypted blobs which were written after this time, as it is just a
	//rough estimate.
	LastEnabledTime *string `json:"lastEnabledTime,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionService_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryptionServiceStatus *EncryptionService_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionService_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryptionServiceStatus *EncryptionService_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionService_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionService_StatusARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	if typedInput.Enabled != nil {
		enabled := *typedInput.Enabled
		encryptionServiceStatus.Enabled = &enabled
	}

	// Set property ‘KeyType’:
	if typedInput.KeyType != nil {
		keyType := *typedInput.KeyType
		encryptionServiceStatus.KeyType = &keyType
	}

	// Set property ‘LastEnabledTime’:
	if typedInput.LastEnabledTime != nil {
		lastEnabledTime := *typedInput.LastEnabledTime
		encryptionServiceStatus.LastEnabledTime = &lastEnabledTime
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionServiceStatus populates our EncryptionService_Status from the provided source EncryptionService_Status
func (encryptionServiceStatus *EncryptionService_Status) AssignPropertiesFromEncryptionServiceStatus(source *v1alpha1api20210401storage.EncryptionService_Status) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		encryptionServiceStatus.Enabled = &enabled
	} else {
		encryptionServiceStatus.Enabled = nil
	}

	// KeyType
	if source.KeyType != nil {
		keyType := EncryptionServiceStatusKeyType(*source.KeyType)
		encryptionServiceStatus.KeyType = &keyType
	} else {
		encryptionServiceStatus.KeyType = nil
	}

	// LastEnabledTime
	if source.LastEnabledTime != nil {
		lastEnabledTime := *source.LastEnabledTime
		encryptionServiceStatus.LastEnabledTime = &lastEnabledTime
	} else {
		encryptionServiceStatus.LastEnabledTime = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionServiceStatus populates the provided destination EncryptionService_Status from our EncryptionService_Status
func (encryptionServiceStatus *EncryptionService_Status) AssignPropertiesToEncryptionServiceStatus(destination *v1alpha1api20210401storage.EncryptionService_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if encryptionServiceStatus.Enabled != nil {
		enabled := *encryptionServiceStatus.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// KeyType
	if encryptionServiceStatus.KeyType != nil {
		keyType := string(*encryptionServiceStatus.KeyType)
		destination.KeyType = &keyType
	} else {
		destination.KeyType = nil
	}

	// LastEnabledTime
	if encryptionServiceStatus.LastEnabledTime != nil {
		lastEnabledTime := *encryptionServiceStatus.LastEnabledTime
		destination.LastEnabledTime = &lastEnabledTime
	} else {
		destination.LastEnabledTime = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Allow"}
type IPRuleAction string

const IPRuleActionAllow = IPRuleAction("Allow")

type IPRuleStatusAction string

const IPRuleStatusActionAllow = IPRuleStatusAction("Allow")

// +kubebuilder:validation:Enum={"Allow"}
type VirtualNetworkRuleAction string

const VirtualNetworkRuleActionAllow = VirtualNetworkRuleAction("Allow")

// +kubebuilder:validation:Enum={"Deprovisioning","Failed","NetworkSourceDeleted","Provisioning","Succeeded"}
type VirtualNetworkRuleState string

const (
	VirtualNetworkRuleStateDeprovisioning       = VirtualNetworkRuleState("Deprovisioning")
	VirtualNetworkRuleStateFailed               = VirtualNetworkRuleState("Failed")
	VirtualNetworkRuleStateNetworkSourceDeleted = VirtualNetworkRuleState("NetworkSourceDeleted")
	VirtualNetworkRuleStateProvisioning         = VirtualNetworkRuleState("Provisioning")
	VirtualNetworkRuleStateSucceeded            = VirtualNetworkRuleState("Succeeded")
)

type VirtualNetworkRuleStatusAction string

const VirtualNetworkRuleStatusActionAllow = VirtualNetworkRuleStatusAction("Allow")

type VirtualNetworkRuleStatusState string

const (
	VirtualNetworkRuleStatusStateDeprovisioning       = VirtualNetworkRuleStatusState("Deprovisioning")
	VirtualNetworkRuleStatusStateFailed               = VirtualNetworkRuleStatusState("Failed")
	VirtualNetworkRuleStatusStateNetworkSourceDeleted = VirtualNetworkRuleStatusState("NetworkSourceDeleted")
	VirtualNetworkRuleStatusStateProvisioning         = VirtualNetworkRuleStatusState("Provisioning")
	VirtualNetworkRuleStatusStateSucceeded            = VirtualNetworkRuleStatusState("Succeeded")
)

// +kubebuilder:validation:Enum={"Account","Service"}
type EncryptionServiceKeyType string

const (
	EncryptionServiceKeyTypeAccount = EncryptionServiceKeyType("Account")
	EncryptionServiceKeyTypeService = EncryptionServiceKeyType("Service")
)

type EncryptionServiceStatusKeyType string

const (
	EncryptionServiceStatusKeyTypeAccount = EncryptionServiceStatusKeyType("Account")
	EncryptionServiceStatusKeyTypeService = EncryptionServiceStatusKeyType("Service")
)

func init() {
	SchemeBuilder.Register(&StorageAccount{}, &StorageAccountList{})
}
