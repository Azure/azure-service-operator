// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FlexibleServersConfiguration_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServersConfiguration_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServersConfiguration_SpecARM, FlexibleServersConfiguration_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServersConfiguration_SpecARM runs a test to see if a specific instance of FlexibleServersConfiguration_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServersConfiguration_SpecARM(subject FlexibleServersConfiguration_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServersConfiguration_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServersConfiguration_SpecARM instances for property testing - lazily instantiated by
// FlexibleServersConfiguration_SpecARMGenerator()
var flexibleServersConfiguration_SpecARMGenerator gopter.Gen

// FlexibleServersConfiguration_SpecARMGenerator returns a generator of FlexibleServersConfiguration_SpecARM instances for property testing.
// We first initialize flexibleServersConfiguration_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlexibleServersConfiguration_SpecARMGenerator() gopter.Gen {
	if flexibleServersConfiguration_SpecARMGenerator != nil {
		return flexibleServersConfiguration_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersConfiguration_SpecARM(generators)
	flexibleServersConfiguration_SpecARMGenerator = gen.Struct(reflect.TypeOf(FlexibleServersConfiguration_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersConfiguration_SpecARM(generators)
	AddRelatedPropertyGeneratorsForFlexibleServersConfiguration_SpecARM(generators)
	flexibleServersConfiguration_SpecARMGenerator = gen.Struct(reflect.TypeOf(FlexibleServersConfiguration_SpecARM{}), generators)

	return flexibleServersConfiguration_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForFlexibleServersConfiguration_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlexibleServersConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFlexibleServersConfiguration_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServersConfiguration_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ConfigurationPropertiesARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataARMGenerator())
}

func Test_ConfigurationPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConfigurationPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConfigurationPropertiesARM, ConfigurationPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConfigurationPropertiesARM runs a test to see if a specific instance of ConfigurationPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConfigurationPropertiesARM(subject ConfigurationPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConfigurationPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConfigurationPropertiesARM instances for property testing - lazily instantiated by
// ConfigurationPropertiesARMGenerator()
var configurationPropertiesARMGenerator gopter.Gen

// ConfigurationPropertiesARMGenerator returns a generator of ConfigurationPropertiesARM instances for property testing.
func ConfigurationPropertiesARMGenerator() gopter.Gen {
	if configurationPropertiesARMGenerator != nil {
		return configurationPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConfigurationPropertiesARM(generators)
	configurationPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ConfigurationPropertiesARM{}), generators)

	return configurationPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForConfigurationPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConfigurationPropertiesARM(gens map[string]gopter.Gen) {
	gens["AllowedValues"] = gen.PtrOf(gen.AlphaString())
	gens["DataType"] = gen.PtrOf(gen.OneConstOf(
		ConfigurationProperties_DataTypeBoolean,
		ConfigurationProperties_DataTypeEnumeration,
		ConfigurationProperties_DataTypeInteger,
		ConfigurationProperties_DataTypeNumeric))
	gens["DefaultValue"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["DocumentationLink"] = gen.PtrOf(gen.AlphaString())
	gens["IsConfigPendingRestart"] = gen.PtrOf(gen.Bool())
	gens["IsDynamicConfig"] = gen.PtrOf(gen.Bool())
	gens["IsReadOnly"] = gen.PtrOf(gen.Bool())
	gens["Source"] = gen.PtrOf(gen.AlphaString())
	gens["Unit"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
