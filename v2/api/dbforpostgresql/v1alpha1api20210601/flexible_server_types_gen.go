// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1alpha1api20210601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generator information:
//- Generated from: /postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2021-06-01/postgresql.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}
type FlexibleServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FlexibleServer_Spec `json:"spec,omitempty"`
	Status            Server_Status       `json:"status,omitempty"`
}

var _ conditions.Conditioner = &FlexibleServer{}

// GetConditions returns the conditions of the resource
func (server *FlexibleServer) GetConditions() conditions.Conditions {
	return server.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (server *FlexibleServer) SetConditions(conditions conditions.Conditions) {
	server.Status.Conditions = conditions
}

var _ conversion.Convertible = &FlexibleServer{}

// ConvertFrom populates our FlexibleServer from the provided hub FlexibleServer
func (server *FlexibleServer) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210601storage.FlexibleServer)
	if !ok {
		return fmt.Errorf("expected storage:dbforpostgresql/v1alpha1api20210601storage/FlexibleServer but received %T instead", hub)
	}

	return server.AssignPropertiesFromFlexibleServer(source)
}

// ConvertTo populates the provided hub FlexibleServer from our FlexibleServer
func (server *FlexibleServer) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210601storage.FlexibleServer)
	if !ok {
		return fmt.Errorf("expected storage:dbforpostgresql/v1alpha1api20210601storage/FlexibleServer but received %T instead", hub)
	}

	return server.AssignPropertiesToFlexibleServer(destination)
}

// +kubebuilder:webhook:path=/mutate-dbforpostgresql-azure-com-v1alpha1api20210601-flexibleserver,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=dbforpostgresql.azure.com,resources=flexibleservers,verbs=create;update,versions=v1alpha1api20210601,name=default.v1alpha1api20210601.flexibleservers.dbforpostgresql.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &FlexibleServer{}

// Default applies defaults to the FlexibleServer resource
func (server *FlexibleServer) Default() {
	server.defaultImpl()
	var temp interface{} = server
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (server *FlexibleServer) defaultAzureName() {
	if server.Spec.AzureName == "" {
		server.Spec.AzureName = server.Name
	}
}

// defaultImpl applies the code generated defaults to the FlexibleServer resource
func (server *FlexibleServer) defaultImpl() { server.defaultAzureName() }

var _ genruntime.KubernetesResource = &FlexibleServer{}

// AzureName returns the Azure name of the resource
func (server *FlexibleServer) AzureName() string {
	return server.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-06-01"
func (server FlexibleServer) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (server *FlexibleServer) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (server *FlexibleServer) GetSpec() genruntime.ConvertibleSpec {
	return &server.Spec
}

// GetStatus returns the status of this resource
func (server *FlexibleServer) GetStatus() genruntime.ConvertibleStatus {
	return &server.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DBforPostgreSQL/flexibleServers"
func (server *FlexibleServer) GetType() string {
	return "Microsoft.DBforPostgreSQL/flexibleServers"
}

// NewEmptyStatus returns a new empty (blank) status
func (server *FlexibleServer) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Server_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (server *FlexibleServer) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(server.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  server.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (server *FlexibleServer) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Server_Status); ok {
		server.Status = *st
		return nil
	}

	// Convert status to required version
	var st Server_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	server.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-dbforpostgresql-azure-com-v1alpha1api20210601-flexibleserver,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=dbforpostgresql.azure.com,resources=flexibleservers,verbs=create;update,versions=v1alpha1api20210601,name=validate.v1alpha1api20210601.flexibleservers.dbforpostgresql.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &FlexibleServer{}

// ValidateCreate validates the creation of the resource
func (server *FlexibleServer) ValidateCreate() error {
	validations := server.createValidations()
	var temp interface{} = server
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (server *FlexibleServer) ValidateDelete() error {
	validations := server.deleteValidations()
	var temp interface{} = server
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (server *FlexibleServer) ValidateUpdate(old runtime.Object) error {
	validations := server.updateValidations()
	var temp interface{} = server
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (server *FlexibleServer) createValidations() []func() error {
	return []func() error{server.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (server *FlexibleServer) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (server *FlexibleServer) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return server.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (server *FlexibleServer) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&server.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromFlexibleServer populates our FlexibleServer from the provided source FlexibleServer
func (server *FlexibleServer) AssignPropertiesFromFlexibleServer(source *v1alpha1api20210601storage.FlexibleServer) error {

	// ObjectMeta
	server.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FlexibleServer_Spec
	err := spec.AssignPropertiesFromFlexibleServer_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromFlexibleServer_Spec() to populate field Spec")
	}
	server.Spec = spec

	// Status
	var status Server_Status
	err = status.AssignPropertiesFromServer_Status(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromServer_Status() to populate field Status")
	}
	server.Status = status

	// No error
	return nil
}

// AssignPropertiesToFlexibleServer populates the provided destination FlexibleServer from our FlexibleServer
func (server *FlexibleServer) AssignPropertiesToFlexibleServer(destination *v1alpha1api20210601storage.FlexibleServer) error {

	// ObjectMeta
	destination.ObjectMeta = *server.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210601storage.FlexibleServer_Spec
	err := server.Spec.AssignPropertiesToFlexibleServer_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToFlexibleServer_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210601storage.Server_Status
	err = server.Status.AssignPropertiesToServer_Status(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToServer_Status() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (server *FlexibleServer) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: server.Spec.OriginalVersion(),
		Kind:    "FlexibleServer",
	}
}

// +kubebuilder:object:root=true
//Generator information:
//- Generated from: /postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2021-06-01/postgresql.json
//- ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}
type FlexibleServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FlexibleServer `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-06-01"}
type APIVersion string

const APIVersionValue = APIVersion("2021-06-01")

type FlexibleServer_Spec struct {
	//AdministratorLogin: The administrator's login name of a server. Can only be
	//specified when the server is being created (and is required for creation).
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	//AdministratorLoginPassword: The administrator login password (required for
	//server creation).
	AdministratorLoginPassword *genruntime.SecretReference `json:"administratorLoginPassword,omitempty"`

	//AvailabilityZone: availability zone information of the server.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Backup: Backup properties of a server.
	Backup *Backup `json:"backup,omitempty"`

	//CreateMode: The mode to create a new PostgreSQL server.
	CreateMode *ServerPropertiesCreateMode `json:"createMode,omitempty"`

	//HighAvailability: High availability properties of a server.
	HighAvailability *HighAvailability `json:"highAvailability,omitempty"`

	// +kubebuilder:validation:Required
	//Location: The geo-location where the resource lives
	Location string `json:"location"`

	//MaintenanceWindow: Maintenance window properties of a server.
	MaintenanceWindow *MaintenanceWindow `json:"maintenanceWindow,omitempty"`

	//Network: Network properties of a server.
	Network *Network `json:"network,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PointInTimeUTC: Restore point creation time (ISO8601 format), specifying the
	//time to restore from. It's required when 'createMode' is 'PointInTimeRestore'.
	PointInTimeUTC *string `json:"pointInTimeUTC,omitempty"`

	//PropertiesTags: Application-specific metadata in the form of key-value pairs.
	PropertiesTags map[string]string `json:"properties_tags,omitempty"`

	//Sku: The SKU (pricing tier) of the server.
	Sku *Sku `json:"sku,omitempty"`

	//SourceServerResourceId: The source server resource ID to restore from. It's
	//required when 'createMode' is 'PointInTimeRestore'.
	SourceServerResourceId *string `json:"sourceServerResourceId,omitempty"`

	//Storage: Storage properties of a server.
	Storage *Storage `json:"storage,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Version: PostgreSQL Server version.
	Version *ServerVersion `json:"version,omitempty"`
}

var _ genruntime.ARMTransformer = &FlexibleServer_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (server *FlexibleServer_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if server == nil {
		return nil, nil
	}
	var result FlexibleServer_SpecARM

	// Set property ‘AzureName’:
	result.AzureName = server.AzureName

	// Set property ‘Location’:
	result.Location = server.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if server.AdministratorLogin != nil ||
		server.AdministratorLoginPassword != nil ||
		server.AvailabilityZone != nil ||
		server.Backup != nil ||
		server.CreateMode != nil ||
		server.HighAvailability != nil ||
		server.MaintenanceWindow != nil ||
		server.Network != nil ||
		server.PointInTimeUTC != nil ||
		server.PropertiesTags != nil ||
		server.SourceServerResourceId != nil ||
		server.Storage != nil ||
		server.Version != nil {
		result.Properties = &ServerPropertiesARM{}
	}
	if server.AdministratorLogin != nil {
		administratorLogin := *server.AdministratorLogin
		result.Properties.AdministratorLogin = &administratorLogin
	}
	if server.AdministratorLoginPassword != nil {
		administratorLoginPasswordSecret, err := resolved.ResolvedSecrets.LookupSecret(*server.AdministratorLoginPassword)
		if err != nil {
			return nil, errors.Wrap(err, "looking up secret for property AdministratorLoginPassword")
		}
		administratorLoginPassword := administratorLoginPasswordSecret
		result.Properties.AdministratorLoginPassword = &administratorLoginPassword
	}
	if server.AvailabilityZone != nil {
		availabilityZone := *server.AvailabilityZone
		result.Properties.AvailabilityZone = &availabilityZone
	}
	if server.Backup != nil {
		backupARM, err := (*server.Backup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		backup := backupARM.(BackupARM)
		result.Properties.Backup = &backup
	}
	if server.CreateMode != nil {
		createMode := *server.CreateMode
		result.Properties.CreateMode = &createMode
	}
	if server.HighAvailability != nil {
		highAvailabilityARM, err := (*server.HighAvailability).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		highAvailability := highAvailabilityARM.(HighAvailabilityARM)
		result.Properties.HighAvailability = &highAvailability
	}
	if server.MaintenanceWindow != nil {
		maintenanceWindowARM, err := (*server.MaintenanceWindow).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		maintenanceWindow := maintenanceWindowARM.(MaintenanceWindowARM)
		result.Properties.MaintenanceWindow = &maintenanceWindow
	}
	if server.Network != nil {
		networkARM, err := (*server.Network).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		network := networkARM.(NetworkARM)
		result.Properties.Network = &network
	}
	if server.PointInTimeUTC != nil {
		pointInTimeUTC := *server.PointInTimeUTC
		result.Properties.PointInTimeUTC = &pointInTimeUTC
	}
	if server.PropertiesTags != nil {
		result.Properties.Tags = make(map[string]string)
		for key, value := range server.PropertiesTags {
			result.Properties.Tags[key] = value
		}
	}
	if server.SourceServerResourceId != nil {
		sourceServerResourceId := *server.SourceServerResourceId
		result.Properties.SourceServerResourceId = &sourceServerResourceId
	}
	if server.Storage != nil {
		storageARM, err := (*server.Storage).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		storage := storageARM.(StorageARM)
		result.Properties.Storage = &storage
	}
	if server.Version != nil {
		version := *server.Version
		result.Properties.Version = &version
	}

	// Set property ‘Sku’:
	if server.Sku != nil {
		skuARM, err := (*server.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(SkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if server.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range server.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *FlexibleServer_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FlexibleServer_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *FlexibleServer_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FlexibleServer_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FlexibleServer_SpecARM, got %T", armInput)
	}

	// Set property ‘AdministratorLogin’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdministratorLogin != nil {
			administratorLogin := *typedInput.Properties.AdministratorLogin
			server.AdministratorLogin = &administratorLogin
		}
	}

	// no assignment for property ‘AdministratorLoginPassword’

	// Set property ‘AvailabilityZone’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AvailabilityZone != nil {
			availabilityZone := *typedInput.Properties.AvailabilityZone
			server.AvailabilityZone = &availabilityZone
		}
	}

	// Set property ‘AzureName’:
	server.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Backup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Backup != nil {
			var backup1 Backup
			err := backup1.PopulateFromARM(owner, *typedInput.Properties.Backup)
			if err != nil {
				return err
			}
			backup := backup1
			server.Backup = &backup
		}
	}

	// Set property ‘CreateMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreateMode != nil {
			createMode := *typedInput.Properties.CreateMode
			server.CreateMode = &createMode
		}
	}

	// Set property ‘HighAvailability’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HighAvailability != nil {
			var highAvailability1 HighAvailability
			err := highAvailability1.PopulateFromARM(owner, *typedInput.Properties.HighAvailability)
			if err != nil {
				return err
			}
			highAvailability := highAvailability1
			server.HighAvailability = &highAvailability
		}
	}

	// Set property ‘Location’:
	server.Location = typedInput.Location

	// Set property ‘MaintenanceWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaintenanceWindow != nil {
			var maintenanceWindow1 MaintenanceWindow
			err := maintenanceWindow1.PopulateFromARM(owner, *typedInput.Properties.MaintenanceWindow)
			if err != nil {
				return err
			}
			maintenanceWindow := maintenanceWindow1
			server.MaintenanceWindow = &maintenanceWindow
		}
	}

	// Set property ‘Network’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Network != nil {
			var network1 Network
			err := network1.PopulateFromARM(owner, *typedInput.Properties.Network)
			if err != nil {
				return err
			}
			network := network1
			server.Network = &network
		}
	}

	// Set property ‘Owner’:
	server.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PointInTimeUTC’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PointInTimeUTC != nil {
			pointInTimeUTC := *typedInput.Properties.PointInTimeUTC
			server.PointInTimeUTC = &pointInTimeUTC
		}
	}

	// Set property ‘PropertiesTags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tags != nil {
			server.PropertiesTags = make(map[string]string)
			for key, value := range typedInput.Properties.Tags {
				server.PropertiesTags[key] = value
			}
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		server.Sku = &sku
	}

	// Set property ‘SourceServerResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceServerResourceId != nil {
			sourceServerResourceId := *typedInput.Properties.SourceServerResourceId
			server.SourceServerResourceId = &sourceServerResourceId
		}
	}

	// Set property ‘Storage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Storage != nil {
			var storage1 Storage
			err := storage1.PopulateFromARM(owner, *typedInput.Properties.Storage)
			if err != nil {
				return err
			}
			storage := storage1
			server.Storage = &storage
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		server.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			server.Tags[key] = value
		}
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			server.Version = &version
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FlexibleServer_Spec{}

// ConvertSpecFrom populates our FlexibleServer_Spec from the provided source
func (server *FlexibleServer_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210601storage.FlexibleServer_Spec)
	if ok {
		// Populate our instance from source
		return server.AssignPropertiesFromFlexibleServer_Spec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210601storage.FlexibleServer_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = server.AssignPropertiesFromFlexibleServer_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FlexibleServer_Spec
func (server *FlexibleServer_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210601storage.FlexibleServer_Spec)
	if ok {
		// Populate destination from our instance
		return server.AssignPropertiesToFlexibleServer_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210601storage.FlexibleServer_Spec{}
	err := server.AssignPropertiesToFlexibleServer_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromFlexibleServer_Spec populates our FlexibleServer_Spec from the provided source FlexibleServer_Spec
func (server *FlexibleServer_Spec) AssignPropertiesFromFlexibleServer_Spec(source *v1alpha1api20210601storage.FlexibleServer_Spec) error {

	// AdministratorLogin
	server.AdministratorLogin = genruntime.ClonePointerToString(source.AdministratorLogin)

	// AdministratorLoginPassword
	if source.AdministratorLoginPassword != nil {
		administratorLoginPassword := source.AdministratorLoginPassword.Copy()
		server.AdministratorLoginPassword = &administratorLoginPassword
	} else {
		server.AdministratorLoginPassword = nil
	}

	// AvailabilityZone
	server.AvailabilityZone = genruntime.ClonePointerToString(source.AvailabilityZone)

	// AzureName
	server.AzureName = source.AzureName

	// Backup
	if source.Backup != nil {
		var backup Backup
		err := backup.AssignPropertiesFromBackup(source.Backup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBackup() to populate field Backup")
		}
		server.Backup = &backup
	} else {
		server.Backup = nil
	}

	// CreateMode
	if source.CreateMode != nil {
		createMode := ServerPropertiesCreateMode(*source.CreateMode)
		server.CreateMode = &createMode
	} else {
		server.CreateMode = nil
	}

	// HighAvailability
	if source.HighAvailability != nil {
		var highAvailability HighAvailability
		err := highAvailability.AssignPropertiesFromHighAvailability(source.HighAvailability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHighAvailability() to populate field HighAvailability")
		}
		server.HighAvailability = &highAvailability
	} else {
		server.HighAvailability = nil
	}

	// Location
	server.Location = genruntime.GetOptionalStringValue(source.Location)

	// MaintenanceWindow
	if source.MaintenanceWindow != nil {
		var maintenanceWindow MaintenanceWindow
		err := maintenanceWindow.AssignPropertiesFromMaintenanceWindow(source.MaintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMaintenanceWindow() to populate field MaintenanceWindow")
		}
		server.MaintenanceWindow = &maintenanceWindow
	} else {
		server.MaintenanceWindow = nil
	}

	// Network
	if source.Network != nil {
		var network Network
		err := network.AssignPropertiesFromNetwork(source.Network)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetwork() to populate field Network")
		}
		server.Network = &network
	} else {
		server.Network = nil
	}

	// Owner
	server.Owner = source.Owner.Copy()

	// PointInTimeUTC
	if source.PointInTimeUTC != nil {
		pointInTimeUTC := *source.PointInTimeUTC
		server.PointInTimeUTC = &pointInTimeUTC
	} else {
		server.PointInTimeUTC = nil
	}

	// PropertiesTags
	server.PropertiesTags = genruntime.CloneMapOfStringToString(source.PropertiesTags)

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		server.Sku = &sku
	} else {
		server.Sku = nil
	}

	// SourceServerResourceId
	server.SourceServerResourceId = genruntime.ClonePointerToString(source.SourceServerResourceId)

	// Storage
	if source.Storage != nil {
		var storage Storage
		err := storage.AssignPropertiesFromStorage(source.Storage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorage() to populate field Storage")
		}
		server.Storage = &storage
	} else {
		server.Storage = nil
	}

	// Tags
	server.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Version
	if source.Version != nil {
		version := ServerVersion(*source.Version)
		server.Version = &version
	} else {
		server.Version = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFlexibleServer_Spec populates the provided destination FlexibleServer_Spec from our FlexibleServer_Spec
func (server *FlexibleServer_Spec) AssignPropertiesToFlexibleServer_Spec(destination *v1alpha1api20210601storage.FlexibleServer_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdministratorLogin
	destination.AdministratorLogin = genruntime.ClonePointerToString(server.AdministratorLogin)

	// AdministratorLoginPassword
	if server.AdministratorLoginPassword != nil {
		administratorLoginPassword := server.AdministratorLoginPassword.Copy()
		destination.AdministratorLoginPassword = &administratorLoginPassword
	} else {
		destination.AdministratorLoginPassword = nil
	}

	// AvailabilityZone
	destination.AvailabilityZone = genruntime.ClonePointerToString(server.AvailabilityZone)

	// AzureName
	destination.AzureName = server.AzureName

	// Backup
	if server.Backup != nil {
		var backup v1alpha1api20210601storage.Backup
		err := server.Backup.AssignPropertiesToBackup(&backup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBackup() to populate field Backup")
		}
		destination.Backup = &backup
	} else {
		destination.Backup = nil
	}

	// CreateMode
	if server.CreateMode != nil {
		createMode := string(*server.CreateMode)
		destination.CreateMode = &createMode
	} else {
		destination.CreateMode = nil
	}

	// HighAvailability
	if server.HighAvailability != nil {
		var highAvailability v1alpha1api20210601storage.HighAvailability
		err := server.HighAvailability.AssignPropertiesToHighAvailability(&highAvailability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHighAvailability() to populate field HighAvailability")
		}
		destination.HighAvailability = &highAvailability
	} else {
		destination.HighAvailability = nil
	}

	// Location
	location := server.Location
	destination.Location = &location

	// MaintenanceWindow
	if server.MaintenanceWindow != nil {
		var maintenanceWindow v1alpha1api20210601storage.MaintenanceWindow
		err := server.MaintenanceWindow.AssignPropertiesToMaintenanceWindow(&maintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMaintenanceWindow() to populate field MaintenanceWindow")
		}
		destination.MaintenanceWindow = &maintenanceWindow
	} else {
		destination.MaintenanceWindow = nil
	}

	// Network
	if server.Network != nil {
		var network v1alpha1api20210601storage.Network
		err := server.Network.AssignPropertiesToNetwork(&network)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetwork() to populate field Network")
		}
		destination.Network = &network
	} else {
		destination.Network = nil
	}

	// OriginalVersion
	destination.OriginalVersion = server.OriginalVersion()

	// Owner
	destination.Owner = server.Owner.Copy()

	// PointInTimeUTC
	if server.PointInTimeUTC != nil {
		pointInTimeUTC := *server.PointInTimeUTC
		destination.PointInTimeUTC = &pointInTimeUTC
	} else {
		destination.PointInTimeUTC = nil
	}

	// PropertiesTags
	destination.PropertiesTags = genruntime.CloneMapOfStringToString(server.PropertiesTags)

	// Sku
	if server.Sku != nil {
		var sku v1alpha1api20210601storage.Sku
		err := server.Sku.AssignPropertiesToSku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SourceServerResourceId
	destination.SourceServerResourceId = genruntime.ClonePointerToString(server.SourceServerResourceId)

	// Storage
	if server.Storage != nil {
		var storage v1alpha1api20210601storage.Storage
		err := server.Storage.AssignPropertiesToStorage(&storage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorage() to populate field Storage")
		}
		destination.Storage = &storage
	} else {
		destination.Storage = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(server.Tags)

	// Version
	if server.Version != nil {
		version := string(*server.Version)
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (server *FlexibleServer_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (server *FlexibleServer_Spec) SetAzureName(azureName string) { server.AzureName = azureName }

type Server_Status struct {
	//AdministratorLogin: The administrator's login name of a server. Can only be
	//specified when the server is being created (and is required for creation).
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	//AvailabilityZone: availability zone information of the server.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	//Backup: Backup properties of a server.
	Backup *Backup_Status `json:"backup,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreateMode: The mode to create a new PostgreSQL server.
	CreateMode *string `json:"createMode,omitempty"`

	//FullyQualifiedDomainName: The fully qualified domain name of a server.
	FullyQualifiedDomainName *string `json:"fullyQualifiedDomainName,omitempty"`

	//HighAvailability: High availability properties of a server.
	HighAvailability *HighAvailability_Status `json:"highAvailability,omitempty"`

	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`

	//Location: The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	//MaintenanceWindow: Maintenance window properties of a server.
	MaintenanceWindow *MaintenanceWindow_Status `json:"maintenanceWindow,omitempty"`

	//MinorVersion: The minor version of the server.
	MinorVersion *string `json:"minorVersion,omitempty"`

	//Name: The name of the resource
	Name *string `json:"name,omitempty"`

	//Network: Network properties of a server.
	Network *Network_Status `json:"network,omitempty"`

	//PointInTimeUTC: Restore point creation time (ISO8601 format), specifying the
	//time to restore from. It's required when 'createMode' is 'PointInTimeRestore'.
	PointInTimeUTC *string `json:"pointInTimeUTC,omitempty"`

	//PropertiesTags: Application-specific metadata in the form of key-value pairs.
	PropertiesTags map[string]string `json:"properties_tags,omitempty"`

	//Sku: The SKU (pricing tier) of the server.
	Sku *Sku_Status `json:"sku,omitempty"`

	//SourceServerResourceId: The source server resource ID to restore from. It's
	//required when 'createMode' is 'PointInTimeRestore'.
	SourceServerResourceId *string `json:"sourceServerResourceId,omitempty"`

	//State: A state of a server that is visible to user.
	State *string `json:"state,omitempty"`

	//Storage: Storage properties of a server.
	Storage *Storage_Status `json:"storage,omitempty"`

	//SystemData: The system metadata relating to this resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
	//"Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`

	//Version: PostgreSQL Server version.
	Version *string `json:"version,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Server_Status{}

// ConvertStatusFrom populates our Server_Status from the provided source
func (server *Server_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210601storage.Server_Status)
	if ok {
		// Populate our instance from source
		return server.AssignPropertiesFromServer_Status(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210601storage.Server_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = server.AssignPropertiesFromServer_Status(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Server_Status
func (server *Server_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210601storage.Server_Status)
	if ok {
		// Populate destination from our instance
		return server.AssignPropertiesToServer_Status(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210601storage.Server_Status{}
	err := server.AssignPropertiesToServer_Status(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Server_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (server *Server_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Server_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (server *Server_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Server_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Server_StatusARM, got %T", armInput)
	}

	// Set property ‘AdministratorLogin’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdministratorLogin != nil {
			administratorLogin := *typedInput.Properties.AdministratorLogin
			server.AdministratorLogin = &administratorLogin
		}
	}

	// Set property ‘AvailabilityZone’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AvailabilityZone != nil {
			availabilityZone := *typedInput.Properties.AvailabilityZone
			server.AvailabilityZone = &availabilityZone
		}
	}

	// Set property ‘Backup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Backup != nil {
			var backup1 Backup_Status
			err := backup1.PopulateFromARM(owner, *typedInput.Properties.Backup)
			if err != nil {
				return err
			}
			backup := backup1
			server.Backup = &backup
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreateMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreateMode != nil {
			createMode := *typedInput.Properties.CreateMode
			server.CreateMode = &createMode
		}
	}

	// Set property ‘FullyQualifiedDomainName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FullyQualifiedDomainName != nil {
			fullyQualifiedDomainName := *typedInput.Properties.FullyQualifiedDomainName
			server.FullyQualifiedDomainName = &fullyQualifiedDomainName
		}
	}

	// Set property ‘HighAvailability’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HighAvailability != nil {
			var highAvailability1 HighAvailability_Status
			err := highAvailability1.PopulateFromARM(owner, *typedInput.Properties.HighAvailability)
			if err != nil {
				return err
			}
			highAvailability := highAvailability1
			server.HighAvailability = &highAvailability
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		server.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		server.Location = &location
	}

	// Set property ‘MaintenanceWindow’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaintenanceWindow != nil {
			var maintenanceWindow1 MaintenanceWindow_Status
			err := maintenanceWindow1.PopulateFromARM(owner, *typedInput.Properties.MaintenanceWindow)
			if err != nil {
				return err
			}
			maintenanceWindow := maintenanceWindow1
			server.MaintenanceWindow = &maintenanceWindow
		}
	}

	// Set property ‘MinorVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinorVersion != nil {
			minorVersion := *typedInput.Properties.MinorVersion
			server.MinorVersion = &minorVersion
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		server.Name = &name
	}

	// Set property ‘Network’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Network != nil {
			var network1 Network_Status
			err := network1.PopulateFromARM(owner, *typedInput.Properties.Network)
			if err != nil {
				return err
			}
			network := network1
			server.Network = &network
		}
	}

	// Set property ‘PointInTimeUTC’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PointInTimeUTC != nil {
			pointInTimeUTC := *typedInput.Properties.PointInTimeUTC
			server.PointInTimeUTC = &pointInTimeUTC
		}
	}

	// Set property ‘PropertiesTags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Tags != nil {
			server.PropertiesTags = make(map[string]string)
			for key, value := range typedInput.Properties.Tags {
				server.PropertiesTags[key] = value
			}
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		server.Sku = &sku
	}

	// Set property ‘SourceServerResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceServerResourceId != nil {
			sourceServerResourceId := *typedInput.Properties.SourceServerResourceId
			server.SourceServerResourceId = &sourceServerResourceId
		}
	}

	// Set property ‘State’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			state := *typedInput.Properties.State
			server.State = &state
		}
	}

	// Set property ‘Storage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Storage != nil {
			var storage1 Storage_Status
			err := storage1.PopulateFromARM(owner, *typedInput.Properties.Storage)
			if err != nil {
				return err
			}
			storage := storage1
			server.Storage = &storage
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		server.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		server.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			server.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		server.Type = &typeVar
	}

	// Set property ‘Version’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Version != nil {
			version := *typedInput.Properties.Version
			server.Version = &version
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromServer_Status populates our Server_Status from the provided source Server_Status
func (server *Server_Status) AssignPropertiesFromServer_Status(source *v1alpha1api20210601storage.Server_Status) error {

	// AdministratorLogin
	server.AdministratorLogin = genruntime.ClonePointerToString(source.AdministratorLogin)

	// AvailabilityZone
	server.AvailabilityZone = genruntime.ClonePointerToString(source.AvailabilityZone)

	// Backup
	if source.Backup != nil {
		var backup Backup_Status
		err := backup.AssignPropertiesFromBackup_Status(source.Backup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBackup_Status() to populate field Backup")
		}
		server.Backup = &backup
	} else {
		server.Backup = nil
	}

	// Conditions
	server.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreateMode
	server.CreateMode = genruntime.ClonePointerToString(source.CreateMode)

	// FullyQualifiedDomainName
	server.FullyQualifiedDomainName = genruntime.ClonePointerToString(source.FullyQualifiedDomainName)

	// HighAvailability
	if source.HighAvailability != nil {
		var highAvailability HighAvailability_Status
		err := highAvailability.AssignPropertiesFromHighAvailability_Status(source.HighAvailability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromHighAvailability_Status() to populate field HighAvailability")
		}
		server.HighAvailability = &highAvailability
	} else {
		server.HighAvailability = nil
	}

	// Id
	server.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	server.Location = genruntime.ClonePointerToString(source.Location)

	// MaintenanceWindow
	if source.MaintenanceWindow != nil {
		var maintenanceWindow MaintenanceWindow_Status
		err := maintenanceWindow.AssignPropertiesFromMaintenanceWindow_Status(source.MaintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromMaintenanceWindow_Status() to populate field MaintenanceWindow")
		}
		server.MaintenanceWindow = &maintenanceWindow
	} else {
		server.MaintenanceWindow = nil
	}

	// MinorVersion
	server.MinorVersion = genruntime.ClonePointerToString(source.MinorVersion)

	// Name
	server.Name = genruntime.ClonePointerToString(source.Name)

	// Network
	if source.Network != nil {
		var network Network_Status
		err := network.AssignPropertiesFromNetwork_Status(source.Network)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetwork_Status() to populate field Network")
		}
		server.Network = &network
	} else {
		server.Network = nil
	}

	// PointInTimeUTC
	server.PointInTimeUTC = genruntime.ClonePointerToString(source.PointInTimeUTC)

	// PropertiesTags
	server.PropertiesTags = genruntime.CloneMapOfStringToString(source.PropertiesTags)

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSku_Status(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku_Status() to populate field Sku")
		}
		server.Sku = &sku
	} else {
		server.Sku = nil
	}

	// SourceServerResourceId
	server.SourceServerResourceId = genruntime.ClonePointerToString(source.SourceServerResourceId)

	// State
	server.State = genruntime.ClonePointerToString(source.State)

	// Storage
	if source.Storage != nil {
		var storage Storage_Status
		err := storage.AssignPropertiesFromStorage_Status(source.Storage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStorage_Status() to populate field Storage")
		}
		server.Storage = &storage
	} else {
		server.Storage = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemData_Status(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemData_Status() to populate field SystemData")
		}
		server.SystemData = &systemDatum
	} else {
		server.SystemData = nil
	}

	// Tags
	server.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	server.Type = genruntime.ClonePointerToString(source.Type)

	// Version
	server.Version = genruntime.ClonePointerToString(source.Version)

	// No error
	return nil
}

// AssignPropertiesToServer_Status populates the provided destination Server_Status from our Server_Status
func (server *Server_Status) AssignPropertiesToServer_Status(destination *v1alpha1api20210601storage.Server_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdministratorLogin
	destination.AdministratorLogin = genruntime.ClonePointerToString(server.AdministratorLogin)

	// AvailabilityZone
	destination.AvailabilityZone = genruntime.ClonePointerToString(server.AvailabilityZone)

	// Backup
	if server.Backup != nil {
		var backup v1alpha1api20210601storage.Backup_Status
		err := server.Backup.AssignPropertiesToBackup_Status(&backup)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBackup_Status() to populate field Backup")
		}
		destination.Backup = &backup
	} else {
		destination.Backup = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(server.Conditions)

	// CreateMode
	destination.CreateMode = genruntime.ClonePointerToString(server.CreateMode)

	// FullyQualifiedDomainName
	destination.FullyQualifiedDomainName = genruntime.ClonePointerToString(server.FullyQualifiedDomainName)

	// HighAvailability
	if server.HighAvailability != nil {
		var highAvailability v1alpha1api20210601storage.HighAvailability_Status
		err := server.HighAvailability.AssignPropertiesToHighAvailability_Status(&highAvailability)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToHighAvailability_Status() to populate field HighAvailability")
		}
		destination.HighAvailability = &highAvailability
	} else {
		destination.HighAvailability = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(server.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(server.Location)

	// MaintenanceWindow
	if server.MaintenanceWindow != nil {
		var maintenanceWindow v1alpha1api20210601storage.MaintenanceWindow_Status
		err := server.MaintenanceWindow.AssignPropertiesToMaintenanceWindow_Status(&maintenanceWindow)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToMaintenanceWindow_Status() to populate field MaintenanceWindow")
		}
		destination.MaintenanceWindow = &maintenanceWindow
	} else {
		destination.MaintenanceWindow = nil
	}

	// MinorVersion
	destination.MinorVersion = genruntime.ClonePointerToString(server.MinorVersion)

	// Name
	destination.Name = genruntime.ClonePointerToString(server.Name)

	// Network
	if server.Network != nil {
		var network v1alpha1api20210601storage.Network_Status
		err := server.Network.AssignPropertiesToNetwork_Status(&network)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetwork_Status() to populate field Network")
		}
		destination.Network = &network
	} else {
		destination.Network = nil
	}

	// PointInTimeUTC
	destination.PointInTimeUTC = genruntime.ClonePointerToString(server.PointInTimeUTC)

	// PropertiesTags
	destination.PropertiesTags = genruntime.CloneMapOfStringToString(server.PropertiesTags)

	// Sku
	if server.Sku != nil {
		var sku v1alpha1api20210601storage.Sku_Status
		err := server.Sku.AssignPropertiesToSku_Status(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSku_Status() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SourceServerResourceId
	destination.SourceServerResourceId = genruntime.ClonePointerToString(server.SourceServerResourceId)

	// State
	destination.State = genruntime.ClonePointerToString(server.State)

	// Storage
	if server.Storage != nil {
		var storage v1alpha1api20210601storage.Storage_Status
		err := server.Storage.AssignPropertiesToStorage_Status(&storage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStorage_Status() to populate field Storage")
		}
		destination.Storage = &storage
	} else {
		destination.Storage = nil
	}

	// SystemData
	if server.SystemData != nil {
		var systemDatum v1alpha1api20210601storage.SystemData_Status
		err := server.SystemData.AssignPropertiesToSystemData_Status(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemData_Status() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(server.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(server.Type)

	// Version
	destination.Version = genruntime.ClonePointerToString(server.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Backup struct {
	//BackupRetentionDays: Backup retention days for the server.
	BackupRetentionDays *int `json:"backupRetentionDays,omitempty"`

	//GeoRedundantBackup: A value indicating whether Geo-Redundant backup is enabled
	//on the server.
	GeoRedundantBackup *BackupGeoRedundantBackup `json:"geoRedundantBackup,omitempty"`
}

var _ genruntime.ARMTransformer = &Backup{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (backup *Backup) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if backup == nil {
		return nil, nil
	}
	var result BackupARM

	// Set property ‘BackupRetentionDays’:
	if backup.BackupRetentionDays != nil {
		backupRetentionDays := *backup.BackupRetentionDays
		result.BackupRetentionDays = &backupRetentionDays
	}

	// Set property ‘GeoRedundantBackup’:
	if backup.GeoRedundantBackup != nil {
		geoRedundantBackup := *backup.GeoRedundantBackup
		result.GeoRedundantBackup = &geoRedundantBackup
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backup *Backup) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BackupARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backup *Backup) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BackupARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BackupARM, got %T", armInput)
	}

	// Set property ‘BackupRetentionDays’:
	if typedInput.BackupRetentionDays != nil {
		backupRetentionDays := *typedInput.BackupRetentionDays
		backup.BackupRetentionDays = &backupRetentionDays
	}

	// Set property ‘GeoRedundantBackup’:
	if typedInput.GeoRedundantBackup != nil {
		geoRedundantBackup := *typedInput.GeoRedundantBackup
		backup.GeoRedundantBackup = &geoRedundantBackup
	}

	// No error
	return nil
}

// AssignPropertiesFromBackup populates our Backup from the provided source Backup
func (backup *Backup) AssignPropertiesFromBackup(source *v1alpha1api20210601storage.Backup) error {

	// BackupRetentionDays
	backup.BackupRetentionDays = genruntime.ClonePointerToInt(source.BackupRetentionDays)

	// GeoRedundantBackup
	if source.GeoRedundantBackup != nil {
		geoRedundantBackup := BackupGeoRedundantBackup(*source.GeoRedundantBackup)
		backup.GeoRedundantBackup = &geoRedundantBackup
	} else {
		backup.GeoRedundantBackup = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBackup populates the provided destination Backup from our Backup
func (backup *Backup) AssignPropertiesToBackup(destination *v1alpha1api20210601storage.Backup) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BackupRetentionDays
	destination.BackupRetentionDays = genruntime.ClonePointerToInt(backup.BackupRetentionDays)

	// GeoRedundantBackup
	if backup.GeoRedundantBackup != nil {
		geoRedundantBackup := string(*backup.GeoRedundantBackup)
		destination.GeoRedundantBackup = &geoRedundantBackup
	} else {
		destination.GeoRedundantBackup = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Backup_Status struct {
	//BackupRetentionDays: Backup retention days for the server.
	BackupRetentionDays *int `json:"backupRetentionDays,omitempty"`

	//EarliestRestoreDate: The earliest restore point time (ISO8601 format) for server.
	EarliestRestoreDate *string `json:"earliestRestoreDate,omitempty"`

	//GeoRedundantBackup: A value indicating whether Geo-Redundant backup is enabled
	//on the server.
	GeoRedundantBackup *string `json:"geoRedundantBackup,omitempty"`
}

var _ genruntime.FromARMConverter = &Backup_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backup *Backup_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Backup_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backup *Backup_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Backup_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Backup_StatusARM, got %T", armInput)
	}

	// Set property ‘BackupRetentionDays’:
	if typedInput.BackupRetentionDays != nil {
		backupRetentionDays := *typedInput.BackupRetentionDays
		backup.BackupRetentionDays = &backupRetentionDays
	}

	// Set property ‘EarliestRestoreDate’:
	if typedInput.EarliestRestoreDate != nil {
		earliestRestoreDate := *typedInput.EarliestRestoreDate
		backup.EarliestRestoreDate = &earliestRestoreDate
	}

	// Set property ‘GeoRedundantBackup’:
	if typedInput.GeoRedundantBackup != nil {
		geoRedundantBackup := *typedInput.GeoRedundantBackup
		backup.GeoRedundantBackup = &geoRedundantBackup
	}

	// No error
	return nil
}

// AssignPropertiesFromBackup_Status populates our Backup_Status from the provided source Backup_Status
func (backup *Backup_Status) AssignPropertiesFromBackup_Status(source *v1alpha1api20210601storage.Backup_Status) error {

	// BackupRetentionDays
	backup.BackupRetentionDays = genruntime.ClonePointerToInt(source.BackupRetentionDays)

	// EarliestRestoreDate
	backup.EarliestRestoreDate = genruntime.ClonePointerToString(source.EarliestRestoreDate)

	// GeoRedundantBackup
	backup.GeoRedundantBackup = genruntime.ClonePointerToString(source.GeoRedundantBackup)

	// No error
	return nil
}

// AssignPropertiesToBackup_Status populates the provided destination Backup_Status from our Backup_Status
func (backup *Backup_Status) AssignPropertiesToBackup_Status(destination *v1alpha1api20210601storage.Backup_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BackupRetentionDays
	destination.BackupRetentionDays = genruntime.ClonePointerToInt(backup.BackupRetentionDays)

	// EarliestRestoreDate
	destination.EarliestRestoreDate = genruntime.ClonePointerToString(backup.EarliestRestoreDate)

	// GeoRedundantBackup
	destination.GeoRedundantBackup = genruntime.ClonePointerToString(backup.GeoRedundantBackup)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HighAvailability struct {
	//Mode: The HA mode for the server.
	Mode *HighAvailabilityMode `json:"mode,omitempty"`

	//StandbyAvailabilityZone: availability zone information of the standby.
	StandbyAvailabilityZone *string `json:"standbyAvailabilityZone,omitempty"`
}

var _ genruntime.ARMTransformer = &HighAvailability{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (availability *HighAvailability) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if availability == nil {
		return nil, nil
	}
	var result HighAvailabilityARM

	// Set property ‘Mode’:
	if availability.Mode != nil {
		mode := *availability.Mode
		result.Mode = &mode
	}

	// Set property ‘StandbyAvailabilityZone’:
	if availability.StandbyAvailabilityZone != nil {
		standbyAvailabilityZone := *availability.StandbyAvailabilityZone
		result.StandbyAvailabilityZone = &standbyAvailabilityZone
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (availability *HighAvailability) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HighAvailabilityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (availability *HighAvailability) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HighAvailabilityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HighAvailabilityARM, got %T", armInput)
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		availability.Mode = &mode
	}

	// Set property ‘StandbyAvailabilityZone’:
	if typedInput.StandbyAvailabilityZone != nil {
		standbyAvailabilityZone := *typedInput.StandbyAvailabilityZone
		availability.StandbyAvailabilityZone = &standbyAvailabilityZone
	}

	// No error
	return nil
}

// AssignPropertiesFromHighAvailability populates our HighAvailability from the provided source HighAvailability
func (availability *HighAvailability) AssignPropertiesFromHighAvailability(source *v1alpha1api20210601storage.HighAvailability) error {

	// Mode
	if source.Mode != nil {
		mode := HighAvailabilityMode(*source.Mode)
		availability.Mode = &mode
	} else {
		availability.Mode = nil
	}

	// StandbyAvailabilityZone
	availability.StandbyAvailabilityZone = genruntime.ClonePointerToString(source.StandbyAvailabilityZone)

	// No error
	return nil
}

// AssignPropertiesToHighAvailability populates the provided destination HighAvailability from our HighAvailability
func (availability *HighAvailability) AssignPropertiesToHighAvailability(destination *v1alpha1api20210601storage.HighAvailability) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Mode
	if availability.Mode != nil {
		mode := string(*availability.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// StandbyAvailabilityZone
	destination.StandbyAvailabilityZone = genruntime.ClonePointerToString(availability.StandbyAvailabilityZone)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HighAvailability_Status struct {
	//Mode: The HA mode for the server.
	Mode *string `json:"mode,omitempty"`

	//StandbyAvailabilityZone: availability zone information of the standby.
	StandbyAvailabilityZone *string `json:"standbyAvailabilityZone,omitempty"`

	//State: A state of a HA server that is visible to user.
	State *string `json:"state,omitempty"`
}

var _ genruntime.FromARMConverter = &HighAvailability_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (availability *HighAvailability_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HighAvailability_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (availability *HighAvailability_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HighAvailability_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HighAvailability_StatusARM, got %T", armInput)
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		availability.Mode = &mode
	}

	// Set property ‘StandbyAvailabilityZone’:
	if typedInput.StandbyAvailabilityZone != nil {
		standbyAvailabilityZone := *typedInput.StandbyAvailabilityZone
		availability.StandbyAvailabilityZone = &standbyAvailabilityZone
	}

	// Set property ‘State’:
	if typedInput.State != nil {
		state := *typedInput.State
		availability.State = &state
	}

	// No error
	return nil
}

// AssignPropertiesFromHighAvailability_Status populates our HighAvailability_Status from the provided source HighAvailability_Status
func (availability *HighAvailability_Status) AssignPropertiesFromHighAvailability_Status(source *v1alpha1api20210601storage.HighAvailability_Status) error {

	// Mode
	availability.Mode = genruntime.ClonePointerToString(source.Mode)

	// StandbyAvailabilityZone
	availability.StandbyAvailabilityZone = genruntime.ClonePointerToString(source.StandbyAvailabilityZone)

	// State
	availability.State = genruntime.ClonePointerToString(source.State)

	// No error
	return nil
}

// AssignPropertiesToHighAvailability_Status populates the provided destination HighAvailability_Status from our HighAvailability_Status
func (availability *HighAvailability_Status) AssignPropertiesToHighAvailability_Status(destination *v1alpha1api20210601storage.HighAvailability_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Mode
	destination.Mode = genruntime.ClonePointerToString(availability.Mode)

	// StandbyAvailabilityZone
	destination.StandbyAvailabilityZone = genruntime.ClonePointerToString(availability.StandbyAvailabilityZone)

	// State
	destination.State = genruntime.ClonePointerToString(availability.State)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MaintenanceWindow struct {
	//CustomWindow: indicates whether custom window is enabled or disabled
	CustomWindow *string `json:"customWindow,omitempty"`

	//DayOfWeek: day of week for maintenance window
	DayOfWeek *int `json:"dayOfWeek,omitempty"`

	//StartHour: start hour for maintenance window
	StartHour *int `json:"startHour,omitempty"`

	//StartMinute: start minute for maintenance window
	StartMinute *int `json:"startMinute,omitempty"`
}

var _ genruntime.ARMTransformer = &MaintenanceWindow{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (window *MaintenanceWindow) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if window == nil {
		return nil, nil
	}
	var result MaintenanceWindowARM

	// Set property ‘CustomWindow’:
	if window.CustomWindow != nil {
		customWindow := *window.CustomWindow
		result.CustomWindow = &customWindow
	}

	// Set property ‘DayOfWeek’:
	if window.DayOfWeek != nil {
		dayOfWeek := *window.DayOfWeek
		result.DayOfWeek = &dayOfWeek
	}

	// Set property ‘StartHour’:
	if window.StartHour != nil {
		startHour := *window.StartHour
		result.StartHour = &startHour
	}

	// Set property ‘StartMinute’:
	if window.StartMinute != nil {
		startMinute := *window.StartMinute
		result.StartMinute = &startMinute
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (window *MaintenanceWindow) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MaintenanceWindowARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (window *MaintenanceWindow) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MaintenanceWindowARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MaintenanceWindowARM, got %T", armInput)
	}

	// Set property ‘CustomWindow’:
	if typedInput.CustomWindow != nil {
		customWindow := *typedInput.CustomWindow
		window.CustomWindow = &customWindow
	}

	// Set property ‘DayOfWeek’:
	if typedInput.DayOfWeek != nil {
		dayOfWeek := *typedInput.DayOfWeek
		window.DayOfWeek = &dayOfWeek
	}

	// Set property ‘StartHour’:
	if typedInput.StartHour != nil {
		startHour := *typedInput.StartHour
		window.StartHour = &startHour
	}

	// Set property ‘StartMinute’:
	if typedInput.StartMinute != nil {
		startMinute := *typedInput.StartMinute
		window.StartMinute = &startMinute
	}

	// No error
	return nil
}

// AssignPropertiesFromMaintenanceWindow populates our MaintenanceWindow from the provided source MaintenanceWindow
func (window *MaintenanceWindow) AssignPropertiesFromMaintenanceWindow(source *v1alpha1api20210601storage.MaintenanceWindow) error {

	// CustomWindow
	window.CustomWindow = genruntime.ClonePointerToString(source.CustomWindow)

	// DayOfWeek
	window.DayOfWeek = genruntime.ClonePointerToInt(source.DayOfWeek)

	// StartHour
	window.StartHour = genruntime.ClonePointerToInt(source.StartHour)

	// StartMinute
	window.StartMinute = genruntime.ClonePointerToInt(source.StartMinute)

	// No error
	return nil
}

// AssignPropertiesToMaintenanceWindow populates the provided destination MaintenanceWindow from our MaintenanceWindow
func (window *MaintenanceWindow) AssignPropertiesToMaintenanceWindow(destination *v1alpha1api20210601storage.MaintenanceWindow) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomWindow
	destination.CustomWindow = genruntime.ClonePointerToString(window.CustomWindow)

	// DayOfWeek
	destination.DayOfWeek = genruntime.ClonePointerToInt(window.DayOfWeek)

	// StartHour
	destination.StartHour = genruntime.ClonePointerToInt(window.StartHour)

	// StartMinute
	destination.StartMinute = genruntime.ClonePointerToInt(window.StartMinute)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MaintenanceWindow_Status struct {
	//CustomWindow: indicates whether custom window is enabled or disabled
	CustomWindow *string `json:"customWindow,omitempty"`

	//DayOfWeek: day of week for maintenance window
	DayOfWeek *int `json:"dayOfWeek,omitempty"`

	//StartHour: start hour for maintenance window
	StartHour *int `json:"startHour,omitempty"`

	//StartMinute: start minute for maintenance window
	StartMinute *int `json:"startMinute,omitempty"`
}

var _ genruntime.FromARMConverter = &MaintenanceWindow_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (window *MaintenanceWindow_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &MaintenanceWindow_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (window *MaintenanceWindow_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MaintenanceWindow_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MaintenanceWindow_StatusARM, got %T", armInput)
	}

	// Set property ‘CustomWindow’:
	if typedInput.CustomWindow != nil {
		customWindow := *typedInput.CustomWindow
		window.CustomWindow = &customWindow
	}

	// Set property ‘DayOfWeek’:
	if typedInput.DayOfWeek != nil {
		dayOfWeek := *typedInput.DayOfWeek
		window.DayOfWeek = &dayOfWeek
	}

	// Set property ‘StartHour’:
	if typedInput.StartHour != nil {
		startHour := *typedInput.StartHour
		window.StartHour = &startHour
	}

	// Set property ‘StartMinute’:
	if typedInput.StartMinute != nil {
		startMinute := *typedInput.StartMinute
		window.StartMinute = &startMinute
	}

	// No error
	return nil
}

// AssignPropertiesFromMaintenanceWindow_Status populates our MaintenanceWindow_Status from the provided source MaintenanceWindow_Status
func (window *MaintenanceWindow_Status) AssignPropertiesFromMaintenanceWindow_Status(source *v1alpha1api20210601storage.MaintenanceWindow_Status) error {

	// CustomWindow
	window.CustomWindow = genruntime.ClonePointerToString(source.CustomWindow)

	// DayOfWeek
	window.DayOfWeek = genruntime.ClonePointerToInt(source.DayOfWeek)

	// StartHour
	window.StartHour = genruntime.ClonePointerToInt(source.StartHour)

	// StartMinute
	window.StartMinute = genruntime.ClonePointerToInt(source.StartMinute)

	// No error
	return nil
}

// AssignPropertiesToMaintenanceWindow_Status populates the provided destination MaintenanceWindow_Status from our MaintenanceWindow_Status
func (window *MaintenanceWindow_Status) AssignPropertiesToMaintenanceWindow_Status(destination *v1alpha1api20210601storage.MaintenanceWindow_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomWindow
	destination.CustomWindow = genruntime.ClonePointerToString(window.CustomWindow)

	// DayOfWeek
	destination.DayOfWeek = genruntime.ClonePointerToInt(window.DayOfWeek)

	// StartHour
	destination.StartHour = genruntime.ClonePointerToInt(window.StartHour)

	// StartMinute
	destination.StartMinute = genruntime.ClonePointerToInt(window.StartMinute)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Network struct {
	//DelegatedSubnetResourceId: delegated subnet arm resource id.
	DelegatedSubnetResourceId *string `json:"delegatedSubnetResourceId,omitempty"`

	//PrivateDnsZoneArmResourceId: private dns zone arm resource id.
	PrivateDnsZoneArmResourceId *string `json:"privateDnsZoneArmResourceId,omitempty"`
}

var _ genruntime.ARMTransformer = &Network{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (network *Network) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if network == nil {
		return nil, nil
	}
	var result NetworkARM

	// Set property ‘DelegatedSubnetResourceId’:
	if network.DelegatedSubnetResourceId != nil {
		delegatedSubnetResourceId := *network.DelegatedSubnetResourceId
		result.DelegatedSubnetResourceId = &delegatedSubnetResourceId
	}

	// Set property ‘PrivateDnsZoneArmResourceId’:
	if network.PrivateDnsZoneArmResourceId != nil {
		privateDnsZoneArmResourceId := *network.PrivateDnsZoneArmResourceId
		result.PrivateDnsZoneArmResourceId = &privateDnsZoneArmResourceId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (network *Network) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (network *Network) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkARM, got %T", armInput)
	}

	// Set property ‘DelegatedSubnetResourceId’:
	if typedInput.DelegatedSubnetResourceId != nil {
		delegatedSubnetResourceId := *typedInput.DelegatedSubnetResourceId
		network.DelegatedSubnetResourceId = &delegatedSubnetResourceId
	}

	// Set property ‘PrivateDnsZoneArmResourceId’:
	if typedInput.PrivateDnsZoneArmResourceId != nil {
		privateDnsZoneArmResourceId := *typedInput.PrivateDnsZoneArmResourceId
		network.PrivateDnsZoneArmResourceId = &privateDnsZoneArmResourceId
	}

	// No error
	return nil
}

// AssignPropertiesFromNetwork populates our Network from the provided source Network
func (network *Network) AssignPropertiesFromNetwork(source *v1alpha1api20210601storage.Network) error {

	// DelegatedSubnetResourceId
	network.DelegatedSubnetResourceId = genruntime.ClonePointerToString(source.DelegatedSubnetResourceId)

	// PrivateDnsZoneArmResourceId
	network.PrivateDnsZoneArmResourceId = genruntime.ClonePointerToString(source.PrivateDnsZoneArmResourceId)

	// No error
	return nil
}

// AssignPropertiesToNetwork populates the provided destination Network from our Network
func (network *Network) AssignPropertiesToNetwork(destination *v1alpha1api20210601storage.Network) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DelegatedSubnetResourceId
	destination.DelegatedSubnetResourceId = genruntime.ClonePointerToString(network.DelegatedSubnetResourceId)

	// PrivateDnsZoneArmResourceId
	destination.PrivateDnsZoneArmResourceId = genruntime.ClonePointerToString(network.PrivateDnsZoneArmResourceId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Network_Status struct {
	//DelegatedSubnetResourceId: delegated subnet arm resource id.
	DelegatedSubnetResourceId *string `json:"delegatedSubnetResourceId,omitempty"`

	//PrivateDnsZoneArmResourceId: private dns zone arm resource id.
	PrivateDnsZoneArmResourceId *string `json:"privateDnsZoneArmResourceId,omitempty"`

	//PublicNetworkAccess: public network access is enabled or not
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`
}

var _ genruntime.FromARMConverter = &Network_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (network *Network_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Network_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (network *Network_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Network_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Network_StatusARM, got %T", armInput)
	}

	// Set property ‘DelegatedSubnetResourceId’:
	if typedInput.DelegatedSubnetResourceId != nil {
		delegatedSubnetResourceId := *typedInput.DelegatedSubnetResourceId
		network.DelegatedSubnetResourceId = &delegatedSubnetResourceId
	}

	// Set property ‘PrivateDnsZoneArmResourceId’:
	if typedInput.PrivateDnsZoneArmResourceId != nil {
		privateDnsZoneArmResourceId := *typedInput.PrivateDnsZoneArmResourceId
		network.PrivateDnsZoneArmResourceId = &privateDnsZoneArmResourceId
	}

	// Set property ‘PublicNetworkAccess’:
	if typedInput.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.PublicNetworkAccess
		network.PublicNetworkAccess = &publicNetworkAccess
	}

	// No error
	return nil
}

// AssignPropertiesFromNetwork_Status populates our Network_Status from the provided source Network_Status
func (network *Network_Status) AssignPropertiesFromNetwork_Status(source *v1alpha1api20210601storage.Network_Status) error {

	// DelegatedSubnetResourceId
	network.DelegatedSubnetResourceId = genruntime.ClonePointerToString(source.DelegatedSubnetResourceId)

	// PrivateDnsZoneArmResourceId
	network.PrivateDnsZoneArmResourceId = genruntime.ClonePointerToString(source.PrivateDnsZoneArmResourceId)

	// PublicNetworkAccess
	network.PublicNetworkAccess = genruntime.ClonePointerToString(source.PublicNetworkAccess)

	// No error
	return nil
}

// AssignPropertiesToNetwork_Status populates the provided destination Network_Status from our Network_Status
func (network *Network_Status) AssignPropertiesToNetwork_Status(destination *v1alpha1api20210601storage.Network_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DelegatedSubnetResourceId
	destination.DelegatedSubnetResourceId = genruntime.ClonePointerToString(network.DelegatedSubnetResourceId)

	// PrivateDnsZoneArmResourceId
	destination.PrivateDnsZoneArmResourceId = genruntime.ClonePointerToString(network.PrivateDnsZoneArmResourceId)

	// PublicNetworkAccess
	destination.PublicNetworkAccess = genruntime.ClonePointerToString(network.PublicNetworkAccess)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Create","Default","PointInTimeRestore","Update"}
type ServerPropertiesCreateMode string

const (
	ServerPropertiesCreateModeCreate             = ServerPropertiesCreateMode("Create")
	ServerPropertiesCreateModeDefault            = ServerPropertiesCreateMode("Default")
	ServerPropertiesCreateModePointInTimeRestore = ServerPropertiesCreateMode("PointInTimeRestore")
	ServerPropertiesCreateModeUpdate             = ServerPropertiesCreateMode("Update")
)

// +kubebuilder:validation:Enum={"11","12","13"}
type ServerVersion string

const (
	ServerVersion11 = ServerVersion("11")
	ServerVersion12 = ServerVersion("12")
	ServerVersion13 = ServerVersion("13")
)

type Sku struct {
	// +kubebuilder:validation:Required
	//Name: The name of the sku, typically, tier + family + cores, e.g.
	//Standard_D4s_v3.
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Tier: The tier of the particular SKU, e.g. Burstable.
	Tier SkuTier `json:"tier"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	var result SkuARM

	// Set property ‘Name’:
	result.Name = sku.Name

	// Set property ‘Tier’:
	result.Tier = sku.Tier
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// Set property ‘Tier’:
	sku.Tier = typedInput.Tier

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v1alpha1api20210601storage.Sku) error {

	// Name
	sku.Name = genruntime.GetOptionalStringValue(source.Name)

	// Tier
	if source.Tier != nil {
		sku.Tier = SkuTier(*source.Tier)
	} else {
		sku.Tier = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v1alpha1api20210601storage.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := sku.Name
	destination.Name = &name

	// Tier
	tier := string(sku.Tier)
	destination.Tier = &tier

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Status struct {
	// +kubebuilder:validation:Required
	//Name: The name of the sku, typically, tier + family + cores, e.g.
	//Standard_D4s_v3.
	Name string `json:"name"`

	// +kubebuilder:validation:Required
	//Tier: The tier of the particular SKU, e.g. Burstable.
	Tier string `json:"tier"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// Set property ‘Tier’:
	sku.Tier = typedInput.Tier

	// No error
	return nil
}

// AssignPropertiesFromSku_Status populates our Sku_Status from the provided source Sku_Status
func (sku *Sku_Status) AssignPropertiesFromSku_Status(source *v1alpha1api20210601storage.Sku_Status) error {

	// Name
	sku.Name = genruntime.GetOptionalStringValue(source.Name)

	// Tier
	sku.Tier = genruntime.GetOptionalStringValue(source.Tier)

	// No error
	return nil
}

// AssignPropertiesToSku_Status populates the provided destination Sku_Status from our Sku_Status
func (sku *Sku_Status) AssignPropertiesToSku_Status(destination *v1alpha1api20210601storage.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := sku.Name
	destination.Name = &name

	// Tier
	tier := sku.Tier
	destination.Tier = &tier

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Storage struct {
	//StorageSizeGB: Max storage allowed for a server.
	StorageSizeGB *int `json:"storageSizeGB,omitempty"`
}

var _ genruntime.ARMTransformer = &Storage{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (storage *Storage) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if storage == nil {
		return nil, nil
	}
	var result StorageARM

	// Set property ‘StorageSizeGB’:
	if storage.StorageSizeGB != nil {
		storageSizeGB := *storage.StorageSizeGB
		result.StorageSizeGB = &storageSizeGB
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storage *Storage) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &StorageARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storage *Storage) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(StorageARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected StorageARM, got %T", armInput)
	}

	// Set property ‘StorageSizeGB’:
	if typedInput.StorageSizeGB != nil {
		storageSizeGB := *typedInput.StorageSizeGB
		storage.StorageSizeGB = &storageSizeGB
	}

	// No error
	return nil
}

// AssignPropertiesFromStorage populates our Storage from the provided source Storage
func (storage *Storage) AssignPropertiesFromStorage(source *v1alpha1api20210601storage.Storage) error {

	// StorageSizeGB
	storage.StorageSizeGB = genruntime.ClonePointerToInt(source.StorageSizeGB)

	// No error
	return nil
}

// AssignPropertiesToStorage populates the provided destination Storage from our Storage
func (storage *Storage) AssignPropertiesToStorage(destination *v1alpha1api20210601storage.Storage) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StorageSizeGB
	destination.StorageSizeGB = genruntime.ClonePointerToInt(storage.StorageSizeGB)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Storage_Status struct {
	//StorageSizeGB: Max storage allowed for a server.
	StorageSizeGB *int `json:"storageSizeGB,omitempty"`
}

var _ genruntime.FromARMConverter = &Storage_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (storage *Storage_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Storage_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (storage *Storage_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Storage_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Storage_StatusARM, got %T", armInput)
	}

	// Set property ‘StorageSizeGB’:
	if typedInput.StorageSizeGB != nil {
		storageSizeGB := *typedInput.StorageSizeGB
		storage.StorageSizeGB = &storageSizeGB
	}

	// No error
	return nil
}

// AssignPropertiesFromStorage_Status populates our Storage_Status from the provided source Storage_Status
func (storage *Storage_Status) AssignPropertiesFromStorage_Status(source *v1alpha1api20210601storage.Storage_Status) error {

	// StorageSizeGB
	storage.StorageSizeGB = genruntime.ClonePointerToInt(source.StorageSizeGB)

	// No error
	return nil
}

// AssignPropertiesToStorage_Status populates the provided destination Storage_Status from our Storage_Status
func (storage *Storage_Status) AssignPropertiesToStorage_Status(destination *v1alpha1api20210601storage.Storage_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StorageSizeGB
	destination.StorageSizeGB = genruntime.ClonePointerToInt(storage.StorageSizeGB)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_Status struct {
	//CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	//CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	//CreatedByType: The type of identity that created the resource.
	CreatedByType *string `json:"createdByType,omitempty"`

	//LastModifiedAt: The timestamp of resource last modification (UTC)
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	//LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	//LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *string `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemData_Status populates our SystemData_Status from the provided source SystemData_Status
func (data *SystemData_Status) AssignPropertiesFromSystemData_Status(source *v1alpha1api20210601storage.SystemData_Status) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	data.CreatedByType = genruntime.ClonePointerToString(source.CreatedByType)

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	data.LastModifiedByType = genruntime.ClonePointerToString(source.LastModifiedByType)

	// No error
	return nil
}

// AssignPropertiesToSystemData_Status populates the provided destination SystemData_Status from our SystemData_Status
func (data *SystemData_Status) AssignPropertiesToSystemData_Status(destination *v1alpha1api20210601storage.SystemData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	destination.CreatedByType = genruntime.ClonePointerToString(data.CreatedByType)

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	destination.LastModifiedByType = genruntime.ClonePointerToString(data.LastModifiedByType)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type BackupGeoRedundantBackup string

const (
	BackupGeoRedundantBackupDisabled = BackupGeoRedundantBackup("Disabled")
	BackupGeoRedundantBackupEnabled  = BackupGeoRedundantBackup("Enabled")
)

// +kubebuilder:validation:Enum={"Disabled","ZoneRedundant"}
type HighAvailabilityMode string

const (
	HighAvailabilityModeDisabled      = HighAvailabilityMode("Disabled")
	HighAvailabilityModeZoneRedundant = HighAvailabilityMode("ZoneRedundant")
)

func init() {
	SchemeBuilder.Register(&FlexibleServer{}, &FlexibleServerList{})
}
