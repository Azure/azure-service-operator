// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1alpha1api20210601storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FlexibleServer_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from FlexibleServer to hub returns original",
		prop.ForAll(RunResourceConversionTestForFlexibleServer, FlexibleServerGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForFlexibleServer tests if a specific instance of FlexibleServer round trips to the hub storage version and back losslessly
func RunResourceConversionTestForFlexibleServer(subject FlexibleServer) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v1alpha1api20210601storage.FlexibleServer
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual FlexibleServer
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_FlexibleServer_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from FlexibleServer to FlexibleServer via AssignPropertiesToFlexibleServer & AssignPropertiesFromFlexibleServer returns original",
		prop.ForAll(RunPropertyAssignmentTestForFlexibleServer, FlexibleServerGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForFlexibleServer tests if a specific instance of FlexibleServer can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForFlexibleServer(subject FlexibleServer) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.FlexibleServer
	err := copied.AssignPropertiesToFlexibleServer(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual FlexibleServer
	err = actual.AssignPropertiesFromFlexibleServer(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_FlexibleServer_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServer via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServer, FlexibleServerGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServer runs a test to see if a specific instance of FlexibleServer round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServer(subject FlexibleServer) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServer
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServer instances for property testing - lazily instantiated by FlexibleServerGenerator()
var flexibleServerGenerator gopter.Gen

// FlexibleServerGenerator returns a generator of FlexibleServer instances for property testing.
func FlexibleServerGenerator() gopter.Gen {
	if flexibleServerGenerator != nil {
		return flexibleServerGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForFlexibleServer(generators)
	flexibleServerGenerator = gen.Struct(reflect.TypeOf(FlexibleServer{}), generators)

	return flexibleServerGenerator
}

// AddRelatedPropertyGeneratorsForFlexibleServer is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServer(gens map[string]gopter.Gen) {
	gens["Spec"] = FlexibleServers_SPECGenerator()
	gens["Status"] = Server_StatusGenerator()
}

func Test_FlexibleServers_SPEC_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from FlexibleServers_SPEC to FlexibleServers_SPEC via AssignPropertiesToFlexibleServers_SPEC & AssignPropertiesFromFlexibleServers_SPEC returns original",
		prop.ForAll(RunPropertyAssignmentTestForFlexibleServers_SPEC, FlexibleServers_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForFlexibleServers_SPEC tests if a specific instance of FlexibleServers_SPEC can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForFlexibleServers_SPEC(subject FlexibleServers_SPEC) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.FlexibleServers_SPEC
	err := copied.AssignPropertiesToFlexibleServers_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual FlexibleServers_SPEC
	err = actual.AssignPropertiesFromFlexibleServers_SPEC(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_FlexibleServers_SPEC_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServers_SPEC via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServers_SPEC, FlexibleServers_SPECGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServers_SPEC runs a test to see if a specific instance of FlexibleServers_SPEC round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServers_SPEC(subject FlexibleServers_SPEC) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServers_SPEC
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServers_SPEC instances for property testing - lazily instantiated by
//FlexibleServers_SPECGenerator()
var flexibleServers_specGenerator gopter.Gen

// FlexibleServers_SPECGenerator returns a generator of FlexibleServers_SPEC instances for property testing.
// We first initialize flexibleServers_specGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlexibleServers_SPECGenerator() gopter.Gen {
	if flexibleServers_specGenerator != nil {
		return flexibleServers_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServers_SPEC(generators)
	flexibleServers_specGenerator = gen.Struct(reflect.TypeOf(FlexibleServers_SPEC{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServers_SPEC(generators)
	AddRelatedPropertyGeneratorsForFlexibleServers_SPEC(generators)
	flexibleServers_specGenerator = gen.Struct(reflect.TypeOf(FlexibleServers_SPEC{}), generators)

	return flexibleServers_specGenerator
}

// AddIndependentPropertyGeneratorsForFlexibleServers_SPEC is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlexibleServers_SPEC(gens map[string]gopter.Gen) {
	gens["AdministratorLogin"] = gen.PtrOf(gen.AlphaString())
	gens["AvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["AzureName"] = gen.AlphaString()
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		ServerProperties_CreateMode_SpecCreate,
		ServerProperties_CreateMode_SpecDefault,
		ServerProperties_CreateMode_SpecPointInTimeRestore,
		ServerProperties_CreateMode_SpecUpdate))
	gens["Location"] = gen.AlphaString()
	gens["PointInTimeUTC"] = gen.PtrOf(gen.AlphaString())
	gens["PropertiesTags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerVersion_Spec11, ServerVersion_Spec12, ServerVersion_Spec13))
}

// AddRelatedPropertyGeneratorsForFlexibleServers_SPEC is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServers_SPEC(gens map[string]gopter.Gen) {
	gens["Backup"] = gen.PtrOf(Backup_SpecGenerator())
	gens["HighAvailability"] = gen.PtrOf(HighAvailability_SpecGenerator())
	gens["MaintenanceWindow"] = gen.PtrOf(MaintenanceWindow_SpecGenerator())
	gens["Network"] = gen.PtrOf(Network_SpecGenerator())
	gens["Sku"] = gen.PtrOf(Sku_SpecGenerator())
	gens["Storage"] = gen.PtrOf(Storage_SpecGenerator())
}

func Test_Server_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Server_Status to Server_Status via AssignPropertiesToServer_Status & AssignPropertiesFromServer_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForServer_Status, Server_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServer_Status tests if a specific instance of Server_Status can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForServer_Status(subject Server_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.Server_Status
	err := copied.AssignPropertiesToServer_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Server_Status
	err = actual.AssignPropertiesFromServer_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Server_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Server_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServer_Status, Server_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServer_Status runs a test to see if a specific instance of Server_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForServer_Status(subject Server_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Server_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Server_Status instances for property testing - lazily instantiated by Server_StatusGenerator()
var server_statusGenerator gopter.Gen

// Server_StatusGenerator returns a generator of Server_Status instances for property testing.
// We first initialize server_statusGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Server_StatusGenerator() gopter.Gen {
	if server_statusGenerator != nil {
		return server_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServer_Status(generators)
	server_statusGenerator = gen.Struct(reflect.TypeOf(Server_Status{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServer_Status(generators)
	AddRelatedPropertyGeneratorsForServer_Status(generators)
	server_statusGenerator = gen.Struct(reflect.TypeOf(Server_Status{}), generators)

	return server_statusGenerator
}

// AddIndependentPropertyGeneratorsForServer_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServer_Status(gens map[string]gopter.Gen) {
	gens["AdministratorLogin"] = gen.PtrOf(gen.AlphaString())
	gens["AvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		ServerProperties_CreateMode_StatusCreate,
		ServerProperties_CreateMode_StatusDefault,
		ServerProperties_CreateMode_StatusPointInTimeRestore,
		ServerProperties_CreateMode_StatusUpdate))
	gens["FullyQualifiedDomainName"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["MinorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PointInTimeUTC"] = gen.PtrOf(gen.AlphaString())
	gens["PropertiesTags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["SourceServerResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(
		ServerProperties_State_StatusDisabled,
		ServerProperties_State_StatusDropping,
		ServerProperties_State_StatusReady,
		ServerProperties_State_StatusStarting,
		ServerProperties_State_StatusStopped,
		ServerProperties_State_StatusStopping,
		ServerProperties_State_StatusUpdating))
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.OneConstOf(ServerVersion_Status11, ServerVersion_Status12, ServerVersion_Status13))
}

// AddRelatedPropertyGeneratorsForServer_Status is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServer_Status(gens map[string]gopter.Gen) {
	gens["Backup"] = gen.PtrOf(Backup_StatusGenerator())
	gens["HighAvailability"] = gen.PtrOf(HighAvailability_StatusGenerator())
	gens["MaintenanceWindow"] = gen.PtrOf(MaintenanceWindow_StatusGenerator())
	gens["Network"] = gen.PtrOf(Network_StatusGenerator())
	gens["Sku"] = gen.PtrOf(Sku_StatusGenerator())
	gens["Storage"] = gen.PtrOf(Storage_StatusGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_StatusGenerator())
}

func Test_Backup_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Backup_Spec to Backup_Spec via AssignPropertiesToBackup_Spec & AssignPropertiesFromBackup_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForBackup_Spec, Backup_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForBackup_Spec tests if a specific instance of Backup_Spec can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForBackup_Spec(subject Backup_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.Backup_Spec
	err := copied.AssignPropertiesToBackup_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Backup_Spec
	err = actual.AssignPropertiesFromBackup_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Backup_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Backup_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackup_Spec, Backup_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackup_Spec runs a test to see if a specific instance of Backup_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForBackup_Spec(subject Backup_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Backup_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Backup_Spec instances for property testing - lazily instantiated by Backup_SpecGenerator()
var backup_specGenerator gopter.Gen

// Backup_SpecGenerator returns a generator of Backup_Spec instances for property testing.
func Backup_SpecGenerator() gopter.Gen {
	if backup_specGenerator != nil {
		return backup_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackup_Spec(generators)
	backup_specGenerator = gen.Struct(reflect.TypeOf(Backup_Spec{}), generators)

	return backup_specGenerator
}

// AddIndependentPropertyGeneratorsForBackup_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackup_Spec(gens map[string]gopter.Gen) {
	gens["BackupRetentionDays"] = gen.PtrOf(gen.Int())
	gens["GeoRedundantBackup"] = gen.PtrOf(gen.OneConstOf(Backup_GeoRedundantBackup_SpecDisabled, Backup_GeoRedundantBackup_SpecEnabled))
}

func Test_Backup_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Backup_Status to Backup_Status via AssignPropertiesToBackup_Status & AssignPropertiesFromBackup_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForBackup_Status, Backup_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForBackup_Status tests if a specific instance of Backup_Status can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForBackup_Status(subject Backup_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.Backup_Status
	err := copied.AssignPropertiesToBackup_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Backup_Status
	err = actual.AssignPropertiesFromBackup_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Backup_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Backup_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackup_Status, Backup_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackup_Status runs a test to see if a specific instance of Backup_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForBackup_Status(subject Backup_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Backup_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Backup_Status instances for property testing - lazily instantiated by Backup_StatusGenerator()
var backup_statusGenerator gopter.Gen

// Backup_StatusGenerator returns a generator of Backup_Status instances for property testing.
func Backup_StatusGenerator() gopter.Gen {
	if backup_statusGenerator != nil {
		return backup_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackup_Status(generators)
	backup_statusGenerator = gen.Struct(reflect.TypeOf(Backup_Status{}), generators)

	return backup_statusGenerator
}

// AddIndependentPropertyGeneratorsForBackup_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackup_Status(gens map[string]gopter.Gen) {
	gens["BackupRetentionDays"] = gen.PtrOf(gen.Int())
	gens["EarliestRestoreDate"] = gen.PtrOf(gen.AlphaString())
	gens["GeoRedundantBackup"] = gen.PtrOf(gen.OneConstOf(Backup_GeoRedundantBackup_StatusDisabled, Backup_GeoRedundantBackup_StatusEnabled))
}

func Test_HighAvailability_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HighAvailability_Spec to HighAvailability_Spec via AssignPropertiesToHighAvailability_Spec & AssignPropertiesFromHighAvailability_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForHighAvailability_Spec, HighAvailability_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHighAvailability_Spec tests if a specific instance of HighAvailability_Spec can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForHighAvailability_Spec(subject HighAvailability_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.HighAvailability_Spec
	err := copied.AssignPropertiesToHighAvailability_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HighAvailability_Spec
	err = actual.AssignPropertiesFromHighAvailability_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HighAvailability_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HighAvailability_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHighAvailability_Spec, HighAvailability_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHighAvailability_Spec runs a test to see if a specific instance of HighAvailability_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForHighAvailability_Spec(subject HighAvailability_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HighAvailability_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HighAvailability_Spec instances for property testing - lazily instantiated by
//HighAvailability_SpecGenerator()
var highAvailability_specGenerator gopter.Gen

// HighAvailability_SpecGenerator returns a generator of HighAvailability_Spec instances for property testing.
func HighAvailability_SpecGenerator() gopter.Gen {
	if highAvailability_specGenerator != nil {
		return highAvailability_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHighAvailability_Spec(generators)
	highAvailability_specGenerator = gen.Struct(reflect.TypeOf(HighAvailability_Spec{}), generators)

	return highAvailability_specGenerator
}

// AddIndependentPropertyGeneratorsForHighAvailability_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHighAvailability_Spec(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(HighAvailability_Mode_SpecDisabled, HighAvailability_Mode_SpecZoneRedundant))
	gens["StandbyAvailabilityZone"] = gen.PtrOf(gen.AlphaString())
}

func Test_HighAvailability_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from HighAvailability_Status to HighAvailability_Status via AssignPropertiesToHighAvailability_Status & AssignPropertiesFromHighAvailability_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForHighAvailability_Status, HighAvailability_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForHighAvailability_Status tests if a specific instance of HighAvailability_Status can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForHighAvailability_Status(subject HighAvailability_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.HighAvailability_Status
	err := copied.AssignPropertiesToHighAvailability_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual HighAvailability_Status
	err = actual.AssignPropertiesFromHighAvailability_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_HighAvailability_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HighAvailability_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHighAvailability_Status, HighAvailability_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHighAvailability_Status runs a test to see if a specific instance of HighAvailability_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForHighAvailability_Status(subject HighAvailability_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HighAvailability_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HighAvailability_Status instances for property testing - lazily instantiated by
//HighAvailability_StatusGenerator()
var highAvailability_statusGenerator gopter.Gen

// HighAvailability_StatusGenerator returns a generator of HighAvailability_Status instances for property testing.
func HighAvailability_StatusGenerator() gopter.Gen {
	if highAvailability_statusGenerator != nil {
		return highAvailability_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHighAvailability_Status(generators)
	highAvailability_statusGenerator = gen.Struct(reflect.TypeOf(HighAvailability_Status{}), generators)

	return highAvailability_statusGenerator
}

// AddIndependentPropertyGeneratorsForHighAvailability_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHighAvailability_Status(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.OneConstOf(HighAvailability_Mode_StatusDisabled, HighAvailability_Mode_StatusZoneRedundant))
	gens["StandbyAvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(
		HighAvailability_State_StatusCreatingStandby,
		HighAvailability_State_StatusFailingOver,
		HighAvailability_State_StatusHealthy,
		HighAvailability_State_StatusNotEnabled,
		HighAvailability_State_StatusRemovingStandby,
		HighAvailability_State_StatusReplicatingData))
}

func Test_MaintenanceWindow_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MaintenanceWindow_Spec to MaintenanceWindow_Spec via AssignPropertiesToMaintenanceWindow_Spec & AssignPropertiesFromMaintenanceWindow_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForMaintenanceWindow_Spec, MaintenanceWindow_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMaintenanceWindow_Spec tests if a specific instance of MaintenanceWindow_Spec can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForMaintenanceWindow_Spec(subject MaintenanceWindow_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.MaintenanceWindow_Spec
	err := copied.AssignPropertiesToMaintenanceWindow_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MaintenanceWindow_Spec
	err = actual.AssignPropertiesFromMaintenanceWindow_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MaintenanceWindow_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MaintenanceWindow_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMaintenanceWindow_Spec, MaintenanceWindow_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMaintenanceWindow_Spec runs a test to see if a specific instance of MaintenanceWindow_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForMaintenanceWindow_Spec(subject MaintenanceWindow_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MaintenanceWindow_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MaintenanceWindow_Spec instances for property testing - lazily instantiated by
//MaintenanceWindow_SpecGenerator()
var maintenanceWindow_specGenerator gopter.Gen

// MaintenanceWindow_SpecGenerator returns a generator of MaintenanceWindow_Spec instances for property testing.
func MaintenanceWindow_SpecGenerator() gopter.Gen {
	if maintenanceWindow_specGenerator != nil {
		return maintenanceWindow_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMaintenanceWindow_Spec(generators)
	maintenanceWindow_specGenerator = gen.Struct(reflect.TypeOf(MaintenanceWindow_Spec{}), generators)

	return maintenanceWindow_specGenerator
}

// AddIndependentPropertyGeneratorsForMaintenanceWindow_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMaintenanceWindow_Spec(gens map[string]gopter.Gen) {
	gens["CustomWindow"] = gen.PtrOf(gen.AlphaString())
	gens["DayOfWeek"] = gen.PtrOf(gen.Int())
	gens["StartHour"] = gen.PtrOf(gen.Int())
	gens["StartMinute"] = gen.PtrOf(gen.Int())
}

func Test_MaintenanceWindow_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from MaintenanceWindow_Status to MaintenanceWindow_Status via AssignPropertiesToMaintenanceWindow_Status & AssignPropertiesFromMaintenanceWindow_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForMaintenanceWindow_Status, MaintenanceWindow_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForMaintenanceWindow_Status tests if a specific instance of MaintenanceWindow_Status can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForMaintenanceWindow_Status(subject MaintenanceWindow_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.MaintenanceWindow_Status
	err := copied.AssignPropertiesToMaintenanceWindow_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual MaintenanceWindow_Status
	err = actual.AssignPropertiesFromMaintenanceWindow_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_MaintenanceWindow_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MaintenanceWindow_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMaintenanceWindow_Status, MaintenanceWindow_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMaintenanceWindow_Status runs a test to see if a specific instance of MaintenanceWindow_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForMaintenanceWindow_Status(subject MaintenanceWindow_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MaintenanceWindow_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MaintenanceWindow_Status instances for property testing - lazily instantiated by
//MaintenanceWindow_StatusGenerator()
var maintenanceWindow_statusGenerator gopter.Gen

// MaintenanceWindow_StatusGenerator returns a generator of MaintenanceWindow_Status instances for property testing.
func MaintenanceWindow_StatusGenerator() gopter.Gen {
	if maintenanceWindow_statusGenerator != nil {
		return maintenanceWindow_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMaintenanceWindow_Status(generators)
	maintenanceWindow_statusGenerator = gen.Struct(reflect.TypeOf(MaintenanceWindow_Status{}), generators)

	return maintenanceWindow_statusGenerator
}

// AddIndependentPropertyGeneratorsForMaintenanceWindow_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMaintenanceWindow_Status(gens map[string]gopter.Gen) {
	gens["CustomWindow"] = gen.PtrOf(gen.AlphaString())
	gens["DayOfWeek"] = gen.PtrOf(gen.Int())
	gens["StartHour"] = gen.PtrOf(gen.Int())
	gens["StartMinute"] = gen.PtrOf(gen.Int())
}

func Test_Network_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Network_Spec to Network_Spec via AssignPropertiesToNetwork_Spec & AssignPropertiesFromNetwork_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForNetwork_Spec, Network_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNetwork_Spec tests if a specific instance of Network_Spec can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForNetwork_Spec(subject Network_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.Network_Spec
	err := copied.AssignPropertiesToNetwork_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Network_Spec
	err = actual.AssignPropertiesFromNetwork_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Network_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Network_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetwork_Spec, Network_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetwork_Spec runs a test to see if a specific instance of Network_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForNetwork_Spec(subject Network_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Network_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Network_Spec instances for property testing - lazily instantiated by Network_SpecGenerator()
var network_specGenerator gopter.Gen

// Network_SpecGenerator returns a generator of Network_Spec instances for property testing.
func Network_SpecGenerator() gopter.Gen {
	if network_specGenerator != nil {
		return network_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	network_specGenerator = gen.Struct(reflect.TypeOf(Network_Spec{}), generators)

	return network_specGenerator
}

func Test_Network_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Network_Status to Network_Status via AssignPropertiesToNetwork_Status & AssignPropertiesFromNetwork_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForNetwork_Status, Network_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForNetwork_Status tests if a specific instance of Network_Status can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForNetwork_Status(subject Network_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.Network_Status
	err := copied.AssignPropertiesToNetwork_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Network_Status
	err = actual.AssignPropertiesFromNetwork_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Network_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Network_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetwork_Status, Network_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetwork_Status runs a test to see if a specific instance of Network_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForNetwork_Status(subject Network_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Network_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Network_Status instances for property testing - lazily instantiated by Network_StatusGenerator()
var network_statusGenerator gopter.Gen

// Network_StatusGenerator returns a generator of Network_Status instances for property testing.
func Network_StatusGenerator() gopter.Gen {
	if network_statusGenerator != nil {
		return network_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetwork_Status(generators)
	network_statusGenerator = gen.Struct(reflect.TypeOf(Network_Status{}), generators)

	return network_statusGenerator
}

// AddIndependentPropertyGeneratorsForNetwork_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetwork_Status(gens map[string]gopter.Gen) {
	gens["DelegatedSubnetResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateDnsZoneArmResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(Network_PublicNetworkAccess_StatusDisabled, Network_PublicNetworkAccess_StatusEnabled))
}

func Test_Sku_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Sku_Spec to Sku_Spec via AssignPropertiesToSku_Spec & AssignPropertiesFromSku_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForSku_Spec, Sku_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSku_Spec tests if a specific instance of Sku_Spec can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForSku_Spec(subject Sku_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.Sku_Spec
	err := copied.AssignPropertiesToSku_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Sku_Spec
	err = actual.AssignPropertiesFromSku_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Sku_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_Spec, Sku_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_Spec runs a test to see if a specific instance of Sku_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_Spec(subject Sku_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_Spec instances for property testing - lazily instantiated by Sku_SpecGenerator()
var sku_specGenerator gopter.Gen

// Sku_SpecGenerator returns a generator of Sku_Spec instances for property testing.
func Sku_SpecGenerator() gopter.Gen {
	if sku_specGenerator != nil {
		return sku_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_Spec(generators)
	sku_specGenerator = gen.Struct(reflect.TypeOf(Sku_Spec{}), generators)

	return sku_specGenerator
}

// AddIndependentPropertyGeneratorsForSku_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
	gens["Tier"] = gen.OneConstOf(Sku_Tier_SpecBurstable, Sku_Tier_SpecGeneralPurpose, Sku_Tier_SpecMemoryOptimized)
}

func Test_Sku_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Sku_Status to Sku_Status via AssignPropertiesToSku_Status & AssignPropertiesFromSku_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForSku_Status, Sku_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSku_Status tests if a specific instance of Sku_Status can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForSku_Status(subject Sku_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.Sku_Status
	err := copied.AssignPropertiesToSku_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Sku_Status
	err = actual.AssignPropertiesFromSku_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Sku_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_Status, Sku_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_Status runs a test to see if a specific instance of Sku_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_Status(subject Sku_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_Status instances for property testing - lazily instantiated by Sku_StatusGenerator()
var sku_statusGenerator gopter.Gen

// Sku_StatusGenerator returns a generator of Sku_Status instances for property testing.
func Sku_StatusGenerator() gopter.Gen {
	if sku_statusGenerator != nil {
		return sku_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_Status(generators)
	sku_statusGenerator = gen.Struct(reflect.TypeOf(Sku_Status{}), generators)

	return sku_statusGenerator
}

// AddIndependentPropertyGeneratorsForSku_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_Status(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
	gens["Tier"] = gen.OneConstOf(Sku_Tier_StatusBurstable, Sku_Tier_StatusGeneralPurpose, Sku_Tier_StatusMemoryOptimized)
}

func Test_Storage_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Storage_Spec to Storage_Spec via AssignPropertiesToStorage_Spec & AssignPropertiesFromStorage_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForStorage_Spec, Storage_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForStorage_Spec tests if a specific instance of Storage_Spec can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForStorage_Spec(subject Storage_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.Storage_Spec
	err := copied.AssignPropertiesToStorage_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Storage_Spec
	err = actual.AssignPropertiesFromStorage_Spec(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Storage_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Storage_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorage_Spec, Storage_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorage_Spec runs a test to see if a specific instance of Storage_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForStorage_Spec(subject Storage_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Storage_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Storage_Spec instances for property testing - lazily instantiated by Storage_SpecGenerator()
var storage_specGenerator gopter.Gen

// Storage_SpecGenerator returns a generator of Storage_Spec instances for property testing.
func Storage_SpecGenerator() gopter.Gen {
	if storage_specGenerator != nil {
		return storage_specGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorage_Spec(generators)
	storage_specGenerator = gen.Struct(reflect.TypeOf(Storage_Spec{}), generators)

	return storage_specGenerator
}

// AddIndependentPropertyGeneratorsForStorage_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorage_Spec(gens map[string]gopter.Gen) {
	gens["StorageSizeGB"] = gen.PtrOf(gen.Int())
}

func Test_Storage_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Storage_Status to Storage_Status via AssignPropertiesToStorage_Status & AssignPropertiesFromStorage_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForStorage_Status, Storage_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForStorage_Status tests if a specific instance of Storage_Status can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForStorage_Status(subject Storage_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.Storage_Status
	err := copied.AssignPropertiesToStorage_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Storage_Status
	err = actual.AssignPropertiesFromStorage_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Storage_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Storage_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorage_Status, Storage_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorage_Status runs a test to see if a specific instance of Storage_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForStorage_Status(subject Storage_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Storage_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Storage_Status instances for property testing - lazily instantiated by Storage_StatusGenerator()
var storage_statusGenerator gopter.Gen

// Storage_StatusGenerator returns a generator of Storage_Status instances for property testing.
func Storage_StatusGenerator() gopter.Gen {
	if storage_statusGenerator != nil {
		return storage_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorage_Status(generators)
	storage_statusGenerator = gen.Struct(reflect.TypeOf(Storage_Status{}), generators)

	return storage_statusGenerator
}

// AddIndependentPropertyGeneratorsForStorage_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorage_Status(gens map[string]gopter.Gen) {
	gens["StorageSizeGB"] = gen.PtrOf(gen.Int())
}

func Test_SystemData_Status_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SystemData_Status to SystemData_Status via AssignPropertiesToSystemData_Status & AssignPropertiesFromSystemData_Status returns original",
		prop.ForAll(RunPropertyAssignmentTestForSystemData_Status, SystemData_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSystemData_Status tests if a specific instance of SystemData_Status can be assigned to v1alpha1api20210601storage and back losslessly
func RunPropertyAssignmentTestForSystemData_Status(subject SystemData_Status) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v1alpha1api20210601storage.SystemData_Status
	err := copied.AssignPropertiesToSystemData_Status(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SystemData_Status
	err = actual.AssignPropertiesFromSystemData_Status(&other)
	if err != nil {
		return err.Error()
	}

	//Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SystemData_Status_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_Status via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_Status, SystemData_StatusGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_Status runs a test to see if a specific instance of SystemData_Status round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_Status(subject SystemData_Status) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_Status
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_Status instances for property testing - lazily instantiated by SystemData_StatusGenerator()
var systemData_statusGenerator gopter.Gen

// SystemData_StatusGenerator returns a generator of SystemData_Status instances for property testing.
func SystemData_StatusGenerator() gopter.Gen {
	if systemData_statusGenerator != nil {
		return systemData_statusGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_Status(generators)
	systemData_statusGenerator = gen.Struct(reflect.TypeOf(SystemData_Status{}), generators)

	return systemData_statusGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_Status is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_Status(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_StatusApplication,
		SystemData_CreatedByType_StatusKey,
		SystemData_CreatedByType_StatusManagedIdentity,
		SystemData_CreatedByType_StatusUser))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_StatusApplication,
		SystemData_LastModifiedByType_StatusKey,
		SystemData_LastModifiedByType_StatusManagedIdentity,
		SystemData_LastModifiedByType_StatusUser))
}
