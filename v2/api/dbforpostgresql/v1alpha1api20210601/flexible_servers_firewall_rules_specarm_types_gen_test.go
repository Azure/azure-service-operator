// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FlexibleServersFirewallRules_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServersFirewallRules_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServersFirewallRulesSPECARM, FlexibleServersFirewallRulesSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServersFirewallRulesSPECARM runs a test to see if a specific instance of FlexibleServersFirewallRules_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServersFirewallRulesSPECARM(subject FlexibleServersFirewallRules_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServersFirewallRules_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServersFirewallRules_SPECARM instances for property testing - lazily instantiated by
//FlexibleServersFirewallRulesSPECARMGenerator()
var flexibleServersFirewallRulesSPECARMGenerator gopter.Gen

// FlexibleServersFirewallRulesSPECARMGenerator returns a generator of FlexibleServersFirewallRules_SPECARM instances for property testing.
// We first initialize flexibleServersFirewallRulesSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlexibleServersFirewallRulesSPECARMGenerator() gopter.Gen {
	if flexibleServersFirewallRulesSPECARMGenerator != nil {
		return flexibleServersFirewallRulesSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersFirewallRulesSPECARM(generators)
	flexibleServersFirewallRulesSPECARMGenerator = gen.Struct(reflect.TypeOf(FlexibleServersFirewallRules_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersFirewallRulesSPECARM(generators)
	AddRelatedPropertyGeneratorsForFlexibleServersFirewallRulesSPECARM(generators)
	flexibleServersFirewallRulesSPECARMGenerator = gen.Struct(reflect.TypeOf(FlexibleServersFirewallRules_SPECARM{}), generators)

	return flexibleServersFirewallRulesSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForFlexibleServersFirewallRulesSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlexibleServersFirewallRulesSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForFlexibleServersFirewallRulesSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServersFirewallRulesSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = FirewallRulePropertiesSpecARMGenerator()
}

func Test_FirewallRuleProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FirewallRuleProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFirewallRulePropertiesSpecARM, FirewallRulePropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFirewallRulePropertiesSpecARM runs a test to see if a specific instance of FirewallRuleProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFirewallRulePropertiesSpecARM(subject FirewallRuleProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FirewallRuleProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FirewallRuleProperties_SpecARM instances for property testing - lazily instantiated by
//FirewallRulePropertiesSpecARMGenerator()
var firewallRulePropertiesSpecARMGenerator gopter.Gen

// FirewallRulePropertiesSpecARMGenerator returns a generator of FirewallRuleProperties_SpecARM instances for property testing.
func FirewallRulePropertiesSpecARMGenerator() gopter.Gen {
	if firewallRulePropertiesSpecARMGenerator != nil {
		return firewallRulePropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFirewallRulePropertiesSpecARM(generators)
	firewallRulePropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(FirewallRuleProperties_SpecARM{}), generators)

	return firewallRulePropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForFirewallRulePropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFirewallRulePropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["EndIpAddress"] = gen.AlphaString()
	gens["StartIpAddress"] = gen.AlphaString()
}
