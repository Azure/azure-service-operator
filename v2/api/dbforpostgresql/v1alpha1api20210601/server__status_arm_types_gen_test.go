// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Server_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Server_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServer_StatusARM, Server_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServer_StatusARM runs a test to see if a specific instance of Server_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServer_StatusARM(subject Server_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Server_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Server_StatusARM instances for property testing - lazily instantiated by Server_StatusARMGenerator()
var server_statusARMGenerator gopter.Gen

// Server_StatusARMGenerator returns a generator of Server_StatusARM instances for property testing.
// We first initialize server_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Server_StatusARMGenerator() gopter.Gen {
	if server_statusARMGenerator != nil {
		return server_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServer_StatusARM(generators)
	server_statusARMGenerator = gen.Struct(reflect.TypeOf(Server_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServer_StatusARM(generators)
	AddRelatedPropertyGeneratorsForServer_StatusARM(generators)
	server_statusARMGenerator = gen.Struct(reflect.TypeOf(Server_StatusARM{}), generators)

	return server_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForServer_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServer_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServer_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServer_StatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerProperties_StatusARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_StatusARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_StatusARMGenerator())
}

func Test_ServerProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerProperties_StatusARM, ServerProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerProperties_StatusARM runs a test to see if a specific instance of ServerProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerProperties_StatusARM(subject ServerProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerProperties_StatusARM instances for property testing - lazily instantiated by
//ServerProperties_StatusARMGenerator()
var serverProperties_statusARMGenerator gopter.Gen

// ServerProperties_StatusARMGenerator returns a generator of ServerProperties_StatusARM instances for property testing.
// We first initialize serverProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerProperties_StatusARMGenerator() gopter.Gen {
	if serverProperties_statusARMGenerator != nil {
		return serverProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerProperties_StatusARM(generators)
	serverProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ServerProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForServerProperties_StatusARM(generators)
	serverProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(ServerProperties_StatusARM{}), generators)

	return serverProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForServerProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["AdministratorLogin"] = gen.PtrOf(gen.AlphaString())
	gens["AvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["CreateMode"] = gen.PtrOf(gen.AlphaString())
	gens["FullyQualifiedDomainName"] = gen.PtrOf(gen.AlphaString())
	gens["MinorVersion"] = gen.PtrOf(gen.AlphaString())
	gens["PointInTimeUTC"] = gen.PtrOf(gen.AlphaString())
	gens["SourceServerResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServerProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["Backup"] = gen.PtrOf(Backup_StatusARMGenerator())
	gens["HighAvailability"] = gen.PtrOf(HighAvailability_StatusARMGenerator())
	gens["MaintenanceWindow"] = gen.PtrOf(MaintenanceWindow_StatusARMGenerator())
	gens["Network"] = gen.PtrOf(Network_StatusARMGenerator())
	gens["Storage"] = gen.PtrOf(Storage_StatusARMGenerator())
}

func Test_Sku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_StatusARM, Sku_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_StatusARM runs a test to see if a specific instance of Sku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_StatusARM(subject Sku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_StatusARM instances for property testing - lazily instantiated by Sku_StatusARMGenerator()
var sku_statusARMGenerator gopter.Gen

// Sku_StatusARMGenerator returns a generator of Sku_StatusARM instances for property testing.
func Sku_StatusARMGenerator() gopter.Gen {
	if sku_statusARMGenerator != nil {
		return sku_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_StatusARM(generators)
	sku_statusARMGenerator = gen.Struct(reflect.TypeOf(Sku_StatusARM{}), generators)

	return sku_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_StatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
	gens["Tier"] = gen.AlphaString()
}

func Test_Backup_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Backup_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackup_StatusARM, Backup_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackup_StatusARM runs a test to see if a specific instance of Backup_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackup_StatusARM(subject Backup_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Backup_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Backup_StatusARM instances for property testing - lazily instantiated by Backup_StatusARMGenerator()
var backup_statusARMGenerator gopter.Gen

// Backup_StatusARMGenerator returns a generator of Backup_StatusARM instances for property testing.
func Backup_StatusARMGenerator() gopter.Gen {
	if backup_statusARMGenerator != nil {
		return backup_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackup_StatusARM(generators)
	backup_statusARMGenerator = gen.Struct(reflect.TypeOf(Backup_StatusARM{}), generators)

	return backup_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForBackup_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackup_StatusARM(gens map[string]gopter.Gen) {
	gens["BackupRetentionDays"] = gen.PtrOf(gen.Int())
	gens["EarliestRestoreDate"] = gen.PtrOf(gen.AlphaString())
	gens["GeoRedundantBackup"] = gen.PtrOf(gen.AlphaString())
}

func Test_HighAvailability_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HighAvailability_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHighAvailability_StatusARM, HighAvailability_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHighAvailability_StatusARM runs a test to see if a specific instance of HighAvailability_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHighAvailability_StatusARM(subject HighAvailability_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HighAvailability_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HighAvailability_StatusARM instances for property testing - lazily instantiated by
//HighAvailability_StatusARMGenerator()
var highAvailability_statusARMGenerator gopter.Gen

// HighAvailability_StatusARMGenerator returns a generator of HighAvailability_StatusARM instances for property testing.
func HighAvailability_StatusARMGenerator() gopter.Gen {
	if highAvailability_statusARMGenerator != nil {
		return highAvailability_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHighAvailability_StatusARM(generators)
	highAvailability_statusARMGenerator = gen.Struct(reflect.TypeOf(HighAvailability_StatusARM{}), generators)

	return highAvailability_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForHighAvailability_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHighAvailability_StatusARM(gens map[string]gopter.Gen) {
	gens["Mode"] = gen.PtrOf(gen.AlphaString())
	gens["StandbyAvailabilityZone"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

func Test_MaintenanceWindow_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of MaintenanceWindow_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForMaintenanceWindow_StatusARM, MaintenanceWindow_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForMaintenanceWindow_StatusARM runs a test to see if a specific instance of MaintenanceWindow_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForMaintenanceWindow_StatusARM(subject MaintenanceWindow_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual MaintenanceWindow_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of MaintenanceWindow_StatusARM instances for property testing - lazily instantiated by
//MaintenanceWindow_StatusARMGenerator()
var maintenanceWindow_statusARMGenerator gopter.Gen

// MaintenanceWindow_StatusARMGenerator returns a generator of MaintenanceWindow_StatusARM instances for property testing.
func MaintenanceWindow_StatusARMGenerator() gopter.Gen {
	if maintenanceWindow_statusARMGenerator != nil {
		return maintenanceWindow_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForMaintenanceWindow_StatusARM(generators)
	maintenanceWindow_statusARMGenerator = gen.Struct(reflect.TypeOf(MaintenanceWindow_StatusARM{}), generators)

	return maintenanceWindow_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForMaintenanceWindow_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForMaintenanceWindow_StatusARM(gens map[string]gopter.Gen) {
	gens["CustomWindow"] = gen.PtrOf(gen.AlphaString())
	gens["DayOfWeek"] = gen.PtrOf(gen.Int())
	gens["StartHour"] = gen.PtrOf(gen.Int())
	gens["StartMinute"] = gen.PtrOf(gen.Int())
}

func Test_Network_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Network_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetwork_StatusARM, Network_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetwork_StatusARM runs a test to see if a specific instance of Network_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetwork_StatusARM(subject Network_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Network_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Network_StatusARM instances for property testing - lazily instantiated by Network_StatusARMGenerator()
var network_statusARMGenerator gopter.Gen

// Network_StatusARMGenerator returns a generator of Network_StatusARM instances for property testing.
func Network_StatusARMGenerator() gopter.Gen {
	if network_statusARMGenerator != nil {
		return network_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetwork_StatusARM(generators)
	network_statusARMGenerator = gen.Struct(reflect.TypeOf(Network_StatusARM{}), generators)

	return network_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetwork_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetwork_StatusARM(gens map[string]gopter.Gen) {
	gens["DelegatedSubnetResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateDnsZoneArmResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
}

func Test_Storage_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Storage_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStorage_StatusARM, Storage_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStorage_StatusARM runs a test to see if a specific instance of Storage_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForStorage_StatusARM(subject Storage_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Storage_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Storage_StatusARM instances for property testing - lazily instantiated by Storage_StatusARMGenerator()
var storage_statusARMGenerator gopter.Gen

// Storage_StatusARMGenerator returns a generator of Storage_StatusARM instances for property testing.
func Storage_StatusARMGenerator() gopter.Gen {
	if storage_statusARMGenerator != nil {
		return storage_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStorage_StatusARM(generators)
	storage_statusARMGenerator = gen.Struct(reflect.TypeOf(Storage_StatusARM{}), generators)

	return storage_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForStorage_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStorage_StatusARM(gens map[string]gopter.Gen) {
	gens["StorageSizeGB"] = gen.PtrOf(gen.Int())
}
