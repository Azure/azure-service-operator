// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FlexibleServersConfigurations_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServersConfigurations_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServersConfigurationsSPECARM, FlexibleServersConfigurationsSPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServersConfigurationsSPECARM runs a test to see if a specific instance of FlexibleServersConfigurations_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServersConfigurationsSPECARM(subject FlexibleServersConfigurations_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServersConfigurations_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServersConfigurations_SPECARM instances for property testing - lazily instantiated by
//FlexibleServersConfigurationsSPECARMGenerator()
var flexibleServersConfigurationsSPECARMGenerator gopter.Gen

// FlexibleServersConfigurationsSPECARMGenerator returns a generator of FlexibleServersConfigurations_SPECARM instances for property testing.
// We first initialize flexibleServersConfigurationsSPECARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlexibleServersConfigurationsSPECARMGenerator() gopter.Gen {
	if flexibleServersConfigurationsSPECARMGenerator != nil {
		return flexibleServersConfigurationsSPECARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersConfigurationsSPECARM(generators)
	flexibleServersConfigurationsSPECARMGenerator = gen.Struct(reflect.TypeOf(FlexibleServersConfigurations_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersConfigurationsSPECARM(generators)
	AddRelatedPropertyGeneratorsForFlexibleServersConfigurationsSPECARM(generators)
	flexibleServersConfigurationsSPECARMGenerator = gen.Struct(reflect.TypeOf(FlexibleServersConfigurations_SPECARM{}), generators)

	return flexibleServersConfigurationsSPECARMGenerator
}

// AddIndependentPropertyGeneratorsForFlexibleServersConfigurationsSPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlexibleServersConfigurationsSPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForFlexibleServersConfigurationsSPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServersConfigurationsSPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ConfigurationPropertiesSpecARMGenerator())
}

func Test_ConfigurationProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConfigurationProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConfigurationPropertiesSpecARM, ConfigurationPropertiesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConfigurationPropertiesSpecARM runs a test to see if a specific instance of ConfigurationProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConfigurationPropertiesSpecARM(subject ConfigurationProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConfigurationProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConfigurationProperties_SpecARM instances for property testing - lazily instantiated by
//ConfigurationPropertiesSpecARMGenerator()
var configurationPropertiesSpecARMGenerator gopter.Gen

// ConfigurationPropertiesSpecARMGenerator returns a generator of ConfigurationProperties_SpecARM instances for property testing.
func ConfigurationPropertiesSpecARMGenerator() gopter.Gen {
	if configurationPropertiesSpecARMGenerator != nil {
		return configurationPropertiesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConfigurationPropertiesSpecARM(generators)
	configurationPropertiesSpecARMGenerator = gen.Struct(reflect.TypeOf(ConfigurationProperties_SpecARM{}), generators)

	return configurationPropertiesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForConfigurationPropertiesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConfigurationPropertiesSpecARM(gens map[string]gopter.Gen) {
	gens["Source"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
