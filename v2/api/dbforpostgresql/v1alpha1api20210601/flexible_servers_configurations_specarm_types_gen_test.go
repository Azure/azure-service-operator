// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FlexibleServersConfigurations_SPECARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServersConfigurations_SPECARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServersConfigurations_SPECARM, FlexibleServersConfigurations_SPECARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServersConfigurations_SPECARM runs a test to see if a specific instance of FlexibleServersConfigurations_SPECARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServersConfigurations_SPECARM(subject FlexibleServersConfigurations_SPECARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServersConfigurations_SPECARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServersConfigurations_SPECARM instances for property testing - lazily instantiated by
//FlexibleServersConfigurations_SPECARMGenerator()
var flexibleServersConfigurations_specarmGenerator gopter.Gen

// FlexibleServersConfigurations_SPECARMGenerator returns a generator of FlexibleServersConfigurations_SPECARM instances for property testing.
// We first initialize flexibleServersConfigurations_specarmGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlexibleServersConfigurations_SPECARMGenerator() gopter.Gen {
	if flexibleServersConfigurations_specarmGenerator != nil {
		return flexibleServersConfigurations_specarmGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersConfigurations_SPECARM(generators)
	flexibleServersConfigurations_specarmGenerator = gen.Struct(reflect.TypeOf(FlexibleServersConfigurations_SPECARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersConfigurations_SPECARM(generators)
	AddRelatedPropertyGeneratorsForFlexibleServersConfigurations_SPECARM(generators)
	flexibleServersConfigurations_specarmGenerator = gen.Struct(reflect.TypeOf(FlexibleServersConfigurations_SPECARM{}), generators)

	return flexibleServersConfigurations_specarmGenerator
}

// AddIndependentPropertyGeneratorsForFlexibleServersConfigurations_SPECARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlexibleServersConfigurations_SPECARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForFlexibleServersConfigurations_SPECARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServersConfigurations_SPECARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ConfigurationProperties_SpecARMGenerator())
}

func Test_ConfigurationProperties_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ConfigurationProperties_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForConfigurationProperties_SpecARM, ConfigurationProperties_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForConfigurationProperties_SpecARM runs a test to see if a specific instance of ConfigurationProperties_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForConfigurationProperties_SpecARM(subject ConfigurationProperties_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ConfigurationProperties_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ConfigurationProperties_SpecARM instances for property testing - lazily instantiated by
//ConfigurationProperties_SpecARMGenerator()
var configurationProperties_specARMGenerator gopter.Gen

// ConfigurationProperties_SpecARMGenerator returns a generator of ConfigurationProperties_SpecARM instances for property testing.
func ConfigurationProperties_SpecARMGenerator() gopter.Gen {
	if configurationProperties_specARMGenerator != nil {
		return configurationProperties_specARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForConfigurationProperties_SpecARM(generators)
	configurationProperties_specARMGenerator = gen.Struct(reflect.TypeOf(ConfigurationProperties_SpecARM{}), generators)

	return configurationProperties_specARMGenerator
}

// AddIndependentPropertyGeneratorsForConfigurationProperties_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForConfigurationProperties_SpecARM(gens map[string]gopter.Gen) {
	gens["Source"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
