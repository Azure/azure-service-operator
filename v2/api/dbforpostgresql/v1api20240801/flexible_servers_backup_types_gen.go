// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20240801

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20240801/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/dbforpostgresql/v1api20240801/storage"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={azure,dbforpostgresql}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2024-08-01/Backups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/backups/{backupName}
type FlexibleServersBackup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FlexibleServersBackup_Spec   `json:"spec,omitempty"`
	Status            FlexibleServersBackup_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &FlexibleServersBackup{}

// GetConditions returns the conditions of the resource
func (backup *FlexibleServersBackup) GetConditions() conditions.Conditions {
	return backup.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (backup *FlexibleServersBackup) SetConditions(conditions conditions.Conditions) {
	backup.Status.Conditions = conditions
}

var _ conversion.Convertible = &FlexibleServersBackup{}

// ConvertFrom populates our FlexibleServersBackup from the provided hub FlexibleServersBackup
func (backup *FlexibleServersBackup) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.FlexibleServersBackup)
	if !ok {
		return fmt.Errorf("expected dbforpostgresql/v1api20240801/storage/FlexibleServersBackup but received %T instead", hub)
	}

	return backup.AssignProperties_From_FlexibleServersBackup(source)
}

// ConvertTo populates the provided hub FlexibleServersBackup from our FlexibleServersBackup
func (backup *FlexibleServersBackup) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.FlexibleServersBackup)
	if !ok {
		return fmt.Errorf("expected dbforpostgresql/v1api20240801/storage/FlexibleServersBackup but received %T instead", hub)
	}

	return backup.AssignProperties_To_FlexibleServersBackup(destination)
}

var _ configmaps.Exporter = &FlexibleServersBackup{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (backup *FlexibleServersBackup) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if backup.Spec.OperatorSpec == nil {
		return nil
	}
	return backup.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &FlexibleServersBackup{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (backup *FlexibleServersBackup) SecretDestinationExpressions() []*core.DestinationExpression {
	if backup.Spec.OperatorSpec == nil {
		return nil
	}
	return backup.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &FlexibleServersBackup{}

// InitializeSpec initializes the spec for this resource from the given status
func (backup *FlexibleServersBackup) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*FlexibleServersBackup_STATUS); ok {
		return backup.Spec.Initialize_From_FlexibleServersBackup_STATUS(s)
	}

	return fmt.Errorf("expected Status of type FlexibleServersBackup_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &FlexibleServersBackup{}

// AzureName returns the Azure name of the resource
func (backup *FlexibleServersBackup) AzureName() string {
	return backup.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2024-08-01"
func (backup FlexibleServersBackup) GetAPIVersion() string {
	return "2024-08-01"
}

// GetResourceScope returns the scope of the resource
func (backup *FlexibleServersBackup) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (backup *FlexibleServersBackup) GetSpec() genruntime.ConvertibleSpec {
	return &backup.Spec
}

// GetStatus returns the status of this resource
func (backup *FlexibleServersBackup) GetStatus() genruntime.ConvertibleStatus {
	return &backup.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (backup *FlexibleServersBackup) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DBforPostgreSQL/flexibleServers/backups"
func (backup *FlexibleServersBackup) GetType() string {
	return "Microsoft.DBforPostgreSQL/flexibleServers/backups"
}

// NewEmptyStatus returns a new empty (blank) status
func (backup *FlexibleServersBackup) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &FlexibleServersBackup_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (backup *FlexibleServersBackup) Owner() *genruntime.ResourceReference {
	if backup.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(backup.Spec)
	return backup.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (backup *FlexibleServersBackup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*FlexibleServersBackup_STATUS); ok {
		backup.Status = *st
		return nil
	}

	// Convert status to required version
	var st FlexibleServersBackup_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	backup.Status = st
	return nil
}

// AssignProperties_From_FlexibleServersBackup populates our FlexibleServersBackup from the provided source FlexibleServersBackup
func (backup *FlexibleServersBackup) AssignProperties_From_FlexibleServersBackup(source *storage.FlexibleServersBackup) error {

	// ObjectMeta
	backup.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FlexibleServersBackup_Spec
	err := spec.AssignProperties_From_FlexibleServersBackup_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_FlexibleServersBackup_Spec() to populate field Spec")
	}
	backup.Spec = spec

	// Status
	var status FlexibleServersBackup_STATUS
	err = status.AssignProperties_From_FlexibleServersBackup_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_FlexibleServersBackup_STATUS() to populate field Status")
	}
	backup.Status = status

	// No error
	return nil
}

// AssignProperties_To_FlexibleServersBackup populates the provided destination FlexibleServersBackup from our FlexibleServersBackup
func (backup *FlexibleServersBackup) AssignProperties_To_FlexibleServersBackup(destination *storage.FlexibleServersBackup) error {

	// ObjectMeta
	destination.ObjectMeta = *backup.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.FlexibleServersBackup_Spec
	err := backup.Spec.AssignProperties_To_FlexibleServersBackup_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_FlexibleServersBackup_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.FlexibleServersBackup_STATUS
	err = backup.Status.AssignProperties_To_FlexibleServersBackup_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_FlexibleServersBackup_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (backup *FlexibleServersBackup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: backup.Spec.OriginalVersion(),
		Kind:    "FlexibleServersBackup",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2024-08-01/Backups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/backups/{backupName}
type FlexibleServersBackupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FlexibleServersBackup `json:"items"`
}

type FlexibleServersBackup_Spec struct {
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern="^[-\\w\\._]+$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *FlexibleServersBackupOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a dbforpostgresql.azure.com/FlexibleServer resource
	Owner *genruntime.KnownResourceReference `group:"dbforpostgresql.azure.com" json:"owner,omitempty" kind:"FlexibleServer"`
}

var _ genruntime.ARMTransformer = &FlexibleServersBackup_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (backup *FlexibleServersBackup_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if backup == nil {
		return nil, nil
	}
	result := &arm.FlexibleServersBackup_Spec{}

	// Set property "Name":
	result.Name = resolved.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backup *FlexibleServersBackup_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.FlexibleServersBackup_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backup *FlexibleServersBackup_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.FlexibleServersBackup_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.FlexibleServersBackup_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	backup.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	backup.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FlexibleServersBackup_Spec{}

// ConvertSpecFrom populates our FlexibleServersBackup_Spec from the provided source
func (backup *FlexibleServersBackup_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.FlexibleServersBackup_Spec)
	if ok {
		// Populate our instance from source
		return backup.AssignProperties_From_FlexibleServersBackup_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.FlexibleServersBackup_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = backup.AssignProperties_From_FlexibleServersBackup_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FlexibleServersBackup_Spec
func (backup *FlexibleServersBackup_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.FlexibleServersBackup_Spec)
	if ok {
		// Populate destination from our instance
		return backup.AssignProperties_To_FlexibleServersBackup_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.FlexibleServersBackup_Spec{}
	err := backup.AssignProperties_To_FlexibleServersBackup_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_FlexibleServersBackup_Spec populates our FlexibleServersBackup_Spec from the provided source FlexibleServersBackup_Spec
func (backup *FlexibleServersBackup_Spec) AssignProperties_From_FlexibleServersBackup_Spec(source *storage.FlexibleServersBackup_Spec) error {

	// AzureName
	backup.AzureName = source.AzureName

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec FlexibleServersBackupOperatorSpec
		err := operatorSpec.AssignProperties_From_FlexibleServersBackupOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_FlexibleServersBackupOperatorSpec() to populate field OperatorSpec")
		}
		backup.OperatorSpec = &operatorSpec
	} else {
		backup.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		backup.Owner = &owner
	} else {
		backup.Owner = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FlexibleServersBackup_Spec populates the provided destination FlexibleServersBackup_Spec from our FlexibleServersBackup_Spec
func (backup *FlexibleServersBackup_Spec) AssignProperties_To_FlexibleServersBackup_Spec(destination *storage.FlexibleServersBackup_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = backup.AzureName

	// OperatorSpec
	if backup.OperatorSpec != nil {
		var operatorSpec storage.FlexibleServersBackupOperatorSpec
		err := backup.OperatorSpec.AssignProperties_To_FlexibleServersBackupOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_FlexibleServersBackupOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = backup.OriginalVersion()

	// Owner
	if backup.Owner != nil {
		owner := backup.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_FlexibleServersBackup_STATUS populates our FlexibleServersBackup_Spec from the provided source FlexibleServersBackup_STATUS
func (backup *FlexibleServersBackup_Spec) Initialize_From_FlexibleServersBackup_STATUS(source *FlexibleServersBackup_STATUS) error {

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (backup *FlexibleServersBackup_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (backup *FlexibleServersBackup_Spec) SetAzureName(azureName string) {
	backup.AzureName = azureName
}

type FlexibleServersBackup_STATUS struct {
	// BackupType: Type of backup.
	BackupType *ServerBackupProperties_BackupType_STATUS `json:"backupType,omitempty"`

	// CompletedTime: Time(ISO8601 format) at which the backup was completed.
	CompletedTime *string `json:"completedTime,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Id: Fully qualified resource ID for the resource. E.g.
	// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id *string `json:"id,omitempty"`

	// Name: The name of the resource
	Name *string `json:"name,omitempty"`

	// Source: Source of the backup.
	Source *string `json:"source,omitempty"`

	// SystemData: Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &FlexibleServersBackup_STATUS{}

// ConvertStatusFrom populates our FlexibleServersBackup_STATUS from the provided source
func (backup *FlexibleServersBackup_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.FlexibleServersBackup_STATUS)
	if ok {
		// Populate our instance from source
		return backup.AssignProperties_From_FlexibleServersBackup_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.FlexibleServersBackup_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = backup.AssignProperties_From_FlexibleServersBackup_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our FlexibleServersBackup_STATUS
func (backup *FlexibleServersBackup_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.FlexibleServersBackup_STATUS)
	if ok {
		// Populate destination from our instance
		return backup.AssignProperties_To_FlexibleServersBackup_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.FlexibleServersBackup_STATUS{}
	err := backup.AssignProperties_To_FlexibleServersBackup_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &FlexibleServersBackup_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backup *FlexibleServersBackup_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.FlexibleServersBackup_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backup *FlexibleServersBackup_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.FlexibleServersBackup_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.FlexibleServersBackup_STATUS, got %T", armInput)
	}

	// Set property "BackupType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BackupType != nil {
			var temp string
			temp = string(*typedInput.Properties.BackupType)
			backupType := ServerBackupProperties_BackupType_STATUS(temp)
			backup.BackupType = &backupType
		}
	}

	// Set property "CompletedTime":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CompletedTime != nil {
			completedTime := *typedInput.Properties.CompletedTime
			backup.CompletedTime = &completedTime
		}
	}

	// no assignment for property "Conditions"

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		backup.Id = &id
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		backup.Name = &name
	}

	// Set property "Source":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Source != nil {
			source := *typedInput.Properties.Source
			backup.Source = &source
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		backup.SystemData = &systemData
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		backup.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_FlexibleServersBackup_STATUS populates our FlexibleServersBackup_STATUS from the provided source FlexibleServersBackup_STATUS
func (backup *FlexibleServersBackup_STATUS) AssignProperties_From_FlexibleServersBackup_STATUS(source *storage.FlexibleServersBackup_STATUS) error {

	// BackupType
	if source.BackupType != nil {
		backupType := *source.BackupType
		backupTypeTemp := genruntime.ToEnum(backupType, serverBackupProperties_BackupType_STATUS_Values)
		backup.BackupType = &backupTypeTemp
	} else {
		backup.BackupType = nil
	}

	// CompletedTime
	backup.CompletedTime = genruntime.ClonePointerToString(source.CompletedTime)

	// Conditions
	backup.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	backup.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	backup.Name = genruntime.ClonePointerToString(source.Name)

	// Source
	backup.Source = genruntime.ClonePointerToString(source.Source)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		backup.SystemData = &systemDatum
	} else {
		backup.SystemData = nil
	}

	// Type
	backup.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_FlexibleServersBackup_STATUS populates the provided destination FlexibleServersBackup_STATUS from our FlexibleServersBackup_STATUS
func (backup *FlexibleServersBackup_STATUS) AssignProperties_To_FlexibleServersBackup_STATUS(destination *storage.FlexibleServersBackup_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BackupType
	if backup.BackupType != nil {
		backupType := string(*backup.BackupType)
		destination.BackupType = &backupType
	} else {
		destination.BackupType = nil
	}

	// CompletedTime
	destination.CompletedTime = genruntime.ClonePointerToString(backup.CompletedTime)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(backup.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(backup.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(backup.Name)

	// Source
	destination.Source = genruntime.ClonePointerToString(backup.Source)

	// SystemData
	if backup.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := backup.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(backup.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type FlexibleServersBackupOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_FlexibleServersBackupOperatorSpec populates our FlexibleServersBackupOperatorSpec from the provided source FlexibleServersBackupOperatorSpec
func (operator *FlexibleServersBackupOperatorSpec) AssignProperties_From_FlexibleServersBackupOperatorSpec(source *storage.FlexibleServersBackupOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FlexibleServersBackupOperatorSpec populates the provided destination FlexibleServersBackupOperatorSpec from our FlexibleServersBackupOperatorSpec
func (operator *FlexibleServersBackupOperatorSpec) AssignProperties_To_FlexibleServersBackupOperatorSpec(destination *storage.FlexibleServersBackupOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ServerBackupProperties_BackupType_STATUS string

const (
	ServerBackupProperties_BackupType_STATUS_CustomerOnDemand = ServerBackupProperties_BackupType_STATUS("Customer On-Demand")
	ServerBackupProperties_BackupType_STATUS_Full             = ServerBackupProperties_BackupType_STATUS("Full")
)

// Mapping from string to ServerBackupProperties_BackupType_STATUS
var serverBackupProperties_BackupType_STATUS_Values = map[string]ServerBackupProperties_BackupType_STATUS{
	"customer on-demand": ServerBackupProperties_BackupType_STATUS_CustomerOnDemand,
	"full":               ServerBackupProperties_BackupType_STATUS_Full,
}

func init() {
	SchemeBuilder.Register(&FlexibleServersBackup{}, &FlexibleServersBackupList{})
}
