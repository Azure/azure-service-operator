// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FlexibleServersAdvancedThreatProtectionSettings_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServersAdvancedThreatProtectionSettings via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettings, FlexibleServersAdvancedThreatProtectionSettingsGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettings runs a test to see if a specific instance of FlexibleServersAdvancedThreatProtectionSettings round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettings(subject FlexibleServersAdvancedThreatProtectionSettings) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServersAdvancedThreatProtectionSettings
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServersAdvancedThreatProtectionSettings instances for property testing - lazily instantiated by
// FlexibleServersAdvancedThreatProtectionSettingsGenerator()
var flexibleServersAdvancedThreatProtectionSettingsGenerator gopter.Gen

// FlexibleServersAdvancedThreatProtectionSettingsGenerator returns a generator of FlexibleServersAdvancedThreatProtectionSettings instances for property testing.
func FlexibleServersAdvancedThreatProtectionSettingsGenerator() gopter.Gen {
	if flexibleServersAdvancedThreatProtectionSettingsGenerator != nil {
		return flexibleServersAdvancedThreatProtectionSettingsGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings(generators)
	flexibleServersAdvancedThreatProtectionSettingsGenerator = gen.Struct(reflect.TypeOf(FlexibleServersAdvancedThreatProtectionSettings{}), generators)

	return flexibleServersAdvancedThreatProtectionSettingsGenerator
}

// AddRelatedPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings(gens map[string]gopter.Gen) {
	gens["Spec"] = FlexibleServersAdvancedThreatProtectionSettings_SpecGenerator()
	gens["Status"] = FlexibleServersAdvancedThreatProtectionSettings_STATUSGenerator()
}

func Test_FlexibleServersAdvancedThreatProtectionSettingsOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServersAdvancedThreatProtectionSettingsOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettingsOperatorSpec, FlexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettingsOperatorSpec runs a test to see if a specific instance of FlexibleServersAdvancedThreatProtectionSettingsOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettingsOperatorSpec(subject FlexibleServersAdvancedThreatProtectionSettingsOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServersAdvancedThreatProtectionSettingsOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServersAdvancedThreatProtectionSettingsOperatorSpec instances for property testing - lazily
// instantiated by FlexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator()
var flexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator gopter.Gen

// FlexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator returns a generator of FlexibleServersAdvancedThreatProtectionSettingsOperatorSpec instances for property testing.
func FlexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator() gopter.Gen {
	if flexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator != nil {
		return flexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	flexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator = gen.Struct(reflect.TypeOf(FlexibleServersAdvancedThreatProtectionSettingsOperatorSpec{}), generators)

	return flexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator
}

func Test_FlexibleServersAdvancedThreatProtectionSettings_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServersAdvancedThreatProtectionSettings_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettings_STATUS, FlexibleServersAdvancedThreatProtectionSettings_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettings_STATUS runs a test to see if a specific instance of FlexibleServersAdvancedThreatProtectionSettings_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettings_STATUS(subject FlexibleServersAdvancedThreatProtectionSettings_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServersAdvancedThreatProtectionSettings_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServersAdvancedThreatProtectionSettings_STATUS instances for property testing - lazily
// instantiated by FlexibleServersAdvancedThreatProtectionSettings_STATUSGenerator()
var flexibleServersAdvancedThreatProtectionSettings_STATUSGenerator gopter.Gen

// FlexibleServersAdvancedThreatProtectionSettings_STATUSGenerator returns a generator of FlexibleServersAdvancedThreatProtectionSettings_STATUS instances for property testing.
// We first initialize flexibleServersAdvancedThreatProtectionSettings_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlexibleServersAdvancedThreatProtectionSettings_STATUSGenerator() gopter.Gen {
	if flexibleServersAdvancedThreatProtectionSettings_STATUSGenerator != nil {
		return flexibleServersAdvancedThreatProtectionSettings_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_STATUS(generators)
	flexibleServersAdvancedThreatProtectionSettings_STATUSGenerator = gen.Struct(reflect.TypeOf(FlexibleServersAdvancedThreatProtectionSettings_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_STATUS(generators)
	AddRelatedPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_STATUS(generators)
	flexibleServersAdvancedThreatProtectionSettings_STATUSGenerator = gen.Struct(reflect.TypeOf(FlexibleServersAdvancedThreatProtectionSettings_STATUS{}), generators)

	return flexibleServersAdvancedThreatProtectionSettings_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_STATUS(gens map[string]gopter.Gen) {
	gens["CreationTime"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_STATUS(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_FlexibleServersAdvancedThreatProtectionSettings_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FlexibleServersAdvancedThreatProtectionSettings_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettings_Spec, FlexibleServersAdvancedThreatProtectionSettings_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettings_Spec runs a test to see if a specific instance of FlexibleServersAdvancedThreatProtectionSettings_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForFlexibleServersAdvancedThreatProtectionSettings_Spec(subject FlexibleServersAdvancedThreatProtectionSettings_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FlexibleServersAdvancedThreatProtectionSettings_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FlexibleServersAdvancedThreatProtectionSettings_Spec instances for property testing - lazily
// instantiated by FlexibleServersAdvancedThreatProtectionSettings_SpecGenerator()
var flexibleServersAdvancedThreatProtectionSettings_SpecGenerator gopter.Gen

// FlexibleServersAdvancedThreatProtectionSettings_SpecGenerator returns a generator of FlexibleServersAdvancedThreatProtectionSettings_Spec instances for property testing.
// We first initialize flexibleServersAdvancedThreatProtectionSettings_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FlexibleServersAdvancedThreatProtectionSettings_SpecGenerator() gopter.Gen {
	if flexibleServersAdvancedThreatProtectionSettings_SpecGenerator != nil {
		return flexibleServersAdvancedThreatProtectionSettings_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_Spec(generators)
	flexibleServersAdvancedThreatProtectionSettings_SpecGenerator = gen.Struct(reflect.TypeOf(FlexibleServersAdvancedThreatProtectionSettings_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_Spec(generators)
	AddRelatedPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_Spec(generators)
	flexibleServersAdvancedThreatProtectionSettings_SpecGenerator = gen.Struct(reflect.TypeOf(FlexibleServersAdvancedThreatProtectionSettings_Spec{}), generators)

	return flexibleServersAdvancedThreatProtectionSettings_SpecGenerator
}

// AddIndependentPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_Spec(gens map[string]gopter.Gen) {
	gens["OriginalVersion"] = gen.AlphaString()
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFlexibleServersAdvancedThreatProtectionSettings_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(FlexibleServersAdvancedThreatProtectionSettingsOperatorSpecGenerator())
}
