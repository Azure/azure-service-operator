// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersDatabasesAdvancedThreatProtectionSetting_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersDatabasesAdvancedThreatProtectionSetting via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersDatabasesAdvancedThreatProtectionSetting, ServersDatabasesAdvancedThreatProtectionSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersDatabasesAdvancedThreatProtectionSetting runs a test to see if a specific instance of ServersDatabasesAdvancedThreatProtectionSetting round trips to JSON and back losslessly
func RunJSONSerializationTestForServersDatabasesAdvancedThreatProtectionSetting(subject ServersDatabasesAdvancedThreatProtectionSetting) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersDatabasesAdvancedThreatProtectionSetting
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersDatabasesAdvancedThreatProtectionSetting instances for property testing - lazily instantiated by
// ServersDatabasesAdvancedThreatProtectionSettingGenerator()
var serversDatabasesAdvancedThreatProtectionSettingGenerator gopter.Gen

// ServersDatabasesAdvancedThreatProtectionSettingGenerator returns a generator of ServersDatabasesAdvancedThreatProtectionSetting instances for property testing.
func ServersDatabasesAdvancedThreatProtectionSettingGenerator() gopter.Gen {
	if serversDatabasesAdvancedThreatProtectionSettingGenerator != nil {
		return serversDatabasesAdvancedThreatProtectionSettingGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServersDatabasesAdvancedThreatProtectionSetting(generators)
	serversDatabasesAdvancedThreatProtectionSettingGenerator = gen.Struct(reflect.TypeOf(ServersDatabasesAdvancedThreatProtectionSetting{}), generators)

	return serversDatabasesAdvancedThreatProtectionSettingGenerator
}

// AddRelatedPropertyGeneratorsForServersDatabasesAdvancedThreatProtectionSetting is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersDatabasesAdvancedThreatProtectionSetting(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator()
	gens["Status"] = Servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator()
}

func Test_Servers_Databases_AdvancedThreatProtectionSetting_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Databases_AdvancedThreatProtectionSetting_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Databases_AdvancedThreatProtectionSetting_Spec, Servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Databases_AdvancedThreatProtectionSetting_Spec runs a test to see if a specific instance of Servers_Databases_AdvancedThreatProtectionSetting_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Databases_AdvancedThreatProtectionSetting_Spec(subject Servers_Databases_AdvancedThreatProtectionSetting_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Databases_AdvancedThreatProtectionSetting_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Databases_AdvancedThreatProtectionSetting_Spec instances for property testing - lazily
// instantiated by Servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator()
var servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator gopter.Gen

// Servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator returns a generator of Servers_Databases_AdvancedThreatProtectionSetting_Spec instances for property testing.
func Servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator() gopter.Gen {
	if servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator != nil {
		return servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_Spec(generators)
	servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_AdvancedThreatProtectionSetting_Spec{}), generators)

	return servers_Databases_AdvancedThreatProtectionSetting_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_Spec(gens map[string]gopter.Gen) {
	gens["OriginalVersion"] = gen.AlphaString()
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

func Test_Servers_Databases_AdvancedThreatProtectionSetting_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Databases_AdvancedThreatProtectionSetting_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Databases_AdvancedThreatProtectionSetting_STATUS, Servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Databases_AdvancedThreatProtectionSetting_STATUS runs a test to see if a specific instance of Servers_Databases_AdvancedThreatProtectionSetting_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Databases_AdvancedThreatProtectionSetting_STATUS(subject Servers_Databases_AdvancedThreatProtectionSetting_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Databases_AdvancedThreatProtectionSetting_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Databases_AdvancedThreatProtectionSetting_STATUS instances for property testing - lazily
// instantiated by Servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator()
var servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator gopter.Gen

// Servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator returns a generator of Servers_Databases_AdvancedThreatProtectionSetting_STATUS instances for property testing.
// We first initialize servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator() gopter.Gen {
	if servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator != nil {
		return servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_STATUS(generators)
	servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_AdvancedThreatProtectionSetting_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_STATUS(generators)
	AddRelatedPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_STATUS(generators)
	servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_AdvancedThreatProtectionSetting_STATUS{}), generators)

	return servers_Databases_AdvancedThreatProtectionSetting_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_STATUS(gens map[string]gopter.Gen) {
	gens["CreationTime"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Databases_AdvancedThreatProtectionSetting_STATUS(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}
