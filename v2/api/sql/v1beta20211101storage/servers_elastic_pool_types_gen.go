// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=sql.azure.com,resources=serverselasticpools,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=sql.azure.com,resources={serverselasticpools/status,serverselasticpools/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1beta20211101.ServersElasticPool
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/ElasticPools.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}
type ServersElasticPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Servers_ElasticPool_Spec   `json:"spec,omitempty"`
	Status            Servers_ElasticPool_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ServersElasticPool{}

// GetConditions returns the conditions of the resource
func (pool *ServersElasticPool) GetConditions() conditions.Conditions {
	return pool.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (pool *ServersElasticPool) SetConditions(conditions conditions.Conditions) {
	pool.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &ServersElasticPool{}

// AzureName returns the Azure name of the resource
func (pool *ServersElasticPool) AzureName() string {
	return pool.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (pool ServersElasticPool) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (pool *ServersElasticPool) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (pool *ServersElasticPool) GetSpec() genruntime.ConvertibleSpec {
	return &pool.Spec
}

// GetStatus returns the status of this resource
func (pool *ServersElasticPool) GetStatus() genruntime.ConvertibleStatus {
	return &pool.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/servers/elasticPools"
func (pool *ServersElasticPool) GetType() string {
	return "Microsoft.Sql/servers/elasticPools"
}

// NewEmptyStatus returns a new empty (blank) status
func (pool *ServersElasticPool) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Servers_ElasticPool_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (pool *ServersElasticPool) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(pool.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  pool.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (pool *ServersElasticPool) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Servers_ElasticPool_STATUS); ok {
		pool.Status = *st
		return nil
	}

	// Convert status to required version
	var st Servers_ElasticPool_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	pool.Status = st
	return nil
}

// Hub marks that this ServersElasticPool is the hub type for conversion
func (pool *ServersElasticPool) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (pool *ServersElasticPool) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: pool.Spec.OriginalVersion,
		Kind:    "ServersElasticPool",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1beta20211101.ServersElasticPool
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/ElasticPools.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}
type ServersElasticPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServersElasticPool `json:"items"`
}

// Storage version of v1beta20211101.Servers_ElasticPool_Spec
type Servers_ElasticPool_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName                    string   `json:"azureName,omitempty"`
	HighAvailabilityReplicaCount *int     `json:"highAvailabilityReplicaCount,omitempty"`
	LicenseType                  *string  `json:"licenseType,omitempty"`
	Location                     *string  `json:"location,omitempty"`
	MaintenanceConfigurationId   *string  `json:"maintenanceConfigurationId,omitempty"`
	MaxSizeBytes                 *int     `json:"maxSizeBytes,omitempty"`
	MinCapacity                  *float64 `json:"minCapacity,omitempty"`
	OriginalVersion              string   `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/Server resource
	Owner               *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"Server"`
	PerDatabaseSettings *ElasticPoolPerDatabaseSettings    `json:"perDatabaseSettings,omitempty"`
	PropertyBag         genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Sku                 *Sku                               `json:"sku,omitempty"`
	Tags                map[string]string                  `json:"tags,omitempty"`
	ZoneRedundant       *bool                              `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Servers_ElasticPool_Spec{}

// ConvertSpecFrom populates our Servers_ElasticPool_Spec from the provided source
func (pool *Servers_ElasticPool_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == pool {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(pool)
}

// ConvertSpecTo populates the provided destination from our Servers_ElasticPool_Spec
func (pool *Servers_ElasticPool_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == pool {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(pool)
}

// Storage version of v1beta20211101.Servers_ElasticPool_STATUS
type Servers_ElasticPool_STATUS struct {
	Conditions                   []conditions.Condition                 `json:"conditions,omitempty"`
	CreationDate                 *string                                `json:"creationDate,omitempty"`
	HighAvailabilityReplicaCount *int                                   `json:"highAvailabilityReplicaCount,omitempty"`
	Id                           *string                                `json:"id,omitempty"`
	Kind                         *string                                `json:"kind,omitempty"`
	LicenseType                  *string                                `json:"licenseType,omitempty"`
	Location                     *string                                `json:"location,omitempty"`
	MaintenanceConfigurationId   *string                                `json:"maintenanceConfigurationId,omitempty"`
	MaxSizeBytes                 *int                                   `json:"maxSizeBytes,omitempty"`
	MinCapacity                  *float64                               `json:"minCapacity,omitempty"`
	Name                         *string                                `json:"name,omitempty"`
	PerDatabaseSettings          *ElasticPoolPerDatabaseSettings_STATUS `json:"perDatabaseSettings,omitempty"`
	PropertyBag                  genruntime.PropertyBag                 `json:"$propertyBag,omitempty"`
	Sku                          *Sku_STATUS                            `json:"sku,omitempty"`
	State                        *string                                `json:"state,omitempty"`
	Tags                         map[string]string                      `json:"tags,omitempty"`
	Type                         *string                                `json:"type,omitempty"`
	ZoneRedundant                *bool                                  `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Servers_ElasticPool_STATUS{}

// ConvertStatusFrom populates our Servers_ElasticPool_STATUS from the provided source
func (pool *Servers_ElasticPool_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == pool {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(pool)
}

// ConvertStatusTo populates the provided destination from our Servers_ElasticPool_STATUS
func (pool *Servers_ElasticPool_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == pool {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(pool)
}

// Storage version of v1beta20211101.ElasticPoolPerDatabaseSettings
// Per database settings of an elastic pool.
type ElasticPoolPerDatabaseSettings struct {
	MaxCapacity *float64               `json:"maxCapacity,omitempty"`
	MinCapacity *float64               `json:"minCapacity,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1beta20211101.ElasticPoolPerDatabaseSettings_STATUS
// Per database settings of an elastic pool.
type ElasticPoolPerDatabaseSettings_STATUS struct {
	MaxCapacity *float64               `json:"maxCapacity,omitempty"`
	MinCapacity *float64               `json:"minCapacity,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

func init() {
	SchemeBuilder.Register(&ServersElasticPool{}, &ServersElasticPoolList{})
}
