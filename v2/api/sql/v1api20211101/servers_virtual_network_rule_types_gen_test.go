// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/sql/v1api20211101/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersVirtualNetworkRule_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersVirtualNetworkRule to hub returns original",
		prop.ForAll(RunResourceConversionTestForServersVirtualNetworkRule, ServersVirtualNetworkRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForServersVirtualNetworkRule tests if a specific instance of ServersVirtualNetworkRule round trips to the hub storage version and back losslessly
func RunResourceConversionTestForServersVirtualNetworkRule(subject ServersVirtualNetworkRule) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.ServersVirtualNetworkRule
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual ServersVirtualNetworkRule
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersVirtualNetworkRule_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersVirtualNetworkRule to ServersVirtualNetworkRule via AssignProperties_To_ServersVirtualNetworkRule & AssignProperties_From_ServersVirtualNetworkRule returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersVirtualNetworkRule, ServersVirtualNetworkRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersVirtualNetworkRule tests if a specific instance of ServersVirtualNetworkRule can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServersVirtualNetworkRule(subject ServersVirtualNetworkRule) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ServersVirtualNetworkRule
	err := copied.AssignProperties_To_ServersVirtualNetworkRule(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersVirtualNetworkRule
	err = actual.AssignProperties_From_ServersVirtualNetworkRule(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersVirtualNetworkRule_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersVirtualNetworkRule via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersVirtualNetworkRule, ServersVirtualNetworkRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersVirtualNetworkRule runs a test to see if a specific instance of ServersVirtualNetworkRule round trips to JSON and back losslessly
func RunJSONSerializationTestForServersVirtualNetworkRule(subject ServersVirtualNetworkRule) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersVirtualNetworkRule
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersVirtualNetworkRule instances for property testing - lazily instantiated by
// ServersVirtualNetworkRuleGenerator()
var serversVirtualNetworkRuleGenerator gopter.Gen

// ServersVirtualNetworkRuleGenerator returns a generator of ServersVirtualNetworkRule instances for property testing.
func ServersVirtualNetworkRuleGenerator() gopter.Gen {
	if serversVirtualNetworkRuleGenerator != nil {
		return serversVirtualNetworkRuleGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServersVirtualNetworkRule(generators)
	serversVirtualNetworkRuleGenerator = gen.Struct(reflect.TypeOf(ServersVirtualNetworkRule{}), generators)

	return serversVirtualNetworkRuleGenerator
}

// AddRelatedPropertyGeneratorsForServersVirtualNetworkRule is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersVirtualNetworkRule(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_VirtualNetworkRule_SpecGenerator()
	gens["Status"] = Servers_VirtualNetworkRule_STATUSGenerator()
}

func Test_Servers_VirtualNetworkRule_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_VirtualNetworkRule_STATUS to Servers_VirtualNetworkRule_STATUS via AssignProperties_To_Servers_VirtualNetworkRule_STATUS & AssignProperties_From_Servers_VirtualNetworkRule_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForServers_VirtualNetworkRule_STATUS, Servers_VirtualNetworkRule_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServers_VirtualNetworkRule_STATUS tests if a specific instance of Servers_VirtualNetworkRule_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServers_VirtualNetworkRule_STATUS(subject Servers_VirtualNetworkRule_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Servers_VirtualNetworkRule_STATUS
	err := copied.AssignProperties_To_Servers_VirtualNetworkRule_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Servers_VirtualNetworkRule_STATUS
	err = actual.AssignProperties_From_Servers_VirtualNetworkRule_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_VirtualNetworkRule_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_VirtualNetworkRule_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_VirtualNetworkRule_STATUS, Servers_VirtualNetworkRule_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_VirtualNetworkRule_STATUS runs a test to see if a specific instance of Servers_VirtualNetworkRule_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_VirtualNetworkRule_STATUS(subject Servers_VirtualNetworkRule_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_VirtualNetworkRule_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_VirtualNetworkRule_STATUS instances for property testing - lazily instantiated by
// Servers_VirtualNetworkRule_STATUSGenerator()
var servers_VirtualNetworkRule_STATUSGenerator gopter.Gen

// Servers_VirtualNetworkRule_STATUSGenerator returns a generator of Servers_VirtualNetworkRule_STATUS instances for property testing.
func Servers_VirtualNetworkRule_STATUSGenerator() gopter.Gen {
	if servers_VirtualNetworkRule_STATUSGenerator != nil {
		return servers_VirtualNetworkRule_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_VirtualNetworkRule_STATUS(generators)
	servers_VirtualNetworkRule_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_VirtualNetworkRule_STATUS{}), generators)

	return servers_VirtualNetworkRule_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_VirtualNetworkRule_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_VirtualNetworkRule_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreMissingVnetServiceEndpoint"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(
		VirtualNetworkRuleProperties_State_STATUS_Deleting,
		VirtualNetworkRuleProperties_State_STATUS_Failed,
		VirtualNetworkRuleProperties_State_STATUS_InProgress,
		VirtualNetworkRuleProperties_State_STATUS_Initializing,
		VirtualNetworkRuleProperties_State_STATUS_Ready,
		VirtualNetworkRuleProperties_State_STATUS_Unknown))
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["VirtualNetworkSubnetId"] = gen.PtrOf(gen.AlphaString())
}

func Test_Servers_VirtualNetworkRule_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_VirtualNetworkRule_Spec to Servers_VirtualNetworkRule_Spec via AssignProperties_To_Servers_VirtualNetworkRule_Spec & AssignProperties_From_Servers_VirtualNetworkRule_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForServers_VirtualNetworkRule_Spec, Servers_VirtualNetworkRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServers_VirtualNetworkRule_Spec tests if a specific instance of Servers_VirtualNetworkRule_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServers_VirtualNetworkRule_Spec(subject Servers_VirtualNetworkRule_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Servers_VirtualNetworkRule_Spec
	err := copied.AssignProperties_To_Servers_VirtualNetworkRule_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Servers_VirtualNetworkRule_Spec
	err = actual.AssignProperties_From_Servers_VirtualNetworkRule_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_VirtualNetworkRule_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_VirtualNetworkRule_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_VirtualNetworkRule_Spec, Servers_VirtualNetworkRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_VirtualNetworkRule_Spec runs a test to see if a specific instance of Servers_VirtualNetworkRule_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_VirtualNetworkRule_Spec(subject Servers_VirtualNetworkRule_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_VirtualNetworkRule_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_VirtualNetworkRule_Spec instances for property testing - lazily instantiated by
// Servers_VirtualNetworkRule_SpecGenerator()
var servers_VirtualNetworkRule_SpecGenerator gopter.Gen

// Servers_VirtualNetworkRule_SpecGenerator returns a generator of Servers_VirtualNetworkRule_Spec instances for property testing.
func Servers_VirtualNetworkRule_SpecGenerator() gopter.Gen {
	if servers_VirtualNetworkRule_SpecGenerator != nil {
		return servers_VirtualNetworkRule_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_VirtualNetworkRule_Spec(generators)
	servers_VirtualNetworkRule_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_VirtualNetworkRule_Spec{}), generators)

	return servers_VirtualNetworkRule_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_VirtualNetworkRule_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_VirtualNetworkRule_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["IgnoreMissingVnetServiceEndpoint"] = gen.PtrOf(gen.Bool())
}
