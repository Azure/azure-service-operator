// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServerFirewallRuleProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerFirewallRuleProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerFirewallRuleProperties, ServerFirewallRulePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerFirewallRuleProperties runs a test to see if a specific instance of ServerFirewallRuleProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForServerFirewallRuleProperties(subject ServerFirewallRuleProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerFirewallRuleProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerFirewallRuleProperties instances for property testing - lazily instantiated by
// ServerFirewallRulePropertiesGenerator()
var serverFirewallRulePropertiesGenerator gopter.Gen

// ServerFirewallRulePropertiesGenerator returns a generator of ServerFirewallRuleProperties instances for property testing.
func ServerFirewallRulePropertiesGenerator() gopter.Gen {
	if serverFirewallRulePropertiesGenerator != nil {
		return serverFirewallRulePropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerFirewallRuleProperties(generators)
	serverFirewallRulePropertiesGenerator = gen.Struct(reflect.TypeOf(ServerFirewallRuleProperties{}), generators)

	return serverFirewallRulePropertiesGenerator
}

// AddIndependentPropertyGeneratorsForServerFirewallRuleProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerFirewallRuleProperties(gens map[string]gopter.Gen) {
	gens["EndIpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["StartIpAddress"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServersFirewallRule_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersFirewallRule_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersFirewallRule_Spec, ServersFirewallRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersFirewallRule_Spec runs a test to see if a specific instance of ServersFirewallRule_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServersFirewallRule_Spec(subject ServersFirewallRule_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersFirewallRule_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersFirewallRule_Spec instances for property testing - lazily instantiated by
// ServersFirewallRule_SpecGenerator()
var serversFirewallRule_SpecGenerator gopter.Gen

// ServersFirewallRule_SpecGenerator returns a generator of ServersFirewallRule_Spec instances for property testing.
// We first initialize serversFirewallRule_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersFirewallRule_SpecGenerator() gopter.Gen {
	if serversFirewallRule_SpecGenerator != nil {
		return serversFirewallRule_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersFirewallRule_Spec(generators)
	serversFirewallRule_SpecGenerator = gen.Struct(reflect.TypeOf(ServersFirewallRule_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersFirewallRule_Spec(generators)
	AddRelatedPropertyGeneratorsForServersFirewallRule_Spec(generators)
	serversFirewallRule_SpecGenerator = gen.Struct(reflect.TypeOf(ServersFirewallRule_Spec{}), generators)

	return serversFirewallRule_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServersFirewallRule_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersFirewallRule_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForServersFirewallRule_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersFirewallRule_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerFirewallRulePropertiesGenerator())
}
