// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FailoverGroupProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupProperties_STATUS, FailoverGroupProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupProperties_STATUS runs a test to see if a specific instance of FailoverGroupProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupProperties_STATUS(subject FailoverGroupProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupProperties_STATUS instances for property testing - lazily instantiated by
// FailoverGroupProperties_STATUSGenerator()
var failoverGroupProperties_STATUSGenerator gopter.Gen

// FailoverGroupProperties_STATUSGenerator returns a generator of FailoverGroupProperties_STATUS instances for property testing.
// We first initialize failoverGroupProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FailoverGroupProperties_STATUSGenerator() gopter.Gen {
	if failoverGroupProperties_STATUSGenerator != nil {
		return failoverGroupProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupProperties_STATUS(generators)
	failoverGroupProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(FailoverGroupProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForFailoverGroupProperties_STATUS(generators)
	failoverGroupProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(FailoverGroupProperties_STATUS{}), generators)

	return failoverGroupProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupProperties_STATUS(gens map[string]gopter.Gen) {
	gens["Databases"] = gen.SliceOf(gen.AlphaString())
	gens["ReplicationRole"] = gen.PtrOf(gen.OneConstOf(FailoverGroupProperties_ReplicationRole_STATUS_Primary, FailoverGroupProperties_ReplicationRole_STATUS_Secondary))
	gens["ReplicationState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFailoverGroupProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFailoverGroupProperties_STATUS(gens map[string]gopter.Gen) {
	gens["PartnerServers"] = gen.SliceOf(PartnerInfo_STATUSGenerator())
	gens["ReadOnlyEndpoint"] = gen.PtrOf(FailoverGroupReadOnlyEndpoint_STATUSGenerator())
	gens["ReadWriteEndpoint"] = gen.PtrOf(FailoverGroupReadWriteEndpoint_STATUSGenerator())
}

func Test_FailoverGroupReadOnlyEndpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupReadOnlyEndpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint_STATUS, FailoverGroupReadOnlyEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint_STATUS runs a test to see if a specific instance of FailoverGroupReadOnlyEndpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint_STATUS(subject FailoverGroupReadOnlyEndpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupReadOnlyEndpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupReadOnlyEndpoint_STATUS instances for property testing - lazily instantiated by
// FailoverGroupReadOnlyEndpoint_STATUSGenerator()
var failoverGroupReadOnlyEndpoint_STATUSGenerator gopter.Gen

// FailoverGroupReadOnlyEndpoint_STATUSGenerator returns a generator of FailoverGroupReadOnlyEndpoint_STATUS instances for property testing.
func FailoverGroupReadOnlyEndpoint_STATUSGenerator() gopter.Gen {
	if failoverGroupReadOnlyEndpoint_STATUSGenerator != nil {
		return failoverGroupReadOnlyEndpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint_STATUS(generators)
	failoverGroupReadOnlyEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(FailoverGroupReadOnlyEndpoint_STATUS{}), generators)

	return failoverGroupReadOnlyEndpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["FailoverPolicy"] = gen.PtrOf(gen.OneConstOf(FailoverGroupReadOnlyEndpoint_FailoverPolicy_STATUS_Disabled, FailoverGroupReadOnlyEndpoint_FailoverPolicy_STATUS_Enabled))
}

func Test_FailoverGroupReadWriteEndpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupReadWriteEndpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupReadWriteEndpoint_STATUS, FailoverGroupReadWriteEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupReadWriteEndpoint_STATUS runs a test to see if a specific instance of FailoverGroupReadWriteEndpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupReadWriteEndpoint_STATUS(subject FailoverGroupReadWriteEndpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupReadWriteEndpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupReadWriteEndpoint_STATUS instances for property testing - lazily instantiated by
// FailoverGroupReadWriteEndpoint_STATUSGenerator()
var failoverGroupReadWriteEndpoint_STATUSGenerator gopter.Gen

// FailoverGroupReadWriteEndpoint_STATUSGenerator returns a generator of FailoverGroupReadWriteEndpoint_STATUS instances for property testing.
func FailoverGroupReadWriteEndpoint_STATUSGenerator() gopter.Gen {
	if failoverGroupReadWriteEndpoint_STATUSGenerator != nil {
		return failoverGroupReadWriteEndpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint_STATUS(generators)
	failoverGroupReadWriteEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(FailoverGroupReadWriteEndpoint_STATUS{}), generators)

	return failoverGroupReadWriteEndpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["FailoverPolicy"] = gen.PtrOf(gen.OneConstOf(FailoverGroupReadWriteEndpoint_FailoverPolicy_STATUS_Automatic, FailoverGroupReadWriteEndpoint_FailoverPolicy_STATUS_Manual))
	gens["FailoverWithDataLossGracePeriodMinutes"] = gen.PtrOf(gen.Int())
}

func Test_PartnerInfo_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PartnerInfo_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPartnerInfo_STATUS, PartnerInfo_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPartnerInfo_STATUS runs a test to see if a specific instance of PartnerInfo_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPartnerInfo_STATUS(subject PartnerInfo_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PartnerInfo_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PartnerInfo_STATUS instances for property testing - lazily instantiated by PartnerInfo_STATUSGenerator()
var partnerInfo_STATUSGenerator gopter.Gen

// PartnerInfo_STATUSGenerator returns a generator of PartnerInfo_STATUS instances for property testing.
func PartnerInfo_STATUSGenerator() gopter.Gen {
	if partnerInfo_STATUSGenerator != nil {
		return partnerInfo_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPartnerInfo_STATUS(generators)
	partnerInfo_STATUSGenerator = gen.Struct(reflect.TypeOf(PartnerInfo_STATUS{}), generators)

	return partnerInfo_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPartnerInfo_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPartnerInfo_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["ReplicationRole"] = gen.PtrOf(gen.OneConstOf(PartnerInfo_ReplicationRole_STATUS_Primary, PartnerInfo_ReplicationRole_STATUS_Secondary))
}

func Test_ServersFailoverGroup_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersFailoverGroup_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersFailoverGroup_STATUS, ServersFailoverGroup_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersFailoverGroup_STATUS runs a test to see if a specific instance of ServersFailoverGroup_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServersFailoverGroup_STATUS(subject ServersFailoverGroup_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersFailoverGroup_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersFailoverGroup_STATUS instances for property testing - lazily instantiated by
// ServersFailoverGroup_STATUSGenerator()
var serversFailoverGroup_STATUSGenerator gopter.Gen

// ServersFailoverGroup_STATUSGenerator returns a generator of ServersFailoverGroup_STATUS instances for property testing.
// We first initialize serversFailoverGroup_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersFailoverGroup_STATUSGenerator() gopter.Gen {
	if serversFailoverGroup_STATUSGenerator != nil {
		return serversFailoverGroup_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersFailoverGroup_STATUS(generators)
	serversFailoverGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersFailoverGroup_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersFailoverGroup_STATUS(generators)
	AddRelatedPropertyGeneratorsForServersFailoverGroup_STATUS(generators)
	serversFailoverGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersFailoverGroup_STATUS{}), generators)

	return serversFailoverGroup_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServersFailoverGroup_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersFailoverGroup_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServersFailoverGroup_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersFailoverGroup_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FailoverGroupProperties_STATUSGenerator())
}
