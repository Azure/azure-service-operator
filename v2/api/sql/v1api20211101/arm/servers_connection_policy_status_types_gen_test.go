// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServerConnectionPolicyProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerConnectionPolicyProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerConnectionPolicyProperties_STATUS, ServerConnectionPolicyProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerConnectionPolicyProperties_STATUS runs a test to see if a specific instance of ServerConnectionPolicyProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServerConnectionPolicyProperties_STATUS(subject ServerConnectionPolicyProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerConnectionPolicyProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerConnectionPolicyProperties_STATUS instances for property testing - lazily instantiated by
// ServerConnectionPolicyProperties_STATUSGenerator()
var serverConnectionPolicyProperties_STATUSGenerator gopter.Gen

// ServerConnectionPolicyProperties_STATUSGenerator returns a generator of ServerConnectionPolicyProperties_STATUS instances for property testing.
func ServerConnectionPolicyProperties_STATUSGenerator() gopter.Gen {
	if serverConnectionPolicyProperties_STATUSGenerator != nil {
		return serverConnectionPolicyProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerConnectionPolicyProperties_STATUS(generators)
	serverConnectionPolicyProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(ServerConnectionPolicyProperties_STATUS{}), generators)

	return serverConnectionPolicyProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServerConnectionPolicyProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerConnectionPolicyProperties_STATUS(gens map[string]gopter.Gen) {
	gens["ConnectionType"] = gen.PtrOf(gen.OneConstOf(ServerConnectionPolicyProperties_ConnectionType_STATUS_Default, ServerConnectionPolicyProperties_ConnectionType_STATUS_Proxy, ServerConnectionPolicyProperties_ConnectionType_STATUS_Redirect))
}

func Test_ServersConnectionPolicy_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersConnectionPolicy_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersConnectionPolicy_STATUS, ServersConnectionPolicy_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersConnectionPolicy_STATUS runs a test to see if a specific instance of ServersConnectionPolicy_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServersConnectionPolicy_STATUS(subject ServersConnectionPolicy_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersConnectionPolicy_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersConnectionPolicy_STATUS instances for property testing - lazily instantiated by
// ServersConnectionPolicy_STATUSGenerator()
var serversConnectionPolicy_STATUSGenerator gopter.Gen

// ServersConnectionPolicy_STATUSGenerator returns a generator of ServersConnectionPolicy_STATUS instances for property testing.
// We first initialize serversConnectionPolicy_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersConnectionPolicy_STATUSGenerator() gopter.Gen {
	if serversConnectionPolicy_STATUSGenerator != nil {
		return serversConnectionPolicy_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersConnectionPolicy_STATUS(generators)
	serversConnectionPolicy_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersConnectionPolicy_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersConnectionPolicy_STATUS(generators)
	AddRelatedPropertyGeneratorsForServersConnectionPolicy_STATUS(generators)
	serversConnectionPolicy_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersConnectionPolicy_STATUS{}), generators)

	return serversConnectionPolicy_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServersConnectionPolicy_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersConnectionPolicy_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServersConnectionPolicy_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersConnectionPolicy_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerConnectionPolicyProperties_STATUSGenerator())
}
