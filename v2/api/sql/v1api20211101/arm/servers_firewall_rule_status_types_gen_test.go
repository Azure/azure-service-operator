// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServerFirewallRuleProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerFirewallRuleProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerFirewallRuleProperties_STATUS, ServerFirewallRuleProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerFirewallRuleProperties_STATUS runs a test to see if a specific instance of ServerFirewallRuleProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServerFirewallRuleProperties_STATUS(subject ServerFirewallRuleProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerFirewallRuleProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerFirewallRuleProperties_STATUS instances for property testing - lazily instantiated by
// ServerFirewallRuleProperties_STATUSGenerator()
var serverFirewallRuleProperties_STATUSGenerator gopter.Gen

// ServerFirewallRuleProperties_STATUSGenerator returns a generator of ServerFirewallRuleProperties_STATUS instances for property testing.
func ServerFirewallRuleProperties_STATUSGenerator() gopter.Gen {
	if serverFirewallRuleProperties_STATUSGenerator != nil {
		return serverFirewallRuleProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerFirewallRuleProperties_STATUS(generators)
	serverFirewallRuleProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(ServerFirewallRuleProperties_STATUS{}), generators)

	return serverFirewallRuleProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServerFirewallRuleProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerFirewallRuleProperties_STATUS(gens map[string]gopter.Gen) {
	gens["EndIpAddress"] = gen.PtrOf(gen.AlphaString())
	gens["StartIpAddress"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServersFirewallRule_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersFirewallRule_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersFirewallRule_STATUS, ServersFirewallRule_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersFirewallRule_STATUS runs a test to see if a specific instance of ServersFirewallRule_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServersFirewallRule_STATUS(subject ServersFirewallRule_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersFirewallRule_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersFirewallRule_STATUS instances for property testing - lazily instantiated by
// ServersFirewallRule_STATUSGenerator()
var serversFirewallRule_STATUSGenerator gopter.Gen

// ServersFirewallRule_STATUSGenerator returns a generator of ServersFirewallRule_STATUS instances for property testing.
// We first initialize serversFirewallRule_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersFirewallRule_STATUSGenerator() gopter.Gen {
	if serversFirewallRule_STATUSGenerator != nil {
		return serversFirewallRule_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersFirewallRule_STATUS(generators)
	serversFirewallRule_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersFirewallRule_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersFirewallRule_STATUS(generators)
	AddRelatedPropertyGeneratorsForServersFirewallRule_STATUS(generators)
	serversFirewallRule_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersFirewallRule_STATUS{}), generators)

	return serversFirewallRule_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServersFirewallRule_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersFirewallRule_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServersFirewallRule_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersFirewallRule_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerFirewallRuleProperties_STATUSGenerator())
}
