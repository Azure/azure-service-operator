// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServerVulnerabilityAssessmentProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerVulnerabilityAssessmentProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerVulnerabilityAssessmentProperties, ServerVulnerabilityAssessmentPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerVulnerabilityAssessmentProperties runs a test to see if a specific instance of ServerVulnerabilityAssessmentProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForServerVulnerabilityAssessmentProperties(subject ServerVulnerabilityAssessmentProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerVulnerabilityAssessmentProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerVulnerabilityAssessmentProperties instances for property testing - lazily instantiated by
// ServerVulnerabilityAssessmentPropertiesGenerator()
var serverVulnerabilityAssessmentPropertiesGenerator gopter.Gen

// ServerVulnerabilityAssessmentPropertiesGenerator returns a generator of ServerVulnerabilityAssessmentProperties instances for property testing.
// We first initialize serverVulnerabilityAssessmentPropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServerVulnerabilityAssessmentPropertiesGenerator() gopter.Gen {
	if serverVulnerabilityAssessmentPropertiesGenerator != nil {
		return serverVulnerabilityAssessmentPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerVulnerabilityAssessmentProperties(generators)
	serverVulnerabilityAssessmentPropertiesGenerator = gen.Struct(reflect.TypeOf(ServerVulnerabilityAssessmentProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerVulnerabilityAssessmentProperties(generators)
	AddRelatedPropertyGeneratorsForServerVulnerabilityAssessmentProperties(generators)
	serverVulnerabilityAssessmentPropertiesGenerator = gen.Struct(reflect.TypeOf(ServerVulnerabilityAssessmentProperties{}), generators)

	return serverVulnerabilityAssessmentPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForServerVulnerabilityAssessmentProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerVulnerabilityAssessmentProperties(gens map[string]gopter.Gen) {
	gens["StorageAccountAccessKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerPath"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerSasKey"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServerVulnerabilityAssessmentProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServerVulnerabilityAssessmentProperties(gens map[string]gopter.Gen) {
	gens["RecurringScans"] = gen.PtrOf(VulnerabilityAssessmentRecurringScansPropertiesGenerator())
}

func Test_ServersVulnerabilityAssessment_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersVulnerabilityAssessment_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersVulnerabilityAssessment_Spec, ServersVulnerabilityAssessment_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersVulnerabilityAssessment_Spec runs a test to see if a specific instance of ServersVulnerabilityAssessment_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServersVulnerabilityAssessment_Spec(subject ServersVulnerabilityAssessment_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersVulnerabilityAssessment_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersVulnerabilityAssessment_Spec instances for property testing - lazily instantiated by
// ServersVulnerabilityAssessment_SpecGenerator()
var serversVulnerabilityAssessment_SpecGenerator gopter.Gen

// ServersVulnerabilityAssessment_SpecGenerator returns a generator of ServersVulnerabilityAssessment_Spec instances for property testing.
// We first initialize serversVulnerabilityAssessment_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersVulnerabilityAssessment_SpecGenerator() gopter.Gen {
	if serversVulnerabilityAssessment_SpecGenerator != nil {
		return serversVulnerabilityAssessment_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersVulnerabilityAssessment_Spec(generators)
	serversVulnerabilityAssessment_SpecGenerator = gen.Struct(reflect.TypeOf(ServersVulnerabilityAssessment_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersVulnerabilityAssessment_Spec(generators)
	AddRelatedPropertyGeneratorsForServersVulnerabilityAssessment_Spec(generators)
	serversVulnerabilityAssessment_SpecGenerator = gen.Struct(reflect.TypeOf(ServersVulnerabilityAssessment_Spec{}), generators)

	return serversVulnerabilityAssessment_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServersVulnerabilityAssessment_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersVulnerabilityAssessment_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForServersVulnerabilityAssessment_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersVulnerabilityAssessment_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerVulnerabilityAssessmentPropertiesGenerator())
}
