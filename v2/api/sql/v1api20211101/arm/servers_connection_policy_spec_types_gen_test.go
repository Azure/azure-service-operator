// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServerConnectionPolicyProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerConnectionPolicyProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerConnectionPolicyProperties, ServerConnectionPolicyPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerConnectionPolicyProperties runs a test to see if a specific instance of ServerConnectionPolicyProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForServerConnectionPolicyProperties(subject ServerConnectionPolicyProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerConnectionPolicyProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerConnectionPolicyProperties instances for property testing - lazily instantiated by
// ServerConnectionPolicyPropertiesGenerator()
var serverConnectionPolicyPropertiesGenerator gopter.Gen

// ServerConnectionPolicyPropertiesGenerator returns a generator of ServerConnectionPolicyProperties instances for property testing.
func ServerConnectionPolicyPropertiesGenerator() gopter.Gen {
	if serverConnectionPolicyPropertiesGenerator != nil {
		return serverConnectionPolicyPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerConnectionPolicyProperties(generators)
	serverConnectionPolicyPropertiesGenerator = gen.Struct(reflect.TypeOf(ServerConnectionPolicyProperties{}), generators)

	return serverConnectionPolicyPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForServerConnectionPolicyProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerConnectionPolicyProperties(gens map[string]gopter.Gen) {
	gens["ConnectionType"] = gen.PtrOf(gen.OneConstOf(ServerConnectionPolicyProperties_ConnectionType_Default, ServerConnectionPolicyProperties_ConnectionType_Proxy, ServerConnectionPolicyProperties_ConnectionType_Redirect))
}

func Test_ServersConnectionPolicy_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersConnectionPolicy_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersConnectionPolicy_Spec, ServersConnectionPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersConnectionPolicy_Spec runs a test to see if a specific instance of ServersConnectionPolicy_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServersConnectionPolicy_Spec(subject ServersConnectionPolicy_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersConnectionPolicy_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersConnectionPolicy_Spec instances for property testing - lazily instantiated by
// ServersConnectionPolicy_SpecGenerator()
var serversConnectionPolicy_SpecGenerator gopter.Gen

// ServersConnectionPolicy_SpecGenerator returns a generator of ServersConnectionPolicy_Spec instances for property testing.
// We first initialize serversConnectionPolicy_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersConnectionPolicy_SpecGenerator() gopter.Gen {
	if serversConnectionPolicy_SpecGenerator != nil {
		return serversConnectionPolicy_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersConnectionPolicy_Spec(generators)
	serversConnectionPolicy_SpecGenerator = gen.Struct(reflect.TypeOf(ServersConnectionPolicy_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersConnectionPolicy_Spec(generators)
	AddRelatedPropertyGeneratorsForServersConnectionPolicy_Spec(generators)
	serversConnectionPolicy_SpecGenerator = gen.Struct(reflect.TypeOf(ServersConnectionPolicy_Spec{}), generators)

	return serversConnectionPolicy_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServersConnectionPolicy_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersConnectionPolicy_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForServersConnectionPolicy_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersConnectionPolicy_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerConnectionPolicyPropertiesGenerator())
}
