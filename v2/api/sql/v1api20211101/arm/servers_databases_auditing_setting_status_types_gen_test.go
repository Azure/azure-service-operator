// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseBlobAuditingPolicyProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseBlobAuditingPolicyProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseBlobAuditingPolicyProperties_STATUS, DatabaseBlobAuditingPolicyProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseBlobAuditingPolicyProperties_STATUS runs a test to see if a specific instance of DatabaseBlobAuditingPolicyProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseBlobAuditingPolicyProperties_STATUS(subject DatabaseBlobAuditingPolicyProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseBlobAuditingPolicyProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseBlobAuditingPolicyProperties_STATUS instances for property testing - lazily instantiated by
// DatabaseBlobAuditingPolicyProperties_STATUSGenerator()
var databaseBlobAuditingPolicyProperties_STATUSGenerator gopter.Gen

// DatabaseBlobAuditingPolicyProperties_STATUSGenerator returns a generator of DatabaseBlobAuditingPolicyProperties_STATUS instances for property testing.
func DatabaseBlobAuditingPolicyProperties_STATUSGenerator() gopter.Gen {
	if databaseBlobAuditingPolicyProperties_STATUSGenerator != nil {
		return databaseBlobAuditingPolicyProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseBlobAuditingPolicyProperties_STATUS(generators)
	databaseBlobAuditingPolicyProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(DatabaseBlobAuditingPolicyProperties_STATUS{}), generators)

	return databaseBlobAuditingPolicyProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseBlobAuditingPolicyProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseBlobAuditingPolicyProperties_STATUS(gens map[string]gopter.Gen) {
	gens["AuditActionsAndGroups"] = gen.SliceOf(gen.AlphaString())
	gens["IsAzureMonitorTargetEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsManagedIdentityInUse"] = gen.PtrOf(gen.Bool())
	gens["IsStorageSecondaryKeyInUse"] = gen.PtrOf(gen.Bool())
	gens["QueueDelayMs"] = gen.PtrOf(gen.Int())
	gens["RetentionDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.OneConstOf(DatabaseBlobAuditingPolicyProperties_State_STATUS_Disabled, DatabaseBlobAuditingPolicyProperties_State_STATUS_Enabled))
	gens["StorageAccountSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageEndpoint"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServersDatabasesAuditingSetting_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersDatabasesAuditingSetting_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersDatabasesAuditingSetting_STATUS, ServersDatabasesAuditingSetting_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersDatabasesAuditingSetting_STATUS runs a test to see if a specific instance of ServersDatabasesAuditingSetting_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServersDatabasesAuditingSetting_STATUS(subject ServersDatabasesAuditingSetting_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersDatabasesAuditingSetting_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersDatabasesAuditingSetting_STATUS instances for property testing - lazily instantiated by
// ServersDatabasesAuditingSetting_STATUSGenerator()
var serversDatabasesAuditingSetting_STATUSGenerator gopter.Gen

// ServersDatabasesAuditingSetting_STATUSGenerator returns a generator of ServersDatabasesAuditingSetting_STATUS instances for property testing.
// We first initialize serversDatabasesAuditingSetting_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersDatabasesAuditingSetting_STATUSGenerator() gopter.Gen {
	if serversDatabasesAuditingSetting_STATUSGenerator != nil {
		return serversDatabasesAuditingSetting_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS(generators)
	serversDatabasesAuditingSetting_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersDatabasesAuditingSetting_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS(generators)
	AddRelatedPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS(generators)
	serversDatabasesAuditingSetting_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersDatabasesAuditingSetting_STATUS{}), generators)

	return serversDatabasesAuditingSetting_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DatabaseBlobAuditingPolicyProperties_STATUSGenerator())
}
