// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package arm

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AdvancedThreatProtectionProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AdvancedThreatProtectionProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAdvancedThreatProtectionProperties, AdvancedThreatProtectionPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAdvancedThreatProtectionProperties runs a test to see if a specific instance of AdvancedThreatProtectionProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForAdvancedThreatProtectionProperties(subject AdvancedThreatProtectionProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AdvancedThreatProtectionProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AdvancedThreatProtectionProperties instances for property testing - lazily instantiated by
// AdvancedThreatProtectionPropertiesGenerator()
var advancedThreatProtectionPropertiesGenerator gopter.Gen

// AdvancedThreatProtectionPropertiesGenerator returns a generator of AdvancedThreatProtectionProperties instances for property testing.
func AdvancedThreatProtectionPropertiesGenerator() gopter.Gen {
	if advancedThreatProtectionPropertiesGenerator != nil {
		return advancedThreatProtectionPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAdvancedThreatProtectionProperties(generators)
	advancedThreatProtectionPropertiesGenerator = gen.Struct(reflect.TypeOf(AdvancedThreatProtectionProperties{}), generators)

	return advancedThreatProtectionPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForAdvancedThreatProtectionProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAdvancedThreatProtectionProperties(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.OneConstOf(AdvancedThreatProtectionProperties_State_Disabled, AdvancedThreatProtectionProperties_State_Enabled, AdvancedThreatProtectionProperties_State_New))
}

func Test_ServersAdvancedThreatProtectionSetting_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersAdvancedThreatProtectionSetting_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersAdvancedThreatProtectionSetting_Spec, ServersAdvancedThreatProtectionSetting_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersAdvancedThreatProtectionSetting_Spec runs a test to see if a specific instance of ServersAdvancedThreatProtectionSetting_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServersAdvancedThreatProtectionSetting_Spec(subject ServersAdvancedThreatProtectionSetting_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersAdvancedThreatProtectionSetting_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersAdvancedThreatProtectionSetting_Spec instances for property testing - lazily instantiated by
// ServersAdvancedThreatProtectionSetting_SpecGenerator()
var serversAdvancedThreatProtectionSetting_SpecGenerator gopter.Gen

// ServersAdvancedThreatProtectionSetting_SpecGenerator returns a generator of ServersAdvancedThreatProtectionSetting_Spec instances for property testing.
// We first initialize serversAdvancedThreatProtectionSetting_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersAdvancedThreatProtectionSetting_SpecGenerator() gopter.Gen {
	if serversAdvancedThreatProtectionSetting_SpecGenerator != nil {
		return serversAdvancedThreatProtectionSetting_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersAdvancedThreatProtectionSetting_Spec(generators)
	serversAdvancedThreatProtectionSetting_SpecGenerator = gen.Struct(reflect.TypeOf(ServersAdvancedThreatProtectionSetting_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersAdvancedThreatProtectionSetting_Spec(generators)
	AddRelatedPropertyGeneratorsForServersAdvancedThreatProtectionSetting_Spec(generators)
	serversAdvancedThreatProtectionSetting_SpecGenerator = gen.Struct(reflect.TypeOf(ServersAdvancedThreatProtectionSetting_Spec{}), generators)

	return serversAdvancedThreatProtectionSetting_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServersAdvancedThreatProtectionSetting_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersAdvancedThreatProtectionSetting_Spec(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForServersAdvancedThreatProtectionSetting_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersAdvancedThreatProtectionSetting_Spec(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AdvancedThreatProtectionPropertiesGenerator())
}
