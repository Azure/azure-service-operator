// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/sql/v1api20211101/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersSecurityAlertPolicy_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersSecurityAlertPolicy to hub returns original",
		prop.ForAll(RunResourceConversionTestForServersSecurityAlertPolicy, ServersSecurityAlertPolicyGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForServersSecurityAlertPolicy tests if a specific instance of ServersSecurityAlertPolicy round trips to the hub storage version and back losslessly
func RunResourceConversionTestForServersSecurityAlertPolicy(subject ServersSecurityAlertPolicy) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.ServersSecurityAlertPolicy
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual ServersSecurityAlertPolicy
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersSecurityAlertPolicy_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersSecurityAlertPolicy to ServersSecurityAlertPolicy via AssignProperties_To_ServersSecurityAlertPolicy & AssignProperties_From_ServersSecurityAlertPolicy returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersSecurityAlertPolicy, ServersSecurityAlertPolicyGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersSecurityAlertPolicy tests if a specific instance of ServersSecurityAlertPolicy can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServersSecurityAlertPolicy(subject ServersSecurityAlertPolicy) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ServersSecurityAlertPolicy
	err := copied.AssignProperties_To_ServersSecurityAlertPolicy(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersSecurityAlertPolicy
	err = actual.AssignProperties_From_ServersSecurityAlertPolicy(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersSecurityAlertPolicy_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersSecurityAlertPolicy via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersSecurityAlertPolicy, ServersSecurityAlertPolicyGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersSecurityAlertPolicy runs a test to see if a specific instance of ServersSecurityAlertPolicy round trips to JSON and back losslessly
func RunJSONSerializationTestForServersSecurityAlertPolicy(subject ServersSecurityAlertPolicy) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersSecurityAlertPolicy
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersSecurityAlertPolicy instances for property testing - lazily instantiated by
// ServersSecurityAlertPolicyGenerator()
var serversSecurityAlertPolicyGenerator gopter.Gen

// ServersSecurityAlertPolicyGenerator returns a generator of ServersSecurityAlertPolicy instances for property testing.
func ServersSecurityAlertPolicyGenerator() gopter.Gen {
	if serversSecurityAlertPolicyGenerator != nil {
		return serversSecurityAlertPolicyGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServersSecurityAlertPolicy(generators)
	serversSecurityAlertPolicyGenerator = gen.Struct(reflect.TypeOf(ServersSecurityAlertPolicy{}), generators)

	return serversSecurityAlertPolicyGenerator
}

// AddRelatedPropertyGeneratorsForServersSecurityAlertPolicy is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersSecurityAlertPolicy(gens map[string]gopter.Gen) {
	gens["Spec"] = ServersSecurityAlertPolicy_SpecGenerator()
	gens["Status"] = ServersSecurityAlertPolicy_STATUSGenerator()
}

func Test_ServersSecurityAlertPolicyOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersSecurityAlertPolicyOperatorSpec to ServersSecurityAlertPolicyOperatorSpec via AssignProperties_To_ServersSecurityAlertPolicyOperatorSpec & AssignProperties_From_ServersSecurityAlertPolicyOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersSecurityAlertPolicyOperatorSpec, ServersSecurityAlertPolicyOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersSecurityAlertPolicyOperatorSpec tests if a specific instance of ServersSecurityAlertPolicyOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServersSecurityAlertPolicyOperatorSpec(subject ServersSecurityAlertPolicyOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ServersSecurityAlertPolicyOperatorSpec
	err := copied.AssignProperties_To_ServersSecurityAlertPolicyOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersSecurityAlertPolicyOperatorSpec
	err = actual.AssignProperties_From_ServersSecurityAlertPolicyOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersSecurityAlertPolicyOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersSecurityAlertPolicyOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersSecurityAlertPolicyOperatorSpec, ServersSecurityAlertPolicyOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersSecurityAlertPolicyOperatorSpec runs a test to see if a specific instance of ServersSecurityAlertPolicyOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForServersSecurityAlertPolicyOperatorSpec(subject ServersSecurityAlertPolicyOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersSecurityAlertPolicyOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersSecurityAlertPolicyOperatorSpec instances for property testing - lazily instantiated by
// ServersSecurityAlertPolicyOperatorSpecGenerator()
var serversSecurityAlertPolicyOperatorSpecGenerator gopter.Gen

// ServersSecurityAlertPolicyOperatorSpecGenerator returns a generator of ServersSecurityAlertPolicyOperatorSpec instances for property testing.
func ServersSecurityAlertPolicyOperatorSpecGenerator() gopter.Gen {
	if serversSecurityAlertPolicyOperatorSpecGenerator != nil {
		return serversSecurityAlertPolicyOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	serversSecurityAlertPolicyOperatorSpecGenerator = gen.Struct(reflect.TypeOf(ServersSecurityAlertPolicyOperatorSpec{}), generators)

	return serversSecurityAlertPolicyOperatorSpecGenerator
}

func Test_ServersSecurityAlertPolicy_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersSecurityAlertPolicy_STATUS to ServersSecurityAlertPolicy_STATUS via AssignProperties_To_ServersSecurityAlertPolicy_STATUS & AssignProperties_From_ServersSecurityAlertPolicy_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersSecurityAlertPolicy_STATUS, ServersSecurityAlertPolicy_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersSecurityAlertPolicy_STATUS tests if a specific instance of ServersSecurityAlertPolicy_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServersSecurityAlertPolicy_STATUS(subject ServersSecurityAlertPolicy_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ServersSecurityAlertPolicy_STATUS
	err := copied.AssignProperties_To_ServersSecurityAlertPolicy_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersSecurityAlertPolicy_STATUS
	err = actual.AssignProperties_From_ServersSecurityAlertPolicy_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersSecurityAlertPolicy_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersSecurityAlertPolicy_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersSecurityAlertPolicy_STATUS, ServersSecurityAlertPolicy_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersSecurityAlertPolicy_STATUS runs a test to see if a specific instance of ServersSecurityAlertPolicy_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServersSecurityAlertPolicy_STATUS(subject ServersSecurityAlertPolicy_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersSecurityAlertPolicy_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersSecurityAlertPolicy_STATUS instances for property testing - lazily instantiated by
// ServersSecurityAlertPolicy_STATUSGenerator()
var serversSecurityAlertPolicy_STATUSGenerator gopter.Gen

// ServersSecurityAlertPolicy_STATUSGenerator returns a generator of ServersSecurityAlertPolicy_STATUS instances for property testing.
// We first initialize serversSecurityAlertPolicy_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersSecurityAlertPolicy_STATUSGenerator() gopter.Gen {
	if serversSecurityAlertPolicy_STATUSGenerator != nil {
		return serversSecurityAlertPolicy_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersSecurityAlertPolicy_STATUS(generators)
	serversSecurityAlertPolicy_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersSecurityAlertPolicy_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersSecurityAlertPolicy_STATUS(generators)
	AddRelatedPropertyGeneratorsForServersSecurityAlertPolicy_STATUS(generators)
	serversSecurityAlertPolicy_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersSecurityAlertPolicy_STATUS{}), generators)

	return serversSecurityAlertPolicy_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServersSecurityAlertPolicy_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersSecurityAlertPolicy_STATUS(gens map[string]gopter.Gen) {
	gens["CreationTime"] = gen.PtrOf(gen.AlphaString())
	gens["DisabledAlerts"] = gen.SliceOf(gen.AlphaString())
	gens["EmailAccountAdmins"] = gen.PtrOf(gen.Bool())
	gens["EmailAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RetentionDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.OneConstOf(ServerSecurityAlertPoliciesSecurityAlertsPolicyProperties_State_STATUS_Disabled, ServerSecurityAlertPoliciesSecurityAlertsPolicyProperties_State_STATUS_Enabled))
	gens["StorageEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServersSecurityAlertPolicy_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersSecurityAlertPolicy_STATUS(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_ServersSecurityAlertPolicy_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersSecurityAlertPolicy_Spec to ServersSecurityAlertPolicy_Spec via AssignProperties_To_ServersSecurityAlertPolicy_Spec & AssignProperties_From_ServersSecurityAlertPolicy_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersSecurityAlertPolicy_Spec, ServersSecurityAlertPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersSecurityAlertPolicy_Spec tests if a specific instance of ServersSecurityAlertPolicy_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServersSecurityAlertPolicy_Spec(subject ServersSecurityAlertPolicy_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ServersSecurityAlertPolicy_Spec
	err := copied.AssignProperties_To_ServersSecurityAlertPolicy_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersSecurityAlertPolicy_Spec
	err = actual.AssignProperties_From_ServersSecurityAlertPolicy_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersSecurityAlertPolicy_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersSecurityAlertPolicy_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersSecurityAlertPolicy_Spec, ServersSecurityAlertPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersSecurityAlertPolicy_Spec runs a test to see if a specific instance of ServersSecurityAlertPolicy_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServersSecurityAlertPolicy_Spec(subject ServersSecurityAlertPolicy_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersSecurityAlertPolicy_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersSecurityAlertPolicy_Spec instances for property testing - lazily instantiated by
// ServersSecurityAlertPolicy_SpecGenerator()
var serversSecurityAlertPolicy_SpecGenerator gopter.Gen

// ServersSecurityAlertPolicy_SpecGenerator returns a generator of ServersSecurityAlertPolicy_Spec instances for property testing.
// We first initialize serversSecurityAlertPolicy_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersSecurityAlertPolicy_SpecGenerator() gopter.Gen {
	if serversSecurityAlertPolicy_SpecGenerator != nil {
		return serversSecurityAlertPolicy_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersSecurityAlertPolicy_Spec(generators)
	serversSecurityAlertPolicy_SpecGenerator = gen.Struct(reflect.TypeOf(ServersSecurityAlertPolicy_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersSecurityAlertPolicy_Spec(generators)
	AddRelatedPropertyGeneratorsForServersSecurityAlertPolicy_Spec(generators)
	serversSecurityAlertPolicy_SpecGenerator = gen.Struct(reflect.TypeOf(ServersSecurityAlertPolicy_Spec{}), generators)

	return serversSecurityAlertPolicy_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServersSecurityAlertPolicy_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersSecurityAlertPolicy_Spec(gens map[string]gopter.Gen) {
	gens["DisabledAlerts"] = gen.SliceOf(gen.AlphaString())
	gens["EmailAccountAdmins"] = gen.PtrOf(gen.Bool())
	gens["EmailAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["RetentionDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.OneConstOf(ServerSecurityAlertPoliciesSecurityAlertsPolicyProperties_State_Disabled, ServerSecurityAlertPoliciesSecurityAlertsPolicyProperties_State_Enabled))
	gens["StorageEndpoint"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServersSecurityAlertPolicy_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersSecurityAlertPolicy_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(ServersSecurityAlertPolicyOperatorSpecGenerator())
}
