// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FailoverGroupProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupProperties_STATUS_ARM, FailoverGroupProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupProperties_STATUS_ARM runs a test to see if a specific instance of FailoverGroupProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupProperties_STATUS_ARM(subject FailoverGroupProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupProperties_STATUS_ARM instances for property testing - lazily instantiated by
// FailoverGroupProperties_STATUS_ARMGenerator()
var failoverGroupProperties_STATUS_ARMGenerator gopter.Gen

// FailoverGroupProperties_STATUS_ARMGenerator returns a generator of FailoverGroupProperties_STATUS_ARM instances for property testing.
// We first initialize failoverGroupProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FailoverGroupProperties_STATUS_ARMGenerator() gopter.Gen {
	if failoverGroupProperties_STATUS_ARMGenerator != nil {
		return failoverGroupProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupProperties_STATUS_ARM(generators)
	failoverGroupProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FailoverGroupProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFailoverGroupProperties_STATUS_ARM(generators)
	failoverGroupProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FailoverGroupProperties_STATUS_ARM{}), generators)

	return failoverGroupProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Databases"] = gen.SliceOf(gen.AlphaString())
	gens["ReplicationRole"] = gen.PtrOf(gen.OneConstOf(FailoverGroupProperties_ReplicationRole_STATUS_Primary, FailoverGroupProperties_ReplicationRole_STATUS_Secondary))
	gens["ReplicationState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFailoverGroupProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFailoverGroupProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PartnerServers"] = gen.SliceOf(PartnerInfo_STATUS_ARMGenerator())
	gens["ReadOnlyEndpoint"] = gen.PtrOf(FailoverGroupReadOnlyEndpoint_STATUS_ARMGenerator())
	gens["ReadWriteEndpoint"] = gen.PtrOf(FailoverGroupReadWriteEndpoint_STATUS_ARMGenerator())
}

func Test_FailoverGroupReadOnlyEndpoint_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupReadOnlyEndpoint_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint_STATUS_ARM, FailoverGroupReadOnlyEndpoint_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint_STATUS_ARM runs a test to see if a specific instance of FailoverGroupReadOnlyEndpoint_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint_STATUS_ARM(subject FailoverGroupReadOnlyEndpoint_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupReadOnlyEndpoint_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupReadOnlyEndpoint_STATUS_ARM instances for property testing - lazily instantiated by
// FailoverGroupReadOnlyEndpoint_STATUS_ARMGenerator()
var failoverGroupReadOnlyEndpoint_STATUS_ARMGenerator gopter.Gen

// FailoverGroupReadOnlyEndpoint_STATUS_ARMGenerator returns a generator of FailoverGroupReadOnlyEndpoint_STATUS_ARM instances for property testing.
func FailoverGroupReadOnlyEndpoint_STATUS_ARMGenerator() gopter.Gen {
	if failoverGroupReadOnlyEndpoint_STATUS_ARMGenerator != nil {
		return failoverGroupReadOnlyEndpoint_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint_STATUS_ARM(generators)
	failoverGroupReadOnlyEndpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FailoverGroupReadOnlyEndpoint_STATUS_ARM{}), generators)

	return failoverGroupReadOnlyEndpoint_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["FailoverPolicy"] = gen.PtrOf(gen.OneConstOf(FailoverGroupReadOnlyEndpoint_FailoverPolicy_STATUS_Disabled, FailoverGroupReadOnlyEndpoint_FailoverPolicy_STATUS_Enabled))
}

func Test_FailoverGroupReadWriteEndpoint_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupReadWriteEndpoint_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupReadWriteEndpoint_STATUS_ARM, FailoverGroupReadWriteEndpoint_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupReadWriteEndpoint_STATUS_ARM runs a test to see if a specific instance of FailoverGroupReadWriteEndpoint_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupReadWriteEndpoint_STATUS_ARM(subject FailoverGroupReadWriteEndpoint_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupReadWriteEndpoint_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupReadWriteEndpoint_STATUS_ARM instances for property testing - lazily instantiated by
// FailoverGroupReadWriteEndpoint_STATUS_ARMGenerator()
var failoverGroupReadWriteEndpoint_STATUS_ARMGenerator gopter.Gen

// FailoverGroupReadWriteEndpoint_STATUS_ARMGenerator returns a generator of FailoverGroupReadWriteEndpoint_STATUS_ARM instances for property testing.
func FailoverGroupReadWriteEndpoint_STATUS_ARMGenerator() gopter.Gen {
	if failoverGroupReadWriteEndpoint_STATUS_ARMGenerator != nil {
		return failoverGroupReadWriteEndpoint_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint_STATUS_ARM(generators)
	failoverGroupReadWriteEndpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FailoverGroupReadWriteEndpoint_STATUS_ARM{}), generators)

	return failoverGroupReadWriteEndpoint_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["FailoverPolicy"] = gen.PtrOf(gen.OneConstOf(FailoverGroupReadWriteEndpoint_FailoverPolicy_STATUS_Automatic, FailoverGroupReadWriteEndpoint_FailoverPolicy_STATUS_Manual))
	gens["FailoverWithDataLossGracePeriodMinutes"] = gen.PtrOf(gen.Int())
}

func Test_PartnerInfo_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PartnerInfo_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPartnerInfo_STATUS_ARM, PartnerInfo_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPartnerInfo_STATUS_ARM runs a test to see if a specific instance of PartnerInfo_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPartnerInfo_STATUS_ARM(subject PartnerInfo_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PartnerInfo_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PartnerInfo_STATUS_ARM instances for property testing - lazily instantiated by
// PartnerInfo_STATUS_ARMGenerator()
var partnerInfo_STATUS_ARMGenerator gopter.Gen

// PartnerInfo_STATUS_ARMGenerator returns a generator of PartnerInfo_STATUS_ARM instances for property testing.
func PartnerInfo_STATUS_ARMGenerator() gopter.Gen {
	if partnerInfo_STATUS_ARMGenerator != nil {
		return partnerInfo_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPartnerInfo_STATUS_ARM(generators)
	partnerInfo_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PartnerInfo_STATUS_ARM{}), generators)

	return partnerInfo_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPartnerInfo_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPartnerInfo_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["ReplicationRole"] = gen.PtrOf(gen.OneConstOf(PartnerInfo_ReplicationRole_STATUS_Primary, PartnerInfo_ReplicationRole_STATUS_Secondary))
}

func Test_Servers_FailoverGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_FailoverGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_FailoverGroup_STATUS_ARM, Servers_FailoverGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_FailoverGroup_STATUS_ARM runs a test to see if a specific instance of Servers_FailoverGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_FailoverGroup_STATUS_ARM(subject Servers_FailoverGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_FailoverGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_FailoverGroup_STATUS_ARM instances for property testing - lazily instantiated by
// Servers_FailoverGroup_STATUS_ARMGenerator()
var servers_FailoverGroup_STATUS_ARMGenerator gopter.Gen

// Servers_FailoverGroup_STATUS_ARMGenerator returns a generator of Servers_FailoverGroup_STATUS_ARM instances for property testing.
// We first initialize servers_FailoverGroup_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_FailoverGroup_STATUS_ARMGenerator() gopter.Gen {
	if servers_FailoverGroup_STATUS_ARMGenerator != nil {
		return servers_FailoverGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_FailoverGroup_STATUS_ARM(generators)
	servers_FailoverGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_FailoverGroup_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_FailoverGroup_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForServers_FailoverGroup_STATUS_ARM(generators)
	servers_FailoverGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_FailoverGroup_STATUS_ARM{}), generators)

	return servers_FailoverGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServers_FailoverGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_FailoverGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_FailoverGroup_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_FailoverGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FailoverGroupProperties_STATUS_ARMGenerator())
}
