// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1api20211101/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersFailoverGroup_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersFailoverGroup to hub returns original",
		prop.ForAll(RunResourceConversionTestForServersFailoverGroup, ServersFailoverGroupGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForServersFailoverGroup tests if a specific instance of ServersFailoverGroup round trips to the hub storage version and back losslessly
func RunResourceConversionTestForServersFailoverGroup(subject ServersFailoverGroup) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20211101s.ServersFailoverGroup
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual ServersFailoverGroup
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersFailoverGroup_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersFailoverGroup to ServersFailoverGroup via AssignProperties_To_ServersFailoverGroup & AssignProperties_From_ServersFailoverGroup returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersFailoverGroup, ServersFailoverGroupGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersFailoverGroup tests if a specific instance of ServersFailoverGroup can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServersFailoverGroup(subject ServersFailoverGroup) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.ServersFailoverGroup
	err := copied.AssignProperties_To_ServersFailoverGroup(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersFailoverGroup
	err = actual.AssignProperties_From_ServersFailoverGroup(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersFailoverGroup_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersFailoverGroup via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersFailoverGroup, ServersFailoverGroupGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersFailoverGroup runs a test to see if a specific instance of ServersFailoverGroup round trips to JSON and back losslessly
func RunJSONSerializationTestForServersFailoverGroup(subject ServersFailoverGroup) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersFailoverGroup
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersFailoverGroup instances for property testing - lazily instantiated by
// ServersFailoverGroupGenerator()
var serversFailoverGroupGenerator gopter.Gen

// ServersFailoverGroupGenerator returns a generator of ServersFailoverGroup instances for property testing.
func ServersFailoverGroupGenerator() gopter.Gen {
	if serversFailoverGroupGenerator != nil {
		return serversFailoverGroupGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServersFailoverGroup(generators)
	serversFailoverGroupGenerator = gen.Struct(reflect.TypeOf(ServersFailoverGroup{}), generators)

	return serversFailoverGroupGenerator
}

// AddRelatedPropertyGeneratorsForServersFailoverGroup is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersFailoverGroup(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_FailoverGroup_SpecGenerator()
	gens["Status"] = Servers_FailoverGroup_STATUSGenerator()
}

func Test_Servers_FailoverGroup_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_FailoverGroup_Spec to Servers_FailoverGroup_Spec via AssignProperties_To_Servers_FailoverGroup_Spec & AssignProperties_From_Servers_FailoverGroup_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForServers_FailoverGroup_Spec, Servers_FailoverGroup_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServers_FailoverGroup_Spec tests if a specific instance of Servers_FailoverGroup_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServers_FailoverGroup_Spec(subject Servers_FailoverGroup_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.Servers_FailoverGroup_Spec
	err := copied.AssignProperties_To_Servers_FailoverGroup_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Servers_FailoverGroup_Spec
	err = actual.AssignProperties_From_Servers_FailoverGroup_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_FailoverGroup_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_FailoverGroup_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_FailoverGroup_Spec, Servers_FailoverGroup_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_FailoverGroup_Spec runs a test to see if a specific instance of Servers_FailoverGroup_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_FailoverGroup_Spec(subject Servers_FailoverGroup_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_FailoverGroup_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_FailoverGroup_Spec instances for property testing - lazily instantiated by
// Servers_FailoverGroup_SpecGenerator()
var servers_FailoverGroup_SpecGenerator gopter.Gen

// Servers_FailoverGroup_SpecGenerator returns a generator of Servers_FailoverGroup_Spec instances for property testing.
// We first initialize servers_FailoverGroup_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_FailoverGroup_SpecGenerator() gopter.Gen {
	if servers_FailoverGroup_SpecGenerator != nil {
		return servers_FailoverGroup_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_FailoverGroup_Spec(generators)
	servers_FailoverGroup_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_FailoverGroup_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_FailoverGroup_Spec(generators)
	AddRelatedPropertyGeneratorsForServers_FailoverGroup_Spec(generators)
	servers_FailoverGroup_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_FailoverGroup_Spec{}), generators)

	return servers_FailoverGroup_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_FailoverGroup_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_FailoverGroup_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_FailoverGroup_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_FailoverGroup_Spec(gens map[string]gopter.Gen) {
	gens["PartnerServers"] = gen.SliceOf(PartnerInfoGenerator())
	gens["ReadOnlyEndpoint"] = gen.PtrOf(FailoverGroupReadOnlyEndpointGenerator())
	gens["ReadWriteEndpoint"] = gen.PtrOf(FailoverGroupReadWriteEndpointGenerator())
}

func Test_Servers_FailoverGroup_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_FailoverGroup_STATUS to Servers_FailoverGroup_STATUS via AssignProperties_To_Servers_FailoverGroup_STATUS & AssignProperties_From_Servers_FailoverGroup_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForServers_FailoverGroup_STATUS, Servers_FailoverGroup_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServers_FailoverGroup_STATUS tests if a specific instance of Servers_FailoverGroup_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServers_FailoverGroup_STATUS(subject Servers_FailoverGroup_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.Servers_FailoverGroup_STATUS
	err := copied.AssignProperties_To_Servers_FailoverGroup_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Servers_FailoverGroup_STATUS
	err = actual.AssignProperties_From_Servers_FailoverGroup_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_FailoverGroup_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_FailoverGroup_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_FailoverGroup_STATUS, Servers_FailoverGroup_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_FailoverGroup_STATUS runs a test to see if a specific instance of Servers_FailoverGroup_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_FailoverGroup_STATUS(subject Servers_FailoverGroup_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_FailoverGroup_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_FailoverGroup_STATUS instances for property testing - lazily instantiated by
// Servers_FailoverGroup_STATUSGenerator()
var servers_FailoverGroup_STATUSGenerator gopter.Gen

// Servers_FailoverGroup_STATUSGenerator returns a generator of Servers_FailoverGroup_STATUS instances for property testing.
// We first initialize servers_FailoverGroup_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_FailoverGroup_STATUSGenerator() gopter.Gen {
	if servers_FailoverGroup_STATUSGenerator != nil {
		return servers_FailoverGroup_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_FailoverGroup_STATUS(generators)
	servers_FailoverGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_FailoverGroup_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_FailoverGroup_STATUS(generators)
	AddRelatedPropertyGeneratorsForServers_FailoverGroup_STATUS(generators)
	servers_FailoverGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_FailoverGroup_STATUS{}), generators)

	return servers_FailoverGroup_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_FailoverGroup_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_FailoverGroup_STATUS(gens map[string]gopter.Gen) {
	gens["Databases"] = gen.SliceOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ReplicationRole"] = gen.PtrOf(gen.OneConstOf(FailoverGroupProperties_ReplicationRole_STATUS_Primary, FailoverGroupProperties_ReplicationRole_STATUS_Secondary))
	gens["ReplicationState"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_FailoverGroup_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_FailoverGroup_STATUS(gens map[string]gopter.Gen) {
	gens["PartnerServers"] = gen.SliceOf(PartnerInfo_STATUSGenerator())
	gens["ReadOnlyEndpoint"] = gen.PtrOf(FailoverGroupReadOnlyEndpoint_STATUSGenerator())
	gens["ReadWriteEndpoint"] = gen.PtrOf(FailoverGroupReadWriteEndpoint_STATUSGenerator())
}

func Test_FailoverGroupReadOnlyEndpoint_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from FailoverGroupReadOnlyEndpoint to FailoverGroupReadOnlyEndpoint via AssignProperties_To_FailoverGroupReadOnlyEndpoint & AssignProperties_From_FailoverGroupReadOnlyEndpoint returns original",
		prop.ForAll(RunPropertyAssignmentTestForFailoverGroupReadOnlyEndpoint, FailoverGroupReadOnlyEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForFailoverGroupReadOnlyEndpoint tests if a specific instance of FailoverGroupReadOnlyEndpoint can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForFailoverGroupReadOnlyEndpoint(subject FailoverGroupReadOnlyEndpoint) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.FailoverGroupReadOnlyEndpoint
	err := copied.AssignProperties_To_FailoverGroupReadOnlyEndpoint(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual FailoverGroupReadOnlyEndpoint
	err = actual.AssignProperties_From_FailoverGroupReadOnlyEndpoint(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_FailoverGroupReadOnlyEndpoint_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupReadOnlyEndpoint via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint, FailoverGroupReadOnlyEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint runs a test to see if a specific instance of FailoverGroupReadOnlyEndpoint round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint(subject FailoverGroupReadOnlyEndpoint) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupReadOnlyEndpoint
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupReadOnlyEndpoint instances for property testing - lazily instantiated by
// FailoverGroupReadOnlyEndpointGenerator()
var failoverGroupReadOnlyEndpointGenerator gopter.Gen

// FailoverGroupReadOnlyEndpointGenerator returns a generator of FailoverGroupReadOnlyEndpoint instances for property testing.
func FailoverGroupReadOnlyEndpointGenerator() gopter.Gen {
	if failoverGroupReadOnlyEndpointGenerator != nil {
		return failoverGroupReadOnlyEndpointGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint(generators)
	failoverGroupReadOnlyEndpointGenerator = gen.Struct(reflect.TypeOf(FailoverGroupReadOnlyEndpoint{}), generators)

	return failoverGroupReadOnlyEndpointGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint(gens map[string]gopter.Gen) {
	gens["FailoverPolicy"] = gen.PtrOf(gen.OneConstOf(FailoverGroupReadOnlyEndpoint_FailoverPolicy_Disabled, FailoverGroupReadOnlyEndpoint_FailoverPolicy_Enabled))
}

func Test_FailoverGroupReadOnlyEndpoint_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from FailoverGroupReadOnlyEndpoint_STATUS to FailoverGroupReadOnlyEndpoint_STATUS via AssignProperties_To_FailoverGroupReadOnlyEndpoint_STATUS & AssignProperties_From_FailoverGroupReadOnlyEndpoint_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForFailoverGroupReadOnlyEndpoint_STATUS, FailoverGroupReadOnlyEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForFailoverGroupReadOnlyEndpoint_STATUS tests if a specific instance of FailoverGroupReadOnlyEndpoint_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForFailoverGroupReadOnlyEndpoint_STATUS(subject FailoverGroupReadOnlyEndpoint_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.FailoverGroupReadOnlyEndpoint_STATUS
	err := copied.AssignProperties_To_FailoverGroupReadOnlyEndpoint_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual FailoverGroupReadOnlyEndpoint_STATUS
	err = actual.AssignProperties_From_FailoverGroupReadOnlyEndpoint_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_FailoverGroupReadOnlyEndpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupReadOnlyEndpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint_STATUS, FailoverGroupReadOnlyEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint_STATUS runs a test to see if a specific instance of FailoverGroupReadOnlyEndpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupReadOnlyEndpoint_STATUS(subject FailoverGroupReadOnlyEndpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupReadOnlyEndpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupReadOnlyEndpoint_STATUS instances for property testing - lazily instantiated by
// FailoverGroupReadOnlyEndpoint_STATUSGenerator()
var failoverGroupReadOnlyEndpoint_STATUSGenerator gopter.Gen

// FailoverGroupReadOnlyEndpoint_STATUSGenerator returns a generator of FailoverGroupReadOnlyEndpoint_STATUS instances for property testing.
func FailoverGroupReadOnlyEndpoint_STATUSGenerator() gopter.Gen {
	if failoverGroupReadOnlyEndpoint_STATUSGenerator != nil {
		return failoverGroupReadOnlyEndpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint_STATUS(generators)
	failoverGroupReadOnlyEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(FailoverGroupReadOnlyEndpoint_STATUS{}), generators)

	return failoverGroupReadOnlyEndpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupReadOnlyEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["FailoverPolicy"] = gen.PtrOf(gen.OneConstOf(FailoverGroupReadOnlyEndpoint_FailoverPolicy_STATUS_Disabled, FailoverGroupReadOnlyEndpoint_FailoverPolicy_STATUS_Enabled))
}

func Test_FailoverGroupReadWriteEndpoint_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from FailoverGroupReadWriteEndpoint to FailoverGroupReadWriteEndpoint via AssignProperties_To_FailoverGroupReadWriteEndpoint & AssignProperties_From_FailoverGroupReadWriteEndpoint returns original",
		prop.ForAll(RunPropertyAssignmentTestForFailoverGroupReadWriteEndpoint, FailoverGroupReadWriteEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForFailoverGroupReadWriteEndpoint tests if a specific instance of FailoverGroupReadWriteEndpoint can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForFailoverGroupReadWriteEndpoint(subject FailoverGroupReadWriteEndpoint) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.FailoverGroupReadWriteEndpoint
	err := copied.AssignProperties_To_FailoverGroupReadWriteEndpoint(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual FailoverGroupReadWriteEndpoint
	err = actual.AssignProperties_From_FailoverGroupReadWriteEndpoint(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_FailoverGroupReadWriteEndpoint_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupReadWriteEndpoint via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupReadWriteEndpoint, FailoverGroupReadWriteEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupReadWriteEndpoint runs a test to see if a specific instance of FailoverGroupReadWriteEndpoint round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupReadWriteEndpoint(subject FailoverGroupReadWriteEndpoint) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupReadWriteEndpoint
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupReadWriteEndpoint instances for property testing - lazily instantiated by
// FailoverGroupReadWriteEndpointGenerator()
var failoverGroupReadWriteEndpointGenerator gopter.Gen

// FailoverGroupReadWriteEndpointGenerator returns a generator of FailoverGroupReadWriteEndpoint instances for property testing.
func FailoverGroupReadWriteEndpointGenerator() gopter.Gen {
	if failoverGroupReadWriteEndpointGenerator != nil {
		return failoverGroupReadWriteEndpointGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint(generators)
	failoverGroupReadWriteEndpointGenerator = gen.Struct(reflect.TypeOf(FailoverGroupReadWriteEndpoint{}), generators)

	return failoverGroupReadWriteEndpointGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint(gens map[string]gopter.Gen) {
	gens["FailoverPolicy"] = gen.PtrOf(gen.OneConstOf(FailoverGroupReadWriteEndpoint_FailoverPolicy_Automatic, FailoverGroupReadWriteEndpoint_FailoverPolicy_Manual))
	gens["FailoverWithDataLossGracePeriodMinutes"] = gen.PtrOf(gen.Int())
}

func Test_FailoverGroupReadWriteEndpoint_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from FailoverGroupReadWriteEndpoint_STATUS to FailoverGroupReadWriteEndpoint_STATUS via AssignProperties_To_FailoverGroupReadWriteEndpoint_STATUS & AssignProperties_From_FailoverGroupReadWriteEndpoint_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForFailoverGroupReadWriteEndpoint_STATUS, FailoverGroupReadWriteEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForFailoverGroupReadWriteEndpoint_STATUS tests if a specific instance of FailoverGroupReadWriteEndpoint_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForFailoverGroupReadWriteEndpoint_STATUS(subject FailoverGroupReadWriteEndpoint_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.FailoverGroupReadWriteEndpoint_STATUS
	err := copied.AssignProperties_To_FailoverGroupReadWriteEndpoint_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual FailoverGroupReadWriteEndpoint_STATUS
	err = actual.AssignProperties_From_FailoverGroupReadWriteEndpoint_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_FailoverGroupReadWriteEndpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FailoverGroupReadWriteEndpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFailoverGroupReadWriteEndpoint_STATUS, FailoverGroupReadWriteEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFailoverGroupReadWriteEndpoint_STATUS runs a test to see if a specific instance of FailoverGroupReadWriteEndpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForFailoverGroupReadWriteEndpoint_STATUS(subject FailoverGroupReadWriteEndpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FailoverGroupReadWriteEndpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FailoverGroupReadWriteEndpoint_STATUS instances for property testing - lazily instantiated by
// FailoverGroupReadWriteEndpoint_STATUSGenerator()
var failoverGroupReadWriteEndpoint_STATUSGenerator gopter.Gen

// FailoverGroupReadWriteEndpoint_STATUSGenerator returns a generator of FailoverGroupReadWriteEndpoint_STATUS instances for property testing.
func FailoverGroupReadWriteEndpoint_STATUSGenerator() gopter.Gen {
	if failoverGroupReadWriteEndpoint_STATUSGenerator != nil {
		return failoverGroupReadWriteEndpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint_STATUS(generators)
	failoverGroupReadWriteEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(FailoverGroupReadWriteEndpoint_STATUS{}), generators)

	return failoverGroupReadWriteEndpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFailoverGroupReadWriteEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["FailoverPolicy"] = gen.PtrOf(gen.OneConstOf(FailoverGroupReadWriteEndpoint_FailoverPolicy_STATUS_Automatic, FailoverGroupReadWriteEndpoint_FailoverPolicy_STATUS_Manual))
	gens["FailoverWithDataLossGracePeriodMinutes"] = gen.PtrOf(gen.Int())
}

func Test_PartnerInfo_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PartnerInfo to PartnerInfo via AssignProperties_To_PartnerInfo & AssignProperties_From_PartnerInfo returns original",
		prop.ForAll(RunPropertyAssignmentTestForPartnerInfo, PartnerInfoGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPartnerInfo tests if a specific instance of PartnerInfo can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForPartnerInfo(subject PartnerInfo) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.PartnerInfo
	err := copied.AssignProperties_To_PartnerInfo(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PartnerInfo
	err = actual.AssignProperties_From_PartnerInfo(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PartnerInfo_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PartnerInfo via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPartnerInfo, PartnerInfoGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPartnerInfo runs a test to see if a specific instance of PartnerInfo round trips to JSON and back losslessly
func RunJSONSerializationTestForPartnerInfo(subject PartnerInfo) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PartnerInfo
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PartnerInfo instances for property testing - lazily instantiated by PartnerInfoGenerator()
var partnerInfoGenerator gopter.Gen

// PartnerInfoGenerator returns a generator of PartnerInfo instances for property testing.
func PartnerInfoGenerator() gopter.Gen {
	if partnerInfoGenerator != nil {
		return partnerInfoGenerator
	}

	generators := make(map[string]gopter.Gen)
	partnerInfoGenerator = gen.Struct(reflect.TypeOf(PartnerInfo{}), generators)

	return partnerInfoGenerator
}

func Test_PartnerInfo_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from PartnerInfo_STATUS to PartnerInfo_STATUS via AssignProperties_To_PartnerInfo_STATUS & AssignProperties_From_PartnerInfo_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForPartnerInfo_STATUS, PartnerInfo_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForPartnerInfo_STATUS tests if a specific instance of PartnerInfo_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForPartnerInfo_STATUS(subject PartnerInfo_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.PartnerInfo_STATUS
	err := copied.AssignProperties_To_PartnerInfo_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual PartnerInfo_STATUS
	err = actual.AssignProperties_From_PartnerInfo_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_PartnerInfo_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PartnerInfo_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPartnerInfo_STATUS, PartnerInfo_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPartnerInfo_STATUS runs a test to see if a specific instance of PartnerInfo_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForPartnerInfo_STATUS(subject PartnerInfo_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PartnerInfo_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PartnerInfo_STATUS instances for property testing - lazily instantiated by PartnerInfo_STATUSGenerator()
var partnerInfo_STATUSGenerator gopter.Gen

// PartnerInfo_STATUSGenerator returns a generator of PartnerInfo_STATUS instances for property testing.
func PartnerInfo_STATUSGenerator() gopter.Gen {
	if partnerInfo_STATUSGenerator != nil {
		return partnerInfo_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPartnerInfo_STATUS(generators)
	partnerInfo_STATUSGenerator = gen.Struct(reflect.TypeOf(PartnerInfo_STATUS{}), generators)

	return partnerInfo_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForPartnerInfo_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPartnerInfo_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["ReplicationRole"] = gen.PtrOf(gen.OneConstOf(PartnerInfo_ReplicationRole_STATUS_Primary, PartnerInfo_ReplicationRole_STATUS_Secondary))
}
