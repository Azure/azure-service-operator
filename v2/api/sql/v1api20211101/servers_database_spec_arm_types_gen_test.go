// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_Database_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Database_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Database_Spec_ARM, Servers_Database_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Database_Spec_ARM runs a test to see if a specific instance of Servers_Database_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Database_Spec_ARM(subject Servers_Database_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Database_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Database_Spec_ARM instances for property testing - lazily instantiated by
// Servers_Database_Spec_ARMGenerator()
var servers_Database_Spec_ARMGenerator gopter.Gen

// Servers_Database_Spec_ARMGenerator returns a generator of Servers_Database_Spec_ARM instances for property testing.
// We first initialize servers_Database_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Database_Spec_ARMGenerator() gopter.Gen {
	if servers_Database_Spec_ARMGenerator != nil {
		return servers_Database_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Database_Spec_ARM(generators)
	servers_Database_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_Database_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Database_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForServers_Database_Spec_ARM(generators)
	servers_Database_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_Database_Spec_ARM{}), generators)

	return servers_Database_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServers_Database_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Database_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_Database_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Database_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(DatabaseIdentity_ARMGenerator())
	gens["Properties"] = gen.PtrOf(DatabaseProperties_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_ARMGenerator())
}

func Test_DatabaseIdentity_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseIdentity_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseIdentity_ARM, DatabaseIdentity_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseIdentity_ARM runs a test to see if a specific instance of DatabaseIdentity_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseIdentity_ARM(subject DatabaseIdentity_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseIdentity_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseIdentity_ARM instances for property testing - lazily instantiated by
// DatabaseIdentity_ARMGenerator()
var databaseIdentity_ARMGenerator gopter.Gen

// DatabaseIdentity_ARMGenerator returns a generator of DatabaseIdentity_ARM instances for property testing.
// We first initialize databaseIdentity_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseIdentity_ARMGenerator() gopter.Gen {
	if databaseIdentity_ARMGenerator != nil {
		return databaseIdentity_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseIdentity_ARM(generators)
	databaseIdentity_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseIdentity_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseIdentity_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseIdentity_ARM(generators)
	databaseIdentity_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseIdentity_ARM{}), generators)

	return databaseIdentity_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseIdentity_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseIdentity_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(DatabaseIdentity_Type_None, DatabaseIdentity_Type_UserAssigned))
}

// AddRelatedPropertyGeneratorsForDatabaseIdentity_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseIdentity_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), UserAssignedIdentityDetails_ARMGenerator())
}

func Test_DatabaseProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseProperties_ARM, DatabaseProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseProperties_ARM runs a test to see if a specific instance of DatabaseProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseProperties_ARM(subject DatabaseProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseProperties_ARM instances for property testing - lazily instantiated by
// DatabaseProperties_ARMGenerator()
var databaseProperties_ARMGenerator gopter.Gen

// DatabaseProperties_ARMGenerator returns a generator of DatabaseProperties_ARM instances for property testing.
func DatabaseProperties_ARMGenerator() gopter.Gen {
	if databaseProperties_ARMGenerator != nil {
		return databaseProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_ARM(generators)
	databaseProperties_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_ARM{}), generators)

	return databaseProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseProperties_ARM(gens map[string]gopter.Gen) {
	gens["AutoPauseDelay"] = gen.PtrOf(gen.Int())
	gens["CatalogCollation"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_CatalogCollation_DATABASE_DEFAULT, DatabaseProperties_CatalogCollation_SQL_Latin1_General_CP1_CI_AS))
	gens["Collation"] = gen.PtrOf(gen.AlphaString())
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		DatabaseProperties_CreateMode_Copy,
		DatabaseProperties_CreateMode_Default,
		DatabaseProperties_CreateMode_OnlineSecondary,
		DatabaseProperties_CreateMode_PointInTimeRestore,
		DatabaseProperties_CreateMode_Recovery,
		DatabaseProperties_CreateMode_Restore,
		DatabaseProperties_CreateMode_RestoreExternalBackup,
		DatabaseProperties_CreateMode_RestoreExternalBackupSecondary,
		DatabaseProperties_CreateMode_RestoreLongTermRetentionBackup,
		DatabaseProperties_CreateMode_Secondary))
	gens["ElasticPoolId"] = gen.PtrOf(gen.AlphaString())
	gens["FederatedClientId"] = gen.PtrOf(gen.AlphaString())
	gens["HighAvailabilityReplicaCount"] = gen.PtrOf(gen.Int())
	gens["IsLedgerOn"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_LicenseType_BasePrice, DatabaseProperties_LicenseType_LicenseIncluded))
	gens["LongTermRetentionBackupResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["MaintenanceConfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["MaxSizeBytes"] = gen.PtrOf(gen.Int())
	gens["MinCapacity"] = gen.PtrOf(gen.Float64())
	gens["ReadScale"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_ReadScale_Disabled, DatabaseProperties_ReadScale_Enabled))
	gens["RecoverableDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["RecoveryServicesRecoveryPointId"] = gen.PtrOf(gen.AlphaString())
	gens["RequestedBackupStorageRedundancy"] = gen.PtrOf(gen.OneConstOf(
		DatabaseProperties_RequestedBackupStorageRedundancy_Geo,
		DatabaseProperties_RequestedBackupStorageRedundancy_GeoZone,
		DatabaseProperties_RequestedBackupStorageRedundancy_Local,
		DatabaseProperties_RequestedBackupStorageRedundancy_Zone))
	gens["RestorableDroppedDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["SampleName"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_SampleName_AdventureWorksLT, DatabaseProperties_SampleName_WideWorldImportersFull, DatabaseProperties_SampleName_WideWorldImportersStd))
	gens["SecondaryType"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_SecondaryType_Geo, DatabaseProperties_SecondaryType_Named))
	gens["SourceDatabaseDeletionDate"] = gen.PtrOf(gen.AlphaString())
	gens["SourceDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["SourceResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

func Test_Sku_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_ARM, Sku_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_ARM runs a test to see if a specific instance of Sku_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_ARM(subject Sku_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_ARM instances for property testing - lazily instantiated by Sku_ARMGenerator()
var sku_ARMGenerator gopter.Gen

// Sku_ARMGenerator returns a generator of Sku_ARM instances for property testing.
func Sku_ARMGenerator() gopter.Gen {
	if sku_ARMGenerator != nil {
		return sku_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_ARM(generators)
	sku_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_ARM{}), generators)

	return sku_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}
