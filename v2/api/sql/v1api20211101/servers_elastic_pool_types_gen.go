// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"fmt"
	storage "github.com/Azure/azure-service-operator/v2/api/sql/v1api20211101/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/ElasticPools.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}
type ServersElasticPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Servers_ElasticPool_Spec   `json:"spec,omitempty"`
	Status            Servers_ElasticPool_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ServersElasticPool{}

// GetConditions returns the conditions of the resource
func (pool *ServersElasticPool) GetConditions() conditions.Conditions {
	return pool.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (pool *ServersElasticPool) SetConditions(conditions conditions.Conditions) {
	pool.Status.Conditions = conditions
}

var _ conversion.Convertible = &ServersElasticPool{}

// ConvertFrom populates our ServersElasticPool from the provided hub ServersElasticPool
func (pool *ServersElasticPool) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.ServersElasticPool)
	if !ok {
		return fmt.Errorf("expected sql/v1api20211101/storage/ServersElasticPool but received %T instead", hub)
	}

	return pool.AssignProperties_From_ServersElasticPool(source)
}

// ConvertTo populates the provided hub ServersElasticPool from our ServersElasticPool
func (pool *ServersElasticPool) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.ServersElasticPool)
	if !ok {
		return fmt.Errorf("expected sql/v1api20211101/storage/ServersElasticPool but received %T instead", hub)
	}

	return pool.AssignProperties_To_ServersElasticPool(destination)
}

// +kubebuilder:webhook:path=/mutate-sql-azure-com-v1api20211101-serverselasticpool,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=serverselasticpools,verbs=create;update,versions=v1api20211101,name=default.v1api20211101.serverselasticpools.sql.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &ServersElasticPool{}

// Default applies defaults to the ServersElasticPool resource
func (pool *ServersElasticPool) Default() {
	pool.defaultImpl()
	var temp any = pool
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (pool *ServersElasticPool) defaultAzureName() {
	if pool.Spec.AzureName == "" {
		pool.Spec.AzureName = pool.Name
	}
}

// defaultImpl applies the code generated defaults to the ServersElasticPool resource
func (pool *ServersElasticPool) defaultImpl() { pool.defaultAzureName() }

var _ genruntime.ImportableResource = &ServersElasticPool{}

// InitializeSpec initializes the spec for this resource from the given status
func (pool *ServersElasticPool) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*Servers_ElasticPool_STATUS); ok {
		return pool.Spec.Initialize_From_Servers_ElasticPool_STATUS(s)
	}

	return fmt.Errorf("expected Status of type Servers_ElasticPool_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &ServersElasticPool{}

// AzureName returns the Azure name of the resource
func (pool *ServersElasticPool) AzureName() string {
	return pool.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (pool ServersElasticPool) GetAPIVersion() string {
	return "2021-11-01"
}

// GetResourceScope returns the scope of the resource
func (pool *ServersElasticPool) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (pool *ServersElasticPool) GetSpec() genruntime.ConvertibleSpec {
	return &pool.Spec
}

// GetStatus returns the status of this resource
func (pool *ServersElasticPool) GetStatus() genruntime.ConvertibleStatus {
	return &pool.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (pool *ServersElasticPool) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/servers/elasticPools"
func (pool *ServersElasticPool) GetType() string {
	return "Microsoft.Sql/servers/elasticPools"
}

// NewEmptyStatus returns a new empty (blank) status
func (pool *ServersElasticPool) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Servers_ElasticPool_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (pool *ServersElasticPool) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(pool.Spec)
	return pool.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (pool *ServersElasticPool) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Servers_ElasticPool_STATUS); ok {
		pool.Status = *st
		return nil
	}

	// Convert status to required version
	var st Servers_ElasticPool_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	pool.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-sql-azure-com-v1api20211101-serverselasticpool,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=serverselasticpools,verbs=create;update,versions=v1api20211101,name=validate.v1api20211101.serverselasticpools.sql.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &ServersElasticPool{}

// ValidateCreate validates the creation of the resource
func (pool *ServersElasticPool) ValidateCreate() (admission.Warnings, error) {
	validations := pool.createValidations()
	var temp any = pool
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (pool *ServersElasticPool) ValidateDelete() (admission.Warnings, error) {
	validations := pool.deleteValidations()
	var temp any = pool
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (pool *ServersElasticPool) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := pool.updateValidations()
	var temp any = pool
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (pool *ServersElasticPool) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){pool.validateResourceReferences, pool.validateOwnerReference}
}

// deleteValidations validates the deletion of the resource
func (pool *ServersElasticPool) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (pool *ServersElasticPool) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return pool.validateResourceReferences()
		},
		pool.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return pool.validateOwnerReference()
		},
	}
}

// validateOwnerReference validates the owner field
func (pool *ServersElasticPool) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(pool)
}

// validateResourceReferences validates all resource references
func (pool *ServersElasticPool) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&pool.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (pool *ServersElasticPool) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*ServersElasticPool)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, pool)
}

// AssignProperties_From_ServersElasticPool populates our ServersElasticPool from the provided source ServersElasticPool
func (pool *ServersElasticPool) AssignProperties_From_ServersElasticPool(source *storage.ServersElasticPool) error {

	// ObjectMeta
	pool.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Servers_ElasticPool_Spec
	err := spec.AssignProperties_From_Servers_ElasticPool_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Servers_ElasticPool_Spec() to populate field Spec")
	}
	pool.Spec = spec

	// Status
	var status Servers_ElasticPool_STATUS
	err = status.AssignProperties_From_Servers_ElasticPool_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Servers_ElasticPool_STATUS() to populate field Status")
	}
	pool.Status = status

	// No error
	return nil
}

// AssignProperties_To_ServersElasticPool populates the provided destination ServersElasticPool from our ServersElasticPool
func (pool *ServersElasticPool) AssignProperties_To_ServersElasticPool(destination *storage.ServersElasticPool) error {

	// ObjectMeta
	destination.ObjectMeta = *pool.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.Servers_ElasticPool_Spec
	err := pool.Spec.AssignProperties_To_Servers_ElasticPool_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Servers_ElasticPool_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.Servers_ElasticPool_STATUS
	err = pool.Status.AssignProperties_To_Servers_ElasticPool_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Servers_ElasticPool_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (pool *ServersElasticPool) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: pool.Spec.OriginalVersion(),
		Kind:    "ServersElasticPool",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/ElasticPools.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}
type ServersElasticPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServersElasticPool `json:"items"`
}

type Servers_ElasticPool_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// HighAvailabilityReplicaCount: The number of secondary replicas associated with the elastic pool that are used to provide
	// high availability. Applicable only to Hyperscale elastic pools.
	HighAvailabilityReplicaCount *int `json:"highAvailabilityReplicaCount,omitempty"`

	// LicenseType: The license type to apply for this elastic pool.
	LicenseType *ElasticPoolProperties_LicenseType `json:"licenseType,omitempty"`

	// +kubebuilder:validation:Required
	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// MaintenanceConfigurationId: Maintenance configuration id assigned to the elastic pool. This configuration defines the
	// period when the maintenance updates will will occur.
	MaintenanceConfigurationId *string `json:"maintenanceConfigurationId,omitempty"`

	// MaxSizeBytes: The storage limit for the database elastic pool in bytes.
	MaxSizeBytes *int `json:"maxSizeBytes,omitempty"`

	// MinCapacity: Minimal capacity that serverless pool will not shrink below, if not paused
	MinCapacity *float64 `json:"minCapacity,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/Server resource
	Owner *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"Server"`

	// PerDatabaseSettings: The per database settings for the elastic pool.
	PerDatabaseSettings *ElasticPoolPerDatabaseSettings `json:"perDatabaseSettings,omitempty"`

	// Sku: The elastic pool SKU.
	// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition,
	// family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation`
	// REST API or the following command:
	// ```azurecli
	// az sql elastic-pool list-editions -l <location> -o table
	// ````
	Sku *Sku `json:"sku,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// ZoneRedundant: Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be
	// spread across multiple availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ARMTransformer = &Servers_ElasticPool_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (pool *Servers_ElasticPool_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if pool == nil {
		return nil, nil
	}
	result := &Servers_ElasticPool_Spec_ARM{}

	// Set property "Location":
	if pool.Location != nil {
		location := *pool.Location
		result.Location = &location
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if pool.HighAvailabilityReplicaCount != nil ||
		pool.LicenseType != nil ||
		pool.MaintenanceConfigurationId != nil ||
		pool.MaxSizeBytes != nil ||
		pool.MinCapacity != nil ||
		pool.PerDatabaseSettings != nil ||
		pool.ZoneRedundant != nil {
		result.Properties = &ElasticPoolProperties_ARM{}
	}
	if pool.HighAvailabilityReplicaCount != nil {
		highAvailabilityReplicaCount := *pool.HighAvailabilityReplicaCount
		result.Properties.HighAvailabilityReplicaCount = &highAvailabilityReplicaCount
	}
	if pool.LicenseType != nil {
		var temp string
		temp = string(*pool.LicenseType)
		licenseType := ElasticPoolProperties_LicenseType_ARM(temp)
		result.Properties.LicenseType = &licenseType
	}
	if pool.MaintenanceConfigurationId != nil {
		maintenanceConfigurationId := *pool.MaintenanceConfigurationId
		result.Properties.MaintenanceConfigurationId = &maintenanceConfigurationId
	}
	if pool.MaxSizeBytes != nil {
		maxSizeBytes := *pool.MaxSizeBytes
		result.Properties.MaxSizeBytes = &maxSizeBytes
	}
	if pool.MinCapacity != nil {
		minCapacity := *pool.MinCapacity
		result.Properties.MinCapacity = &minCapacity
	}
	if pool.PerDatabaseSettings != nil {
		perDatabaseSettings_ARM, err := (*pool.PerDatabaseSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		perDatabaseSettings := *perDatabaseSettings_ARM.(*ElasticPoolPerDatabaseSettings_ARM)
		result.Properties.PerDatabaseSettings = &perDatabaseSettings
	}
	if pool.ZoneRedundant != nil {
		zoneRedundant := *pool.ZoneRedundant
		result.Properties.ZoneRedundant = &zoneRedundant
	}

	// Set property "Sku":
	if pool.Sku != nil {
		sku_ARM, err := (*pool.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *sku_ARM.(*Sku_ARM)
		result.Sku = &sku
	}

	// Set property "Tags":
	if pool.Tags != nil {
		result.Tags = make(map[string]string, len(pool.Tags))
		for key, value := range pool.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (pool *Servers_ElasticPool_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Servers_ElasticPool_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (pool *Servers_ElasticPool_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Servers_ElasticPool_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Servers_ElasticPool_Spec_ARM, got %T", armInput)
	}

	// Set property "AzureName":
	pool.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "HighAvailabilityReplicaCount":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HighAvailabilityReplicaCount != nil {
			highAvailabilityReplicaCount := *typedInput.Properties.HighAvailabilityReplicaCount
			pool.HighAvailabilityReplicaCount = &highAvailabilityReplicaCount
		}
	}

	// Set property "LicenseType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LicenseType != nil {
			var temp string
			temp = string(*typedInput.Properties.LicenseType)
			licenseType := ElasticPoolProperties_LicenseType(temp)
			pool.LicenseType = &licenseType
		}
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		pool.Location = &location
	}

	// Set property "MaintenanceConfigurationId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaintenanceConfigurationId != nil {
			maintenanceConfigurationId := *typedInput.Properties.MaintenanceConfigurationId
			pool.MaintenanceConfigurationId = &maintenanceConfigurationId
		}
	}

	// Set property "MaxSizeBytes":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxSizeBytes != nil {
			maxSizeBytes := *typedInput.Properties.MaxSizeBytes
			pool.MaxSizeBytes = &maxSizeBytes
		}
	}

	// Set property "MinCapacity":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinCapacity != nil {
			minCapacity := *typedInput.Properties.MinCapacity
			pool.MinCapacity = &minCapacity
		}
	}

	// Set property "Owner":
	pool.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "PerDatabaseSettings":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PerDatabaseSettings != nil {
			var perDatabaseSettings1 ElasticPoolPerDatabaseSettings
			err := perDatabaseSettings1.PopulateFromARM(owner, *typedInput.Properties.PerDatabaseSettings)
			if err != nil {
				return err
			}
			perDatabaseSettings := perDatabaseSettings1
			pool.PerDatabaseSettings = &perDatabaseSettings
		}
	}

	// Set property "Sku":
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		pool.Sku = &sku
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		pool.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			pool.Tags[key] = value
		}
	}

	// Set property "ZoneRedundant":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			pool.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Servers_ElasticPool_Spec{}

// ConvertSpecFrom populates our Servers_ElasticPool_Spec from the provided source
func (pool *Servers_ElasticPool_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.Servers_ElasticPool_Spec)
	if ok {
		// Populate our instance from source
		return pool.AssignProperties_From_Servers_ElasticPool_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.Servers_ElasticPool_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = pool.AssignProperties_From_Servers_ElasticPool_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Servers_ElasticPool_Spec
func (pool *Servers_ElasticPool_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.Servers_ElasticPool_Spec)
	if ok {
		// Populate destination from our instance
		return pool.AssignProperties_To_Servers_ElasticPool_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.Servers_ElasticPool_Spec{}
	err := pool.AssignProperties_To_Servers_ElasticPool_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Servers_ElasticPool_Spec populates our Servers_ElasticPool_Spec from the provided source Servers_ElasticPool_Spec
func (pool *Servers_ElasticPool_Spec) AssignProperties_From_Servers_ElasticPool_Spec(source *storage.Servers_ElasticPool_Spec) error {

	// AzureName
	pool.AzureName = source.AzureName

	// HighAvailabilityReplicaCount
	pool.HighAvailabilityReplicaCount = genruntime.ClonePointerToInt(source.HighAvailabilityReplicaCount)

	// LicenseType
	if source.LicenseType != nil {
		licenseType := *source.LicenseType
		licenseTypeTemp := genruntime.ToEnum(licenseType, elasticPoolProperties_LicenseType_Values)
		pool.LicenseType = &licenseTypeTemp
	} else {
		pool.LicenseType = nil
	}

	// Location
	pool.Location = genruntime.ClonePointerToString(source.Location)

	// MaintenanceConfigurationId
	pool.MaintenanceConfigurationId = genruntime.ClonePointerToString(source.MaintenanceConfigurationId)

	// MaxSizeBytes
	pool.MaxSizeBytes = genruntime.ClonePointerToInt(source.MaxSizeBytes)

	// MinCapacity
	if source.MinCapacity != nil {
		minCapacity := *source.MinCapacity
		pool.MinCapacity = &minCapacity
	} else {
		pool.MinCapacity = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		pool.Owner = &owner
	} else {
		pool.Owner = nil
	}

	// PerDatabaseSettings
	if source.PerDatabaseSettings != nil {
		var perDatabaseSetting ElasticPoolPerDatabaseSettings
		err := perDatabaseSetting.AssignProperties_From_ElasticPoolPerDatabaseSettings(source.PerDatabaseSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ElasticPoolPerDatabaseSettings() to populate field PerDatabaseSettings")
		}
		pool.PerDatabaseSettings = &perDatabaseSetting
	} else {
		pool.PerDatabaseSettings = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignProperties_From_Sku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku() to populate field Sku")
		}
		pool.Sku = &sku
	} else {
		pool.Sku = nil
	}

	// Tags
	pool.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		pool.ZoneRedundant = &zoneRedundant
	} else {
		pool.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Servers_ElasticPool_Spec populates the provided destination Servers_ElasticPool_Spec from our Servers_ElasticPool_Spec
func (pool *Servers_ElasticPool_Spec) AssignProperties_To_Servers_ElasticPool_Spec(destination *storage.Servers_ElasticPool_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = pool.AzureName

	// HighAvailabilityReplicaCount
	destination.HighAvailabilityReplicaCount = genruntime.ClonePointerToInt(pool.HighAvailabilityReplicaCount)

	// LicenseType
	if pool.LicenseType != nil {
		licenseType := string(*pool.LicenseType)
		destination.LicenseType = &licenseType
	} else {
		destination.LicenseType = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(pool.Location)

	// MaintenanceConfigurationId
	destination.MaintenanceConfigurationId = genruntime.ClonePointerToString(pool.MaintenanceConfigurationId)

	// MaxSizeBytes
	destination.MaxSizeBytes = genruntime.ClonePointerToInt(pool.MaxSizeBytes)

	// MinCapacity
	if pool.MinCapacity != nil {
		minCapacity := *pool.MinCapacity
		destination.MinCapacity = &minCapacity
	} else {
		destination.MinCapacity = nil
	}

	// OriginalVersion
	destination.OriginalVersion = pool.OriginalVersion()

	// Owner
	if pool.Owner != nil {
		owner := pool.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PerDatabaseSettings
	if pool.PerDatabaseSettings != nil {
		var perDatabaseSetting storage.ElasticPoolPerDatabaseSettings
		err := pool.PerDatabaseSettings.AssignProperties_To_ElasticPoolPerDatabaseSettings(&perDatabaseSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ElasticPoolPerDatabaseSettings() to populate field PerDatabaseSettings")
		}
		destination.PerDatabaseSettings = &perDatabaseSetting
	} else {
		destination.PerDatabaseSettings = nil
	}

	// Sku
	if pool.Sku != nil {
		var sku storage.Sku
		err := pool.Sku.AssignProperties_To_Sku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(pool.Tags)

	// ZoneRedundant
	if pool.ZoneRedundant != nil {
		zoneRedundant := *pool.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_Servers_ElasticPool_STATUS populates our Servers_ElasticPool_Spec from the provided source Servers_ElasticPool_STATUS
func (pool *Servers_ElasticPool_Spec) Initialize_From_Servers_ElasticPool_STATUS(source *Servers_ElasticPool_STATUS) error {

	// HighAvailabilityReplicaCount
	pool.HighAvailabilityReplicaCount = genruntime.ClonePointerToInt(source.HighAvailabilityReplicaCount)

	// LicenseType
	if source.LicenseType != nil {
		licenseType := genruntime.ToEnum(string(*source.LicenseType), elasticPoolProperties_LicenseType_Values)
		pool.LicenseType = &licenseType
	} else {
		pool.LicenseType = nil
	}

	// Location
	pool.Location = genruntime.ClonePointerToString(source.Location)

	// MaintenanceConfigurationId
	pool.MaintenanceConfigurationId = genruntime.ClonePointerToString(source.MaintenanceConfigurationId)

	// MaxSizeBytes
	pool.MaxSizeBytes = genruntime.ClonePointerToInt(source.MaxSizeBytes)

	// MinCapacity
	if source.MinCapacity != nil {
		minCapacity := *source.MinCapacity
		pool.MinCapacity = &minCapacity
	} else {
		pool.MinCapacity = nil
	}

	// PerDatabaseSettings
	if source.PerDatabaseSettings != nil {
		var perDatabaseSetting ElasticPoolPerDatabaseSettings
		err := perDatabaseSetting.Initialize_From_ElasticPoolPerDatabaseSettings_STATUS(source.PerDatabaseSettings)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_ElasticPoolPerDatabaseSettings_STATUS() to populate field PerDatabaseSettings")
		}
		pool.PerDatabaseSettings = &perDatabaseSetting
	} else {
		pool.PerDatabaseSettings = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.Initialize_From_Sku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_Sku_STATUS() to populate field Sku")
		}
		pool.Sku = &sku
	} else {
		pool.Sku = nil
	}

	// Tags
	pool.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		pool.ZoneRedundant = &zoneRedundant
	} else {
		pool.ZoneRedundant = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (pool *Servers_ElasticPool_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (pool *Servers_ElasticPool_Spec) SetAzureName(azureName string) { pool.AzureName = azureName }

type Servers_ElasticPool_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// CreationDate: The creation date of the elastic pool (ISO8601 format).
	CreationDate *string `json:"creationDate,omitempty"`

	// HighAvailabilityReplicaCount: The number of secondary replicas associated with the elastic pool that are used to provide
	// high availability. Applicable only to Hyperscale elastic pools.
	HighAvailabilityReplicaCount *int `json:"highAvailabilityReplicaCount,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Kind: Kind of elastic pool. This is metadata used for the Azure portal experience.
	Kind *string `json:"kind,omitempty"`

	// LicenseType: The license type to apply for this elastic pool.
	LicenseType *ElasticPoolProperties_LicenseType_STATUS `json:"licenseType,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// MaintenanceConfigurationId: Maintenance configuration id assigned to the elastic pool. This configuration defines the
	// period when the maintenance updates will will occur.
	MaintenanceConfigurationId *string `json:"maintenanceConfigurationId,omitempty"`

	// MaxSizeBytes: The storage limit for the database elastic pool in bytes.
	MaxSizeBytes *int `json:"maxSizeBytes,omitempty"`

	// MinCapacity: Minimal capacity that serverless pool will not shrink below, if not paused
	MinCapacity *float64 `json:"minCapacity,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// PerDatabaseSettings: The per database settings for the elastic pool.
	PerDatabaseSettings *ElasticPoolPerDatabaseSettings_STATUS `json:"perDatabaseSettings,omitempty"`

	// Sku: The elastic pool SKU.
	// The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition,
	// family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation`
	// REST API or the following command:
	// ```azurecli
	// az sql elastic-pool list-editions -l <location> -o table
	// ````
	Sku *Sku_STATUS `json:"sku,omitempty"`

	// State: The state of the elastic pool.
	State *ElasticPoolProperties_State_STATUS `json:"state,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// ZoneRedundant: Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be
	// spread across multiple availability zones.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Servers_ElasticPool_STATUS{}

// ConvertStatusFrom populates our Servers_ElasticPool_STATUS from the provided source
func (pool *Servers_ElasticPool_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.Servers_ElasticPool_STATUS)
	if ok {
		// Populate our instance from source
		return pool.AssignProperties_From_Servers_ElasticPool_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.Servers_ElasticPool_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = pool.AssignProperties_From_Servers_ElasticPool_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Servers_ElasticPool_STATUS
func (pool *Servers_ElasticPool_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.Servers_ElasticPool_STATUS)
	if ok {
		// Populate destination from our instance
		return pool.AssignProperties_To_Servers_ElasticPool_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.Servers_ElasticPool_STATUS{}
	err := pool.AssignProperties_To_Servers_ElasticPool_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Servers_ElasticPool_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (pool *Servers_ElasticPool_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Servers_ElasticPool_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (pool *Servers_ElasticPool_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Servers_ElasticPool_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Servers_ElasticPool_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "CreationDate":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationDate != nil {
			creationDate := *typedInput.Properties.CreationDate
			pool.CreationDate = &creationDate
		}
	}

	// Set property "HighAvailabilityReplicaCount":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HighAvailabilityReplicaCount != nil {
			highAvailabilityReplicaCount := *typedInput.Properties.HighAvailabilityReplicaCount
			pool.HighAvailabilityReplicaCount = &highAvailabilityReplicaCount
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		pool.Id = &id
	}

	// Set property "Kind":
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		pool.Kind = &kind
	}

	// Set property "LicenseType":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LicenseType != nil {
			var temp string
			temp = string(*typedInput.Properties.LicenseType)
			licenseType := ElasticPoolProperties_LicenseType_STATUS(temp)
			pool.LicenseType = &licenseType
		}
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		pool.Location = &location
	}

	// Set property "MaintenanceConfigurationId":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaintenanceConfigurationId != nil {
			maintenanceConfigurationId := *typedInput.Properties.MaintenanceConfigurationId
			pool.MaintenanceConfigurationId = &maintenanceConfigurationId
		}
	}

	// Set property "MaxSizeBytes":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MaxSizeBytes != nil {
			maxSizeBytes := *typedInput.Properties.MaxSizeBytes
			pool.MaxSizeBytes = &maxSizeBytes
		}
	}

	// Set property "MinCapacity":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MinCapacity != nil {
			minCapacity := *typedInput.Properties.MinCapacity
			pool.MinCapacity = &minCapacity
		}
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		pool.Name = &name
	}

	// Set property "PerDatabaseSettings":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PerDatabaseSettings != nil {
			var perDatabaseSettings1 ElasticPoolPerDatabaseSettings_STATUS
			err := perDatabaseSettings1.PopulateFromARM(owner, *typedInput.Properties.PerDatabaseSettings)
			if err != nil {
				return err
			}
			perDatabaseSettings := perDatabaseSettings1
			pool.PerDatabaseSettings = &perDatabaseSettings
		}
	}

	// Set property "Sku":
	if typedInput.Sku != nil {
		var sku1 Sku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		pool.Sku = &sku
	}

	// Set property "State":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.State != nil {
			var temp string
			temp = string(*typedInput.Properties.State)
			state := ElasticPoolProperties_State_STATUS(temp)
			pool.State = &state
		}
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		pool.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			pool.Tags[key] = value
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		pool.Type = &typeVar
	}

	// Set property "ZoneRedundant":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundant != nil {
			zoneRedundant := *typedInput.Properties.ZoneRedundant
			pool.ZoneRedundant = &zoneRedundant
		}
	}

	// No error
	return nil
}

// AssignProperties_From_Servers_ElasticPool_STATUS populates our Servers_ElasticPool_STATUS from the provided source Servers_ElasticPool_STATUS
func (pool *Servers_ElasticPool_STATUS) AssignProperties_From_Servers_ElasticPool_STATUS(source *storage.Servers_ElasticPool_STATUS) error {

	// Conditions
	pool.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreationDate
	pool.CreationDate = genruntime.ClonePointerToString(source.CreationDate)

	// HighAvailabilityReplicaCount
	pool.HighAvailabilityReplicaCount = genruntime.ClonePointerToInt(source.HighAvailabilityReplicaCount)

	// Id
	pool.Id = genruntime.ClonePointerToString(source.Id)

	// Kind
	pool.Kind = genruntime.ClonePointerToString(source.Kind)

	// LicenseType
	if source.LicenseType != nil {
		licenseType := *source.LicenseType
		licenseTypeTemp := genruntime.ToEnum(licenseType, elasticPoolProperties_LicenseType_STATUS_Values)
		pool.LicenseType = &licenseTypeTemp
	} else {
		pool.LicenseType = nil
	}

	// Location
	pool.Location = genruntime.ClonePointerToString(source.Location)

	// MaintenanceConfigurationId
	pool.MaintenanceConfigurationId = genruntime.ClonePointerToString(source.MaintenanceConfigurationId)

	// MaxSizeBytes
	pool.MaxSizeBytes = genruntime.ClonePointerToInt(source.MaxSizeBytes)

	// MinCapacity
	if source.MinCapacity != nil {
		minCapacity := *source.MinCapacity
		pool.MinCapacity = &minCapacity
	} else {
		pool.MinCapacity = nil
	}

	// Name
	pool.Name = genruntime.ClonePointerToString(source.Name)

	// PerDatabaseSettings
	if source.PerDatabaseSettings != nil {
		var perDatabaseSetting ElasticPoolPerDatabaseSettings_STATUS
		err := perDatabaseSetting.AssignProperties_From_ElasticPoolPerDatabaseSettings_STATUS(source.PerDatabaseSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ElasticPoolPerDatabaseSettings_STATUS() to populate field PerDatabaseSettings")
		}
		pool.PerDatabaseSettings = &perDatabaseSetting
	} else {
		pool.PerDatabaseSettings = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
		err := sku.AssignProperties_From_Sku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku_STATUS() to populate field Sku")
		}
		pool.Sku = &sku
	} else {
		pool.Sku = nil
	}

	// State
	if source.State != nil {
		state := *source.State
		stateTemp := genruntime.ToEnum(state, elasticPoolProperties_State_STATUS_Values)
		pool.State = &stateTemp
	} else {
		pool.State = nil
	}

	// Tags
	pool.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	pool.Type = genruntime.ClonePointerToString(source.Type)

	// ZoneRedundant
	if source.ZoneRedundant != nil {
		zoneRedundant := *source.ZoneRedundant
		pool.ZoneRedundant = &zoneRedundant
	} else {
		pool.ZoneRedundant = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Servers_ElasticPool_STATUS populates the provided destination Servers_ElasticPool_STATUS from our Servers_ElasticPool_STATUS
func (pool *Servers_ElasticPool_STATUS) AssignProperties_To_Servers_ElasticPool_STATUS(destination *storage.Servers_ElasticPool_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(pool.Conditions)

	// CreationDate
	destination.CreationDate = genruntime.ClonePointerToString(pool.CreationDate)

	// HighAvailabilityReplicaCount
	destination.HighAvailabilityReplicaCount = genruntime.ClonePointerToInt(pool.HighAvailabilityReplicaCount)

	// Id
	destination.Id = genruntime.ClonePointerToString(pool.Id)

	// Kind
	destination.Kind = genruntime.ClonePointerToString(pool.Kind)

	// LicenseType
	if pool.LicenseType != nil {
		licenseType := string(*pool.LicenseType)
		destination.LicenseType = &licenseType
	} else {
		destination.LicenseType = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(pool.Location)

	// MaintenanceConfigurationId
	destination.MaintenanceConfigurationId = genruntime.ClonePointerToString(pool.MaintenanceConfigurationId)

	// MaxSizeBytes
	destination.MaxSizeBytes = genruntime.ClonePointerToInt(pool.MaxSizeBytes)

	// MinCapacity
	if pool.MinCapacity != nil {
		minCapacity := *pool.MinCapacity
		destination.MinCapacity = &minCapacity
	} else {
		destination.MinCapacity = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(pool.Name)

	// PerDatabaseSettings
	if pool.PerDatabaseSettings != nil {
		var perDatabaseSetting storage.ElasticPoolPerDatabaseSettings_STATUS
		err := pool.PerDatabaseSettings.AssignProperties_To_ElasticPoolPerDatabaseSettings_STATUS(&perDatabaseSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ElasticPoolPerDatabaseSettings_STATUS() to populate field PerDatabaseSettings")
		}
		destination.PerDatabaseSettings = &perDatabaseSetting
	} else {
		destination.PerDatabaseSettings = nil
	}

	// Sku
	if pool.Sku != nil {
		var sku storage.Sku_STATUS
		err := pool.Sku.AssignProperties_To_Sku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku_STATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// State
	if pool.State != nil {
		state := string(*pool.State)
		destination.State = &state
	} else {
		destination.State = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(pool.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(pool.Type)

	// ZoneRedundant
	if pool.ZoneRedundant != nil {
		zoneRedundant := *pool.ZoneRedundant
		destination.ZoneRedundant = &zoneRedundant
	} else {
		destination.ZoneRedundant = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Per database settings of an elastic pool.
type ElasticPoolPerDatabaseSettings struct {
	// MaxCapacity: The maximum capacity any one database can consume.
	MaxCapacity *float64 `json:"maxCapacity,omitempty"`

	// MinCapacity: The minimum capacity all databases are guaranteed.
	MinCapacity *float64 `json:"minCapacity,omitempty"`
}

var _ genruntime.ARMTransformer = &ElasticPoolPerDatabaseSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (settings *ElasticPoolPerDatabaseSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if settings == nil {
		return nil, nil
	}
	result := &ElasticPoolPerDatabaseSettings_ARM{}

	// Set property "MaxCapacity":
	if settings.MaxCapacity != nil {
		maxCapacity := *settings.MaxCapacity
		result.MaxCapacity = &maxCapacity
	}

	// Set property "MinCapacity":
	if settings.MinCapacity != nil {
		minCapacity := *settings.MinCapacity
		result.MinCapacity = &minCapacity
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *ElasticPoolPerDatabaseSettings) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ElasticPoolPerDatabaseSettings_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *ElasticPoolPerDatabaseSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ElasticPoolPerDatabaseSettings_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ElasticPoolPerDatabaseSettings_ARM, got %T", armInput)
	}

	// Set property "MaxCapacity":
	if typedInput.MaxCapacity != nil {
		maxCapacity := *typedInput.MaxCapacity
		settings.MaxCapacity = &maxCapacity
	}

	// Set property "MinCapacity":
	if typedInput.MinCapacity != nil {
		minCapacity := *typedInput.MinCapacity
		settings.MinCapacity = &minCapacity
	}

	// No error
	return nil
}

// AssignProperties_From_ElasticPoolPerDatabaseSettings populates our ElasticPoolPerDatabaseSettings from the provided source ElasticPoolPerDatabaseSettings
func (settings *ElasticPoolPerDatabaseSettings) AssignProperties_From_ElasticPoolPerDatabaseSettings(source *storage.ElasticPoolPerDatabaseSettings) error {

	// MaxCapacity
	if source.MaxCapacity != nil {
		maxCapacity := *source.MaxCapacity
		settings.MaxCapacity = &maxCapacity
	} else {
		settings.MaxCapacity = nil
	}

	// MinCapacity
	if source.MinCapacity != nil {
		minCapacity := *source.MinCapacity
		settings.MinCapacity = &minCapacity
	} else {
		settings.MinCapacity = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ElasticPoolPerDatabaseSettings populates the provided destination ElasticPoolPerDatabaseSettings from our ElasticPoolPerDatabaseSettings
func (settings *ElasticPoolPerDatabaseSettings) AssignProperties_To_ElasticPoolPerDatabaseSettings(destination *storage.ElasticPoolPerDatabaseSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxCapacity
	if settings.MaxCapacity != nil {
		maxCapacity := *settings.MaxCapacity
		destination.MaxCapacity = &maxCapacity
	} else {
		destination.MaxCapacity = nil
	}

	// MinCapacity
	if settings.MinCapacity != nil {
		minCapacity := *settings.MinCapacity
		destination.MinCapacity = &minCapacity
	} else {
		destination.MinCapacity = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_ElasticPoolPerDatabaseSettings_STATUS populates our ElasticPoolPerDatabaseSettings from the provided source ElasticPoolPerDatabaseSettings_STATUS
func (settings *ElasticPoolPerDatabaseSettings) Initialize_From_ElasticPoolPerDatabaseSettings_STATUS(source *ElasticPoolPerDatabaseSettings_STATUS) error {

	// MaxCapacity
	if source.MaxCapacity != nil {
		maxCapacity := *source.MaxCapacity
		settings.MaxCapacity = &maxCapacity
	} else {
		settings.MaxCapacity = nil
	}

	// MinCapacity
	if source.MinCapacity != nil {
		minCapacity := *source.MinCapacity
		settings.MinCapacity = &minCapacity
	} else {
		settings.MinCapacity = nil
	}

	// No error
	return nil
}

// Per database settings of an elastic pool.
type ElasticPoolPerDatabaseSettings_STATUS struct {
	// MaxCapacity: The maximum capacity any one database can consume.
	MaxCapacity *float64 `json:"maxCapacity,omitempty"`

	// MinCapacity: The minimum capacity all databases are guaranteed.
	MinCapacity *float64 `json:"minCapacity,omitempty"`
}

var _ genruntime.FromARMConverter = &ElasticPoolPerDatabaseSettings_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (settings *ElasticPoolPerDatabaseSettings_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ElasticPoolPerDatabaseSettings_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (settings *ElasticPoolPerDatabaseSettings_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ElasticPoolPerDatabaseSettings_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ElasticPoolPerDatabaseSettings_STATUS_ARM, got %T", armInput)
	}

	// Set property "MaxCapacity":
	if typedInput.MaxCapacity != nil {
		maxCapacity := *typedInput.MaxCapacity
		settings.MaxCapacity = &maxCapacity
	}

	// Set property "MinCapacity":
	if typedInput.MinCapacity != nil {
		minCapacity := *typedInput.MinCapacity
		settings.MinCapacity = &minCapacity
	}

	// No error
	return nil
}

// AssignProperties_From_ElasticPoolPerDatabaseSettings_STATUS populates our ElasticPoolPerDatabaseSettings_STATUS from the provided source ElasticPoolPerDatabaseSettings_STATUS
func (settings *ElasticPoolPerDatabaseSettings_STATUS) AssignProperties_From_ElasticPoolPerDatabaseSettings_STATUS(source *storage.ElasticPoolPerDatabaseSettings_STATUS) error {

	// MaxCapacity
	if source.MaxCapacity != nil {
		maxCapacity := *source.MaxCapacity
		settings.MaxCapacity = &maxCapacity
	} else {
		settings.MaxCapacity = nil
	}

	// MinCapacity
	if source.MinCapacity != nil {
		minCapacity := *source.MinCapacity
		settings.MinCapacity = &minCapacity
	} else {
		settings.MinCapacity = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ElasticPoolPerDatabaseSettings_STATUS populates the provided destination ElasticPoolPerDatabaseSettings_STATUS from our ElasticPoolPerDatabaseSettings_STATUS
func (settings *ElasticPoolPerDatabaseSettings_STATUS) AssignProperties_To_ElasticPoolPerDatabaseSettings_STATUS(destination *storage.ElasticPoolPerDatabaseSettings_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxCapacity
	if settings.MaxCapacity != nil {
		maxCapacity := *settings.MaxCapacity
		destination.MaxCapacity = &maxCapacity
	} else {
		destination.MaxCapacity = nil
	}

	// MinCapacity
	if settings.MinCapacity != nil {
		minCapacity := *settings.MinCapacity
		destination.MinCapacity = &minCapacity
	} else {
		destination.MinCapacity = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"BasePrice","LicenseIncluded"}
type ElasticPoolProperties_LicenseType string

const (
	ElasticPoolProperties_LicenseType_BasePrice       = ElasticPoolProperties_LicenseType("BasePrice")
	ElasticPoolProperties_LicenseType_LicenseIncluded = ElasticPoolProperties_LicenseType("LicenseIncluded")
)

// Mapping from string to ElasticPoolProperties_LicenseType
var elasticPoolProperties_LicenseType_Values = map[string]ElasticPoolProperties_LicenseType{
	"baseprice":       ElasticPoolProperties_LicenseType_BasePrice,
	"licenseincluded": ElasticPoolProperties_LicenseType_LicenseIncluded,
}

type ElasticPoolProperties_LicenseType_STATUS string

const (
	ElasticPoolProperties_LicenseType_STATUS_BasePrice       = ElasticPoolProperties_LicenseType_STATUS("BasePrice")
	ElasticPoolProperties_LicenseType_STATUS_LicenseIncluded = ElasticPoolProperties_LicenseType_STATUS("LicenseIncluded")
)

// Mapping from string to ElasticPoolProperties_LicenseType_STATUS
var elasticPoolProperties_LicenseType_STATUS_Values = map[string]ElasticPoolProperties_LicenseType_STATUS{
	"baseprice":       ElasticPoolProperties_LicenseType_STATUS_BasePrice,
	"licenseincluded": ElasticPoolProperties_LicenseType_STATUS_LicenseIncluded,
}

type ElasticPoolProperties_State_STATUS string

const (
	ElasticPoolProperties_State_STATUS_Creating = ElasticPoolProperties_State_STATUS("Creating")
	ElasticPoolProperties_State_STATUS_Disabled = ElasticPoolProperties_State_STATUS("Disabled")
	ElasticPoolProperties_State_STATUS_Ready    = ElasticPoolProperties_State_STATUS("Ready")
)

// Mapping from string to ElasticPoolProperties_State_STATUS
var elasticPoolProperties_State_STATUS_Values = map[string]ElasticPoolProperties_State_STATUS{
	"creating": ElasticPoolProperties_State_STATUS_Creating,
	"disabled": ElasticPoolProperties_State_STATUS_Disabled,
	"ready":    ElasticPoolProperties_State_STATUS_Ready,
}

func init() {
	SchemeBuilder.Register(&ServersElasticPool{}, &ServersElasticPoolList{})
}
