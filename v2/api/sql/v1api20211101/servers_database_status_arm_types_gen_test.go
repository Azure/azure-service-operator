// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseIdentity_STATUS_ARM, DatabaseIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseIdentity_STATUS_ARM runs a test to see if a specific instance of DatabaseIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseIdentity_STATUS_ARM(subject DatabaseIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// DatabaseIdentity_STATUS_ARMGenerator()
var databaseIdentity_STATUS_ARMGenerator gopter.Gen

// DatabaseIdentity_STATUS_ARMGenerator returns a generator of DatabaseIdentity_STATUS_ARM instances for property testing.
// We first initialize databaseIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseIdentity_STATUS_ARMGenerator() gopter.Gen {
	if databaseIdentity_STATUS_ARMGenerator != nil {
		return databaseIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseIdentity_STATUS_ARM(generators)
	databaseIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseIdentity_STATUS_ARM(generators)
	databaseIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseIdentity_STATUS_ARM{}), generators)

	return databaseIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(DatabaseIdentity_Type_STATUS_ARM_None, DatabaseIdentity_Type_STATUS_ARM_UserAssigned))
}

// AddRelatedPropertyGeneratorsForDatabaseIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(
		gen.AlphaString(),
		DatabaseUserIdentity_STATUS_ARMGenerator())
}

func Test_DatabaseProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseProperties_STATUS_ARM, DatabaseProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseProperties_STATUS_ARM runs a test to see if a specific instance of DatabaseProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseProperties_STATUS_ARM(subject DatabaseProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DatabaseProperties_STATUS_ARMGenerator()
var databaseProperties_STATUS_ARMGenerator gopter.Gen

// DatabaseProperties_STATUS_ARMGenerator returns a generator of DatabaseProperties_STATUS_ARM instances for property testing.
// We first initialize databaseProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseProperties_STATUS_ARMGenerator() gopter.Gen {
	if databaseProperties_STATUS_ARMGenerator != nil {
		return databaseProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_STATUS_ARM(generators)
	databaseProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseProperties_STATUS_ARM(generators)
	databaseProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseProperties_STATUS_ARM{}), generators)

	return databaseProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AutoPauseDelay"] = gen.PtrOf(gen.Int())
	gens["CatalogCollation"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_CatalogCollation_STATUS_ARM_DATABASE_DEFAULT, DatabaseProperties_CatalogCollation_STATUS_ARM_SQL_Latin1_General_CP1_CI_AS))
	gens["Collation"] = gen.PtrOf(gen.AlphaString())
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		DatabaseProperties_CreateMode_STATUS_ARM_Copy,
		DatabaseProperties_CreateMode_STATUS_ARM_Default,
		DatabaseProperties_CreateMode_STATUS_ARM_OnlineSecondary,
		DatabaseProperties_CreateMode_STATUS_ARM_PointInTimeRestore,
		DatabaseProperties_CreateMode_STATUS_ARM_Recovery,
		DatabaseProperties_CreateMode_STATUS_ARM_Restore,
		DatabaseProperties_CreateMode_STATUS_ARM_RestoreExternalBackup,
		DatabaseProperties_CreateMode_STATUS_ARM_RestoreExternalBackupSecondary,
		DatabaseProperties_CreateMode_STATUS_ARM_RestoreLongTermRetentionBackup,
		DatabaseProperties_CreateMode_STATUS_ARM_Secondary))
	gens["CreationDate"] = gen.PtrOf(gen.AlphaString())
	gens["CurrentBackupStorageRedundancy"] = gen.PtrOf(gen.OneConstOf(
		DatabaseProperties_CurrentBackupStorageRedundancy_STATUS_ARM_Geo,
		DatabaseProperties_CurrentBackupStorageRedundancy_STATUS_ARM_GeoZone,
		DatabaseProperties_CurrentBackupStorageRedundancy_STATUS_ARM_Local,
		DatabaseProperties_CurrentBackupStorageRedundancy_STATUS_ARM_Zone))
	gens["CurrentServiceObjectiveName"] = gen.PtrOf(gen.AlphaString())
	gens["DatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["DefaultSecondaryLocation"] = gen.PtrOf(gen.AlphaString())
	gens["EarliestRestoreDate"] = gen.PtrOf(gen.AlphaString())
	gens["ElasticPoolId"] = gen.PtrOf(gen.AlphaString())
	gens["FailoverGroupId"] = gen.PtrOf(gen.AlphaString())
	gens["FederatedClientId"] = gen.PtrOf(gen.AlphaString())
	gens["HighAvailabilityReplicaCount"] = gen.PtrOf(gen.Int())
	gens["IsInfraEncryptionEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsLedgerOn"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_LicenseType_STATUS_ARM_BasePrice, DatabaseProperties_LicenseType_STATUS_ARM_LicenseIncluded))
	gens["LongTermRetentionBackupResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["MaintenanceConfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["MaxLogSizeBytes"] = gen.PtrOf(gen.Int())
	gens["MaxSizeBytes"] = gen.PtrOf(gen.Int())
	gens["MinCapacity"] = gen.PtrOf(gen.Float64())
	gens["PausedDate"] = gen.PtrOf(gen.AlphaString())
	gens["ReadScale"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_ReadScale_STATUS_ARM_Disabled, DatabaseProperties_ReadScale_STATUS_ARM_Enabled))
	gens["RecoverableDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["RecoveryServicesRecoveryPointId"] = gen.PtrOf(gen.AlphaString())
	gens["RequestedBackupStorageRedundancy"] = gen.PtrOf(gen.OneConstOf(
		DatabaseProperties_RequestedBackupStorageRedundancy_STATUS_ARM_Geo,
		DatabaseProperties_RequestedBackupStorageRedundancy_STATUS_ARM_GeoZone,
		DatabaseProperties_RequestedBackupStorageRedundancy_STATUS_ARM_Local,
		DatabaseProperties_RequestedBackupStorageRedundancy_STATUS_ARM_Zone))
	gens["RequestedServiceObjectiveName"] = gen.PtrOf(gen.AlphaString())
	gens["RestorableDroppedDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["ResumedDate"] = gen.PtrOf(gen.AlphaString())
	gens["SampleName"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_SampleName_STATUS_ARM_AdventureWorksLT, DatabaseProperties_SampleName_STATUS_ARM_WideWorldImportersFull, DatabaseProperties_SampleName_STATUS_ARM_WideWorldImportersStd))
	gens["SecondaryType"] = gen.PtrOf(gen.OneConstOf(DatabaseProperties_SecondaryType_STATUS_ARM_Geo, DatabaseProperties_SecondaryType_STATUS_ARM_Named))
	gens["SourceDatabaseDeletionDate"] = gen.PtrOf(gen.AlphaString())
	gens["SourceDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["SourceResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		DatabaseProperties_Status_STATUS_ARM_AutoClosed,
		DatabaseProperties_Status_STATUS_ARM_Copying,
		DatabaseProperties_Status_STATUS_ARM_Creating,
		DatabaseProperties_Status_STATUS_ARM_Disabled,
		DatabaseProperties_Status_STATUS_ARM_EmergencyMode,
		DatabaseProperties_Status_STATUS_ARM_Inaccessible,
		DatabaseProperties_Status_STATUS_ARM_Offline,
		DatabaseProperties_Status_STATUS_ARM_OfflineChangingDwPerformanceTiers,
		DatabaseProperties_Status_STATUS_ARM_OfflineSecondary,
		DatabaseProperties_Status_STATUS_ARM_Online,
		DatabaseProperties_Status_STATUS_ARM_OnlineChangingDwPerformanceTiers,
		DatabaseProperties_Status_STATUS_ARM_Paused,
		DatabaseProperties_Status_STATUS_ARM_Pausing,
		DatabaseProperties_Status_STATUS_ARM_Recovering,
		DatabaseProperties_Status_STATUS_ARM_RecoveryPending,
		DatabaseProperties_Status_STATUS_ARM_Restoring,
		DatabaseProperties_Status_STATUS_ARM_Resuming,
		DatabaseProperties_Status_STATUS_ARM_Scaling,
		DatabaseProperties_Status_STATUS_ARM_Shutdown,
		DatabaseProperties_Status_STATUS_ARM_Standby,
		DatabaseProperties_Status_STATUS_ARM_Starting,
		DatabaseProperties_Status_STATUS_ARM_Stopped,
		DatabaseProperties_Status_STATUS_ARM_Stopping,
		DatabaseProperties_Status_STATUS_ARM_Suspect))
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForDatabaseProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CurrentSku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
}

func Test_DatabaseUserIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseUserIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseUserIdentity_STATUS_ARM, DatabaseUserIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseUserIdentity_STATUS_ARM runs a test to see if a specific instance of DatabaseUserIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseUserIdentity_STATUS_ARM(subject DatabaseUserIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseUserIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseUserIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// DatabaseUserIdentity_STATUS_ARMGenerator()
var databaseUserIdentity_STATUS_ARMGenerator gopter.Gen

// DatabaseUserIdentity_STATUS_ARMGenerator returns a generator of DatabaseUserIdentity_STATUS_ARM instances for property testing.
func DatabaseUserIdentity_STATUS_ARMGenerator() gopter.Gen {
	if databaseUserIdentity_STATUS_ARMGenerator != nil {
		return databaseUserIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseUserIdentity_STATUS_ARM(generators)
	databaseUserIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseUserIdentity_STATUS_ARM{}), generators)

	return databaseUserIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseUserIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseUserIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServersDatabase_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersDatabase_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersDatabase_STATUS_ARM, ServersDatabase_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersDatabase_STATUS_ARM runs a test to see if a specific instance of ServersDatabase_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServersDatabase_STATUS_ARM(subject ServersDatabase_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersDatabase_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersDatabase_STATUS_ARM instances for property testing - lazily instantiated by
// ServersDatabase_STATUS_ARMGenerator()
var serversDatabase_STATUS_ARMGenerator gopter.Gen

// ServersDatabase_STATUS_ARMGenerator returns a generator of ServersDatabase_STATUS_ARM instances for property testing.
// We first initialize serversDatabase_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersDatabase_STATUS_ARMGenerator() gopter.Gen {
	if serversDatabase_STATUS_ARMGenerator != nil {
		return serversDatabase_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersDatabase_STATUS_ARM(generators)
	serversDatabase_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServersDatabase_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersDatabase_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForServersDatabase_STATUS_ARM(generators)
	serversDatabase_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServersDatabase_STATUS_ARM{}), generators)

	return serversDatabase_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServersDatabase_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersDatabase_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["ManagedBy"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServersDatabase_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersDatabase_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(DatabaseIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(DatabaseProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
}

func Test_Sku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS_ARM, Sku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS_ARM runs a test to see if a specific instance of Sku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS_ARM(subject Sku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS_ARM instances for property testing - lazily instantiated by Sku_STATUS_ARMGenerator()
var sku_STATUS_ARMGenerator gopter.Gen

// Sku_STATUS_ARMGenerator returns a generator of Sku_STATUS_ARM instances for property testing.
func Sku_STATUS_ARMGenerator() gopter.Gen {
	if sku_STATUS_ARMGenerator != nil {
		return sku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS_ARM(generators)
	sku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS_ARM{}), generators)

	return sku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}
