// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_ConnectionPolicy_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_ConnectionPolicy_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_ConnectionPolicy_Spec_ARM, Servers_ConnectionPolicy_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_ConnectionPolicy_Spec_ARM runs a test to see if a specific instance of Servers_ConnectionPolicy_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_ConnectionPolicy_Spec_ARM(subject Servers_ConnectionPolicy_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_ConnectionPolicy_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_ConnectionPolicy_Spec_ARM instances for property testing - lazily instantiated by
// Servers_ConnectionPolicy_Spec_ARMGenerator()
var servers_ConnectionPolicy_Spec_ARMGenerator gopter.Gen

// Servers_ConnectionPolicy_Spec_ARMGenerator returns a generator of Servers_ConnectionPolicy_Spec_ARM instances for property testing.
// We first initialize servers_ConnectionPolicy_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_ConnectionPolicy_Spec_ARMGenerator() gopter.Gen {
	if servers_ConnectionPolicy_Spec_ARMGenerator != nil {
		return servers_ConnectionPolicy_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_Spec_ARM(generators)
	servers_ConnectionPolicy_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_ConnectionPolicy_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForServers_ConnectionPolicy_Spec_ARM(generators)
	servers_ConnectionPolicy_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_ConnectionPolicy_Spec_ARM{}), generators)

	return servers_ConnectionPolicy_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForServers_ConnectionPolicy_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_ConnectionPolicy_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerConnectionPolicyProperties_ARMGenerator())
}

func Test_ServerConnectionPolicyProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerConnectionPolicyProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerConnectionPolicyProperties_ARM, ServerConnectionPolicyProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerConnectionPolicyProperties_ARM runs a test to see if a specific instance of ServerConnectionPolicyProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerConnectionPolicyProperties_ARM(subject ServerConnectionPolicyProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerConnectionPolicyProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerConnectionPolicyProperties_ARM instances for property testing - lazily instantiated by
// ServerConnectionPolicyProperties_ARMGenerator()
var serverConnectionPolicyProperties_ARMGenerator gopter.Gen

// ServerConnectionPolicyProperties_ARMGenerator returns a generator of ServerConnectionPolicyProperties_ARM instances for property testing.
func ServerConnectionPolicyProperties_ARMGenerator() gopter.Gen {
	if serverConnectionPolicyProperties_ARMGenerator != nil {
		return serverConnectionPolicyProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerConnectionPolicyProperties_ARM(generators)
	serverConnectionPolicyProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ServerConnectionPolicyProperties_ARM{}), generators)

	return serverConnectionPolicyProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerConnectionPolicyProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerConnectionPolicyProperties_ARM(gens map[string]gopter.Gen) {
	gens["ConnectionType"] = gen.PtrOf(gen.OneConstOf(ServerConnectionPolicyProperties_ConnectionType_Default, ServerConnectionPolicyProperties_ConnectionType_Proxy, ServerConnectionPolicyProperties_ConnectionType_Redirect))
}
