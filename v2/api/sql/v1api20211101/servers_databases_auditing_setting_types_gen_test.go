// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/sql/v1api20211101/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersDatabasesAuditingSetting_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersDatabasesAuditingSetting to hub returns original",
		prop.ForAll(RunResourceConversionTestForServersDatabasesAuditingSetting, ServersDatabasesAuditingSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForServersDatabasesAuditingSetting tests if a specific instance of ServersDatabasesAuditingSetting round trips to the hub storage version and back losslessly
func RunResourceConversionTestForServersDatabasesAuditingSetting(subject ServersDatabasesAuditingSetting) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.ServersDatabasesAuditingSetting
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual ServersDatabasesAuditingSetting
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersDatabasesAuditingSetting_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersDatabasesAuditingSetting to ServersDatabasesAuditingSetting via AssignProperties_To_ServersDatabasesAuditingSetting & AssignProperties_From_ServersDatabasesAuditingSetting returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersDatabasesAuditingSetting, ServersDatabasesAuditingSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersDatabasesAuditingSetting tests if a specific instance of ServersDatabasesAuditingSetting can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServersDatabasesAuditingSetting(subject ServersDatabasesAuditingSetting) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ServersDatabasesAuditingSetting
	err := copied.AssignProperties_To_ServersDatabasesAuditingSetting(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersDatabasesAuditingSetting
	err = actual.AssignProperties_From_ServersDatabasesAuditingSetting(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersDatabasesAuditingSetting_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersDatabasesAuditingSetting via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersDatabasesAuditingSetting, ServersDatabasesAuditingSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersDatabasesAuditingSetting runs a test to see if a specific instance of ServersDatabasesAuditingSetting round trips to JSON and back losslessly
func RunJSONSerializationTestForServersDatabasesAuditingSetting(subject ServersDatabasesAuditingSetting) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersDatabasesAuditingSetting
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersDatabasesAuditingSetting instances for property testing - lazily instantiated by
// ServersDatabasesAuditingSettingGenerator()
var serversDatabasesAuditingSettingGenerator gopter.Gen

// ServersDatabasesAuditingSettingGenerator returns a generator of ServersDatabasesAuditingSetting instances for property testing.
func ServersDatabasesAuditingSettingGenerator() gopter.Gen {
	if serversDatabasesAuditingSettingGenerator != nil {
		return serversDatabasesAuditingSettingGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServersDatabasesAuditingSetting(generators)
	serversDatabasesAuditingSettingGenerator = gen.Struct(reflect.TypeOf(ServersDatabasesAuditingSetting{}), generators)

	return serversDatabasesAuditingSettingGenerator
}

// AddRelatedPropertyGeneratorsForServersDatabasesAuditingSetting is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersDatabasesAuditingSetting(gens map[string]gopter.Gen) {
	gens["Spec"] = ServersDatabasesAuditingSetting_SpecGenerator()
	gens["Status"] = ServersDatabasesAuditingSetting_STATUSGenerator()
}

func Test_ServersDatabasesAuditingSetting_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersDatabasesAuditingSetting_STATUS to ServersDatabasesAuditingSetting_STATUS via AssignProperties_To_ServersDatabasesAuditingSetting_STATUS & AssignProperties_From_ServersDatabasesAuditingSetting_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersDatabasesAuditingSetting_STATUS, ServersDatabasesAuditingSetting_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersDatabasesAuditingSetting_STATUS tests if a specific instance of ServersDatabasesAuditingSetting_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServersDatabasesAuditingSetting_STATUS(subject ServersDatabasesAuditingSetting_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ServersDatabasesAuditingSetting_STATUS
	err := copied.AssignProperties_To_ServersDatabasesAuditingSetting_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersDatabasesAuditingSetting_STATUS
	err = actual.AssignProperties_From_ServersDatabasesAuditingSetting_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersDatabasesAuditingSetting_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersDatabasesAuditingSetting_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersDatabasesAuditingSetting_STATUS, ServersDatabasesAuditingSetting_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersDatabasesAuditingSetting_STATUS runs a test to see if a specific instance of ServersDatabasesAuditingSetting_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServersDatabasesAuditingSetting_STATUS(subject ServersDatabasesAuditingSetting_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersDatabasesAuditingSetting_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersDatabasesAuditingSetting_STATUS instances for property testing - lazily instantiated by
// ServersDatabasesAuditingSetting_STATUSGenerator()
var serversDatabasesAuditingSetting_STATUSGenerator gopter.Gen

// ServersDatabasesAuditingSetting_STATUSGenerator returns a generator of ServersDatabasesAuditingSetting_STATUS instances for property testing.
func ServersDatabasesAuditingSetting_STATUSGenerator() gopter.Gen {
	if serversDatabasesAuditingSetting_STATUSGenerator != nil {
		return serversDatabasesAuditingSetting_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS(generators)
	serversDatabasesAuditingSetting_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersDatabasesAuditingSetting_STATUS{}), generators)

	return serversDatabasesAuditingSetting_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_STATUS(gens map[string]gopter.Gen) {
	gens["AuditActionsAndGroups"] = gen.SliceOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsAzureMonitorTargetEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsManagedIdentityInUse"] = gen.PtrOf(gen.Bool())
	gens["IsStorageSecondaryKeyInUse"] = gen.PtrOf(gen.Bool())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["QueueDelayMs"] = gen.PtrOf(gen.Int())
	gens["RetentionDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.OneConstOf(DatabaseBlobAuditingPolicyProperties_State_STATUS_Disabled, DatabaseBlobAuditingPolicyProperties_State_STATUS_Enabled))
	gens["StorageAccountSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServersDatabasesAuditingSetting_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersDatabasesAuditingSetting_Spec to ServersDatabasesAuditingSetting_Spec via AssignProperties_To_ServersDatabasesAuditingSetting_Spec & AssignProperties_From_ServersDatabasesAuditingSetting_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersDatabasesAuditingSetting_Spec, ServersDatabasesAuditingSetting_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersDatabasesAuditingSetting_Spec tests if a specific instance of ServersDatabasesAuditingSetting_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForServersDatabasesAuditingSetting_Spec(subject ServersDatabasesAuditingSetting_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.ServersDatabasesAuditingSetting_Spec
	err := copied.AssignProperties_To_ServersDatabasesAuditingSetting_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersDatabasesAuditingSetting_Spec
	err = actual.AssignProperties_From_ServersDatabasesAuditingSetting_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersDatabasesAuditingSetting_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersDatabasesAuditingSetting_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersDatabasesAuditingSetting_Spec, ServersDatabasesAuditingSetting_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersDatabasesAuditingSetting_Spec runs a test to see if a specific instance of ServersDatabasesAuditingSetting_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServersDatabasesAuditingSetting_Spec(subject ServersDatabasesAuditingSetting_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersDatabasesAuditingSetting_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersDatabasesAuditingSetting_Spec instances for property testing - lazily instantiated by
// ServersDatabasesAuditingSetting_SpecGenerator()
var serversDatabasesAuditingSetting_SpecGenerator gopter.Gen

// ServersDatabasesAuditingSetting_SpecGenerator returns a generator of ServersDatabasesAuditingSetting_Spec instances for property testing.
func ServersDatabasesAuditingSetting_SpecGenerator() gopter.Gen {
	if serversDatabasesAuditingSetting_SpecGenerator != nil {
		return serversDatabasesAuditingSetting_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_Spec(generators)
	serversDatabasesAuditingSetting_SpecGenerator = gen.Struct(reflect.TypeOf(ServersDatabasesAuditingSetting_Spec{}), generators)

	return serversDatabasesAuditingSetting_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersDatabasesAuditingSetting_Spec(gens map[string]gopter.Gen) {
	gens["AuditActionsAndGroups"] = gen.SliceOf(gen.AlphaString())
	gens["IsAzureMonitorTargetEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsManagedIdentityInUse"] = gen.PtrOf(gen.Bool())
	gens["IsStorageSecondaryKeyInUse"] = gen.PtrOf(gen.Bool())
	gens["QueueDelayMs"] = gen.PtrOf(gen.Int())
	gens["RetentionDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.OneConstOf(DatabaseBlobAuditingPolicyProperties_State_Disabled, DatabaseBlobAuditingPolicyProperties_State_Enabled))
	gens["StorageAccountSubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageEndpoint"] = gen.PtrOf(gen.AlphaString())
}
