// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM, DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM runs a test to see if a specific instance of DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM(subject DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM instances for property
// testing - lazily instantiated by DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator()
var databaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator gopter.Gen

// DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator returns a generator of DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM instances for property testing.
// We first initialize databaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator() gopter.Gen {
	if databaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator != nil {
		return databaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM(generators)
	databaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM(generators)
	databaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator = gen.Struct(reflect.TypeOf(DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM{}), generators)

	return databaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM(gens map[string]gopter.Gen) {
	gens["StorageAccountAccessKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerPath"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerSasKey"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARM(gens map[string]gopter.Gen) {
	gens["RecurringScans"] = gen.PtrOf(VulnerabilityAssessmentRecurringScansProperties_ARMGenerator())
}

func Test_Servers_Databases_VulnerabilityAssessment_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Databases_VulnerabilityAssessment_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Databases_VulnerabilityAssessment_Spec_ARM, Servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Databases_VulnerabilityAssessment_Spec_ARM runs a test to see if a specific instance of Servers_Databases_VulnerabilityAssessment_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Databases_VulnerabilityAssessment_Spec_ARM(subject Servers_Databases_VulnerabilityAssessment_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Databases_VulnerabilityAssessment_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Databases_VulnerabilityAssessment_Spec_ARM instances for property testing - lazily instantiated
// by Servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator()
var servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator gopter.Gen

// Servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator returns a generator of Servers_Databases_VulnerabilityAssessment_Spec_ARM instances for property testing.
// We first initialize servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator() gopter.Gen {
	if servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator != nil {
		return servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec_ARM(generators)
	servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_VulnerabilityAssessment_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec_ARM(generators)
	servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_VulnerabilityAssessment_Spec_ARM{}), generators)

	return servers_Databases_VulnerabilityAssessment_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DatabaseVulnerabilityAssessmentsDatabaseVulnerabilityAssessmentProperties_ARMGenerator())
}

func Test_VulnerabilityAssessmentRecurringScansProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VulnerabilityAssessmentRecurringScansProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties_ARM, VulnerabilityAssessmentRecurringScansProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties_ARM runs a test to see if a specific instance of VulnerabilityAssessmentRecurringScansProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties_ARM(subject VulnerabilityAssessmentRecurringScansProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VulnerabilityAssessmentRecurringScansProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VulnerabilityAssessmentRecurringScansProperties_ARM instances for property testing - lazily instantiated
// by VulnerabilityAssessmentRecurringScansProperties_ARMGenerator()
var vulnerabilityAssessmentRecurringScansProperties_ARMGenerator gopter.Gen

// VulnerabilityAssessmentRecurringScansProperties_ARMGenerator returns a generator of VulnerabilityAssessmentRecurringScansProperties_ARM instances for property testing.
func VulnerabilityAssessmentRecurringScansProperties_ARMGenerator() gopter.Gen {
	if vulnerabilityAssessmentRecurringScansProperties_ARMGenerator != nil {
		return vulnerabilityAssessmentRecurringScansProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties_ARM(generators)
	vulnerabilityAssessmentRecurringScansProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VulnerabilityAssessmentRecurringScansProperties_ARM{}), generators)

	return vulnerabilityAssessmentRecurringScansProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties_ARM(gens map[string]gopter.Gen) {
	gens["EmailSubscriptionAdmins"] = gen.PtrOf(gen.Bool())
	gens["Emails"] = gen.SliceOf(gen.AlphaString())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
