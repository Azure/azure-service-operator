// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersOutboundFirewallRule_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersOutboundFirewallRule via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersOutboundFirewallRule, ServersOutboundFirewallRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersOutboundFirewallRule runs a test to see if a specific instance of ServersOutboundFirewallRule round trips to JSON and back losslessly
func RunJSONSerializationTestForServersOutboundFirewallRule(subject ServersOutboundFirewallRule) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersOutboundFirewallRule
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersOutboundFirewallRule instances for property testing - lazily instantiated by
// ServersOutboundFirewallRuleGenerator()
var serversOutboundFirewallRuleGenerator gopter.Gen

// ServersOutboundFirewallRuleGenerator returns a generator of ServersOutboundFirewallRule instances for property testing.
func ServersOutboundFirewallRuleGenerator() gopter.Gen {
	if serversOutboundFirewallRuleGenerator != nil {
		return serversOutboundFirewallRuleGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServersOutboundFirewallRule(generators)
	serversOutboundFirewallRuleGenerator = gen.Struct(reflect.TypeOf(ServersOutboundFirewallRule{}), generators)

	return serversOutboundFirewallRuleGenerator
}

// AddRelatedPropertyGeneratorsForServersOutboundFirewallRule is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersOutboundFirewallRule(gens map[string]gopter.Gen) {
	gens["Spec"] = ServersOutboundFirewallRule_SpecGenerator()
	gens["Status"] = ServersOutboundFirewallRule_STATUSGenerator()
}

func Test_ServersOutboundFirewallRuleOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersOutboundFirewallRuleOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersOutboundFirewallRuleOperatorSpec, ServersOutboundFirewallRuleOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersOutboundFirewallRuleOperatorSpec runs a test to see if a specific instance of ServersOutboundFirewallRuleOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForServersOutboundFirewallRuleOperatorSpec(subject ServersOutboundFirewallRuleOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersOutboundFirewallRuleOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersOutboundFirewallRuleOperatorSpec instances for property testing - lazily instantiated by
// ServersOutboundFirewallRuleOperatorSpecGenerator()
var serversOutboundFirewallRuleOperatorSpecGenerator gopter.Gen

// ServersOutboundFirewallRuleOperatorSpecGenerator returns a generator of ServersOutboundFirewallRuleOperatorSpec instances for property testing.
func ServersOutboundFirewallRuleOperatorSpecGenerator() gopter.Gen {
	if serversOutboundFirewallRuleOperatorSpecGenerator != nil {
		return serversOutboundFirewallRuleOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	serversOutboundFirewallRuleOperatorSpecGenerator = gen.Struct(reflect.TypeOf(ServersOutboundFirewallRuleOperatorSpec{}), generators)

	return serversOutboundFirewallRuleOperatorSpecGenerator
}

func Test_ServersOutboundFirewallRule_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersOutboundFirewallRule_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersOutboundFirewallRule_STATUS, ServersOutboundFirewallRule_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersOutboundFirewallRule_STATUS runs a test to see if a specific instance of ServersOutboundFirewallRule_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServersOutboundFirewallRule_STATUS(subject ServersOutboundFirewallRule_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersOutboundFirewallRule_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersOutboundFirewallRule_STATUS instances for property testing - lazily instantiated by
// ServersOutboundFirewallRule_STATUSGenerator()
var serversOutboundFirewallRule_STATUSGenerator gopter.Gen

// ServersOutboundFirewallRule_STATUSGenerator returns a generator of ServersOutboundFirewallRule_STATUS instances for property testing.
func ServersOutboundFirewallRule_STATUSGenerator() gopter.Gen {
	if serversOutboundFirewallRule_STATUSGenerator != nil {
		return serversOutboundFirewallRule_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersOutboundFirewallRule_STATUS(generators)
	serversOutboundFirewallRule_STATUSGenerator = gen.Struct(reflect.TypeOf(ServersOutboundFirewallRule_STATUS{}), generators)

	return serversOutboundFirewallRule_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServersOutboundFirewallRule_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersOutboundFirewallRule_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServersOutboundFirewallRule_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersOutboundFirewallRule_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersOutboundFirewallRule_Spec, ServersOutboundFirewallRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersOutboundFirewallRule_Spec runs a test to see if a specific instance of ServersOutboundFirewallRule_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServersOutboundFirewallRule_Spec(subject ServersOutboundFirewallRule_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersOutboundFirewallRule_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersOutboundFirewallRule_Spec instances for property testing - lazily instantiated by
// ServersOutboundFirewallRule_SpecGenerator()
var serversOutboundFirewallRule_SpecGenerator gopter.Gen

// ServersOutboundFirewallRule_SpecGenerator returns a generator of ServersOutboundFirewallRule_Spec instances for property testing.
// We first initialize serversOutboundFirewallRule_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersOutboundFirewallRule_SpecGenerator() gopter.Gen {
	if serversOutboundFirewallRule_SpecGenerator != nil {
		return serversOutboundFirewallRule_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersOutboundFirewallRule_Spec(generators)
	serversOutboundFirewallRule_SpecGenerator = gen.Struct(reflect.TypeOf(ServersOutboundFirewallRule_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersOutboundFirewallRule_Spec(generators)
	AddRelatedPropertyGeneratorsForServersOutboundFirewallRule_Spec(generators)
	serversOutboundFirewallRule_SpecGenerator = gen.Struct(reflect.TypeOf(ServersOutboundFirewallRule_Spec{}), generators)

	return serversOutboundFirewallRule_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServersOutboundFirewallRule_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersOutboundFirewallRule_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["OriginalVersion"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForServersOutboundFirewallRule_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersOutboundFirewallRule_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(ServersOutboundFirewallRuleOperatorSpecGenerator())
}
