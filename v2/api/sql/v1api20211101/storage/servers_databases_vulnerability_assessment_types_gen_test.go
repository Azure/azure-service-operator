// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersDatabasesVulnerabilityAssessment_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersDatabasesVulnerabilityAssessment via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersDatabasesVulnerabilityAssessment, ServersDatabasesVulnerabilityAssessmentGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersDatabasesVulnerabilityAssessment runs a test to see if a specific instance of ServersDatabasesVulnerabilityAssessment round trips to JSON and back losslessly
func RunJSONSerializationTestForServersDatabasesVulnerabilityAssessment(subject ServersDatabasesVulnerabilityAssessment) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersDatabasesVulnerabilityAssessment
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersDatabasesVulnerabilityAssessment instances for property testing - lazily instantiated by
// ServersDatabasesVulnerabilityAssessmentGenerator()
var serversDatabasesVulnerabilityAssessmentGenerator gopter.Gen

// ServersDatabasesVulnerabilityAssessmentGenerator returns a generator of ServersDatabasesVulnerabilityAssessment instances for property testing.
func ServersDatabasesVulnerabilityAssessmentGenerator() gopter.Gen {
	if serversDatabasesVulnerabilityAssessmentGenerator != nil {
		return serversDatabasesVulnerabilityAssessmentGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServersDatabasesVulnerabilityAssessment(generators)
	serversDatabasesVulnerabilityAssessmentGenerator = gen.Struct(reflect.TypeOf(ServersDatabasesVulnerabilityAssessment{}), generators)

	return serversDatabasesVulnerabilityAssessmentGenerator
}

// AddRelatedPropertyGeneratorsForServersDatabasesVulnerabilityAssessment is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersDatabasesVulnerabilityAssessment(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_Databases_VulnerabilityAssessment_SpecGenerator()
	gens["Status"] = Servers_Databases_VulnerabilityAssessment_STATUSGenerator()
}

func Test_Servers_Databases_VulnerabilityAssessment_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Databases_VulnerabilityAssessment_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Databases_VulnerabilityAssessment_Spec, Servers_Databases_VulnerabilityAssessment_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Databases_VulnerabilityAssessment_Spec runs a test to see if a specific instance of Servers_Databases_VulnerabilityAssessment_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Databases_VulnerabilityAssessment_Spec(subject Servers_Databases_VulnerabilityAssessment_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Databases_VulnerabilityAssessment_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Databases_VulnerabilityAssessment_Spec instances for property testing - lazily instantiated by
// Servers_Databases_VulnerabilityAssessment_SpecGenerator()
var servers_Databases_VulnerabilityAssessment_SpecGenerator gopter.Gen

// Servers_Databases_VulnerabilityAssessment_SpecGenerator returns a generator of Servers_Databases_VulnerabilityAssessment_Spec instances for property testing.
// We first initialize servers_Databases_VulnerabilityAssessment_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Databases_VulnerabilityAssessment_SpecGenerator() gopter.Gen {
	if servers_Databases_VulnerabilityAssessment_SpecGenerator != nil {
		return servers_Databases_VulnerabilityAssessment_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec(generators)
	servers_Databases_VulnerabilityAssessment_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_VulnerabilityAssessment_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec(generators)
	AddRelatedPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec(generators)
	servers_Databases_VulnerabilityAssessment_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_VulnerabilityAssessment_Spec{}), generators)

	return servers_Databases_VulnerabilityAssessment_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec(gens map[string]gopter.Gen) {
	gens["OriginalVersion"] = gen.AlphaString()
	gens["StorageContainerPath"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_Spec(gens map[string]gopter.Gen) {
	gens["RecurringScans"] = gen.PtrOf(VulnerabilityAssessmentRecurringScansPropertiesGenerator())
}

func Test_Servers_Databases_VulnerabilityAssessment_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Databases_VulnerabilityAssessment_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Databases_VulnerabilityAssessment_STATUS, Servers_Databases_VulnerabilityAssessment_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Databases_VulnerabilityAssessment_STATUS runs a test to see if a specific instance of Servers_Databases_VulnerabilityAssessment_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Databases_VulnerabilityAssessment_STATUS(subject Servers_Databases_VulnerabilityAssessment_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Databases_VulnerabilityAssessment_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Databases_VulnerabilityAssessment_STATUS instances for property testing - lazily instantiated by
// Servers_Databases_VulnerabilityAssessment_STATUSGenerator()
var servers_Databases_VulnerabilityAssessment_STATUSGenerator gopter.Gen

// Servers_Databases_VulnerabilityAssessment_STATUSGenerator returns a generator of Servers_Databases_VulnerabilityAssessment_STATUS instances for property testing.
// We first initialize servers_Databases_VulnerabilityAssessment_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Databases_VulnerabilityAssessment_STATUSGenerator() gopter.Gen {
	if servers_Databases_VulnerabilityAssessment_STATUSGenerator != nil {
		return servers_Databases_VulnerabilityAssessment_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_STATUS(generators)
	servers_Databases_VulnerabilityAssessment_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_VulnerabilityAssessment_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_STATUS(generators)
	AddRelatedPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_STATUS(generators)
	servers_Databases_VulnerabilityAssessment_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_VulnerabilityAssessment_STATUS{}), generators)

	return servers_Databases_VulnerabilityAssessment_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerPath"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Databases_VulnerabilityAssessment_STATUS(gens map[string]gopter.Gen) {
	gens["RecurringScans"] = gen.PtrOf(VulnerabilityAssessmentRecurringScansProperties_STATUSGenerator())
}

func Test_VulnerabilityAssessmentRecurringScansProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VulnerabilityAssessmentRecurringScansProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties, VulnerabilityAssessmentRecurringScansPropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties runs a test to see if a specific instance of VulnerabilityAssessmentRecurringScansProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties(subject VulnerabilityAssessmentRecurringScansProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VulnerabilityAssessmentRecurringScansProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VulnerabilityAssessmentRecurringScansProperties instances for property testing - lazily instantiated by
// VulnerabilityAssessmentRecurringScansPropertiesGenerator()
var vulnerabilityAssessmentRecurringScansPropertiesGenerator gopter.Gen

// VulnerabilityAssessmentRecurringScansPropertiesGenerator returns a generator of VulnerabilityAssessmentRecurringScansProperties instances for property testing.
func VulnerabilityAssessmentRecurringScansPropertiesGenerator() gopter.Gen {
	if vulnerabilityAssessmentRecurringScansPropertiesGenerator != nil {
		return vulnerabilityAssessmentRecurringScansPropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties(generators)
	vulnerabilityAssessmentRecurringScansPropertiesGenerator = gen.Struct(reflect.TypeOf(VulnerabilityAssessmentRecurringScansProperties{}), generators)

	return vulnerabilityAssessmentRecurringScansPropertiesGenerator
}

// AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties(gens map[string]gopter.Gen) {
	gens["EmailSubscriptionAdmins"] = gen.PtrOf(gen.Bool())
	gens["Emails"] = gen.SliceOf(gen.AlphaString())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_VulnerabilityAssessmentRecurringScansProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VulnerabilityAssessmentRecurringScansProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties_STATUS, VulnerabilityAssessmentRecurringScansProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties_STATUS runs a test to see if a specific instance of VulnerabilityAssessmentRecurringScansProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties_STATUS(subject VulnerabilityAssessmentRecurringScansProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VulnerabilityAssessmentRecurringScansProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VulnerabilityAssessmentRecurringScansProperties_STATUS instances for property testing - lazily
// instantiated by VulnerabilityAssessmentRecurringScansProperties_STATUSGenerator()
var vulnerabilityAssessmentRecurringScansProperties_STATUSGenerator gopter.Gen

// VulnerabilityAssessmentRecurringScansProperties_STATUSGenerator returns a generator of VulnerabilityAssessmentRecurringScansProperties_STATUS instances for property testing.
func VulnerabilityAssessmentRecurringScansProperties_STATUSGenerator() gopter.Gen {
	if vulnerabilityAssessmentRecurringScansProperties_STATUSGenerator != nil {
		return vulnerabilityAssessmentRecurringScansProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties_STATUS(generators)
	vulnerabilityAssessmentRecurringScansProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(VulnerabilityAssessmentRecurringScansProperties_STATUS{}), generators)

	return vulnerabilityAssessmentRecurringScansProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties_STATUS(gens map[string]gopter.Gen) {
	gens["EmailSubscriptionAdmins"] = gen.PtrOf(gen.Bool())
	gens["Emails"] = gen.SliceOf(gen.AlphaString())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
