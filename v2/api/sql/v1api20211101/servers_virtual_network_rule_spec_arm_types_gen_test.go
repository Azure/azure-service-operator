// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersVirtualNetworkRule_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersVirtualNetworkRule_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersVirtualNetworkRule_Spec_ARM, ServersVirtualNetworkRule_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersVirtualNetworkRule_Spec_ARM runs a test to see if a specific instance of ServersVirtualNetworkRule_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServersVirtualNetworkRule_Spec_ARM(subject ServersVirtualNetworkRule_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersVirtualNetworkRule_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersVirtualNetworkRule_Spec_ARM instances for property testing - lazily instantiated by
// ServersVirtualNetworkRule_Spec_ARMGenerator()
var serversVirtualNetworkRule_Spec_ARMGenerator gopter.Gen

// ServersVirtualNetworkRule_Spec_ARMGenerator returns a generator of ServersVirtualNetworkRule_Spec_ARM instances for property testing.
// We first initialize serversVirtualNetworkRule_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ServersVirtualNetworkRule_Spec_ARMGenerator() gopter.Gen {
	if serversVirtualNetworkRule_Spec_ARMGenerator != nil {
		return serversVirtualNetworkRule_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersVirtualNetworkRule_Spec_ARM(generators)
	serversVirtualNetworkRule_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ServersVirtualNetworkRule_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServersVirtualNetworkRule_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForServersVirtualNetworkRule_Spec_ARM(generators)
	serversVirtualNetworkRule_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ServersVirtualNetworkRule_Spec_ARM{}), generators)

	return serversVirtualNetworkRule_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServersVirtualNetworkRule_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServersVirtualNetworkRule_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForServersVirtualNetworkRule_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersVirtualNetworkRule_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VirtualNetworkRuleProperties_ARMGenerator())
}

func Test_VirtualNetworkRuleProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkRuleProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkRuleProperties_ARM, VirtualNetworkRuleProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkRuleProperties_ARM runs a test to see if a specific instance of VirtualNetworkRuleProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkRuleProperties_ARM(subject VirtualNetworkRuleProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkRuleProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkRuleProperties_ARM instances for property testing - lazily instantiated by
// VirtualNetworkRuleProperties_ARMGenerator()
var virtualNetworkRuleProperties_ARMGenerator gopter.Gen

// VirtualNetworkRuleProperties_ARMGenerator returns a generator of VirtualNetworkRuleProperties_ARM instances for property testing.
func VirtualNetworkRuleProperties_ARMGenerator() gopter.Gen {
	if virtualNetworkRuleProperties_ARMGenerator != nil {
		return virtualNetworkRuleProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkRuleProperties_ARM(generators)
	virtualNetworkRuleProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkRuleProperties_ARM{}), generators)

	return virtualNetworkRuleProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkRuleProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkRuleProperties_ARM(gens map[string]gopter.Gen) {
	gens["IgnoreMissingVnetServiceEndpoint"] = gen.PtrOf(gen.Bool())
	gens["VirtualNetworkSubnetId"] = gen.PtrOf(gen.AlphaString())
}
