// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1beta20211101storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ServersAdvancedThreatProtectionSetting_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersAdvancedThreatProtectionSetting to hub returns original",
		prop.ForAll(RunResourceConversionTestForServersAdvancedThreatProtectionSetting, ServersAdvancedThreatProtectionSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForServersAdvancedThreatProtectionSetting tests if a specific instance of ServersAdvancedThreatProtectionSetting round trips to the hub storage version and back losslessly
func RunResourceConversionTestForServersAdvancedThreatProtectionSetting(subject ServersAdvancedThreatProtectionSetting) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20211101s.ServersAdvancedThreatProtectionSetting
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual ServersAdvancedThreatProtectionSetting
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersAdvancedThreatProtectionSetting_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ServersAdvancedThreatProtectionSetting to ServersAdvancedThreatProtectionSetting via AssignProperties_To_ServersAdvancedThreatProtectionSetting & AssignProperties_From_ServersAdvancedThreatProtectionSetting returns original",
		prop.ForAll(RunPropertyAssignmentTestForServersAdvancedThreatProtectionSetting, ServersAdvancedThreatProtectionSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServersAdvancedThreatProtectionSetting tests if a specific instance of ServersAdvancedThreatProtectionSetting can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForServersAdvancedThreatProtectionSetting(subject ServersAdvancedThreatProtectionSetting) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.ServersAdvancedThreatProtectionSetting
	err := copied.AssignProperties_To_ServersAdvancedThreatProtectionSetting(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ServersAdvancedThreatProtectionSetting
	err = actual.AssignProperties_From_ServersAdvancedThreatProtectionSetting(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ServersAdvancedThreatProtectionSetting_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServersAdvancedThreatProtectionSetting via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServersAdvancedThreatProtectionSetting, ServersAdvancedThreatProtectionSettingGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServersAdvancedThreatProtectionSetting runs a test to see if a specific instance of ServersAdvancedThreatProtectionSetting round trips to JSON and back losslessly
func RunJSONSerializationTestForServersAdvancedThreatProtectionSetting(subject ServersAdvancedThreatProtectionSetting) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServersAdvancedThreatProtectionSetting
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServersAdvancedThreatProtectionSetting instances for property testing - lazily instantiated by
// ServersAdvancedThreatProtectionSettingGenerator()
var serversAdvancedThreatProtectionSettingGenerator gopter.Gen

// ServersAdvancedThreatProtectionSettingGenerator returns a generator of ServersAdvancedThreatProtectionSetting instances for property testing.
func ServersAdvancedThreatProtectionSettingGenerator() gopter.Gen {
	if serversAdvancedThreatProtectionSettingGenerator != nil {
		return serversAdvancedThreatProtectionSettingGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServersAdvancedThreatProtectionSetting(generators)
	serversAdvancedThreatProtectionSettingGenerator = gen.Struct(reflect.TypeOf(ServersAdvancedThreatProtectionSetting{}), generators)

	return serversAdvancedThreatProtectionSettingGenerator
}

// AddRelatedPropertyGeneratorsForServersAdvancedThreatProtectionSetting is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServersAdvancedThreatProtectionSetting(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_AdvancedThreatProtectionSetting_SpecGenerator()
	gens["Status"] = Servers_AdvancedThreatProtectionSetting_STATUSGenerator()
}

func Test_Servers_AdvancedThreatProtectionSetting_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_AdvancedThreatProtectionSetting_Spec to Servers_AdvancedThreatProtectionSetting_Spec via AssignProperties_To_Servers_AdvancedThreatProtectionSetting_Spec & AssignProperties_From_Servers_AdvancedThreatProtectionSetting_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForServers_AdvancedThreatProtectionSetting_Spec, Servers_AdvancedThreatProtectionSetting_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServers_AdvancedThreatProtectionSetting_Spec tests if a specific instance of Servers_AdvancedThreatProtectionSetting_Spec can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForServers_AdvancedThreatProtectionSetting_Spec(subject Servers_AdvancedThreatProtectionSetting_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.Servers_AdvancedThreatProtectionSetting_Spec
	err := copied.AssignProperties_To_Servers_AdvancedThreatProtectionSetting_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Servers_AdvancedThreatProtectionSetting_Spec
	err = actual.AssignProperties_From_Servers_AdvancedThreatProtectionSetting_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_AdvancedThreatProtectionSetting_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_AdvancedThreatProtectionSetting_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_AdvancedThreatProtectionSetting_Spec, Servers_AdvancedThreatProtectionSetting_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_AdvancedThreatProtectionSetting_Spec runs a test to see if a specific instance of Servers_AdvancedThreatProtectionSetting_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_AdvancedThreatProtectionSetting_Spec(subject Servers_AdvancedThreatProtectionSetting_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_AdvancedThreatProtectionSetting_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_AdvancedThreatProtectionSetting_Spec instances for property testing - lazily instantiated by
// Servers_AdvancedThreatProtectionSetting_SpecGenerator()
var servers_AdvancedThreatProtectionSetting_SpecGenerator gopter.Gen

// Servers_AdvancedThreatProtectionSetting_SpecGenerator returns a generator of Servers_AdvancedThreatProtectionSetting_Spec instances for property testing.
func Servers_AdvancedThreatProtectionSetting_SpecGenerator() gopter.Gen {
	if servers_AdvancedThreatProtectionSetting_SpecGenerator != nil {
		return servers_AdvancedThreatProtectionSetting_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_Spec(generators)
	servers_AdvancedThreatProtectionSetting_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_AdvancedThreatProtectionSetting_Spec{}), generators)

	return servers_AdvancedThreatProtectionSetting_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_Spec(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.OneConstOf(AdvancedThreatProtectionProperties_State_Disabled, AdvancedThreatProtectionProperties_State_Enabled, AdvancedThreatProtectionProperties_State_New))
}

func Test_Servers_AdvancedThreatProtectionSetting_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_AdvancedThreatProtectionSetting_STATUS to Servers_AdvancedThreatProtectionSetting_STATUS via AssignProperties_To_Servers_AdvancedThreatProtectionSetting_STATUS & AssignProperties_From_Servers_AdvancedThreatProtectionSetting_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForServers_AdvancedThreatProtectionSetting_STATUS, Servers_AdvancedThreatProtectionSetting_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServers_AdvancedThreatProtectionSetting_STATUS tests if a specific instance of Servers_AdvancedThreatProtectionSetting_STATUS can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForServers_AdvancedThreatProtectionSetting_STATUS(subject Servers_AdvancedThreatProtectionSetting_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.Servers_AdvancedThreatProtectionSetting_STATUS
	err := copied.AssignProperties_To_Servers_AdvancedThreatProtectionSetting_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Servers_AdvancedThreatProtectionSetting_STATUS
	err = actual.AssignProperties_From_Servers_AdvancedThreatProtectionSetting_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_AdvancedThreatProtectionSetting_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_AdvancedThreatProtectionSetting_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_AdvancedThreatProtectionSetting_STATUS, Servers_AdvancedThreatProtectionSetting_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_AdvancedThreatProtectionSetting_STATUS runs a test to see if a specific instance of Servers_AdvancedThreatProtectionSetting_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_AdvancedThreatProtectionSetting_STATUS(subject Servers_AdvancedThreatProtectionSetting_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_AdvancedThreatProtectionSetting_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_AdvancedThreatProtectionSetting_STATUS instances for property testing - lazily instantiated by
// Servers_AdvancedThreatProtectionSetting_STATUSGenerator()
var servers_AdvancedThreatProtectionSetting_STATUSGenerator gopter.Gen

// Servers_AdvancedThreatProtectionSetting_STATUSGenerator returns a generator of Servers_AdvancedThreatProtectionSetting_STATUS instances for property testing.
// We first initialize servers_AdvancedThreatProtectionSetting_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_AdvancedThreatProtectionSetting_STATUSGenerator() gopter.Gen {
	if servers_AdvancedThreatProtectionSetting_STATUSGenerator != nil {
		return servers_AdvancedThreatProtectionSetting_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_STATUS(generators)
	servers_AdvancedThreatProtectionSetting_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_AdvancedThreatProtectionSetting_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_STATUS(generators)
	AddRelatedPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_STATUS(generators)
	servers_AdvancedThreatProtectionSetting_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_AdvancedThreatProtectionSetting_STATUS{}), generators)

	return servers_AdvancedThreatProtectionSetting_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_STATUS(gens map[string]gopter.Gen) {
	gens["CreationTime"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.OneConstOf(AdvancedThreatProtectionProperties_State_STATUS_Disabled, AdvancedThreatProtectionProperties_State_STATUS_Enabled, AdvancedThreatProtectionProperties_State_STATUS_New))
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_AdvancedThreatProtectionSetting_STATUS(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_SystemData_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SystemData_STATUS to SystemData_STATUS via AssignProperties_To_SystemData_STATUS & AssignProperties_From_SystemData_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSystemData_STATUS tests if a specific instance of SystemData_STATUS can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.SystemData_STATUS
	err := copied.AssignProperties_To_SystemData_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SystemData_STATUS
	err = actual.AssignProperties_From_SystemData_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}
