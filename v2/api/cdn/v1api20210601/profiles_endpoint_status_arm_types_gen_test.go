// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_CacheConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CacheConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCacheConfiguration_STATUS_ARM, CacheConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCacheConfiguration_STATUS_ARM runs a test to see if a specific instance of CacheConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCacheConfiguration_STATUS_ARM(subject CacheConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CacheConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CacheConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// CacheConfiguration_STATUS_ARMGenerator()
var cacheConfiguration_STATUS_ARMGenerator gopter.Gen

// CacheConfiguration_STATUS_ARMGenerator returns a generator of CacheConfiguration_STATUS_ARM instances for property testing.
func CacheConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if cacheConfiguration_STATUS_ARMGenerator != nil {
		return cacheConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCacheConfiguration_STATUS_ARM(generators)
	cacheConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CacheConfiguration_STATUS_ARM{}), generators)

	return cacheConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCacheConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCacheConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CacheBehavior"] = gen.PtrOf(gen.OneConstOf(CacheConfiguration_CacheBehavior_STATUS_ARM_HonorOrigin, CacheConfiguration_CacheBehavior_STATUS_ARM_OverrideAlways, CacheConfiguration_CacheBehavior_STATUS_ARM_OverrideIfOriginMissing))
	gens["CacheDuration"] = gen.PtrOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.OneConstOf(CacheConfiguration_IsCompressionEnabled_STATUS_ARM_Disabled, CacheConfiguration_IsCompressionEnabled_STATUS_ARM_Enabled))
	gens["QueryParameters"] = gen.PtrOf(gen.AlphaString())
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		CacheConfiguration_QueryStringCachingBehavior_STATUS_ARM_IgnoreQueryString,
		CacheConfiguration_QueryStringCachingBehavior_STATUS_ARM_IgnoreSpecifiedQueryStrings,
		CacheConfiguration_QueryStringCachingBehavior_STATUS_ARM_IncludeSpecifiedQueryStrings,
		CacheConfiguration_QueryStringCachingBehavior_STATUS_ARM_UseQueryString))
}

func Test_CacheExpirationActionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CacheExpirationActionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCacheExpirationActionParameters_STATUS_ARM, CacheExpirationActionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCacheExpirationActionParameters_STATUS_ARM runs a test to see if a specific instance of CacheExpirationActionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCacheExpirationActionParameters_STATUS_ARM(subject CacheExpirationActionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CacheExpirationActionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CacheExpirationActionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// CacheExpirationActionParameters_STATUS_ARMGenerator()
var cacheExpirationActionParameters_STATUS_ARMGenerator gopter.Gen

// CacheExpirationActionParameters_STATUS_ARMGenerator returns a generator of CacheExpirationActionParameters_STATUS_ARM instances for property testing.
func CacheExpirationActionParameters_STATUS_ARMGenerator() gopter.Gen {
	if cacheExpirationActionParameters_STATUS_ARMGenerator != nil {
		return cacheExpirationActionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCacheExpirationActionParameters_STATUS_ARM(generators)
	cacheExpirationActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CacheExpirationActionParameters_STATUS_ARM{}), generators)

	return cacheExpirationActionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCacheExpirationActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCacheExpirationActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CacheBehavior"] = gen.PtrOf(gen.OneConstOf(CacheExpirationActionParameters_CacheBehavior_STATUS_ARM_BypassCache, CacheExpirationActionParameters_CacheBehavior_STATUS_ARM_Override, CacheExpirationActionParameters_CacheBehavior_STATUS_ARM_SetIfMissing))
	gens["CacheDuration"] = gen.PtrOf(gen.AlphaString())
	gens["CacheType"] = gen.PtrOf(gen.OneConstOf(CacheExpirationActionParameters_CacheType_STATUS_ARM_All))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(CacheExpirationActionParameters_TypeName_STATUS_ARM_DeliveryRuleCacheExpirationActionParameters))
}

func Test_CacheKeyQueryStringActionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CacheKeyQueryStringActionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCacheKeyQueryStringActionParameters_STATUS_ARM, CacheKeyQueryStringActionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCacheKeyQueryStringActionParameters_STATUS_ARM runs a test to see if a specific instance of CacheKeyQueryStringActionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCacheKeyQueryStringActionParameters_STATUS_ARM(subject CacheKeyQueryStringActionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CacheKeyQueryStringActionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CacheKeyQueryStringActionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// CacheKeyQueryStringActionParameters_STATUS_ARMGenerator()
var cacheKeyQueryStringActionParameters_STATUS_ARMGenerator gopter.Gen

// CacheKeyQueryStringActionParameters_STATUS_ARMGenerator returns a generator of CacheKeyQueryStringActionParameters_STATUS_ARM instances for property testing.
func CacheKeyQueryStringActionParameters_STATUS_ARMGenerator() gopter.Gen {
	if cacheKeyQueryStringActionParameters_STATUS_ARMGenerator != nil {
		return cacheKeyQueryStringActionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCacheKeyQueryStringActionParameters_STATUS_ARM(generators)
	cacheKeyQueryStringActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CacheKeyQueryStringActionParameters_STATUS_ARM{}), generators)

	return cacheKeyQueryStringActionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCacheKeyQueryStringActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCacheKeyQueryStringActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["QueryParameters"] = gen.PtrOf(gen.AlphaString())
	gens["QueryStringBehavior"] = gen.PtrOf(gen.OneConstOf(
		CacheKeyQueryStringActionParameters_QueryStringBehavior_STATUS_ARM_Exclude,
		CacheKeyQueryStringActionParameters_QueryStringBehavior_STATUS_ARM_ExcludeAll,
		CacheKeyQueryStringActionParameters_QueryStringBehavior_STATUS_ARM_Include,
		CacheKeyQueryStringActionParameters_QueryStringBehavior_STATUS_ARM_IncludeAll))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(CacheKeyQueryStringActionParameters_TypeName_STATUS_ARM_DeliveryRuleCacheKeyQueryStringBehaviorActionParameters))
}

func Test_ClientPortMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ClientPortMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForClientPortMatchConditionParameters_STATUS_ARM, ClientPortMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForClientPortMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of ClientPortMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForClientPortMatchConditionParameters_STATUS_ARM(subject ClientPortMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ClientPortMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ClientPortMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// ClientPortMatchConditionParameters_STATUS_ARMGenerator()
var clientPortMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// ClientPortMatchConditionParameters_STATUS_ARMGenerator returns a generator of ClientPortMatchConditionParameters_STATUS_ARM instances for property testing.
func ClientPortMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if clientPortMatchConditionParameters_STATUS_ARMGenerator != nil {
		return clientPortMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForClientPortMatchConditionParameters_STATUS_ARM(generators)
	clientPortMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ClientPortMatchConditionParameters_STATUS_ARM{}), generators)

	return clientPortMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForClientPortMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForClientPortMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_Any,
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_Contains,
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_Equal,
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		ClientPortMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(ClientPortMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleClientPortConditionParameters))
}

func Test_CookiesMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CookiesMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCookiesMatchConditionParameters_STATUS_ARM, CookiesMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCookiesMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of CookiesMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCookiesMatchConditionParameters_STATUS_ARM(subject CookiesMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CookiesMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CookiesMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// CookiesMatchConditionParameters_STATUS_ARMGenerator()
var cookiesMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// CookiesMatchConditionParameters_STATUS_ARMGenerator returns a generator of CookiesMatchConditionParameters_STATUS_ARM instances for property testing.
func CookiesMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if cookiesMatchConditionParameters_STATUS_ARMGenerator != nil {
		return cookiesMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCookiesMatchConditionParameters_STATUS_ARM(generators)
	cookiesMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CookiesMatchConditionParameters_STATUS_ARM{}), generators)

	return cookiesMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCookiesMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCookiesMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		CookiesMatchConditionParameters_Operator_STATUS_ARM_Any,
		CookiesMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		CookiesMatchConditionParameters_Operator_STATUS_ARM_Contains,
		CookiesMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		CookiesMatchConditionParameters_Operator_STATUS_ARM_Equal,
		CookiesMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		CookiesMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		CookiesMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		CookiesMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		CookiesMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(CookiesMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleCookiesConditionParameters))
}

func Test_DeepCreatedCustomDomainProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedCustomDomainProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedCustomDomainProperties_STATUS_ARM, DeepCreatedCustomDomainProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedCustomDomainProperties_STATUS_ARM runs a test to see if a specific instance of DeepCreatedCustomDomainProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedCustomDomainProperties_STATUS_ARM(subject DeepCreatedCustomDomainProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedCustomDomainProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedCustomDomainProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedCustomDomainProperties_STATUS_ARMGenerator()
var deepCreatedCustomDomainProperties_STATUS_ARMGenerator gopter.Gen

// DeepCreatedCustomDomainProperties_STATUS_ARMGenerator returns a generator of DeepCreatedCustomDomainProperties_STATUS_ARM instances for property testing.
func DeepCreatedCustomDomainProperties_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedCustomDomainProperties_STATUS_ARMGenerator != nil {
		return deepCreatedCustomDomainProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedCustomDomainProperties_STATUS_ARM(generators)
	deepCreatedCustomDomainProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedCustomDomainProperties_STATUS_ARM{}), generators)

	return deepCreatedCustomDomainProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedCustomDomainProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedCustomDomainProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["ValidationData"] = gen.PtrOf(gen.AlphaString())
}

func Test_DeepCreatedCustomDomain_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedCustomDomain_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedCustomDomain_STATUS_ARM, DeepCreatedCustomDomain_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedCustomDomain_STATUS_ARM runs a test to see if a specific instance of DeepCreatedCustomDomain_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedCustomDomain_STATUS_ARM(subject DeepCreatedCustomDomain_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedCustomDomain_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedCustomDomain_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedCustomDomain_STATUS_ARMGenerator()
var deepCreatedCustomDomain_STATUS_ARMGenerator gopter.Gen

// DeepCreatedCustomDomain_STATUS_ARMGenerator returns a generator of DeepCreatedCustomDomain_STATUS_ARM instances for property testing.
// We first initialize deepCreatedCustomDomain_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedCustomDomain_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedCustomDomain_STATUS_ARMGenerator != nil {
		return deepCreatedCustomDomain_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedCustomDomain_STATUS_ARM(generators)
	deepCreatedCustomDomain_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedCustomDomain_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedCustomDomain_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedCustomDomain_STATUS_ARM(generators)
	deepCreatedCustomDomain_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedCustomDomain_STATUS_ARM{}), generators)

	return deepCreatedCustomDomain_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedCustomDomain_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedCustomDomain_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedCustomDomain_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedCustomDomain_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedCustomDomainProperties_STATUS_ARMGenerator())
}

func Test_DeepCreatedOriginGroupProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroupProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUS_ARM, DeepCreatedOriginGroupProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUS_ARM runs a test to see if a specific instance of DeepCreatedOriginGroupProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUS_ARM(subject DeepCreatedOriginGroupProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroupProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroupProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupProperties_STATUS_ARMGenerator()
var deepCreatedOriginGroupProperties_STATUS_ARMGenerator gopter.Gen

// DeepCreatedOriginGroupProperties_STATUS_ARMGenerator returns a generator of DeepCreatedOriginGroupProperties_STATUS_ARM instances for property testing.
// We first initialize deepCreatedOriginGroupProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupProperties_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupProperties_STATUS_ARMGenerator != nil {
		return deepCreatedOriginGroupProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(generators)
	deepCreatedOriginGroupProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(generators)
	deepCreatedOriginGroupProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUS_ARM{}), generators)

	return deepCreatedOriginGroupProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["TrafficRestorationTimeToHealedOrNewEndpointsInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HealthProbeSettings"] = gen.PtrOf(HealthProbeParameters_STATUS_ARMGenerator())
	gens["Origins"] = gen.SliceOf(ResourceReference_STATUS_ARMGenerator())
	gens["ResponseBasedOriginErrorDetectionSettings"] = gen.PtrOf(ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator())
}

func Test_DeepCreatedOriginGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroup_STATUS_ARM, DeepCreatedOriginGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroup_STATUS_ARM runs a test to see if a specific instance of DeepCreatedOriginGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroup_STATUS_ARM(subject DeepCreatedOriginGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroup_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroup_STATUS_ARMGenerator()
var deepCreatedOriginGroup_STATUS_ARMGenerator gopter.Gen

// DeepCreatedOriginGroup_STATUS_ARMGenerator returns a generator of DeepCreatedOriginGroup_STATUS_ARM instances for property testing.
// We first initialize deepCreatedOriginGroup_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroup_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedOriginGroup_STATUS_ARMGenerator != nil {
		return deepCreatedOriginGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(generators)
	deepCreatedOriginGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(generators)
	deepCreatedOriginGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUS_ARM{}), generators)

	return deepCreatedOriginGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginGroupProperties_STATUS_ARMGenerator())
}

func Test_DeepCreatedOriginProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginProperties_STATUS_ARM, DeepCreatedOriginProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginProperties_STATUS_ARM runs a test to see if a specific instance of DeepCreatedOriginProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginProperties_STATUS_ARM(subject DeepCreatedOriginProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedOriginProperties_STATUS_ARMGenerator()
var deepCreatedOriginProperties_STATUS_ARMGenerator gopter.Gen

// DeepCreatedOriginProperties_STATUS_ARMGenerator returns a generator of DeepCreatedOriginProperties_STATUS_ARM instances for property testing.
func DeepCreatedOriginProperties_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedOriginProperties_STATUS_ARMGenerator != nil {
		return deepCreatedOriginProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUS_ARM(generators)
	deepCreatedOriginProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginProperties_STATUS_ARM{}), generators)

	return deepCreatedOriginProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["PrivateEndpointStatus"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointStatus_STATUS_ARM_Approved,
		PrivateEndpointStatus_STATUS_ARM_Disconnected,
		PrivateEndpointStatus_STATUS_ARM_Pending,
		PrivateEndpointStatus_STATUS_ARM_Rejected,
		PrivateEndpointStatus_STATUS_ARM_Timeout))
	gens["PrivateLinkAlias"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkApprovalMessage"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

func Test_DeepCreatedOrigin_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOrigin_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOrigin_STATUS_ARM, DeepCreatedOrigin_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOrigin_STATUS_ARM runs a test to see if a specific instance of DeepCreatedOrigin_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOrigin_STATUS_ARM(subject DeepCreatedOrigin_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOrigin_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOrigin_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedOrigin_STATUS_ARMGenerator()
var deepCreatedOrigin_STATUS_ARMGenerator gopter.Gen

// DeepCreatedOrigin_STATUS_ARMGenerator returns a generator of DeepCreatedOrigin_STATUS_ARM instances for property testing.
// We first initialize deepCreatedOrigin_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOrigin_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedOrigin_STATUS_ARMGenerator != nil {
		return deepCreatedOrigin_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(generators)
	deepCreatedOrigin_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(generators)
	deepCreatedOrigin_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUS_ARM{}), generators)

	return deepCreatedOrigin_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginProperties_STATUS_ARMGenerator())
}

func Test_DeliveryRuleAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleAction_STATUS_ARM, DeliveryRuleAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleAction_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleAction_STATUS_ARM(subject DeliveryRuleAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleAction_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleAction_STATUS_ARMGenerator()
var deliveryRuleAction_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleAction_STATUS_ARMGenerator returns a generator of DeliveryRuleAction_STATUS_ARM instances for property testing.
func DeliveryRuleAction_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleAction_STATUS_ARMGenerator != nil {
		return deliveryRuleAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDeliveryRuleAction_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(DeliveryRuleAction_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	deliveryRuleAction_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return deliveryRuleAction_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForDeliveryRuleAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CacheExpiration"] = DeliveryRuleCacheExpirationAction_STATUS_ARMGenerator().Map(func(it DeliveryRuleCacheExpirationAction_STATUS_ARM) *DeliveryRuleCacheExpirationAction_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["CacheKeyQueryString"] = DeliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator().Map(func(it DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM) *DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["ModifyRequestHeader"] = DeliveryRuleRequestHeaderAction_STATUS_ARMGenerator().Map(func(it DeliveryRuleRequestHeaderAction_STATUS_ARM) *DeliveryRuleRequestHeaderAction_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["ModifyResponseHeader"] = DeliveryRuleResponseHeaderAction_STATUS_ARMGenerator().Map(func(it DeliveryRuleResponseHeaderAction_STATUS_ARM) *DeliveryRuleResponseHeaderAction_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["OriginGroupOverride"] = OriginGroupOverrideAction_STATUS_ARMGenerator().Map(func(it OriginGroupOverrideAction_STATUS_ARM) *OriginGroupOverrideAction_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["RouteConfigurationOverride"] = DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator().Map(func(it DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM) *DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["UrlRedirect"] = UrlRedirectAction_STATUS_ARMGenerator().Map(func(it UrlRedirectAction_STATUS_ARM) *UrlRedirectAction_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["UrlRewrite"] = UrlRewriteAction_STATUS_ARMGenerator().Map(func(it UrlRewriteAction_STATUS_ARM) *UrlRewriteAction_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["UrlSigning"] = UrlSigningAction_STATUS_ARMGenerator().Map(func(it UrlSigningAction_STATUS_ARM) *UrlSigningAction_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_DeliveryRuleCacheExpirationAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleCacheExpirationAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleCacheExpirationAction_STATUS_ARM, DeliveryRuleCacheExpirationAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleCacheExpirationAction_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleCacheExpirationAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleCacheExpirationAction_STATUS_ARM(subject DeliveryRuleCacheExpirationAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleCacheExpirationAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleCacheExpirationAction_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleCacheExpirationAction_STATUS_ARMGenerator()
var deliveryRuleCacheExpirationAction_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleCacheExpirationAction_STATUS_ARMGenerator returns a generator of DeliveryRuleCacheExpirationAction_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleCacheExpirationAction_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleCacheExpirationAction_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleCacheExpirationAction_STATUS_ARMGenerator != nil {
		return deliveryRuleCacheExpirationAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleCacheExpirationAction_STATUS_ARM(generators)
	deliveryRuleCacheExpirationAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCacheExpirationAction_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleCacheExpirationAction_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleCacheExpirationAction_STATUS_ARM(generators)
	deliveryRuleCacheExpirationAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCacheExpirationAction_STATUS_ARM{}), generators)

	return deliveryRuleCacheExpirationAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleCacheExpirationAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleCacheExpirationAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleCacheExpirationAction_Name_STATUS_ARM_CacheExpiration)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleCacheExpirationAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleCacheExpirationAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(CacheExpirationActionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM, DeliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM(subject DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator()
var deliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator returns a generator of DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator != nil {
		return deliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM(generators)
	deliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM(generators)
	deliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCacheKeyQueryStringAction_STATUS_ARM{}), generators)

	return deliveryRuleCacheKeyQueryStringAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleCacheKeyQueryStringAction_Name_STATUS_ARM_CacheKeyQueryString)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleCacheKeyQueryStringAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(CacheKeyQueryStringActionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleClientPortCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleClientPortCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleClientPortCondition_STATUS_ARM, DeliveryRuleClientPortCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleClientPortCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleClientPortCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleClientPortCondition_STATUS_ARM(subject DeliveryRuleClientPortCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleClientPortCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleClientPortCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleClientPortCondition_STATUS_ARMGenerator()
var deliveryRuleClientPortCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleClientPortCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleClientPortCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleClientPortCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleClientPortCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleClientPortCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleClientPortCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleClientPortCondition_STATUS_ARM(generators)
	deliveryRuleClientPortCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleClientPortCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleClientPortCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleClientPortCondition_STATUS_ARM(generators)
	deliveryRuleClientPortCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleClientPortCondition_STATUS_ARM{}), generators)

	return deliveryRuleClientPortCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleClientPortCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleClientPortCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleClientPortCondition_Name_STATUS_ARM_ClientPort)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleClientPortCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleClientPortCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(ClientPortMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleCondition_STATUS_ARM, DeliveryRuleCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleCondition_STATUS_ARM(subject DeliveryRuleCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleCondition_STATUS_ARMGenerator()
var deliveryRuleCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleCondition_STATUS_ARM instances for property testing.
func DeliveryRuleCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForDeliveryRuleCondition_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(DeliveryRuleCondition_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	deliveryRuleCondition_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return deliveryRuleCondition_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForDeliveryRuleCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientPort"] = DeliveryRuleClientPortCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleClientPortCondition_STATUS_ARM) *DeliveryRuleClientPortCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["Cookies"] = DeliveryRuleCookiesCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleCookiesCondition_STATUS_ARM) *DeliveryRuleCookiesCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["HostName"] = DeliveryRuleHostNameCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleHostNameCondition_STATUS_ARM) *DeliveryRuleHostNameCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["HttpVersion"] = DeliveryRuleHttpVersionCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleHttpVersionCondition_STATUS_ARM) *DeliveryRuleHttpVersionCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["IsDevice"] = DeliveryRuleIsDeviceCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleIsDeviceCondition_STATUS_ARM) *DeliveryRuleIsDeviceCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["PostArgs"] = DeliveryRulePostArgsCondition_STATUS_ARMGenerator().Map(func(it DeliveryRulePostArgsCondition_STATUS_ARM) *DeliveryRulePostArgsCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["QueryString"] = DeliveryRuleQueryStringCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleQueryStringCondition_STATUS_ARM) *DeliveryRuleQueryStringCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["RemoteAddress"] = DeliveryRuleRemoteAddressCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleRemoteAddressCondition_STATUS_ARM) *DeliveryRuleRemoteAddressCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["RequestBody"] = DeliveryRuleRequestBodyCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleRequestBodyCondition_STATUS_ARM) *DeliveryRuleRequestBodyCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["RequestHeader"] = DeliveryRuleRequestHeaderCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleRequestHeaderCondition_STATUS_ARM) *DeliveryRuleRequestHeaderCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["RequestMethod"] = DeliveryRuleRequestMethodCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleRequestMethodCondition_STATUS_ARM) *DeliveryRuleRequestMethodCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["RequestScheme"] = DeliveryRuleRequestSchemeCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleRequestSchemeCondition_STATUS_ARM) *DeliveryRuleRequestSchemeCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["RequestUri"] = DeliveryRuleRequestUriCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleRequestUriCondition_STATUS_ARM) *DeliveryRuleRequestUriCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["ServerPort"] = DeliveryRuleServerPortCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleServerPortCondition_STATUS_ARM) *DeliveryRuleServerPortCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["SocketAddr"] = DeliveryRuleSocketAddrCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleSocketAddrCondition_STATUS_ARM) *DeliveryRuleSocketAddrCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["SslProtocol"] = DeliveryRuleSslProtocolCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleSslProtocolCondition_STATUS_ARM) *DeliveryRuleSslProtocolCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["UrlFileExtension"] = DeliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleUrlFileExtensionCondition_STATUS_ARM) *DeliveryRuleUrlFileExtensionCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["UrlFileName"] = DeliveryRuleUrlFileNameCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleUrlFileNameCondition_STATUS_ARM) *DeliveryRuleUrlFileNameCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["UrlPath"] = DeliveryRuleUrlPathCondition_STATUS_ARMGenerator().Map(func(it DeliveryRuleUrlPathCondition_STATUS_ARM) *DeliveryRuleUrlPathCondition_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_DeliveryRuleCookiesCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleCookiesCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleCookiesCondition_STATUS_ARM, DeliveryRuleCookiesCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleCookiesCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleCookiesCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleCookiesCondition_STATUS_ARM(subject DeliveryRuleCookiesCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleCookiesCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleCookiesCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleCookiesCondition_STATUS_ARMGenerator()
var deliveryRuleCookiesCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleCookiesCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleCookiesCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleCookiesCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleCookiesCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleCookiesCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleCookiesCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleCookiesCondition_STATUS_ARM(generators)
	deliveryRuleCookiesCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCookiesCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleCookiesCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleCookiesCondition_STATUS_ARM(generators)
	deliveryRuleCookiesCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCookiesCondition_STATUS_ARM{}), generators)

	return deliveryRuleCookiesCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleCookiesCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleCookiesCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleCookiesCondition_Name_STATUS_ARM_Cookies)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleCookiesCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleCookiesCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(CookiesMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleHostNameCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleHostNameCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleHostNameCondition_STATUS_ARM, DeliveryRuleHostNameCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleHostNameCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleHostNameCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleHostNameCondition_STATUS_ARM(subject DeliveryRuleHostNameCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleHostNameCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleHostNameCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleHostNameCondition_STATUS_ARMGenerator()
var deliveryRuleHostNameCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleHostNameCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleHostNameCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleHostNameCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleHostNameCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleHostNameCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleHostNameCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleHostNameCondition_STATUS_ARM(generators)
	deliveryRuleHostNameCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleHostNameCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleHostNameCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleHostNameCondition_STATUS_ARM(generators)
	deliveryRuleHostNameCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleHostNameCondition_STATUS_ARM{}), generators)

	return deliveryRuleHostNameCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleHostNameCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleHostNameCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleHostNameCondition_Name_STATUS_ARM_HostName)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleHostNameCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleHostNameCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(HostNameMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleHttpVersionCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleHttpVersionCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleHttpVersionCondition_STATUS_ARM, DeliveryRuleHttpVersionCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleHttpVersionCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleHttpVersionCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleHttpVersionCondition_STATUS_ARM(subject DeliveryRuleHttpVersionCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleHttpVersionCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleHttpVersionCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleHttpVersionCondition_STATUS_ARMGenerator()
var deliveryRuleHttpVersionCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleHttpVersionCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleHttpVersionCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleHttpVersionCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleHttpVersionCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleHttpVersionCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleHttpVersionCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleHttpVersionCondition_STATUS_ARM(generators)
	deliveryRuleHttpVersionCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleHttpVersionCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleHttpVersionCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleHttpVersionCondition_STATUS_ARM(generators)
	deliveryRuleHttpVersionCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleHttpVersionCondition_STATUS_ARM{}), generators)

	return deliveryRuleHttpVersionCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleHttpVersionCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleHttpVersionCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleHttpVersionCondition_Name_STATUS_ARM_HttpVersion)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleHttpVersionCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleHttpVersionCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(HttpVersionMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleIsDeviceCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleIsDeviceCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleIsDeviceCondition_STATUS_ARM, DeliveryRuleIsDeviceCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleIsDeviceCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleIsDeviceCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleIsDeviceCondition_STATUS_ARM(subject DeliveryRuleIsDeviceCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleIsDeviceCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleIsDeviceCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleIsDeviceCondition_STATUS_ARMGenerator()
var deliveryRuleIsDeviceCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleIsDeviceCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleIsDeviceCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleIsDeviceCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleIsDeviceCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleIsDeviceCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleIsDeviceCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleIsDeviceCondition_STATUS_ARM(generators)
	deliveryRuleIsDeviceCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleIsDeviceCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleIsDeviceCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleIsDeviceCondition_STATUS_ARM(generators)
	deliveryRuleIsDeviceCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleIsDeviceCondition_STATUS_ARM{}), generators)

	return deliveryRuleIsDeviceCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleIsDeviceCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleIsDeviceCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleIsDeviceCondition_Name_STATUS_ARM_IsDevice)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleIsDeviceCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleIsDeviceCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(IsDeviceMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRulePostArgsCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRulePostArgsCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRulePostArgsCondition_STATUS_ARM, DeliveryRulePostArgsCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRulePostArgsCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRulePostArgsCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRulePostArgsCondition_STATUS_ARM(subject DeliveryRulePostArgsCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRulePostArgsCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRulePostArgsCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRulePostArgsCondition_STATUS_ARMGenerator()
var deliveryRulePostArgsCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRulePostArgsCondition_STATUS_ARMGenerator returns a generator of DeliveryRulePostArgsCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRulePostArgsCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRulePostArgsCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRulePostArgsCondition_STATUS_ARMGenerator != nil {
		return deliveryRulePostArgsCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRulePostArgsCondition_STATUS_ARM(generators)
	deliveryRulePostArgsCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRulePostArgsCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRulePostArgsCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRulePostArgsCondition_STATUS_ARM(generators)
	deliveryRulePostArgsCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRulePostArgsCondition_STATUS_ARM{}), generators)

	return deliveryRulePostArgsCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRulePostArgsCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRulePostArgsCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRulePostArgsCondition_Name_STATUS_ARM_PostArgs)
}

// AddRelatedPropertyGeneratorsForDeliveryRulePostArgsCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRulePostArgsCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(PostArgsMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleQueryStringCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleQueryStringCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleQueryStringCondition_STATUS_ARM, DeliveryRuleQueryStringCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleQueryStringCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleQueryStringCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleQueryStringCondition_STATUS_ARM(subject DeliveryRuleQueryStringCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleQueryStringCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleQueryStringCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleQueryStringCondition_STATUS_ARMGenerator()
var deliveryRuleQueryStringCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleQueryStringCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleQueryStringCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleQueryStringCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleQueryStringCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleQueryStringCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleQueryStringCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleQueryStringCondition_STATUS_ARM(generators)
	deliveryRuleQueryStringCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleQueryStringCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleQueryStringCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleQueryStringCondition_STATUS_ARM(generators)
	deliveryRuleQueryStringCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleQueryStringCondition_STATUS_ARM{}), generators)

	return deliveryRuleQueryStringCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleQueryStringCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleQueryStringCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleQueryStringCondition_Name_STATUS_ARM_QueryString)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleQueryStringCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleQueryStringCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(QueryStringMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleRemoteAddressCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleRemoteAddressCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleRemoteAddressCondition_STATUS_ARM, DeliveryRuleRemoteAddressCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleRemoteAddressCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleRemoteAddressCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleRemoteAddressCondition_STATUS_ARM(subject DeliveryRuleRemoteAddressCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleRemoteAddressCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleRemoteAddressCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleRemoteAddressCondition_STATUS_ARMGenerator()
var deliveryRuleRemoteAddressCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleRemoteAddressCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleRemoteAddressCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleRemoteAddressCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleRemoteAddressCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleRemoteAddressCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleRemoteAddressCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRemoteAddressCondition_STATUS_ARM(generators)
	deliveryRuleRemoteAddressCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRemoteAddressCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRemoteAddressCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleRemoteAddressCondition_STATUS_ARM(generators)
	deliveryRuleRemoteAddressCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRemoteAddressCondition_STATUS_ARM{}), generators)

	return deliveryRuleRemoteAddressCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleRemoteAddressCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleRemoteAddressCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleRemoteAddressCondition_Name_STATUS_ARM_RemoteAddress)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleRemoteAddressCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleRemoteAddressCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(RemoteAddressMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleRequestBodyCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleRequestBodyCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleRequestBodyCondition_STATUS_ARM, DeliveryRuleRequestBodyCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleRequestBodyCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleRequestBodyCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleRequestBodyCondition_STATUS_ARM(subject DeliveryRuleRequestBodyCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleRequestBodyCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleRequestBodyCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleRequestBodyCondition_STATUS_ARMGenerator()
var deliveryRuleRequestBodyCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleRequestBodyCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleRequestBodyCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleRequestBodyCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleRequestBodyCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleRequestBodyCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleRequestBodyCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestBodyCondition_STATUS_ARM(generators)
	deliveryRuleRequestBodyCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestBodyCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestBodyCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleRequestBodyCondition_STATUS_ARM(generators)
	deliveryRuleRequestBodyCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestBodyCondition_STATUS_ARM{}), generators)

	return deliveryRuleRequestBodyCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleRequestBodyCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleRequestBodyCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleRequestBodyCondition_Name_STATUS_ARM_RequestBody)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleRequestBodyCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleRequestBodyCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(RequestBodyMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleRequestHeaderAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleRequestHeaderAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleRequestHeaderAction_STATUS_ARM, DeliveryRuleRequestHeaderAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleRequestHeaderAction_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleRequestHeaderAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleRequestHeaderAction_STATUS_ARM(subject DeliveryRuleRequestHeaderAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleRequestHeaderAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleRequestHeaderAction_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleRequestHeaderAction_STATUS_ARMGenerator()
var deliveryRuleRequestHeaderAction_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleRequestHeaderAction_STATUS_ARMGenerator returns a generator of DeliveryRuleRequestHeaderAction_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleRequestHeaderAction_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleRequestHeaderAction_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleRequestHeaderAction_STATUS_ARMGenerator != nil {
		return deliveryRuleRequestHeaderAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestHeaderAction_STATUS_ARM(generators)
	deliveryRuleRequestHeaderAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestHeaderAction_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestHeaderAction_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleRequestHeaderAction_STATUS_ARM(generators)
	deliveryRuleRequestHeaderAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestHeaderAction_STATUS_ARM{}), generators)

	return deliveryRuleRequestHeaderAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleRequestHeaderAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleRequestHeaderAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleRequestHeaderAction_Name_STATUS_ARM_ModifyRequestHeader)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleRequestHeaderAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleRequestHeaderAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(HeaderActionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleRequestHeaderCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleRequestHeaderCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleRequestHeaderCondition_STATUS_ARM, DeliveryRuleRequestHeaderCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleRequestHeaderCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleRequestHeaderCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleRequestHeaderCondition_STATUS_ARM(subject DeliveryRuleRequestHeaderCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleRequestHeaderCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleRequestHeaderCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleRequestHeaderCondition_STATUS_ARMGenerator()
var deliveryRuleRequestHeaderCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleRequestHeaderCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleRequestHeaderCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleRequestHeaderCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleRequestHeaderCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleRequestHeaderCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleRequestHeaderCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestHeaderCondition_STATUS_ARM(generators)
	deliveryRuleRequestHeaderCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestHeaderCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestHeaderCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleRequestHeaderCondition_STATUS_ARM(generators)
	deliveryRuleRequestHeaderCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestHeaderCondition_STATUS_ARM{}), generators)

	return deliveryRuleRequestHeaderCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleRequestHeaderCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleRequestHeaderCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleRequestHeaderCondition_Name_STATUS_ARM_RequestHeader)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleRequestHeaderCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleRequestHeaderCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(RequestHeaderMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleRequestMethodCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleRequestMethodCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleRequestMethodCondition_STATUS_ARM, DeliveryRuleRequestMethodCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleRequestMethodCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleRequestMethodCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleRequestMethodCondition_STATUS_ARM(subject DeliveryRuleRequestMethodCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleRequestMethodCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleRequestMethodCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleRequestMethodCondition_STATUS_ARMGenerator()
var deliveryRuleRequestMethodCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleRequestMethodCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleRequestMethodCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleRequestMethodCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleRequestMethodCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleRequestMethodCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleRequestMethodCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestMethodCondition_STATUS_ARM(generators)
	deliveryRuleRequestMethodCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestMethodCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestMethodCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleRequestMethodCondition_STATUS_ARM(generators)
	deliveryRuleRequestMethodCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestMethodCondition_STATUS_ARM{}), generators)

	return deliveryRuleRequestMethodCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleRequestMethodCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleRequestMethodCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleRequestMethodCondition_Name_STATUS_ARM_RequestMethod)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleRequestMethodCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleRequestMethodCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(RequestMethodMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleRequestSchemeCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleRequestSchemeCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleRequestSchemeCondition_STATUS_ARM, DeliveryRuleRequestSchemeCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleRequestSchemeCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleRequestSchemeCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleRequestSchemeCondition_STATUS_ARM(subject DeliveryRuleRequestSchemeCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleRequestSchemeCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleRequestSchemeCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleRequestSchemeCondition_STATUS_ARMGenerator()
var deliveryRuleRequestSchemeCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleRequestSchemeCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleRequestSchemeCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleRequestSchemeCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleRequestSchemeCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleRequestSchemeCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleRequestSchemeCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestSchemeCondition_STATUS_ARM(generators)
	deliveryRuleRequestSchemeCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestSchemeCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestSchemeCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleRequestSchemeCondition_STATUS_ARM(generators)
	deliveryRuleRequestSchemeCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestSchemeCondition_STATUS_ARM{}), generators)

	return deliveryRuleRequestSchemeCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleRequestSchemeCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleRequestSchemeCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleRequestSchemeCondition_Name_STATUS_ARM_RequestScheme)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleRequestSchemeCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleRequestSchemeCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(RequestSchemeMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleRequestUriCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleRequestUriCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleRequestUriCondition_STATUS_ARM, DeliveryRuleRequestUriCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleRequestUriCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleRequestUriCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleRequestUriCondition_STATUS_ARM(subject DeliveryRuleRequestUriCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleRequestUriCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleRequestUriCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleRequestUriCondition_STATUS_ARMGenerator()
var deliveryRuleRequestUriCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleRequestUriCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleRequestUriCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleRequestUriCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleRequestUriCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleRequestUriCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleRequestUriCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestUriCondition_STATUS_ARM(generators)
	deliveryRuleRequestUriCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestUriCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRequestUriCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleRequestUriCondition_STATUS_ARM(generators)
	deliveryRuleRequestUriCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRequestUriCondition_STATUS_ARM{}), generators)

	return deliveryRuleRequestUriCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleRequestUriCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleRequestUriCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleRequestUriCondition_Name_STATUS_ARM_RequestUri)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleRequestUriCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleRequestUriCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(RequestUriMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleResponseHeaderAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleResponseHeaderAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleResponseHeaderAction_STATUS_ARM, DeliveryRuleResponseHeaderAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleResponseHeaderAction_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleResponseHeaderAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleResponseHeaderAction_STATUS_ARM(subject DeliveryRuleResponseHeaderAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleResponseHeaderAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleResponseHeaderAction_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleResponseHeaderAction_STATUS_ARMGenerator()
var deliveryRuleResponseHeaderAction_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleResponseHeaderAction_STATUS_ARMGenerator returns a generator of DeliveryRuleResponseHeaderAction_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleResponseHeaderAction_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleResponseHeaderAction_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleResponseHeaderAction_STATUS_ARMGenerator != nil {
		return deliveryRuleResponseHeaderAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleResponseHeaderAction_STATUS_ARM(generators)
	deliveryRuleResponseHeaderAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleResponseHeaderAction_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleResponseHeaderAction_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleResponseHeaderAction_STATUS_ARM(generators)
	deliveryRuleResponseHeaderAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleResponseHeaderAction_STATUS_ARM{}), generators)

	return deliveryRuleResponseHeaderAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleResponseHeaderAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleResponseHeaderAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleResponseHeaderAction_Name_STATUS_ARM_ModifyResponseHeader)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleResponseHeaderAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleResponseHeaderAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(HeaderActionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM, DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM(subject DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM instances for property testing - lazily
// instantiated by DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator()
var deliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator returns a generator of DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator != nil {
		return deliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM(generators)
	deliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM(generators)
	deliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM{}), generators)

	return deliveryRuleRouteConfigurationOverrideAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleRouteConfigurationOverrideAction_Name_STATUS_ARM_RouteConfigurationOverride)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleRouteConfigurationOverrideAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(RouteConfigurationOverrideActionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleServerPortCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleServerPortCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleServerPortCondition_STATUS_ARM, DeliveryRuleServerPortCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleServerPortCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleServerPortCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleServerPortCondition_STATUS_ARM(subject DeliveryRuleServerPortCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleServerPortCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleServerPortCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleServerPortCondition_STATUS_ARMGenerator()
var deliveryRuleServerPortCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleServerPortCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleServerPortCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleServerPortCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleServerPortCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleServerPortCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleServerPortCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleServerPortCondition_STATUS_ARM(generators)
	deliveryRuleServerPortCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleServerPortCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleServerPortCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleServerPortCondition_STATUS_ARM(generators)
	deliveryRuleServerPortCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleServerPortCondition_STATUS_ARM{}), generators)

	return deliveryRuleServerPortCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleServerPortCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleServerPortCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleServerPortCondition_Name_STATUS_ARM_ServerPort)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleServerPortCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleServerPortCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(ServerPortMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleSocketAddrCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleSocketAddrCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleSocketAddrCondition_STATUS_ARM, DeliveryRuleSocketAddrCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleSocketAddrCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleSocketAddrCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleSocketAddrCondition_STATUS_ARM(subject DeliveryRuleSocketAddrCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleSocketAddrCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleSocketAddrCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleSocketAddrCondition_STATUS_ARMGenerator()
var deliveryRuleSocketAddrCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleSocketAddrCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleSocketAddrCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleSocketAddrCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleSocketAddrCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleSocketAddrCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleSocketAddrCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleSocketAddrCondition_STATUS_ARM(generators)
	deliveryRuleSocketAddrCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleSocketAddrCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleSocketAddrCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleSocketAddrCondition_STATUS_ARM(generators)
	deliveryRuleSocketAddrCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleSocketAddrCondition_STATUS_ARM{}), generators)

	return deliveryRuleSocketAddrCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleSocketAddrCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleSocketAddrCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleSocketAddrCondition_Name_STATUS_ARM_SocketAddr)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleSocketAddrCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleSocketAddrCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(SocketAddrMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleSslProtocolCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleSslProtocolCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleSslProtocolCondition_STATUS_ARM, DeliveryRuleSslProtocolCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleSslProtocolCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleSslProtocolCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleSslProtocolCondition_STATUS_ARM(subject DeliveryRuleSslProtocolCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleSslProtocolCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleSslProtocolCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleSslProtocolCondition_STATUS_ARMGenerator()
var deliveryRuleSslProtocolCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleSslProtocolCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleSslProtocolCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleSslProtocolCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleSslProtocolCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleSslProtocolCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleSslProtocolCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleSslProtocolCondition_STATUS_ARM(generators)
	deliveryRuleSslProtocolCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleSslProtocolCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleSslProtocolCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleSslProtocolCondition_STATUS_ARM(generators)
	deliveryRuleSslProtocolCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleSslProtocolCondition_STATUS_ARM{}), generators)

	return deliveryRuleSslProtocolCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleSslProtocolCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleSslProtocolCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleSslProtocolCondition_Name_STATUS_ARM_SslProtocol)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleSslProtocolCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleSslProtocolCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(SslProtocolMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleUrlFileExtensionCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleUrlFileExtensionCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM, DeliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleUrlFileExtensionCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM(subject DeliveryRuleUrlFileExtensionCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleUrlFileExtensionCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleUrlFileExtensionCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator()
var deliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleUrlFileExtensionCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM(generators)
	deliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleUrlFileExtensionCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM(generators)
	deliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleUrlFileExtensionCondition_STATUS_ARM{}), generators)

	return deliveryRuleUrlFileExtensionCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleUrlFileExtensionCondition_Name_STATUS_ARM_UrlFileExtension)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleUrlFileExtensionCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(UrlFileExtensionMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleUrlFileNameCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleUrlFileNameCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleUrlFileNameCondition_STATUS_ARM, DeliveryRuleUrlFileNameCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleUrlFileNameCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleUrlFileNameCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleUrlFileNameCondition_STATUS_ARM(subject DeliveryRuleUrlFileNameCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleUrlFileNameCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleUrlFileNameCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleUrlFileNameCondition_STATUS_ARMGenerator()
var deliveryRuleUrlFileNameCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleUrlFileNameCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleUrlFileNameCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleUrlFileNameCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleUrlFileNameCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleUrlFileNameCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleUrlFileNameCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleUrlFileNameCondition_STATUS_ARM(generators)
	deliveryRuleUrlFileNameCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleUrlFileNameCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleUrlFileNameCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleUrlFileNameCondition_STATUS_ARM(generators)
	deliveryRuleUrlFileNameCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleUrlFileNameCondition_STATUS_ARM{}), generators)

	return deliveryRuleUrlFileNameCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleUrlFileNameCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleUrlFileNameCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleUrlFileNameCondition_Name_STATUS_ARM_UrlFileName)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleUrlFileNameCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleUrlFileNameCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(UrlFileNameMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRuleUrlPathCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleUrlPathCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleUrlPathCondition_STATUS_ARM, DeliveryRuleUrlPathCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleUrlPathCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleUrlPathCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleUrlPathCondition_STATUS_ARM(subject DeliveryRuleUrlPathCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleUrlPathCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleUrlPathCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleUrlPathCondition_STATUS_ARMGenerator()
var deliveryRuleUrlPathCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleUrlPathCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleUrlPathCondition_STATUS_ARM instances for property testing.
// We first initialize deliveryRuleUrlPathCondition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleUrlPathCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleUrlPathCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleUrlPathCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleUrlPathCondition_STATUS_ARM(generators)
	deliveryRuleUrlPathCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleUrlPathCondition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleUrlPathCondition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleUrlPathCondition_STATUS_ARM(generators)
	deliveryRuleUrlPathCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleUrlPathCondition_STATUS_ARM{}), generators)

	return deliveryRuleUrlPathCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleUrlPathCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleUrlPathCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(DeliveryRuleUrlPathCondition_Name_STATUS_ARM_UrlPath)
}

// AddRelatedPropertyGeneratorsForDeliveryRuleUrlPathCondition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleUrlPathCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(UrlPathMatchConditionParameters_STATUS_ARMGenerator())
}

func Test_DeliveryRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRule_STATUS_ARM, DeliveryRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRule_STATUS_ARM runs a test to see if a specific instance of DeliveryRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRule_STATUS_ARM(subject DeliveryRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRule_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRule_STATUS_ARMGenerator()
var deliveryRule_STATUS_ARMGenerator gopter.Gen

// DeliveryRule_STATUS_ARMGenerator returns a generator of DeliveryRule_STATUS_ARM instances for property testing.
// We first initialize deliveryRule_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRule_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRule_STATUS_ARMGenerator != nil {
		return deliveryRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRule_STATUS_ARM(generators)
	deliveryRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRule_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRule_STATUS_ARM(generators)
	deliveryRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUS_ARM{}), generators)

	return deliveryRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Order"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeliveryRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(DeliveryRuleAction_STATUS_ARMGenerator())
	gens["Conditions"] = gen.SliceOf(DeliveryRuleCondition_STATUS_ARMGenerator())
}

func Test_EndpointProperties_DeliveryPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_DeliveryPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_DeliveryPolicy_STATUS_ARM, EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_DeliveryPolicy_STATUS_ARM runs a test to see if a specific instance of EndpointProperties_DeliveryPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_DeliveryPolicy_STATUS_ARM(subject EndpointProperties_DeliveryPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_DeliveryPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_DeliveryPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator()
var endpointProperties_DeliveryPolicy_STATUS_ARMGenerator gopter.Gen

// EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator returns a generator of EndpointProperties_DeliveryPolicy_STATUS_ARM instances for property testing.
// We first initialize endpointProperties_DeliveryPolicy_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator() gopter.Gen {
	if endpointProperties_DeliveryPolicy_STATUS_ARMGenerator != nil {
		return endpointProperties_DeliveryPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(generators)
	endpointProperties_DeliveryPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_DeliveryPolicy_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(generators)
	endpointProperties_DeliveryPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_DeliveryPolicy_STATUS_ARM{}), generators)

	return endpointProperties_DeliveryPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(DeliveryRule_STATUS_ARMGenerator())
}

func Test_EndpointProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_STATUS_ARM, EndpointProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_STATUS_ARM runs a test to see if a specific instance of EndpointProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_STATUS_ARM(subject EndpointProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUS_ARM instances for property testing - lazily instantiated by
// EndpointProperties_STATUS_ARMGenerator()
var endpointProperties_STATUS_ARMGenerator gopter.Gen

// EndpointProperties_STATUS_ARMGenerator returns a generator of EndpointProperties_STATUS_ARM instances for property testing.
// We first initialize endpointProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_STATUS_ARMGenerator() gopter.Gen {
	if endpointProperties_STATUS_ARMGenerator != nil {
		return endpointProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM(generators)
	endpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_ARM(generators)
	endpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_ARM{}), generators)

	return endpointProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ContentTypesToCompress"] = gen.SliceOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsHttpAllowed"] = gen.PtrOf(gen.Bool())
	gens["IsHttpsAllowed"] = gen.PtrOf(gen.Bool())
	gens["OptimizationType"] = gen.PtrOf(gen.OneConstOf(
		OptimizationType_STATUS_ARM_DynamicSiteAcceleration,
		OptimizationType_STATUS_ARM_GeneralMediaStreaming,
		OptimizationType_STATUS_ARM_GeneralWebDelivery,
		OptimizationType_STATUS_ARM_LargeFileDownload,
		OptimizationType_STATUS_ARM_VideoOnDemandMediaStreaming))
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["OriginPath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_ProvisioningState_STATUS_ARM_Creating,
		EndpointProperties_ProvisioningState_STATUS_ARM_Deleting,
		EndpointProperties_ProvisioningState_STATUS_ARM_Failed,
		EndpointProperties_ProvisioningState_STATUS_ARM_Succeeded,
		EndpointProperties_ProvisioningState_STATUS_ARM_Updating))
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		QueryStringCachingBehavior_STATUS_ARM_BypassCaching,
		QueryStringCachingBehavior_STATUS_ARM_IgnoreQueryString,
		QueryStringCachingBehavior_STATUS_ARM_NotSet,
		QueryStringCachingBehavior_STATUS_ARM_UseQueryString))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_ResourceState_STATUS_ARM_Creating,
		EndpointProperties_ResourceState_STATUS_ARM_Deleting,
		EndpointProperties_ResourceState_STATUS_ARM_Running,
		EndpointProperties_ResourceState_STATUS_ARM_Starting,
		EndpointProperties_ResourceState_STATUS_ARM_Stopped,
		EndpointProperties_ResourceState_STATUS_ARM_Stopping))
}

// AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomDomains"] = gen.SliceOf(DeepCreatedCustomDomain_STATUS_ARMGenerator())
	gens["DefaultOriginGroup"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
	gens["DeliveryPolicy"] = gen.PtrOf(EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator())
	gens["GeoFilters"] = gen.SliceOf(GeoFilter_STATUS_ARMGenerator())
	gens["OriginGroups"] = gen.SliceOf(DeepCreatedOriginGroup_STATUS_ARMGenerator())
	gens["Origins"] = gen.SliceOf(DeepCreatedOrigin_STATUS_ARMGenerator())
	gens["UrlSigningKeys"] = gen.SliceOf(UrlSigningKey_STATUS_ARMGenerator())
	gens["WebApplicationFirewallPolicyLink"] = gen.PtrOf(EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator())
}

func Test_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM, EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM runs a test to see if a specific instance of EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM(subject EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM instances for property testing - lazily
// instantiated by EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator()
var endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator gopter.Gen

// EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator returns a generator of EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM instances for property testing.
func EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator() gopter.Gen {
	if endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator != nil {
		return endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM(generators)
	endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM{}), generators)

	return endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_GeoFilter_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GeoFilter_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGeoFilter_STATUS_ARM, GeoFilter_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGeoFilter_STATUS_ARM runs a test to see if a specific instance of GeoFilter_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGeoFilter_STATUS_ARM(subject GeoFilter_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GeoFilter_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GeoFilter_STATUS_ARM instances for property testing - lazily instantiated by
// GeoFilter_STATUS_ARMGenerator()
var geoFilter_STATUS_ARMGenerator gopter.Gen

// GeoFilter_STATUS_ARMGenerator returns a generator of GeoFilter_STATUS_ARM instances for property testing.
func GeoFilter_STATUS_ARMGenerator() gopter.Gen {
	if geoFilter_STATUS_ARMGenerator != nil {
		return geoFilter_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGeoFilter_STATUS_ARM(generators)
	geoFilter_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(GeoFilter_STATUS_ARM{}), generators)

	return geoFilter_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForGeoFilter_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGeoFilter_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(GeoFilter_Action_STATUS_ARM_Allow, GeoFilter_Action_STATUS_ARM_Block))
	gens["CountryCodes"] = gen.SliceOf(gen.AlphaString())
	gens["RelativePath"] = gen.PtrOf(gen.AlphaString())
}

func Test_HeaderActionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderActionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderActionParameters_STATUS_ARM, HeaderActionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderActionParameters_STATUS_ARM runs a test to see if a specific instance of HeaderActionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderActionParameters_STATUS_ARM(subject HeaderActionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderActionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderActionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// HeaderActionParameters_STATUS_ARMGenerator()
var headerActionParameters_STATUS_ARMGenerator gopter.Gen

// HeaderActionParameters_STATUS_ARMGenerator returns a generator of HeaderActionParameters_STATUS_ARM instances for property testing.
func HeaderActionParameters_STATUS_ARMGenerator() gopter.Gen {
	if headerActionParameters_STATUS_ARMGenerator != nil {
		return headerActionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderActionParameters_STATUS_ARM(generators)
	headerActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HeaderActionParameters_STATUS_ARM{}), generators)

	return headerActionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHeaderActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HeaderAction"] = gen.PtrOf(gen.OneConstOf(HeaderActionParameters_HeaderAction_STATUS_ARM_Append, HeaderActionParameters_HeaderAction_STATUS_ARM_Delete, HeaderActionParameters_HeaderAction_STATUS_ARM_Overwrite))
	gens["HeaderName"] = gen.PtrOf(gen.AlphaString())
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(HeaderActionParameters_TypeName_STATUS_ARM_DeliveryRuleHeaderActionParameters))
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_HealthProbeParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HealthProbeParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHealthProbeParameters_STATUS_ARM, HealthProbeParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHealthProbeParameters_STATUS_ARM runs a test to see if a specific instance of HealthProbeParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHealthProbeParameters_STATUS_ARM(subject HealthProbeParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HealthProbeParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HealthProbeParameters_STATUS_ARM instances for property testing - lazily instantiated by
// HealthProbeParameters_STATUS_ARMGenerator()
var healthProbeParameters_STATUS_ARMGenerator gopter.Gen

// HealthProbeParameters_STATUS_ARMGenerator returns a generator of HealthProbeParameters_STATUS_ARM instances for property testing.
func HealthProbeParameters_STATUS_ARMGenerator() gopter.Gen {
	if healthProbeParameters_STATUS_ARMGenerator != nil {
		return healthProbeParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUS_ARM(generators)
	healthProbeParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HealthProbeParameters_STATUS_ARM{}), generators)

	return healthProbeParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProbeIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbeProtocol"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeProtocol_STATUS_ARM_Http, HealthProbeParameters_ProbeProtocol_STATUS_ARM_Https, HealthProbeParameters_ProbeProtocol_STATUS_ARM_NotSet))
	gens["ProbeRequestType"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeRequestType_STATUS_ARM_GET, HealthProbeParameters_ProbeRequestType_STATUS_ARM_HEAD, HealthProbeParameters_ProbeRequestType_STATUS_ARM_NotSet))
}

func Test_HostNameMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HostNameMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHostNameMatchConditionParameters_STATUS_ARM, HostNameMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHostNameMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of HostNameMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHostNameMatchConditionParameters_STATUS_ARM(subject HostNameMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HostNameMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HostNameMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// HostNameMatchConditionParameters_STATUS_ARMGenerator()
var hostNameMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// HostNameMatchConditionParameters_STATUS_ARMGenerator returns a generator of HostNameMatchConditionParameters_STATUS_ARM instances for property testing.
func HostNameMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if hostNameMatchConditionParameters_STATUS_ARMGenerator != nil {
		return hostNameMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHostNameMatchConditionParameters_STATUS_ARM(generators)
	hostNameMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HostNameMatchConditionParameters_STATUS_ARM{}), generators)

	return hostNameMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHostNameMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHostNameMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		HostNameMatchConditionParameters_Operator_STATUS_ARM_Any,
		HostNameMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		HostNameMatchConditionParameters_Operator_STATUS_ARM_Contains,
		HostNameMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		HostNameMatchConditionParameters_Operator_STATUS_ARM_Equal,
		HostNameMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		HostNameMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		HostNameMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		HostNameMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		HostNameMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(HostNameMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleHostNameConditionParameters))
}

func Test_HttpErrorRangeParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpErrorRangeParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpErrorRangeParameters_STATUS_ARM, HttpErrorRangeParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpErrorRangeParameters_STATUS_ARM runs a test to see if a specific instance of HttpErrorRangeParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpErrorRangeParameters_STATUS_ARM(subject HttpErrorRangeParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpErrorRangeParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpErrorRangeParameters_STATUS_ARM instances for property testing - lazily instantiated by
// HttpErrorRangeParameters_STATUS_ARMGenerator()
var httpErrorRangeParameters_STATUS_ARMGenerator gopter.Gen

// HttpErrorRangeParameters_STATUS_ARMGenerator returns a generator of HttpErrorRangeParameters_STATUS_ARM instances for property testing.
func HttpErrorRangeParameters_STATUS_ARMGenerator() gopter.Gen {
	if httpErrorRangeParameters_STATUS_ARMGenerator != nil {
		return httpErrorRangeParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUS_ARM(generators)
	httpErrorRangeParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HttpErrorRangeParameters_STATUS_ARM{}), generators)

	return httpErrorRangeParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Begin"] = gen.PtrOf(gen.Int())
	gens["End"] = gen.PtrOf(gen.Int())
}

func Test_HttpVersionMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpVersionMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpVersionMatchConditionParameters_STATUS_ARM, HttpVersionMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpVersionMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of HttpVersionMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpVersionMatchConditionParameters_STATUS_ARM(subject HttpVersionMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpVersionMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpVersionMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// HttpVersionMatchConditionParameters_STATUS_ARMGenerator()
var httpVersionMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// HttpVersionMatchConditionParameters_STATUS_ARMGenerator returns a generator of HttpVersionMatchConditionParameters_STATUS_ARM instances for property testing.
func HttpVersionMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if httpVersionMatchConditionParameters_STATUS_ARMGenerator != nil {
		return httpVersionMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpVersionMatchConditionParameters_STATUS_ARM(generators)
	httpVersionMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HttpVersionMatchConditionParameters_STATUS_ARM{}), generators)

	return httpVersionMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpVersionMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpVersionMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(HttpVersionMatchConditionParameters_Operator_STATUS_ARM_Equal))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(HttpVersionMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleHttpVersionConditionParameters))
}

func Test_IsDeviceMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IsDeviceMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIsDeviceMatchConditionParameters_STATUS_ARM, IsDeviceMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIsDeviceMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of IsDeviceMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIsDeviceMatchConditionParameters_STATUS_ARM(subject IsDeviceMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IsDeviceMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IsDeviceMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// IsDeviceMatchConditionParameters_STATUS_ARMGenerator()
var isDeviceMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// IsDeviceMatchConditionParameters_STATUS_ARMGenerator returns a generator of IsDeviceMatchConditionParameters_STATUS_ARM instances for property testing.
func IsDeviceMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if isDeviceMatchConditionParameters_STATUS_ARMGenerator != nil {
		return isDeviceMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIsDeviceMatchConditionParameters_STATUS_ARM(generators)
	isDeviceMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IsDeviceMatchConditionParameters_STATUS_ARM{}), generators)

	return isDeviceMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIsDeviceMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIsDeviceMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.OneConstOf(IsDeviceMatchConditionParameters_MatchValues_STATUS_ARM_Desktop, IsDeviceMatchConditionParameters_MatchValues_STATUS_ARM_Mobile))
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(IsDeviceMatchConditionParameters_Operator_STATUS_ARM_Equal))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(IsDeviceMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleIsDeviceConditionParameters))
}

func Test_KeyVaultSigningKeyParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultSigningKeyParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUS_ARM, KeyVaultSigningKeyParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUS_ARM runs a test to see if a specific instance of KeyVaultSigningKeyParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUS_ARM(subject KeyVaultSigningKeyParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultSigningKeyParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultSigningKeyParameters_STATUS_ARM instances for property testing - lazily instantiated by
// KeyVaultSigningKeyParameters_STATUS_ARMGenerator()
var keyVaultSigningKeyParameters_STATUS_ARMGenerator gopter.Gen

// KeyVaultSigningKeyParameters_STATUS_ARMGenerator returns a generator of KeyVaultSigningKeyParameters_STATUS_ARM instances for property testing.
func KeyVaultSigningKeyParameters_STATUS_ARMGenerator() gopter.Gen {
	if keyVaultSigningKeyParameters_STATUS_ARMGenerator != nil {
		return keyVaultSigningKeyParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUS_ARM(generators)
	keyVaultSigningKeyParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultSigningKeyParameters_STATUS_ARM{}), generators)

	return keyVaultSigningKeyParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ResourceGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretVersion"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(KeyVaultSigningKeyParameters_TypeName_STATUS_ARM_KeyVaultSigningKeyParameters))
	gens["VaultName"] = gen.PtrOf(gen.AlphaString())
}

func Test_OriginGroupOverrideActionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OriginGroupOverrideActionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOriginGroupOverrideActionParameters_STATUS_ARM, OriginGroupOverrideActionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOriginGroupOverrideActionParameters_STATUS_ARM runs a test to see if a specific instance of OriginGroupOverrideActionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOriginGroupOverrideActionParameters_STATUS_ARM(subject OriginGroupOverrideActionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OriginGroupOverrideActionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OriginGroupOverrideActionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// OriginGroupOverrideActionParameters_STATUS_ARMGenerator()
var originGroupOverrideActionParameters_STATUS_ARMGenerator gopter.Gen

// OriginGroupOverrideActionParameters_STATUS_ARMGenerator returns a generator of OriginGroupOverrideActionParameters_STATUS_ARM instances for property testing.
// We first initialize originGroupOverrideActionParameters_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OriginGroupOverrideActionParameters_STATUS_ARMGenerator() gopter.Gen {
	if originGroupOverrideActionParameters_STATUS_ARMGenerator != nil {
		return originGroupOverrideActionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOriginGroupOverrideActionParameters_STATUS_ARM(generators)
	originGroupOverrideActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OriginGroupOverrideActionParameters_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOriginGroupOverrideActionParameters_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForOriginGroupOverrideActionParameters_STATUS_ARM(generators)
	originGroupOverrideActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OriginGroupOverrideActionParameters_STATUS_ARM{}), generators)

	return originGroupOverrideActionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOriginGroupOverrideActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOriginGroupOverrideActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(OriginGroupOverrideActionParameters_TypeName_STATUS_ARM_DeliveryRuleOriginGroupOverrideActionParameters))
}

// AddRelatedPropertyGeneratorsForOriginGroupOverrideActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOriginGroupOverrideActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OriginGroup"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
}

func Test_OriginGroupOverrideAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OriginGroupOverrideAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOriginGroupOverrideAction_STATUS_ARM, OriginGroupOverrideAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOriginGroupOverrideAction_STATUS_ARM runs a test to see if a specific instance of OriginGroupOverrideAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOriginGroupOverrideAction_STATUS_ARM(subject OriginGroupOverrideAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OriginGroupOverrideAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OriginGroupOverrideAction_STATUS_ARM instances for property testing - lazily instantiated by
// OriginGroupOverrideAction_STATUS_ARMGenerator()
var originGroupOverrideAction_STATUS_ARMGenerator gopter.Gen

// OriginGroupOverrideAction_STATUS_ARMGenerator returns a generator of OriginGroupOverrideAction_STATUS_ARM instances for property testing.
// We first initialize originGroupOverrideAction_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OriginGroupOverrideAction_STATUS_ARMGenerator() gopter.Gen {
	if originGroupOverrideAction_STATUS_ARMGenerator != nil {
		return originGroupOverrideAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOriginGroupOverrideAction_STATUS_ARM(generators)
	originGroupOverrideAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OriginGroupOverrideAction_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOriginGroupOverrideAction_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForOriginGroupOverrideAction_STATUS_ARM(generators)
	originGroupOverrideAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OriginGroupOverrideAction_STATUS_ARM{}), generators)

	return originGroupOverrideAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOriginGroupOverrideAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOriginGroupOverrideAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(OriginGroupOverrideAction_Name_STATUS_ARM_OriginGroupOverride)
}

// AddRelatedPropertyGeneratorsForOriginGroupOverrideAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOriginGroupOverrideAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(OriginGroupOverrideActionParameters_STATUS_ARMGenerator())
}

func Test_OriginGroupOverride_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of OriginGroupOverride_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForOriginGroupOverride_STATUS_ARM, OriginGroupOverride_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForOriginGroupOverride_STATUS_ARM runs a test to see if a specific instance of OriginGroupOverride_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForOriginGroupOverride_STATUS_ARM(subject OriginGroupOverride_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual OriginGroupOverride_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of OriginGroupOverride_STATUS_ARM instances for property testing - lazily instantiated by
// OriginGroupOverride_STATUS_ARMGenerator()
var originGroupOverride_STATUS_ARMGenerator gopter.Gen

// OriginGroupOverride_STATUS_ARMGenerator returns a generator of OriginGroupOverride_STATUS_ARM instances for property testing.
// We first initialize originGroupOverride_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func OriginGroupOverride_STATUS_ARMGenerator() gopter.Gen {
	if originGroupOverride_STATUS_ARMGenerator != nil {
		return originGroupOverride_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOriginGroupOverride_STATUS_ARM(generators)
	originGroupOverride_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OriginGroupOverride_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForOriginGroupOverride_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForOriginGroupOverride_STATUS_ARM(generators)
	originGroupOverride_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(OriginGroupOverride_STATUS_ARM{}), generators)

	return originGroupOverride_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForOriginGroupOverride_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForOriginGroupOverride_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ForwardingProtocol"] = gen.PtrOf(gen.OneConstOf(OriginGroupOverride_ForwardingProtocol_STATUS_ARM_HttpOnly, OriginGroupOverride_ForwardingProtocol_STATUS_ARM_HttpsOnly, OriginGroupOverride_ForwardingProtocol_STATUS_ARM_MatchRequest))
}

// AddRelatedPropertyGeneratorsForOriginGroupOverride_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForOriginGroupOverride_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OriginGroup"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
}

func Test_PostArgsMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PostArgsMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPostArgsMatchConditionParameters_STATUS_ARM, PostArgsMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPostArgsMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of PostArgsMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPostArgsMatchConditionParameters_STATUS_ARM(subject PostArgsMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PostArgsMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PostArgsMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// PostArgsMatchConditionParameters_STATUS_ARMGenerator()
var postArgsMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// PostArgsMatchConditionParameters_STATUS_ARMGenerator returns a generator of PostArgsMatchConditionParameters_STATUS_ARM instances for property testing.
func PostArgsMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if postArgsMatchConditionParameters_STATUS_ARMGenerator != nil {
		return postArgsMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPostArgsMatchConditionParameters_STATUS_ARM(generators)
	postArgsMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PostArgsMatchConditionParameters_STATUS_ARM{}), generators)

	return postArgsMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPostArgsMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPostArgsMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_Any,
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_Contains,
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_Equal,
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		PostArgsMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(PostArgsMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRulePostArgsConditionParameters))
}

func Test_Profiles_Endpoint_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Profiles_Endpoint_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfiles_Endpoint_STATUS_ARM, Profiles_Endpoint_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfiles_Endpoint_STATUS_ARM runs a test to see if a specific instance of Profiles_Endpoint_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfiles_Endpoint_STATUS_ARM(subject Profiles_Endpoint_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Profiles_Endpoint_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Profiles_Endpoint_STATUS_ARM instances for property testing - lazily instantiated by
// Profiles_Endpoint_STATUS_ARMGenerator()
var profiles_Endpoint_STATUS_ARMGenerator gopter.Gen

// Profiles_Endpoint_STATUS_ARMGenerator returns a generator of Profiles_Endpoint_STATUS_ARM instances for property testing.
// We first initialize profiles_Endpoint_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Profiles_Endpoint_STATUS_ARMGenerator() gopter.Gen {
	if profiles_Endpoint_STATUS_ARMGenerator != nil {
		return profiles_Endpoint_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_Endpoint_STATUS_ARM(generators)
	profiles_Endpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Profiles_Endpoint_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_Endpoint_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForProfiles_Endpoint_STATUS_ARM(generators)
	profiles_Endpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Profiles_Endpoint_STATUS_ARM{}), generators)

	return profiles_Endpoint_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForProfiles_Endpoint_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfiles_Endpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProfiles_Endpoint_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfiles_Endpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EndpointProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_QueryStringMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of QueryStringMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForQueryStringMatchConditionParameters_STATUS_ARM, QueryStringMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForQueryStringMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of QueryStringMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForQueryStringMatchConditionParameters_STATUS_ARM(subject QueryStringMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual QueryStringMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of QueryStringMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// QueryStringMatchConditionParameters_STATUS_ARMGenerator()
var queryStringMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// QueryStringMatchConditionParameters_STATUS_ARMGenerator returns a generator of QueryStringMatchConditionParameters_STATUS_ARM instances for property testing.
func QueryStringMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if queryStringMatchConditionParameters_STATUS_ARMGenerator != nil {
		return queryStringMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForQueryStringMatchConditionParameters_STATUS_ARM(generators)
	queryStringMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(QueryStringMatchConditionParameters_STATUS_ARM{}), generators)

	return queryStringMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForQueryStringMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForQueryStringMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_Any,
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_Contains,
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_Equal,
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		QueryStringMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(QueryStringMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleQueryStringConditionParameters))
}

func Test_RemoteAddressMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RemoteAddressMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRemoteAddressMatchConditionParameters_STATUS_ARM, RemoteAddressMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRemoteAddressMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of RemoteAddressMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRemoteAddressMatchConditionParameters_STATUS_ARM(subject RemoteAddressMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RemoteAddressMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RemoteAddressMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// RemoteAddressMatchConditionParameters_STATUS_ARMGenerator()
var remoteAddressMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// RemoteAddressMatchConditionParameters_STATUS_ARMGenerator returns a generator of RemoteAddressMatchConditionParameters_STATUS_ARM instances for property testing.
func RemoteAddressMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if remoteAddressMatchConditionParameters_STATUS_ARMGenerator != nil {
		return remoteAddressMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRemoteAddressMatchConditionParameters_STATUS_ARM(generators)
	remoteAddressMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RemoteAddressMatchConditionParameters_STATUS_ARM{}), generators)

	return remoteAddressMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRemoteAddressMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRemoteAddressMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(RemoteAddressMatchConditionParameters_Operator_STATUS_ARM_Any, RemoteAddressMatchConditionParameters_Operator_STATUS_ARM_GeoMatch, RemoteAddressMatchConditionParameters_Operator_STATUS_ARM_IPMatch))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(RemoteAddressMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleRemoteAddressConditionParameters))
}

func Test_RequestBodyMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RequestBodyMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRequestBodyMatchConditionParameters_STATUS_ARM, RequestBodyMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRequestBodyMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of RequestBodyMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRequestBodyMatchConditionParameters_STATUS_ARM(subject RequestBodyMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RequestBodyMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RequestBodyMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// RequestBodyMatchConditionParameters_STATUS_ARMGenerator()
var requestBodyMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// RequestBodyMatchConditionParameters_STATUS_ARMGenerator returns a generator of RequestBodyMatchConditionParameters_STATUS_ARM instances for property testing.
func RequestBodyMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if requestBodyMatchConditionParameters_STATUS_ARMGenerator != nil {
		return requestBodyMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRequestBodyMatchConditionParameters_STATUS_ARM(generators)
	requestBodyMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RequestBodyMatchConditionParameters_STATUS_ARM{}), generators)

	return requestBodyMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRequestBodyMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRequestBodyMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_Any,
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_Contains,
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_Equal,
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		RequestBodyMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(RequestBodyMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleRequestBodyConditionParameters))
}

func Test_RequestHeaderMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RequestHeaderMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRequestHeaderMatchConditionParameters_STATUS_ARM, RequestHeaderMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRequestHeaderMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of RequestHeaderMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRequestHeaderMatchConditionParameters_STATUS_ARM(subject RequestHeaderMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RequestHeaderMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RequestHeaderMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// RequestHeaderMatchConditionParameters_STATUS_ARMGenerator()
var requestHeaderMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// RequestHeaderMatchConditionParameters_STATUS_ARMGenerator returns a generator of RequestHeaderMatchConditionParameters_STATUS_ARM instances for property testing.
func RequestHeaderMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if requestHeaderMatchConditionParameters_STATUS_ARMGenerator != nil {
		return requestHeaderMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRequestHeaderMatchConditionParameters_STATUS_ARM(generators)
	requestHeaderMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RequestHeaderMatchConditionParameters_STATUS_ARM{}), generators)

	return requestHeaderMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRequestHeaderMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRequestHeaderMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_Any,
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_Contains,
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_Equal,
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		RequestHeaderMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(RequestHeaderMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleRequestHeaderConditionParameters))
}

func Test_RequestMethodMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RequestMethodMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRequestMethodMatchConditionParameters_STATUS_ARM, RequestMethodMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRequestMethodMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of RequestMethodMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRequestMethodMatchConditionParameters_STATUS_ARM(subject RequestMethodMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RequestMethodMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RequestMethodMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// RequestMethodMatchConditionParameters_STATUS_ARMGenerator()
var requestMethodMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// RequestMethodMatchConditionParameters_STATUS_ARMGenerator returns a generator of RequestMethodMatchConditionParameters_STATUS_ARM instances for property testing.
func RequestMethodMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if requestMethodMatchConditionParameters_STATUS_ARMGenerator != nil {
		return requestMethodMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRequestMethodMatchConditionParameters_STATUS_ARM(generators)
	requestMethodMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RequestMethodMatchConditionParameters_STATUS_ARM{}), generators)

	return requestMethodMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRequestMethodMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRequestMethodMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.OneConstOf(
		RequestMethodMatchConditionParameters_MatchValues_STATUS_ARM_DELETE,
		RequestMethodMatchConditionParameters_MatchValues_STATUS_ARM_GET,
		RequestMethodMatchConditionParameters_MatchValues_STATUS_ARM_HEAD,
		RequestMethodMatchConditionParameters_MatchValues_STATUS_ARM_OPTIONS,
		RequestMethodMatchConditionParameters_MatchValues_STATUS_ARM_POST,
		RequestMethodMatchConditionParameters_MatchValues_STATUS_ARM_PUT,
		RequestMethodMatchConditionParameters_MatchValues_STATUS_ARM_TRACE))
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(RequestMethodMatchConditionParameters_Operator_STATUS_ARM_Equal))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(RequestMethodMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleRequestMethodConditionParameters))
}

func Test_RequestSchemeMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RequestSchemeMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRequestSchemeMatchConditionParameters_STATUS_ARM, RequestSchemeMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRequestSchemeMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of RequestSchemeMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRequestSchemeMatchConditionParameters_STATUS_ARM(subject RequestSchemeMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RequestSchemeMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RequestSchemeMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// RequestSchemeMatchConditionParameters_STATUS_ARMGenerator()
var requestSchemeMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// RequestSchemeMatchConditionParameters_STATUS_ARMGenerator returns a generator of RequestSchemeMatchConditionParameters_STATUS_ARM instances for property testing.
func RequestSchemeMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if requestSchemeMatchConditionParameters_STATUS_ARMGenerator != nil {
		return requestSchemeMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRequestSchemeMatchConditionParameters_STATUS_ARM(generators)
	requestSchemeMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RequestSchemeMatchConditionParameters_STATUS_ARM{}), generators)

	return requestSchemeMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRequestSchemeMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRequestSchemeMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.OneConstOf(RequestSchemeMatchConditionParameters_MatchValues_STATUS_ARM_HTTP, RequestSchemeMatchConditionParameters_MatchValues_STATUS_ARM_HTTPS))
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(RequestSchemeMatchConditionParameters_Operator_STATUS_ARM_Equal))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(RequestSchemeMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleRequestSchemeConditionParameters))
}

func Test_RequestUriMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RequestUriMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRequestUriMatchConditionParameters_STATUS_ARM, RequestUriMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRequestUriMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of RequestUriMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRequestUriMatchConditionParameters_STATUS_ARM(subject RequestUriMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RequestUriMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RequestUriMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// RequestUriMatchConditionParameters_STATUS_ARMGenerator()
var requestUriMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// RequestUriMatchConditionParameters_STATUS_ARMGenerator returns a generator of RequestUriMatchConditionParameters_STATUS_ARM instances for property testing.
func RequestUriMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if requestUriMatchConditionParameters_STATUS_ARMGenerator != nil {
		return requestUriMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRequestUriMatchConditionParameters_STATUS_ARM(generators)
	requestUriMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RequestUriMatchConditionParameters_STATUS_ARM{}), generators)

	return requestUriMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRequestUriMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRequestUriMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_Any,
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_Contains,
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_Equal,
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		RequestUriMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(RequestUriMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleRequestUriConditionParameters))
}

func Test_ResourceReference_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_STATUS_ARM, ResourceReference_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_STATUS_ARM runs a test to see if a specific instance of ResourceReference_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_STATUS_ARM(subject ResourceReference_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceReference_STATUS_ARMGenerator()
var resourceReference_STATUS_ARMGenerator gopter.Gen

// ResourceReference_STATUS_ARMGenerator returns a generator of ResourceReference_STATUS_ARM instances for property testing.
func ResourceReference_STATUS_ARMGenerator() gopter.Gen {
	if resourceReference_STATUS_ARMGenerator != nil {
		return resourceReference_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM(generators)
	resourceReference_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_STATUS_ARM{}), generators)

	return resourceReference_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResponseBasedOriginErrorDetectionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResponseBasedOriginErrorDetectionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUS_ARM, ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUS_ARM runs a test to see if a specific instance of ResponseBasedOriginErrorDetectionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(subject ResponseBasedOriginErrorDetectionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResponseBasedOriginErrorDetectionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResponseBasedOriginErrorDetectionParameters_STATUS_ARM instances for property testing - lazily
// instantiated by ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator()
var responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator gopter.Gen

// ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator returns a generator of ResponseBasedOriginErrorDetectionParameters_STATUS_ARM instances for property testing.
// We first initialize responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator() gopter.Gen {
	if responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator != nil {
		return responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(generators)
	responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(generators)
	responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUS_ARM{}), generators)

	return responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ResponseBasedDetectedErrorTypes"] = gen.PtrOf(gen.OneConstOf(ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS_ARM_None, ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS_ARM_TcpAndHttpErrors, ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS_ARM_TcpErrorsOnly))
	gens["ResponseBasedFailoverThresholdPercentage"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HttpErrorRanges"] = gen.SliceOf(HttpErrorRangeParameters_STATUS_ARMGenerator())
}

func Test_RouteConfigurationOverrideActionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteConfigurationOverrideActionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteConfigurationOverrideActionParameters_STATUS_ARM, RouteConfigurationOverrideActionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteConfigurationOverrideActionParameters_STATUS_ARM runs a test to see if a specific instance of RouteConfigurationOverrideActionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteConfigurationOverrideActionParameters_STATUS_ARM(subject RouteConfigurationOverrideActionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteConfigurationOverrideActionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteConfigurationOverrideActionParameters_STATUS_ARM instances for property testing - lazily
// instantiated by RouteConfigurationOverrideActionParameters_STATUS_ARMGenerator()
var routeConfigurationOverrideActionParameters_STATUS_ARMGenerator gopter.Gen

// RouteConfigurationOverrideActionParameters_STATUS_ARMGenerator returns a generator of RouteConfigurationOverrideActionParameters_STATUS_ARM instances for property testing.
// We first initialize routeConfigurationOverrideActionParameters_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteConfigurationOverrideActionParameters_STATUS_ARMGenerator() gopter.Gen {
	if routeConfigurationOverrideActionParameters_STATUS_ARMGenerator != nil {
		return routeConfigurationOverrideActionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteConfigurationOverrideActionParameters_STATUS_ARM(generators)
	routeConfigurationOverrideActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RouteConfigurationOverrideActionParameters_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteConfigurationOverrideActionParameters_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRouteConfigurationOverrideActionParameters_STATUS_ARM(generators)
	routeConfigurationOverrideActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RouteConfigurationOverrideActionParameters_STATUS_ARM{}), generators)

	return routeConfigurationOverrideActionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteConfigurationOverrideActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteConfigurationOverrideActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(RouteConfigurationOverrideActionParameters_TypeName_STATUS_ARM_DeliveryRuleRouteConfigurationOverrideActionParameters))
}

// AddRelatedPropertyGeneratorsForRouteConfigurationOverrideActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteConfigurationOverrideActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CacheConfiguration"] = gen.PtrOf(CacheConfiguration_STATUS_ARMGenerator())
	gens["OriginGroupOverride"] = gen.PtrOf(OriginGroupOverride_STATUS_ARMGenerator())
}

func Test_ServerPortMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerPortMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerPortMatchConditionParameters_STATUS_ARM, ServerPortMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerPortMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of ServerPortMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerPortMatchConditionParameters_STATUS_ARM(subject ServerPortMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerPortMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerPortMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// ServerPortMatchConditionParameters_STATUS_ARMGenerator()
var serverPortMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// ServerPortMatchConditionParameters_STATUS_ARMGenerator returns a generator of ServerPortMatchConditionParameters_STATUS_ARM instances for property testing.
func ServerPortMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if serverPortMatchConditionParameters_STATUS_ARMGenerator != nil {
		return serverPortMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerPortMatchConditionParameters_STATUS_ARM(generators)
	serverPortMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServerPortMatchConditionParameters_STATUS_ARM{}), generators)

	return serverPortMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerPortMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerPortMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_Any,
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_Contains,
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_Equal,
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		ServerPortMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(ServerPortMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleServerPortConditionParameters))
}

func Test_SocketAddrMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SocketAddrMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSocketAddrMatchConditionParameters_STATUS_ARM, SocketAddrMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSocketAddrMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of SocketAddrMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSocketAddrMatchConditionParameters_STATUS_ARM(subject SocketAddrMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SocketAddrMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SocketAddrMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// SocketAddrMatchConditionParameters_STATUS_ARMGenerator()
var socketAddrMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// SocketAddrMatchConditionParameters_STATUS_ARMGenerator returns a generator of SocketAddrMatchConditionParameters_STATUS_ARM instances for property testing.
func SocketAddrMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if socketAddrMatchConditionParameters_STATUS_ARMGenerator != nil {
		return socketAddrMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSocketAddrMatchConditionParameters_STATUS_ARM(generators)
	socketAddrMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SocketAddrMatchConditionParameters_STATUS_ARM{}), generators)

	return socketAddrMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSocketAddrMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSocketAddrMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(SocketAddrMatchConditionParameters_Operator_STATUS_ARM_Any, SocketAddrMatchConditionParameters_Operator_STATUS_ARM_IPMatch))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(SocketAddrMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleSocketAddrConditionParameters))
}

func Test_SslProtocolMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SslProtocolMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSslProtocolMatchConditionParameters_STATUS_ARM, SslProtocolMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSslProtocolMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of SslProtocolMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSslProtocolMatchConditionParameters_STATUS_ARM(subject SslProtocolMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SslProtocolMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SslProtocolMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// SslProtocolMatchConditionParameters_STATUS_ARMGenerator()
var sslProtocolMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// SslProtocolMatchConditionParameters_STATUS_ARMGenerator returns a generator of SslProtocolMatchConditionParameters_STATUS_ARM instances for property testing.
func SslProtocolMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if sslProtocolMatchConditionParameters_STATUS_ARMGenerator != nil {
		return sslProtocolMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSslProtocolMatchConditionParameters_STATUS_ARM(generators)
	sslProtocolMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SslProtocolMatchConditionParameters_STATUS_ARM{}), generators)

	return sslProtocolMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSslProtocolMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSslProtocolMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.OneConstOf(SslProtocol_STATUS_ARM_TLSv1, SslProtocol_STATUS_ARM_TLSv11, SslProtocol_STATUS_ARM_TLSv12))
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(SslProtocolMatchConditionParameters_Operator_STATUS_ARM_Equal))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(SslProtocolMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleSslProtocolConditionParameters))
}

func Test_UrlFileExtensionMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlFileExtensionMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlFileExtensionMatchConditionParameters_STATUS_ARM, UrlFileExtensionMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlFileExtensionMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of UrlFileExtensionMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlFileExtensionMatchConditionParameters_STATUS_ARM(subject UrlFileExtensionMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlFileExtensionMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlFileExtensionMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated
// by UrlFileExtensionMatchConditionParameters_STATUS_ARMGenerator()
var urlFileExtensionMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// UrlFileExtensionMatchConditionParameters_STATUS_ARMGenerator returns a generator of UrlFileExtensionMatchConditionParameters_STATUS_ARM instances for property testing.
func UrlFileExtensionMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if urlFileExtensionMatchConditionParameters_STATUS_ARMGenerator != nil {
		return urlFileExtensionMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlFileExtensionMatchConditionParameters_STATUS_ARM(generators)
	urlFileExtensionMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlFileExtensionMatchConditionParameters_STATUS_ARM{}), generators)

	return urlFileExtensionMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlFileExtensionMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlFileExtensionMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_Any,
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_Contains,
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_Equal,
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		UrlFileExtensionMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(UrlFileExtensionMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleUrlFileExtensionMatchConditionParameters))
}

func Test_UrlFileNameMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlFileNameMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlFileNameMatchConditionParameters_STATUS_ARM, UrlFileNameMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlFileNameMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of UrlFileNameMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlFileNameMatchConditionParameters_STATUS_ARM(subject UrlFileNameMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlFileNameMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlFileNameMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// UrlFileNameMatchConditionParameters_STATUS_ARMGenerator()
var urlFileNameMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// UrlFileNameMatchConditionParameters_STATUS_ARMGenerator returns a generator of UrlFileNameMatchConditionParameters_STATUS_ARM instances for property testing.
func UrlFileNameMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if urlFileNameMatchConditionParameters_STATUS_ARMGenerator != nil {
		return urlFileNameMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlFileNameMatchConditionParameters_STATUS_ARM(generators)
	urlFileNameMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlFileNameMatchConditionParameters_STATUS_ARM{}), generators)

	return urlFileNameMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlFileNameMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlFileNameMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_Any,
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_Contains,
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_Equal,
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		UrlFileNameMatchConditionParameters_Operator_STATUS_ARM_RegEx))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(UrlFileNameMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleUrlFilenameConditionParameters))
}

func Test_UrlPathMatchConditionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlPathMatchConditionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlPathMatchConditionParameters_STATUS_ARM, UrlPathMatchConditionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlPathMatchConditionParameters_STATUS_ARM runs a test to see if a specific instance of UrlPathMatchConditionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlPathMatchConditionParameters_STATUS_ARM(subject UrlPathMatchConditionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlPathMatchConditionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlPathMatchConditionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// UrlPathMatchConditionParameters_STATUS_ARMGenerator()
var urlPathMatchConditionParameters_STATUS_ARMGenerator gopter.Gen

// UrlPathMatchConditionParameters_STATUS_ARMGenerator returns a generator of UrlPathMatchConditionParameters_STATUS_ARM instances for property testing.
func UrlPathMatchConditionParameters_STATUS_ARMGenerator() gopter.Gen {
	if urlPathMatchConditionParameters_STATUS_ARMGenerator != nil {
		return urlPathMatchConditionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlPathMatchConditionParameters_STATUS_ARM(generators)
	urlPathMatchConditionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlPathMatchConditionParameters_STATUS_ARM{}), generators)

	return urlPathMatchConditionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlPathMatchConditionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlPathMatchConditionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchValues"] = gen.SliceOf(gen.AlphaString())
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["Operator"] = gen.PtrOf(gen.OneConstOf(
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_Any,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_BeginsWith,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_Contains,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_EndsWith,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_Equal,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_GreaterThan,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_GreaterThanOrEqual,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_LessThan,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_LessThanOrEqual,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_RegEx,
		UrlPathMatchConditionParameters_Operator_STATUS_ARM_Wildcard))
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_ARM_Lowercase,
		Transform_STATUS_ARM_RemoveNulls,
		Transform_STATUS_ARM_Trim,
		Transform_STATUS_ARM_Uppercase,
		Transform_STATUS_ARM_UrlDecode,
		Transform_STATUS_ARM_UrlEncode))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(UrlPathMatchConditionParameters_TypeName_STATUS_ARM_DeliveryRuleUrlPathMatchConditionParameters))
}

func Test_UrlRedirectActionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlRedirectActionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlRedirectActionParameters_STATUS_ARM, UrlRedirectActionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlRedirectActionParameters_STATUS_ARM runs a test to see if a specific instance of UrlRedirectActionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlRedirectActionParameters_STATUS_ARM(subject UrlRedirectActionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlRedirectActionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlRedirectActionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// UrlRedirectActionParameters_STATUS_ARMGenerator()
var urlRedirectActionParameters_STATUS_ARMGenerator gopter.Gen

// UrlRedirectActionParameters_STATUS_ARMGenerator returns a generator of UrlRedirectActionParameters_STATUS_ARM instances for property testing.
func UrlRedirectActionParameters_STATUS_ARMGenerator() gopter.Gen {
	if urlRedirectActionParameters_STATUS_ARMGenerator != nil {
		return urlRedirectActionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlRedirectActionParameters_STATUS_ARM(generators)
	urlRedirectActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlRedirectActionParameters_STATUS_ARM{}), generators)

	return urlRedirectActionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlRedirectActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlRedirectActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomFragment"] = gen.PtrOf(gen.AlphaString())
	gens["CustomHostname"] = gen.PtrOf(gen.AlphaString())
	gens["CustomPath"] = gen.PtrOf(gen.AlphaString())
	gens["CustomQueryString"] = gen.PtrOf(gen.AlphaString())
	gens["DestinationProtocol"] = gen.PtrOf(gen.OneConstOf(UrlRedirectActionParameters_DestinationProtocol_STATUS_ARM_Http, UrlRedirectActionParameters_DestinationProtocol_STATUS_ARM_Https, UrlRedirectActionParameters_DestinationProtocol_STATUS_ARM_MatchRequest))
	gens["RedirectType"] = gen.PtrOf(gen.OneConstOf(
		UrlRedirectActionParameters_RedirectType_STATUS_ARM_Found,
		UrlRedirectActionParameters_RedirectType_STATUS_ARM_Moved,
		UrlRedirectActionParameters_RedirectType_STATUS_ARM_PermanentRedirect,
		UrlRedirectActionParameters_RedirectType_STATUS_ARM_TemporaryRedirect))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(UrlRedirectActionParameters_TypeName_STATUS_ARM_DeliveryRuleUrlRedirectActionParameters))
}

func Test_UrlRedirectAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlRedirectAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlRedirectAction_STATUS_ARM, UrlRedirectAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlRedirectAction_STATUS_ARM runs a test to see if a specific instance of UrlRedirectAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlRedirectAction_STATUS_ARM(subject UrlRedirectAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlRedirectAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlRedirectAction_STATUS_ARM instances for property testing - lazily instantiated by
// UrlRedirectAction_STATUS_ARMGenerator()
var urlRedirectAction_STATUS_ARMGenerator gopter.Gen

// UrlRedirectAction_STATUS_ARMGenerator returns a generator of UrlRedirectAction_STATUS_ARM instances for property testing.
// We first initialize urlRedirectAction_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlRedirectAction_STATUS_ARMGenerator() gopter.Gen {
	if urlRedirectAction_STATUS_ARMGenerator != nil {
		return urlRedirectAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlRedirectAction_STATUS_ARM(generators)
	urlRedirectAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlRedirectAction_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlRedirectAction_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUrlRedirectAction_STATUS_ARM(generators)
	urlRedirectAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlRedirectAction_STATUS_ARM{}), generators)

	return urlRedirectAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlRedirectAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlRedirectAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(UrlRedirectAction_Name_STATUS_ARM_UrlRedirect)
}

// AddRelatedPropertyGeneratorsForUrlRedirectAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlRedirectAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(UrlRedirectActionParameters_STATUS_ARMGenerator())
}

func Test_UrlRewriteActionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlRewriteActionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlRewriteActionParameters_STATUS_ARM, UrlRewriteActionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlRewriteActionParameters_STATUS_ARM runs a test to see if a specific instance of UrlRewriteActionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlRewriteActionParameters_STATUS_ARM(subject UrlRewriteActionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlRewriteActionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlRewriteActionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// UrlRewriteActionParameters_STATUS_ARMGenerator()
var urlRewriteActionParameters_STATUS_ARMGenerator gopter.Gen

// UrlRewriteActionParameters_STATUS_ARMGenerator returns a generator of UrlRewriteActionParameters_STATUS_ARM instances for property testing.
func UrlRewriteActionParameters_STATUS_ARMGenerator() gopter.Gen {
	if urlRewriteActionParameters_STATUS_ARMGenerator != nil {
		return urlRewriteActionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlRewriteActionParameters_STATUS_ARM(generators)
	urlRewriteActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlRewriteActionParameters_STATUS_ARM{}), generators)

	return urlRewriteActionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlRewriteActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlRewriteActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Destination"] = gen.PtrOf(gen.AlphaString())
	gens["PreserveUnmatchedPath"] = gen.PtrOf(gen.Bool())
	gens["SourcePattern"] = gen.PtrOf(gen.AlphaString())
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(UrlRewriteActionParameters_TypeName_STATUS_ARM_DeliveryRuleUrlRewriteActionParameters))
}

func Test_UrlRewriteAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlRewriteAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlRewriteAction_STATUS_ARM, UrlRewriteAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlRewriteAction_STATUS_ARM runs a test to see if a specific instance of UrlRewriteAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlRewriteAction_STATUS_ARM(subject UrlRewriteAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlRewriteAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlRewriteAction_STATUS_ARM instances for property testing - lazily instantiated by
// UrlRewriteAction_STATUS_ARMGenerator()
var urlRewriteAction_STATUS_ARMGenerator gopter.Gen

// UrlRewriteAction_STATUS_ARMGenerator returns a generator of UrlRewriteAction_STATUS_ARM instances for property testing.
// We first initialize urlRewriteAction_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlRewriteAction_STATUS_ARMGenerator() gopter.Gen {
	if urlRewriteAction_STATUS_ARMGenerator != nil {
		return urlRewriteAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlRewriteAction_STATUS_ARM(generators)
	urlRewriteAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlRewriteAction_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlRewriteAction_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUrlRewriteAction_STATUS_ARM(generators)
	urlRewriteAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlRewriteAction_STATUS_ARM{}), generators)

	return urlRewriteAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlRewriteAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlRewriteAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(UrlRewriteAction_Name_STATUS_ARM_UrlRewrite)
}

// AddRelatedPropertyGeneratorsForUrlRewriteAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlRewriteAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(UrlRewriteActionParameters_STATUS_ARMGenerator())
}

func Test_UrlSigningActionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningActionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningActionParameters_STATUS_ARM, UrlSigningActionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningActionParameters_STATUS_ARM runs a test to see if a specific instance of UrlSigningActionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningActionParameters_STATUS_ARM(subject UrlSigningActionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningActionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningActionParameters_STATUS_ARM instances for property testing - lazily instantiated by
// UrlSigningActionParameters_STATUS_ARMGenerator()
var urlSigningActionParameters_STATUS_ARMGenerator gopter.Gen

// UrlSigningActionParameters_STATUS_ARMGenerator returns a generator of UrlSigningActionParameters_STATUS_ARM instances for property testing.
// We first initialize urlSigningActionParameters_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlSigningActionParameters_STATUS_ARMGenerator() gopter.Gen {
	if urlSigningActionParameters_STATUS_ARMGenerator != nil {
		return urlSigningActionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningActionParameters_STATUS_ARM(generators)
	urlSigningActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningActionParameters_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningActionParameters_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUrlSigningActionParameters_STATUS_ARM(generators)
	urlSigningActionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningActionParameters_STATUS_ARM{}), generators)

	return urlSigningActionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Algorithm"] = gen.PtrOf(gen.OneConstOf(UrlSigningActionParameters_Algorithm_STATUS_ARM_SHA256))
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(UrlSigningActionParameters_TypeName_STATUS_ARM_DeliveryRuleUrlSigningActionParameters))
}

// AddRelatedPropertyGeneratorsForUrlSigningActionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlSigningActionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ParameterNameOverride"] = gen.SliceOf(UrlSigningParamIdentifier_STATUS_ARMGenerator())
}

func Test_UrlSigningAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningAction_STATUS_ARM, UrlSigningAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningAction_STATUS_ARM runs a test to see if a specific instance of UrlSigningAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningAction_STATUS_ARM(subject UrlSigningAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningAction_STATUS_ARM instances for property testing - lazily instantiated by
// UrlSigningAction_STATUS_ARMGenerator()
var urlSigningAction_STATUS_ARMGenerator gopter.Gen

// UrlSigningAction_STATUS_ARMGenerator returns a generator of UrlSigningAction_STATUS_ARM instances for property testing.
// We first initialize urlSigningAction_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlSigningAction_STATUS_ARMGenerator() gopter.Gen {
	if urlSigningAction_STATUS_ARMGenerator != nil {
		return urlSigningAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningAction_STATUS_ARM(generators)
	urlSigningAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningAction_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningAction_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUrlSigningAction_STATUS_ARM(generators)
	urlSigningAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningAction_STATUS_ARM{}), generators)

	return urlSigningAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.OneConstOf(UrlSigningAction_Name_STATUS_ARM_UrlSigning)
}

// AddRelatedPropertyGeneratorsForUrlSigningAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlSigningAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Parameters"] = gen.PtrOf(UrlSigningActionParameters_STATUS_ARMGenerator())
}

func Test_UrlSigningKey_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningKey_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningKey_STATUS_ARM, UrlSigningKey_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningKey_STATUS_ARM runs a test to see if a specific instance of UrlSigningKey_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningKey_STATUS_ARM(subject UrlSigningKey_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningKey_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningKey_STATUS_ARM instances for property testing - lazily instantiated by
// UrlSigningKey_STATUS_ARMGenerator()
var urlSigningKey_STATUS_ARMGenerator gopter.Gen

// UrlSigningKey_STATUS_ARMGenerator returns a generator of UrlSigningKey_STATUS_ARM instances for property testing.
// We first initialize urlSigningKey_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlSigningKey_STATUS_ARMGenerator() gopter.Gen {
	if urlSigningKey_STATUS_ARMGenerator != nil {
		return urlSigningKey_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKey_STATUS_ARM(generators)
	urlSigningKey_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKey_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUrlSigningKey_STATUS_ARM(generators)
	urlSigningKey_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUS_ARM{}), generators)

	return urlSigningKey_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningKey_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningKey_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUrlSigningKey_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlSigningKey_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["KeySourceParameters"] = gen.PtrOf(KeyVaultSigningKeyParameters_STATUS_ARMGenerator())
}

func Test_UrlSigningParamIdentifier_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningParamIdentifier_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningParamIdentifier_STATUS_ARM, UrlSigningParamIdentifier_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningParamIdentifier_STATUS_ARM runs a test to see if a specific instance of UrlSigningParamIdentifier_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningParamIdentifier_STATUS_ARM(subject UrlSigningParamIdentifier_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningParamIdentifier_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningParamIdentifier_STATUS_ARM instances for property testing - lazily instantiated by
// UrlSigningParamIdentifier_STATUS_ARMGenerator()
var urlSigningParamIdentifier_STATUS_ARMGenerator gopter.Gen

// UrlSigningParamIdentifier_STATUS_ARMGenerator returns a generator of UrlSigningParamIdentifier_STATUS_ARM instances for property testing.
func UrlSigningParamIdentifier_STATUS_ARMGenerator() gopter.Gen {
	if urlSigningParamIdentifier_STATUS_ARMGenerator != nil {
		return urlSigningParamIdentifier_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningParamIdentifier_STATUS_ARM(generators)
	urlSigningParamIdentifier_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningParamIdentifier_STATUS_ARM{}), generators)

	return urlSigningParamIdentifier_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningParamIdentifier_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningParamIdentifier_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ParamIndicator"] = gen.PtrOf(gen.OneConstOf(UrlSigningParamIdentifier_ParamIndicator_STATUS_ARM_Expires, UrlSigningParamIdentifier_ParamIndicator_STATUS_ARM_KeyId, UrlSigningParamIdentifier_ParamIndicator_STATUS_ARM_Signature))
	gens["ParamName"] = gen.PtrOf(gen.AlphaString())
}
