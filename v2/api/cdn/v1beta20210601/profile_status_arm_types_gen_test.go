// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Profile_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Profile_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfile_STATUS_ARM, Profile_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfile_STATUS_ARM runs a test to see if a specific instance of Profile_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfile_STATUS_ARM(subject Profile_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Profile_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Profile_STATUS_ARM instances for property testing - lazily instantiated by Profile_STATUS_ARMGenerator()
var profile_STATUS_ARMGenerator gopter.Gen

// Profile_STATUS_ARMGenerator returns a generator of Profile_STATUS_ARM instances for property testing.
// We first initialize profile_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Profile_STATUS_ARMGenerator() gopter.Gen {
	if profile_STATUS_ARMGenerator != nil {
		return profile_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfile_STATUS_ARM(generators)
	profile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Profile_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfile_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForProfile_STATUS_ARM(generators)
	profile_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Profile_STATUS_ARM{}), generators)

	return profile_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForProfile_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProfile_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfile_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ProfileProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_ProfileProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProfileProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfileProperties_STATUS_ARM, ProfileProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfileProperties_STATUS_ARM runs a test to see if a specific instance of ProfileProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfileProperties_STATUS_ARM(subject ProfileProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProfileProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProfileProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ProfileProperties_STATUS_ARMGenerator()
var profileProperties_STATUS_ARMGenerator gopter.Gen

// ProfileProperties_STATUS_ARMGenerator returns a generator of ProfileProperties_STATUS_ARM instances for property testing.
func ProfileProperties_STATUS_ARMGenerator() gopter.Gen {
	if profileProperties_STATUS_ARMGenerator != nil {
		return profileProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfileProperties_STATUS_ARM(generators)
	profileProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ProfileProperties_STATUS_ARM{}), generators)

	return profileProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForProfileProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfileProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["FrontDoorId"] = gen.PtrOf(gen.AlphaString())
	gens["OriginResponseTimeoutSeconds"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProfileProperties_ProvisioningState_STATUS_Creating,
		ProfileProperties_ProvisioningState_STATUS_Deleting,
		ProfileProperties_ProvisioningState_STATUS_Failed,
		ProfileProperties_ProvisioningState_STATUS_Succeeded,
		ProfileProperties_ProvisioningState_STATUS_Updating))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		ProfileProperties_ResourceState_STATUS_Active,
		ProfileProperties_ResourceState_STATUS_Creating,
		ProfileProperties_ResourceState_STATUS_Deleting,
		ProfileProperties_ResourceState_STATUS_Disabled))
}

func Test_Sku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS_ARM, Sku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS_ARM runs a test to see if a specific instance of Sku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS_ARM(subject Sku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS_ARM instances for property testing - lazily instantiated by Sku_STATUS_ARMGenerator()
var sku_STATUS_ARMGenerator gopter.Gen

// Sku_STATUS_ARMGenerator returns a generator of Sku_STATUS_ARM instances for property testing.
func Sku_STATUS_ARMGenerator() gopter.Gen {
	if sku_STATUS_ARMGenerator != nil {
		return sku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS_ARM(generators)
	sku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS_ARM{}), generators)

	return sku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		Sku_Name_STATUS_Custom_Verizon,
		Sku_Name_STATUS_Premium_AzureFrontDoor,
		Sku_Name_STATUS_Premium_Verizon,
		Sku_Name_STATUS_StandardPlus_955BandWidth_ChinaCdn,
		Sku_Name_STATUS_StandardPlus_AvgBandWidth_ChinaCdn,
		Sku_Name_STATUS_StandardPlus_ChinaCdn,
		Sku_Name_STATUS_Standard_955BandWidth_ChinaCdn,
		Sku_Name_STATUS_Standard_Akamai,
		Sku_Name_STATUS_Standard_AvgBandWidth_ChinaCdn,
		Sku_Name_STATUS_Standard_AzureFrontDoor,
		Sku_Name_STATUS_Standard_ChinaCdn,
		Sku_Name_STATUS_Standard_Microsoft,
		Sku_Name_STATUS_Standard_Verizon))
}
