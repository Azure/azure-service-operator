// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Endpoint_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Endpoint_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointStatusARM, EndpointStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointStatusARM runs a test to see if a specific instance of Endpoint_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointStatusARM(subject Endpoint_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Endpoint_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Endpoint_StatusARM instances for property testing - lazily instantiated by EndpointStatusARMGenerator()
var endpointStatusARMGenerator gopter.Gen

// EndpointStatusARMGenerator returns a generator of Endpoint_StatusARM instances for property testing.
// We first initialize endpointStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointStatusARMGenerator() gopter.Gen {
	if endpointStatusARMGenerator != nil {
		return endpointStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointStatusARM(generators)
	endpointStatusARMGenerator = gen.Struct(reflect.TypeOf(Endpoint_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointStatusARM(generators)
	AddRelatedPropertyGeneratorsForEndpointStatusARM(generators)
	endpointStatusARMGenerator = gen.Struct(reflect.TypeOf(Endpoint_StatusARM{}), generators)

	return endpointStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpointStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EndpointPropertiesStatusARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataStatusARMGenerator())
}

func Test_EndpointProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointPropertiesStatusARM, EndpointPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointPropertiesStatusARM runs a test to see if a specific instance of EndpointProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointPropertiesStatusARM(subject EndpointProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_StatusARM instances for property testing - lazily instantiated by
// EndpointPropertiesStatusARMGenerator()
var endpointPropertiesStatusARMGenerator gopter.Gen

// EndpointPropertiesStatusARMGenerator returns a generator of EndpointProperties_StatusARM instances for property testing.
// We first initialize endpointPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointPropertiesStatusARMGenerator() gopter.Gen {
	if endpointPropertiesStatusARMGenerator != nil {
		return endpointPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesStatusARM(generators)
	endpointPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForEndpointPropertiesStatusARM(generators)
	endpointPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_StatusARM{}), generators)

	return endpointPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["ContentTypesToCompress"] = gen.SliceOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsHttpAllowed"] = gen.PtrOf(gen.Bool())
	gens["IsHttpsAllowed"] = gen.PtrOf(gen.Bool())
	gens["OptimizationType"] = gen.PtrOf(gen.OneConstOf(
		OptimizationType_Status_DynamicSiteAcceleration,
		OptimizationType_Status_GeneralMediaStreaming,
		OptimizationType_Status_GeneralWebDelivery,
		OptimizationType_Status_LargeFileDownload,
		OptimizationType_Status_VideoOnDemandMediaStreaming))
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["OriginPath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EndpointPropertiesStatusProvisioningState_Creating,
		EndpointPropertiesStatusProvisioningState_Deleting,
		EndpointPropertiesStatusProvisioningState_Failed,
		EndpointPropertiesStatusProvisioningState_Succeeded,
		EndpointPropertiesStatusProvisioningState_Updating))
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		QueryStringCachingBehavior_Status_BypassCaching,
		QueryStringCachingBehavior_Status_IgnoreQueryString,
		QueryStringCachingBehavior_Status_NotSet,
		QueryStringCachingBehavior_Status_UseQueryString))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		EndpointPropertiesStatusResourceState_Creating,
		EndpointPropertiesStatusResourceState_Deleting,
		EndpointPropertiesStatusResourceState_Running,
		EndpointPropertiesStatusResourceState_Starting,
		EndpointPropertiesStatusResourceState_Stopped,
		EndpointPropertiesStatusResourceState_Stopping))
}

// AddRelatedPropertyGeneratorsForEndpointPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["CustomDomains"] = gen.SliceOf(CustomDomainStatusSubResourceEmbeddedARMGenerator())
	gens["DefaultOriginGroup"] = gen.PtrOf(ResourceReferenceStatusARMGenerator())
	gens["DeliveryPolicy"] = gen.PtrOf(EndpointPropertiesStatusDeliveryPolicyARMGenerator())
	gens["GeoFilters"] = gen.SliceOf(GeoFilterStatusARMGenerator())
	gens["OriginGroups"] = gen.SliceOf(DeepCreatedOriginGroupStatusARMGenerator())
	gens["Origins"] = gen.SliceOf(DeepCreatedOriginStatusARMGenerator())
	gens["UrlSigningKeys"] = gen.SliceOf(UrlSigningKeyStatusARMGenerator())
	gens["WebApplicationFirewallPolicyLink"] = gen.PtrOf(EndpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator())
}

func Test_SystemData_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemDataStatusARM, SystemDataStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemDataStatusARM runs a test to see if a specific instance of SystemData_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemDataStatusARM(subject SystemData_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_StatusARM instances for property testing - lazily instantiated by
// SystemDataStatusARMGenerator()
var systemDataStatusARMGenerator gopter.Gen

// SystemDataStatusARMGenerator returns a generator of SystemData_StatusARM instances for property testing.
func SystemDataStatusARMGenerator() gopter.Gen {
	if systemDataStatusARMGenerator != nil {
		return systemDataStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemDataStatusARM(generators)
	systemDataStatusARMGenerator = gen.Struct(reflect.TypeOf(SystemData_StatusARM{}), generators)

	return systemDataStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemDataStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemDataStatusARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_Status_Application,
		IdentityType_Status_Key,
		IdentityType_Status_ManagedIdentity,
		IdentityType_Status_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_Status_Application,
		IdentityType_Status_Key,
		IdentityType_Status_ManagedIdentity,
		IdentityType_Status_User))
}

func Test_CustomDomain_Status_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomain_Status_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomainStatusSubResourceEmbeddedARM, CustomDomainStatusSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomainStatusSubResourceEmbeddedARM runs a test to see if a specific instance of CustomDomain_Status_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomainStatusSubResourceEmbeddedARM(subject CustomDomain_Status_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomain_Status_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomain_Status_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
// CustomDomainStatusSubResourceEmbeddedARMGenerator()
var customDomainStatusSubResourceEmbeddedARMGenerator gopter.Gen

// CustomDomainStatusSubResourceEmbeddedARMGenerator returns a generator of CustomDomain_Status_SubResourceEmbeddedARM instances for property testing.
// We first initialize customDomainStatusSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomDomainStatusSubResourceEmbeddedARMGenerator() gopter.Gen {
	if customDomainStatusSubResourceEmbeddedARMGenerator != nil {
		return customDomainStatusSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainStatusSubResourceEmbeddedARM(generators)
	customDomainStatusSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_Status_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainStatusSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForCustomDomainStatusSubResourceEmbeddedARM(generators)
	customDomainStatusSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_Status_SubResourceEmbeddedARM{}), generators)

	return customDomainStatusSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomainStatusSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomainStatusSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomDomainStatusSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomDomainStatusSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemDataStatusARMGenerator())
}

func Test_DeepCreatedOriginGroup_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroup_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupStatusARM, DeepCreatedOriginGroupStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupStatusARM runs a test to see if a specific instance of DeepCreatedOriginGroup_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupStatusARM(subject DeepCreatedOriginGroup_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroup_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroup_StatusARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupStatusARMGenerator()
var deepCreatedOriginGroupStatusARMGenerator gopter.Gen

// DeepCreatedOriginGroupStatusARMGenerator returns a generator of DeepCreatedOriginGroup_StatusARM instances for property testing.
// We first initialize deepCreatedOriginGroupStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupStatusARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupStatusARMGenerator != nil {
		return deepCreatedOriginGroupStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupStatusARM(generators)
	deepCreatedOriginGroupStatusARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupStatusARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupStatusARM(generators)
	deepCreatedOriginGroupStatusARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_StatusARM{}), generators)

	return deepCreatedOriginGroupStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginGroupPropertiesStatusARMGenerator())
}

func Test_DeepCreatedOrigin_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOrigin_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginStatusARM, DeepCreatedOriginStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginStatusARM runs a test to see if a specific instance of DeepCreatedOrigin_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginStatusARM(subject DeepCreatedOrigin_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOrigin_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOrigin_StatusARM instances for property testing - lazily instantiated by
// DeepCreatedOriginStatusARMGenerator()
var deepCreatedOriginStatusARMGenerator gopter.Gen

// DeepCreatedOriginStatusARMGenerator returns a generator of DeepCreatedOrigin_StatusARM instances for property testing.
// We first initialize deepCreatedOriginStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginStatusARMGenerator() gopter.Gen {
	if deepCreatedOriginStatusARMGenerator != nil {
		return deepCreatedOriginStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginStatusARM(generators)
	deepCreatedOriginStatusARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginStatusARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginStatusARM(generators)
	deepCreatedOriginStatusARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_StatusARM{}), generators)

	return deepCreatedOriginStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginPropertiesStatusARMGenerator())
}

func Test_EndpointProperties_Status_DeliveryPolicyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_Status_DeliveryPolicyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointPropertiesStatusDeliveryPolicyARM, EndpointPropertiesStatusDeliveryPolicyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointPropertiesStatusDeliveryPolicyARM runs a test to see if a specific instance of EndpointProperties_Status_DeliveryPolicyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointPropertiesStatusDeliveryPolicyARM(subject EndpointProperties_Status_DeliveryPolicyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_Status_DeliveryPolicyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_Status_DeliveryPolicyARM instances for property testing - lazily instantiated by
// EndpointPropertiesStatusDeliveryPolicyARMGenerator()
var endpointPropertiesStatusDeliveryPolicyARMGenerator gopter.Gen

// EndpointPropertiesStatusDeliveryPolicyARMGenerator returns a generator of EndpointProperties_Status_DeliveryPolicyARM instances for property testing.
// We first initialize endpointPropertiesStatusDeliveryPolicyARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointPropertiesStatusDeliveryPolicyARMGenerator() gopter.Gen {
	if endpointPropertiesStatusDeliveryPolicyARMGenerator != nil {
		return endpointPropertiesStatusDeliveryPolicyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesStatusDeliveryPolicyARM(generators)
	endpointPropertiesStatusDeliveryPolicyARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_Status_DeliveryPolicyARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesStatusDeliveryPolicyARM(generators)
	AddRelatedPropertyGeneratorsForEndpointPropertiesStatusDeliveryPolicyARM(generators)
	endpointPropertiesStatusDeliveryPolicyARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_Status_DeliveryPolicyARM{}), generators)

	return endpointPropertiesStatusDeliveryPolicyARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointPropertiesStatusDeliveryPolicyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointPropertiesStatusDeliveryPolicyARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpointPropertiesStatusDeliveryPolicyARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointPropertiesStatusDeliveryPolicyARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(DeliveryRuleStatusARMGenerator())
}

func Test_EndpointProperties_Status_WebApplicationFirewallPolicyLinkARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_Status_WebApplicationFirewallPolicyLinkARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointPropertiesStatusWebApplicationFirewallPolicyLinkARM, EndpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointPropertiesStatusWebApplicationFirewallPolicyLinkARM runs a test to see if a specific instance of EndpointProperties_Status_WebApplicationFirewallPolicyLinkARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointPropertiesStatusWebApplicationFirewallPolicyLinkARM(subject EndpointProperties_Status_WebApplicationFirewallPolicyLinkARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_Status_WebApplicationFirewallPolicyLinkARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_Status_WebApplicationFirewallPolicyLinkARM instances for property testing - lazily
// instantiated by EndpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator()
var endpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator gopter.Gen

// EndpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator returns a generator of EndpointProperties_Status_WebApplicationFirewallPolicyLinkARM instances for property testing.
func EndpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator() gopter.Gen {
	if endpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator != nil {
		return endpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesStatusWebApplicationFirewallPolicyLinkARM(generators)
	endpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_Status_WebApplicationFirewallPolicyLinkARM{}), generators)

	return endpointPropertiesStatusWebApplicationFirewallPolicyLinkARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointPropertiesStatusWebApplicationFirewallPolicyLinkARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointPropertiesStatusWebApplicationFirewallPolicyLinkARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_GeoFilter_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GeoFilter_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGeoFilterStatusARM, GeoFilterStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGeoFilterStatusARM runs a test to see if a specific instance of GeoFilter_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGeoFilterStatusARM(subject GeoFilter_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GeoFilter_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GeoFilter_StatusARM instances for property testing - lazily instantiated by GeoFilterStatusARMGenerator()
var geoFilterStatusARMGenerator gopter.Gen

// GeoFilterStatusARMGenerator returns a generator of GeoFilter_StatusARM instances for property testing.
func GeoFilterStatusARMGenerator() gopter.Gen {
	if geoFilterStatusARMGenerator != nil {
		return geoFilterStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGeoFilterStatusARM(generators)
	geoFilterStatusARMGenerator = gen.Struct(reflect.TypeOf(GeoFilter_StatusARM{}), generators)

	return geoFilterStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForGeoFilterStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGeoFilterStatusARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(GeoFilterStatusAction_Allow, GeoFilterStatusAction_Block))
	gens["CountryCodes"] = gen.SliceOf(gen.AlphaString())
	gens["RelativePath"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReferenceStatusARM, ResourceReferenceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReferenceStatusARM runs a test to see if a specific instance of ResourceReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReferenceStatusARM(subject ResourceReference_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_StatusARM instances for property testing - lazily instantiated by
// ResourceReferenceStatusARMGenerator()
var resourceReferenceStatusARMGenerator gopter.Gen

// ResourceReferenceStatusARMGenerator returns a generator of ResourceReference_StatusARM instances for property testing.
func ResourceReferenceStatusARMGenerator() gopter.Gen {
	if resourceReferenceStatusARMGenerator != nil {
		return resourceReferenceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReferenceStatusARM(generators)
	resourceReferenceStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_StatusARM{}), generators)

	return resourceReferenceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReferenceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReferenceStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UrlSigningKey_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningKey_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningKeyStatusARM, UrlSigningKeyStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningKeyStatusARM runs a test to see if a specific instance of UrlSigningKey_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningKeyStatusARM(subject UrlSigningKey_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningKey_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningKey_StatusARM instances for property testing - lazily instantiated by
// UrlSigningKeyStatusARMGenerator()
var urlSigningKeyStatusARMGenerator gopter.Gen

// UrlSigningKeyStatusARMGenerator returns a generator of UrlSigningKey_StatusARM instances for property testing.
// We first initialize urlSigningKeyStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlSigningKeyStatusARMGenerator() gopter.Gen {
	if urlSigningKeyStatusARMGenerator != nil {
		return urlSigningKeyStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKeyStatusARM(generators)
	urlSigningKeyStatusARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKeyStatusARM(generators)
	AddRelatedPropertyGeneratorsForUrlSigningKeyStatusARM(generators)
	urlSigningKeyStatusARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_StatusARM{}), generators)

	return urlSigningKeyStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningKeyStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningKeyStatusARM(gens map[string]gopter.Gen) {
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUrlSigningKeyStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlSigningKeyStatusARM(gens map[string]gopter.Gen) {
	gens["KeySourceParameters"] = gen.PtrOf(KeyVaultSigningKeyParametersStatusARMGenerator())
}

func Test_DeepCreatedOriginGroupProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroupProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupPropertiesStatusARM, DeepCreatedOriginGroupPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupPropertiesStatusARM runs a test to see if a specific instance of DeepCreatedOriginGroupProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupPropertiesStatusARM(subject DeepCreatedOriginGroupProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroupProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroupProperties_StatusARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupPropertiesStatusARMGenerator()
var deepCreatedOriginGroupPropertiesStatusARMGenerator gopter.Gen

// DeepCreatedOriginGroupPropertiesStatusARMGenerator returns a generator of DeepCreatedOriginGroupProperties_StatusARM instances for property testing.
// We first initialize deepCreatedOriginGroupPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupPropertiesStatusARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupPropertiesStatusARMGenerator != nil {
		return deepCreatedOriginGroupPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesStatusARM(generators)
	deepCreatedOriginGroupPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupPropertiesStatusARM(generators)
	deepCreatedOriginGroupPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_StatusARM{}), generators)

	return deepCreatedOriginGroupPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["TrafficRestorationTimeToHealedOrNewEndpointsInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["HealthProbeSettings"] = gen.PtrOf(HealthProbeParametersStatusARMGenerator())
	gens["Origins"] = gen.SliceOf(ResourceReferenceStatusARMGenerator())
	gens["ResponseBasedOriginErrorDetectionSettings"] = gen.PtrOf(ResponseBasedOriginErrorDetectionParametersStatusARMGenerator())
}

func Test_DeepCreatedOriginProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginPropertiesStatusARM, DeepCreatedOriginPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginPropertiesStatusARM runs a test to see if a specific instance of DeepCreatedOriginProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginPropertiesStatusARM(subject DeepCreatedOriginProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginProperties_StatusARM instances for property testing - lazily instantiated by
// DeepCreatedOriginPropertiesStatusARMGenerator()
var deepCreatedOriginPropertiesStatusARMGenerator gopter.Gen

// DeepCreatedOriginPropertiesStatusARMGenerator returns a generator of DeepCreatedOriginProperties_StatusARM instances for property testing.
func DeepCreatedOriginPropertiesStatusARMGenerator() gopter.Gen {
	if deepCreatedOriginPropertiesStatusARMGenerator != nil {
		return deepCreatedOriginPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginPropertiesStatusARM(generators)
	deepCreatedOriginPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginProperties_StatusARM{}), generators)

	return deepCreatedOriginPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["PrivateEndpointStatus"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointStatus_Status_Approved,
		PrivateEndpointStatus_Status_Disconnected,
		PrivateEndpointStatus_Status_Pending,
		PrivateEndpointStatus_Status_Rejected,
		PrivateEndpointStatus_Status_Timeout))
	gens["PrivateLinkAlias"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkApprovalMessage"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

func Test_DeliveryRule_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRule_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleStatusARM, DeliveryRuleStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleStatusARM runs a test to see if a specific instance of DeliveryRule_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleStatusARM(subject DeliveryRule_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRule_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRule_StatusARM instances for property testing - lazily instantiated by
// DeliveryRuleStatusARMGenerator()
var deliveryRuleStatusARMGenerator gopter.Gen

// DeliveryRuleStatusARMGenerator returns a generator of DeliveryRule_StatusARM instances for property testing.
// We first initialize deliveryRuleStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleStatusARMGenerator() gopter.Gen {
	if deliveryRuleStatusARMGenerator != nil {
		return deliveryRuleStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleStatusARM(generators)
	deliveryRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleStatusARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleStatusARM(generators)
	deliveryRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_StatusARM{}), generators)

	return deliveryRuleStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Order"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeliveryRuleStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(DeliveryRuleActionStatusARMGenerator())
	gens["Conditions"] = gen.SliceOf(DeliveryRuleConditionStatusARMGenerator())
}

func Test_KeyVaultSigningKeyParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultSigningKeyParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultSigningKeyParametersStatusARM, KeyVaultSigningKeyParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultSigningKeyParametersStatusARM runs a test to see if a specific instance of KeyVaultSigningKeyParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultSigningKeyParametersStatusARM(subject KeyVaultSigningKeyParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultSigningKeyParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultSigningKeyParameters_StatusARM instances for property testing - lazily instantiated by
// KeyVaultSigningKeyParametersStatusARMGenerator()
var keyVaultSigningKeyParametersStatusARMGenerator gopter.Gen

// KeyVaultSigningKeyParametersStatusARMGenerator returns a generator of KeyVaultSigningKeyParameters_StatusARM instances for property testing.
func KeyVaultSigningKeyParametersStatusARMGenerator() gopter.Gen {
	if keyVaultSigningKeyParametersStatusARMGenerator != nil {
		return keyVaultSigningKeyParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParametersStatusARM(generators)
	keyVaultSigningKeyParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultSigningKeyParameters_StatusARM{}), generators)

	return keyVaultSigningKeyParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParametersStatusARM(gens map[string]gopter.Gen) {
	gens["ResourceGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretVersion"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(KeyVaultSigningKeyParametersStatusTypeName_KeyVaultSigningKeyParameters))
	gens["VaultName"] = gen.PtrOf(gen.AlphaString())
}

func Test_DeliveryRuleAction_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleAction_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleActionStatusARM, DeliveryRuleActionStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleActionStatusARM runs a test to see if a specific instance of DeliveryRuleAction_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleActionStatusARM(subject DeliveryRuleAction_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleAction_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleAction_StatusARM instances for property testing - lazily instantiated by
// DeliveryRuleActionStatusARMGenerator()
var deliveryRuleActionStatusARMGenerator gopter.Gen

// DeliveryRuleActionStatusARMGenerator returns a generator of DeliveryRuleAction_StatusARM instances for property testing.
func DeliveryRuleActionStatusARMGenerator() gopter.Gen {
	if deliveryRuleActionStatusARMGenerator != nil {
		return deliveryRuleActionStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleActionStatusARM(generators)
	deliveryRuleActionStatusARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleAction_StatusARM{}), generators)

	return deliveryRuleActionStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleActionStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleActionStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleActionStatusName_CacheExpiration,
		DeliveryRuleActionStatusName_CacheKeyQueryString,
		DeliveryRuleActionStatusName_ModifyRequestHeader,
		DeliveryRuleActionStatusName_ModifyResponseHeader,
		DeliveryRuleActionStatusName_OriginGroupOverride,
		DeliveryRuleActionStatusName_RouteConfigurationOverride,
		DeliveryRuleActionStatusName_UrlRedirect,
		DeliveryRuleActionStatusName_UrlRewrite,
		DeliveryRuleActionStatusName_UrlSigning))
}

func Test_DeliveryRuleCondition_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleCondition_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleConditionStatusARM, DeliveryRuleConditionStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleConditionStatusARM runs a test to see if a specific instance of DeliveryRuleCondition_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleConditionStatusARM(subject DeliveryRuleCondition_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleCondition_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleCondition_StatusARM instances for property testing - lazily instantiated by
// DeliveryRuleConditionStatusARMGenerator()
var deliveryRuleConditionStatusARMGenerator gopter.Gen

// DeliveryRuleConditionStatusARMGenerator returns a generator of DeliveryRuleCondition_StatusARM instances for property testing.
func DeliveryRuleConditionStatusARMGenerator() gopter.Gen {
	if deliveryRuleConditionStatusARMGenerator != nil {
		return deliveryRuleConditionStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleConditionStatusARM(generators)
	deliveryRuleConditionStatusARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCondition_StatusARM{}), generators)

	return deliveryRuleConditionStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleConditionStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleConditionStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleConditionStatusName_ClientPort,
		DeliveryRuleConditionStatusName_Cookies,
		DeliveryRuleConditionStatusName_HostName,
		DeliveryRuleConditionStatusName_HttpVersion,
		DeliveryRuleConditionStatusName_IsDevice,
		DeliveryRuleConditionStatusName_PostArgs,
		DeliveryRuleConditionStatusName_QueryString,
		DeliveryRuleConditionStatusName_RemoteAddress,
		DeliveryRuleConditionStatusName_RequestBody,
		DeliveryRuleConditionStatusName_RequestHeader,
		DeliveryRuleConditionStatusName_RequestMethod,
		DeliveryRuleConditionStatusName_RequestScheme,
		DeliveryRuleConditionStatusName_RequestUri,
		DeliveryRuleConditionStatusName_ServerPort,
		DeliveryRuleConditionStatusName_SocketAddr,
		DeliveryRuleConditionStatusName_SslProtocol,
		DeliveryRuleConditionStatusName_UrlFileExtension,
		DeliveryRuleConditionStatusName_UrlFileName,
		DeliveryRuleConditionStatusName_UrlPath))
}

func Test_HealthProbeParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HealthProbeParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHealthProbeParametersStatusARM, HealthProbeParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHealthProbeParametersStatusARM runs a test to see if a specific instance of HealthProbeParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHealthProbeParametersStatusARM(subject HealthProbeParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HealthProbeParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HealthProbeParameters_StatusARM instances for property testing - lazily instantiated by
// HealthProbeParametersStatusARMGenerator()
var healthProbeParametersStatusARMGenerator gopter.Gen

// HealthProbeParametersStatusARMGenerator returns a generator of HealthProbeParameters_StatusARM instances for property testing.
func HealthProbeParametersStatusARMGenerator() gopter.Gen {
	if healthProbeParametersStatusARMGenerator != nil {
		return healthProbeParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHealthProbeParametersStatusARM(generators)
	healthProbeParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(HealthProbeParameters_StatusARM{}), generators)

	return healthProbeParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForHealthProbeParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHealthProbeParametersStatusARM(gens map[string]gopter.Gen) {
	gens["ProbeIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbeProtocol"] = gen.PtrOf(gen.OneConstOf(HealthProbeParametersStatusProbeProtocol_Http, HealthProbeParametersStatusProbeProtocol_Https, HealthProbeParametersStatusProbeProtocol_NotSet))
	gens["ProbeRequestType"] = gen.PtrOf(gen.OneConstOf(HealthProbeParametersStatusProbeRequestType_GET, HealthProbeParametersStatusProbeRequestType_HEAD, HealthProbeParametersStatusProbeRequestType_NotSet))
}

func Test_ResponseBasedOriginErrorDetectionParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResponseBasedOriginErrorDetectionParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResponseBasedOriginErrorDetectionParametersStatusARM, ResponseBasedOriginErrorDetectionParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResponseBasedOriginErrorDetectionParametersStatusARM runs a test to see if a specific instance of ResponseBasedOriginErrorDetectionParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResponseBasedOriginErrorDetectionParametersStatusARM(subject ResponseBasedOriginErrorDetectionParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResponseBasedOriginErrorDetectionParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResponseBasedOriginErrorDetectionParameters_StatusARM instances for property testing - lazily
// instantiated by ResponseBasedOriginErrorDetectionParametersStatusARMGenerator()
var responseBasedOriginErrorDetectionParametersStatusARMGenerator gopter.Gen

// ResponseBasedOriginErrorDetectionParametersStatusARMGenerator returns a generator of ResponseBasedOriginErrorDetectionParameters_StatusARM instances for property testing.
// We first initialize responseBasedOriginErrorDetectionParametersStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResponseBasedOriginErrorDetectionParametersStatusARMGenerator() gopter.Gen {
	if responseBasedOriginErrorDetectionParametersStatusARMGenerator != nil {
		return responseBasedOriginErrorDetectionParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersStatusARM(generators)
	responseBasedOriginErrorDetectionParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersStatusARM(generators)
	AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersStatusARM(generators)
	responseBasedOriginErrorDetectionParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_StatusARM{}), generators)

	return responseBasedOriginErrorDetectionParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersStatusARM(gens map[string]gopter.Gen) {
	gens["ResponseBasedDetectedErrorTypes"] = gen.PtrOf(gen.OneConstOf(ResponseBasedOriginErrorDetectionParametersStatusResponseBasedDetectedErrorTypes_None, ResponseBasedOriginErrorDetectionParametersStatusResponseBasedDetectedErrorTypes_TcpAndHttpErrors, ResponseBasedOriginErrorDetectionParametersStatusResponseBasedDetectedErrorTypes_TcpErrorsOnly))
	gens["ResponseBasedFailoverThresholdPercentage"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersStatusARM(gens map[string]gopter.Gen) {
	gens["HttpErrorRanges"] = gen.SliceOf(HttpErrorRangeParametersStatusARMGenerator())
}

func Test_HttpErrorRangeParameters_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpErrorRangeParameters_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpErrorRangeParametersStatusARM, HttpErrorRangeParametersStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpErrorRangeParametersStatusARM runs a test to see if a specific instance of HttpErrorRangeParameters_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpErrorRangeParametersStatusARM(subject HttpErrorRangeParameters_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpErrorRangeParameters_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpErrorRangeParameters_StatusARM instances for property testing - lazily instantiated by
// HttpErrorRangeParametersStatusARMGenerator()
var httpErrorRangeParametersStatusARMGenerator gopter.Gen

// HttpErrorRangeParametersStatusARMGenerator returns a generator of HttpErrorRangeParameters_StatusARM instances for property testing.
func HttpErrorRangeParametersStatusARMGenerator() gopter.Gen {
	if httpErrorRangeParametersStatusARMGenerator != nil {
		return httpErrorRangeParametersStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpErrorRangeParametersStatusARM(generators)
	httpErrorRangeParametersStatusARMGenerator = gen.Struct(reflect.TypeOf(HttpErrorRangeParameters_StatusARM{}), generators)

	return httpErrorRangeParametersStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpErrorRangeParametersStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpErrorRangeParametersStatusARM(gens map[string]gopter.Gen) {
	gens["Begin"] = gen.PtrOf(gen.Int())
	gens["End"] = gen.PtrOf(gen.Int())
}
