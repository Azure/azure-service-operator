// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ProfilesEndpoint_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProfilesEndpoint_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfilesEndpoint_STATUSARM, ProfilesEndpoint_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfilesEndpoint_STATUSARM runs a test to see if a specific instance of ProfilesEndpoint_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfilesEndpoint_STATUSARM(subject ProfilesEndpoint_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProfilesEndpoint_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProfilesEndpoint_STATUSARM instances for property testing - lazily instantiated by
// ProfilesEndpoint_STATUSARMGenerator()
var profilesEndpoint_STATUSARMGenerator gopter.Gen

// ProfilesEndpoint_STATUSARMGenerator returns a generator of ProfilesEndpoint_STATUSARM instances for property testing.
// We first initialize profilesEndpoint_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ProfilesEndpoint_STATUSARMGenerator() gopter.Gen {
	if profilesEndpoint_STATUSARMGenerator != nil {
		return profilesEndpoint_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfilesEndpoint_STATUSARM(generators)
	profilesEndpoint_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ProfilesEndpoint_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfilesEndpoint_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForProfilesEndpoint_STATUSARM(generators)
	profilesEndpoint_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ProfilesEndpoint_STATUSARM{}), generators)

	return profilesEndpoint_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForProfilesEndpoint_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfilesEndpoint_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProfilesEndpoint_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfilesEndpoint_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EndpointProperties_STATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_EndpointProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_STATUSARM, EndpointProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_STATUSARM runs a test to see if a specific instance of EndpointProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_STATUSARM(subject EndpointProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUSARM instances for property testing - lazily instantiated by
// EndpointProperties_STATUSARMGenerator()
var endpointProperties_STATUSARMGenerator gopter.Gen

// EndpointProperties_STATUSARMGenerator returns a generator of EndpointProperties_STATUSARM instances for property testing.
// We first initialize endpointProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_STATUSARMGenerator() gopter.Gen {
	if endpointProperties_STATUSARMGenerator != nil {
		return endpointProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUSARM(generators)
	endpointProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_STATUSARM(generators)
	endpointProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUSARM{}), generators)

	return endpointProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ContentTypesToCompress"] = gen.SliceOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsHttpAllowed"] = gen.PtrOf(gen.Bool())
	gens["IsHttpsAllowed"] = gen.PtrOf(gen.Bool())
	gens["OptimizationType"] = gen.PtrOf(gen.OneConstOf(
		OptimizationType_DynamicSiteAcceleration_STATUS,
		OptimizationType_GeneralMediaStreaming_STATUS,
		OptimizationType_GeneralWebDelivery_STATUS,
		OptimizationType_LargeFileDownload_STATUS,
		OptimizationType_VideoOnDemandMediaStreaming_STATUS))
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["OriginPath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_ProvisioningState_Creating_STATUS,
		EndpointProperties_ProvisioningState_Deleting_STATUS,
		EndpointProperties_ProvisioningState_Failed_STATUS,
		EndpointProperties_ProvisioningState_Succeeded_STATUS,
		EndpointProperties_ProvisioningState_Updating_STATUS))
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		QueryStringCachingBehavior_BypassCaching_STATUS,
		QueryStringCachingBehavior_IgnoreQueryString_STATUS,
		QueryStringCachingBehavior_NotSet_STATUS,
		QueryStringCachingBehavior_UseQueryString_STATUS))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_ResourceState_Creating_STATUS,
		EndpointProperties_ResourceState_Deleting_STATUS,
		EndpointProperties_ResourceState_Running_STATUS,
		EndpointProperties_ResourceState_Starting_STATUS,
		EndpointProperties_ResourceState_Stopped_STATUS,
		EndpointProperties_ResourceState_Stopping_STATUS))
}

// AddRelatedPropertyGeneratorsForEndpointProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["CustomDomains"] = gen.SliceOf(CustomDomain_STATUSARMGenerator())
	gens["DefaultOriginGroup"] = gen.PtrOf(ResourceReference_STATUSARMGenerator())
	gens["DeliveryPolicy"] = gen.PtrOf(EndpointProperties_DeliveryPolicy_STATUSARMGenerator())
	gens["GeoFilters"] = gen.SliceOf(GeoFilter_STATUSARMGenerator())
	gens["OriginGroups"] = gen.SliceOf(DeepCreatedOriginGroup_STATUSARMGenerator())
	gens["Origins"] = gen.SliceOf(DeepCreatedOrigin_STATUSARMGenerator())
	gens["UrlSigningKeys"] = gen.SliceOf(UrlSigningKey_STATUSARMGenerator())
	gens["WebApplicationFirewallPolicyLink"] = gen.PtrOf(EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator())
}

func Test_CustomDomain_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomain_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomain_STATUSARM, CustomDomain_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomain_STATUSARM runs a test to see if a specific instance of CustomDomain_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomain_STATUSARM(subject CustomDomain_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomain_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomain_STATUSARM instances for property testing - lazily instantiated by
// CustomDomain_STATUSARMGenerator()
var customDomain_STATUSARMGenerator gopter.Gen

// CustomDomain_STATUSARMGenerator returns a generator of CustomDomain_STATUSARM instances for property testing.
// We first initialize customDomain_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomDomain_STATUSARMGenerator() gopter.Gen {
	if customDomain_STATUSARMGenerator != nil {
		return customDomain_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomain_STATUSARM(generators)
	customDomain_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomain_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForCustomDomain_STATUSARM(generators)
	customDomain_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_STATUSARM{}), generators)

	return customDomain_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomain_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomain_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomDomain_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomDomain_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(CustomDomainProperties_STATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_DeepCreatedOriginGroup_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroup_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroup_STATUSARM, DeepCreatedOriginGroup_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroup_STATUSARM runs a test to see if a specific instance of DeepCreatedOriginGroup_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroup_STATUSARM(subject DeepCreatedOriginGroup_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroup_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroup_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroup_STATUSARMGenerator()
var deepCreatedOriginGroup_STATUSARMGenerator gopter.Gen

// DeepCreatedOriginGroup_STATUSARMGenerator returns a generator of DeepCreatedOriginGroup_STATUSARM instances for property testing.
// We first initialize deepCreatedOriginGroup_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroup_STATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginGroup_STATUSARMGenerator != nil {
		return deepCreatedOriginGroup_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(generators)
	deepCreatedOriginGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(generators)
	deepCreatedOriginGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUSARM{}), generators)

	return deepCreatedOriginGroup_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginGroupProperties_STATUSARMGenerator())
}

func Test_DeepCreatedOrigin_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOrigin_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOrigin_STATUSARM, DeepCreatedOrigin_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOrigin_STATUSARM runs a test to see if a specific instance of DeepCreatedOrigin_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOrigin_STATUSARM(subject DeepCreatedOrigin_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOrigin_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOrigin_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOrigin_STATUSARMGenerator()
var deepCreatedOrigin_STATUSARMGenerator gopter.Gen

// DeepCreatedOrigin_STATUSARMGenerator returns a generator of DeepCreatedOrigin_STATUSARM instances for property testing.
// We first initialize deepCreatedOrigin_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOrigin_STATUSARMGenerator() gopter.Gen {
	if deepCreatedOrigin_STATUSARMGenerator != nil {
		return deepCreatedOrigin_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(generators)
	deepCreatedOrigin_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(generators)
	deepCreatedOrigin_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUSARM{}), generators)

	return deepCreatedOrigin_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginProperties_STATUSARMGenerator())
}

func Test_EndpointProperties_DeliveryPolicy_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_DeliveryPolicy_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_DeliveryPolicy_STATUSARM, EndpointProperties_DeliveryPolicy_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_DeliveryPolicy_STATUSARM runs a test to see if a specific instance of EndpointProperties_DeliveryPolicy_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_DeliveryPolicy_STATUSARM(subject EndpointProperties_DeliveryPolicy_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_DeliveryPolicy_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_DeliveryPolicy_STATUSARM instances for property testing - lazily instantiated by
// EndpointProperties_DeliveryPolicy_STATUSARMGenerator()
var endpointProperties_DeliveryPolicy_STATUSARMGenerator gopter.Gen

// EndpointProperties_DeliveryPolicy_STATUSARMGenerator returns a generator of EndpointProperties_DeliveryPolicy_STATUSARM instances for property testing.
// We first initialize endpointProperties_DeliveryPolicy_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_DeliveryPolicy_STATUSARMGenerator() gopter.Gen {
	if endpointProperties_DeliveryPolicy_STATUSARMGenerator != nil {
		return endpointProperties_DeliveryPolicy_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUSARM(generators)
	endpointProperties_DeliveryPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_DeliveryPolicy_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUSARM(generators)
	endpointProperties_DeliveryPolicy_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_DeliveryPolicy_STATUSARM{}), generators)

	return endpointProperties_DeliveryPolicy_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUSARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(DeliveryRule_STATUSARMGenerator())
}

func Test_EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM, EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM runs a test to see if a specific instance of EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM(subject EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM instances for property testing - lazily
// instantiated by EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator()
var endpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator gopter.Gen

// EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator returns a generator of EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM instances for property testing.
func EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator() gopter.Gen {
	if endpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator != nil {
		return endpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM(generators)
	endpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM{}), generators)

	return endpointProperties_WebApplicationFirewallPolicyLink_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLink_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_GeoFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GeoFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGeoFilter_STATUSARM, GeoFilter_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGeoFilter_STATUSARM runs a test to see if a specific instance of GeoFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGeoFilter_STATUSARM(subject GeoFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GeoFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GeoFilter_STATUSARM instances for property testing - lazily instantiated by
// GeoFilter_STATUSARMGenerator()
var geoFilter_STATUSARMGenerator gopter.Gen

// GeoFilter_STATUSARMGenerator returns a generator of GeoFilter_STATUSARM instances for property testing.
func GeoFilter_STATUSARMGenerator() gopter.Gen {
	if geoFilter_STATUSARMGenerator != nil {
		return geoFilter_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGeoFilter_STATUSARM(generators)
	geoFilter_STATUSARMGenerator = gen.Struct(reflect.TypeOf(GeoFilter_STATUSARM{}), generators)

	return geoFilter_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForGeoFilter_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGeoFilter_STATUSARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(GeoFilter_Action_Allow_STATUS, GeoFilter_Action_Block_STATUS))
	gens["CountryCodes"] = gen.SliceOf(gen.AlphaString())
	gens["RelativePath"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceReference_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_STATUSARM, ResourceReference_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_STATUSARM runs a test to see if a specific instance of ResourceReference_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_STATUSARM(subject ResourceReference_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_STATUSARM instances for property testing - lazily instantiated by
// ResourceReference_STATUSARMGenerator()
var resourceReference_STATUSARMGenerator gopter.Gen

// ResourceReference_STATUSARMGenerator returns a generator of ResourceReference_STATUSARM instances for property testing.
func ResourceReference_STATUSARMGenerator() gopter.Gen {
	if resourceReference_STATUSARMGenerator != nil {
		return resourceReference_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_STATUSARM(generators)
	resourceReference_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_STATUSARM{}), generators)

	return resourceReference_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UrlSigningKey_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningKey_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningKey_STATUSARM, UrlSigningKey_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningKey_STATUSARM runs a test to see if a specific instance of UrlSigningKey_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningKey_STATUSARM(subject UrlSigningKey_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningKey_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningKey_STATUSARM instances for property testing - lazily instantiated by
// UrlSigningKey_STATUSARMGenerator()
var urlSigningKey_STATUSARMGenerator gopter.Gen

// UrlSigningKey_STATUSARMGenerator returns a generator of UrlSigningKey_STATUSARM instances for property testing.
// We first initialize urlSigningKey_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlSigningKey_STATUSARMGenerator() gopter.Gen {
	if urlSigningKey_STATUSARMGenerator != nil {
		return urlSigningKey_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKey_STATUSARM(generators)
	urlSigningKey_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKey_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForUrlSigningKey_STATUSARM(generators)
	urlSigningKey_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUSARM{}), generators)

	return urlSigningKey_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningKey_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningKey_STATUSARM(gens map[string]gopter.Gen) {
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUrlSigningKey_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlSigningKey_STATUSARM(gens map[string]gopter.Gen) {
	gens["KeySourceParameters"] = gen.PtrOf(KeyVaultSigningKeyParameters_STATUSARMGenerator())
}

func Test_CustomDomainProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomainProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomainProperties_STATUSARM, CustomDomainProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomainProperties_STATUSARM runs a test to see if a specific instance of CustomDomainProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomainProperties_STATUSARM(subject CustomDomainProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomainProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomainProperties_STATUSARM instances for property testing - lazily instantiated by
// CustomDomainProperties_STATUSARMGenerator()
var customDomainProperties_STATUSARMGenerator gopter.Gen

// CustomDomainProperties_STATUSARMGenerator returns a generator of CustomDomainProperties_STATUSARM instances for property testing.
// We first initialize customDomainProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomDomainProperties_STATUSARMGenerator() gopter.Gen {
	if customDomainProperties_STATUSARMGenerator != nil {
		return customDomainProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainProperties_STATUSARM(generators)
	customDomainProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CustomDomainProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForCustomDomainProperties_STATUSARM(generators)
	customDomainProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CustomDomainProperties_STATUSARM{}), generators)

	return customDomainProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomainProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomainProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["CustomHttpsProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		CustomDomainProperties_CustomHttpsProvisioningState_Disabled_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningState_Disabling_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningState_Enabled_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningState_Enabling_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningState_Failed_STATUS))
	gens["CustomHttpsProvisioningSubstate"] = gen.PtrOf(gen.OneConstOf(
		CustomDomainProperties_CustomHttpsProvisioningSubstate_CertificateDeleted_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningSubstate_CertificateDeployed_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningSubstate_DeletingCertificate_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningSubstate_DeployingCertificate_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningSubstate_DomainControlValidationRequestApproved_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningSubstate_DomainControlValidationRequestRejected_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningSubstate_DomainControlValidationRequestTimedOut_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningSubstate_IssuingCertificate_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningSubstate_PendingDomainControlValidationREquestApproval_STATUS,
		CustomDomainProperties_CustomHttpsProvisioningSubstate_SubmittingDomainControlValidationRequest_STATUS))
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		CustomDomainProperties_ProvisioningState_Disabled_STATUS,
		CustomDomainProperties_ProvisioningState_Disabling_STATUS,
		CustomDomainProperties_ProvisioningState_Enabled_STATUS,
		CustomDomainProperties_ProvisioningState_Enabling_STATUS,
		CustomDomainProperties_ProvisioningState_Failed_STATUS))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(CustomDomainProperties_ResourceState_Active_STATUS, CustomDomainProperties_ResourceState_Creating_STATUS, CustomDomainProperties_ResourceState_Deleting_STATUS))
	gens["ValidationData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomDomainProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomDomainProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["CustomHttpsParameters"] = gen.PtrOf(CustomDomainHttpsParameters_STATUSARMGenerator())
}

func Test_DeepCreatedOriginGroupProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroupProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUSARM, DeepCreatedOriginGroupProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUSARM runs a test to see if a specific instance of DeepCreatedOriginGroupProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUSARM(subject DeepCreatedOriginGroupProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroupProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroupProperties_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupProperties_STATUSARMGenerator()
var deepCreatedOriginGroupProperties_STATUSARMGenerator gopter.Gen

// DeepCreatedOriginGroupProperties_STATUSARMGenerator returns a generator of DeepCreatedOriginGroupProperties_STATUSARM instances for property testing.
// We first initialize deepCreatedOriginGroupProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupProperties_STATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupProperties_STATUSARMGenerator != nil {
		return deepCreatedOriginGroupProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(generators)
	deepCreatedOriginGroupProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(generators)
	deepCreatedOriginGroupProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUSARM{}), generators)

	return deepCreatedOriginGroupProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["TrafficRestorationTimeToHealedOrNewEndpointsInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["HealthProbeSettings"] = gen.PtrOf(HealthProbeParameters_STATUSARMGenerator())
	gens["Origins"] = gen.SliceOf(ResourceReference_STATUSARMGenerator())
	gens["ResponseBasedOriginErrorDetectionSettings"] = gen.PtrOf(ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator())
}

func Test_DeepCreatedOriginProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginProperties_STATUSARM, DeepCreatedOriginProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginProperties_STATUSARM runs a test to see if a specific instance of DeepCreatedOriginProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginProperties_STATUSARM(subject DeepCreatedOriginProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginProperties_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginProperties_STATUSARMGenerator()
var deepCreatedOriginProperties_STATUSARMGenerator gopter.Gen

// DeepCreatedOriginProperties_STATUSARMGenerator returns a generator of DeepCreatedOriginProperties_STATUSARM instances for property testing.
func DeepCreatedOriginProperties_STATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginProperties_STATUSARMGenerator != nil {
		return deepCreatedOriginProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUSARM(generators)
	deepCreatedOriginProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginProperties_STATUSARM{}), generators)

	return deepCreatedOriginProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["PrivateEndpointStatus"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointStatus_Approved_STATUS,
		PrivateEndpointStatus_Disconnected_STATUS,
		PrivateEndpointStatus_Pending_STATUS,
		PrivateEndpointStatus_Rejected_STATUS,
		PrivateEndpointStatus_Timeout_STATUS))
	gens["PrivateLinkAlias"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkApprovalMessage"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

func Test_DeliveryRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRule_STATUSARM, DeliveryRule_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRule_STATUSARM runs a test to see if a specific instance of DeliveryRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRule_STATUSARM(subject DeliveryRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRule_STATUSARM instances for property testing - lazily instantiated by
// DeliveryRule_STATUSARMGenerator()
var deliveryRule_STATUSARMGenerator gopter.Gen

// DeliveryRule_STATUSARMGenerator returns a generator of DeliveryRule_STATUSARM instances for property testing.
// We first initialize deliveryRule_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRule_STATUSARMGenerator() gopter.Gen {
	if deliveryRule_STATUSARMGenerator != nil {
		return deliveryRule_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRule_STATUSARM(generators)
	deliveryRule_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRule_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRule_STATUSARM(generators)
	deliveryRule_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUSARM{}), generators)

	return deliveryRule_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRule_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Order"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeliveryRule_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(DeliveryRuleAction_STATUSARMGenerator())
	gens["Conditions"] = gen.SliceOf(DeliveryRuleCondition_STATUSARMGenerator())
}

func Test_KeyVaultSigningKeyParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultSigningKeyParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUSARM, KeyVaultSigningKeyParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUSARM runs a test to see if a specific instance of KeyVaultSigningKeyParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUSARM(subject KeyVaultSigningKeyParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultSigningKeyParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultSigningKeyParameters_STATUSARM instances for property testing - lazily instantiated by
// KeyVaultSigningKeyParameters_STATUSARMGenerator()
var keyVaultSigningKeyParameters_STATUSARMGenerator gopter.Gen

// KeyVaultSigningKeyParameters_STATUSARMGenerator returns a generator of KeyVaultSigningKeyParameters_STATUSARM instances for property testing.
func KeyVaultSigningKeyParameters_STATUSARMGenerator() gopter.Gen {
	if keyVaultSigningKeyParameters_STATUSARMGenerator != nil {
		return keyVaultSigningKeyParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUSARM(generators)
	keyVaultSigningKeyParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultSigningKeyParameters_STATUSARM{}), generators)

	return keyVaultSigningKeyParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["ResourceGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretVersion"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(KeyVaultSigningKeyParameters_TypeName_KeyVaultSigningKeyParameters_STATUS))
	gens["VaultName"] = gen.PtrOf(gen.AlphaString())
}

func Test_CustomDomainHttpsParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomainHttpsParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomainHttpsParameters_STATUSARM, CustomDomainHttpsParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomainHttpsParameters_STATUSARM runs a test to see if a specific instance of CustomDomainHttpsParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomainHttpsParameters_STATUSARM(subject CustomDomainHttpsParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomainHttpsParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomainHttpsParameters_STATUSARM instances for property testing - lazily instantiated by
// CustomDomainHttpsParameters_STATUSARMGenerator()
var customDomainHttpsParameters_STATUSARMGenerator gopter.Gen

// CustomDomainHttpsParameters_STATUSARMGenerator returns a generator of CustomDomainHttpsParameters_STATUSARM instances for property testing.
func CustomDomainHttpsParameters_STATUSARMGenerator() gopter.Gen {
	if customDomainHttpsParameters_STATUSARMGenerator != nil {
		return customDomainHttpsParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainHttpsParameters_STATUSARM(generators)
	customDomainHttpsParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(CustomDomainHttpsParameters_STATUSARM{}), generators)

	return customDomainHttpsParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomainHttpsParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomainHttpsParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["CertificateSource"] = gen.PtrOf(gen.OneConstOf(CustomDomainHttpsParameters_CertificateSource_AzureKeyVault_STATUS, CustomDomainHttpsParameters_CertificateSource_Cdn_STATUS))
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(CustomDomainHttpsParameters_MinimumTlsVersion_None_STATUS, CustomDomainHttpsParameters_MinimumTlsVersion_TLS10_STATUS, CustomDomainHttpsParameters_MinimumTlsVersion_TLS12_STATUS))
	gens["ProtocolType"] = gen.PtrOf(gen.OneConstOf(CustomDomainHttpsParameters_ProtocolType_IPBased_STATUS, CustomDomainHttpsParameters_ProtocolType_ServerNameIndication_STATUS))
}

func Test_DeliveryRuleAction_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleAction_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleAction_STATUSARM, DeliveryRuleAction_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleAction_STATUSARM runs a test to see if a specific instance of DeliveryRuleAction_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleAction_STATUSARM(subject DeliveryRuleAction_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleAction_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleAction_STATUSARM instances for property testing - lazily instantiated by
// DeliveryRuleAction_STATUSARMGenerator()
var deliveryRuleAction_STATUSARMGenerator gopter.Gen

// DeliveryRuleAction_STATUSARMGenerator returns a generator of DeliveryRuleAction_STATUSARM instances for property testing.
func DeliveryRuleAction_STATUSARMGenerator() gopter.Gen {
	if deliveryRuleAction_STATUSARMGenerator != nil {
		return deliveryRuleAction_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleAction_STATUSARM(generators)
	deliveryRuleAction_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleAction_STATUSARM{}), generators)

	return deliveryRuleAction_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleAction_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleAction_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleAction_Name_CacheExpiration_STATUS,
		DeliveryRuleAction_Name_CacheKeyQueryString_STATUS,
		DeliveryRuleAction_Name_ModifyRequestHeader_STATUS,
		DeliveryRuleAction_Name_ModifyResponseHeader_STATUS,
		DeliveryRuleAction_Name_OriginGroupOverride_STATUS,
		DeliveryRuleAction_Name_RouteConfigurationOverride_STATUS,
		DeliveryRuleAction_Name_UrlRedirect_STATUS,
		DeliveryRuleAction_Name_UrlRewrite_STATUS,
		DeliveryRuleAction_Name_UrlSigning_STATUS))
}

func Test_DeliveryRuleCondition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleCondition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleCondition_STATUSARM, DeliveryRuleCondition_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleCondition_STATUSARM runs a test to see if a specific instance of DeliveryRuleCondition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleCondition_STATUSARM(subject DeliveryRuleCondition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleCondition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleCondition_STATUSARM instances for property testing - lazily instantiated by
// DeliveryRuleCondition_STATUSARMGenerator()
var deliveryRuleCondition_STATUSARMGenerator gopter.Gen

// DeliveryRuleCondition_STATUSARMGenerator returns a generator of DeliveryRuleCondition_STATUSARM instances for property testing.
func DeliveryRuleCondition_STATUSARMGenerator() gopter.Gen {
	if deliveryRuleCondition_STATUSARMGenerator != nil {
		return deliveryRuleCondition_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleCondition_STATUSARM(generators)
	deliveryRuleCondition_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCondition_STATUSARM{}), generators)

	return deliveryRuleCondition_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleCondition_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleCondition_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleCondition_Name_ClientPort_STATUS,
		DeliveryRuleCondition_Name_Cookies_STATUS,
		DeliveryRuleCondition_Name_HostName_STATUS,
		DeliveryRuleCondition_Name_HttpVersion_STATUS,
		DeliveryRuleCondition_Name_IsDevice_STATUS,
		DeliveryRuleCondition_Name_PostArgs_STATUS,
		DeliveryRuleCondition_Name_QueryString_STATUS,
		DeliveryRuleCondition_Name_RemoteAddress_STATUS,
		DeliveryRuleCondition_Name_RequestBody_STATUS,
		DeliveryRuleCondition_Name_RequestHeader_STATUS,
		DeliveryRuleCondition_Name_RequestMethod_STATUS,
		DeliveryRuleCondition_Name_RequestScheme_STATUS,
		DeliveryRuleCondition_Name_RequestUri_STATUS,
		DeliveryRuleCondition_Name_ServerPort_STATUS,
		DeliveryRuleCondition_Name_SocketAddr_STATUS,
		DeliveryRuleCondition_Name_SslProtocol_STATUS,
		DeliveryRuleCondition_Name_UrlFileExtension_STATUS,
		DeliveryRuleCondition_Name_UrlFileName_STATUS,
		DeliveryRuleCondition_Name_UrlPath_STATUS))
}

func Test_HealthProbeParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HealthProbeParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHealthProbeParameters_STATUSARM, HealthProbeParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHealthProbeParameters_STATUSARM runs a test to see if a specific instance of HealthProbeParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHealthProbeParameters_STATUSARM(subject HealthProbeParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HealthProbeParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HealthProbeParameters_STATUSARM instances for property testing - lazily instantiated by
// HealthProbeParameters_STATUSARMGenerator()
var healthProbeParameters_STATUSARMGenerator gopter.Gen

// HealthProbeParameters_STATUSARMGenerator returns a generator of HealthProbeParameters_STATUSARM instances for property testing.
func HealthProbeParameters_STATUSARMGenerator() gopter.Gen {
	if healthProbeParameters_STATUSARMGenerator != nil {
		return healthProbeParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUSARM(generators)
	healthProbeParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(HealthProbeParameters_STATUSARM{}), generators)

	return healthProbeParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProbeIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbeProtocol"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeProtocol_Http_STATUS, HealthProbeParameters_ProbeProtocol_Https_STATUS, HealthProbeParameters_ProbeProtocol_NotSet_STATUS))
	gens["ProbeRequestType"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeRequestType_GET_STATUS, HealthProbeParameters_ProbeRequestType_HEAD_STATUS, HealthProbeParameters_ProbeRequestType_NotSet_STATUS))
}

func Test_ResponseBasedOriginErrorDetectionParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResponseBasedOriginErrorDetectionParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUSARM, ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUSARM runs a test to see if a specific instance of ResponseBasedOriginErrorDetectionParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUSARM(subject ResponseBasedOriginErrorDetectionParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResponseBasedOriginErrorDetectionParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResponseBasedOriginErrorDetectionParameters_STATUSARM instances for property testing - lazily
// instantiated by ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator()
var responseBasedOriginErrorDetectionParameters_STATUSARMGenerator gopter.Gen

// ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator returns a generator of ResponseBasedOriginErrorDetectionParameters_STATUSARM instances for property testing.
// We first initialize responseBasedOriginErrorDetectionParameters_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator() gopter.Gen {
	if responseBasedOriginErrorDetectionParameters_STATUSARMGenerator != nil {
		return responseBasedOriginErrorDetectionParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(generators)
	responseBasedOriginErrorDetectionParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(generators)
	responseBasedOriginErrorDetectionParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUSARM{}), generators)

	return responseBasedOriginErrorDetectionParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["ResponseBasedDetectedErrorTypes"] = gen.PtrOf(gen.OneConstOf(ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_None_STATUS, ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_TcpAndHttpErrors_STATUS, ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_TcpErrorsOnly_STATUS))
	gens["ResponseBasedFailoverThresholdPercentage"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["HttpErrorRanges"] = gen.SliceOf(HttpErrorRangeParameters_STATUSARMGenerator())
}

func Test_HttpErrorRangeParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpErrorRangeParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpErrorRangeParameters_STATUSARM, HttpErrorRangeParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpErrorRangeParameters_STATUSARM runs a test to see if a specific instance of HttpErrorRangeParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpErrorRangeParameters_STATUSARM(subject HttpErrorRangeParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpErrorRangeParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpErrorRangeParameters_STATUSARM instances for property testing - lazily instantiated by
// HttpErrorRangeParameters_STATUSARMGenerator()
var httpErrorRangeParameters_STATUSARMGenerator gopter.Gen

// HttpErrorRangeParameters_STATUSARMGenerator returns a generator of HttpErrorRangeParameters_STATUSARM instances for property testing.
func HttpErrorRangeParameters_STATUSARMGenerator() gopter.Gen {
	if httpErrorRangeParameters_STATUSARMGenerator != nil {
		return httpErrorRangeParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUSARM(generators)
	httpErrorRangeParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(HttpErrorRangeParameters_STATUSARM{}), generators)

	return httpErrorRangeParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Begin"] = gen.PtrOf(gen.Int())
	gens["End"] = gen.PtrOf(gen.Int())
}
