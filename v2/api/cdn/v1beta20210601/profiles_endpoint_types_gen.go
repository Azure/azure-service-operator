// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"fmt"
	v20210601s "github.com/Azure/azure-service-operator/v2/api/cdn/v1beta20210601storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/resourceDefinitions/profiles_endpoints
type ProfilesEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Profiles_Endpoint_Spec `json:"spec,omitempty"`
	Status            Endpoint_STATUS        `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ProfilesEndpoint{}

// GetConditions returns the conditions of the resource
func (endpoint *ProfilesEndpoint) GetConditions() conditions.Conditions {
	return endpoint.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (endpoint *ProfilesEndpoint) SetConditions(conditions conditions.Conditions) {
	endpoint.Status.Conditions = conditions
}

var _ conversion.Convertible = &ProfilesEndpoint{}

// ConvertFrom populates our ProfilesEndpoint from the provided hub ProfilesEndpoint
func (endpoint *ProfilesEndpoint) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210601s.ProfilesEndpoint)
	if !ok {
		return fmt.Errorf("expected cdn/v1beta20210601storage/ProfilesEndpoint but received %T instead", hub)
	}

	return endpoint.AssignProperties_From_ProfilesEndpoint(source)
}

// ConvertTo populates the provided hub ProfilesEndpoint from our ProfilesEndpoint
func (endpoint *ProfilesEndpoint) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210601s.ProfilesEndpoint)
	if !ok {
		return fmt.Errorf("expected cdn/v1beta20210601storage/ProfilesEndpoint but received %T instead", hub)
	}

	return endpoint.AssignProperties_To_ProfilesEndpoint(destination)
}

// +kubebuilder:webhook:path=/mutate-cdn-azure-com-v1beta20210601-profilesendpoint,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cdn.azure.com,resources=profilesendpoints,verbs=create;update,versions=v1beta20210601,name=default.v1beta20210601.profilesendpoints.cdn.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &ProfilesEndpoint{}

// Default applies defaults to the ProfilesEndpoint resource
func (endpoint *ProfilesEndpoint) Default() {
	endpoint.defaultImpl()
	var temp interface{} = endpoint
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (endpoint *ProfilesEndpoint) defaultAzureName() {
	if endpoint.Spec.AzureName == "" {
		endpoint.Spec.AzureName = endpoint.Name
	}
}

// defaultImpl applies the code generated defaults to the ProfilesEndpoint resource
func (endpoint *ProfilesEndpoint) defaultImpl() { endpoint.defaultAzureName() }

var _ genruntime.KubernetesResource = &ProfilesEndpoint{}

// AzureName returns the Azure name of the resource
func (endpoint *ProfilesEndpoint) AzureName() string {
	return endpoint.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-06-01"
func (endpoint ProfilesEndpoint) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (endpoint *ProfilesEndpoint) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (endpoint *ProfilesEndpoint) GetSpec() genruntime.ConvertibleSpec {
	return &endpoint.Spec
}

// GetStatus returns the status of this resource
func (endpoint *ProfilesEndpoint) GetStatus() genruntime.ConvertibleStatus {
	return &endpoint.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cdn/profiles/endpoints"
func (endpoint *ProfilesEndpoint) GetType() string {
	return "Microsoft.Cdn/profiles/endpoints"
}

// NewEmptyStatus returns a new empty (blank) status
func (endpoint *ProfilesEndpoint) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Endpoint_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (endpoint *ProfilesEndpoint) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(endpoint.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  endpoint.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (endpoint *ProfilesEndpoint) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Endpoint_STATUS); ok {
		endpoint.Status = *st
		return nil
	}

	// Convert status to required version
	var st Endpoint_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	endpoint.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cdn-azure-com-v1beta20210601-profilesendpoint,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cdn.azure.com,resources=profilesendpoints,verbs=create;update,versions=v1beta20210601,name=validate.v1beta20210601.profilesendpoints.cdn.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &ProfilesEndpoint{}

// ValidateCreate validates the creation of the resource
func (endpoint *ProfilesEndpoint) ValidateCreate() error {
	validations := endpoint.createValidations()
	var temp interface{} = endpoint
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (endpoint *ProfilesEndpoint) ValidateDelete() error {
	validations := endpoint.deleteValidations()
	var temp interface{} = endpoint
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (endpoint *ProfilesEndpoint) ValidateUpdate(old runtime.Object) error {
	validations := endpoint.updateValidations()
	var temp interface{} = endpoint
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (endpoint *ProfilesEndpoint) createValidations() []func() error {
	return []func() error{endpoint.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (endpoint *ProfilesEndpoint) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (endpoint *ProfilesEndpoint) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return endpoint.validateResourceReferences()
		},
		endpoint.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (endpoint *ProfilesEndpoint) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&endpoint.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (endpoint *ProfilesEndpoint) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*ProfilesEndpoint)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, endpoint)
}

// AssignProperties_From_ProfilesEndpoint populates our ProfilesEndpoint from the provided source ProfilesEndpoint
func (endpoint *ProfilesEndpoint) AssignProperties_From_ProfilesEndpoint(source *v20210601s.ProfilesEndpoint) error {

	// ObjectMeta
	endpoint.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Profiles_Endpoint_Spec
	err := spec.AssignProperties_From_Profiles_Endpoint_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Profiles_Endpoint_Spec() to populate field Spec")
	}
	endpoint.Spec = spec

	// Status
	var status Endpoint_STATUS
	err = status.AssignProperties_From_Endpoint_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Endpoint_STATUS() to populate field Status")
	}
	endpoint.Status = status

	// No error
	return nil
}

// AssignProperties_To_ProfilesEndpoint populates the provided destination ProfilesEndpoint from our ProfilesEndpoint
func (endpoint *ProfilesEndpoint) AssignProperties_To_ProfilesEndpoint(destination *v20210601s.ProfilesEndpoint) error {

	// ObjectMeta
	destination.ObjectMeta = *endpoint.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210601s.Profiles_Endpoint_Spec
	err := endpoint.Spec.AssignProperties_To_Profiles_Endpoint_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Profiles_Endpoint_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210601s.Endpoint_STATUS
	err = endpoint.Status.AssignProperties_To_Endpoint_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Endpoint_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (endpoint *ProfilesEndpoint) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: endpoint.Spec.OriginalVersion(),
		Kind:    "ProfilesEndpoint",
	}
}

// +kubebuilder:object:root=true
// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/resourceDefinitions/profiles_endpoints
type ProfilesEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProfilesEndpoint `json:"items"`
}

type Endpoint_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// ContentTypesToCompress: List of content types on which compression applies. The value should be a valid MIME type.
	ContentTypesToCompress []string `json:"contentTypesToCompress,omitempty"`

	// CustomDomains: The custom domains under the endpoint.
	CustomDomains []CustomDomain_STATUS_SubResourceEmbedded `json:"customDomains,omitempty"`

	// DefaultOriginGroup: A reference to the origin group.
	DefaultOriginGroup *ResourceReference_STATUS `json:"defaultOriginGroup,omitempty"`

	// DeliveryPolicy: A policy that specifies the delivery rules to be used for an endpoint.
	DeliveryPolicy *EndpointProperties_DeliveryPolicy_STATUS `json:"deliveryPolicy,omitempty"`

	// GeoFilters: List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule
	// to a specified path or content, e.g. block APAC for path /pictures/
	GeoFilters []GeoFilter_STATUS `json:"geoFilters,omitempty"`

	// HostName: The host name of the endpoint structured as {endpointName}.{DNSZone}, e.g. contoso.azureedge.net
	HostName *string `json:"hostName,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// IsCompressionEnabled: Indicates whether content compression is enabled on CDN. Default value is false. If compression is
	// enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on
	// CDN when requested content is smaller than 1 byte or larger than 1 MB.
	IsCompressionEnabled *bool `json:"isCompressionEnabled,omitempty"`

	// IsHttpAllowed: Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol
	// (HTTP or HTTPS) must be allowed.
	IsHttpAllowed *bool `json:"isHttpAllowed,omitempty"`

	// IsHttpsAllowed: Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol
	// (HTTP or HTTPS) must be allowed.
	IsHttpsAllowed *bool `json:"isHttpsAllowed,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// OptimizationType: Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media
	// services. With this information, CDN can apply scenario driven optimization.
	OptimizationType *OptimizationType_STATUS `json:"optimizationType,omitempty"`

	// OriginGroups: The origin groups comprising of origins that are used for load balancing the traffic based on availability.
	OriginGroups []DeepCreatedOriginGroup_STATUS `json:"originGroups,omitempty"`

	// OriginHostHeader: The host header value sent to the origin with each request. This property at Endpoint is only allowed
	// when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank,
	// the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services
	// require this host header value to match the origin hostname by default.
	OriginHostHeader *string `json:"originHostHeader,omitempty"`

	// OriginPath: A directory path on the origin that CDN can use to retrieve content from, e.g.
	// contoso.cloudapp.net/originpath.
	OriginPath *string `json:"originPath,omitempty"`

	// Origins: The source of the content being delivered via CDN.
	Origins []DeepCreatedOrigin_STATUS `json:"origins,omitempty"`

	// ProbePath: Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the
	// most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single
	// origin.
	ProbePath *string `json:"probePath,omitempty"`

	// ProvisioningState: Provisioning status of the endpoint.
	ProvisioningState *EndpointProperties_ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// QueryStringCachingBehavior: Defines how CDN caches requests that include query strings. You can ignore any query strings
	// when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request
	// with a unique URL.
	QueryStringCachingBehavior *QueryStringCachingBehavior_STATUS `json:"queryStringCachingBehavior,omitempty"`

	// ResourceState: Resource status of the endpoint.
	ResourceState *EndpointProperties_ResourceState_STATUS `json:"resourceState,omitempty"`
	SystemData    *SystemData_STATUS                       `json:"systemData,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// UrlSigningKeys: List of keys used to validate the signed URL hashes.
	UrlSigningKeys []UrlSigningKey_STATUS `json:"urlSigningKeys,omitempty"`

	// WebApplicationFirewallPolicyLink: Defines the Web Application Firewall policy for the endpoint (if applicable)
	WebApplicationFirewallPolicyLink *EndpointProperties_WebApplicationFirewallPolicyLink_STATUS `json:"webApplicationFirewallPolicyLink,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Endpoint_STATUS{}

// ConvertStatusFrom populates our Endpoint_STATUS from the provided source
func (endpoint *Endpoint_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210601s.Endpoint_STATUS)
	if ok {
		// Populate our instance from source
		return endpoint.AssignProperties_From_Endpoint_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210601s.Endpoint_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = endpoint.AssignProperties_From_Endpoint_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Endpoint_STATUS
func (endpoint *Endpoint_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210601s.Endpoint_STATUS)
	if ok {
		// Populate destination from our instance
		return endpoint.AssignProperties_To_Endpoint_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210601s.Endpoint_STATUS{}
	err := endpoint.AssignProperties_To_Endpoint_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Endpoint_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoint *Endpoint_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Endpoint_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoint *Endpoint_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Endpoint_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Endpoint_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ContentTypesToCompress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ContentTypesToCompress {
			endpoint.ContentTypesToCompress = append(endpoint.ContentTypesToCompress, item)
		}
	}

	// Set property ‘CustomDomains’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.CustomDomains {
			var item1 CustomDomain_STATUS_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			endpoint.CustomDomains = append(endpoint.CustomDomains, item1)
		}
	}

	// Set property ‘DefaultOriginGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultOriginGroup != nil {
			var defaultOriginGroup1 ResourceReference_STATUS
			err := defaultOriginGroup1.PopulateFromARM(owner, *typedInput.Properties.DefaultOriginGroup)
			if err != nil {
				return err
			}
			defaultOriginGroup := defaultOriginGroup1
			endpoint.DefaultOriginGroup = &defaultOriginGroup
		}
	}

	// Set property ‘DeliveryPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeliveryPolicy != nil {
			var deliveryPolicy1 EndpointProperties_DeliveryPolicy_STATUS
			err := deliveryPolicy1.PopulateFromARM(owner, *typedInput.Properties.DeliveryPolicy)
			if err != nil {
				return err
			}
			deliveryPolicy := deliveryPolicy1
			endpoint.DeliveryPolicy = &deliveryPolicy
		}
	}

	// Set property ‘GeoFilters’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.GeoFilters {
			var item1 GeoFilter_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			endpoint.GeoFilters = append(endpoint.GeoFilters, item1)
		}
	}

	// Set property ‘HostName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostName != nil {
			hostName := *typedInput.Properties.HostName
			endpoint.HostName = &hostName
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		endpoint.Id = &id
	}

	// Set property ‘IsCompressionEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsCompressionEnabled != nil {
			isCompressionEnabled := *typedInput.Properties.IsCompressionEnabled
			endpoint.IsCompressionEnabled = &isCompressionEnabled
		}
	}

	// Set property ‘IsHttpAllowed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHttpAllowed != nil {
			isHttpAllowed := *typedInput.Properties.IsHttpAllowed
			endpoint.IsHttpAllowed = &isHttpAllowed
		}
	}

	// Set property ‘IsHttpsAllowed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHttpsAllowed != nil {
			isHttpsAllowed := *typedInput.Properties.IsHttpsAllowed
			endpoint.IsHttpsAllowed = &isHttpsAllowed
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		endpoint.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		endpoint.Name = &name
	}

	// Set property ‘OptimizationType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OptimizationType != nil {
			optimizationType := *typedInput.Properties.OptimizationType
			endpoint.OptimizationType = &optimizationType
		}
	}

	// Set property ‘OriginGroups’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.OriginGroups {
			var item1 DeepCreatedOriginGroup_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			endpoint.OriginGroups = append(endpoint.OriginGroups, item1)
		}
	}

	// Set property ‘OriginHostHeader’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OriginHostHeader != nil {
			originHostHeader := *typedInput.Properties.OriginHostHeader
			endpoint.OriginHostHeader = &originHostHeader
		}
	}

	// Set property ‘OriginPath’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OriginPath != nil {
			originPath := *typedInput.Properties.OriginPath
			endpoint.OriginPath = &originPath
		}
	}

	// Set property ‘Origins’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Origins {
			var item1 DeepCreatedOrigin_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			endpoint.Origins = append(endpoint.Origins, item1)
		}
	}

	// Set property ‘ProbePath’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProbePath != nil {
			probePath := *typedInput.Properties.ProbePath
			endpoint.ProbePath = &probePath
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			endpoint.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘QueryStringCachingBehavior’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.QueryStringCachingBehavior != nil {
			queryStringCachingBehavior := *typedInput.Properties.QueryStringCachingBehavior
			endpoint.QueryStringCachingBehavior = &queryStringCachingBehavior
		}
	}

	// Set property ‘ResourceState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceState != nil {
			resourceState := *typedInput.Properties.ResourceState
			endpoint.ResourceState = &resourceState
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		endpoint.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		endpoint.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			endpoint.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		endpoint.Type = &typeVar
	}

	// Set property ‘UrlSigningKeys’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.UrlSigningKeys {
			var item1 UrlSigningKey_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			endpoint.UrlSigningKeys = append(endpoint.UrlSigningKeys, item1)
		}
	}

	// Set property ‘WebApplicationFirewallPolicyLink’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WebApplicationFirewallPolicyLink != nil {
			var webApplicationFirewallPolicyLink1 EndpointProperties_WebApplicationFirewallPolicyLink_STATUS
			err := webApplicationFirewallPolicyLink1.PopulateFromARM(owner, *typedInput.Properties.WebApplicationFirewallPolicyLink)
			if err != nil {
				return err
			}
			webApplicationFirewallPolicyLink := webApplicationFirewallPolicyLink1
			endpoint.WebApplicationFirewallPolicyLink = &webApplicationFirewallPolicyLink
		}
	}

	// No error
	return nil
}

// AssignProperties_From_Endpoint_STATUS populates our Endpoint_STATUS from the provided source Endpoint_STATUS
func (endpoint *Endpoint_STATUS) AssignProperties_From_Endpoint_STATUS(source *v20210601s.Endpoint_STATUS) error {

	// Conditions
	endpoint.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ContentTypesToCompress
	endpoint.ContentTypesToCompress = genruntime.CloneSliceOfString(source.ContentTypesToCompress)

	// CustomDomains
	if source.CustomDomains != nil {
		customDomainList := make([]CustomDomain_STATUS_SubResourceEmbedded, len(source.CustomDomains))
		for customDomainIndex, customDomainItem := range source.CustomDomains {
			// Shadow the loop variable to avoid aliasing
			customDomainItem := customDomainItem
			var customDomain CustomDomain_STATUS_SubResourceEmbedded
			err := customDomain.AssignProperties_From_CustomDomain_STATUS_SubResourceEmbedded(&customDomainItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_CustomDomain_STATUS_SubResourceEmbedded() to populate field CustomDomains")
			}
			customDomainList[customDomainIndex] = customDomain
		}
		endpoint.CustomDomains = customDomainList
	} else {
		endpoint.CustomDomains = nil
	}

	// DefaultOriginGroup
	if source.DefaultOriginGroup != nil {
		var defaultOriginGroup ResourceReference_STATUS
		err := defaultOriginGroup.AssignProperties_From_ResourceReference_STATUS(source.DefaultOriginGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ResourceReference_STATUS() to populate field DefaultOriginGroup")
		}
		endpoint.DefaultOriginGroup = &defaultOriginGroup
	} else {
		endpoint.DefaultOriginGroup = nil
	}

	// DeliveryPolicy
	if source.DeliveryPolicy != nil {
		var deliveryPolicy EndpointProperties_DeliveryPolicy_STATUS
		err := deliveryPolicy.AssignProperties_From_EndpointProperties_DeliveryPolicy_STATUS(source.DeliveryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EndpointProperties_DeliveryPolicy_STATUS() to populate field DeliveryPolicy")
		}
		endpoint.DeliveryPolicy = &deliveryPolicy
	} else {
		endpoint.DeliveryPolicy = nil
	}

	// GeoFilters
	if source.GeoFilters != nil {
		geoFilterList := make([]GeoFilter_STATUS, len(source.GeoFilters))
		for geoFilterIndex, geoFilterItem := range source.GeoFilters {
			// Shadow the loop variable to avoid aliasing
			geoFilterItem := geoFilterItem
			var geoFilter GeoFilter_STATUS
			err := geoFilter.AssignProperties_From_GeoFilter_STATUS(&geoFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_GeoFilter_STATUS() to populate field GeoFilters")
			}
			geoFilterList[geoFilterIndex] = geoFilter
		}
		endpoint.GeoFilters = geoFilterList
	} else {
		endpoint.GeoFilters = nil
	}

	// HostName
	endpoint.HostName = genruntime.ClonePointerToString(source.HostName)

	// Id
	endpoint.Id = genruntime.ClonePointerToString(source.Id)

	// IsCompressionEnabled
	if source.IsCompressionEnabled != nil {
		isCompressionEnabled := *source.IsCompressionEnabled
		endpoint.IsCompressionEnabled = &isCompressionEnabled
	} else {
		endpoint.IsCompressionEnabled = nil
	}

	// IsHttpAllowed
	if source.IsHttpAllowed != nil {
		isHttpAllowed := *source.IsHttpAllowed
		endpoint.IsHttpAllowed = &isHttpAllowed
	} else {
		endpoint.IsHttpAllowed = nil
	}

	// IsHttpsAllowed
	if source.IsHttpsAllowed != nil {
		isHttpsAllowed := *source.IsHttpsAllowed
		endpoint.IsHttpsAllowed = &isHttpsAllowed
	} else {
		endpoint.IsHttpsAllowed = nil
	}

	// Location
	endpoint.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	endpoint.Name = genruntime.ClonePointerToString(source.Name)

	// OptimizationType
	if source.OptimizationType != nil {
		optimizationType := OptimizationType_STATUS(*source.OptimizationType)
		endpoint.OptimizationType = &optimizationType
	} else {
		endpoint.OptimizationType = nil
	}

	// OriginGroups
	if source.OriginGroups != nil {
		originGroupList := make([]DeepCreatedOriginGroup_STATUS, len(source.OriginGroups))
		for originGroupIndex, originGroupItem := range source.OriginGroups {
			// Shadow the loop variable to avoid aliasing
			originGroupItem := originGroupItem
			var originGroup DeepCreatedOriginGroup_STATUS
			err := originGroup.AssignProperties_From_DeepCreatedOriginGroup_STATUS(&originGroupItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_DeepCreatedOriginGroup_STATUS() to populate field OriginGroups")
			}
			originGroupList[originGroupIndex] = originGroup
		}
		endpoint.OriginGroups = originGroupList
	} else {
		endpoint.OriginGroups = nil
	}

	// OriginHostHeader
	endpoint.OriginHostHeader = genruntime.ClonePointerToString(source.OriginHostHeader)

	// OriginPath
	endpoint.OriginPath = genruntime.ClonePointerToString(source.OriginPath)

	// Origins
	if source.Origins != nil {
		originList := make([]DeepCreatedOrigin_STATUS, len(source.Origins))
		for originIndex, originItem := range source.Origins {
			// Shadow the loop variable to avoid aliasing
			originItem := originItem
			var origin DeepCreatedOrigin_STATUS
			err := origin.AssignProperties_From_DeepCreatedOrigin_STATUS(&originItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_DeepCreatedOrigin_STATUS() to populate field Origins")
			}
			originList[originIndex] = origin
		}
		endpoint.Origins = originList
	} else {
		endpoint.Origins = nil
	}

	// ProbePath
	endpoint.ProbePath = genruntime.ClonePointerToString(source.ProbePath)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := EndpointProperties_ProvisioningState_STATUS(*source.ProvisioningState)
		endpoint.ProvisioningState = &provisioningState
	} else {
		endpoint.ProvisioningState = nil
	}

	// QueryStringCachingBehavior
	if source.QueryStringCachingBehavior != nil {
		queryStringCachingBehavior := QueryStringCachingBehavior_STATUS(*source.QueryStringCachingBehavior)
		endpoint.QueryStringCachingBehavior = &queryStringCachingBehavior
	} else {
		endpoint.QueryStringCachingBehavior = nil
	}

	// ResourceState
	if source.ResourceState != nil {
		resourceState := EndpointProperties_ResourceState_STATUS(*source.ResourceState)
		endpoint.ResourceState = &resourceState
	} else {
		endpoint.ResourceState = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		endpoint.SystemData = &systemDatum
	} else {
		endpoint.SystemData = nil
	}

	// Tags
	endpoint.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	endpoint.Type = genruntime.ClonePointerToString(source.Type)

	// UrlSigningKeys
	if source.UrlSigningKeys != nil {
		urlSigningKeyList := make([]UrlSigningKey_STATUS, len(source.UrlSigningKeys))
		for urlSigningKeyIndex, urlSigningKeyItem := range source.UrlSigningKeys {
			// Shadow the loop variable to avoid aliasing
			urlSigningKeyItem := urlSigningKeyItem
			var urlSigningKey UrlSigningKey_STATUS
			err := urlSigningKey.AssignProperties_From_UrlSigningKey_STATUS(&urlSigningKeyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_UrlSigningKey_STATUS() to populate field UrlSigningKeys")
			}
			urlSigningKeyList[urlSigningKeyIndex] = urlSigningKey
		}
		endpoint.UrlSigningKeys = urlSigningKeyList
	} else {
		endpoint.UrlSigningKeys = nil
	}

	// WebApplicationFirewallPolicyLink
	if source.WebApplicationFirewallPolicyLink != nil {
		var webApplicationFirewallPolicyLink EndpointProperties_WebApplicationFirewallPolicyLink_STATUS
		err := webApplicationFirewallPolicyLink.AssignProperties_From_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS(source.WebApplicationFirewallPolicyLink)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS() to populate field WebApplicationFirewallPolicyLink")
		}
		endpoint.WebApplicationFirewallPolicyLink = &webApplicationFirewallPolicyLink
	} else {
		endpoint.WebApplicationFirewallPolicyLink = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Endpoint_STATUS populates the provided destination Endpoint_STATUS from our Endpoint_STATUS
func (endpoint *Endpoint_STATUS) AssignProperties_To_Endpoint_STATUS(destination *v20210601s.Endpoint_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(endpoint.Conditions)

	// ContentTypesToCompress
	destination.ContentTypesToCompress = genruntime.CloneSliceOfString(endpoint.ContentTypesToCompress)

	// CustomDomains
	if endpoint.CustomDomains != nil {
		customDomainList := make([]v20210601s.CustomDomain_STATUS_SubResourceEmbedded, len(endpoint.CustomDomains))
		for customDomainIndex, customDomainItem := range endpoint.CustomDomains {
			// Shadow the loop variable to avoid aliasing
			customDomainItem := customDomainItem
			var customDomain v20210601s.CustomDomain_STATUS_SubResourceEmbedded
			err := customDomainItem.AssignProperties_To_CustomDomain_STATUS_SubResourceEmbedded(&customDomain)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_CustomDomain_STATUS_SubResourceEmbedded() to populate field CustomDomains")
			}
			customDomainList[customDomainIndex] = customDomain
		}
		destination.CustomDomains = customDomainList
	} else {
		destination.CustomDomains = nil
	}

	// DefaultOriginGroup
	if endpoint.DefaultOriginGroup != nil {
		var defaultOriginGroup v20210601s.ResourceReference_STATUS
		err := endpoint.DefaultOriginGroup.AssignProperties_To_ResourceReference_STATUS(&defaultOriginGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ResourceReference_STATUS() to populate field DefaultOriginGroup")
		}
		destination.DefaultOriginGroup = &defaultOriginGroup
	} else {
		destination.DefaultOriginGroup = nil
	}

	// DeliveryPolicy
	if endpoint.DeliveryPolicy != nil {
		var deliveryPolicy v20210601s.EndpointProperties_DeliveryPolicy_STATUS
		err := endpoint.DeliveryPolicy.AssignProperties_To_EndpointProperties_DeliveryPolicy_STATUS(&deliveryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EndpointProperties_DeliveryPolicy_STATUS() to populate field DeliveryPolicy")
		}
		destination.DeliveryPolicy = &deliveryPolicy
	} else {
		destination.DeliveryPolicy = nil
	}

	// GeoFilters
	if endpoint.GeoFilters != nil {
		geoFilterList := make([]v20210601s.GeoFilter_STATUS, len(endpoint.GeoFilters))
		for geoFilterIndex, geoFilterItem := range endpoint.GeoFilters {
			// Shadow the loop variable to avoid aliasing
			geoFilterItem := geoFilterItem
			var geoFilter v20210601s.GeoFilter_STATUS
			err := geoFilterItem.AssignProperties_To_GeoFilter_STATUS(&geoFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_GeoFilter_STATUS() to populate field GeoFilters")
			}
			geoFilterList[geoFilterIndex] = geoFilter
		}
		destination.GeoFilters = geoFilterList
	} else {
		destination.GeoFilters = nil
	}

	// HostName
	destination.HostName = genruntime.ClonePointerToString(endpoint.HostName)

	// Id
	destination.Id = genruntime.ClonePointerToString(endpoint.Id)

	// IsCompressionEnabled
	if endpoint.IsCompressionEnabled != nil {
		isCompressionEnabled := *endpoint.IsCompressionEnabled
		destination.IsCompressionEnabled = &isCompressionEnabled
	} else {
		destination.IsCompressionEnabled = nil
	}

	// IsHttpAllowed
	if endpoint.IsHttpAllowed != nil {
		isHttpAllowed := *endpoint.IsHttpAllowed
		destination.IsHttpAllowed = &isHttpAllowed
	} else {
		destination.IsHttpAllowed = nil
	}

	// IsHttpsAllowed
	if endpoint.IsHttpsAllowed != nil {
		isHttpsAllowed := *endpoint.IsHttpsAllowed
		destination.IsHttpsAllowed = &isHttpsAllowed
	} else {
		destination.IsHttpsAllowed = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(endpoint.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(endpoint.Name)

	// OptimizationType
	if endpoint.OptimizationType != nil {
		optimizationType := string(*endpoint.OptimizationType)
		destination.OptimizationType = &optimizationType
	} else {
		destination.OptimizationType = nil
	}

	// OriginGroups
	if endpoint.OriginGroups != nil {
		originGroupList := make([]v20210601s.DeepCreatedOriginGroup_STATUS, len(endpoint.OriginGroups))
		for originGroupIndex, originGroupItem := range endpoint.OriginGroups {
			// Shadow the loop variable to avoid aliasing
			originGroupItem := originGroupItem
			var originGroup v20210601s.DeepCreatedOriginGroup_STATUS
			err := originGroupItem.AssignProperties_To_DeepCreatedOriginGroup_STATUS(&originGroup)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_DeepCreatedOriginGroup_STATUS() to populate field OriginGroups")
			}
			originGroupList[originGroupIndex] = originGroup
		}
		destination.OriginGroups = originGroupList
	} else {
		destination.OriginGroups = nil
	}

	// OriginHostHeader
	destination.OriginHostHeader = genruntime.ClonePointerToString(endpoint.OriginHostHeader)

	// OriginPath
	destination.OriginPath = genruntime.ClonePointerToString(endpoint.OriginPath)

	// Origins
	if endpoint.Origins != nil {
		originList := make([]v20210601s.DeepCreatedOrigin_STATUS, len(endpoint.Origins))
		for originIndex, originItem := range endpoint.Origins {
			// Shadow the loop variable to avoid aliasing
			originItem := originItem
			var origin v20210601s.DeepCreatedOrigin_STATUS
			err := originItem.AssignProperties_To_DeepCreatedOrigin_STATUS(&origin)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_DeepCreatedOrigin_STATUS() to populate field Origins")
			}
			originList[originIndex] = origin
		}
		destination.Origins = originList
	} else {
		destination.Origins = nil
	}

	// ProbePath
	destination.ProbePath = genruntime.ClonePointerToString(endpoint.ProbePath)

	// ProvisioningState
	if endpoint.ProvisioningState != nil {
		provisioningState := string(*endpoint.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// QueryStringCachingBehavior
	if endpoint.QueryStringCachingBehavior != nil {
		queryStringCachingBehavior := string(*endpoint.QueryStringCachingBehavior)
		destination.QueryStringCachingBehavior = &queryStringCachingBehavior
	} else {
		destination.QueryStringCachingBehavior = nil
	}

	// ResourceState
	if endpoint.ResourceState != nil {
		resourceState := string(*endpoint.ResourceState)
		destination.ResourceState = &resourceState
	} else {
		destination.ResourceState = nil
	}

	// SystemData
	if endpoint.SystemData != nil {
		var systemDatum v20210601s.SystemData_STATUS
		err := endpoint.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(endpoint.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(endpoint.Type)

	// UrlSigningKeys
	if endpoint.UrlSigningKeys != nil {
		urlSigningKeyList := make([]v20210601s.UrlSigningKey_STATUS, len(endpoint.UrlSigningKeys))
		for urlSigningKeyIndex, urlSigningKeyItem := range endpoint.UrlSigningKeys {
			// Shadow the loop variable to avoid aliasing
			urlSigningKeyItem := urlSigningKeyItem
			var urlSigningKey v20210601s.UrlSigningKey_STATUS
			err := urlSigningKeyItem.AssignProperties_To_UrlSigningKey_STATUS(&urlSigningKey)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_UrlSigningKey_STATUS() to populate field UrlSigningKeys")
			}
			urlSigningKeyList[urlSigningKeyIndex] = urlSigningKey
		}
		destination.UrlSigningKeys = urlSigningKeyList
	} else {
		destination.UrlSigningKeys = nil
	}

	// WebApplicationFirewallPolicyLink
	if endpoint.WebApplicationFirewallPolicyLink != nil {
		var webApplicationFirewallPolicyLink v20210601s.EndpointProperties_WebApplicationFirewallPolicyLink_STATUS
		err := endpoint.WebApplicationFirewallPolicyLink.AssignProperties_To_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS(&webApplicationFirewallPolicyLink)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS() to populate field WebApplicationFirewallPolicyLink")
		}
		destination.WebApplicationFirewallPolicyLink = &webApplicationFirewallPolicyLink
	} else {
		destination.WebApplicationFirewallPolicyLink = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Profiles_Endpoint_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// ContentTypesToCompress: List of content types on which compression applies. The value should be a valid MIME type.
	ContentTypesToCompress []string `json:"contentTypesToCompress,omitempty"`

	// DefaultOriginGroup: Reference to another resource.
	DefaultOriginGroup *ResourceReference `json:"defaultOriginGroup,omitempty"`

	// DeliveryPolicy: A policy that specifies the delivery rules to be used for an endpoint.
	DeliveryPolicy *EndpointPropertiesUpdateParametersDeliveryPolicy `json:"deliveryPolicy,omitempty"`

	// GeoFilters: List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule
	// to a specified path or content, e.g. block APAC for path /pictures/
	GeoFilters []GeoFilter `json:"geoFilters,omitempty"`

	// IsCompressionEnabled: Indicates whether content compression is enabled on CDN. Default value is false. If compression is
	// enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on
	// CDN when requested content is smaller than 1 byte or larger than 1 MB.
	IsCompressionEnabled *bool `json:"isCompressionEnabled,omitempty"`

	// IsHttpAllowed: Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol
	// (HTTP or HTTPS) must be allowed.
	IsHttpAllowed *bool `json:"isHttpAllowed,omitempty"`

	// IsHttpsAllowed: Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol
	// (HTTP or HTTPS) must be allowed.
	IsHttpsAllowed *bool `json:"isHttpsAllowed,omitempty"`

	// Location: Location to deploy resource to
	Location *string `json:"location,omitempty"`

	// OptimizationType: Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media
	// services. With this information, CDN can apply scenario driven optimization.
	OptimizationType *Profiles_Endpoint_Properties_OptimizationType_Spec `json:"optimizationType,omitempty"`

	// OriginGroups: The origin groups comprising of origins that are used for load balancing the traffic based on availability.
	OriginGroups []Profiles_Endpoint_Properties_OriginGroups_Spec `json:"originGroups,omitempty"`

	// OriginHostHeader: The host header value sent to the origin with each request. This property at Endpoint is only allowed
	// when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank,
	// the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services
	// require this host header value to match the origin hostname by default.
	OriginHostHeader *string `json:"originHostHeader,omitempty"`

	// OriginPath: A directory path on the origin that CDN can use to retrieve content from, e.g.
	// contoso.cloudapp.net/originpath.
	OriginPath *string `json:"originPath,omitempty"`

	// +kubebuilder:validation:Required
	// Origins: The source of the content being delivered via CDN.
	Origins []Profiles_Endpoint_Properties_Origins_Spec `json:"origins,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a cdn.azure.com/Profile resource
	Owner *genruntime.KnownResourceReference `group:"cdn.azure.com" json:"owner,omitempty" kind:"Profile"`

	// ProbePath: Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the
	// most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single
	// origin.
	ProbePath *string `json:"probePath,omitempty"`

	// QueryStringCachingBehavior: Defines how CDN caches requests that include query strings. You can ignore any query strings
	// when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request
	// with a unique URL.
	QueryStringCachingBehavior *Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec `json:"queryStringCachingBehavior,omitempty"`

	// Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	// UrlSigningKeys: List of keys used to validate the signed URL hashes.
	UrlSigningKeys []UrlSigningKey `json:"urlSigningKeys,omitempty"`

	// WebApplicationFirewallPolicyLink: Defines the Web Application Firewall policy for the endpoint (if applicable)
	WebApplicationFirewallPolicyLink *EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink `json:"webApplicationFirewallPolicyLink,omitempty"`
}

var _ genruntime.ARMTransformer = &Profiles_Endpoint_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (endpoint *Profiles_Endpoint_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if endpoint == nil {
		return nil, nil
	}
	result := &Profiles_Endpoint_Spec_ARM{}

	// Set property ‘Location’:
	if endpoint.Location != nil {
		location := *endpoint.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if endpoint.ContentTypesToCompress != nil ||
		endpoint.DefaultOriginGroup != nil ||
		endpoint.DeliveryPolicy != nil ||
		endpoint.GeoFilters != nil ||
		endpoint.IsCompressionEnabled != nil ||
		endpoint.IsHttpAllowed != nil ||
		endpoint.IsHttpsAllowed != nil ||
		endpoint.OptimizationType != nil ||
		endpoint.OriginGroups != nil ||
		endpoint.OriginHostHeader != nil ||
		endpoint.OriginPath != nil ||
		endpoint.Origins != nil ||
		endpoint.ProbePath != nil ||
		endpoint.QueryStringCachingBehavior != nil ||
		endpoint.UrlSigningKeys != nil ||
		endpoint.WebApplicationFirewallPolicyLink != nil {
		result.Properties = &Profiles_Endpoint_Properties_Spec_ARM{}
	}
	for _, item := range endpoint.ContentTypesToCompress {
		result.Properties.ContentTypesToCompress = append(result.Properties.ContentTypesToCompress, item)
	}
	if endpoint.DefaultOriginGroup != nil {
		defaultOriginGroup_ARM, err := (*endpoint.DefaultOriginGroup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		defaultOriginGroup := *defaultOriginGroup_ARM.(*ResourceReference_ARM)
		result.Properties.DefaultOriginGroup = &defaultOriginGroup
	}
	if endpoint.DeliveryPolicy != nil {
		deliveryPolicy_ARM, err := (*endpoint.DeliveryPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryPolicy := *deliveryPolicy_ARM.(*EndpointPropertiesUpdateParametersDeliveryPolicy_ARM)
		result.Properties.DeliveryPolicy = &deliveryPolicy
	}
	for _, item := range endpoint.GeoFilters {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.GeoFilters = append(result.Properties.GeoFilters, *item_ARM.(*GeoFilter_ARM))
	}
	if endpoint.IsCompressionEnabled != nil {
		isCompressionEnabled := *endpoint.IsCompressionEnabled
		result.Properties.IsCompressionEnabled = &isCompressionEnabled
	}
	if endpoint.IsHttpAllowed != nil {
		isHttpAllowed := *endpoint.IsHttpAllowed
		result.Properties.IsHttpAllowed = &isHttpAllowed
	}
	if endpoint.IsHttpsAllowed != nil {
		isHttpsAllowed := *endpoint.IsHttpsAllowed
		result.Properties.IsHttpsAllowed = &isHttpsAllowed
	}
	if endpoint.OptimizationType != nil {
		optimizationType := *endpoint.OptimizationType
		result.Properties.OptimizationType = &optimizationType
	}
	for _, item := range endpoint.OriginGroups {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.OriginGroups = append(result.Properties.OriginGroups, *item_ARM.(*Profiles_Endpoint_Properties_OriginGroups_Spec_ARM))
	}
	if endpoint.OriginHostHeader != nil {
		originHostHeader := *endpoint.OriginHostHeader
		result.Properties.OriginHostHeader = &originHostHeader
	}
	if endpoint.OriginPath != nil {
		originPath := *endpoint.OriginPath
		result.Properties.OriginPath = &originPath
	}
	for _, item := range endpoint.Origins {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Origins = append(result.Properties.Origins, *item_ARM.(*Profiles_Endpoint_Properties_Origins_Spec_ARM))
	}
	if endpoint.ProbePath != nil {
		probePath := *endpoint.ProbePath
		result.Properties.ProbePath = &probePath
	}
	if endpoint.QueryStringCachingBehavior != nil {
		queryStringCachingBehavior := *endpoint.QueryStringCachingBehavior
		result.Properties.QueryStringCachingBehavior = &queryStringCachingBehavior
	}
	for _, item := range endpoint.UrlSigningKeys {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.UrlSigningKeys = append(result.Properties.UrlSigningKeys, *item_ARM.(*UrlSigningKey_ARM))
	}
	if endpoint.WebApplicationFirewallPolicyLink != nil {
		webApplicationFirewallPolicyLink_ARM, err := (*endpoint.WebApplicationFirewallPolicyLink).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		webApplicationFirewallPolicyLink := *webApplicationFirewallPolicyLink_ARM.(*EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink_ARM)
		result.Properties.WebApplicationFirewallPolicyLink = &webApplicationFirewallPolicyLink
	}

	// Set property ‘Tags’:
	if endpoint.Tags != nil {
		result.Tags = make(map[string]string, len(endpoint.Tags))
		for key, value := range endpoint.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoint *Profiles_Endpoint_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Profiles_Endpoint_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoint *Profiles_Endpoint_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Profiles_Endpoint_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Profiles_Endpoint_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	endpoint.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ContentTypesToCompress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ContentTypesToCompress {
			endpoint.ContentTypesToCompress = append(endpoint.ContentTypesToCompress, item)
		}
	}

	// Set property ‘DefaultOriginGroup’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultOriginGroup != nil {
			var defaultOriginGroup1 ResourceReference
			err := defaultOriginGroup1.PopulateFromARM(owner, *typedInput.Properties.DefaultOriginGroup)
			if err != nil {
				return err
			}
			defaultOriginGroup := defaultOriginGroup1
			endpoint.DefaultOriginGroup = &defaultOriginGroup
		}
	}

	// Set property ‘DeliveryPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeliveryPolicy != nil {
			var deliveryPolicy1 EndpointPropertiesUpdateParametersDeliveryPolicy
			err := deliveryPolicy1.PopulateFromARM(owner, *typedInput.Properties.DeliveryPolicy)
			if err != nil {
				return err
			}
			deliveryPolicy := deliveryPolicy1
			endpoint.DeliveryPolicy = &deliveryPolicy
		}
	}

	// Set property ‘GeoFilters’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.GeoFilters {
			var item1 GeoFilter
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			endpoint.GeoFilters = append(endpoint.GeoFilters, item1)
		}
	}

	// Set property ‘IsCompressionEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsCompressionEnabled != nil {
			isCompressionEnabled := *typedInput.Properties.IsCompressionEnabled
			endpoint.IsCompressionEnabled = &isCompressionEnabled
		}
	}

	// Set property ‘IsHttpAllowed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHttpAllowed != nil {
			isHttpAllowed := *typedInput.Properties.IsHttpAllowed
			endpoint.IsHttpAllowed = &isHttpAllowed
		}
	}

	// Set property ‘IsHttpsAllowed’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsHttpsAllowed != nil {
			isHttpsAllowed := *typedInput.Properties.IsHttpsAllowed
			endpoint.IsHttpsAllowed = &isHttpsAllowed
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		endpoint.Location = &location
	}

	// Set property ‘OptimizationType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OptimizationType != nil {
			optimizationType := *typedInput.Properties.OptimizationType
			endpoint.OptimizationType = &optimizationType
		}
	}

	// Set property ‘OriginGroups’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.OriginGroups {
			var item1 Profiles_Endpoint_Properties_OriginGroups_Spec
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			endpoint.OriginGroups = append(endpoint.OriginGroups, item1)
		}
	}

	// Set property ‘OriginHostHeader’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OriginHostHeader != nil {
			originHostHeader := *typedInput.Properties.OriginHostHeader
			endpoint.OriginHostHeader = &originHostHeader
		}
	}

	// Set property ‘OriginPath’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OriginPath != nil {
			originPath := *typedInput.Properties.OriginPath
			endpoint.OriginPath = &originPath
		}
	}

	// Set property ‘Origins’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Origins {
			var item1 Profiles_Endpoint_Properties_Origins_Spec
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			endpoint.Origins = append(endpoint.Origins, item1)
		}
	}

	// Set property ‘Owner’:
	endpoint.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘ProbePath’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProbePath != nil {
			probePath := *typedInput.Properties.ProbePath
			endpoint.ProbePath = &probePath
		}
	}

	// Set property ‘QueryStringCachingBehavior’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.QueryStringCachingBehavior != nil {
			queryStringCachingBehavior := *typedInput.Properties.QueryStringCachingBehavior
			endpoint.QueryStringCachingBehavior = &queryStringCachingBehavior
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		endpoint.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			endpoint.Tags[key] = value
		}
	}

	// Set property ‘UrlSigningKeys’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.UrlSigningKeys {
			var item1 UrlSigningKey
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			endpoint.UrlSigningKeys = append(endpoint.UrlSigningKeys, item1)
		}
	}

	// Set property ‘WebApplicationFirewallPolicyLink’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.WebApplicationFirewallPolicyLink != nil {
			var webApplicationFirewallPolicyLink1 EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink
			err := webApplicationFirewallPolicyLink1.PopulateFromARM(owner, *typedInput.Properties.WebApplicationFirewallPolicyLink)
			if err != nil {
				return err
			}
			webApplicationFirewallPolicyLink := webApplicationFirewallPolicyLink1
			endpoint.WebApplicationFirewallPolicyLink = &webApplicationFirewallPolicyLink
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Profiles_Endpoint_Spec{}

// ConvertSpecFrom populates our Profiles_Endpoint_Spec from the provided source
func (endpoint *Profiles_Endpoint_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210601s.Profiles_Endpoint_Spec)
	if ok {
		// Populate our instance from source
		return endpoint.AssignProperties_From_Profiles_Endpoint_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210601s.Profiles_Endpoint_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = endpoint.AssignProperties_From_Profiles_Endpoint_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Profiles_Endpoint_Spec
func (endpoint *Profiles_Endpoint_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210601s.Profiles_Endpoint_Spec)
	if ok {
		// Populate destination from our instance
		return endpoint.AssignProperties_To_Profiles_Endpoint_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210601s.Profiles_Endpoint_Spec{}
	err := endpoint.AssignProperties_To_Profiles_Endpoint_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Profiles_Endpoint_Spec populates our Profiles_Endpoint_Spec from the provided source Profiles_Endpoint_Spec
func (endpoint *Profiles_Endpoint_Spec) AssignProperties_From_Profiles_Endpoint_Spec(source *v20210601s.Profiles_Endpoint_Spec) error {

	// AzureName
	endpoint.AzureName = source.AzureName

	// ContentTypesToCompress
	endpoint.ContentTypesToCompress = genruntime.CloneSliceOfString(source.ContentTypesToCompress)

	// DefaultOriginGroup
	if source.DefaultOriginGroup != nil {
		var defaultOriginGroup ResourceReference
		err := defaultOriginGroup.AssignProperties_From_ResourceReference(source.DefaultOriginGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ResourceReference() to populate field DefaultOriginGroup")
		}
		endpoint.DefaultOriginGroup = &defaultOriginGroup
	} else {
		endpoint.DefaultOriginGroup = nil
	}

	// DeliveryPolicy
	if source.DeliveryPolicy != nil {
		var deliveryPolicy EndpointPropertiesUpdateParametersDeliveryPolicy
		err := deliveryPolicy.AssignProperties_From_EndpointPropertiesUpdateParametersDeliveryPolicy(source.DeliveryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EndpointPropertiesUpdateParametersDeliveryPolicy() to populate field DeliveryPolicy")
		}
		endpoint.DeliveryPolicy = &deliveryPolicy
	} else {
		endpoint.DeliveryPolicy = nil
	}

	// GeoFilters
	if source.GeoFilters != nil {
		geoFilterList := make([]GeoFilter, len(source.GeoFilters))
		for geoFilterIndex, geoFilterItem := range source.GeoFilters {
			// Shadow the loop variable to avoid aliasing
			geoFilterItem := geoFilterItem
			var geoFilter GeoFilter
			err := geoFilter.AssignProperties_From_GeoFilter(&geoFilterItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_GeoFilter() to populate field GeoFilters")
			}
			geoFilterList[geoFilterIndex] = geoFilter
		}
		endpoint.GeoFilters = geoFilterList
	} else {
		endpoint.GeoFilters = nil
	}

	// IsCompressionEnabled
	if source.IsCompressionEnabled != nil {
		isCompressionEnabled := *source.IsCompressionEnabled
		endpoint.IsCompressionEnabled = &isCompressionEnabled
	} else {
		endpoint.IsCompressionEnabled = nil
	}

	// IsHttpAllowed
	if source.IsHttpAllowed != nil {
		isHttpAllowed := *source.IsHttpAllowed
		endpoint.IsHttpAllowed = &isHttpAllowed
	} else {
		endpoint.IsHttpAllowed = nil
	}

	// IsHttpsAllowed
	if source.IsHttpsAllowed != nil {
		isHttpsAllowed := *source.IsHttpsAllowed
		endpoint.IsHttpsAllowed = &isHttpsAllowed
	} else {
		endpoint.IsHttpsAllowed = nil
	}

	// Location
	endpoint.Location = genruntime.ClonePointerToString(source.Location)

	// OptimizationType
	if source.OptimizationType != nil {
		optimizationType := Profiles_Endpoint_Properties_OptimizationType_Spec(*source.OptimizationType)
		endpoint.OptimizationType = &optimizationType
	} else {
		endpoint.OptimizationType = nil
	}

	// OriginGroups
	if source.OriginGroups != nil {
		originGroupList := make([]Profiles_Endpoint_Properties_OriginGroups_Spec, len(source.OriginGroups))
		for originGroupIndex, originGroupItem := range source.OriginGroups {
			// Shadow the loop variable to avoid aliasing
			originGroupItem := originGroupItem
			var originGroup Profiles_Endpoint_Properties_OriginGroups_Spec
			err := originGroup.AssignProperties_From_Profiles_Endpoint_Properties_OriginGroups_Spec(&originGroupItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Profiles_Endpoint_Properties_OriginGroups_Spec() to populate field OriginGroups")
			}
			originGroupList[originGroupIndex] = originGroup
		}
		endpoint.OriginGroups = originGroupList
	} else {
		endpoint.OriginGroups = nil
	}

	// OriginHostHeader
	endpoint.OriginHostHeader = genruntime.ClonePointerToString(source.OriginHostHeader)

	// OriginPath
	endpoint.OriginPath = genruntime.ClonePointerToString(source.OriginPath)

	// Origins
	if source.Origins != nil {
		originList := make([]Profiles_Endpoint_Properties_Origins_Spec, len(source.Origins))
		for originIndex, originItem := range source.Origins {
			// Shadow the loop variable to avoid aliasing
			originItem := originItem
			var origin Profiles_Endpoint_Properties_Origins_Spec
			err := origin.AssignProperties_From_Profiles_Endpoint_Properties_Origins_Spec(&originItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_Profiles_Endpoint_Properties_Origins_Spec() to populate field Origins")
			}
			originList[originIndex] = origin
		}
		endpoint.Origins = originList
	} else {
		endpoint.Origins = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		endpoint.Owner = &owner
	} else {
		endpoint.Owner = nil
	}

	// ProbePath
	endpoint.ProbePath = genruntime.ClonePointerToString(source.ProbePath)

	// QueryStringCachingBehavior
	if source.QueryStringCachingBehavior != nil {
		queryStringCachingBehavior := Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec(*source.QueryStringCachingBehavior)
		endpoint.QueryStringCachingBehavior = &queryStringCachingBehavior
	} else {
		endpoint.QueryStringCachingBehavior = nil
	}

	// Tags
	endpoint.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// UrlSigningKeys
	if source.UrlSigningKeys != nil {
		urlSigningKeyList := make([]UrlSigningKey, len(source.UrlSigningKeys))
		for urlSigningKeyIndex, urlSigningKeyItem := range source.UrlSigningKeys {
			// Shadow the loop variable to avoid aliasing
			urlSigningKeyItem := urlSigningKeyItem
			var urlSigningKey UrlSigningKey
			err := urlSigningKey.AssignProperties_From_UrlSigningKey(&urlSigningKeyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_UrlSigningKey() to populate field UrlSigningKeys")
			}
			urlSigningKeyList[urlSigningKeyIndex] = urlSigningKey
		}
		endpoint.UrlSigningKeys = urlSigningKeyList
	} else {
		endpoint.UrlSigningKeys = nil
	}

	// WebApplicationFirewallPolicyLink
	if source.WebApplicationFirewallPolicyLink != nil {
		var webApplicationFirewallPolicyLink EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink
		err := webApplicationFirewallPolicyLink.AssignProperties_From_EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink(source.WebApplicationFirewallPolicyLink)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink() to populate field WebApplicationFirewallPolicyLink")
		}
		endpoint.WebApplicationFirewallPolicyLink = &webApplicationFirewallPolicyLink
	} else {
		endpoint.WebApplicationFirewallPolicyLink = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Profiles_Endpoint_Spec populates the provided destination Profiles_Endpoint_Spec from our Profiles_Endpoint_Spec
func (endpoint *Profiles_Endpoint_Spec) AssignProperties_To_Profiles_Endpoint_Spec(destination *v20210601s.Profiles_Endpoint_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = endpoint.AzureName

	// ContentTypesToCompress
	destination.ContentTypesToCompress = genruntime.CloneSliceOfString(endpoint.ContentTypesToCompress)

	// DefaultOriginGroup
	if endpoint.DefaultOriginGroup != nil {
		var defaultOriginGroup v20210601s.ResourceReference
		err := endpoint.DefaultOriginGroup.AssignProperties_To_ResourceReference(&defaultOriginGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ResourceReference() to populate field DefaultOriginGroup")
		}
		destination.DefaultOriginGroup = &defaultOriginGroup
	} else {
		destination.DefaultOriginGroup = nil
	}

	// DeliveryPolicy
	if endpoint.DeliveryPolicy != nil {
		var deliveryPolicy v20210601s.EndpointPropertiesUpdateParametersDeliveryPolicy
		err := endpoint.DeliveryPolicy.AssignProperties_To_EndpointPropertiesUpdateParametersDeliveryPolicy(&deliveryPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EndpointPropertiesUpdateParametersDeliveryPolicy() to populate field DeliveryPolicy")
		}
		destination.DeliveryPolicy = &deliveryPolicy
	} else {
		destination.DeliveryPolicy = nil
	}

	// GeoFilters
	if endpoint.GeoFilters != nil {
		geoFilterList := make([]v20210601s.GeoFilter, len(endpoint.GeoFilters))
		for geoFilterIndex, geoFilterItem := range endpoint.GeoFilters {
			// Shadow the loop variable to avoid aliasing
			geoFilterItem := geoFilterItem
			var geoFilter v20210601s.GeoFilter
			err := geoFilterItem.AssignProperties_To_GeoFilter(&geoFilter)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_GeoFilter() to populate field GeoFilters")
			}
			geoFilterList[geoFilterIndex] = geoFilter
		}
		destination.GeoFilters = geoFilterList
	} else {
		destination.GeoFilters = nil
	}

	// IsCompressionEnabled
	if endpoint.IsCompressionEnabled != nil {
		isCompressionEnabled := *endpoint.IsCompressionEnabled
		destination.IsCompressionEnabled = &isCompressionEnabled
	} else {
		destination.IsCompressionEnabled = nil
	}

	// IsHttpAllowed
	if endpoint.IsHttpAllowed != nil {
		isHttpAllowed := *endpoint.IsHttpAllowed
		destination.IsHttpAllowed = &isHttpAllowed
	} else {
		destination.IsHttpAllowed = nil
	}

	// IsHttpsAllowed
	if endpoint.IsHttpsAllowed != nil {
		isHttpsAllowed := *endpoint.IsHttpsAllowed
		destination.IsHttpsAllowed = &isHttpsAllowed
	} else {
		destination.IsHttpsAllowed = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(endpoint.Location)

	// OptimizationType
	if endpoint.OptimizationType != nil {
		optimizationType := string(*endpoint.OptimizationType)
		destination.OptimizationType = &optimizationType
	} else {
		destination.OptimizationType = nil
	}

	// OriginGroups
	if endpoint.OriginGroups != nil {
		originGroupList := make([]v20210601s.Profiles_Endpoint_Properties_OriginGroups_Spec, len(endpoint.OriginGroups))
		for originGroupIndex, originGroupItem := range endpoint.OriginGroups {
			// Shadow the loop variable to avoid aliasing
			originGroupItem := originGroupItem
			var originGroup v20210601s.Profiles_Endpoint_Properties_OriginGroups_Spec
			err := originGroupItem.AssignProperties_To_Profiles_Endpoint_Properties_OriginGroups_Spec(&originGroup)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Profiles_Endpoint_Properties_OriginGroups_Spec() to populate field OriginGroups")
			}
			originGroupList[originGroupIndex] = originGroup
		}
		destination.OriginGroups = originGroupList
	} else {
		destination.OriginGroups = nil
	}

	// OriginHostHeader
	destination.OriginHostHeader = genruntime.ClonePointerToString(endpoint.OriginHostHeader)

	// OriginPath
	destination.OriginPath = genruntime.ClonePointerToString(endpoint.OriginPath)

	// OriginalVersion
	destination.OriginalVersion = endpoint.OriginalVersion()

	// Origins
	if endpoint.Origins != nil {
		originList := make([]v20210601s.Profiles_Endpoint_Properties_Origins_Spec, len(endpoint.Origins))
		for originIndex, originItem := range endpoint.Origins {
			// Shadow the loop variable to avoid aliasing
			originItem := originItem
			var origin v20210601s.Profiles_Endpoint_Properties_Origins_Spec
			err := originItem.AssignProperties_To_Profiles_Endpoint_Properties_Origins_Spec(&origin)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_Profiles_Endpoint_Properties_Origins_Spec() to populate field Origins")
			}
			originList[originIndex] = origin
		}
		destination.Origins = originList
	} else {
		destination.Origins = nil
	}

	// Owner
	if endpoint.Owner != nil {
		owner := endpoint.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// ProbePath
	destination.ProbePath = genruntime.ClonePointerToString(endpoint.ProbePath)

	// QueryStringCachingBehavior
	if endpoint.QueryStringCachingBehavior != nil {
		queryStringCachingBehavior := string(*endpoint.QueryStringCachingBehavior)
		destination.QueryStringCachingBehavior = &queryStringCachingBehavior
	} else {
		destination.QueryStringCachingBehavior = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(endpoint.Tags)

	// UrlSigningKeys
	if endpoint.UrlSigningKeys != nil {
		urlSigningKeyList := make([]v20210601s.UrlSigningKey, len(endpoint.UrlSigningKeys))
		for urlSigningKeyIndex, urlSigningKeyItem := range endpoint.UrlSigningKeys {
			// Shadow the loop variable to avoid aliasing
			urlSigningKeyItem := urlSigningKeyItem
			var urlSigningKey v20210601s.UrlSigningKey
			err := urlSigningKeyItem.AssignProperties_To_UrlSigningKey(&urlSigningKey)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_UrlSigningKey() to populate field UrlSigningKeys")
			}
			urlSigningKeyList[urlSigningKeyIndex] = urlSigningKey
		}
		destination.UrlSigningKeys = urlSigningKeyList
	} else {
		destination.UrlSigningKeys = nil
	}

	// WebApplicationFirewallPolicyLink
	if endpoint.WebApplicationFirewallPolicyLink != nil {
		var webApplicationFirewallPolicyLink v20210601s.EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink
		err := endpoint.WebApplicationFirewallPolicyLink.AssignProperties_To_EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink(&webApplicationFirewallPolicyLink)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink() to populate field WebApplicationFirewallPolicyLink")
		}
		destination.WebApplicationFirewallPolicyLink = &webApplicationFirewallPolicyLink
	} else {
		destination.WebApplicationFirewallPolicyLink = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (endpoint *Profiles_Endpoint_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (endpoint *Profiles_Endpoint_Spec) SetAzureName(azureName string) {
	endpoint.AzureName = azureName
}

type CustomDomain_STATUS_SubResourceEmbedded struct {
	// Id: Resource ID.
	Id         *string            `json:"id,omitempty"`
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`
}

var _ genruntime.FromARMConverter = &CustomDomain_STATUS_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *CustomDomain_STATUS_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CustomDomain_STATUS_SubResourceEmbedded_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *CustomDomain_STATUS_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CustomDomain_STATUS_SubResourceEmbedded_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CustomDomain_STATUS_SubResourceEmbedded_ARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		embedded.SystemData = &systemData
	}

	// No error
	return nil
}

// AssignProperties_From_CustomDomain_STATUS_SubResourceEmbedded populates our CustomDomain_STATUS_SubResourceEmbedded from the provided source CustomDomain_STATUS_SubResourceEmbedded
func (embedded *CustomDomain_STATUS_SubResourceEmbedded) AssignProperties_From_CustomDomain_STATUS_SubResourceEmbedded(source *v20210601s.CustomDomain_STATUS_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		embedded.SystemData = &systemDatum
	} else {
		embedded.SystemData = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CustomDomain_STATUS_SubResourceEmbedded populates the provided destination CustomDomain_STATUS_SubResourceEmbedded from our CustomDomain_STATUS_SubResourceEmbedded
func (embedded *CustomDomain_STATUS_SubResourceEmbedded) AssignProperties_To_CustomDomain_STATUS_SubResourceEmbedded(destination *v20210601s.CustomDomain_STATUS_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// SystemData
	if embedded.SystemData != nil {
		var systemDatum v20210601s.SystemData_STATUS
		err := embedded.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeepCreatedOrigin_STATUS struct {
	// Enabled: Origin is enabled for load balancing or not. By default, origin is always enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// HostName: The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique
	// across all origins in an endpoint.
	HostName *string `json:"hostName,omitempty"`

	// HttpPort: The value of the HTTP port. Must be between 1 and 65535.
	HttpPort *int `json:"httpPort,omitempty"`

	// HttpsPort: The value of the HTTPS port. Must be between 1 and 65535.
	HttpsPort *int `json:"httpsPort,omitempty"`

	// Name: Origin name which must be unique within the endpoint.
	Name *string `json:"name,omitempty"`

	// OriginHostHeader: The host header value sent to the origin with each request. If you leave this blank, the request
	// hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host
	// header value to match the origin hostname by default.
	OriginHostHeader *string `json:"originHostHeader,omitempty"`

	// Priority: Priority of origin in given origin group for load balancing. Higher priorities will not be used for load
	// balancing if any lower priority origin is healthy.Must be between 1 and 5.
	Priority *int `json:"priority,omitempty"`

	// PrivateEndpointStatus: The approval status for the connection to the Private Link
	PrivateEndpointStatus *PrivateEndpointStatus_STATUS `json:"privateEndpointStatus,omitempty"`

	// PrivateLinkAlias: The Alias of the Private Link resource. Populating this optional field indicates that this origin is
	// 'Private'
	PrivateLinkAlias *string `json:"privateLinkAlias,omitempty"`

	// PrivateLinkApprovalMessage: A custom message to be included in the approval request to connect to the Private Link.
	PrivateLinkApprovalMessage *string `json:"privateLinkApprovalMessage,omitempty"`

	// PrivateLinkLocation: The location of the Private Link resource. Required only if 'privateLinkResourceId' is populated
	PrivateLinkLocation *string `json:"privateLinkLocation,omitempty"`

	// PrivateLinkResourceId: The Resource Id of the Private Link resource. Populating this optional field indicates that this
	// backend is 'Private'
	PrivateLinkResourceId *string `json:"privateLinkResourceId,omitempty"`

	// Weight: Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
	Weight *int `json:"weight,omitempty"`
}

var _ genruntime.FromARMConverter = &DeepCreatedOrigin_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (origin *DeepCreatedOrigin_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeepCreatedOrigin_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (origin *DeepCreatedOrigin_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeepCreatedOrigin_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeepCreatedOrigin_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Enabled != nil {
			enabled := *typedInput.Properties.Enabled
			origin.Enabled = &enabled
		}
	}

	// Set property ‘HostName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostName != nil {
			hostName := *typedInput.Properties.HostName
			origin.HostName = &hostName
		}
	}

	// Set property ‘HttpPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HttpPort != nil {
			httpPort := *typedInput.Properties.HttpPort
			origin.HttpPort = &httpPort
		}
	}

	// Set property ‘HttpsPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HttpsPort != nil {
			httpsPort := *typedInput.Properties.HttpsPort
			origin.HttpsPort = &httpsPort
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		origin.Name = &name
	}

	// Set property ‘OriginHostHeader’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OriginHostHeader != nil {
			originHostHeader := *typedInput.Properties.OriginHostHeader
			origin.OriginHostHeader = &originHostHeader
		}
	}

	// Set property ‘Priority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Priority != nil {
			priority := *typedInput.Properties.Priority
			origin.Priority = &priority
		}
	}

	// Set property ‘PrivateEndpointStatus’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpointStatus != nil {
			privateEndpointStatus := *typedInput.Properties.PrivateEndpointStatus
			origin.PrivateEndpointStatus = &privateEndpointStatus
		}
	}

	// Set property ‘PrivateLinkAlias’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkAlias != nil {
			privateLinkAlias := *typedInput.Properties.PrivateLinkAlias
			origin.PrivateLinkAlias = &privateLinkAlias
		}
	}

	// Set property ‘PrivateLinkApprovalMessage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkApprovalMessage != nil {
			privateLinkApprovalMessage := *typedInput.Properties.PrivateLinkApprovalMessage
			origin.PrivateLinkApprovalMessage = &privateLinkApprovalMessage
		}
	}

	// Set property ‘PrivateLinkLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkLocation != nil {
			privateLinkLocation := *typedInput.Properties.PrivateLinkLocation
			origin.PrivateLinkLocation = &privateLinkLocation
		}
	}

	// Set property ‘PrivateLinkResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkResourceId != nil {
			privateLinkResourceId := *typedInput.Properties.PrivateLinkResourceId
			origin.PrivateLinkResourceId = &privateLinkResourceId
		}
	}

	// Set property ‘Weight’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Weight != nil {
			weight := *typedInput.Properties.Weight
			origin.Weight = &weight
		}
	}

	// No error
	return nil
}

// AssignProperties_From_DeepCreatedOrigin_STATUS populates our DeepCreatedOrigin_STATUS from the provided source DeepCreatedOrigin_STATUS
func (origin *DeepCreatedOrigin_STATUS) AssignProperties_From_DeepCreatedOrigin_STATUS(source *v20210601s.DeepCreatedOrigin_STATUS) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		origin.Enabled = &enabled
	} else {
		origin.Enabled = nil
	}

	// HostName
	origin.HostName = genruntime.ClonePointerToString(source.HostName)

	// HttpPort
	origin.HttpPort = genruntime.ClonePointerToInt(source.HttpPort)

	// HttpsPort
	origin.HttpsPort = genruntime.ClonePointerToInt(source.HttpsPort)

	// Name
	origin.Name = genruntime.ClonePointerToString(source.Name)

	// OriginHostHeader
	origin.OriginHostHeader = genruntime.ClonePointerToString(source.OriginHostHeader)

	// Priority
	origin.Priority = genruntime.ClonePointerToInt(source.Priority)

	// PrivateEndpointStatus
	if source.PrivateEndpointStatus != nil {
		privateEndpointStatus := PrivateEndpointStatus_STATUS(*source.PrivateEndpointStatus)
		origin.PrivateEndpointStatus = &privateEndpointStatus
	} else {
		origin.PrivateEndpointStatus = nil
	}

	// PrivateLinkAlias
	origin.PrivateLinkAlias = genruntime.ClonePointerToString(source.PrivateLinkAlias)

	// PrivateLinkApprovalMessage
	origin.PrivateLinkApprovalMessage = genruntime.ClonePointerToString(source.PrivateLinkApprovalMessage)

	// PrivateLinkLocation
	origin.PrivateLinkLocation = genruntime.ClonePointerToString(source.PrivateLinkLocation)

	// PrivateLinkResourceId
	origin.PrivateLinkResourceId = genruntime.ClonePointerToString(source.PrivateLinkResourceId)

	// Weight
	origin.Weight = genruntime.ClonePointerToInt(source.Weight)

	// No error
	return nil
}

// AssignProperties_To_DeepCreatedOrigin_STATUS populates the provided destination DeepCreatedOrigin_STATUS from our DeepCreatedOrigin_STATUS
func (origin *DeepCreatedOrigin_STATUS) AssignProperties_To_DeepCreatedOrigin_STATUS(destination *v20210601s.DeepCreatedOrigin_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if origin.Enabled != nil {
		enabled := *origin.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// HostName
	destination.HostName = genruntime.ClonePointerToString(origin.HostName)

	// HttpPort
	destination.HttpPort = genruntime.ClonePointerToInt(origin.HttpPort)

	// HttpsPort
	destination.HttpsPort = genruntime.ClonePointerToInt(origin.HttpsPort)

	// Name
	destination.Name = genruntime.ClonePointerToString(origin.Name)

	// OriginHostHeader
	destination.OriginHostHeader = genruntime.ClonePointerToString(origin.OriginHostHeader)

	// Priority
	destination.Priority = genruntime.ClonePointerToInt(origin.Priority)

	// PrivateEndpointStatus
	if origin.PrivateEndpointStatus != nil {
		privateEndpointStatus := string(*origin.PrivateEndpointStatus)
		destination.PrivateEndpointStatus = &privateEndpointStatus
	} else {
		destination.PrivateEndpointStatus = nil
	}

	// PrivateLinkAlias
	destination.PrivateLinkAlias = genruntime.ClonePointerToString(origin.PrivateLinkAlias)

	// PrivateLinkApprovalMessage
	destination.PrivateLinkApprovalMessage = genruntime.ClonePointerToString(origin.PrivateLinkApprovalMessage)

	// PrivateLinkLocation
	destination.PrivateLinkLocation = genruntime.ClonePointerToString(origin.PrivateLinkLocation)

	// PrivateLinkResourceId
	destination.PrivateLinkResourceId = genruntime.ClonePointerToString(origin.PrivateLinkResourceId)

	// Weight
	destination.Weight = genruntime.ClonePointerToInt(origin.Weight)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeepCreatedOriginGroup_STATUS struct {
	// HealthProbeSettings: Health probe settings to the origin that is used to determine the health of the origin.
	HealthProbeSettings *HealthProbeParameters_STATUS `json:"healthProbeSettings,omitempty"`

	// Name: Origin group name which must be unique within the endpoint.
	Name *string `json:"name,omitempty"`

	// Origins: The source of the content being delivered via CDN within given origin group.
	Origins []ResourceReference_STATUS `json:"origins,omitempty"`

	// ResponseBasedOriginErrorDetectionSettings: The JSON object that contains the properties to determine origin health using
	// real requests/responses.This property is currently not supported.
	ResponseBasedOriginErrorDetectionSettings *ResponseBasedOriginErrorDetectionParameters_STATUS `json:"responseBasedOriginErrorDetectionSettings,omitempty"`

	// TrafficRestorationTimeToHealedOrNewEndpointsInMinutes: Time in minutes to shift the traffic to the endpoint gradually
	// when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not
	// supported.
	TrafficRestorationTimeToHealedOrNewEndpointsInMinutes *int `json:"trafficRestorationTimeToHealedOrNewEndpointsInMinutes,omitempty"`
}

var _ genruntime.FromARMConverter = &DeepCreatedOriginGroup_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (group *DeepCreatedOriginGroup_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeepCreatedOriginGroup_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (group *DeepCreatedOriginGroup_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeepCreatedOriginGroup_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeepCreatedOriginGroup_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘HealthProbeSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HealthProbeSettings != nil {
			var healthProbeSettings1 HealthProbeParameters_STATUS
			err := healthProbeSettings1.PopulateFromARM(owner, *typedInput.Properties.HealthProbeSettings)
			if err != nil {
				return err
			}
			healthProbeSettings := healthProbeSettings1
			group.HealthProbeSettings = &healthProbeSettings
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		group.Name = &name
	}

	// Set property ‘Origins’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Origins {
			var item1 ResourceReference_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			group.Origins = append(group.Origins, item1)
		}
	}

	// Set property ‘ResponseBasedOriginErrorDetectionSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResponseBasedOriginErrorDetectionSettings != nil {
			var responseBasedOriginErrorDetectionSettings1 ResponseBasedOriginErrorDetectionParameters_STATUS
			err := responseBasedOriginErrorDetectionSettings1.PopulateFromARM(owner, *typedInput.Properties.ResponseBasedOriginErrorDetectionSettings)
			if err != nil {
				return err
			}
			responseBasedOriginErrorDetectionSettings := responseBasedOriginErrorDetectionSettings1
			group.ResponseBasedOriginErrorDetectionSettings = &responseBasedOriginErrorDetectionSettings
		}
	}

	// Set property ‘TrafficRestorationTimeToHealedOrNewEndpointsInMinutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes != nil {
			trafficRestorationTimeToHealedOrNewEndpointsInMinutes := *typedInput.Properties.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes
			group.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = &trafficRestorationTimeToHealedOrNewEndpointsInMinutes
		}
	}

	// No error
	return nil
}

// AssignProperties_From_DeepCreatedOriginGroup_STATUS populates our DeepCreatedOriginGroup_STATUS from the provided source DeepCreatedOriginGroup_STATUS
func (group *DeepCreatedOriginGroup_STATUS) AssignProperties_From_DeepCreatedOriginGroup_STATUS(source *v20210601s.DeepCreatedOriginGroup_STATUS) error {

	// HealthProbeSettings
	if source.HealthProbeSettings != nil {
		var healthProbeSetting HealthProbeParameters_STATUS
		err := healthProbeSetting.AssignProperties_From_HealthProbeParameters_STATUS(source.HealthProbeSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HealthProbeParameters_STATUS() to populate field HealthProbeSettings")
		}
		group.HealthProbeSettings = &healthProbeSetting
	} else {
		group.HealthProbeSettings = nil
	}

	// Name
	group.Name = genruntime.ClonePointerToString(source.Name)

	// Origins
	if source.Origins != nil {
		originList := make([]ResourceReference_STATUS, len(source.Origins))
		for originIndex, originItem := range source.Origins {
			// Shadow the loop variable to avoid aliasing
			originItem := originItem
			var origin ResourceReference_STATUS
			err := origin.AssignProperties_From_ResourceReference_STATUS(&originItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ResourceReference_STATUS() to populate field Origins")
			}
			originList[originIndex] = origin
		}
		group.Origins = originList
	} else {
		group.Origins = nil
	}

	// ResponseBasedOriginErrorDetectionSettings
	if source.ResponseBasedOriginErrorDetectionSettings != nil {
		var responseBasedOriginErrorDetectionSetting ResponseBasedOriginErrorDetectionParameters_STATUS
		err := responseBasedOriginErrorDetectionSetting.AssignProperties_From_ResponseBasedOriginErrorDetectionParameters_STATUS(source.ResponseBasedOriginErrorDetectionSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ResponseBasedOriginErrorDetectionParameters_STATUS() to populate field ResponseBasedOriginErrorDetectionSettings")
		}
		group.ResponseBasedOriginErrorDetectionSettings = &responseBasedOriginErrorDetectionSetting
	} else {
		group.ResponseBasedOriginErrorDetectionSettings = nil
	}

	// TrafficRestorationTimeToHealedOrNewEndpointsInMinutes
	group.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = genruntime.ClonePointerToInt(source.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes)

	// No error
	return nil
}

// AssignProperties_To_DeepCreatedOriginGroup_STATUS populates the provided destination DeepCreatedOriginGroup_STATUS from our DeepCreatedOriginGroup_STATUS
func (group *DeepCreatedOriginGroup_STATUS) AssignProperties_To_DeepCreatedOriginGroup_STATUS(destination *v20210601s.DeepCreatedOriginGroup_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HealthProbeSettings
	if group.HealthProbeSettings != nil {
		var healthProbeSetting v20210601s.HealthProbeParameters_STATUS
		err := group.HealthProbeSettings.AssignProperties_To_HealthProbeParameters_STATUS(&healthProbeSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HealthProbeParameters_STATUS() to populate field HealthProbeSettings")
		}
		destination.HealthProbeSettings = &healthProbeSetting
	} else {
		destination.HealthProbeSettings = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(group.Name)

	// Origins
	if group.Origins != nil {
		originList := make([]v20210601s.ResourceReference_STATUS, len(group.Origins))
		for originIndex, originItem := range group.Origins {
			// Shadow the loop variable to avoid aliasing
			originItem := originItem
			var origin v20210601s.ResourceReference_STATUS
			err := originItem.AssignProperties_To_ResourceReference_STATUS(&origin)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ResourceReference_STATUS() to populate field Origins")
			}
			originList[originIndex] = origin
		}
		destination.Origins = originList
	} else {
		destination.Origins = nil
	}

	// ResponseBasedOriginErrorDetectionSettings
	if group.ResponseBasedOriginErrorDetectionSettings != nil {
		var responseBasedOriginErrorDetectionSetting v20210601s.ResponseBasedOriginErrorDetectionParameters_STATUS
		err := group.ResponseBasedOriginErrorDetectionSettings.AssignProperties_To_ResponseBasedOriginErrorDetectionParameters_STATUS(&responseBasedOriginErrorDetectionSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ResponseBasedOriginErrorDetectionParameters_STATUS() to populate field ResponseBasedOriginErrorDetectionSettings")
		}
		destination.ResponseBasedOriginErrorDetectionSettings = &responseBasedOriginErrorDetectionSetting
	} else {
		destination.ResponseBasedOriginErrorDetectionSettings = nil
	}

	// TrafficRestorationTimeToHealedOrNewEndpointsInMinutes
	destination.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = genruntime.ClonePointerToInt(group.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EndpointProperties_DeliveryPolicy_STATUS struct {
	// Description: User-friendly description of the policy.
	Description *string `json:"description,omitempty"`

	// Rules: A list of the delivery rules.
	Rules []DeliveryRule_STATUS `json:"rules,omitempty"`
}

var _ genruntime.FromARMConverter = &EndpointProperties_DeliveryPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *EndpointProperties_DeliveryPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EndpointProperties_DeliveryPolicy_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *EndpointProperties_DeliveryPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EndpointProperties_DeliveryPolicy_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EndpointProperties_DeliveryPolicy_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Description’:
	if typedInput.Description != nil {
		description := *typedInput.Description
		policy.Description = &description
	}

	// Set property ‘Rules’:
	for _, item := range typedInput.Rules {
		var item1 DeliveryRule_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.Rules = append(policy.Rules, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_EndpointProperties_DeliveryPolicy_STATUS populates our EndpointProperties_DeliveryPolicy_STATUS from the provided source EndpointProperties_DeliveryPolicy_STATUS
func (policy *EndpointProperties_DeliveryPolicy_STATUS) AssignProperties_From_EndpointProperties_DeliveryPolicy_STATUS(source *v20210601s.EndpointProperties_DeliveryPolicy_STATUS) error {

	// Description
	policy.Description = genruntime.ClonePointerToString(source.Description)

	// Rules
	if source.Rules != nil {
		ruleList := make([]DeliveryRule_STATUS, len(source.Rules))
		for ruleIndex, ruleItem := range source.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule DeliveryRule_STATUS
			err := rule.AssignProperties_From_DeliveryRule_STATUS(&ruleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_DeliveryRule_STATUS() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		policy.Rules = ruleList
	} else {
		policy.Rules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EndpointProperties_DeliveryPolicy_STATUS populates the provided destination EndpointProperties_DeliveryPolicy_STATUS from our EndpointProperties_DeliveryPolicy_STATUS
func (policy *EndpointProperties_DeliveryPolicy_STATUS) AssignProperties_To_EndpointProperties_DeliveryPolicy_STATUS(destination *v20210601s.EndpointProperties_DeliveryPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Description
	destination.Description = genruntime.ClonePointerToString(policy.Description)

	// Rules
	if policy.Rules != nil {
		ruleList := make([]v20210601s.DeliveryRule_STATUS, len(policy.Rules))
		for ruleIndex, ruleItem := range policy.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule v20210601s.DeliveryRule_STATUS
			err := ruleItem.AssignProperties_To_DeliveryRule_STATUS(&rule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_DeliveryRule_STATUS() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		destination.Rules = ruleList
	} else {
		destination.Rules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EndpointProperties_WebApplicationFirewallPolicyLink_STATUS struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &EndpointProperties_WebApplicationFirewallPolicyLink_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (link *EndpointProperties_WebApplicationFirewallPolicyLink_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (link *EndpointProperties_WebApplicationFirewallPolicyLink_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		link.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS populates our EndpointProperties_WebApplicationFirewallPolicyLink_STATUS from the provided source EndpointProperties_WebApplicationFirewallPolicyLink_STATUS
func (link *EndpointProperties_WebApplicationFirewallPolicyLink_STATUS) AssignProperties_From_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS(source *v20210601s.EndpointProperties_WebApplicationFirewallPolicyLink_STATUS) error {

	// Id
	link.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS populates the provided destination EndpointProperties_WebApplicationFirewallPolicyLink_STATUS from our EndpointProperties_WebApplicationFirewallPolicyLink_STATUS
func (link *EndpointProperties_WebApplicationFirewallPolicyLink_STATUS) AssignProperties_To_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS(destination *v20210601s.EndpointProperties_WebApplicationFirewallPolicyLink_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(link.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/EndpointPropertiesUpdateParametersDeliveryPolicy
type EndpointPropertiesUpdateParametersDeliveryPolicy struct {
	// Description: User-friendly description of the policy.
	Description *string `json:"description,omitempty"`

	// +kubebuilder:validation:Required
	// Rules: A list of the delivery rules.
	Rules []DeliveryRule `json:"rules,omitempty"`
}

var _ genruntime.ARMTransformer = &EndpointPropertiesUpdateParametersDeliveryPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *EndpointPropertiesUpdateParametersDeliveryPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &EndpointPropertiesUpdateParametersDeliveryPolicy_ARM{}

	// Set property ‘Description’:
	if policy.Description != nil {
		description := *policy.Description
		result.Description = &description
	}

	// Set property ‘Rules’:
	for _, item := range policy.Rules {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Rules = append(result.Rules, *item_ARM.(*DeliveryRule_ARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *EndpointPropertiesUpdateParametersDeliveryPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EndpointPropertiesUpdateParametersDeliveryPolicy_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *EndpointPropertiesUpdateParametersDeliveryPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EndpointPropertiesUpdateParametersDeliveryPolicy_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EndpointPropertiesUpdateParametersDeliveryPolicy_ARM, got %T", armInput)
	}

	// Set property ‘Description’:
	if typedInput.Description != nil {
		description := *typedInput.Description
		policy.Description = &description
	}

	// Set property ‘Rules’:
	for _, item := range typedInput.Rules {
		var item1 DeliveryRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		policy.Rules = append(policy.Rules, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_EndpointPropertiesUpdateParametersDeliveryPolicy populates our EndpointPropertiesUpdateParametersDeliveryPolicy from the provided source EndpointPropertiesUpdateParametersDeliveryPolicy
func (policy *EndpointPropertiesUpdateParametersDeliveryPolicy) AssignProperties_From_EndpointPropertiesUpdateParametersDeliveryPolicy(source *v20210601s.EndpointPropertiesUpdateParametersDeliveryPolicy) error {

	// Description
	policy.Description = genruntime.ClonePointerToString(source.Description)

	// Rules
	if source.Rules != nil {
		ruleList := make([]DeliveryRule, len(source.Rules))
		for ruleIndex, ruleItem := range source.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule DeliveryRule
			err := rule.AssignProperties_From_DeliveryRule(&ruleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_DeliveryRule() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		policy.Rules = ruleList
	} else {
		policy.Rules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EndpointPropertiesUpdateParametersDeliveryPolicy populates the provided destination EndpointPropertiesUpdateParametersDeliveryPolicy from our EndpointPropertiesUpdateParametersDeliveryPolicy
func (policy *EndpointPropertiesUpdateParametersDeliveryPolicy) AssignProperties_To_EndpointPropertiesUpdateParametersDeliveryPolicy(destination *v20210601s.EndpointPropertiesUpdateParametersDeliveryPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Description
	destination.Description = genruntime.ClonePointerToString(policy.Description)

	// Rules
	if policy.Rules != nil {
		ruleList := make([]v20210601s.DeliveryRule, len(policy.Rules))
		for ruleIndex, ruleItem := range policy.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule v20210601s.DeliveryRule
			err := ruleItem.AssignProperties_To_DeliveryRule(&rule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_DeliveryRule() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		destination.Rules = ruleList
	} else {
		destination.Rules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink
type EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink struct {
	// Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (link *EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if link == nil {
		return nil, nil
	}
	result := &EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink_ARM{}

	// Set property ‘Id’:
	if link.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.Lookup(*link.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (link *EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (link *EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink_ARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignProperties_From_EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink populates our EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink from the provided source EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink
func (link *EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink) AssignProperties_From_EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink(source *v20210601s.EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink) error {

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		link.Reference = &reference
	} else {
		link.Reference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink populates the provided destination EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink from our EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink
func (link *EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink) AssignProperties_To_EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink(destination *v20210601s.EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if link.Reference != nil {
		reference := link.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/GeoFilter
type GeoFilter struct {
	// +kubebuilder:validation:Required
	// Action: Action of the geo filter, i.e. allow or block access.
	Action *GeoFilter_Action `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	// CountryCodes: Two letter country or region codes defining user country or region access in a geo filter, e.g. AU, MX, US.
	CountryCodes []string `json:"countryCodes,omitempty"`

	// +kubebuilder:validation:Required
	// RelativePath: Relative path applicable to geo filter. (e.g. '/mypictures', '/mypicture/kitty.jpg', and etc.)
	RelativePath *string `json:"relativePath,omitempty"`
}

var _ genruntime.ARMTransformer = &GeoFilter{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (filter *GeoFilter) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if filter == nil {
		return nil, nil
	}
	result := &GeoFilter_ARM{}

	// Set property ‘Action’:
	if filter.Action != nil {
		action := *filter.Action
		result.Action = &action
	}

	// Set property ‘CountryCodes’:
	for _, item := range filter.CountryCodes {
		result.CountryCodes = append(result.CountryCodes, item)
	}

	// Set property ‘RelativePath’:
	if filter.RelativePath != nil {
		relativePath := *filter.RelativePath
		result.RelativePath = &relativePath
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *GeoFilter) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &GeoFilter_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *GeoFilter) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(GeoFilter_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected GeoFilter_ARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		filter.Action = &action
	}

	// Set property ‘CountryCodes’:
	for _, item := range typedInput.CountryCodes {
		filter.CountryCodes = append(filter.CountryCodes, item)
	}

	// Set property ‘RelativePath’:
	if typedInput.RelativePath != nil {
		relativePath := *typedInput.RelativePath
		filter.RelativePath = &relativePath
	}

	// No error
	return nil
}

// AssignProperties_From_GeoFilter populates our GeoFilter from the provided source GeoFilter
func (filter *GeoFilter) AssignProperties_From_GeoFilter(source *v20210601s.GeoFilter) error {

	// Action
	if source.Action != nil {
		action := GeoFilter_Action(*source.Action)
		filter.Action = &action
	} else {
		filter.Action = nil
	}

	// CountryCodes
	filter.CountryCodes = genruntime.CloneSliceOfString(source.CountryCodes)

	// RelativePath
	filter.RelativePath = genruntime.ClonePointerToString(source.RelativePath)

	// No error
	return nil
}

// AssignProperties_To_GeoFilter populates the provided destination GeoFilter from our GeoFilter
func (filter *GeoFilter) AssignProperties_To_GeoFilter(destination *v20210601s.GeoFilter) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if filter.Action != nil {
		action := string(*filter.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// CountryCodes
	destination.CountryCodes = genruntime.CloneSliceOfString(filter.CountryCodes)

	// RelativePath
	destination.RelativePath = genruntime.ClonePointerToString(filter.RelativePath)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type GeoFilter_STATUS struct {
	// Action: Action of the geo filter, i.e. allow or block access.
	Action *GeoFilter_Action_STATUS `json:"action,omitempty"`

	// CountryCodes: Two letter country or region codes defining user country or region access in a geo filter, e.g. AU, MX, US.
	CountryCodes []string `json:"countryCodes,omitempty"`

	// RelativePath: Relative path applicable to geo filter. (e.g. '/mypictures', '/mypicture/kitty.jpg', and etc.)
	RelativePath *string `json:"relativePath,omitempty"`
}

var _ genruntime.FromARMConverter = &GeoFilter_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (filter *GeoFilter_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &GeoFilter_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (filter *GeoFilter_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(GeoFilter_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected GeoFilter_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		filter.Action = &action
	}

	// Set property ‘CountryCodes’:
	for _, item := range typedInput.CountryCodes {
		filter.CountryCodes = append(filter.CountryCodes, item)
	}

	// Set property ‘RelativePath’:
	if typedInput.RelativePath != nil {
		relativePath := *typedInput.RelativePath
		filter.RelativePath = &relativePath
	}

	// No error
	return nil
}

// AssignProperties_From_GeoFilter_STATUS populates our GeoFilter_STATUS from the provided source GeoFilter_STATUS
func (filter *GeoFilter_STATUS) AssignProperties_From_GeoFilter_STATUS(source *v20210601s.GeoFilter_STATUS) error {

	// Action
	if source.Action != nil {
		action := GeoFilter_Action_STATUS(*source.Action)
		filter.Action = &action
	} else {
		filter.Action = nil
	}

	// CountryCodes
	filter.CountryCodes = genruntime.CloneSliceOfString(source.CountryCodes)

	// RelativePath
	filter.RelativePath = genruntime.ClonePointerToString(source.RelativePath)

	// No error
	return nil
}

// AssignProperties_To_GeoFilter_STATUS populates the provided destination GeoFilter_STATUS from our GeoFilter_STATUS
func (filter *GeoFilter_STATUS) AssignProperties_To_GeoFilter_STATUS(destination *v20210601s.GeoFilter_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if filter.Action != nil {
		action := string(*filter.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// CountryCodes
	destination.CountryCodes = genruntime.CloneSliceOfString(filter.CountryCodes)

	// RelativePath
	destination.RelativePath = genruntime.ClonePointerToString(filter.RelativePath)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"DynamicSiteAcceleration","GeneralMediaStreaming","GeneralWebDelivery","LargeFileDownload","VideoOnDemandMediaStreaming"}
type Profiles_Endpoint_Properties_OptimizationType_Spec string

const (
	Profiles_Endpoint_Properties_OptimizationType_Spec_DynamicSiteAcceleration     = Profiles_Endpoint_Properties_OptimizationType_Spec("DynamicSiteAcceleration")
	Profiles_Endpoint_Properties_OptimizationType_Spec_GeneralMediaStreaming       = Profiles_Endpoint_Properties_OptimizationType_Spec("GeneralMediaStreaming")
	Profiles_Endpoint_Properties_OptimizationType_Spec_GeneralWebDelivery          = Profiles_Endpoint_Properties_OptimizationType_Spec("GeneralWebDelivery")
	Profiles_Endpoint_Properties_OptimizationType_Spec_LargeFileDownload           = Profiles_Endpoint_Properties_OptimizationType_Spec("LargeFileDownload")
	Profiles_Endpoint_Properties_OptimizationType_Spec_VideoOnDemandMediaStreaming = Profiles_Endpoint_Properties_OptimizationType_Spec("VideoOnDemandMediaStreaming")
)

type Profiles_Endpoint_Properties_OriginGroups_Spec struct {
	// HealthProbeSettings: The JSON object that contains the properties to send health probes to origin.
	HealthProbeSettings *HealthProbeParameters `json:"healthProbeSettings,omitempty"`

	// +kubebuilder:validation:Required
	// Name: Origin group name which must be unique within the endpoint.
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Origins: The source of the content being delivered via CDN within given origin group.
	Origins []ResourceReference `json:"origins,omitempty"`

	// ResponseBasedOriginErrorDetectionSettings: The JSON object that contains the properties to determine origin health using
	// real requests/responses.
	ResponseBasedOriginErrorDetectionSettings *ResponseBasedOriginErrorDetectionParameters `json:"responseBasedOriginErrorDetectionSettings,omitempty"`

	// +kubebuilder:validation:Maximum=50
	// +kubebuilder:validation:Minimum=0
	// TrafficRestorationTimeToHealedOrNewEndpointsInMinutes: Time in minutes to shift the traffic to the endpoint gradually
	// when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not
	// supported.
	TrafficRestorationTimeToHealedOrNewEndpointsInMinutes *int `json:"trafficRestorationTimeToHealedOrNewEndpointsInMinutes,omitempty"`
}

var _ genruntime.ARMTransformer = &Profiles_Endpoint_Properties_OriginGroups_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (groups *Profiles_Endpoint_Properties_OriginGroups_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if groups == nil {
		return nil, nil
	}
	result := &Profiles_Endpoint_Properties_OriginGroups_Spec_ARM{}

	// Set property ‘Name’:
	if groups.Name != nil {
		name := *groups.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if groups.HealthProbeSettings != nil ||
		groups.Origins != nil ||
		groups.ResponseBasedOriginErrorDetectionSettings != nil ||
		groups.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes != nil {
		result.Properties = &DeepCreatedOriginGroupProperties_ARM{}
	}
	if groups.HealthProbeSettings != nil {
		healthProbeSettings_ARM, err := (*groups.HealthProbeSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		healthProbeSettings := *healthProbeSettings_ARM.(*HealthProbeParameters_ARM)
		result.Properties.HealthProbeSettings = &healthProbeSettings
	}
	for _, item := range groups.Origins {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Origins = append(result.Properties.Origins, *item_ARM.(*ResourceReference_ARM))
	}
	if groups.ResponseBasedOriginErrorDetectionSettings != nil {
		responseBasedOriginErrorDetectionSettings_ARM, err := (*groups.ResponseBasedOriginErrorDetectionSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		responseBasedOriginErrorDetectionSettings := *responseBasedOriginErrorDetectionSettings_ARM.(*ResponseBasedOriginErrorDetectionParameters_ARM)
		result.Properties.ResponseBasedOriginErrorDetectionSettings = &responseBasedOriginErrorDetectionSettings
	}
	if groups.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes != nil {
		trafficRestorationTimeToHealedOrNewEndpointsInMinutes := *groups.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes
		result.Properties.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = &trafficRestorationTimeToHealedOrNewEndpointsInMinutes
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (groups *Profiles_Endpoint_Properties_OriginGroups_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Profiles_Endpoint_Properties_OriginGroups_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (groups *Profiles_Endpoint_Properties_OriginGroups_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Profiles_Endpoint_Properties_OriginGroups_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Profiles_Endpoint_Properties_OriginGroups_Spec_ARM, got %T", armInput)
	}

	// Set property ‘HealthProbeSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HealthProbeSettings != nil {
			var healthProbeSettings1 HealthProbeParameters
			err := healthProbeSettings1.PopulateFromARM(owner, *typedInput.Properties.HealthProbeSettings)
			if err != nil {
				return err
			}
			healthProbeSettings := healthProbeSettings1
			groups.HealthProbeSettings = &healthProbeSettings
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		groups.Name = &name
	}

	// Set property ‘Origins’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Origins {
			var item1 ResourceReference
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			groups.Origins = append(groups.Origins, item1)
		}
	}

	// Set property ‘ResponseBasedOriginErrorDetectionSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResponseBasedOriginErrorDetectionSettings != nil {
			var responseBasedOriginErrorDetectionSettings1 ResponseBasedOriginErrorDetectionParameters
			err := responseBasedOriginErrorDetectionSettings1.PopulateFromARM(owner, *typedInput.Properties.ResponseBasedOriginErrorDetectionSettings)
			if err != nil {
				return err
			}
			responseBasedOriginErrorDetectionSettings := responseBasedOriginErrorDetectionSettings1
			groups.ResponseBasedOriginErrorDetectionSettings = &responseBasedOriginErrorDetectionSettings
		}
	}

	// Set property ‘TrafficRestorationTimeToHealedOrNewEndpointsInMinutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes != nil {
			trafficRestorationTimeToHealedOrNewEndpointsInMinutes := *typedInput.Properties.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes
			groups.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = &trafficRestorationTimeToHealedOrNewEndpointsInMinutes
		}
	}

	// No error
	return nil
}

// AssignProperties_From_Profiles_Endpoint_Properties_OriginGroups_Spec populates our Profiles_Endpoint_Properties_OriginGroups_Spec from the provided source Profiles_Endpoint_Properties_OriginGroups_Spec
func (groups *Profiles_Endpoint_Properties_OriginGroups_Spec) AssignProperties_From_Profiles_Endpoint_Properties_OriginGroups_Spec(source *v20210601s.Profiles_Endpoint_Properties_OriginGroups_Spec) error {

	// HealthProbeSettings
	if source.HealthProbeSettings != nil {
		var healthProbeSetting HealthProbeParameters
		err := healthProbeSetting.AssignProperties_From_HealthProbeParameters(source.HealthProbeSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HealthProbeParameters() to populate field HealthProbeSettings")
		}
		groups.HealthProbeSettings = &healthProbeSetting
	} else {
		groups.HealthProbeSettings = nil
	}

	// Name
	groups.Name = genruntime.ClonePointerToString(source.Name)

	// Origins
	if source.Origins != nil {
		originList := make([]ResourceReference, len(source.Origins))
		for originIndex, originItem := range source.Origins {
			// Shadow the loop variable to avoid aliasing
			originItem := originItem
			var origin ResourceReference
			err := origin.AssignProperties_From_ResourceReference(&originItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ResourceReference() to populate field Origins")
			}
			originList[originIndex] = origin
		}
		groups.Origins = originList
	} else {
		groups.Origins = nil
	}

	// ResponseBasedOriginErrorDetectionSettings
	if source.ResponseBasedOriginErrorDetectionSettings != nil {
		var responseBasedOriginErrorDetectionSetting ResponseBasedOriginErrorDetectionParameters
		err := responseBasedOriginErrorDetectionSetting.AssignProperties_From_ResponseBasedOriginErrorDetectionParameters(source.ResponseBasedOriginErrorDetectionSettings)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ResponseBasedOriginErrorDetectionParameters() to populate field ResponseBasedOriginErrorDetectionSettings")
		}
		groups.ResponseBasedOriginErrorDetectionSettings = &responseBasedOriginErrorDetectionSetting
	} else {
		groups.ResponseBasedOriginErrorDetectionSettings = nil
	}

	// TrafficRestorationTimeToHealedOrNewEndpointsInMinutes
	if source.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes != nil {
		trafficRestorationTimeToHealedOrNewEndpointsInMinute := *source.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes
		groups.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = &trafficRestorationTimeToHealedOrNewEndpointsInMinute
	} else {
		groups.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Profiles_Endpoint_Properties_OriginGroups_Spec populates the provided destination Profiles_Endpoint_Properties_OriginGroups_Spec from our Profiles_Endpoint_Properties_OriginGroups_Spec
func (groups *Profiles_Endpoint_Properties_OriginGroups_Spec) AssignProperties_To_Profiles_Endpoint_Properties_OriginGroups_Spec(destination *v20210601s.Profiles_Endpoint_Properties_OriginGroups_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HealthProbeSettings
	if groups.HealthProbeSettings != nil {
		var healthProbeSetting v20210601s.HealthProbeParameters
		err := groups.HealthProbeSettings.AssignProperties_To_HealthProbeParameters(&healthProbeSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HealthProbeParameters() to populate field HealthProbeSettings")
		}
		destination.HealthProbeSettings = &healthProbeSetting
	} else {
		destination.HealthProbeSettings = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(groups.Name)

	// Origins
	if groups.Origins != nil {
		originList := make([]v20210601s.ResourceReference, len(groups.Origins))
		for originIndex, originItem := range groups.Origins {
			// Shadow the loop variable to avoid aliasing
			originItem := originItem
			var origin v20210601s.ResourceReference
			err := originItem.AssignProperties_To_ResourceReference(&origin)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ResourceReference() to populate field Origins")
			}
			originList[originIndex] = origin
		}
		destination.Origins = originList
	} else {
		destination.Origins = nil
	}

	// ResponseBasedOriginErrorDetectionSettings
	if groups.ResponseBasedOriginErrorDetectionSettings != nil {
		var responseBasedOriginErrorDetectionSetting v20210601s.ResponseBasedOriginErrorDetectionParameters
		err := groups.ResponseBasedOriginErrorDetectionSettings.AssignProperties_To_ResponseBasedOriginErrorDetectionParameters(&responseBasedOriginErrorDetectionSetting)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ResponseBasedOriginErrorDetectionParameters() to populate field ResponseBasedOriginErrorDetectionSettings")
		}
		destination.ResponseBasedOriginErrorDetectionSettings = &responseBasedOriginErrorDetectionSetting
	} else {
		destination.ResponseBasedOriginErrorDetectionSettings = nil
	}

	// TrafficRestorationTimeToHealedOrNewEndpointsInMinutes
	if groups.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes != nil {
		trafficRestorationTimeToHealedOrNewEndpointsInMinute := *groups.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes
		destination.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = &trafficRestorationTimeToHealedOrNewEndpointsInMinute
	} else {
		destination.TrafficRestorationTimeToHealedOrNewEndpointsInMinutes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Profiles_Endpoint_Properties_Origins_Spec struct {
	// Enabled: Origin is enabled for load balancing or not. By default, origin is always enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	// HostName: The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique
	// across all origins in an endpoint.
	HostName *string `json:"hostName,omitempty"`

	// +kubebuilder:validation:Maximum=65535
	// +kubebuilder:validation:Minimum=1
	// HttpPort: The value of the HTTP port. Must be between 1 and 65535.
	HttpPort *int `json:"httpPort,omitempty"`

	// +kubebuilder:validation:Maximum=65535
	// +kubebuilder:validation:Minimum=1
	// HttpsPort: The value of the HTTPS port. Must be between 1 and 65535.
	HttpsPort *int `json:"httpsPort,omitempty"`

	// +kubebuilder:validation:Required
	// Name: Origin name which must be unique within the endpoint.
	Name *string `json:"name,omitempty"`

	// OriginHostHeader: The host header value sent to the origin with each request. If you leave this blank, the request
	// hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host
	// header value to match the origin hostname by default.
	OriginHostHeader *string `json:"originHostHeader,omitempty"`

	// +kubebuilder:validation:Maximum=5
	// +kubebuilder:validation:Minimum=1
	// Priority: Priority of origin in given origin group for load balancing. Higher priorities will not be used for load
	// balancing if any lower priority origin is healthy.Must be between 1 and 5.
	Priority *int `json:"priority,omitempty"`

	// PrivateLinkAlias: The Alias of the Private Link resource. Populating this optional field indicates that this origin is
	// 'Private'
	PrivateLinkAlias *string `json:"privateLinkAlias,omitempty"`

	// PrivateLinkApprovalMessage: A custom message to be included in the approval request to connect to the Private Link.
	PrivateLinkApprovalMessage *string `json:"privateLinkApprovalMessage,omitempty"`

	// PrivateLinkLocationReference: The location of the Private Link resource. Required only if 'privateLinkResourceId' is
	// populated
	PrivateLinkLocationReference *genruntime.ResourceReference `armReference:"PrivateLinkLocation" json:"privateLinkLocationReference,omitempty"`

	// PrivateLinkResourceReference: The Resource Id of the Private Link resource. Populating this optional field indicates
	// that this backend is 'Private'
	PrivateLinkResourceReference *genruntime.ResourceReference `armReference:"PrivateLinkResourceId" json:"privateLinkResourceReference,omitempty"`

	// +kubebuilder:validation:Maximum=1000
	// +kubebuilder:validation:Minimum=1
	// Weight: Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
	Weight *int `json:"weight,omitempty"`
}

var _ genruntime.ARMTransformer = &Profiles_Endpoint_Properties_Origins_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (origins *Profiles_Endpoint_Properties_Origins_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if origins == nil {
		return nil, nil
	}
	result := &Profiles_Endpoint_Properties_Origins_Spec_ARM{}

	// Set property ‘Name’:
	if origins.Name != nil {
		name := *origins.Name
		result.Name = &name
	}

	// Set property ‘Properties’:
	if origins.Enabled != nil ||
		origins.HostName != nil ||
		origins.HttpPort != nil ||
		origins.HttpsPort != nil ||
		origins.OriginHostHeader != nil ||
		origins.Priority != nil ||
		origins.PrivateLinkAlias != nil ||
		origins.PrivateLinkApprovalMessage != nil ||
		origins.PrivateLinkLocationReference != nil ||
		origins.PrivateLinkResourceReference != nil ||
		origins.Weight != nil {
		result.Properties = &DeepCreatedOriginProperties_ARM{}
	}
	if origins.Enabled != nil {
		enabled := *origins.Enabled
		result.Properties.Enabled = &enabled
	}
	if origins.HostName != nil {
		hostName := *origins.HostName
		result.Properties.HostName = &hostName
	}
	if origins.HttpPort != nil {
		httpPort := *origins.HttpPort
		result.Properties.HttpPort = &httpPort
	}
	if origins.HttpsPort != nil {
		httpsPort := *origins.HttpsPort
		result.Properties.HttpsPort = &httpsPort
	}
	if origins.OriginHostHeader != nil {
		originHostHeader := *origins.OriginHostHeader
		result.Properties.OriginHostHeader = &originHostHeader
	}
	if origins.Priority != nil {
		priority := *origins.Priority
		result.Properties.Priority = &priority
	}
	if origins.PrivateLinkAlias != nil {
		privateLinkAlias := *origins.PrivateLinkAlias
		result.Properties.PrivateLinkAlias = &privateLinkAlias
	}
	if origins.PrivateLinkApprovalMessage != nil {
		privateLinkApprovalMessage := *origins.PrivateLinkApprovalMessage
		result.Properties.PrivateLinkApprovalMessage = &privateLinkApprovalMessage
	}
	if origins.PrivateLinkLocationReference != nil {
		privateLinkLocationARMID, err := resolved.ResolvedReferences.Lookup(*origins.PrivateLinkLocationReference)
		if err != nil {
			return nil, err
		}
		privateLinkLocation := privateLinkLocationARMID
		result.Properties.PrivateLinkLocation = &privateLinkLocation
	}
	if origins.PrivateLinkResourceReference != nil {
		privateLinkResourceIdARMID, err := resolved.ResolvedReferences.Lookup(*origins.PrivateLinkResourceReference)
		if err != nil {
			return nil, err
		}
		privateLinkResourceId := privateLinkResourceIdARMID
		result.Properties.PrivateLinkResourceId = &privateLinkResourceId
	}
	if origins.Weight != nil {
		weight := *origins.Weight
		result.Properties.Weight = &weight
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (origins *Profiles_Endpoint_Properties_Origins_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Profiles_Endpoint_Properties_Origins_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (origins *Profiles_Endpoint_Properties_Origins_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Profiles_Endpoint_Properties_Origins_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Profiles_Endpoint_Properties_Origins_Spec_ARM, got %T", armInput)
	}

	// Set property ‘Enabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Enabled != nil {
			enabled := *typedInput.Properties.Enabled
			origins.Enabled = &enabled
		}
	}

	// Set property ‘HostName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HostName != nil {
			hostName := *typedInput.Properties.HostName
			origins.HostName = &hostName
		}
	}

	// Set property ‘HttpPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HttpPort != nil {
			httpPort := *typedInput.Properties.HttpPort
			origins.HttpPort = &httpPort
		}
	}

	// Set property ‘HttpsPort’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HttpsPort != nil {
			httpsPort := *typedInput.Properties.HttpsPort
			origins.HttpsPort = &httpsPort
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		origins.Name = &name
	}

	// Set property ‘OriginHostHeader’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.OriginHostHeader != nil {
			originHostHeader := *typedInput.Properties.OriginHostHeader
			origins.OriginHostHeader = &originHostHeader
		}
	}

	// Set property ‘Priority’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Priority != nil {
			priority := *typedInput.Properties.Priority
			origins.Priority = &priority
		}
	}

	// Set property ‘PrivateLinkAlias’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkAlias != nil {
			privateLinkAlias := *typedInput.Properties.PrivateLinkAlias
			origins.PrivateLinkAlias = &privateLinkAlias
		}
	}

	// Set property ‘PrivateLinkApprovalMessage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkApprovalMessage != nil {
			privateLinkApprovalMessage := *typedInput.Properties.PrivateLinkApprovalMessage
			origins.PrivateLinkApprovalMessage = &privateLinkApprovalMessage
		}
	}

	// no assignment for property ‘PrivateLinkLocationReference’

	// no assignment for property ‘PrivateLinkResourceReference’

	// Set property ‘Weight’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Weight != nil {
			weight := *typedInput.Properties.Weight
			origins.Weight = &weight
		}
	}

	// No error
	return nil
}

// AssignProperties_From_Profiles_Endpoint_Properties_Origins_Spec populates our Profiles_Endpoint_Properties_Origins_Spec from the provided source Profiles_Endpoint_Properties_Origins_Spec
func (origins *Profiles_Endpoint_Properties_Origins_Spec) AssignProperties_From_Profiles_Endpoint_Properties_Origins_Spec(source *v20210601s.Profiles_Endpoint_Properties_Origins_Spec) error {

	// Enabled
	if source.Enabled != nil {
		enabled := *source.Enabled
		origins.Enabled = &enabled
	} else {
		origins.Enabled = nil
	}

	// HostName
	origins.HostName = genruntime.ClonePointerToString(source.HostName)

	// HttpPort
	if source.HttpPort != nil {
		httpPort := *source.HttpPort
		origins.HttpPort = &httpPort
	} else {
		origins.HttpPort = nil
	}

	// HttpsPort
	if source.HttpsPort != nil {
		httpsPort := *source.HttpsPort
		origins.HttpsPort = &httpsPort
	} else {
		origins.HttpsPort = nil
	}

	// Name
	origins.Name = genruntime.ClonePointerToString(source.Name)

	// OriginHostHeader
	origins.OriginHostHeader = genruntime.ClonePointerToString(source.OriginHostHeader)

	// Priority
	if source.Priority != nil {
		priority := *source.Priority
		origins.Priority = &priority
	} else {
		origins.Priority = nil
	}

	// PrivateLinkAlias
	origins.PrivateLinkAlias = genruntime.ClonePointerToString(source.PrivateLinkAlias)

	// PrivateLinkApprovalMessage
	origins.PrivateLinkApprovalMessage = genruntime.ClonePointerToString(source.PrivateLinkApprovalMessage)

	// PrivateLinkLocationReference
	if source.PrivateLinkLocationReference != nil {
		privateLinkLocationReference := source.PrivateLinkLocationReference.Copy()
		origins.PrivateLinkLocationReference = &privateLinkLocationReference
	} else {
		origins.PrivateLinkLocationReference = nil
	}

	// PrivateLinkResourceReference
	if source.PrivateLinkResourceReference != nil {
		privateLinkResourceReference := source.PrivateLinkResourceReference.Copy()
		origins.PrivateLinkResourceReference = &privateLinkResourceReference
	} else {
		origins.PrivateLinkResourceReference = nil
	}

	// Weight
	if source.Weight != nil {
		weight := *source.Weight
		origins.Weight = &weight
	} else {
		origins.Weight = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Profiles_Endpoint_Properties_Origins_Spec populates the provided destination Profiles_Endpoint_Properties_Origins_Spec from our Profiles_Endpoint_Properties_Origins_Spec
func (origins *Profiles_Endpoint_Properties_Origins_Spec) AssignProperties_To_Profiles_Endpoint_Properties_Origins_Spec(destination *v20210601s.Profiles_Endpoint_Properties_Origins_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Enabled
	if origins.Enabled != nil {
		enabled := *origins.Enabled
		destination.Enabled = &enabled
	} else {
		destination.Enabled = nil
	}

	// HostName
	destination.HostName = genruntime.ClonePointerToString(origins.HostName)

	// HttpPort
	if origins.HttpPort != nil {
		httpPort := *origins.HttpPort
		destination.HttpPort = &httpPort
	} else {
		destination.HttpPort = nil
	}

	// HttpsPort
	if origins.HttpsPort != nil {
		httpsPort := *origins.HttpsPort
		destination.HttpsPort = &httpsPort
	} else {
		destination.HttpsPort = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(origins.Name)

	// OriginHostHeader
	destination.OriginHostHeader = genruntime.ClonePointerToString(origins.OriginHostHeader)

	// Priority
	if origins.Priority != nil {
		priority := *origins.Priority
		destination.Priority = &priority
	} else {
		destination.Priority = nil
	}

	// PrivateLinkAlias
	destination.PrivateLinkAlias = genruntime.ClonePointerToString(origins.PrivateLinkAlias)

	// PrivateLinkApprovalMessage
	destination.PrivateLinkApprovalMessage = genruntime.ClonePointerToString(origins.PrivateLinkApprovalMessage)

	// PrivateLinkLocationReference
	if origins.PrivateLinkLocationReference != nil {
		privateLinkLocationReference := origins.PrivateLinkLocationReference.Copy()
		destination.PrivateLinkLocationReference = &privateLinkLocationReference
	} else {
		destination.PrivateLinkLocationReference = nil
	}

	// PrivateLinkResourceReference
	if origins.PrivateLinkResourceReference != nil {
		privateLinkResourceReference := origins.PrivateLinkResourceReference.Copy()
		destination.PrivateLinkResourceReference = &privateLinkResourceReference
	} else {
		destination.PrivateLinkResourceReference = nil
	}

	// Weight
	if origins.Weight != nil {
		weight := *origins.Weight
		destination.Weight = &weight
	} else {
		destination.Weight = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"BypassCaching","IgnoreQueryString","NotSet","UseQueryString"}
type Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec string

const (
	Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec_BypassCaching     = Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec("BypassCaching")
	Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec_IgnoreQueryString = Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec("IgnoreQueryString")
	Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec_NotSet            = Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec("NotSet")
	Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec_UseQueryString    = Profiles_Endpoint_Properties_QueryStringCachingBehavior_Spec("UseQueryString")
)

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/ResourceReference
type ResourceReference struct {
	// Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &ResourceReference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *ResourceReference) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	result := &ResourceReference_ARM{}

	// Set property ‘Id’:
	if reference.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.Lookup(*reference.Reference)
		if err != nil {
			return nil, err
		}
		reference1 := referenceARMID
		result.Id = &reference1
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *ResourceReference) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceReference_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *ResourceReference) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(ResourceReference_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceReference_ARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignProperties_From_ResourceReference populates our ResourceReference from the provided source ResourceReference
func (reference *ResourceReference) AssignProperties_From_ResourceReference(source *v20210601s.ResourceReference) error {

	// Reference
	if source.Reference != nil {
		referenceTemp := source.Reference.Copy()
		reference.Reference = &referenceTemp
	} else {
		reference.Reference = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ResourceReference populates the provided destination ResourceReference from our ResourceReference
func (reference *ResourceReference) AssignProperties_To_ResourceReference(destination *v20210601s.ResourceReference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if reference.Reference != nil {
		referenceTemp := reference.Reference.Copy()
		destination.Reference = &referenceTemp
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResourceReference_STATUS struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &ResourceReference_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *ResourceReference_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResourceReference_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *ResourceReference_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResourceReference_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResourceReference_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		reference.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_ResourceReference_STATUS populates our ResourceReference_STATUS from the provided source ResourceReference_STATUS
func (reference *ResourceReference_STATUS) AssignProperties_From_ResourceReference_STATUS(source *v20210601s.ResourceReference_STATUS) error {

	// Id
	reference.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_ResourceReference_STATUS populates the provided destination ResourceReference_STATUS from our ResourceReference_STATUS
func (reference *ResourceReference_STATUS) AssignProperties_To_ResourceReference_STATUS(destination *v20210601s.ResourceReference_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(reference.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlSigningKey
type UrlSigningKey struct {
	// +kubebuilder:validation:Required
	// KeyId: Defines the customer defined key Id. This id will exist in the incoming request to indicate the key used to form
	// the hash.
	KeyId *string `json:"keyId,omitempty"`

	// +kubebuilder:validation:Required
	// KeySourceParameters: Describes the parameters for using a user's KeyVault for URL Signing Key.
	KeySourceParameters *KeyVaultSigningKeyParameters `json:"keySourceParameters,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlSigningKey{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (signingKey *UrlSigningKey) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if signingKey == nil {
		return nil, nil
	}
	result := &UrlSigningKey_ARM{}

	// Set property ‘KeyId’:
	if signingKey.KeyId != nil {
		keyId := *signingKey.KeyId
		result.KeyId = &keyId
	}

	// Set property ‘KeySourceParameters’:
	if signingKey.KeySourceParameters != nil {
		keySourceParameters_ARM, err := (*signingKey.KeySourceParameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keySourceParameters := *keySourceParameters_ARM.(*KeyVaultSigningKeyParameters_ARM)
		result.KeySourceParameters = &keySourceParameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signingKey *UrlSigningKey) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlSigningKey_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signingKey *UrlSigningKey) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlSigningKey_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlSigningKey_ARM, got %T", armInput)
	}

	// Set property ‘KeyId’:
	if typedInput.KeyId != nil {
		keyId := *typedInput.KeyId
		signingKey.KeyId = &keyId
	}

	// Set property ‘KeySourceParameters’:
	if typedInput.KeySourceParameters != nil {
		var keySourceParameters1 KeyVaultSigningKeyParameters
		err := keySourceParameters1.PopulateFromARM(owner, *typedInput.KeySourceParameters)
		if err != nil {
			return err
		}
		keySourceParameters := keySourceParameters1
		signingKey.KeySourceParameters = &keySourceParameters
	}

	// No error
	return nil
}

// AssignProperties_From_UrlSigningKey populates our UrlSigningKey from the provided source UrlSigningKey
func (signingKey *UrlSigningKey) AssignProperties_From_UrlSigningKey(source *v20210601s.UrlSigningKey) error {

	// KeyId
	signingKey.KeyId = genruntime.ClonePointerToString(source.KeyId)

	// KeySourceParameters
	if source.KeySourceParameters != nil {
		var keySourceParameter KeyVaultSigningKeyParameters
		err := keySourceParameter.AssignProperties_From_KeyVaultSigningKeyParameters(source.KeySourceParameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_KeyVaultSigningKeyParameters() to populate field KeySourceParameters")
		}
		signingKey.KeySourceParameters = &keySourceParameter
	} else {
		signingKey.KeySourceParameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlSigningKey populates the provided destination UrlSigningKey from our UrlSigningKey
func (signingKey *UrlSigningKey) AssignProperties_To_UrlSigningKey(destination *v20210601s.UrlSigningKey) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyId
	destination.KeyId = genruntime.ClonePointerToString(signingKey.KeyId)

	// KeySourceParameters
	if signingKey.KeySourceParameters != nil {
		var keySourceParameter v20210601s.KeyVaultSigningKeyParameters
		err := signingKey.KeySourceParameters.AssignProperties_To_KeyVaultSigningKeyParameters(&keySourceParameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_KeyVaultSigningKeyParameters() to populate field KeySourceParameters")
		}
		destination.KeySourceParameters = &keySourceParameter
	} else {
		destination.KeySourceParameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UrlSigningKey_STATUS struct {
	// KeyId: Defines the customer defined key Id. This id will exist in the incoming request to indicate the key used to form
	// the hash.
	KeyId *string `json:"keyId,omitempty"`

	// KeySourceParameters: Defines the parameters for using customer key vault for Url Signing Key.
	KeySourceParameters *KeyVaultSigningKeyParameters_STATUS `json:"keySourceParameters,omitempty"`
}

var _ genruntime.FromARMConverter = &UrlSigningKey_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (signingKey *UrlSigningKey_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlSigningKey_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (signingKey *UrlSigningKey_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlSigningKey_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlSigningKey_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘KeyId’:
	if typedInput.KeyId != nil {
		keyId := *typedInput.KeyId
		signingKey.KeyId = &keyId
	}

	// Set property ‘KeySourceParameters’:
	if typedInput.KeySourceParameters != nil {
		var keySourceParameters1 KeyVaultSigningKeyParameters_STATUS
		err := keySourceParameters1.PopulateFromARM(owner, *typedInput.KeySourceParameters)
		if err != nil {
			return err
		}
		keySourceParameters := keySourceParameters1
		signingKey.KeySourceParameters = &keySourceParameters
	}

	// No error
	return nil
}

// AssignProperties_From_UrlSigningKey_STATUS populates our UrlSigningKey_STATUS from the provided source UrlSigningKey_STATUS
func (signingKey *UrlSigningKey_STATUS) AssignProperties_From_UrlSigningKey_STATUS(source *v20210601s.UrlSigningKey_STATUS) error {

	// KeyId
	signingKey.KeyId = genruntime.ClonePointerToString(source.KeyId)

	// KeySourceParameters
	if source.KeySourceParameters != nil {
		var keySourceParameter KeyVaultSigningKeyParameters_STATUS
		err := keySourceParameter.AssignProperties_From_KeyVaultSigningKeyParameters_STATUS(source.KeySourceParameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_KeyVaultSigningKeyParameters_STATUS() to populate field KeySourceParameters")
		}
		signingKey.KeySourceParameters = &keySourceParameter
	} else {
		signingKey.KeySourceParameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlSigningKey_STATUS populates the provided destination UrlSigningKey_STATUS from our UrlSigningKey_STATUS
func (signingKey *UrlSigningKey_STATUS) AssignProperties_To_UrlSigningKey_STATUS(destination *v20210601s.UrlSigningKey_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyId
	destination.KeyId = genruntime.ClonePointerToString(signingKey.KeyId)

	// KeySourceParameters
	if signingKey.KeySourceParameters != nil {
		var keySourceParameter v20210601s.KeyVaultSigningKeyParameters_STATUS
		err := signingKey.KeySourceParameters.AssignProperties_To_KeyVaultSigningKeyParameters_STATUS(&keySourceParameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_KeyVaultSigningKeyParameters_STATUS() to populate field KeySourceParameters")
		}
		destination.KeySourceParameters = &keySourceParameter
	} else {
		destination.KeySourceParameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRule
type DeliveryRule struct {
	// +kubebuilder:validation:Required
	// Actions: A list of actions that are executed when all the conditions of a rule are satisfied.
	Actions []DeliveryRuleAction1 `json:"actions,omitempty"`

	// Conditions: A list of conditions that must be matched for the actions to be executed
	Conditions []DeliveryRuleCondition `json:"conditions,omitempty"`

	// Name: Name of the rule
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Order: The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a
	// lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not
	// require any condition and actions listed in it will always be applied.
	Order *int `json:"order,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *DeliveryRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &DeliveryRule_ARM{}

	// Set property ‘Actions’:
	for _, item := range rule.Actions {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Actions = append(result.Actions, *item_ARM.(*DeliveryRuleAction1_ARM))
	}

	// Set property ‘Conditions’:
	for _, item := range rule.Conditions {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Conditions = append(result.Conditions, *item_ARM.(*DeliveryRuleCondition_ARM))
	}

	// Set property ‘Name’:
	if rule.Name != nil {
		name := *rule.Name
		result.Name = &name
	}

	// Set property ‘Order’:
	if rule.Order != nil {
		order := *rule.Order
		result.Order = &order
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *DeliveryRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRule_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *DeliveryRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRule_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRule_ARM, got %T", armInput)
	}

	// Set property ‘Actions’:
	for _, item := range typedInput.Actions {
		var item1 DeliveryRuleAction1
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rule.Actions = append(rule.Actions, item1)
	}

	// Set property ‘Conditions’:
	for _, item := range typedInput.Conditions {
		var item1 DeliveryRuleCondition
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rule.Conditions = append(rule.Conditions, item1)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property ‘Order’:
	if typedInput.Order != nil {
		order := *typedInput.Order
		rule.Order = &order
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRule populates our DeliveryRule from the provided source DeliveryRule
func (rule *DeliveryRule) AssignProperties_From_DeliveryRule(source *v20210601s.DeliveryRule) error {

	// Actions
	if source.Actions != nil {
		actionList := make([]DeliveryRuleAction1, len(source.Actions))
		for actionIndex, actionItem := range source.Actions {
			// Shadow the loop variable to avoid aliasing
			actionItem := actionItem
			var action DeliveryRuleAction1
			err := action.AssignProperties_From_DeliveryRuleAction1(&actionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleAction1() to populate field Actions")
			}
			actionList[actionIndex] = action
		}
		rule.Actions = actionList
	} else {
		rule.Actions = nil
	}

	// Conditions
	if source.Conditions != nil {
		conditionList := make([]DeliveryRuleCondition, len(source.Conditions))
		for conditionIndex, conditionItem := range source.Conditions {
			// Shadow the loop variable to avoid aliasing
			conditionItem := conditionItem
			var condition DeliveryRuleCondition
			err := condition.AssignProperties_From_DeliveryRuleCondition(&conditionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleCondition() to populate field Conditions")
			}
			conditionList[conditionIndex] = condition
		}
		rule.Conditions = conditionList
	} else {
		rule.Conditions = nil
	}

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Order
	rule.Order = genruntime.ClonePointerToInt(source.Order)

	// No error
	return nil
}

// AssignProperties_To_DeliveryRule populates the provided destination DeliveryRule from our DeliveryRule
func (rule *DeliveryRule) AssignProperties_To_DeliveryRule(destination *v20210601s.DeliveryRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Actions
	if rule.Actions != nil {
		actionList := make([]v20210601s.DeliveryRuleAction1, len(rule.Actions))
		for actionIndex, actionItem := range rule.Actions {
			// Shadow the loop variable to avoid aliasing
			actionItem := actionItem
			var action v20210601s.DeliveryRuleAction1
			err := actionItem.AssignProperties_To_DeliveryRuleAction1(&action)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleAction1() to populate field Actions")
			}
			actionList[actionIndex] = action
		}
		destination.Actions = actionList
	} else {
		destination.Actions = nil
	}

	// Conditions
	if rule.Conditions != nil {
		conditionList := make([]v20210601s.DeliveryRuleCondition, len(rule.Conditions))
		for conditionIndex, conditionItem := range rule.Conditions {
			// Shadow the loop variable to avoid aliasing
			conditionItem := conditionItem
			var condition v20210601s.DeliveryRuleCondition
			err := conditionItem.AssignProperties_To_DeliveryRuleCondition(&condition)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleCondition() to populate field Conditions")
			}
			conditionList[conditionIndex] = condition
		}
		destination.Conditions = conditionList
	} else {
		destination.Conditions = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// Order
	destination.Order = genruntime.ClonePointerToInt(rule.Order)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeliveryRule_STATUS struct {
	// Actions: A list of actions that are executed when all the conditions of a rule are satisfied.
	Actions []DeliveryRuleAction_STATUS `json:"actions,omitempty"`

	// Conditions: A list of conditions that must be matched for the actions to be executed
	Conditions []DeliveryRuleCondition_STATUS `json:"conditions,omitempty"`

	// Name: Name of the rule
	Name *string `json:"name,omitempty"`

	// Order: The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a
	// lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not
	// require any condition and actions listed in it will always be applied.
	Order *int `json:"order,omitempty"`
}

var _ genruntime.FromARMConverter = &DeliveryRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *DeliveryRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRule_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *DeliveryRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRule_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRule_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Actions’:
	for _, item := range typedInput.Actions {
		var item1 DeliveryRuleAction_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rule.Actions = append(rule.Actions, item1)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property ‘Order’:
	if typedInput.Order != nil {
		order := *typedInput.Order
		rule.Order = &order
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRule_STATUS populates our DeliveryRule_STATUS from the provided source DeliveryRule_STATUS
func (rule *DeliveryRule_STATUS) AssignProperties_From_DeliveryRule_STATUS(source *v20210601s.DeliveryRule_STATUS) error {

	// Actions
	if source.Actions != nil {
		actionList := make([]DeliveryRuleAction_STATUS, len(source.Actions))
		for actionIndex, actionItem := range source.Actions {
			// Shadow the loop variable to avoid aliasing
			actionItem := actionItem
			var action DeliveryRuleAction_STATUS
			err := action.AssignProperties_From_DeliveryRuleAction_STATUS(&actionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleAction_STATUS() to populate field Actions")
			}
			actionList[actionIndex] = action
		}
		rule.Actions = actionList
	} else {
		rule.Actions = nil
	}

	// Conditions
	if source.Conditions != nil {
		conditionList := make([]DeliveryRuleCondition_STATUS, len(source.Conditions))
		for conditionIndex, conditionItem := range source.Conditions {
			// Shadow the loop variable to avoid aliasing
			conditionItem := conditionItem
			var condition DeliveryRuleCondition_STATUS
			err := condition.AssignProperties_From_DeliveryRuleCondition_STATUS(&conditionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleCondition_STATUS() to populate field Conditions")
			}
			conditionList[conditionIndex] = condition
		}
		rule.Conditions = conditionList
	} else {
		rule.Conditions = nil
	}

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Order
	rule.Order = genruntime.ClonePointerToInt(source.Order)

	// No error
	return nil
}

// AssignProperties_To_DeliveryRule_STATUS populates the provided destination DeliveryRule_STATUS from our DeliveryRule_STATUS
func (rule *DeliveryRule_STATUS) AssignProperties_To_DeliveryRule_STATUS(destination *v20210601s.DeliveryRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Actions
	if rule.Actions != nil {
		actionList := make([]v20210601s.DeliveryRuleAction_STATUS, len(rule.Actions))
		for actionIndex, actionItem := range rule.Actions {
			// Shadow the loop variable to avoid aliasing
			actionItem := actionItem
			var action v20210601s.DeliveryRuleAction_STATUS
			err := actionItem.AssignProperties_To_DeliveryRuleAction_STATUS(&action)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleAction_STATUS() to populate field Actions")
			}
			actionList[actionIndex] = action
		}
		destination.Actions = actionList
	} else {
		destination.Actions = nil
	}

	// Conditions
	if rule.Conditions != nil {
		conditionList := make([]v20210601s.DeliveryRuleCondition_STATUS, len(rule.Conditions))
		for conditionIndex, conditionItem := range rule.Conditions {
			// Shadow the loop variable to avoid aliasing
			conditionItem := conditionItem
			var condition v20210601s.DeliveryRuleCondition_STATUS
			err := conditionItem.AssignProperties_To_DeliveryRuleCondition_STATUS(&condition)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleCondition_STATUS() to populate field Conditions")
			}
			conditionList[conditionIndex] = condition
		}
		destination.Conditions = conditionList
	} else {
		destination.Conditions = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// Order
	destination.Order = genruntime.ClonePointerToInt(rule.Order)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Allow","Block"}
type GeoFilter_Action string

const (
	GeoFilter_Action_Allow = GeoFilter_Action("Allow")
	GeoFilter_Action_Block = GeoFilter_Action("Block")
)

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/HealthProbeParameters
type HealthProbeParameters struct {
	// +kubebuilder:validation:Maximum=255
	// +kubebuilder:validation:Minimum=1
	// ProbeIntervalInSeconds: The number of seconds between health probes.Default is 240sec.
	ProbeIntervalInSeconds *int `json:"probeIntervalInSeconds,omitempty"`

	// ProbePath: The path relative to the origin that is used to determine the health of the origin.
	ProbePath *string `json:"probePath,omitempty"`

	// ProbeProtocol: Protocol to use for health probe.
	ProbeProtocol *HealthProbeParameters_ProbeProtocol `json:"probeProtocol,omitempty"`

	// ProbeRequestType: The type of health probe request that is made.
	ProbeRequestType *HealthProbeParameters_ProbeRequestType `json:"probeRequestType,omitempty"`
}

var _ genruntime.ARMTransformer = &HealthProbeParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *HealthProbeParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &HealthProbeParameters_ARM{}

	// Set property ‘ProbeIntervalInSeconds’:
	if parameters.ProbeIntervalInSeconds != nil {
		probeIntervalInSeconds := *parameters.ProbeIntervalInSeconds
		result.ProbeIntervalInSeconds = &probeIntervalInSeconds
	}

	// Set property ‘ProbePath’:
	if parameters.ProbePath != nil {
		probePath := *parameters.ProbePath
		result.ProbePath = &probePath
	}

	// Set property ‘ProbeProtocol’:
	if parameters.ProbeProtocol != nil {
		probeProtocol := *parameters.ProbeProtocol
		result.ProbeProtocol = &probeProtocol
	}

	// Set property ‘ProbeRequestType’:
	if parameters.ProbeRequestType != nil {
		probeRequestType := *parameters.ProbeRequestType
		result.ProbeRequestType = &probeRequestType
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *HealthProbeParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HealthProbeParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *HealthProbeParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HealthProbeParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HealthProbeParameters_ARM, got %T", armInput)
	}

	// Set property ‘ProbeIntervalInSeconds’:
	if typedInput.ProbeIntervalInSeconds != nil {
		probeIntervalInSeconds := *typedInput.ProbeIntervalInSeconds
		parameters.ProbeIntervalInSeconds = &probeIntervalInSeconds
	}

	// Set property ‘ProbePath’:
	if typedInput.ProbePath != nil {
		probePath := *typedInput.ProbePath
		parameters.ProbePath = &probePath
	}

	// Set property ‘ProbeProtocol’:
	if typedInput.ProbeProtocol != nil {
		probeProtocol := *typedInput.ProbeProtocol
		parameters.ProbeProtocol = &probeProtocol
	}

	// Set property ‘ProbeRequestType’:
	if typedInput.ProbeRequestType != nil {
		probeRequestType := *typedInput.ProbeRequestType
		parameters.ProbeRequestType = &probeRequestType
	}

	// No error
	return nil
}

// AssignProperties_From_HealthProbeParameters populates our HealthProbeParameters from the provided source HealthProbeParameters
func (parameters *HealthProbeParameters) AssignProperties_From_HealthProbeParameters(source *v20210601s.HealthProbeParameters) error {

	// ProbeIntervalInSeconds
	if source.ProbeIntervalInSeconds != nil {
		probeIntervalInSecond := *source.ProbeIntervalInSeconds
		parameters.ProbeIntervalInSeconds = &probeIntervalInSecond
	} else {
		parameters.ProbeIntervalInSeconds = nil
	}

	// ProbePath
	parameters.ProbePath = genruntime.ClonePointerToString(source.ProbePath)

	// ProbeProtocol
	if source.ProbeProtocol != nil {
		probeProtocol := HealthProbeParameters_ProbeProtocol(*source.ProbeProtocol)
		parameters.ProbeProtocol = &probeProtocol
	} else {
		parameters.ProbeProtocol = nil
	}

	// ProbeRequestType
	if source.ProbeRequestType != nil {
		probeRequestType := HealthProbeParameters_ProbeRequestType(*source.ProbeRequestType)
		parameters.ProbeRequestType = &probeRequestType
	} else {
		parameters.ProbeRequestType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HealthProbeParameters populates the provided destination HealthProbeParameters from our HealthProbeParameters
func (parameters *HealthProbeParameters) AssignProperties_To_HealthProbeParameters(destination *v20210601s.HealthProbeParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ProbeIntervalInSeconds
	if parameters.ProbeIntervalInSeconds != nil {
		probeIntervalInSecond := *parameters.ProbeIntervalInSeconds
		destination.ProbeIntervalInSeconds = &probeIntervalInSecond
	} else {
		destination.ProbeIntervalInSeconds = nil
	}

	// ProbePath
	destination.ProbePath = genruntime.ClonePointerToString(parameters.ProbePath)

	// ProbeProtocol
	if parameters.ProbeProtocol != nil {
		probeProtocol := string(*parameters.ProbeProtocol)
		destination.ProbeProtocol = &probeProtocol
	} else {
		destination.ProbeProtocol = nil
	}

	// ProbeRequestType
	if parameters.ProbeRequestType != nil {
		probeRequestType := string(*parameters.ProbeRequestType)
		destination.ProbeRequestType = &probeRequestType
	} else {
		destination.ProbeRequestType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HealthProbeParameters_STATUS struct {
	// ProbeIntervalInSeconds: The number of seconds between health probes.Default is 240sec.
	ProbeIntervalInSeconds *int `json:"probeIntervalInSeconds,omitempty"`

	// ProbePath: The path relative to the origin that is used to determine the health of the origin.
	ProbePath *string `json:"probePath,omitempty"`

	// ProbeProtocol: Protocol to use for health probe.
	ProbeProtocol *HealthProbeParameters_ProbeProtocol_STATUS `json:"probeProtocol,omitempty"`

	// ProbeRequestType: The type of health probe request that is made.
	ProbeRequestType *HealthProbeParameters_ProbeRequestType_STATUS `json:"probeRequestType,omitempty"`
}

var _ genruntime.FromARMConverter = &HealthProbeParameters_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *HealthProbeParameters_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HealthProbeParameters_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *HealthProbeParameters_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HealthProbeParameters_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HealthProbeParameters_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘ProbeIntervalInSeconds’:
	if typedInput.ProbeIntervalInSeconds != nil {
		probeIntervalInSeconds := *typedInput.ProbeIntervalInSeconds
		parameters.ProbeIntervalInSeconds = &probeIntervalInSeconds
	}

	// Set property ‘ProbePath’:
	if typedInput.ProbePath != nil {
		probePath := *typedInput.ProbePath
		parameters.ProbePath = &probePath
	}

	// Set property ‘ProbeProtocol’:
	if typedInput.ProbeProtocol != nil {
		probeProtocol := *typedInput.ProbeProtocol
		parameters.ProbeProtocol = &probeProtocol
	}

	// Set property ‘ProbeRequestType’:
	if typedInput.ProbeRequestType != nil {
		probeRequestType := *typedInput.ProbeRequestType
		parameters.ProbeRequestType = &probeRequestType
	}

	// No error
	return nil
}

// AssignProperties_From_HealthProbeParameters_STATUS populates our HealthProbeParameters_STATUS from the provided source HealthProbeParameters_STATUS
func (parameters *HealthProbeParameters_STATUS) AssignProperties_From_HealthProbeParameters_STATUS(source *v20210601s.HealthProbeParameters_STATUS) error {

	// ProbeIntervalInSeconds
	parameters.ProbeIntervalInSeconds = genruntime.ClonePointerToInt(source.ProbeIntervalInSeconds)

	// ProbePath
	parameters.ProbePath = genruntime.ClonePointerToString(source.ProbePath)

	// ProbeProtocol
	if source.ProbeProtocol != nil {
		probeProtocol := HealthProbeParameters_ProbeProtocol_STATUS(*source.ProbeProtocol)
		parameters.ProbeProtocol = &probeProtocol
	} else {
		parameters.ProbeProtocol = nil
	}

	// ProbeRequestType
	if source.ProbeRequestType != nil {
		probeRequestType := HealthProbeParameters_ProbeRequestType_STATUS(*source.ProbeRequestType)
		parameters.ProbeRequestType = &probeRequestType
	} else {
		parameters.ProbeRequestType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HealthProbeParameters_STATUS populates the provided destination HealthProbeParameters_STATUS from our HealthProbeParameters_STATUS
func (parameters *HealthProbeParameters_STATUS) AssignProperties_To_HealthProbeParameters_STATUS(destination *v20210601s.HealthProbeParameters_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ProbeIntervalInSeconds
	destination.ProbeIntervalInSeconds = genruntime.ClonePointerToInt(parameters.ProbeIntervalInSeconds)

	// ProbePath
	destination.ProbePath = genruntime.ClonePointerToString(parameters.ProbePath)

	// ProbeProtocol
	if parameters.ProbeProtocol != nil {
		probeProtocol := string(*parameters.ProbeProtocol)
		destination.ProbeProtocol = &probeProtocol
	} else {
		destination.ProbeProtocol = nil
	}

	// ProbeRequestType
	if parameters.ProbeRequestType != nil {
		probeRequestType := string(*parameters.ProbeRequestType)
		destination.ProbeRequestType = &probeRequestType
	} else {
		destination.ProbeRequestType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/KeyVaultSigningKeyParameters
type KeyVaultSigningKeyParameters struct {
	// +kubebuilder:validation:Required
	// ResourceGroupName: Resource group of the user's Key Vault containing the secret
	ResourceGroupName *string `json:"resourceGroupName,omitempty"`

	// +kubebuilder:validation:Required
	// SecretName: The name of secret in Key Vault.
	SecretName *string `json:"secretName,omitempty"`

	// +kubebuilder:validation:Required
	// SecretVersion: The version(GUID) of secret in Key Vault.
	SecretVersion *string `json:"secretVersion,omitempty"`

	// +kubebuilder:validation:Required
	// SubscriptionId: Subscription Id of the user's Key Vault containing the secret
	SubscriptionId *string `json:"subscriptionId,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *KeyVaultSigningKeyParameters_TypeName `json:"typeName,omitempty"`

	// +kubebuilder:validation:Required
	// VaultName: The name of the user's Key Vault containing the secret
	VaultName *string `json:"vaultName,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultSigningKeyParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *KeyVaultSigningKeyParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &KeyVaultSigningKeyParameters_ARM{}

	// Set property ‘ResourceGroupName’:
	if parameters.ResourceGroupName != nil {
		resourceGroupName := *parameters.ResourceGroupName
		result.ResourceGroupName = &resourceGroupName
	}

	// Set property ‘SecretName’:
	if parameters.SecretName != nil {
		secretName := *parameters.SecretName
		result.SecretName = &secretName
	}

	// Set property ‘SecretVersion’:
	if parameters.SecretVersion != nil {
		secretVersion := *parameters.SecretVersion
		result.SecretVersion = &secretVersion
	}

	// Set property ‘SubscriptionId’:
	if parameters.SubscriptionId != nil {
		subscriptionId := *parameters.SubscriptionId
		result.SubscriptionId = &subscriptionId
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}

	// Set property ‘VaultName’:
	if parameters.VaultName != nil {
		vaultName := *parameters.VaultName
		result.VaultName = &vaultName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *KeyVaultSigningKeyParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultSigningKeyParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *KeyVaultSigningKeyParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultSigningKeyParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultSigningKeyParameters_ARM, got %T", armInput)
	}

	// Set property ‘ResourceGroupName’:
	if typedInput.ResourceGroupName != nil {
		resourceGroupName := *typedInput.ResourceGroupName
		parameters.ResourceGroupName = &resourceGroupName
	}

	// Set property ‘SecretName’:
	if typedInput.SecretName != nil {
		secretName := *typedInput.SecretName
		parameters.SecretName = &secretName
	}

	// Set property ‘SecretVersion’:
	if typedInput.SecretVersion != nil {
		secretVersion := *typedInput.SecretVersion
		parameters.SecretVersion = &secretVersion
	}

	// Set property ‘SubscriptionId’:
	if typedInput.SubscriptionId != nil {
		subscriptionId := *typedInput.SubscriptionId
		parameters.SubscriptionId = &subscriptionId
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// Set property ‘VaultName’:
	if typedInput.VaultName != nil {
		vaultName := *typedInput.VaultName
		parameters.VaultName = &vaultName
	}

	// No error
	return nil
}

// AssignProperties_From_KeyVaultSigningKeyParameters populates our KeyVaultSigningKeyParameters from the provided source KeyVaultSigningKeyParameters
func (parameters *KeyVaultSigningKeyParameters) AssignProperties_From_KeyVaultSigningKeyParameters(source *v20210601s.KeyVaultSigningKeyParameters) error {

	// ResourceGroupName
	parameters.ResourceGroupName = genruntime.ClonePointerToString(source.ResourceGroupName)

	// SecretName
	parameters.SecretName = genruntime.ClonePointerToString(source.SecretName)

	// SecretVersion
	parameters.SecretVersion = genruntime.ClonePointerToString(source.SecretVersion)

	// SubscriptionId
	parameters.SubscriptionId = genruntime.ClonePointerToString(source.SubscriptionId)

	// TypeName
	if source.TypeName != nil {
		typeName := KeyVaultSigningKeyParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// VaultName
	parameters.VaultName = genruntime.ClonePointerToString(source.VaultName)

	// No error
	return nil
}

// AssignProperties_To_KeyVaultSigningKeyParameters populates the provided destination KeyVaultSigningKeyParameters from our KeyVaultSigningKeyParameters
func (parameters *KeyVaultSigningKeyParameters) AssignProperties_To_KeyVaultSigningKeyParameters(destination *v20210601s.KeyVaultSigningKeyParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceGroupName
	destination.ResourceGroupName = genruntime.ClonePointerToString(parameters.ResourceGroupName)

	// SecretName
	destination.SecretName = genruntime.ClonePointerToString(parameters.SecretName)

	// SecretVersion
	destination.SecretVersion = genruntime.ClonePointerToString(parameters.SecretVersion)

	// SubscriptionId
	destination.SubscriptionId = genruntime.ClonePointerToString(parameters.SubscriptionId)

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// VaultName
	destination.VaultName = genruntime.ClonePointerToString(parameters.VaultName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultSigningKeyParameters_STATUS struct {
	// ResourceGroupName: Resource group of the user's Key Vault containing the secret
	ResourceGroupName *string `json:"resourceGroupName,omitempty"`

	// SecretName: The name of secret in Key Vault.
	SecretName *string `json:"secretName,omitempty"`

	// SecretVersion: The version(GUID) of secret in Key Vault.
	SecretVersion *string `json:"secretVersion,omitempty"`

	// SubscriptionId: Subscription Id of the user's Key Vault containing the secret
	SubscriptionId *string                                       `json:"subscriptionId,omitempty"`
	TypeName       *KeyVaultSigningKeyParameters_TypeName_STATUS `json:"typeName,omitempty"`

	// VaultName: The name of the user's Key Vault containing the secret
	VaultName *string `json:"vaultName,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultSigningKeyParameters_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *KeyVaultSigningKeyParameters_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultSigningKeyParameters_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *KeyVaultSigningKeyParameters_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultSigningKeyParameters_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultSigningKeyParameters_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘ResourceGroupName’:
	if typedInput.ResourceGroupName != nil {
		resourceGroupName := *typedInput.ResourceGroupName
		parameters.ResourceGroupName = &resourceGroupName
	}

	// Set property ‘SecretName’:
	if typedInput.SecretName != nil {
		secretName := *typedInput.SecretName
		parameters.SecretName = &secretName
	}

	// Set property ‘SecretVersion’:
	if typedInput.SecretVersion != nil {
		secretVersion := *typedInput.SecretVersion
		parameters.SecretVersion = &secretVersion
	}

	// Set property ‘SubscriptionId’:
	if typedInput.SubscriptionId != nil {
		subscriptionId := *typedInput.SubscriptionId
		parameters.SubscriptionId = &subscriptionId
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// Set property ‘VaultName’:
	if typedInput.VaultName != nil {
		vaultName := *typedInput.VaultName
		parameters.VaultName = &vaultName
	}

	// No error
	return nil
}

// AssignProperties_From_KeyVaultSigningKeyParameters_STATUS populates our KeyVaultSigningKeyParameters_STATUS from the provided source KeyVaultSigningKeyParameters_STATUS
func (parameters *KeyVaultSigningKeyParameters_STATUS) AssignProperties_From_KeyVaultSigningKeyParameters_STATUS(source *v20210601s.KeyVaultSigningKeyParameters_STATUS) error {

	// ResourceGroupName
	parameters.ResourceGroupName = genruntime.ClonePointerToString(source.ResourceGroupName)

	// SecretName
	parameters.SecretName = genruntime.ClonePointerToString(source.SecretName)

	// SecretVersion
	parameters.SecretVersion = genruntime.ClonePointerToString(source.SecretVersion)

	// SubscriptionId
	parameters.SubscriptionId = genruntime.ClonePointerToString(source.SubscriptionId)

	// TypeName
	if source.TypeName != nil {
		typeName := KeyVaultSigningKeyParameters_TypeName_STATUS(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// VaultName
	parameters.VaultName = genruntime.ClonePointerToString(source.VaultName)

	// No error
	return nil
}

// AssignProperties_To_KeyVaultSigningKeyParameters_STATUS populates the provided destination KeyVaultSigningKeyParameters_STATUS from our KeyVaultSigningKeyParameters_STATUS
func (parameters *KeyVaultSigningKeyParameters_STATUS) AssignProperties_To_KeyVaultSigningKeyParameters_STATUS(destination *v20210601s.KeyVaultSigningKeyParameters_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ResourceGroupName
	destination.ResourceGroupName = genruntime.ClonePointerToString(parameters.ResourceGroupName)

	// SecretName
	destination.SecretName = genruntime.ClonePointerToString(parameters.SecretName)

	// SecretVersion
	destination.SecretVersion = genruntime.ClonePointerToString(parameters.SecretVersion)

	// SubscriptionId
	destination.SubscriptionId = genruntime.ClonePointerToString(parameters.SubscriptionId)

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// VaultName
	destination.VaultName = genruntime.ClonePointerToString(parameters.VaultName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointStatus_STATUS string

const (
	PrivateEndpointStatus_STATUS_Approved     = PrivateEndpointStatus_STATUS("Approved")
	PrivateEndpointStatus_STATUS_Disconnected = PrivateEndpointStatus_STATUS("Disconnected")
	PrivateEndpointStatus_STATUS_Pending      = PrivateEndpointStatus_STATUS("Pending")
	PrivateEndpointStatus_STATUS_Rejected     = PrivateEndpointStatus_STATUS("Rejected")
	PrivateEndpointStatus_STATUS_Timeout      = PrivateEndpointStatus_STATUS("Timeout")
)

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/ResponseBasedOriginErrorDetectionParameters
type ResponseBasedOriginErrorDetectionParameters struct {
	// HttpErrorRanges: The list of Http status code ranges that are considered as server errors for origin and it is marked as
	// unhealthy.
	HttpErrorRanges []HttpErrorRangeParameters `json:"httpErrorRanges,omitempty"`

	// ResponseBasedDetectedErrorTypes: Type of response errors for real user requests for which origin will be deemed
	// unhealthy.
	ResponseBasedDetectedErrorTypes *ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes `json:"responseBasedDetectedErrorTypes,omitempty"`

	// +kubebuilder:validation:Maximum=100
	// +kubebuilder:validation:Minimum=0
	// ResponseBasedFailoverThresholdPercentage: The percentage of failed requests in the sample where failover should trigger.
	ResponseBasedFailoverThresholdPercentage *int `json:"responseBasedFailoverThresholdPercentage,omitempty"`
}

var _ genruntime.ARMTransformer = &ResponseBasedOriginErrorDetectionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *ResponseBasedOriginErrorDetectionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &ResponseBasedOriginErrorDetectionParameters_ARM{}

	// Set property ‘HttpErrorRanges’:
	for _, item := range parameters.HttpErrorRanges {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.HttpErrorRanges = append(result.HttpErrorRanges, *item_ARM.(*HttpErrorRangeParameters_ARM))
	}

	// Set property ‘ResponseBasedDetectedErrorTypes’:
	if parameters.ResponseBasedDetectedErrorTypes != nil {
		responseBasedDetectedErrorTypes := *parameters.ResponseBasedDetectedErrorTypes
		result.ResponseBasedDetectedErrorTypes = &responseBasedDetectedErrorTypes
	}

	// Set property ‘ResponseBasedFailoverThresholdPercentage’:
	if parameters.ResponseBasedFailoverThresholdPercentage != nil {
		responseBasedFailoverThresholdPercentage := *parameters.ResponseBasedFailoverThresholdPercentage
		result.ResponseBasedFailoverThresholdPercentage = &responseBasedFailoverThresholdPercentage
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *ResponseBasedOriginErrorDetectionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResponseBasedOriginErrorDetectionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *ResponseBasedOriginErrorDetectionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResponseBasedOriginErrorDetectionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResponseBasedOriginErrorDetectionParameters_ARM, got %T", armInput)
	}

	// Set property ‘HttpErrorRanges’:
	for _, item := range typedInput.HttpErrorRanges {
		var item1 HttpErrorRangeParameters
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		parameters.HttpErrorRanges = append(parameters.HttpErrorRanges, item1)
	}

	// Set property ‘ResponseBasedDetectedErrorTypes’:
	if typedInput.ResponseBasedDetectedErrorTypes != nil {
		responseBasedDetectedErrorTypes := *typedInput.ResponseBasedDetectedErrorTypes
		parameters.ResponseBasedDetectedErrorTypes = &responseBasedDetectedErrorTypes
	}

	// Set property ‘ResponseBasedFailoverThresholdPercentage’:
	if typedInput.ResponseBasedFailoverThresholdPercentage != nil {
		responseBasedFailoverThresholdPercentage := *typedInput.ResponseBasedFailoverThresholdPercentage
		parameters.ResponseBasedFailoverThresholdPercentage = &responseBasedFailoverThresholdPercentage
	}

	// No error
	return nil
}

// AssignProperties_From_ResponseBasedOriginErrorDetectionParameters populates our ResponseBasedOriginErrorDetectionParameters from the provided source ResponseBasedOriginErrorDetectionParameters
func (parameters *ResponseBasedOriginErrorDetectionParameters) AssignProperties_From_ResponseBasedOriginErrorDetectionParameters(source *v20210601s.ResponseBasedOriginErrorDetectionParameters) error {

	// HttpErrorRanges
	if source.HttpErrorRanges != nil {
		httpErrorRangeList := make([]HttpErrorRangeParameters, len(source.HttpErrorRanges))
		for httpErrorRangeIndex, httpErrorRangeItem := range source.HttpErrorRanges {
			// Shadow the loop variable to avoid aliasing
			httpErrorRangeItem := httpErrorRangeItem
			var httpErrorRange HttpErrorRangeParameters
			err := httpErrorRange.AssignProperties_From_HttpErrorRangeParameters(&httpErrorRangeItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HttpErrorRangeParameters() to populate field HttpErrorRanges")
			}
			httpErrorRangeList[httpErrorRangeIndex] = httpErrorRange
		}
		parameters.HttpErrorRanges = httpErrorRangeList
	} else {
		parameters.HttpErrorRanges = nil
	}

	// ResponseBasedDetectedErrorTypes
	if source.ResponseBasedDetectedErrorTypes != nil {
		responseBasedDetectedErrorType := ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes(*source.ResponseBasedDetectedErrorTypes)
		parameters.ResponseBasedDetectedErrorTypes = &responseBasedDetectedErrorType
	} else {
		parameters.ResponseBasedDetectedErrorTypes = nil
	}

	// ResponseBasedFailoverThresholdPercentage
	if source.ResponseBasedFailoverThresholdPercentage != nil {
		responseBasedFailoverThresholdPercentage := *source.ResponseBasedFailoverThresholdPercentage
		parameters.ResponseBasedFailoverThresholdPercentage = &responseBasedFailoverThresholdPercentage
	} else {
		parameters.ResponseBasedFailoverThresholdPercentage = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ResponseBasedOriginErrorDetectionParameters populates the provided destination ResponseBasedOriginErrorDetectionParameters from our ResponseBasedOriginErrorDetectionParameters
func (parameters *ResponseBasedOriginErrorDetectionParameters) AssignProperties_To_ResponseBasedOriginErrorDetectionParameters(destination *v20210601s.ResponseBasedOriginErrorDetectionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HttpErrorRanges
	if parameters.HttpErrorRanges != nil {
		httpErrorRangeList := make([]v20210601s.HttpErrorRangeParameters, len(parameters.HttpErrorRanges))
		for httpErrorRangeIndex, httpErrorRangeItem := range parameters.HttpErrorRanges {
			// Shadow the loop variable to avoid aliasing
			httpErrorRangeItem := httpErrorRangeItem
			var httpErrorRange v20210601s.HttpErrorRangeParameters
			err := httpErrorRangeItem.AssignProperties_To_HttpErrorRangeParameters(&httpErrorRange)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HttpErrorRangeParameters() to populate field HttpErrorRanges")
			}
			httpErrorRangeList[httpErrorRangeIndex] = httpErrorRange
		}
		destination.HttpErrorRanges = httpErrorRangeList
	} else {
		destination.HttpErrorRanges = nil
	}

	// ResponseBasedDetectedErrorTypes
	if parameters.ResponseBasedDetectedErrorTypes != nil {
		responseBasedDetectedErrorType := string(*parameters.ResponseBasedDetectedErrorTypes)
		destination.ResponseBasedDetectedErrorTypes = &responseBasedDetectedErrorType
	} else {
		destination.ResponseBasedDetectedErrorTypes = nil
	}

	// ResponseBasedFailoverThresholdPercentage
	if parameters.ResponseBasedFailoverThresholdPercentage != nil {
		responseBasedFailoverThresholdPercentage := *parameters.ResponseBasedFailoverThresholdPercentage
		destination.ResponseBasedFailoverThresholdPercentage = &responseBasedFailoverThresholdPercentage
	} else {
		destination.ResponseBasedFailoverThresholdPercentage = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ResponseBasedOriginErrorDetectionParameters_STATUS struct {
	// HttpErrorRanges: The list of Http status code ranges that are considered as server errors for origin and it is marked as
	// unhealthy.
	HttpErrorRanges []HttpErrorRangeParameters_STATUS `json:"httpErrorRanges,omitempty"`

	// ResponseBasedDetectedErrorTypes: Type of response errors for real user requests for which origin will be deemed unhealthy
	ResponseBasedDetectedErrorTypes *ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS `json:"responseBasedDetectedErrorTypes,omitempty"`

	// ResponseBasedFailoverThresholdPercentage: The percentage of failed requests in the sample where failover should trigger.
	ResponseBasedFailoverThresholdPercentage *int `json:"responseBasedFailoverThresholdPercentage,omitempty"`
}

var _ genruntime.FromARMConverter = &ResponseBasedOriginErrorDetectionParameters_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *ResponseBasedOriginErrorDetectionParameters_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ResponseBasedOriginErrorDetectionParameters_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *ResponseBasedOriginErrorDetectionParameters_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ResponseBasedOriginErrorDetectionParameters_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ResponseBasedOriginErrorDetectionParameters_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘HttpErrorRanges’:
	for _, item := range typedInput.HttpErrorRanges {
		var item1 HttpErrorRangeParameters_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		parameters.HttpErrorRanges = append(parameters.HttpErrorRanges, item1)
	}

	// Set property ‘ResponseBasedDetectedErrorTypes’:
	if typedInput.ResponseBasedDetectedErrorTypes != nil {
		responseBasedDetectedErrorTypes := *typedInput.ResponseBasedDetectedErrorTypes
		parameters.ResponseBasedDetectedErrorTypes = &responseBasedDetectedErrorTypes
	}

	// Set property ‘ResponseBasedFailoverThresholdPercentage’:
	if typedInput.ResponseBasedFailoverThresholdPercentage != nil {
		responseBasedFailoverThresholdPercentage := *typedInput.ResponseBasedFailoverThresholdPercentage
		parameters.ResponseBasedFailoverThresholdPercentage = &responseBasedFailoverThresholdPercentage
	}

	// No error
	return nil
}

// AssignProperties_From_ResponseBasedOriginErrorDetectionParameters_STATUS populates our ResponseBasedOriginErrorDetectionParameters_STATUS from the provided source ResponseBasedOriginErrorDetectionParameters_STATUS
func (parameters *ResponseBasedOriginErrorDetectionParameters_STATUS) AssignProperties_From_ResponseBasedOriginErrorDetectionParameters_STATUS(source *v20210601s.ResponseBasedOriginErrorDetectionParameters_STATUS) error {

	// HttpErrorRanges
	if source.HttpErrorRanges != nil {
		httpErrorRangeList := make([]HttpErrorRangeParameters_STATUS, len(source.HttpErrorRanges))
		for httpErrorRangeIndex, httpErrorRangeItem := range source.HttpErrorRanges {
			// Shadow the loop variable to avoid aliasing
			httpErrorRangeItem := httpErrorRangeItem
			var httpErrorRange HttpErrorRangeParameters_STATUS
			err := httpErrorRange.AssignProperties_From_HttpErrorRangeParameters_STATUS(&httpErrorRangeItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HttpErrorRangeParameters_STATUS() to populate field HttpErrorRanges")
			}
			httpErrorRangeList[httpErrorRangeIndex] = httpErrorRange
		}
		parameters.HttpErrorRanges = httpErrorRangeList
	} else {
		parameters.HttpErrorRanges = nil
	}

	// ResponseBasedDetectedErrorTypes
	if source.ResponseBasedDetectedErrorTypes != nil {
		responseBasedDetectedErrorType := ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS(*source.ResponseBasedDetectedErrorTypes)
		parameters.ResponseBasedDetectedErrorTypes = &responseBasedDetectedErrorType
	} else {
		parameters.ResponseBasedDetectedErrorTypes = nil
	}

	// ResponseBasedFailoverThresholdPercentage
	parameters.ResponseBasedFailoverThresholdPercentage = genruntime.ClonePointerToInt(source.ResponseBasedFailoverThresholdPercentage)

	// No error
	return nil
}

// AssignProperties_To_ResponseBasedOriginErrorDetectionParameters_STATUS populates the provided destination ResponseBasedOriginErrorDetectionParameters_STATUS from our ResponseBasedOriginErrorDetectionParameters_STATUS
func (parameters *ResponseBasedOriginErrorDetectionParameters_STATUS) AssignProperties_To_ResponseBasedOriginErrorDetectionParameters_STATUS(destination *v20210601s.ResponseBasedOriginErrorDetectionParameters_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HttpErrorRanges
	if parameters.HttpErrorRanges != nil {
		httpErrorRangeList := make([]v20210601s.HttpErrorRangeParameters_STATUS, len(parameters.HttpErrorRanges))
		for httpErrorRangeIndex, httpErrorRangeItem := range parameters.HttpErrorRanges {
			// Shadow the loop variable to avoid aliasing
			httpErrorRangeItem := httpErrorRangeItem
			var httpErrorRange v20210601s.HttpErrorRangeParameters_STATUS
			err := httpErrorRangeItem.AssignProperties_To_HttpErrorRangeParameters_STATUS(&httpErrorRange)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HttpErrorRangeParameters_STATUS() to populate field HttpErrorRanges")
			}
			httpErrorRangeList[httpErrorRangeIndex] = httpErrorRange
		}
		destination.HttpErrorRanges = httpErrorRangeList
	} else {
		destination.HttpErrorRanges = nil
	}

	// ResponseBasedDetectedErrorTypes
	if parameters.ResponseBasedDetectedErrorTypes != nil {
		responseBasedDetectedErrorType := string(*parameters.ResponseBasedDetectedErrorTypes)
		destination.ResponseBasedDetectedErrorTypes = &responseBasedDetectedErrorType
	} else {
		destination.ResponseBasedDetectedErrorTypes = nil
	}

	// ResponseBasedFailoverThresholdPercentage
	destination.ResponseBasedFailoverThresholdPercentage = genruntime.ClonePointerToInt(parameters.ResponseBasedFailoverThresholdPercentage)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleAction1
type DeliveryRuleAction1 struct {
	// DeliveryRuleCacheExpiration: Mutually exclusive with all other properties
	DeliveryRuleCacheExpiration *DeliveryRuleCacheExpirationAction `json:"deliveryRuleCacheExpirationAction,omitempty"`

	// DeliveryRuleCacheKeyQueryString: Mutually exclusive with all other properties
	DeliveryRuleCacheKeyQueryString *DeliveryRuleCacheKeyQueryStringAction `json:"deliveryRuleCacheKeyQueryStringAction,omitempty"`

	// DeliveryRuleRequestHeader: Mutually exclusive with all other properties
	DeliveryRuleRequestHeader *DeliveryRuleRequestHeaderAction `json:"deliveryRuleRequestHeaderAction,omitempty"`

	// DeliveryRuleResponseHeader: Mutually exclusive with all other properties
	DeliveryRuleResponseHeader *DeliveryRuleResponseHeaderAction `json:"deliveryRuleResponseHeaderAction,omitempty"`

	// DeliveryRuleRouteConfigurationOverride: Mutually exclusive with all other properties
	DeliveryRuleRouteConfigurationOverride *DeliveryRuleRouteConfigurationOverrideAction `json:"deliveryRuleRouteConfigurationOverrideAction,omitempty"`

	// OriginGroupOverride: Mutually exclusive with all other properties
	OriginGroupOverride *OriginGroupOverrideAction `json:"originGroupOverrideAction,omitempty"`

	// UrlRedirect: Mutually exclusive with all other properties
	UrlRedirect *UrlRedirectAction `json:"urlRedirectAction,omitempty"`

	// UrlRewrite: Mutually exclusive with all other properties
	UrlRewrite *UrlRewriteAction `json:"urlRewriteAction,omitempty"`

	// UrlSigning: Mutually exclusive with all other properties
	UrlSigning *UrlSigningAction `json:"urlSigningAction,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleAction1{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action1 *DeliveryRuleAction1) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action1 == nil {
		return nil, nil
	}
	result := &DeliveryRuleAction1_ARM{}

	// Set property ‘DeliveryRuleCacheExpiration’:
	if action1.DeliveryRuleCacheExpiration != nil {
		deliveryRuleCacheExpiration_ARM, err := (*action1.DeliveryRuleCacheExpiration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleCacheExpiration := *deliveryRuleCacheExpiration_ARM.(*DeliveryRuleCacheExpirationAction_ARM)
		result.DeliveryRuleCacheExpiration = &deliveryRuleCacheExpiration
	}

	// Set property ‘DeliveryRuleCacheKeyQueryString’:
	if action1.DeliveryRuleCacheKeyQueryString != nil {
		deliveryRuleCacheKeyQueryString_ARM, err := (*action1.DeliveryRuleCacheKeyQueryString).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleCacheKeyQueryString := *deliveryRuleCacheKeyQueryString_ARM.(*DeliveryRuleCacheKeyQueryStringAction_ARM)
		result.DeliveryRuleCacheKeyQueryString = &deliveryRuleCacheKeyQueryString
	}

	// Set property ‘DeliveryRuleRequestHeader’:
	if action1.DeliveryRuleRequestHeader != nil {
		deliveryRuleRequestHeader_ARM, err := (*action1.DeliveryRuleRequestHeader).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleRequestHeader := *deliveryRuleRequestHeader_ARM.(*DeliveryRuleRequestHeaderAction_ARM)
		result.DeliveryRuleRequestHeader = &deliveryRuleRequestHeader
	}

	// Set property ‘DeliveryRuleResponseHeader’:
	if action1.DeliveryRuleResponseHeader != nil {
		deliveryRuleResponseHeader_ARM, err := (*action1.DeliveryRuleResponseHeader).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleResponseHeader := *deliveryRuleResponseHeader_ARM.(*DeliveryRuleResponseHeaderAction_ARM)
		result.DeliveryRuleResponseHeader = &deliveryRuleResponseHeader
	}

	// Set property ‘DeliveryRuleRouteConfigurationOverride’:
	if action1.DeliveryRuleRouteConfigurationOverride != nil {
		deliveryRuleRouteConfigurationOverride_ARM, err := (*action1.DeliveryRuleRouteConfigurationOverride).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleRouteConfigurationOverride := *deliveryRuleRouteConfigurationOverride_ARM.(*DeliveryRuleRouteConfigurationOverrideAction_ARM)
		result.DeliveryRuleRouteConfigurationOverride = &deliveryRuleRouteConfigurationOverride
	}

	// Set property ‘OriginGroupOverride’:
	if action1.OriginGroupOverride != nil {
		originGroupOverride_ARM, err := (*action1.OriginGroupOverride).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		originGroupOverride := *originGroupOverride_ARM.(*OriginGroupOverrideAction_ARM)
		result.OriginGroupOverride = &originGroupOverride
	}

	// Set property ‘UrlRedirect’:
	if action1.UrlRedirect != nil {
		urlRedirect_ARM, err := (*action1.UrlRedirect).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		urlRedirect := *urlRedirect_ARM.(*UrlRedirectAction_ARM)
		result.UrlRedirect = &urlRedirect
	}

	// Set property ‘UrlRewrite’:
	if action1.UrlRewrite != nil {
		urlRewrite_ARM, err := (*action1.UrlRewrite).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		urlRewrite := *urlRewrite_ARM.(*UrlRewriteAction_ARM)
		result.UrlRewrite = &urlRewrite
	}

	// Set property ‘UrlSigning’:
	if action1.UrlSigning != nil {
		urlSigning_ARM, err := (*action1.UrlSigning).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		urlSigning := *urlSigning_ARM.(*UrlSigningAction_ARM)
		result.UrlSigning = &urlSigning
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action1 *DeliveryRuleAction1) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleAction1_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action1 *DeliveryRuleAction1) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleAction1_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleAction1_ARM, got %T", armInput)
	}

	// Set property ‘DeliveryRuleCacheExpiration’:
	if typedInput.DeliveryRuleCacheExpiration != nil {
		var deliveryRuleCacheExpiration1 DeliveryRuleCacheExpirationAction
		err := deliveryRuleCacheExpiration1.PopulateFromARM(owner, *typedInput.DeliveryRuleCacheExpiration)
		if err != nil {
			return err
		}
		deliveryRuleCacheExpiration := deliveryRuleCacheExpiration1
		action1.DeliveryRuleCacheExpiration = &deliveryRuleCacheExpiration
	}

	// Set property ‘DeliveryRuleCacheKeyQueryString’:
	if typedInput.DeliveryRuleCacheKeyQueryString != nil {
		var deliveryRuleCacheKeyQueryString1 DeliveryRuleCacheKeyQueryStringAction
		err := deliveryRuleCacheKeyQueryString1.PopulateFromARM(owner, *typedInput.DeliveryRuleCacheKeyQueryString)
		if err != nil {
			return err
		}
		deliveryRuleCacheKeyQueryString := deliveryRuleCacheKeyQueryString1
		action1.DeliveryRuleCacheKeyQueryString = &deliveryRuleCacheKeyQueryString
	}

	// Set property ‘DeliveryRuleRequestHeader’:
	if typedInput.DeliveryRuleRequestHeader != nil {
		var deliveryRuleRequestHeader1 DeliveryRuleRequestHeaderAction
		err := deliveryRuleRequestHeader1.PopulateFromARM(owner, *typedInput.DeliveryRuleRequestHeader)
		if err != nil {
			return err
		}
		deliveryRuleRequestHeader := deliveryRuleRequestHeader1
		action1.DeliveryRuleRequestHeader = &deliveryRuleRequestHeader
	}

	// Set property ‘DeliveryRuleResponseHeader’:
	if typedInput.DeliveryRuleResponseHeader != nil {
		var deliveryRuleResponseHeader1 DeliveryRuleResponseHeaderAction
		err := deliveryRuleResponseHeader1.PopulateFromARM(owner, *typedInput.DeliveryRuleResponseHeader)
		if err != nil {
			return err
		}
		deliveryRuleResponseHeader := deliveryRuleResponseHeader1
		action1.DeliveryRuleResponseHeader = &deliveryRuleResponseHeader
	}

	// Set property ‘DeliveryRuleRouteConfigurationOverride’:
	if typedInput.DeliveryRuleRouteConfigurationOverride != nil {
		var deliveryRuleRouteConfigurationOverride1 DeliveryRuleRouteConfigurationOverrideAction
		err := deliveryRuleRouteConfigurationOverride1.PopulateFromARM(owner, *typedInput.DeliveryRuleRouteConfigurationOverride)
		if err != nil {
			return err
		}
		deliveryRuleRouteConfigurationOverride := deliveryRuleRouteConfigurationOverride1
		action1.DeliveryRuleRouteConfigurationOverride = &deliveryRuleRouteConfigurationOverride
	}

	// Set property ‘OriginGroupOverride’:
	if typedInput.OriginGroupOverride != nil {
		var originGroupOverride1 OriginGroupOverrideAction
		err := originGroupOverride1.PopulateFromARM(owner, *typedInput.OriginGroupOverride)
		if err != nil {
			return err
		}
		originGroupOverride := originGroupOverride1
		action1.OriginGroupOverride = &originGroupOverride
	}

	// Set property ‘UrlRedirect’:
	if typedInput.UrlRedirect != nil {
		var urlRedirect1 UrlRedirectAction
		err := urlRedirect1.PopulateFromARM(owner, *typedInput.UrlRedirect)
		if err != nil {
			return err
		}
		urlRedirect := urlRedirect1
		action1.UrlRedirect = &urlRedirect
	}

	// Set property ‘UrlRewrite’:
	if typedInput.UrlRewrite != nil {
		var urlRewrite1 UrlRewriteAction
		err := urlRewrite1.PopulateFromARM(owner, *typedInput.UrlRewrite)
		if err != nil {
			return err
		}
		urlRewrite := urlRewrite1
		action1.UrlRewrite = &urlRewrite
	}

	// Set property ‘UrlSigning’:
	if typedInput.UrlSigning != nil {
		var urlSigning1 UrlSigningAction
		err := urlSigning1.PopulateFromARM(owner, *typedInput.UrlSigning)
		if err != nil {
			return err
		}
		urlSigning := urlSigning1
		action1.UrlSigning = &urlSigning
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleAction1 populates our DeliveryRuleAction1 from the provided source DeliveryRuleAction1
func (action1 *DeliveryRuleAction1) AssignProperties_From_DeliveryRuleAction1(source *v20210601s.DeliveryRuleAction1) error {

	// DeliveryRuleCacheExpiration
	if source.DeliveryRuleCacheExpiration != nil {
		var deliveryRuleCacheExpiration DeliveryRuleCacheExpirationAction
		err := deliveryRuleCacheExpiration.AssignProperties_From_DeliveryRuleCacheExpirationAction(source.DeliveryRuleCacheExpiration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleCacheExpirationAction() to populate field DeliveryRuleCacheExpiration")
		}
		action1.DeliveryRuleCacheExpiration = &deliveryRuleCacheExpiration
	} else {
		action1.DeliveryRuleCacheExpiration = nil
	}

	// DeliveryRuleCacheKeyQueryString
	if source.DeliveryRuleCacheKeyQueryString != nil {
		var deliveryRuleCacheKeyQueryString DeliveryRuleCacheKeyQueryStringAction
		err := deliveryRuleCacheKeyQueryString.AssignProperties_From_DeliveryRuleCacheKeyQueryStringAction(source.DeliveryRuleCacheKeyQueryString)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleCacheKeyQueryStringAction() to populate field DeliveryRuleCacheKeyQueryString")
		}
		action1.DeliveryRuleCacheKeyQueryString = &deliveryRuleCacheKeyQueryString
	} else {
		action1.DeliveryRuleCacheKeyQueryString = nil
	}

	// DeliveryRuleRequestHeader
	if source.DeliveryRuleRequestHeader != nil {
		var deliveryRuleRequestHeader DeliveryRuleRequestHeaderAction
		err := deliveryRuleRequestHeader.AssignProperties_From_DeliveryRuleRequestHeaderAction(source.DeliveryRuleRequestHeader)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleRequestHeaderAction() to populate field DeliveryRuleRequestHeader")
		}
		action1.DeliveryRuleRequestHeader = &deliveryRuleRequestHeader
	} else {
		action1.DeliveryRuleRequestHeader = nil
	}

	// DeliveryRuleResponseHeader
	if source.DeliveryRuleResponseHeader != nil {
		var deliveryRuleResponseHeader DeliveryRuleResponseHeaderAction
		err := deliveryRuleResponseHeader.AssignProperties_From_DeliveryRuleResponseHeaderAction(source.DeliveryRuleResponseHeader)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleResponseHeaderAction() to populate field DeliveryRuleResponseHeader")
		}
		action1.DeliveryRuleResponseHeader = &deliveryRuleResponseHeader
	} else {
		action1.DeliveryRuleResponseHeader = nil
	}

	// DeliveryRuleRouteConfigurationOverride
	if source.DeliveryRuleRouteConfigurationOverride != nil {
		var deliveryRuleRouteConfigurationOverride DeliveryRuleRouteConfigurationOverrideAction
		err := deliveryRuleRouteConfigurationOverride.AssignProperties_From_DeliveryRuleRouteConfigurationOverrideAction(source.DeliveryRuleRouteConfigurationOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleRouteConfigurationOverrideAction() to populate field DeliveryRuleRouteConfigurationOverride")
		}
		action1.DeliveryRuleRouteConfigurationOverride = &deliveryRuleRouteConfigurationOverride
	} else {
		action1.DeliveryRuleRouteConfigurationOverride = nil
	}

	// OriginGroupOverride
	if source.OriginGroupOverride != nil {
		var originGroupOverride OriginGroupOverrideAction
		err := originGroupOverride.AssignProperties_From_OriginGroupOverrideAction(source.OriginGroupOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_OriginGroupOverrideAction() to populate field OriginGroupOverride")
		}
		action1.OriginGroupOverride = &originGroupOverride
	} else {
		action1.OriginGroupOverride = nil
	}

	// UrlRedirect
	if source.UrlRedirect != nil {
		var urlRedirect UrlRedirectAction
		err := urlRedirect.AssignProperties_From_UrlRedirectAction(source.UrlRedirect)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UrlRedirectAction() to populate field UrlRedirect")
		}
		action1.UrlRedirect = &urlRedirect
	} else {
		action1.UrlRedirect = nil
	}

	// UrlRewrite
	if source.UrlRewrite != nil {
		var urlRewrite UrlRewriteAction
		err := urlRewrite.AssignProperties_From_UrlRewriteAction(source.UrlRewrite)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UrlRewriteAction() to populate field UrlRewrite")
		}
		action1.UrlRewrite = &urlRewrite
	} else {
		action1.UrlRewrite = nil
	}

	// UrlSigning
	if source.UrlSigning != nil {
		var urlSigning UrlSigningAction
		err := urlSigning.AssignProperties_From_UrlSigningAction(source.UrlSigning)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UrlSigningAction() to populate field UrlSigning")
		}
		action1.UrlSigning = &urlSigning
	} else {
		action1.UrlSigning = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleAction1 populates the provided destination DeliveryRuleAction1 from our DeliveryRuleAction1
func (action1 *DeliveryRuleAction1) AssignProperties_To_DeliveryRuleAction1(destination *v20210601s.DeliveryRuleAction1) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DeliveryRuleCacheExpiration
	if action1.DeliveryRuleCacheExpiration != nil {
		var deliveryRuleCacheExpiration v20210601s.DeliveryRuleCacheExpirationAction
		err := action1.DeliveryRuleCacheExpiration.AssignProperties_To_DeliveryRuleCacheExpirationAction(&deliveryRuleCacheExpiration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleCacheExpirationAction() to populate field DeliveryRuleCacheExpiration")
		}
		destination.DeliveryRuleCacheExpiration = &deliveryRuleCacheExpiration
	} else {
		destination.DeliveryRuleCacheExpiration = nil
	}

	// DeliveryRuleCacheKeyQueryString
	if action1.DeliveryRuleCacheKeyQueryString != nil {
		var deliveryRuleCacheKeyQueryString v20210601s.DeliveryRuleCacheKeyQueryStringAction
		err := action1.DeliveryRuleCacheKeyQueryString.AssignProperties_To_DeliveryRuleCacheKeyQueryStringAction(&deliveryRuleCacheKeyQueryString)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleCacheKeyQueryStringAction() to populate field DeliveryRuleCacheKeyQueryString")
		}
		destination.DeliveryRuleCacheKeyQueryString = &deliveryRuleCacheKeyQueryString
	} else {
		destination.DeliveryRuleCacheKeyQueryString = nil
	}

	// DeliveryRuleRequestHeader
	if action1.DeliveryRuleRequestHeader != nil {
		var deliveryRuleRequestHeader v20210601s.DeliveryRuleRequestHeaderAction
		err := action1.DeliveryRuleRequestHeader.AssignProperties_To_DeliveryRuleRequestHeaderAction(&deliveryRuleRequestHeader)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleRequestHeaderAction() to populate field DeliveryRuleRequestHeader")
		}
		destination.DeliveryRuleRequestHeader = &deliveryRuleRequestHeader
	} else {
		destination.DeliveryRuleRequestHeader = nil
	}

	// DeliveryRuleResponseHeader
	if action1.DeliveryRuleResponseHeader != nil {
		var deliveryRuleResponseHeader v20210601s.DeliveryRuleResponseHeaderAction
		err := action1.DeliveryRuleResponseHeader.AssignProperties_To_DeliveryRuleResponseHeaderAction(&deliveryRuleResponseHeader)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleResponseHeaderAction() to populate field DeliveryRuleResponseHeader")
		}
		destination.DeliveryRuleResponseHeader = &deliveryRuleResponseHeader
	} else {
		destination.DeliveryRuleResponseHeader = nil
	}

	// DeliveryRuleRouteConfigurationOverride
	if action1.DeliveryRuleRouteConfigurationOverride != nil {
		var deliveryRuleRouteConfigurationOverride v20210601s.DeliveryRuleRouteConfigurationOverrideAction
		err := action1.DeliveryRuleRouteConfigurationOverride.AssignProperties_To_DeliveryRuleRouteConfigurationOverrideAction(&deliveryRuleRouteConfigurationOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleRouteConfigurationOverrideAction() to populate field DeliveryRuleRouteConfigurationOverride")
		}
		destination.DeliveryRuleRouteConfigurationOverride = &deliveryRuleRouteConfigurationOverride
	} else {
		destination.DeliveryRuleRouteConfigurationOverride = nil
	}

	// OriginGroupOverride
	if action1.OriginGroupOverride != nil {
		var originGroupOverride v20210601s.OriginGroupOverrideAction
		err := action1.OriginGroupOverride.AssignProperties_To_OriginGroupOverrideAction(&originGroupOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_OriginGroupOverrideAction() to populate field OriginGroupOverride")
		}
		destination.OriginGroupOverride = &originGroupOverride
	} else {
		destination.OriginGroupOverride = nil
	}

	// UrlRedirect
	if action1.UrlRedirect != nil {
		var urlRedirect v20210601s.UrlRedirectAction
		err := action1.UrlRedirect.AssignProperties_To_UrlRedirectAction(&urlRedirect)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UrlRedirectAction() to populate field UrlRedirect")
		}
		destination.UrlRedirect = &urlRedirect
	} else {
		destination.UrlRedirect = nil
	}

	// UrlRewrite
	if action1.UrlRewrite != nil {
		var urlRewrite v20210601s.UrlRewriteAction
		err := action1.UrlRewrite.AssignProperties_To_UrlRewriteAction(&urlRewrite)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UrlRewriteAction() to populate field UrlRewrite")
		}
		destination.UrlRewrite = &urlRewrite
	} else {
		destination.UrlRewrite = nil
	}

	// UrlSigning
	if action1.UrlSigning != nil {
		var urlSigning v20210601s.UrlSigningAction
		err := action1.UrlSigning.AssignProperties_To_UrlSigningAction(&urlSigning)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UrlSigningAction() to populate field UrlSigning")
		}
		destination.UrlSigning = &urlSigning
	} else {
		destination.UrlSigning = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeliveryRuleAction_STATUS struct {
	// Name: The name of the action for the delivery rule.
	Name *DeliveryRuleAction_Name_STATUS `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &DeliveryRuleAction_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *DeliveryRuleAction_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleAction_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *DeliveryRuleAction_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleAction_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleAction_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		action.Name = &name
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleAction_STATUS populates our DeliveryRuleAction_STATUS from the provided source DeliveryRuleAction_STATUS
func (action *DeliveryRuleAction_STATUS) AssignProperties_From_DeliveryRuleAction_STATUS(source *v20210601s.DeliveryRuleAction_STATUS) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleAction_Name_STATUS(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleAction_STATUS populates the provided destination DeliveryRuleAction_STATUS from our DeliveryRuleAction_STATUS
func (action *DeliveryRuleAction_STATUS) AssignProperties_To_DeliveryRuleAction_STATUS(destination *v20210601s.DeliveryRuleAction_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleCondition
type DeliveryRuleCondition struct {
	// DeliveryRuleClientPort: Mutually exclusive with all other properties
	DeliveryRuleClientPort *DeliveryRuleClientPortCondition `json:"deliveryRuleClientPortCondition,omitempty"`

	// DeliveryRuleCookies: Mutually exclusive with all other properties
	DeliveryRuleCookies *DeliveryRuleCookiesCondition `json:"deliveryRuleCookiesCondition,omitempty"`

	// DeliveryRuleHostName: Mutually exclusive with all other properties
	DeliveryRuleHostName *DeliveryRuleHostNameCondition `json:"deliveryRuleHostNameCondition,omitempty"`

	// DeliveryRuleHttpVersion: Mutually exclusive with all other properties
	DeliveryRuleHttpVersion *DeliveryRuleHttpVersionCondition `json:"deliveryRuleHttpVersionCondition,omitempty"`

	// DeliveryRuleIsDevice: Mutually exclusive with all other properties
	DeliveryRuleIsDevice *DeliveryRuleIsDeviceCondition `json:"deliveryRuleIsDeviceCondition,omitempty"`

	// DeliveryRulePostArgs: Mutually exclusive with all other properties
	DeliveryRulePostArgs *DeliveryRulePostArgsCondition `json:"deliveryRulePostArgsCondition,omitempty"`

	// DeliveryRuleQueryString: Mutually exclusive with all other properties
	DeliveryRuleQueryString *DeliveryRuleQueryStringCondition `json:"deliveryRuleQueryStringCondition,omitempty"`

	// DeliveryRuleRemoteAddress: Mutually exclusive with all other properties
	DeliveryRuleRemoteAddress *DeliveryRuleRemoteAddressCondition `json:"deliveryRuleRemoteAddressCondition,omitempty"`

	// DeliveryRuleRequestBody: Mutually exclusive with all other properties
	DeliveryRuleRequestBody *DeliveryRuleRequestBodyCondition `json:"deliveryRuleRequestBodyCondition,omitempty"`

	// DeliveryRuleRequestHeader: Mutually exclusive with all other properties
	DeliveryRuleRequestHeader *DeliveryRuleRequestHeaderCondition `json:"deliveryRuleRequestHeaderCondition,omitempty"`

	// DeliveryRuleRequestMethod: Mutually exclusive with all other properties
	DeliveryRuleRequestMethod *DeliveryRuleRequestMethodCondition `json:"deliveryRuleRequestMethodCondition,omitempty"`

	// DeliveryRuleRequestScheme: Mutually exclusive with all other properties
	DeliveryRuleRequestScheme *DeliveryRuleRequestSchemeCondition `json:"deliveryRuleRequestSchemeCondition,omitempty"`

	// DeliveryRuleRequestUri: Mutually exclusive with all other properties
	DeliveryRuleRequestUri *DeliveryRuleRequestUriCondition `json:"deliveryRuleRequestUriCondition,omitempty"`

	// DeliveryRuleServerPort: Mutually exclusive with all other properties
	DeliveryRuleServerPort *DeliveryRuleServerPortCondition `json:"deliveryRuleServerPortCondition,omitempty"`

	// DeliveryRuleSocketAddr: Mutually exclusive with all other properties
	DeliveryRuleSocketAddr *DeliveryRuleSocketAddrCondition `json:"deliveryRuleSocketAddrCondition,omitempty"`

	// DeliveryRuleSslProtocol: Mutually exclusive with all other properties
	DeliveryRuleSslProtocol *DeliveryRuleSslProtocolCondition `json:"deliveryRuleSslProtocolCondition,omitempty"`

	// DeliveryRuleUrlFileExtension: Mutually exclusive with all other properties
	DeliveryRuleUrlFileExtension *DeliveryRuleUrlFileExtensionCondition `json:"deliveryRuleUrlFileExtensionCondition,omitempty"`

	// DeliveryRuleUrlFileName: Mutually exclusive with all other properties
	DeliveryRuleUrlFileName *DeliveryRuleUrlFileNameCondition `json:"deliveryRuleUrlFileNameCondition,omitempty"`

	// DeliveryRuleUrlPath: Mutually exclusive with all other properties
	DeliveryRuleUrlPath *DeliveryRuleUrlPathCondition `json:"deliveryRuleUrlPathCondition,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleCondition_ARM{}

	// Set property ‘DeliveryRuleClientPort’:
	if condition.DeliveryRuleClientPort != nil {
		deliveryRuleClientPort_ARM, err := (*condition.DeliveryRuleClientPort).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleClientPort := *deliveryRuleClientPort_ARM.(*DeliveryRuleClientPortCondition_ARM)
		result.DeliveryRuleClientPort = &deliveryRuleClientPort
	}

	// Set property ‘DeliveryRuleCookies’:
	if condition.DeliveryRuleCookies != nil {
		deliveryRuleCookies_ARM, err := (*condition.DeliveryRuleCookies).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleCookies := *deliveryRuleCookies_ARM.(*DeliveryRuleCookiesCondition_ARM)
		result.DeliveryRuleCookies = &deliveryRuleCookies
	}

	// Set property ‘DeliveryRuleHostName’:
	if condition.DeliveryRuleHostName != nil {
		deliveryRuleHostName_ARM, err := (*condition.DeliveryRuleHostName).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleHostName := *deliveryRuleHostName_ARM.(*DeliveryRuleHostNameCondition_ARM)
		result.DeliveryRuleHostName = &deliveryRuleHostName
	}

	// Set property ‘DeliveryRuleHttpVersion’:
	if condition.DeliveryRuleHttpVersion != nil {
		deliveryRuleHttpVersion_ARM, err := (*condition.DeliveryRuleHttpVersion).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleHttpVersion := *deliveryRuleHttpVersion_ARM.(*DeliveryRuleHttpVersionCondition_ARM)
		result.DeliveryRuleHttpVersion = &deliveryRuleHttpVersion
	}

	// Set property ‘DeliveryRuleIsDevice’:
	if condition.DeliveryRuleIsDevice != nil {
		deliveryRuleIsDevice_ARM, err := (*condition.DeliveryRuleIsDevice).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleIsDevice := *deliveryRuleIsDevice_ARM.(*DeliveryRuleIsDeviceCondition_ARM)
		result.DeliveryRuleIsDevice = &deliveryRuleIsDevice
	}

	// Set property ‘DeliveryRulePostArgs’:
	if condition.DeliveryRulePostArgs != nil {
		deliveryRulePostArgs_ARM, err := (*condition.DeliveryRulePostArgs).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRulePostArgs := *deliveryRulePostArgs_ARM.(*DeliveryRulePostArgsCondition_ARM)
		result.DeliveryRulePostArgs = &deliveryRulePostArgs
	}

	// Set property ‘DeliveryRuleQueryString’:
	if condition.DeliveryRuleQueryString != nil {
		deliveryRuleQueryString_ARM, err := (*condition.DeliveryRuleQueryString).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleQueryString := *deliveryRuleQueryString_ARM.(*DeliveryRuleQueryStringCondition_ARM)
		result.DeliveryRuleQueryString = &deliveryRuleQueryString
	}

	// Set property ‘DeliveryRuleRemoteAddress’:
	if condition.DeliveryRuleRemoteAddress != nil {
		deliveryRuleRemoteAddress_ARM, err := (*condition.DeliveryRuleRemoteAddress).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleRemoteAddress := *deliveryRuleRemoteAddress_ARM.(*DeliveryRuleRemoteAddressCondition_ARM)
		result.DeliveryRuleRemoteAddress = &deliveryRuleRemoteAddress
	}

	// Set property ‘DeliveryRuleRequestBody’:
	if condition.DeliveryRuleRequestBody != nil {
		deliveryRuleRequestBody_ARM, err := (*condition.DeliveryRuleRequestBody).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleRequestBody := *deliveryRuleRequestBody_ARM.(*DeliveryRuleRequestBodyCondition_ARM)
		result.DeliveryRuleRequestBody = &deliveryRuleRequestBody
	}

	// Set property ‘DeliveryRuleRequestHeader’:
	if condition.DeliveryRuleRequestHeader != nil {
		deliveryRuleRequestHeader_ARM, err := (*condition.DeliveryRuleRequestHeader).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleRequestHeader := *deliveryRuleRequestHeader_ARM.(*DeliveryRuleRequestHeaderCondition_ARM)
		result.DeliveryRuleRequestHeader = &deliveryRuleRequestHeader
	}

	// Set property ‘DeliveryRuleRequestMethod’:
	if condition.DeliveryRuleRequestMethod != nil {
		deliveryRuleRequestMethod_ARM, err := (*condition.DeliveryRuleRequestMethod).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleRequestMethod := *deliveryRuleRequestMethod_ARM.(*DeliveryRuleRequestMethodCondition_ARM)
		result.DeliveryRuleRequestMethod = &deliveryRuleRequestMethod
	}

	// Set property ‘DeliveryRuleRequestScheme’:
	if condition.DeliveryRuleRequestScheme != nil {
		deliveryRuleRequestScheme_ARM, err := (*condition.DeliveryRuleRequestScheme).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleRequestScheme := *deliveryRuleRequestScheme_ARM.(*DeliveryRuleRequestSchemeCondition_ARM)
		result.DeliveryRuleRequestScheme = &deliveryRuleRequestScheme
	}

	// Set property ‘DeliveryRuleRequestUri’:
	if condition.DeliveryRuleRequestUri != nil {
		deliveryRuleRequestUri_ARM, err := (*condition.DeliveryRuleRequestUri).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleRequestUri := *deliveryRuleRequestUri_ARM.(*DeliveryRuleRequestUriCondition_ARM)
		result.DeliveryRuleRequestUri = &deliveryRuleRequestUri
	}

	// Set property ‘DeliveryRuleServerPort’:
	if condition.DeliveryRuleServerPort != nil {
		deliveryRuleServerPort_ARM, err := (*condition.DeliveryRuleServerPort).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleServerPort := *deliveryRuleServerPort_ARM.(*DeliveryRuleServerPortCondition_ARM)
		result.DeliveryRuleServerPort = &deliveryRuleServerPort
	}

	// Set property ‘DeliveryRuleSocketAddr’:
	if condition.DeliveryRuleSocketAddr != nil {
		deliveryRuleSocketAddr_ARM, err := (*condition.DeliveryRuleSocketAddr).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleSocketAddr := *deliveryRuleSocketAddr_ARM.(*DeliveryRuleSocketAddrCondition_ARM)
		result.DeliveryRuleSocketAddr = &deliveryRuleSocketAddr
	}

	// Set property ‘DeliveryRuleSslProtocol’:
	if condition.DeliveryRuleSslProtocol != nil {
		deliveryRuleSslProtocol_ARM, err := (*condition.DeliveryRuleSslProtocol).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleSslProtocol := *deliveryRuleSslProtocol_ARM.(*DeliveryRuleSslProtocolCondition_ARM)
		result.DeliveryRuleSslProtocol = &deliveryRuleSslProtocol
	}

	// Set property ‘DeliveryRuleUrlFileExtension’:
	if condition.DeliveryRuleUrlFileExtension != nil {
		deliveryRuleUrlFileExtension_ARM, err := (*condition.DeliveryRuleUrlFileExtension).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleUrlFileExtension := *deliveryRuleUrlFileExtension_ARM.(*DeliveryRuleUrlFileExtensionCondition_ARM)
		result.DeliveryRuleUrlFileExtension = &deliveryRuleUrlFileExtension
	}

	// Set property ‘DeliveryRuleUrlFileName’:
	if condition.DeliveryRuleUrlFileName != nil {
		deliveryRuleUrlFileName_ARM, err := (*condition.DeliveryRuleUrlFileName).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleUrlFileName := *deliveryRuleUrlFileName_ARM.(*DeliveryRuleUrlFileNameCondition_ARM)
		result.DeliveryRuleUrlFileName = &deliveryRuleUrlFileName
	}

	// Set property ‘DeliveryRuleUrlPath’:
	if condition.DeliveryRuleUrlPath != nil {
		deliveryRuleUrlPath_ARM, err := (*condition.DeliveryRuleUrlPath).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		deliveryRuleUrlPath := *deliveryRuleUrlPath_ARM.(*DeliveryRuleUrlPathCondition_ARM)
		result.DeliveryRuleUrlPath = &deliveryRuleUrlPath
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleCondition_ARM, got %T", armInput)
	}

	// Set property ‘DeliveryRuleClientPort’:
	if typedInput.DeliveryRuleClientPort != nil {
		var deliveryRuleClientPort1 DeliveryRuleClientPortCondition
		err := deliveryRuleClientPort1.PopulateFromARM(owner, *typedInput.DeliveryRuleClientPort)
		if err != nil {
			return err
		}
		deliveryRuleClientPort := deliveryRuleClientPort1
		condition.DeliveryRuleClientPort = &deliveryRuleClientPort
	}

	// Set property ‘DeliveryRuleCookies’:
	if typedInput.DeliveryRuleCookies != nil {
		var deliveryRuleCookies1 DeliveryRuleCookiesCondition
		err := deliveryRuleCookies1.PopulateFromARM(owner, *typedInput.DeliveryRuleCookies)
		if err != nil {
			return err
		}
		deliveryRuleCookies := deliveryRuleCookies1
		condition.DeliveryRuleCookies = &deliveryRuleCookies
	}

	// Set property ‘DeliveryRuleHostName’:
	if typedInput.DeliveryRuleHostName != nil {
		var deliveryRuleHostName1 DeliveryRuleHostNameCondition
		err := deliveryRuleHostName1.PopulateFromARM(owner, *typedInput.DeliveryRuleHostName)
		if err != nil {
			return err
		}
		deliveryRuleHostName := deliveryRuleHostName1
		condition.DeliveryRuleHostName = &deliveryRuleHostName
	}

	// Set property ‘DeliveryRuleHttpVersion’:
	if typedInput.DeliveryRuleHttpVersion != nil {
		var deliveryRuleHttpVersion1 DeliveryRuleHttpVersionCondition
		err := deliveryRuleHttpVersion1.PopulateFromARM(owner, *typedInput.DeliveryRuleHttpVersion)
		if err != nil {
			return err
		}
		deliveryRuleHttpVersion := deliveryRuleHttpVersion1
		condition.DeliveryRuleHttpVersion = &deliveryRuleHttpVersion
	}

	// Set property ‘DeliveryRuleIsDevice’:
	if typedInput.DeliveryRuleIsDevice != nil {
		var deliveryRuleIsDevice1 DeliveryRuleIsDeviceCondition
		err := deliveryRuleIsDevice1.PopulateFromARM(owner, *typedInput.DeliveryRuleIsDevice)
		if err != nil {
			return err
		}
		deliveryRuleIsDevice := deliveryRuleIsDevice1
		condition.DeliveryRuleIsDevice = &deliveryRuleIsDevice
	}

	// Set property ‘DeliveryRulePostArgs’:
	if typedInput.DeliveryRulePostArgs != nil {
		var deliveryRulePostArgs1 DeliveryRulePostArgsCondition
		err := deliveryRulePostArgs1.PopulateFromARM(owner, *typedInput.DeliveryRulePostArgs)
		if err != nil {
			return err
		}
		deliveryRulePostArgs := deliveryRulePostArgs1
		condition.DeliveryRulePostArgs = &deliveryRulePostArgs
	}

	// Set property ‘DeliveryRuleQueryString’:
	if typedInput.DeliveryRuleQueryString != nil {
		var deliveryRuleQueryString1 DeliveryRuleQueryStringCondition
		err := deliveryRuleQueryString1.PopulateFromARM(owner, *typedInput.DeliveryRuleQueryString)
		if err != nil {
			return err
		}
		deliveryRuleQueryString := deliveryRuleQueryString1
		condition.DeliveryRuleQueryString = &deliveryRuleQueryString
	}

	// Set property ‘DeliveryRuleRemoteAddress’:
	if typedInput.DeliveryRuleRemoteAddress != nil {
		var deliveryRuleRemoteAddress1 DeliveryRuleRemoteAddressCondition
		err := deliveryRuleRemoteAddress1.PopulateFromARM(owner, *typedInput.DeliveryRuleRemoteAddress)
		if err != nil {
			return err
		}
		deliveryRuleRemoteAddress := deliveryRuleRemoteAddress1
		condition.DeliveryRuleRemoteAddress = &deliveryRuleRemoteAddress
	}

	// Set property ‘DeliveryRuleRequestBody’:
	if typedInput.DeliveryRuleRequestBody != nil {
		var deliveryRuleRequestBody1 DeliveryRuleRequestBodyCondition
		err := deliveryRuleRequestBody1.PopulateFromARM(owner, *typedInput.DeliveryRuleRequestBody)
		if err != nil {
			return err
		}
		deliveryRuleRequestBody := deliveryRuleRequestBody1
		condition.DeliveryRuleRequestBody = &deliveryRuleRequestBody
	}

	// Set property ‘DeliveryRuleRequestHeader’:
	if typedInput.DeliveryRuleRequestHeader != nil {
		var deliveryRuleRequestHeader1 DeliveryRuleRequestHeaderCondition
		err := deliveryRuleRequestHeader1.PopulateFromARM(owner, *typedInput.DeliveryRuleRequestHeader)
		if err != nil {
			return err
		}
		deliveryRuleRequestHeader := deliveryRuleRequestHeader1
		condition.DeliveryRuleRequestHeader = &deliveryRuleRequestHeader
	}

	// Set property ‘DeliveryRuleRequestMethod’:
	if typedInput.DeliveryRuleRequestMethod != nil {
		var deliveryRuleRequestMethod1 DeliveryRuleRequestMethodCondition
		err := deliveryRuleRequestMethod1.PopulateFromARM(owner, *typedInput.DeliveryRuleRequestMethod)
		if err != nil {
			return err
		}
		deliveryRuleRequestMethod := deliveryRuleRequestMethod1
		condition.DeliveryRuleRequestMethod = &deliveryRuleRequestMethod
	}

	// Set property ‘DeliveryRuleRequestScheme’:
	if typedInput.DeliveryRuleRequestScheme != nil {
		var deliveryRuleRequestScheme1 DeliveryRuleRequestSchemeCondition
		err := deliveryRuleRequestScheme1.PopulateFromARM(owner, *typedInput.DeliveryRuleRequestScheme)
		if err != nil {
			return err
		}
		deliveryRuleRequestScheme := deliveryRuleRequestScheme1
		condition.DeliveryRuleRequestScheme = &deliveryRuleRequestScheme
	}

	// Set property ‘DeliveryRuleRequestUri’:
	if typedInput.DeliveryRuleRequestUri != nil {
		var deliveryRuleRequestUri1 DeliveryRuleRequestUriCondition
		err := deliveryRuleRequestUri1.PopulateFromARM(owner, *typedInput.DeliveryRuleRequestUri)
		if err != nil {
			return err
		}
		deliveryRuleRequestUri := deliveryRuleRequestUri1
		condition.DeliveryRuleRequestUri = &deliveryRuleRequestUri
	}

	// Set property ‘DeliveryRuleServerPort’:
	if typedInput.DeliveryRuleServerPort != nil {
		var deliveryRuleServerPort1 DeliveryRuleServerPortCondition
		err := deliveryRuleServerPort1.PopulateFromARM(owner, *typedInput.DeliveryRuleServerPort)
		if err != nil {
			return err
		}
		deliveryRuleServerPort := deliveryRuleServerPort1
		condition.DeliveryRuleServerPort = &deliveryRuleServerPort
	}

	// Set property ‘DeliveryRuleSocketAddr’:
	if typedInput.DeliveryRuleSocketAddr != nil {
		var deliveryRuleSocketAddr1 DeliveryRuleSocketAddrCondition
		err := deliveryRuleSocketAddr1.PopulateFromARM(owner, *typedInput.DeliveryRuleSocketAddr)
		if err != nil {
			return err
		}
		deliveryRuleSocketAddr := deliveryRuleSocketAddr1
		condition.DeliveryRuleSocketAddr = &deliveryRuleSocketAddr
	}

	// Set property ‘DeliveryRuleSslProtocol’:
	if typedInput.DeliveryRuleSslProtocol != nil {
		var deliveryRuleSslProtocol1 DeliveryRuleSslProtocolCondition
		err := deliveryRuleSslProtocol1.PopulateFromARM(owner, *typedInput.DeliveryRuleSslProtocol)
		if err != nil {
			return err
		}
		deliveryRuleSslProtocol := deliveryRuleSslProtocol1
		condition.DeliveryRuleSslProtocol = &deliveryRuleSslProtocol
	}

	// Set property ‘DeliveryRuleUrlFileExtension’:
	if typedInput.DeliveryRuleUrlFileExtension != nil {
		var deliveryRuleUrlFileExtension1 DeliveryRuleUrlFileExtensionCondition
		err := deliveryRuleUrlFileExtension1.PopulateFromARM(owner, *typedInput.DeliveryRuleUrlFileExtension)
		if err != nil {
			return err
		}
		deliveryRuleUrlFileExtension := deliveryRuleUrlFileExtension1
		condition.DeliveryRuleUrlFileExtension = &deliveryRuleUrlFileExtension
	}

	// Set property ‘DeliveryRuleUrlFileName’:
	if typedInput.DeliveryRuleUrlFileName != nil {
		var deliveryRuleUrlFileName1 DeliveryRuleUrlFileNameCondition
		err := deliveryRuleUrlFileName1.PopulateFromARM(owner, *typedInput.DeliveryRuleUrlFileName)
		if err != nil {
			return err
		}
		deliveryRuleUrlFileName := deliveryRuleUrlFileName1
		condition.DeliveryRuleUrlFileName = &deliveryRuleUrlFileName
	}

	// Set property ‘DeliveryRuleUrlPath’:
	if typedInput.DeliveryRuleUrlPath != nil {
		var deliveryRuleUrlPath1 DeliveryRuleUrlPathCondition
		err := deliveryRuleUrlPath1.PopulateFromARM(owner, *typedInput.DeliveryRuleUrlPath)
		if err != nil {
			return err
		}
		deliveryRuleUrlPath := deliveryRuleUrlPath1
		condition.DeliveryRuleUrlPath = &deliveryRuleUrlPath
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleCondition populates our DeliveryRuleCondition from the provided source DeliveryRuleCondition
func (condition *DeliveryRuleCondition) AssignProperties_From_DeliveryRuleCondition(source *v20210601s.DeliveryRuleCondition) error {

	// DeliveryRuleClientPort
	if source.DeliveryRuleClientPort != nil {
		var deliveryRuleClientPort DeliveryRuleClientPortCondition
		err := deliveryRuleClientPort.AssignProperties_From_DeliveryRuleClientPortCondition(source.DeliveryRuleClientPort)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleClientPortCondition() to populate field DeliveryRuleClientPort")
		}
		condition.DeliveryRuleClientPort = &deliveryRuleClientPort
	} else {
		condition.DeliveryRuleClientPort = nil
	}

	// DeliveryRuleCookies
	if source.DeliveryRuleCookies != nil {
		var deliveryRuleCooky DeliveryRuleCookiesCondition
		err := deliveryRuleCooky.AssignProperties_From_DeliveryRuleCookiesCondition(source.DeliveryRuleCookies)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleCookiesCondition() to populate field DeliveryRuleCookies")
		}
		condition.DeliveryRuleCookies = &deliveryRuleCooky
	} else {
		condition.DeliveryRuleCookies = nil
	}

	// DeliveryRuleHostName
	if source.DeliveryRuleHostName != nil {
		var deliveryRuleHostName DeliveryRuleHostNameCondition
		err := deliveryRuleHostName.AssignProperties_From_DeliveryRuleHostNameCondition(source.DeliveryRuleHostName)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleHostNameCondition() to populate field DeliveryRuleHostName")
		}
		condition.DeliveryRuleHostName = &deliveryRuleHostName
	} else {
		condition.DeliveryRuleHostName = nil
	}

	// DeliveryRuleHttpVersion
	if source.DeliveryRuleHttpVersion != nil {
		var deliveryRuleHttpVersion DeliveryRuleHttpVersionCondition
		err := deliveryRuleHttpVersion.AssignProperties_From_DeliveryRuleHttpVersionCondition(source.DeliveryRuleHttpVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleHttpVersionCondition() to populate field DeliveryRuleHttpVersion")
		}
		condition.DeliveryRuleHttpVersion = &deliveryRuleHttpVersion
	} else {
		condition.DeliveryRuleHttpVersion = nil
	}

	// DeliveryRuleIsDevice
	if source.DeliveryRuleIsDevice != nil {
		var deliveryRuleIsDevice DeliveryRuleIsDeviceCondition
		err := deliveryRuleIsDevice.AssignProperties_From_DeliveryRuleIsDeviceCondition(source.DeliveryRuleIsDevice)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleIsDeviceCondition() to populate field DeliveryRuleIsDevice")
		}
		condition.DeliveryRuleIsDevice = &deliveryRuleIsDevice
	} else {
		condition.DeliveryRuleIsDevice = nil
	}

	// DeliveryRulePostArgs
	if source.DeliveryRulePostArgs != nil {
		var deliveryRulePostArg DeliveryRulePostArgsCondition
		err := deliveryRulePostArg.AssignProperties_From_DeliveryRulePostArgsCondition(source.DeliveryRulePostArgs)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRulePostArgsCondition() to populate field DeliveryRulePostArgs")
		}
		condition.DeliveryRulePostArgs = &deliveryRulePostArg
	} else {
		condition.DeliveryRulePostArgs = nil
	}

	// DeliveryRuleQueryString
	if source.DeliveryRuleQueryString != nil {
		var deliveryRuleQueryString DeliveryRuleQueryStringCondition
		err := deliveryRuleQueryString.AssignProperties_From_DeliveryRuleQueryStringCondition(source.DeliveryRuleQueryString)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleQueryStringCondition() to populate field DeliveryRuleQueryString")
		}
		condition.DeliveryRuleQueryString = &deliveryRuleQueryString
	} else {
		condition.DeliveryRuleQueryString = nil
	}

	// DeliveryRuleRemoteAddress
	if source.DeliveryRuleRemoteAddress != nil {
		var deliveryRuleRemoteAddress DeliveryRuleRemoteAddressCondition
		err := deliveryRuleRemoteAddress.AssignProperties_From_DeliveryRuleRemoteAddressCondition(source.DeliveryRuleRemoteAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleRemoteAddressCondition() to populate field DeliveryRuleRemoteAddress")
		}
		condition.DeliveryRuleRemoteAddress = &deliveryRuleRemoteAddress
	} else {
		condition.DeliveryRuleRemoteAddress = nil
	}

	// DeliveryRuleRequestBody
	if source.DeliveryRuleRequestBody != nil {
		var deliveryRuleRequestBody DeliveryRuleRequestBodyCondition
		err := deliveryRuleRequestBody.AssignProperties_From_DeliveryRuleRequestBodyCondition(source.DeliveryRuleRequestBody)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleRequestBodyCondition() to populate field DeliveryRuleRequestBody")
		}
		condition.DeliveryRuleRequestBody = &deliveryRuleRequestBody
	} else {
		condition.DeliveryRuleRequestBody = nil
	}

	// DeliveryRuleRequestHeader
	if source.DeliveryRuleRequestHeader != nil {
		var deliveryRuleRequestHeader DeliveryRuleRequestHeaderCondition
		err := deliveryRuleRequestHeader.AssignProperties_From_DeliveryRuleRequestHeaderCondition(source.DeliveryRuleRequestHeader)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleRequestHeaderCondition() to populate field DeliveryRuleRequestHeader")
		}
		condition.DeliveryRuleRequestHeader = &deliveryRuleRequestHeader
	} else {
		condition.DeliveryRuleRequestHeader = nil
	}

	// DeliveryRuleRequestMethod
	if source.DeliveryRuleRequestMethod != nil {
		var deliveryRuleRequestMethod DeliveryRuleRequestMethodCondition
		err := deliveryRuleRequestMethod.AssignProperties_From_DeliveryRuleRequestMethodCondition(source.DeliveryRuleRequestMethod)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleRequestMethodCondition() to populate field DeliveryRuleRequestMethod")
		}
		condition.DeliveryRuleRequestMethod = &deliveryRuleRequestMethod
	} else {
		condition.DeliveryRuleRequestMethod = nil
	}

	// DeliveryRuleRequestScheme
	if source.DeliveryRuleRequestScheme != nil {
		var deliveryRuleRequestScheme DeliveryRuleRequestSchemeCondition
		err := deliveryRuleRequestScheme.AssignProperties_From_DeliveryRuleRequestSchemeCondition(source.DeliveryRuleRequestScheme)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleRequestSchemeCondition() to populate field DeliveryRuleRequestScheme")
		}
		condition.DeliveryRuleRequestScheme = &deliveryRuleRequestScheme
	} else {
		condition.DeliveryRuleRequestScheme = nil
	}

	// DeliveryRuleRequestUri
	if source.DeliveryRuleRequestUri != nil {
		var deliveryRuleRequestUri DeliveryRuleRequestUriCondition
		err := deliveryRuleRequestUri.AssignProperties_From_DeliveryRuleRequestUriCondition(source.DeliveryRuleRequestUri)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleRequestUriCondition() to populate field DeliveryRuleRequestUri")
		}
		condition.DeliveryRuleRequestUri = &deliveryRuleRequestUri
	} else {
		condition.DeliveryRuleRequestUri = nil
	}

	// DeliveryRuleServerPort
	if source.DeliveryRuleServerPort != nil {
		var deliveryRuleServerPort DeliveryRuleServerPortCondition
		err := deliveryRuleServerPort.AssignProperties_From_DeliveryRuleServerPortCondition(source.DeliveryRuleServerPort)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleServerPortCondition() to populate field DeliveryRuleServerPort")
		}
		condition.DeliveryRuleServerPort = &deliveryRuleServerPort
	} else {
		condition.DeliveryRuleServerPort = nil
	}

	// DeliveryRuleSocketAddr
	if source.DeliveryRuleSocketAddr != nil {
		var deliveryRuleSocketAddr DeliveryRuleSocketAddrCondition
		err := deliveryRuleSocketAddr.AssignProperties_From_DeliveryRuleSocketAddrCondition(source.DeliveryRuleSocketAddr)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleSocketAddrCondition() to populate field DeliveryRuleSocketAddr")
		}
		condition.DeliveryRuleSocketAddr = &deliveryRuleSocketAddr
	} else {
		condition.DeliveryRuleSocketAddr = nil
	}

	// DeliveryRuleSslProtocol
	if source.DeliveryRuleSslProtocol != nil {
		var deliveryRuleSslProtocol DeliveryRuleSslProtocolCondition
		err := deliveryRuleSslProtocol.AssignProperties_From_DeliveryRuleSslProtocolCondition(source.DeliveryRuleSslProtocol)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleSslProtocolCondition() to populate field DeliveryRuleSslProtocol")
		}
		condition.DeliveryRuleSslProtocol = &deliveryRuleSslProtocol
	} else {
		condition.DeliveryRuleSslProtocol = nil
	}

	// DeliveryRuleUrlFileExtension
	if source.DeliveryRuleUrlFileExtension != nil {
		var deliveryRuleUrlFileExtension DeliveryRuleUrlFileExtensionCondition
		err := deliveryRuleUrlFileExtension.AssignProperties_From_DeliveryRuleUrlFileExtensionCondition(source.DeliveryRuleUrlFileExtension)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleUrlFileExtensionCondition() to populate field DeliveryRuleUrlFileExtension")
		}
		condition.DeliveryRuleUrlFileExtension = &deliveryRuleUrlFileExtension
	} else {
		condition.DeliveryRuleUrlFileExtension = nil
	}

	// DeliveryRuleUrlFileName
	if source.DeliveryRuleUrlFileName != nil {
		var deliveryRuleUrlFileName DeliveryRuleUrlFileNameCondition
		err := deliveryRuleUrlFileName.AssignProperties_From_DeliveryRuleUrlFileNameCondition(source.DeliveryRuleUrlFileName)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleUrlFileNameCondition() to populate field DeliveryRuleUrlFileName")
		}
		condition.DeliveryRuleUrlFileName = &deliveryRuleUrlFileName
	} else {
		condition.DeliveryRuleUrlFileName = nil
	}

	// DeliveryRuleUrlPath
	if source.DeliveryRuleUrlPath != nil {
		var deliveryRuleUrlPath DeliveryRuleUrlPathCondition
		err := deliveryRuleUrlPath.AssignProperties_From_DeliveryRuleUrlPathCondition(source.DeliveryRuleUrlPath)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_DeliveryRuleUrlPathCondition() to populate field DeliveryRuleUrlPath")
		}
		condition.DeliveryRuleUrlPath = &deliveryRuleUrlPath
	} else {
		condition.DeliveryRuleUrlPath = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleCondition populates the provided destination DeliveryRuleCondition from our DeliveryRuleCondition
func (condition *DeliveryRuleCondition) AssignProperties_To_DeliveryRuleCondition(destination *v20210601s.DeliveryRuleCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DeliveryRuleClientPort
	if condition.DeliveryRuleClientPort != nil {
		var deliveryRuleClientPort v20210601s.DeliveryRuleClientPortCondition
		err := condition.DeliveryRuleClientPort.AssignProperties_To_DeliveryRuleClientPortCondition(&deliveryRuleClientPort)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleClientPortCondition() to populate field DeliveryRuleClientPort")
		}
		destination.DeliveryRuleClientPort = &deliveryRuleClientPort
	} else {
		destination.DeliveryRuleClientPort = nil
	}

	// DeliveryRuleCookies
	if condition.DeliveryRuleCookies != nil {
		var deliveryRuleCooky v20210601s.DeliveryRuleCookiesCondition
		err := condition.DeliveryRuleCookies.AssignProperties_To_DeliveryRuleCookiesCondition(&deliveryRuleCooky)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleCookiesCondition() to populate field DeliveryRuleCookies")
		}
		destination.DeliveryRuleCookies = &deliveryRuleCooky
	} else {
		destination.DeliveryRuleCookies = nil
	}

	// DeliveryRuleHostName
	if condition.DeliveryRuleHostName != nil {
		var deliveryRuleHostName v20210601s.DeliveryRuleHostNameCondition
		err := condition.DeliveryRuleHostName.AssignProperties_To_DeliveryRuleHostNameCondition(&deliveryRuleHostName)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleHostNameCondition() to populate field DeliveryRuleHostName")
		}
		destination.DeliveryRuleHostName = &deliveryRuleHostName
	} else {
		destination.DeliveryRuleHostName = nil
	}

	// DeliveryRuleHttpVersion
	if condition.DeliveryRuleHttpVersion != nil {
		var deliveryRuleHttpVersion v20210601s.DeliveryRuleHttpVersionCondition
		err := condition.DeliveryRuleHttpVersion.AssignProperties_To_DeliveryRuleHttpVersionCondition(&deliveryRuleHttpVersion)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleHttpVersionCondition() to populate field DeliveryRuleHttpVersion")
		}
		destination.DeliveryRuleHttpVersion = &deliveryRuleHttpVersion
	} else {
		destination.DeliveryRuleHttpVersion = nil
	}

	// DeliveryRuleIsDevice
	if condition.DeliveryRuleIsDevice != nil {
		var deliveryRuleIsDevice v20210601s.DeliveryRuleIsDeviceCondition
		err := condition.DeliveryRuleIsDevice.AssignProperties_To_DeliveryRuleIsDeviceCondition(&deliveryRuleIsDevice)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleIsDeviceCondition() to populate field DeliveryRuleIsDevice")
		}
		destination.DeliveryRuleIsDevice = &deliveryRuleIsDevice
	} else {
		destination.DeliveryRuleIsDevice = nil
	}

	// DeliveryRulePostArgs
	if condition.DeliveryRulePostArgs != nil {
		var deliveryRulePostArg v20210601s.DeliveryRulePostArgsCondition
		err := condition.DeliveryRulePostArgs.AssignProperties_To_DeliveryRulePostArgsCondition(&deliveryRulePostArg)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRulePostArgsCondition() to populate field DeliveryRulePostArgs")
		}
		destination.DeliveryRulePostArgs = &deliveryRulePostArg
	} else {
		destination.DeliveryRulePostArgs = nil
	}

	// DeliveryRuleQueryString
	if condition.DeliveryRuleQueryString != nil {
		var deliveryRuleQueryString v20210601s.DeliveryRuleQueryStringCondition
		err := condition.DeliveryRuleQueryString.AssignProperties_To_DeliveryRuleQueryStringCondition(&deliveryRuleQueryString)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleQueryStringCondition() to populate field DeliveryRuleQueryString")
		}
		destination.DeliveryRuleQueryString = &deliveryRuleQueryString
	} else {
		destination.DeliveryRuleQueryString = nil
	}

	// DeliveryRuleRemoteAddress
	if condition.DeliveryRuleRemoteAddress != nil {
		var deliveryRuleRemoteAddress v20210601s.DeliveryRuleRemoteAddressCondition
		err := condition.DeliveryRuleRemoteAddress.AssignProperties_To_DeliveryRuleRemoteAddressCondition(&deliveryRuleRemoteAddress)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleRemoteAddressCondition() to populate field DeliveryRuleRemoteAddress")
		}
		destination.DeliveryRuleRemoteAddress = &deliveryRuleRemoteAddress
	} else {
		destination.DeliveryRuleRemoteAddress = nil
	}

	// DeliveryRuleRequestBody
	if condition.DeliveryRuleRequestBody != nil {
		var deliveryRuleRequestBody v20210601s.DeliveryRuleRequestBodyCondition
		err := condition.DeliveryRuleRequestBody.AssignProperties_To_DeliveryRuleRequestBodyCondition(&deliveryRuleRequestBody)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleRequestBodyCondition() to populate field DeliveryRuleRequestBody")
		}
		destination.DeliveryRuleRequestBody = &deliveryRuleRequestBody
	} else {
		destination.DeliveryRuleRequestBody = nil
	}

	// DeliveryRuleRequestHeader
	if condition.DeliveryRuleRequestHeader != nil {
		var deliveryRuleRequestHeader v20210601s.DeliveryRuleRequestHeaderCondition
		err := condition.DeliveryRuleRequestHeader.AssignProperties_To_DeliveryRuleRequestHeaderCondition(&deliveryRuleRequestHeader)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleRequestHeaderCondition() to populate field DeliveryRuleRequestHeader")
		}
		destination.DeliveryRuleRequestHeader = &deliveryRuleRequestHeader
	} else {
		destination.DeliveryRuleRequestHeader = nil
	}

	// DeliveryRuleRequestMethod
	if condition.DeliveryRuleRequestMethod != nil {
		var deliveryRuleRequestMethod v20210601s.DeliveryRuleRequestMethodCondition
		err := condition.DeliveryRuleRequestMethod.AssignProperties_To_DeliveryRuleRequestMethodCondition(&deliveryRuleRequestMethod)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleRequestMethodCondition() to populate field DeliveryRuleRequestMethod")
		}
		destination.DeliveryRuleRequestMethod = &deliveryRuleRequestMethod
	} else {
		destination.DeliveryRuleRequestMethod = nil
	}

	// DeliveryRuleRequestScheme
	if condition.DeliveryRuleRequestScheme != nil {
		var deliveryRuleRequestScheme v20210601s.DeliveryRuleRequestSchemeCondition
		err := condition.DeliveryRuleRequestScheme.AssignProperties_To_DeliveryRuleRequestSchemeCondition(&deliveryRuleRequestScheme)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleRequestSchemeCondition() to populate field DeliveryRuleRequestScheme")
		}
		destination.DeliveryRuleRequestScheme = &deliveryRuleRequestScheme
	} else {
		destination.DeliveryRuleRequestScheme = nil
	}

	// DeliveryRuleRequestUri
	if condition.DeliveryRuleRequestUri != nil {
		var deliveryRuleRequestUri v20210601s.DeliveryRuleRequestUriCondition
		err := condition.DeliveryRuleRequestUri.AssignProperties_To_DeliveryRuleRequestUriCondition(&deliveryRuleRequestUri)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleRequestUriCondition() to populate field DeliveryRuleRequestUri")
		}
		destination.DeliveryRuleRequestUri = &deliveryRuleRequestUri
	} else {
		destination.DeliveryRuleRequestUri = nil
	}

	// DeliveryRuleServerPort
	if condition.DeliveryRuleServerPort != nil {
		var deliveryRuleServerPort v20210601s.DeliveryRuleServerPortCondition
		err := condition.DeliveryRuleServerPort.AssignProperties_To_DeliveryRuleServerPortCondition(&deliveryRuleServerPort)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleServerPortCondition() to populate field DeliveryRuleServerPort")
		}
		destination.DeliveryRuleServerPort = &deliveryRuleServerPort
	} else {
		destination.DeliveryRuleServerPort = nil
	}

	// DeliveryRuleSocketAddr
	if condition.DeliveryRuleSocketAddr != nil {
		var deliveryRuleSocketAddr v20210601s.DeliveryRuleSocketAddrCondition
		err := condition.DeliveryRuleSocketAddr.AssignProperties_To_DeliveryRuleSocketAddrCondition(&deliveryRuleSocketAddr)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleSocketAddrCondition() to populate field DeliveryRuleSocketAddr")
		}
		destination.DeliveryRuleSocketAddr = &deliveryRuleSocketAddr
	} else {
		destination.DeliveryRuleSocketAddr = nil
	}

	// DeliveryRuleSslProtocol
	if condition.DeliveryRuleSslProtocol != nil {
		var deliveryRuleSslProtocol v20210601s.DeliveryRuleSslProtocolCondition
		err := condition.DeliveryRuleSslProtocol.AssignProperties_To_DeliveryRuleSslProtocolCondition(&deliveryRuleSslProtocol)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleSslProtocolCondition() to populate field DeliveryRuleSslProtocol")
		}
		destination.DeliveryRuleSslProtocol = &deliveryRuleSslProtocol
	} else {
		destination.DeliveryRuleSslProtocol = nil
	}

	// DeliveryRuleUrlFileExtension
	if condition.DeliveryRuleUrlFileExtension != nil {
		var deliveryRuleUrlFileExtension v20210601s.DeliveryRuleUrlFileExtensionCondition
		err := condition.DeliveryRuleUrlFileExtension.AssignProperties_To_DeliveryRuleUrlFileExtensionCondition(&deliveryRuleUrlFileExtension)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleUrlFileExtensionCondition() to populate field DeliveryRuleUrlFileExtension")
		}
		destination.DeliveryRuleUrlFileExtension = &deliveryRuleUrlFileExtension
	} else {
		destination.DeliveryRuleUrlFileExtension = nil
	}

	// DeliveryRuleUrlFileName
	if condition.DeliveryRuleUrlFileName != nil {
		var deliveryRuleUrlFileName v20210601s.DeliveryRuleUrlFileNameCondition
		err := condition.DeliveryRuleUrlFileName.AssignProperties_To_DeliveryRuleUrlFileNameCondition(&deliveryRuleUrlFileName)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleUrlFileNameCondition() to populate field DeliveryRuleUrlFileName")
		}
		destination.DeliveryRuleUrlFileName = &deliveryRuleUrlFileName
	} else {
		destination.DeliveryRuleUrlFileName = nil
	}

	// DeliveryRuleUrlPath
	if condition.DeliveryRuleUrlPath != nil {
		var deliveryRuleUrlPath v20210601s.DeliveryRuleUrlPathCondition
		err := condition.DeliveryRuleUrlPath.AssignProperties_To_DeliveryRuleUrlPathCondition(&deliveryRuleUrlPath)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_DeliveryRuleUrlPathCondition() to populate field DeliveryRuleUrlPath")
		}
		destination.DeliveryRuleUrlPath = &deliveryRuleUrlPath
	} else {
		destination.DeliveryRuleUrlPath = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DeliveryRuleCondition_STATUS struct {
	// Name: The name of the condition for the delivery rule.
	Name *DeliveryRuleCondition_Name_STATUS `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &DeliveryRuleCondition_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleCondition_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleCondition_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleCondition_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleCondition_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleCondition_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		condition.Name = &name
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleCondition_STATUS populates our DeliveryRuleCondition_STATUS from the provided source DeliveryRuleCondition_STATUS
func (condition *DeliveryRuleCondition_STATUS) AssignProperties_From_DeliveryRuleCondition_STATUS(source *v20210601s.DeliveryRuleCondition_STATUS) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleCondition_Name_STATUS(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleCondition_STATUS populates the provided destination DeliveryRuleCondition_STATUS from our DeliveryRuleCondition_STATUS
func (condition *DeliveryRuleCondition_STATUS) AssignProperties_To_DeliveryRuleCondition_STATUS(destination *v20210601s.DeliveryRuleCondition_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Http","Https","NotSet"}
type HealthProbeParameters_ProbeProtocol string

const (
	HealthProbeParameters_ProbeProtocol_Http   = HealthProbeParameters_ProbeProtocol("Http")
	HealthProbeParameters_ProbeProtocol_Https  = HealthProbeParameters_ProbeProtocol("Https")
	HealthProbeParameters_ProbeProtocol_NotSet = HealthProbeParameters_ProbeProtocol("NotSet")
)

type HealthProbeParameters_ProbeProtocol_STATUS string

const (
	HealthProbeParameters_ProbeProtocol_STATUS_Http   = HealthProbeParameters_ProbeProtocol_STATUS("Http")
	HealthProbeParameters_ProbeProtocol_STATUS_Https  = HealthProbeParameters_ProbeProtocol_STATUS("Https")
	HealthProbeParameters_ProbeProtocol_STATUS_NotSet = HealthProbeParameters_ProbeProtocol_STATUS("NotSet")
)

// +kubebuilder:validation:Enum={"GET","HEAD","NotSet"}
type HealthProbeParameters_ProbeRequestType string

const (
	HealthProbeParameters_ProbeRequestType_GET    = HealthProbeParameters_ProbeRequestType("GET")
	HealthProbeParameters_ProbeRequestType_HEAD   = HealthProbeParameters_ProbeRequestType("HEAD")
	HealthProbeParameters_ProbeRequestType_NotSet = HealthProbeParameters_ProbeRequestType("NotSet")
)

type HealthProbeParameters_ProbeRequestType_STATUS string

const (
	HealthProbeParameters_ProbeRequestType_STATUS_GET    = HealthProbeParameters_ProbeRequestType_STATUS("GET")
	HealthProbeParameters_ProbeRequestType_STATUS_HEAD   = HealthProbeParameters_ProbeRequestType_STATUS("HEAD")
	HealthProbeParameters_ProbeRequestType_STATUS_NotSet = HealthProbeParameters_ProbeRequestType_STATUS("NotSet")
)

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/HttpErrorRangeParameters
type HttpErrorRangeParameters struct {
	// +kubebuilder:validation:Maximum=999
	// +kubebuilder:validation:Minimum=100
	// Begin: The inclusive start of the http status code range.
	Begin *int `json:"begin,omitempty"`

	// +kubebuilder:validation:Maximum=999
	// +kubebuilder:validation:Minimum=100
	// End: The inclusive end of the http status code range.
	End *int `json:"end,omitempty"`
}

var _ genruntime.ARMTransformer = &HttpErrorRangeParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *HttpErrorRangeParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &HttpErrorRangeParameters_ARM{}

	// Set property ‘Begin’:
	if parameters.Begin != nil {
		begin := *parameters.Begin
		result.Begin = &begin
	}

	// Set property ‘End’:
	if parameters.End != nil {
		end := *parameters.End
		result.End = &end
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *HttpErrorRangeParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HttpErrorRangeParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *HttpErrorRangeParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HttpErrorRangeParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HttpErrorRangeParameters_ARM, got %T", armInput)
	}

	// Set property ‘Begin’:
	if typedInput.Begin != nil {
		begin := *typedInput.Begin
		parameters.Begin = &begin
	}

	// Set property ‘End’:
	if typedInput.End != nil {
		end := *typedInput.End
		parameters.End = &end
	}

	// No error
	return nil
}

// AssignProperties_From_HttpErrorRangeParameters populates our HttpErrorRangeParameters from the provided source HttpErrorRangeParameters
func (parameters *HttpErrorRangeParameters) AssignProperties_From_HttpErrorRangeParameters(source *v20210601s.HttpErrorRangeParameters) error {

	// Begin
	if source.Begin != nil {
		begin := *source.Begin
		parameters.Begin = &begin
	} else {
		parameters.Begin = nil
	}

	// End
	if source.End != nil {
		end := *source.End
		parameters.End = &end
	} else {
		parameters.End = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HttpErrorRangeParameters populates the provided destination HttpErrorRangeParameters from our HttpErrorRangeParameters
func (parameters *HttpErrorRangeParameters) AssignProperties_To_HttpErrorRangeParameters(destination *v20210601s.HttpErrorRangeParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Begin
	if parameters.Begin != nil {
		begin := *parameters.Begin
		destination.Begin = &begin
	} else {
		destination.Begin = nil
	}

	// End
	if parameters.End != nil {
		end := *parameters.End
		destination.End = &end
	} else {
		destination.End = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type HttpErrorRangeParameters_STATUS struct {
	// Begin: The inclusive start of the http status code range.
	Begin *int `json:"begin,omitempty"`

	// End: The inclusive end of the http status code range.
	End *int `json:"end,omitempty"`
}

var _ genruntime.FromARMConverter = &HttpErrorRangeParameters_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *HttpErrorRangeParameters_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HttpErrorRangeParameters_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *HttpErrorRangeParameters_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HttpErrorRangeParameters_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HttpErrorRangeParameters_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Begin’:
	if typedInput.Begin != nil {
		begin := *typedInput.Begin
		parameters.Begin = &begin
	}

	// Set property ‘End’:
	if typedInput.End != nil {
		end := *typedInput.End
		parameters.End = &end
	}

	// No error
	return nil
}

// AssignProperties_From_HttpErrorRangeParameters_STATUS populates our HttpErrorRangeParameters_STATUS from the provided source HttpErrorRangeParameters_STATUS
func (parameters *HttpErrorRangeParameters_STATUS) AssignProperties_From_HttpErrorRangeParameters_STATUS(source *v20210601s.HttpErrorRangeParameters_STATUS) error {

	// Begin
	parameters.Begin = genruntime.ClonePointerToInt(source.Begin)

	// End
	parameters.End = genruntime.ClonePointerToInt(source.End)

	// No error
	return nil
}

// AssignProperties_To_HttpErrorRangeParameters_STATUS populates the provided destination HttpErrorRangeParameters_STATUS from our HttpErrorRangeParameters_STATUS
func (parameters *HttpErrorRangeParameters_STATUS) AssignProperties_To_HttpErrorRangeParameters_STATUS(destination *v20210601s.HttpErrorRangeParameters_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Begin
	destination.Begin = genruntime.ClonePointerToInt(parameters.Begin)

	// End
	destination.End = genruntime.ClonePointerToInt(parameters.End)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"KeyVaultSigningKeyParameters"}
type KeyVaultSigningKeyParameters_TypeName string

const KeyVaultSigningKeyParameters_TypeName_KeyVaultSigningKeyParameters = KeyVaultSigningKeyParameters_TypeName("KeyVaultSigningKeyParameters")

// +kubebuilder:validation:Enum={"None","TcpAndHttpErrors","TcpErrorsOnly"}
type ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes string

const (
	ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_None             = ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes("None")
	ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_TcpAndHttpErrors = ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes("TcpAndHttpErrors")
	ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_TcpErrorsOnly    = ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes("TcpErrorsOnly")
)

type ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS string

const (
	ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS_None             = ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS("None")
	ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS_TcpAndHttpErrors = ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS("TcpAndHttpErrors")
	ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS_TcpErrorsOnly    = ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS("TcpErrorsOnly")
)

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleCacheExpirationAction
type DeliveryRuleCacheExpirationAction struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleCacheExpirationAction_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for the cache expiration action.
	Parameters *CacheExpirationActionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleCacheExpirationAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *DeliveryRuleCacheExpirationAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &DeliveryRuleCacheExpirationAction_ARM{}

	// Set property ‘Name’:
	if action.Name != nil {
		result.Name = *action.Name
	}

	// Set property ‘Parameters’:
	if action.Parameters != nil {
		parameters_ARM, err := (*action.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*CacheExpirationActionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *DeliveryRuleCacheExpirationAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleCacheExpirationAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *DeliveryRuleCacheExpirationAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleCacheExpirationAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleCacheExpirationAction_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	action.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 CacheExpirationActionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		action.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleCacheExpirationAction populates our DeliveryRuleCacheExpirationAction from the provided source DeliveryRuleCacheExpirationAction
func (action *DeliveryRuleCacheExpirationAction) AssignProperties_From_DeliveryRuleCacheExpirationAction(source *v20210601s.DeliveryRuleCacheExpirationAction) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleCacheExpirationAction_Name(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter CacheExpirationActionParameters
		err := parameter.AssignProperties_From_CacheExpirationActionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CacheExpirationActionParameters() to populate field Parameters")
		}
		action.Parameters = &parameter
	} else {
		action.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleCacheExpirationAction populates the provided destination DeliveryRuleCacheExpirationAction from our DeliveryRuleCacheExpirationAction
func (action *DeliveryRuleCacheExpirationAction) AssignProperties_To_DeliveryRuleCacheExpirationAction(destination *v20210601s.DeliveryRuleCacheExpirationAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if action.Parameters != nil {
		var parameter v20210601s.CacheExpirationActionParameters
		err := action.Parameters.AssignProperties_To_CacheExpirationActionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CacheExpirationActionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleCacheKeyQueryStringAction
type DeliveryRuleCacheKeyQueryStringAction struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleCacheKeyQueryStringAction_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for the cache-key query string action.
	Parameters *CacheKeyQueryStringActionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleCacheKeyQueryStringAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *DeliveryRuleCacheKeyQueryStringAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &DeliveryRuleCacheKeyQueryStringAction_ARM{}

	// Set property ‘Name’:
	if action.Name != nil {
		result.Name = *action.Name
	}

	// Set property ‘Parameters’:
	if action.Parameters != nil {
		parameters_ARM, err := (*action.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*CacheKeyQueryStringActionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *DeliveryRuleCacheKeyQueryStringAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleCacheKeyQueryStringAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *DeliveryRuleCacheKeyQueryStringAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleCacheKeyQueryStringAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleCacheKeyQueryStringAction_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	action.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 CacheKeyQueryStringActionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		action.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleCacheKeyQueryStringAction populates our DeliveryRuleCacheKeyQueryStringAction from the provided source DeliveryRuleCacheKeyQueryStringAction
func (action *DeliveryRuleCacheKeyQueryStringAction) AssignProperties_From_DeliveryRuleCacheKeyQueryStringAction(source *v20210601s.DeliveryRuleCacheKeyQueryStringAction) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleCacheKeyQueryStringAction_Name(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter CacheKeyQueryStringActionParameters
		err := parameter.AssignProperties_From_CacheKeyQueryStringActionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CacheKeyQueryStringActionParameters() to populate field Parameters")
		}
		action.Parameters = &parameter
	} else {
		action.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleCacheKeyQueryStringAction populates the provided destination DeliveryRuleCacheKeyQueryStringAction from our DeliveryRuleCacheKeyQueryStringAction
func (action *DeliveryRuleCacheKeyQueryStringAction) AssignProperties_To_DeliveryRuleCacheKeyQueryStringAction(destination *v20210601s.DeliveryRuleCacheKeyQueryStringAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if action.Parameters != nil {
		var parameter v20210601s.CacheKeyQueryStringActionParameters
		err := action.Parameters.AssignProperties_To_CacheKeyQueryStringActionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CacheKeyQueryStringActionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleClientPortCondition
type DeliveryRuleClientPortCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleClientPortCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for ClientPort match conditions
	Parameters *ClientPortMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleClientPortCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleClientPortCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleClientPortCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*ClientPortMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleClientPortCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleClientPortCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleClientPortCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleClientPortCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleClientPortCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 ClientPortMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleClientPortCondition populates our DeliveryRuleClientPortCondition from the provided source DeliveryRuleClientPortCondition
func (condition *DeliveryRuleClientPortCondition) AssignProperties_From_DeliveryRuleClientPortCondition(source *v20210601s.DeliveryRuleClientPortCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleClientPortCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter ClientPortMatchConditionParameters
		err := parameter.AssignProperties_From_ClientPortMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ClientPortMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleClientPortCondition populates the provided destination DeliveryRuleClientPortCondition from our DeliveryRuleClientPortCondition
func (condition *DeliveryRuleClientPortCondition) AssignProperties_To_DeliveryRuleClientPortCondition(destination *v20210601s.DeliveryRuleClientPortCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.ClientPortMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_ClientPortMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ClientPortMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleCookiesCondition
type DeliveryRuleCookiesCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleCookiesCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for Cookies match conditions
	Parameters *CookiesMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleCookiesCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleCookiesCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleCookiesCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*CookiesMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleCookiesCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleCookiesCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleCookiesCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleCookiesCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleCookiesCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 CookiesMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleCookiesCondition populates our DeliveryRuleCookiesCondition from the provided source DeliveryRuleCookiesCondition
func (condition *DeliveryRuleCookiesCondition) AssignProperties_From_DeliveryRuleCookiesCondition(source *v20210601s.DeliveryRuleCookiesCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleCookiesCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter CookiesMatchConditionParameters
		err := parameter.AssignProperties_From_CookiesMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CookiesMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleCookiesCondition populates the provided destination DeliveryRuleCookiesCondition from our DeliveryRuleCookiesCondition
func (condition *DeliveryRuleCookiesCondition) AssignProperties_To_DeliveryRuleCookiesCondition(destination *v20210601s.DeliveryRuleCookiesCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.CookiesMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_CookiesMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CookiesMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleHostNameCondition
type DeliveryRuleHostNameCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleHostNameCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for HostName match conditions
	Parameters *HostNameMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleHostNameCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleHostNameCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleHostNameCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*HostNameMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleHostNameCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleHostNameCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleHostNameCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleHostNameCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleHostNameCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 HostNameMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleHostNameCondition populates our DeliveryRuleHostNameCondition from the provided source DeliveryRuleHostNameCondition
func (condition *DeliveryRuleHostNameCondition) AssignProperties_From_DeliveryRuleHostNameCondition(source *v20210601s.DeliveryRuleHostNameCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleHostNameCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter HostNameMatchConditionParameters
		err := parameter.AssignProperties_From_HostNameMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HostNameMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleHostNameCondition populates the provided destination DeliveryRuleHostNameCondition from our DeliveryRuleHostNameCondition
func (condition *DeliveryRuleHostNameCondition) AssignProperties_To_DeliveryRuleHostNameCondition(destination *v20210601s.DeliveryRuleHostNameCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.HostNameMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_HostNameMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HostNameMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleHttpVersionCondition
type DeliveryRuleHttpVersionCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleHttpVersionCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for HttpVersion match conditions
	Parameters *HttpVersionMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleHttpVersionCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleHttpVersionCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleHttpVersionCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*HttpVersionMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleHttpVersionCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleHttpVersionCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleHttpVersionCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleHttpVersionCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleHttpVersionCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 HttpVersionMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleHttpVersionCondition populates our DeliveryRuleHttpVersionCondition from the provided source DeliveryRuleHttpVersionCondition
func (condition *DeliveryRuleHttpVersionCondition) AssignProperties_From_DeliveryRuleHttpVersionCondition(source *v20210601s.DeliveryRuleHttpVersionCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleHttpVersionCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter HttpVersionMatchConditionParameters
		err := parameter.AssignProperties_From_HttpVersionMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HttpVersionMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleHttpVersionCondition populates the provided destination DeliveryRuleHttpVersionCondition from our DeliveryRuleHttpVersionCondition
func (condition *DeliveryRuleHttpVersionCondition) AssignProperties_To_DeliveryRuleHttpVersionCondition(destination *v20210601s.DeliveryRuleHttpVersionCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.HttpVersionMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_HttpVersionMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HttpVersionMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleIsDeviceCondition
type DeliveryRuleIsDeviceCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleIsDeviceCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for IsDevice match conditions
	Parameters *IsDeviceMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleIsDeviceCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleIsDeviceCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleIsDeviceCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*IsDeviceMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleIsDeviceCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleIsDeviceCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleIsDeviceCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleIsDeviceCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleIsDeviceCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 IsDeviceMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleIsDeviceCondition populates our DeliveryRuleIsDeviceCondition from the provided source DeliveryRuleIsDeviceCondition
func (condition *DeliveryRuleIsDeviceCondition) AssignProperties_From_DeliveryRuleIsDeviceCondition(source *v20210601s.DeliveryRuleIsDeviceCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleIsDeviceCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter IsDeviceMatchConditionParameters
		err := parameter.AssignProperties_From_IsDeviceMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_IsDeviceMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleIsDeviceCondition populates the provided destination DeliveryRuleIsDeviceCondition from our DeliveryRuleIsDeviceCondition
func (condition *DeliveryRuleIsDeviceCondition) AssignProperties_To_DeliveryRuleIsDeviceCondition(destination *v20210601s.DeliveryRuleIsDeviceCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.IsDeviceMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_IsDeviceMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_IsDeviceMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRulePostArgsCondition
type DeliveryRulePostArgsCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRulePostArgsCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for PostArgs match conditions
	Parameters *PostArgsMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRulePostArgsCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRulePostArgsCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRulePostArgsCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*PostArgsMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRulePostArgsCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRulePostArgsCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRulePostArgsCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRulePostArgsCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRulePostArgsCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 PostArgsMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRulePostArgsCondition populates our DeliveryRulePostArgsCondition from the provided source DeliveryRulePostArgsCondition
func (condition *DeliveryRulePostArgsCondition) AssignProperties_From_DeliveryRulePostArgsCondition(source *v20210601s.DeliveryRulePostArgsCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRulePostArgsCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter PostArgsMatchConditionParameters
		err := parameter.AssignProperties_From_PostArgsMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_PostArgsMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRulePostArgsCondition populates the provided destination DeliveryRulePostArgsCondition from our DeliveryRulePostArgsCondition
func (condition *DeliveryRulePostArgsCondition) AssignProperties_To_DeliveryRulePostArgsCondition(destination *v20210601s.DeliveryRulePostArgsCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.PostArgsMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_PostArgsMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_PostArgsMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleQueryStringCondition
type DeliveryRuleQueryStringCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleQueryStringCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for QueryString match conditions
	Parameters *QueryStringMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleQueryStringCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleQueryStringCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleQueryStringCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*QueryStringMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleQueryStringCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleQueryStringCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleQueryStringCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleQueryStringCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleQueryStringCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 QueryStringMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleQueryStringCondition populates our DeliveryRuleQueryStringCondition from the provided source DeliveryRuleQueryStringCondition
func (condition *DeliveryRuleQueryStringCondition) AssignProperties_From_DeliveryRuleQueryStringCondition(source *v20210601s.DeliveryRuleQueryStringCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleQueryStringCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter QueryStringMatchConditionParameters
		err := parameter.AssignProperties_From_QueryStringMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_QueryStringMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleQueryStringCondition populates the provided destination DeliveryRuleQueryStringCondition from our DeliveryRuleQueryStringCondition
func (condition *DeliveryRuleQueryStringCondition) AssignProperties_To_DeliveryRuleQueryStringCondition(destination *v20210601s.DeliveryRuleQueryStringCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.QueryStringMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_QueryStringMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_QueryStringMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleRemoteAddressCondition
type DeliveryRuleRemoteAddressCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleRemoteAddressCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for RemoteAddress match conditions
	Parameters *RemoteAddressMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleRemoteAddressCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleRemoteAddressCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleRemoteAddressCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*RemoteAddressMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleRemoteAddressCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleRemoteAddressCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleRemoteAddressCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleRemoteAddressCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleRemoteAddressCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 RemoteAddressMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleRemoteAddressCondition populates our DeliveryRuleRemoteAddressCondition from the provided source DeliveryRuleRemoteAddressCondition
func (condition *DeliveryRuleRemoteAddressCondition) AssignProperties_From_DeliveryRuleRemoteAddressCondition(source *v20210601s.DeliveryRuleRemoteAddressCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleRemoteAddressCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter RemoteAddressMatchConditionParameters
		err := parameter.AssignProperties_From_RemoteAddressMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RemoteAddressMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleRemoteAddressCondition populates the provided destination DeliveryRuleRemoteAddressCondition from our DeliveryRuleRemoteAddressCondition
func (condition *DeliveryRuleRemoteAddressCondition) AssignProperties_To_DeliveryRuleRemoteAddressCondition(destination *v20210601s.DeliveryRuleRemoteAddressCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.RemoteAddressMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_RemoteAddressMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RemoteAddressMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleRequestBodyCondition
type DeliveryRuleRequestBodyCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleRequestBodyCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for RequestBody match conditions
	Parameters *RequestBodyMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleRequestBodyCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleRequestBodyCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleRequestBodyCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*RequestBodyMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleRequestBodyCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleRequestBodyCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleRequestBodyCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleRequestBodyCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleRequestBodyCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 RequestBodyMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleRequestBodyCondition populates our DeliveryRuleRequestBodyCondition from the provided source DeliveryRuleRequestBodyCondition
func (condition *DeliveryRuleRequestBodyCondition) AssignProperties_From_DeliveryRuleRequestBodyCondition(source *v20210601s.DeliveryRuleRequestBodyCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleRequestBodyCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter RequestBodyMatchConditionParameters
		err := parameter.AssignProperties_From_RequestBodyMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RequestBodyMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleRequestBodyCondition populates the provided destination DeliveryRuleRequestBodyCondition from our DeliveryRuleRequestBodyCondition
func (condition *DeliveryRuleRequestBodyCondition) AssignProperties_To_DeliveryRuleRequestBodyCondition(destination *v20210601s.DeliveryRuleRequestBodyCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.RequestBodyMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_RequestBodyMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RequestBodyMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleRequestHeaderAction
type DeliveryRuleRequestHeaderAction struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleRequestHeaderAction_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for the request header action.
	Parameters *HeaderActionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleRequestHeaderAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *DeliveryRuleRequestHeaderAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &DeliveryRuleRequestHeaderAction_ARM{}

	// Set property ‘Name’:
	if action.Name != nil {
		result.Name = *action.Name
	}

	// Set property ‘Parameters’:
	if action.Parameters != nil {
		parameters_ARM, err := (*action.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*HeaderActionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *DeliveryRuleRequestHeaderAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleRequestHeaderAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *DeliveryRuleRequestHeaderAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleRequestHeaderAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleRequestHeaderAction_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	action.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 HeaderActionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		action.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleRequestHeaderAction populates our DeliveryRuleRequestHeaderAction from the provided source DeliveryRuleRequestHeaderAction
func (action *DeliveryRuleRequestHeaderAction) AssignProperties_From_DeliveryRuleRequestHeaderAction(source *v20210601s.DeliveryRuleRequestHeaderAction) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleRequestHeaderAction_Name(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter HeaderActionParameters
		err := parameter.AssignProperties_From_HeaderActionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HeaderActionParameters() to populate field Parameters")
		}
		action.Parameters = &parameter
	} else {
		action.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleRequestHeaderAction populates the provided destination DeliveryRuleRequestHeaderAction from our DeliveryRuleRequestHeaderAction
func (action *DeliveryRuleRequestHeaderAction) AssignProperties_To_DeliveryRuleRequestHeaderAction(destination *v20210601s.DeliveryRuleRequestHeaderAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if action.Parameters != nil {
		var parameter v20210601s.HeaderActionParameters
		err := action.Parameters.AssignProperties_To_HeaderActionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HeaderActionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleRequestHeaderCondition
type DeliveryRuleRequestHeaderCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleRequestHeaderCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for RequestHeader match conditions
	Parameters *RequestHeaderMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleRequestHeaderCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleRequestHeaderCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleRequestHeaderCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*RequestHeaderMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleRequestHeaderCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleRequestHeaderCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleRequestHeaderCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleRequestHeaderCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleRequestHeaderCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 RequestHeaderMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleRequestHeaderCondition populates our DeliveryRuleRequestHeaderCondition from the provided source DeliveryRuleRequestHeaderCondition
func (condition *DeliveryRuleRequestHeaderCondition) AssignProperties_From_DeliveryRuleRequestHeaderCondition(source *v20210601s.DeliveryRuleRequestHeaderCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleRequestHeaderCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter RequestHeaderMatchConditionParameters
		err := parameter.AssignProperties_From_RequestHeaderMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RequestHeaderMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleRequestHeaderCondition populates the provided destination DeliveryRuleRequestHeaderCondition from our DeliveryRuleRequestHeaderCondition
func (condition *DeliveryRuleRequestHeaderCondition) AssignProperties_To_DeliveryRuleRequestHeaderCondition(destination *v20210601s.DeliveryRuleRequestHeaderCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.RequestHeaderMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_RequestHeaderMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RequestHeaderMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleRequestMethodCondition
type DeliveryRuleRequestMethodCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleRequestMethodCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for RequestMethod match conditions
	Parameters *RequestMethodMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleRequestMethodCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleRequestMethodCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleRequestMethodCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*RequestMethodMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleRequestMethodCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleRequestMethodCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleRequestMethodCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleRequestMethodCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleRequestMethodCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 RequestMethodMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleRequestMethodCondition populates our DeliveryRuleRequestMethodCondition from the provided source DeliveryRuleRequestMethodCondition
func (condition *DeliveryRuleRequestMethodCondition) AssignProperties_From_DeliveryRuleRequestMethodCondition(source *v20210601s.DeliveryRuleRequestMethodCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleRequestMethodCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter RequestMethodMatchConditionParameters
		err := parameter.AssignProperties_From_RequestMethodMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RequestMethodMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleRequestMethodCondition populates the provided destination DeliveryRuleRequestMethodCondition from our DeliveryRuleRequestMethodCondition
func (condition *DeliveryRuleRequestMethodCondition) AssignProperties_To_DeliveryRuleRequestMethodCondition(destination *v20210601s.DeliveryRuleRequestMethodCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.RequestMethodMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_RequestMethodMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RequestMethodMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleRequestSchemeCondition
type DeliveryRuleRequestSchemeCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleRequestSchemeCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for RequestScheme match conditions
	Parameters *RequestSchemeMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleRequestSchemeCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleRequestSchemeCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleRequestSchemeCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*RequestSchemeMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleRequestSchemeCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleRequestSchemeCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleRequestSchemeCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleRequestSchemeCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleRequestSchemeCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 RequestSchemeMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleRequestSchemeCondition populates our DeliveryRuleRequestSchemeCondition from the provided source DeliveryRuleRequestSchemeCondition
func (condition *DeliveryRuleRequestSchemeCondition) AssignProperties_From_DeliveryRuleRequestSchemeCondition(source *v20210601s.DeliveryRuleRequestSchemeCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleRequestSchemeCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter RequestSchemeMatchConditionParameters
		err := parameter.AssignProperties_From_RequestSchemeMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RequestSchemeMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleRequestSchemeCondition populates the provided destination DeliveryRuleRequestSchemeCondition from our DeliveryRuleRequestSchemeCondition
func (condition *DeliveryRuleRequestSchemeCondition) AssignProperties_To_DeliveryRuleRequestSchemeCondition(destination *v20210601s.DeliveryRuleRequestSchemeCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.RequestSchemeMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_RequestSchemeMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RequestSchemeMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleRequestUriCondition
type DeliveryRuleRequestUriCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleRequestUriCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for RequestUri match conditions
	Parameters *RequestUriMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleRequestUriCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleRequestUriCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleRequestUriCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*RequestUriMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleRequestUriCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleRequestUriCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleRequestUriCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleRequestUriCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleRequestUriCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 RequestUriMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleRequestUriCondition populates our DeliveryRuleRequestUriCondition from the provided source DeliveryRuleRequestUriCondition
func (condition *DeliveryRuleRequestUriCondition) AssignProperties_From_DeliveryRuleRequestUriCondition(source *v20210601s.DeliveryRuleRequestUriCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleRequestUriCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter RequestUriMatchConditionParameters
		err := parameter.AssignProperties_From_RequestUriMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RequestUriMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleRequestUriCondition populates the provided destination DeliveryRuleRequestUriCondition from our DeliveryRuleRequestUriCondition
func (condition *DeliveryRuleRequestUriCondition) AssignProperties_To_DeliveryRuleRequestUriCondition(destination *v20210601s.DeliveryRuleRequestUriCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.RequestUriMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_RequestUriMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RequestUriMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleResponseHeaderAction
type DeliveryRuleResponseHeaderAction struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleResponseHeaderAction_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for the request header action.
	Parameters *HeaderActionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleResponseHeaderAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *DeliveryRuleResponseHeaderAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &DeliveryRuleResponseHeaderAction_ARM{}

	// Set property ‘Name’:
	if action.Name != nil {
		result.Name = *action.Name
	}

	// Set property ‘Parameters’:
	if action.Parameters != nil {
		parameters_ARM, err := (*action.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*HeaderActionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *DeliveryRuleResponseHeaderAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleResponseHeaderAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *DeliveryRuleResponseHeaderAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleResponseHeaderAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleResponseHeaderAction_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	action.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 HeaderActionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		action.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleResponseHeaderAction populates our DeliveryRuleResponseHeaderAction from the provided source DeliveryRuleResponseHeaderAction
func (action *DeliveryRuleResponseHeaderAction) AssignProperties_From_DeliveryRuleResponseHeaderAction(source *v20210601s.DeliveryRuleResponseHeaderAction) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleResponseHeaderAction_Name(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter HeaderActionParameters
		err := parameter.AssignProperties_From_HeaderActionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_HeaderActionParameters() to populate field Parameters")
		}
		action.Parameters = &parameter
	} else {
		action.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleResponseHeaderAction populates the provided destination DeliveryRuleResponseHeaderAction from our DeliveryRuleResponseHeaderAction
func (action *DeliveryRuleResponseHeaderAction) AssignProperties_To_DeliveryRuleResponseHeaderAction(destination *v20210601s.DeliveryRuleResponseHeaderAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if action.Parameters != nil {
		var parameter v20210601s.HeaderActionParameters
		err := action.Parameters.AssignProperties_To_HeaderActionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_HeaderActionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleRouteConfigurationOverrideAction
type DeliveryRuleRouteConfigurationOverrideAction struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleRouteConfigurationOverrideAction_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for the route configuration override action.
	Parameters *RouteConfigurationOverrideActionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleRouteConfigurationOverrideAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *DeliveryRuleRouteConfigurationOverrideAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &DeliveryRuleRouteConfigurationOverrideAction_ARM{}

	// Set property ‘Name’:
	if action.Name != nil {
		result.Name = *action.Name
	}

	// Set property ‘Parameters’:
	if action.Parameters != nil {
		parameters_ARM, err := (*action.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*RouteConfigurationOverrideActionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *DeliveryRuleRouteConfigurationOverrideAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleRouteConfigurationOverrideAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *DeliveryRuleRouteConfigurationOverrideAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleRouteConfigurationOverrideAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleRouteConfigurationOverrideAction_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	action.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 RouteConfigurationOverrideActionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		action.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleRouteConfigurationOverrideAction populates our DeliveryRuleRouteConfigurationOverrideAction from the provided source DeliveryRuleRouteConfigurationOverrideAction
func (action *DeliveryRuleRouteConfigurationOverrideAction) AssignProperties_From_DeliveryRuleRouteConfigurationOverrideAction(source *v20210601s.DeliveryRuleRouteConfigurationOverrideAction) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleRouteConfigurationOverrideAction_Name(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter RouteConfigurationOverrideActionParameters
		err := parameter.AssignProperties_From_RouteConfigurationOverrideActionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RouteConfigurationOverrideActionParameters() to populate field Parameters")
		}
		action.Parameters = &parameter
	} else {
		action.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleRouteConfigurationOverrideAction populates the provided destination DeliveryRuleRouteConfigurationOverrideAction from our DeliveryRuleRouteConfigurationOverrideAction
func (action *DeliveryRuleRouteConfigurationOverrideAction) AssignProperties_To_DeliveryRuleRouteConfigurationOverrideAction(destination *v20210601s.DeliveryRuleRouteConfigurationOverrideAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if action.Parameters != nil {
		var parameter v20210601s.RouteConfigurationOverrideActionParameters
		err := action.Parameters.AssignProperties_To_RouteConfigurationOverrideActionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RouteConfigurationOverrideActionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleServerPortCondition
type DeliveryRuleServerPortCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleServerPortCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for ServerPort match conditions
	Parameters *ServerPortMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleServerPortCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleServerPortCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleServerPortCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*ServerPortMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleServerPortCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleServerPortCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleServerPortCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleServerPortCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleServerPortCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 ServerPortMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleServerPortCondition populates our DeliveryRuleServerPortCondition from the provided source DeliveryRuleServerPortCondition
func (condition *DeliveryRuleServerPortCondition) AssignProperties_From_DeliveryRuleServerPortCondition(source *v20210601s.DeliveryRuleServerPortCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleServerPortCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter ServerPortMatchConditionParameters
		err := parameter.AssignProperties_From_ServerPortMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ServerPortMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleServerPortCondition populates the provided destination DeliveryRuleServerPortCondition from our DeliveryRuleServerPortCondition
func (condition *DeliveryRuleServerPortCondition) AssignProperties_To_DeliveryRuleServerPortCondition(destination *v20210601s.DeliveryRuleServerPortCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.ServerPortMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_ServerPortMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ServerPortMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleSocketAddrCondition
type DeliveryRuleSocketAddrCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleSocketAddrCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for SocketAddress match conditions
	Parameters *SocketAddrMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleSocketAddrCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleSocketAddrCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleSocketAddrCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*SocketAddrMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleSocketAddrCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleSocketAddrCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleSocketAddrCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleSocketAddrCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleSocketAddrCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 SocketAddrMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleSocketAddrCondition populates our DeliveryRuleSocketAddrCondition from the provided source DeliveryRuleSocketAddrCondition
func (condition *DeliveryRuleSocketAddrCondition) AssignProperties_From_DeliveryRuleSocketAddrCondition(source *v20210601s.DeliveryRuleSocketAddrCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleSocketAddrCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter SocketAddrMatchConditionParameters
		err := parameter.AssignProperties_From_SocketAddrMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SocketAddrMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleSocketAddrCondition populates the provided destination DeliveryRuleSocketAddrCondition from our DeliveryRuleSocketAddrCondition
func (condition *DeliveryRuleSocketAddrCondition) AssignProperties_To_DeliveryRuleSocketAddrCondition(destination *v20210601s.DeliveryRuleSocketAddrCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.SocketAddrMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_SocketAddrMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SocketAddrMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleSslProtocolCondition
type DeliveryRuleSslProtocolCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleSslProtocolCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for SslProtocol match conditions
	Parameters *SslProtocolMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleSslProtocolCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleSslProtocolCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleSslProtocolCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*SslProtocolMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleSslProtocolCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleSslProtocolCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleSslProtocolCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleSslProtocolCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleSslProtocolCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 SslProtocolMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleSslProtocolCondition populates our DeliveryRuleSslProtocolCondition from the provided source DeliveryRuleSslProtocolCondition
func (condition *DeliveryRuleSslProtocolCondition) AssignProperties_From_DeliveryRuleSslProtocolCondition(source *v20210601s.DeliveryRuleSslProtocolCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleSslProtocolCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter SslProtocolMatchConditionParameters
		err := parameter.AssignProperties_From_SslProtocolMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SslProtocolMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleSslProtocolCondition populates the provided destination DeliveryRuleSslProtocolCondition from our DeliveryRuleSslProtocolCondition
func (condition *DeliveryRuleSslProtocolCondition) AssignProperties_To_DeliveryRuleSslProtocolCondition(destination *v20210601s.DeliveryRuleSslProtocolCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.SslProtocolMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_SslProtocolMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SslProtocolMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleUrlFileExtensionCondition
type DeliveryRuleUrlFileExtensionCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleUrlFileExtensionCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for UrlFileExtension match conditions
	Parameters *UrlFileExtensionMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleUrlFileExtensionCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleUrlFileExtensionCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleUrlFileExtensionCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*UrlFileExtensionMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleUrlFileExtensionCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleUrlFileExtensionCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleUrlFileExtensionCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleUrlFileExtensionCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleUrlFileExtensionCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 UrlFileExtensionMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleUrlFileExtensionCondition populates our DeliveryRuleUrlFileExtensionCondition from the provided source DeliveryRuleUrlFileExtensionCondition
func (condition *DeliveryRuleUrlFileExtensionCondition) AssignProperties_From_DeliveryRuleUrlFileExtensionCondition(source *v20210601s.DeliveryRuleUrlFileExtensionCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleUrlFileExtensionCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter UrlFileExtensionMatchConditionParameters
		err := parameter.AssignProperties_From_UrlFileExtensionMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UrlFileExtensionMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleUrlFileExtensionCondition populates the provided destination DeliveryRuleUrlFileExtensionCondition from our DeliveryRuleUrlFileExtensionCondition
func (condition *DeliveryRuleUrlFileExtensionCondition) AssignProperties_To_DeliveryRuleUrlFileExtensionCondition(destination *v20210601s.DeliveryRuleUrlFileExtensionCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.UrlFileExtensionMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_UrlFileExtensionMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UrlFileExtensionMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleUrlFileNameCondition
type DeliveryRuleUrlFileNameCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleUrlFileNameCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for UrlFilename match conditions
	Parameters *UrlFileNameMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleUrlFileNameCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleUrlFileNameCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleUrlFileNameCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*UrlFileNameMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleUrlFileNameCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleUrlFileNameCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleUrlFileNameCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleUrlFileNameCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleUrlFileNameCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 UrlFileNameMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleUrlFileNameCondition populates our DeliveryRuleUrlFileNameCondition from the provided source DeliveryRuleUrlFileNameCondition
func (condition *DeliveryRuleUrlFileNameCondition) AssignProperties_From_DeliveryRuleUrlFileNameCondition(source *v20210601s.DeliveryRuleUrlFileNameCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleUrlFileNameCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter UrlFileNameMatchConditionParameters
		err := parameter.AssignProperties_From_UrlFileNameMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UrlFileNameMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleUrlFileNameCondition populates the provided destination DeliveryRuleUrlFileNameCondition from our DeliveryRuleUrlFileNameCondition
func (condition *DeliveryRuleUrlFileNameCondition) AssignProperties_To_DeliveryRuleUrlFileNameCondition(destination *v20210601s.DeliveryRuleUrlFileNameCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.UrlFileNameMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_UrlFileNameMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UrlFileNameMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/DeliveryRuleUrlPathCondition
type DeliveryRuleUrlPathCondition struct {
	// +kubebuilder:validation:Required
	Name *DeliveryRuleUrlPathCondition_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for UrlPath match conditions
	Parameters *UrlPathMatchConditionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &DeliveryRuleUrlPathCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *DeliveryRuleUrlPathCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &DeliveryRuleUrlPathCondition_ARM{}

	// Set property ‘Name’:
	if condition.Name != nil {
		result.Name = *condition.Name
	}

	// Set property ‘Parameters’:
	if condition.Parameters != nil {
		parameters_ARM, err := (*condition.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*UrlPathMatchConditionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *DeliveryRuleUrlPathCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &DeliveryRuleUrlPathCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *DeliveryRuleUrlPathCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DeliveryRuleUrlPathCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DeliveryRuleUrlPathCondition_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	condition.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 UrlPathMatchConditionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		condition.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_DeliveryRuleUrlPathCondition populates our DeliveryRuleUrlPathCondition from the provided source DeliveryRuleUrlPathCondition
func (condition *DeliveryRuleUrlPathCondition) AssignProperties_From_DeliveryRuleUrlPathCondition(source *v20210601s.DeliveryRuleUrlPathCondition) error {

	// Name
	if source.Name != nil {
		name := DeliveryRuleUrlPathCondition_Name(*source.Name)
		condition.Name = &name
	} else {
		condition.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter UrlPathMatchConditionParameters
		err := parameter.AssignProperties_From_UrlPathMatchConditionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UrlPathMatchConditionParameters() to populate field Parameters")
		}
		condition.Parameters = &parameter
	} else {
		condition.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_DeliveryRuleUrlPathCondition populates the provided destination DeliveryRuleUrlPathCondition from our DeliveryRuleUrlPathCondition
func (condition *DeliveryRuleUrlPathCondition) AssignProperties_To_DeliveryRuleUrlPathCondition(destination *v20210601s.DeliveryRuleUrlPathCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if condition.Name != nil {
		name := string(*condition.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if condition.Parameters != nil {
		var parameter v20210601s.UrlPathMatchConditionParameters
		err := condition.Parameters.AssignProperties_To_UrlPathMatchConditionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UrlPathMatchConditionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/OriginGroupOverrideAction
type OriginGroupOverrideAction struct {
	// +kubebuilder:validation:Required
	Name *OriginGroupOverrideAction_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for the origin group override action.
	Parameters *OriginGroupOverrideActionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &OriginGroupOverrideAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *OriginGroupOverrideAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &OriginGroupOverrideAction_ARM{}

	// Set property ‘Name’:
	if action.Name != nil {
		result.Name = *action.Name
	}

	// Set property ‘Parameters’:
	if action.Parameters != nil {
		parameters_ARM, err := (*action.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*OriginGroupOverrideActionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *OriginGroupOverrideAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OriginGroupOverrideAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *OriginGroupOverrideAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OriginGroupOverrideAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OriginGroupOverrideAction_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	action.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 OriginGroupOverrideActionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		action.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_OriginGroupOverrideAction populates our OriginGroupOverrideAction from the provided source OriginGroupOverrideAction
func (action *OriginGroupOverrideAction) AssignProperties_From_OriginGroupOverrideAction(source *v20210601s.OriginGroupOverrideAction) error {

	// Name
	if source.Name != nil {
		name := OriginGroupOverrideAction_Name(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter OriginGroupOverrideActionParameters
		err := parameter.AssignProperties_From_OriginGroupOverrideActionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_OriginGroupOverrideActionParameters() to populate field Parameters")
		}
		action.Parameters = &parameter
	} else {
		action.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_OriginGroupOverrideAction populates the provided destination OriginGroupOverrideAction from our OriginGroupOverrideAction
func (action *OriginGroupOverrideAction) AssignProperties_To_OriginGroupOverrideAction(destination *v20210601s.OriginGroupOverrideAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if action.Parameters != nil {
		var parameter v20210601s.OriginGroupOverrideActionParameters
		err := action.Parameters.AssignProperties_To_OriginGroupOverrideActionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_OriginGroupOverrideActionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlRedirectAction
type UrlRedirectAction struct {
	// +kubebuilder:validation:Required
	Name *UrlRedirectAction_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for the url redirect action.
	Parameters *UrlRedirectActionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlRedirectAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *UrlRedirectAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &UrlRedirectAction_ARM{}

	// Set property ‘Name’:
	if action.Name != nil {
		result.Name = *action.Name
	}

	// Set property ‘Parameters’:
	if action.Parameters != nil {
		parameters_ARM, err := (*action.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*UrlRedirectActionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *UrlRedirectAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlRedirectAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *UrlRedirectAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlRedirectAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlRedirectAction_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	action.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 UrlRedirectActionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		action.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_UrlRedirectAction populates our UrlRedirectAction from the provided source UrlRedirectAction
func (action *UrlRedirectAction) AssignProperties_From_UrlRedirectAction(source *v20210601s.UrlRedirectAction) error {

	// Name
	if source.Name != nil {
		name := UrlRedirectAction_Name(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter UrlRedirectActionParameters
		err := parameter.AssignProperties_From_UrlRedirectActionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UrlRedirectActionParameters() to populate field Parameters")
		}
		action.Parameters = &parameter
	} else {
		action.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlRedirectAction populates the provided destination UrlRedirectAction from our UrlRedirectAction
func (action *UrlRedirectAction) AssignProperties_To_UrlRedirectAction(destination *v20210601s.UrlRedirectAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if action.Parameters != nil {
		var parameter v20210601s.UrlRedirectActionParameters
		err := action.Parameters.AssignProperties_To_UrlRedirectActionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UrlRedirectActionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlRewriteAction
type UrlRewriteAction struct {
	// +kubebuilder:validation:Required
	Name *UrlRewriteAction_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for the url rewrite action.
	Parameters *UrlRewriteActionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlRewriteAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *UrlRewriteAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &UrlRewriteAction_ARM{}

	// Set property ‘Name’:
	if action.Name != nil {
		result.Name = *action.Name
	}

	// Set property ‘Parameters’:
	if action.Parameters != nil {
		parameters_ARM, err := (*action.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*UrlRewriteActionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *UrlRewriteAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlRewriteAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *UrlRewriteAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlRewriteAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlRewriteAction_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	action.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 UrlRewriteActionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		action.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_UrlRewriteAction populates our UrlRewriteAction from the provided source UrlRewriteAction
func (action *UrlRewriteAction) AssignProperties_From_UrlRewriteAction(source *v20210601s.UrlRewriteAction) error {

	// Name
	if source.Name != nil {
		name := UrlRewriteAction_Name(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter UrlRewriteActionParameters
		err := parameter.AssignProperties_From_UrlRewriteActionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UrlRewriteActionParameters() to populate field Parameters")
		}
		action.Parameters = &parameter
	} else {
		action.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlRewriteAction populates the provided destination UrlRewriteAction from our UrlRewriteAction
func (action *UrlRewriteAction) AssignProperties_To_UrlRewriteAction(destination *v20210601s.UrlRewriteAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if action.Parameters != nil {
		var parameter v20210601s.UrlRewriteActionParameters
		err := action.Parameters.AssignProperties_To_UrlRewriteActionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UrlRewriteActionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlSigningAction
type UrlSigningAction struct {
	// +kubebuilder:validation:Required
	Name *UrlSigningAction_Name `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Parameters: Defines the parameters for the Url Signing action.
	Parameters *UrlSigningActionParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlSigningAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *UrlSigningAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &UrlSigningAction_ARM{}

	// Set property ‘Name’:
	if action.Name != nil {
		result.Name = *action.Name
	}

	// Set property ‘Parameters’:
	if action.Parameters != nil {
		parameters_ARM, err := (*action.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*UrlSigningActionParameters_ARM)
		result.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *UrlSigningAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlSigningAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *UrlSigningAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlSigningAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlSigningAction_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	action.Name = &typedInput.Name

	// Set property ‘Parameters’:
	if typedInput.Parameters != nil {
		var parameters1 UrlSigningActionParameters
		err := parameters1.PopulateFromARM(owner, *typedInput.Parameters)
		if err != nil {
			return err
		}
		parameters := parameters1
		action.Parameters = &parameters
	}

	// No error
	return nil
}

// AssignProperties_From_UrlSigningAction populates our UrlSigningAction from the provided source UrlSigningAction
func (action *UrlSigningAction) AssignProperties_From_UrlSigningAction(source *v20210601s.UrlSigningAction) error {

	// Name
	if source.Name != nil {
		name := UrlSigningAction_Name(*source.Name)
		action.Name = &name
	} else {
		action.Name = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter UrlSigningActionParameters
		err := parameter.AssignProperties_From_UrlSigningActionParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_UrlSigningActionParameters() to populate field Parameters")
		}
		action.Parameters = &parameter
	} else {
		action.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlSigningAction populates the provided destination UrlSigningAction from our UrlSigningAction
func (action *UrlSigningAction) AssignProperties_To_UrlSigningAction(destination *v20210601s.UrlSigningAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if action.Name != nil {
		name := string(*action.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Parameters
	if action.Parameters != nil {
		var parameter v20210601s.UrlSigningActionParameters
		err := action.Parameters.AssignProperties_To_UrlSigningActionParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_UrlSigningActionParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/CacheExpirationActionParameters
type CacheExpirationActionParameters struct {
	// +kubebuilder:validation:Required
	// CacheBehavior: Caching behavior for the requests.
	CacheBehavior *CacheExpirationActionParameters_CacheBehavior `json:"cacheBehavior,omitempty"`

	// CacheDuration: The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
	CacheDuration *string `json:"cacheDuration,omitempty"`

	// +kubebuilder:validation:Required
	// CacheType: The level at which the content needs to be cached.
	CacheType *CacheExpirationActionParameters_CacheType `json:"cacheType,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *CacheExpirationActionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &CacheExpirationActionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *CacheExpirationActionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &CacheExpirationActionParameters_ARM{}

	// Set property ‘CacheBehavior’:
	if parameters.CacheBehavior != nil {
		cacheBehavior := *parameters.CacheBehavior
		result.CacheBehavior = &cacheBehavior
	}

	// Set property ‘CacheDuration’:
	if parameters.CacheDuration != nil {
		cacheDuration := *parameters.CacheDuration
		result.CacheDuration = &cacheDuration
	}

	// Set property ‘CacheType’:
	if parameters.CacheType != nil {
		cacheType := *parameters.CacheType
		result.CacheType = &cacheType
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *CacheExpirationActionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CacheExpirationActionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *CacheExpirationActionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CacheExpirationActionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CacheExpirationActionParameters_ARM, got %T", armInput)
	}

	// Set property ‘CacheBehavior’:
	if typedInput.CacheBehavior != nil {
		cacheBehavior := *typedInput.CacheBehavior
		parameters.CacheBehavior = &cacheBehavior
	}

	// Set property ‘CacheDuration’:
	if typedInput.CacheDuration != nil {
		cacheDuration := *typedInput.CacheDuration
		parameters.CacheDuration = &cacheDuration
	}

	// Set property ‘CacheType’:
	if typedInput.CacheType != nil {
		cacheType := *typedInput.CacheType
		parameters.CacheType = &cacheType
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_CacheExpirationActionParameters populates our CacheExpirationActionParameters from the provided source CacheExpirationActionParameters
func (parameters *CacheExpirationActionParameters) AssignProperties_From_CacheExpirationActionParameters(source *v20210601s.CacheExpirationActionParameters) error {

	// CacheBehavior
	if source.CacheBehavior != nil {
		cacheBehavior := CacheExpirationActionParameters_CacheBehavior(*source.CacheBehavior)
		parameters.CacheBehavior = &cacheBehavior
	} else {
		parameters.CacheBehavior = nil
	}

	// CacheDuration
	parameters.CacheDuration = genruntime.ClonePointerToString(source.CacheDuration)

	// CacheType
	if source.CacheType != nil {
		cacheType := CacheExpirationActionParameters_CacheType(*source.CacheType)
		parameters.CacheType = &cacheType
	} else {
		parameters.CacheType = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := CacheExpirationActionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CacheExpirationActionParameters populates the provided destination CacheExpirationActionParameters from our CacheExpirationActionParameters
func (parameters *CacheExpirationActionParameters) AssignProperties_To_CacheExpirationActionParameters(destination *v20210601s.CacheExpirationActionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CacheBehavior
	if parameters.CacheBehavior != nil {
		cacheBehavior := string(*parameters.CacheBehavior)
		destination.CacheBehavior = &cacheBehavior
	} else {
		destination.CacheBehavior = nil
	}

	// CacheDuration
	destination.CacheDuration = genruntime.ClonePointerToString(parameters.CacheDuration)

	// CacheType
	if parameters.CacheType != nil {
		cacheType := string(*parameters.CacheType)
		destination.CacheType = &cacheType
	} else {
		destination.CacheType = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/CacheKeyQueryStringActionParameters
type CacheKeyQueryStringActionParameters struct {
	// QueryParameters: query parameters to include or exclude (comma separated).
	QueryParameters *string `json:"queryParameters,omitempty"`

	// +kubebuilder:validation:Required
	// QueryStringBehavior: Caching behavior for the requests.
	QueryStringBehavior *CacheKeyQueryStringActionParameters_QueryStringBehavior `json:"queryStringBehavior,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *CacheKeyQueryStringActionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &CacheKeyQueryStringActionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *CacheKeyQueryStringActionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &CacheKeyQueryStringActionParameters_ARM{}

	// Set property ‘QueryParameters’:
	if parameters.QueryParameters != nil {
		queryParameters := *parameters.QueryParameters
		result.QueryParameters = &queryParameters
	}

	// Set property ‘QueryStringBehavior’:
	if parameters.QueryStringBehavior != nil {
		queryStringBehavior := *parameters.QueryStringBehavior
		result.QueryStringBehavior = &queryStringBehavior
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *CacheKeyQueryStringActionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CacheKeyQueryStringActionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *CacheKeyQueryStringActionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CacheKeyQueryStringActionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CacheKeyQueryStringActionParameters_ARM, got %T", armInput)
	}

	// Set property ‘QueryParameters’:
	if typedInput.QueryParameters != nil {
		queryParameters := *typedInput.QueryParameters
		parameters.QueryParameters = &queryParameters
	}

	// Set property ‘QueryStringBehavior’:
	if typedInput.QueryStringBehavior != nil {
		queryStringBehavior := *typedInput.QueryStringBehavior
		parameters.QueryStringBehavior = &queryStringBehavior
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_CacheKeyQueryStringActionParameters populates our CacheKeyQueryStringActionParameters from the provided source CacheKeyQueryStringActionParameters
func (parameters *CacheKeyQueryStringActionParameters) AssignProperties_From_CacheKeyQueryStringActionParameters(source *v20210601s.CacheKeyQueryStringActionParameters) error {

	// QueryParameters
	parameters.QueryParameters = genruntime.ClonePointerToString(source.QueryParameters)

	// QueryStringBehavior
	if source.QueryStringBehavior != nil {
		queryStringBehavior := CacheKeyQueryStringActionParameters_QueryStringBehavior(*source.QueryStringBehavior)
		parameters.QueryStringBehavior = &queryStringBehavior
	} else {
		parameters.QueryStringBehavior = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := CacheKeyQueryStringActionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CacheKeyQueryStringActionParameters populates the provided destination CacheKeyQueryStringActionParameters from our CacheKeyQueryStringActionParameters
func (parameters *CacheKeyQueryStringActionParameters) AssignProperties_To_CacheKeyQueryStringActionParameters(destination *v20210601s.CacheKeyQueryStringActionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// QueryParameters
	destination.QueryParameters = genruntime.ClonePointerToString(parameters.QueryParameters)

	// QueryStringBehavior
	if parameters.QueryStringBehavior != nil {
		queryStringBehavior := string(*parameters.QueryStringBehavior)
		destination.QueryStringBehavior = &queryStringBehavior
	} else {
		destination.QueryStringBehavior = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/ClientPortMatchConditionParameters
type ClientPortMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *ClientPortMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []ClientPortMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *ClientPortMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &ClientPortMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *ClientPortMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &ClientPortMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *ClientPortMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ClientPortMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *ClientPortMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ClientPortMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ClientPortMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_ClientPortMatchConditionParameters populates our ClientPortMatchConditionParameters from the provided source ClientPortMatchConditionParameters
func (parameters *ClientPortMatchConditionParameters) AssignProperties_From_ClientPortMatchConditionParameters(source *v20210601s.ClientPortMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := ClientPortMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]ClientPortMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = ClientPortMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := ClientPortMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ClientPortMatchConditionParameters populates the provided destination ClientPortMatchConditionParameters from our ClientPortMatchConditionParameters
func (parameters *ClientPortMatchConditionParameters) AssignProperties_To_ClientPortMatchConditionParameters(destination *v20210601s.ClientPortMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/CookiesMatchConditionParameters
type CookiesMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *CookiesMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Selector: Name of Cookies to be matched
	Selector *string `json:"selector,omitempty"`

	// Transforms: List of transforms
	Transforms []CookiesMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *CookiesMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &CookiesMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *CookiesMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &CookiesMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Selector’:
	if parameters.Selector != nil {
		selector := *parameters.Selector
		result.Selector = &selector
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *CookiesMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CookiesMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *CookiesMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CookiesMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CookiesMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Selector’:
	if typedInput.Selector != nil {
		selector := *typedInput.Selector
		parameters.Selector = &selector
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_CookiesMatchConditionParameters populates our CookiesMatchConditionParameters from the provided source CookiesMatchConditionParameters
func (parameters *CookiesMatchConditionParameters) AssignProperties_From_CookiesMatchConditionParameters(source *v20210601s.CookiesMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := CookiesMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Selector
	parameters.Selector = genruntime.ClonePointerToString(source.Selector)

	// Transforms
	if source.Transforms != nil {
		transformList := make([]CookiesMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = CookiesMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := CookiesMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CookiesMatchConditionParameters populates the provided destination CookiesMatchConditionParameters from our CookiesMatchConditionParameters
func (parameters *CookiesMatchConditionParameters) AssignProperties_To_CookiesMatchConditionParameters(destination *v20210601s.CookiesMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Selector
	destination.Selector = genruntime.ClonePointerToString(parameters.Selector)

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"CacheExpiration"}
type DeliveryRuleCacheExpirationAction_Name string

const DeliveryRuleCacheExpirationAction_Name_CacheExpiration = DeliveryRuleCacheExpirationAction_Name("CacheExpiration")

// +kubebuilder:validation:Enum={"CacheKeyQueryString"}
type DeliveryRuleCacheKeyQueryStringAction_Name string

const DeliveryRuleCacheKeyQueryStringAction_Name_CacheKeyQueryString = DeliveryRuleCacheKeyQueryStringAction_Name("CacheKeyQueryString")

// +kubebuilder:validation:Enum={"ClientPort"}
type DeliveryRuleClientPortCondition_Name string

const DeliveryRuleClientPortCondition_Name_ClientPort = DeliveryRuleClientPortCondition_Name("ClientPort")

// +kubebuilder:validation:Enum={"Cookies"}
type DeliveryRuleCookiesCondition_Name string

const DeliveryRuleCookiesCondition_Name_Cookies = DeliveryRuleCookiesCondition_Name("Cookies")

// +kubebuilder:validation:Enum={"HostName"}
type DeliveryRuleHostNameCondition_Name string

const DeliveryRuleHostNameCondition_Name_HostName = DeliveryRuleHostNameCondition_Name("HostName")

// +kubebuilder:validation:Enum={"HttpVersion"}
type DeliveryRuleHttpVersionCondition_Name string

const DeliveryRuleHttpVersionCondition_Name_HttpVersion = DeliveryRuleHttpVersionCondition_Name("HttpVersion")

// +kubebuilder:validation:Enum={"IsDevice"}
type DeliveryRuleIsDeviceCondition_Name string

const DeliveryRuleIsDeviceCondition_Name_IsDevice = DeliveryRuleIsDeviceCondition_Name("IsDevice")

// +kubebuilder:validation:Enum={"PostArgs"}
type DeliveryRulePostArgsCondition_Name string

const DeliveryRulePostArgsCondition_Name_PostArgs = DeliveryRulePostArgsCondition_Name("PostArgs")

// +kubebuilder:validation:Enum={"QueryString"}
type DeliveryRuleQueryStringCondition_Name string

const DeliveryRuleQueryStringCondition_Name_QueryString = DeliveryRuleQueryStringCondition_Name("QueryString")

// +kubebuilder:validation:Enum={"RemoteAddress"}
type DeliveryRuleRemoteAddressCondition_Name string

const DeliveryRuleRemoteAddressCondition_Name_RemoteAddress = DeliveryRuleRemoteAddressCondition_Name("RemoteAddress")

// +kubebuilder:validation:Enum={"RequestBody"}
type DeliveryRuleRequestBodyCondition_Name string

const DeliveryRuleRequestBodyCondition_Name_RequestBody = DeliveryRuleRequestBodyCondition_Name("RequestBody")

// +kubebuilder:validation:Enum={"ModifyRequestHeader"}
type DeliveryRuleRequestHeaderAction_Name string

const DeliveryRuleRequestHeaderAction_Name_ModifyRequestHeader = DeliveryRuleRequestHeaderAction_Name("ModifyRequestHeader")

// +kubebuilder:validation:Enum={"RequestHeader"}
type DeliveryRuleRequestHeaderCondition_Name string

const DeliveryRuleRequestHeaderCondition_Name_RequestHeader = DeliveryRuleRequestHeaderCondition_Name("RequestHeader")

// +kubebuilder:validation:Enum={"RequestMethod"}
type DeliveryRuleRequestMethodCondition_Name string

const DeliveryRuleRequestMethodCondition_Name_RequestMethod = DeliveryRuleRequestMethodCondition_Name("RequestMethod")

// +kubebuilder:validation:Enum={"RequestScheme"}
type DeliveryRuleRequestSchemeCondition_Name string

const DeliveryRuleRequestSchemeCondition_Name_RequestScheme = DeliveryRuleRequestSchemeCondition_Name("RequestScheme")

// +kubebuilder:validation:Enum={"RequestUri"}
type DeliveryRuleRequestUriCondition_Name string

const DeliveryRuleRequestUriCondition_Name_RequestUri = DeliveryRuleRequestUriCondition_Name("RequestUri")

// +kubebuilder:validation:Enum={"ModifyResponseHeader"}
type DeliveryRuleResponseHeaderAction_Name string

const DeliveryRuleResponseHeaderAction_Name_ModifyResponseHeader = DeliveryRuleResponseHeaderAction_Name("ModifyResponseHeader")

// +kubebuilder:validation:Enum={"RouteConfigurationOverride"}
type DeliveryRuleRouteConfigurationOverrideAction_Name string

const DeliveryRuleRouteConfigurationOverrideAction_Name_RouteConfigurationOverride = DeliveryRuleRouteConfigurationOverrideAction_Name("RouteConfigurationOverride")

// +kubebuilder:validation:Enum={"ServerPort"}
type DeliveryRuleServerPortCondition_Name string

const DeliveryRuleServerPortCondition_Name_ServerPort = DeliveryRuleServerPortCondition_Name("ServerPort")

// +kubebuilder:validation:Enum={"SocketAddr"}
type DeliveryRuleSocketAddrCondition_Name string

const DeliveryRuleSocketAddrCondition_Name_SocketAddr = DeliveryRuleSocketAddrCondition_Name("SocketAddr")

// +kubebuilder:validation:Enum={"SslProtocol"}
type DeliveryRuleSslProtocolCondition_Name string

const DeliveryRuleSslProtocolCondition_Name_SslProtocol = DeliveryRuleSslProtocolCondition_Name("SslProtocol")

// +kubebuilder:validation:Enum={"UrlFileExtension"}
type DeliveryRuleUrlFileExtensionCondition_Name string

const DeliveryRuleUrlFileExtensionCondition_Name_UrlFileExtension = DeliveryRuleUrlFileExtensionCondition_Name("UrlFileExtension")

// +kubebuilder:validation:Enum={"UrlFileName"}
type DeliveryRuleUrlFileNameCondition_Name string

const DeliveryRuleUrlFileNameCondition_Name_UrlFileName = DeliveryRuleUrlFileNameCondition_Name("UrlFileName")

// +kubebuilder:validation:Enum={"UrlPath"}
type DeliveryRuleUrlPathCondition_Name string

const DeliveryRuleUrlPathCondition_Name_UrlPath = DeliveryRuleUrlPathCondition_Name("UrlPath")

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/HeaderActionParameters
type HeaderActionParameters struct {
	// +kubebuilder:validation:Required
	// HeaderAction: Action to perform.
	HeaderAction *HeaderActionParameters_HeaderAction `json:"headerAction,omitempty"`

	// +kubebuilder:validation:Required
	// HeaderName: Name of the header to modify
	HeaderName *string `json:"headerName,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *HeaderActionParameters_TypeName `json:"typeName,omitempty"`

	// Value: Value for the specified action
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &HeaderActionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *HeaderActionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &HeaderActionParameters_ARM{}

	// Set property ‘HeaderAction’:
	if parameters.HeaderAction != nil {
		headerAction := *parameters.HeaderAction
		result.HeaderAction = &headerAction
	}

	// Set property ‘HeaderName’:
	if parameters.HeaderName != nil {
		headerName := *parameters.HeaderName
		result.HeaderName = &headerName
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}

	// Set property ‘Value’:
	if parameters.Value != nil {
		value := *parameters.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *HeaderActionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HeaderActionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *HeaderActionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HeaderActionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HeaderActionParameters_ARM, got %T", armInput)
	}

	// Set property ‘HeaderAction’:
	if typedInput.HeaderAction != nil {
		headerAction := *typedInput.HeaderAction
		parameters.HeaderAction = &headerAction
	}

	// Set property ‘HeaderName’:
	if typedInput.HeaderName != nil {
		headerName := *typedInput.HeaderName
		parameters.HeaderName = &headerName
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		parameters.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_HeaderActionParameters populates our HeaderActionParameters from the provided source HeaderActionParameters
func (parameters *HeaderActionParameters) AssignProperties_From_HeaderActionParameters(source *v20210601s.HeaderActionParameters) error {

	// HeaderAction
	if source.HeaderAction != nil {
		headerAction := HeaderActionParameters_HeaderAction(*source.HeaderAction)
		parameters.HeaderAction = &headerAction
	} else {
		parameters.HeaderAction = nil
	}

	// HeaderName
	parameters.HeaderName = genruntime.ClonePointerToString(source.HeaderName)

	// TypeName
	if source.TypeName != nil {
		typeName := HeaderActionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// Value
	parameters.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_HeaderActionParameters populates the provided destination HeaderActionParameters from our HeaderActionParameters
func (parameters *HeaderActionParameters) AssignProperties_To_HeaderActionParameters(destination *v20210601s.HeaderActionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HeaderAction
	if parameters.HeaderAction != nil {
		headerAction := string(*parameters.HeaderAction)
		destination.HeaderAction = &headerAction
	} else {
		destination.HeaderAction = nil
	}

	// HeaderName
	destination.HeaderName = genruntime.ClonePointerToString(parameters.HeaderName)

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToString(parameters.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/HostNameMatchConditionParameters
type HostNameMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *HostNameMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []HostNameMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *HostNameMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &HostNameMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *HostNameMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &HostNameMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *HostNameMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HostNameMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *HostNameMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HostNameMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HostNameMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_HostNameMatchConditionParameters populates our HostNameMatchConditionParameters from the provided source HostNameMatchConditionParameters
func (parameters *HostNameMatchConditionParameters) AssignProperties_From_HostNameMatchConditionParameters(source *v20210601s.HostNameMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := HostNameMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]HostNameMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = HostNameMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := HostNameMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HostNameMatchConditionParameters populates the provided destination HostNameMatchConditionParameters from our HostNameMatchConditionParameters
func (parameters *HostNameMatchConditionParameters) AssignProperties_To_HostNameMatchConditionParameters(destination *v20210601s.HostNameMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/HttpVersionMatchConditionParameters
type HttpVersionMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched
	Operator *HttpVersionMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []HttpVersionMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *HttpVersionMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &HttpVersionMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *HttpVersionMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &HttpVersionMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *HttpVersionMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HttpVersionMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *HttpVersionMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HttpVersionMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HttpVersionMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_HttpVersionMatchConditionParameters populates our HttpVersionMatchConditionParameters from the provided source HttpVersionMatchConditionParameters
func (parameters *HttpVersionMatchConditionParameters) AssignProperties_From_HttpVersionMatchConditionParameters(source *v20210601s.HttpVersionMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := HttpVersionMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]HttpVersionMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = HttpVersionMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := HttpVersionMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_HttpVersionMatchConditionParameters populates the provided destination HttpVersionMatchConditionParameters from our HttpVersionMatchConditionParameters
func (parameters *HttpVersionMatchConditionParameters) AssignProperties_To_HttpVersionMatchConditionParameters(destination *v20210601s.HttpVersionMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/IsDeviceMatchConditionParameters
type IsDeviceMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []IsDeviceMatchConditionParameters_MatchValues `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched
	Operator *IsDeviceMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []IsDeviceMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *IsDeviceMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &IsDeviceMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *IsDeviceMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &IsDeviceMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *IsDeviceMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IsDeviceMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *IsDeviceMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IsDeviceMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IsDeviceMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_IsDeviceMatchConditionParameters populates our IsDeviceMatchConditionParameters from the provided source IsDeviceMatchConditionParameters
func (parameters *IsDeviceMatchConditionParameters) AssignProperties_From_IsDeviceMatchConditionParameters(source *v20210601s.IsDeviceMatchConditionParameters) error {

	// MatchValues
	if source.MatchValues != nil {
		matchValueList := make([]IsDeviceMatchConditionParameters_MatchValues, len(source.MatchValues))
		for matchValueIndex, matchValueItem := range source.MatchValues {
			// Shadow the loop variable to avoid aliasing
			matchValueItem := matchValueItem
			matchValueList[matchValueIndex] = IsDeviceMatchConditionParameters_MatchValues(matchValueItem)
		}
		parameters.MatchValues = matchValueList
	} else {
		parameters.MatchValues = nil
	}

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := IsDeviceMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]IsDeviceMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = IsDeviceMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := IsDeviceMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_IsDeviceMatchConditionParameters populates the provided destination IsDeviceMatchConditionParameters from our IsDeviceMatchConditionParameters
func (parameters *IsDeviceMatchConditionParameters) AssignProperties_To_IsDeviceMatchConditionParameters(destination *v20210601s.IsDeviceMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	if parameters.MatchValues != nil {
		matchValueList := make([]string, len(parameters.MatchValues))
		for matchValueIndex, matchValueItem := range parameters.MatchValues {
			// Shadow the loop variable to avoid aliasing
			matchValueItem := matchValueItem
			matchValueList[matchValueIndex] = string(matchValueItem)
		}
		destination.MatchValues = matchValueList
	} else {
		destination.MatchValues = nil
	}

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"OriginGroupOverride"}
type OriginGroupOverrideAction_Name string

const OriginGroupOverrideAction_Name_OriginGroupOverride = OriginGroupOverrideAction_Name("OriginGroupOverride")

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/OriginGroupOverrideActionParameters
type OriginGroupOverrideActionParameters struct {
	// +kubebuilder:validation:Required
	// OriginGroup: Reference to another resource.
	OriginGroup *ResourceReference `json:"originGroup,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *OriginGroupOverrideActionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &OriginGroupOverrideActionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *OriginGroupOverrideActionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &OriginGroupOverrideActionParameters_ARM{}

	// Set property ‘OriginGroup’:
	if parameters.OriginGroup != nil {
		originGroup_ARM, err := (*parameters.OriginGroup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		originGroup := *originGroup_ARM.(*ResourceReference_ARM)
		result.OriginGroup = &originGroup
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *OriginGroupOverrideActionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OriginGroupOverrideActionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *OriginGroupOverrideActionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OriginGroupOverrideActionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OriginGroupOverrideActionParameters_ARM, got %T", armInput)
	}

	// Set property ‘OriginGroup’:
	if typedInput.OriginGroup != nil {
		var originGroup1 ResourceReference
		err := originGroup1.PopulateFromARM(owner, *typedInput.OriginGroup)
		if err != nil {
			return err
		}
		originGroup := originGroup1
		parameters.OriginGroup = &originGroup
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_OriginGroupOverrideActionParameters populates our OriginGroupOverrideActionParameters from the provided source OriginGroupOverrideActionParameters
func (parameters *OriginGroupOverrideActionParameters) AssignProperties_From_OriginGroupOverrideActionParameters(source *v20210601s.OriginGroupOverrideActionParameters) error {

	// OriginGroup
	if source.OriginGroup != nil {
		var originGroup ResourceReference
		err := originGroup.AssignProperties_From_ResourceReference(source.OriginGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ResourceReference() to populate field OriginGroup")
		}
		parameters.OriginGroup = &originGroup
	} else {
		parameters.OriginGroup = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := OriginGroupOverrideActionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_OriginGroupOverrideActionParameters populates the provided destination OriginGroupOverrideActionParameters from our OriginGroupOverrideActionParameters
func (parameters *OriginGroupOverrideActionParameters) AssignProperties_To_OriginGroupOverrideActionParameters(destination *v20210601s.OriginGroupOverrideActionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// OriginGroup
	if parameters.OriginGroup != nil {
		var originGroup v20210601s.ResourceReference
		err := parameters.OriginGroup.AssignProperties_To_ResourceReference(&originGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ResourceReference() to populate field OriginGroup")
		}
		destination.OriginGroup = &originGroup
	} else {
		destination.OriginGroup = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/PostArgsMatchConditionParameters
type PostArgsMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *PostArgsMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Selector: Name of PostArg to be matched
	Selector *string `json:"selector,omitempty"`

	// Transforms: List of transforms
	Transforms []PostArgsMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *PostArgsMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &PostArgsMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *PostArgsMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &PostArgsMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Selector’:
	if parameters.Selector != nil {
		selector := *parameters.Selector
		result.Selector = &selector
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *PostArgsMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PostArgsMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *PostArgsMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PostArgsMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PostArgsMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Selector’:
	if typedInput.Selector != nil {
		selector := *typedInput.Selector
		parameters.Selector = &selector
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_PostArgsMatchConditionParameters populates our PostArgsMatchConditionParameters from the provided source PostArgsMatchConditionParameters
func (parameters *PostArgsMatchConditionParameters) AssignProperties_From_PostArgsMatchConditionParameters(source *v20210601s.PostArgsMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := PostArgsMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Selector
	parameters.Selector = genruntime.ClonePointerToString(source.Selector)

	// Transforms
	if source.Transforms != nil {
		transformList := make([]PostArgsMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = PostArgsMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := PostArgsMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_PostArgsMatchConditionParameters populates the provided destination PostArgsMatchConditionParameters from our PostArgsMatchConditionParameters
func (parameters *PostArgsMatchConditionParameters) AssignProperties_To_PostArgsMatchConditionParameters(destination *v20210601s.PostArgsMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Selector
	destination.Selector = genruntime.ClonePointerToString(parameters.Selector)

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/QueryStringMatchConditionParameters
type QueryStringMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *QueryStringMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []QueryStringMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *QueryStringMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &QueryStringMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *QueryStringMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &QueryStringMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *QueryStringMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &QueryStringMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *QueryStringMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(QueryStringMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected QueryStringMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_QueryStringMatchConditionParameters populates our QueryStringMatchConditionParameters from the provided source QueryStringMatchConditionParameters
func (parameters *QueryStringMatchConditionParameters) AssignProperties_From_QueryStringMatchConditionParameters(source *v20210601s.QueryStringMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := QueryStringMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]QueryStringMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = QueryStringMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := QueryStringMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_QueryStringMatchConditionParameters populates the provided destination QueryStringMatchConditionParameters from our QueryStringMatchConditionParameters
func (parameters *QueryStringMatchConditionParameters) AssignProperties_To_QueryStringMatchConditionParameters(destination *v20210601s.QueryStringMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/RemoteAddressMatchConditionParameters
type RemoteAddressMatchConditionParameters struct {
	// MatchValues: Match values to match against. The operator will apply to each value in here with OR semantics. If any of
	// them match the variable with the given operator this match condition is considered a match.
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *RemoteAddressMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []RemoteAddressMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *RemoteAddressMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &RemoteAddressMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *RemoteAddressMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &RemoteAddressMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *RemoteAddressMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RemoteAddressMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *RemoteAddressMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RemoteAddressMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RemoteAddressMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_RemoteAddressMatchConditionParameters populates our RemoteAddressMatchConditionParameters from the provided source RemoteAddressMatchConditionParameters
func (parameters *RemoteAddressMatchConditionParameters) AssignProperties_From_RemoteAddressMatchConditionParameters(source *v20210601s.RemoteAddressMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := RemoteAddressMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]RemoteAddressMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = RemoteAddressMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := RemoteAddressMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RemoteAddressMatchConditionParameters populates the provided destination RemoteAddressMatchConditionParameters from our RemoteAddressMatchConditionParameters
func (parameters *RemoteAddressMatchConditionParameters) AssignProperties_To_RemoteAddressMatchConditionParameters(destination *v20210601s.RemoteAddressMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/RequestBodyMatchConditionParameters
type RequestBodyMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *RequestBodyMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []RequestBodyMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *RequestBodyMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &RequestBodyMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *RequestBodyMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &RequestBodyMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *RequestBodyMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RequestBodyMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *RequestBodyMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RequestBodyMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RequestBodyMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_RequestBodyMatchConditionParameters populates our RequestBodyMatchConditionParameters from the provided source RequestBodyMatchConditionParameters
func (parameters *RequestBodyMatchConditionParameters) AssignProperties_From_RequestBodyMatchConditionParameters(source *v20210601s.RequestBodyMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := RequestBodyMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]RequestBodyMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = RequestBodyMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := RequestBodyMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RequestBodyMatchConditionParameters populates the provided destination RequestBodyMatchConditionParameters from our RequestBodyMatchConditionParameters
func (parameters *RequestBodyMatchConditionParameters) AssignProperties_To_RequestBodyMatchConditionParameters(destination *v20210601s.RequestBodyMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/RequestHeaderMatchConditionParameters
type RequestHeaderMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *RequestHeaderMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Selector: Name of Header to be matched
	Selector *string `json:"selector,omitempty"`

	// Transforms: List of transforms
	Transforms []RequestHeaderMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *RequestHeaderMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &RequestHeaderMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *RequestHeaderMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &RequestHeaderMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Selector’:
	if parameters.Selector != nil {
		selector := *parameters.Selector
		result.Selector = &selector
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *RequestHeaderMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RequestHeaderMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *RequestHeaderMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RequestHeaderMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RequestHeaderMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Selector’:
	if typedInput.Selector != nil {
		selector := *typedInput.Selector
		parameters.Selector = &selector
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_RequestHeaderMatchConditionParameters populates our RequestHeaderMatchConditionParameters from the provided source RequestHeaderMatchConditionParameters
func (parameters *RequestHeaderMatchConditionParameters) AssignProperties_From_RequestHeaderMatchConditionParameters(source *v20210601s.RequestHeaderMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := RequestHeaderMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Selector
	parameters.Selector = genruntime.ClonePointerToString(source.Selector)

	// Transforms
	if source.Transforms != nil {
		transformList := make([]RequestHeaderMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = RequestHeaderMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := RequestHeaderMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RequestHeaderMatchConditionParameters populates the provided destination RequestHeaderMatchConditionParameters from our RequestHeaderMatchConditionParameters
func (parameters *RequestHeaderMatchConditionParameters) AssignProperties_To_RequestHeaderMatchConditionParameters(destination *v20210601s.RequestHeaderMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Selector
	destination.Selector = genruntime.ClonePointerToString(parameters.Selector)

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/RequestMethodMatchConditionParameters
type RequestMethodMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []RequestMethodMatchConditionParameters_MatchValues `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched
	Operator *RequestMethodMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []RequestMethodMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *RequestMethodMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &RequestMethodMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *RequestMethodMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &RequestMethodMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *RequestMethodMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RequestMethodMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *RequestMethodMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RequestMethodMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RequestMethodMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_RequestMethodMatchConditionParameters populates our RequestMethodMatchConditionParameters from the provided source RequestMethodMatchConditionParameters
func (parameters *RequestMethodMatchConditionParameters) AssignProperties_From_RequestMethodMatchConditionParameters(source *v20210601s.RequestMethodMatchConditionParameters) error {

	// MatchValues
	if source.MatchValues != nil {
		matchValueList := make([]RequestMethodMatchConditionParameters_MatchValues, len(source.MatchValues))
		for matchValueIndex, matchValueItem := range source.MatchValues {
			// Shadow the loop variable to avoid aliasing
			matchValueItem := matchValueItem
			matchValueList[matchValueIndex] = RequestMethodMatchConditionParameters_MatchValues(matchValueItem)
		}
		parameters.MatchValues = matchValueList
	} else {
		parameters.MatchValues = nil
	}

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := RequestMethodMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]RequestMethodMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = RequestMethodMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := RequestMethodMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RequestMethodMatchConditionParameters populates the provided destination RequestMethodMatchConditionParameters from our RequestMethodMatchConditionParameters
func (parameters *RequestMethodMatchConditionParameters) AssignProperties_To_RequestMethodMatchConditionParameters(destination *v20210601s.RequestMethodMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	if parameters.MatchValues != nil {
		matchValueList := make([]string, len(parameters.MatchValues))
		for matchValueIndex, matchValueItem := range parameters.MatchValues {
			// Shadow the loop variable to avoid aliasing
			matchValueItem := matchValueItem
			matchValueList[matchValueIndex] = string(matchValueItem)
		}
		destination.MatchValues = matchValueList
	} else {
		destination.MatchValues = nil
	}

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/RequestSchemeMatchConditionParameters
type RequestSchemeMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []RequestSchemeMatchConditionParameters_MatchValues `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched
	Operator *RequestSchemeMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []RequestSchemeMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *RequestSchemeMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &RequestSchemeMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *RequestSchemeMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &RequestSchemeMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *RequestSchemeMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RequestSchemeMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *RequestSchemeMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RequestSchemeMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RequestSchemeMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_RequestSchemeMatchConditionParameters populates our RequestSchemeMatchConditionParameters from the provided source RequestSchemeMatchConditionParameters
func (parameters *RequestSchemeMatchConditionParameters) AssignProperties_From_RequestSchemeMatchConditionParameters(source *v20210601s.RequestSchemeMatchConditionParameters) error {

	// MatchValues
	if source.MatchValues != nil {
		matchValueList := make([]RequestSchemeMatchConditionParameters_MatchValues, len(source.MatchValues))
		for matchValueIndex, matchValueItem := range source.MatchValues {
			// Shadow the loop variable to avoid aliasing
			matchValueItem := matchValueItem
			matchValueList[matchValueIndex] = RequestSchemeMatchConditionParameters_MatchValues(matchValueItem)
		}
		parameters.MatchValues = matchValueList
	} else {
		parameters.MatchValues = nil
	}

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := RequestSchemeMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]RequestSchemeMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = RequestSchemeMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := RequestSchemeMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RequestSchemeMatchConditionParameters populates the provided destination RequestSchemeMatchConditionParameters from our RequestSchemeMatchConditionParameters
func (parameters *RequestSchemeMatchConditionParameters) AssignProperties_To_RequestSchemeMatchConditionParameters(destination *v20210601s.RequestSchemeMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	if parameters.MatchValues != nil {
		matchValueList := make([]string, len(parameters.MatchValues))
		for matchValueIndex, matchValueItem := range parameters.MatchValues {
			// Shadow the loop variable to avoid aliasing
			matchValueItem := matchValueItem
			matchValueList[matchValueIndex] = string(matchValueItem)
		}
		destination.MatchValues = matchValueList
	} else {
		destination.MatchValues = nil
	}

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/RequestUriMatchConditionParameters
type RequestUriMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *RequestUriMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []RequestUriMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *RequestUriMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &RequestUriMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *RequestUriMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &RequestUriMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *RequestUriMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RequestUriMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *RequestUriMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RequestUriMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RequestUriMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_RequestUriMatchConditionParameters populates our RequestUriMatchConditionParameters from the provided source RequestUriMatchConditionParameters
func (parameters *RequestUriMatchConditionParameters) AssignProperties_From_RequestUriMatchConditionParameters(source *v20210601s.RequestUriMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := RequestUriMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]RequestUriMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = RequestUriMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := RequestUriMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RequestUriMatchConditionParameters populates the provided destination RequestUriMatchConditionParameters from our RequestUriMatchConditionParameters
func (parameters *RequestUriMatchConditionParameters) AssignProperties_To_RequestUriMatchConditionParameters(destination *v20210601s.RequestUriMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/RouteConfigurationOverrideActionParameters
type RouteConfigurationOverrideActionParameters struct {
	// CacheConfiguration: Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration
	// object.
	CacheConfiguration *CacheConfiguration `json:"cacheConfiguration,omitempty"`

	// OriginGroupOverride: Defines the parameters for the origin group override configuration.
	OriginGroupOverride *OriginGroupOverride `json:"originGroupOverride,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *RouteConfigurationOverrideActionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &RouteConfigurationOverrideActionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *RouteConfigurationOverrideActionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &RouteConfigurationOverrideActionParameters_ARM{}

	// Set property ‘CacheConfiguration’:
	if parameters.CacheConfiguration != nil {
		cacheConfiguration_ARM, err := (*parameters.CacheConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		cacheConfiguration := *cacheConfiguration_ARM.(*CacheConfiguration_ARM)
		result.CacheConfiguration = &cacheConfiguration
	}

	// Set property ‘OriginGroupOverride’:
	if parameters.OriginGroupOverride != nil {
		originGroupOverride_ARM, err := (*parameters.OriginGroupOverride).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		originGroupOverride := *originGroupOverride_ARM.(*OriginGroupOverride_ARM)
		result.OriginGroupOverride = &originGroupOverride
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *RouteConfigurationOverrideActionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RouteConfigurationOverrideActionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *RouteConfigurationOverrideActionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RouteConfigurationOverrideActionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RouteConfigurationOverrideActionParameters_ARM, got %T", armInput)
	}

	// Set property ‘CacheConfiguration’:
	if typedInput.CacheConfiguration != nil {
		var cacheConfiguration1 CacheConfiguration
		err := cacheConfiguration1.PopulateFromARM(owner, *typedInput.CacheConfiguration)
		if err != nil {
			return err
		}
		cacheConfiguration := cacheConfiguration1
		parameters.CacheConfiguration = &cacheConfiguration
	}

	// Set property ‘OriginGroupOverride’:
	if typedInput.OriginGroupOverride != nil {
		var originGroupOverride1 OriginGroupOverride
		err := originGroupOverride1.PopulateFromARM(owner, *typedInput.OriginGroupOverride)
		if err != nil {
			return err
		}
		originGroupOverride := originGroupOverride1
		parameters.OriginGroupOverride = &originGroupOverride
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_RouteConfigurationOverrideActionParameters populates our RouteConfigurationOverrideActionParameters from the provided source RouteConfigurationOverrideActionParameters
func (parameters *RouteConfigurationOverrideActionParameters) AssignProperties_From_RouteConfigurationOverrideActionParameters(source *v20210601s.RouteConfigurationOverrideActionParameters) error {

	// CacheConfiguration
	if source.CacheConfiguration != nil {
		var cacheConfiguration CacheConfiguration
		err := cacheConfiguration.AssignProperties_From_CacheConfiguration(source.CacheConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_CacheConfiguration() to populate field CacheConfiguration")
		}
		parameters.CacheConfiguration = &cacheConfiguration
	} else {
		parameters.CacheConfiguration = nil
	}

	// OriginGroupOverride
	if source.OriginGroupOverride != nil {
		var originGroupOverride OriginGroupOverride
		err := originGroupOverride.AssignProperties_From_OriginGroupOverride(source.OriginGroupOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_OriginGroupOverride() to populate field OriginGroupOverride")
		}
		parameters.OriginGroupOverride = &originGroupOverride
	} else {
		parameters.OriginGroupOverride = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := RouteConfigurationOverrideActionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RouteConfigurationOverrideActionParameters populates the provided destination RouteConfigurationOverrideActionParameters from our RouteConfigurationOverrideActionParameters
func (parameters *RouteConfigurationOverrideActionParameters) AssignProperties_To_RouteConfigurationOverrideActionParameters(destination *v20210601s.RouteConfigurationOverrideActionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CacheConfiguration
	if parameters.CacheConfiguration != nil {
		var cacheConfiguration v20210601s.CacheConfiguration
		err := parameters.CacheConfiguration.AssignProperties_To_CacheConfiguration(&cacheConfiguration)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_CacheConfiguration() to populate field CacheConfiguration")
		}
		destination.CacheConfiguration = &cacheConfiguration
	} else {
		destination.CacheConfiguration = nil
	}

	// OriginGroupOverride
	if parameters.OriginGroupOverride != nil {
		var originGroupOverride v20210601s.OriginGroupOverride
		err := parameters.OriginGroupOverride.AssignProperties_To_OriginGroupOverride(&originGroupOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_OriginGroupOverride() to populate field OriginGroupOverride")
		}
		destination.OriginGroupOverride = &originGroupOverride
	} else {
		destination.OriginGroupOverride = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/ServerPortMatchConditionParameters
type ServerPortMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *ServerPortMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []ServerPortMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *ServerPortMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &ServerPortMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *ServerPortMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &ServerPortMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *ServerPortMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ServerPortMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *ServerPortMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ServerPortMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ServerPortMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_ServerPortMatchConditionParameters populates our ServerPortMatchConditionParameters from the provided source ServerPortMatchConditionParameters
func (parameters *ServerPortMatchConditionParameters) AssignProperties_From_ServerPortMatchConditionParameters(source *v20210601s.ServerPortMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := ServerPortMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]ServerPortMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = ServerPortMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := ServerPortMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ServerPortMatchConditionParameters populates the provided destination ServerPortMatchConditionParameters from our ServerPortMatchConditionParameters
func (parameters *ServerPortMatchConditionParameters) AssignProperties_To_ServerPortMatchConditionParameters(destination *v20210601s.ServerPortMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/SocketAddrMatchConditionParameters
type SocketAddrMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *SocketAddrMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []SocketAddrMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *SocketAddrMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &SocketAddrMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *SocketAddrMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &SocketAddrMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *SocketAddrMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SocketAddrMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *SocketAddrMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SocketAddrMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SocketAddrMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_SocketAddrMatchConditionParameters populates our SocketAddrMatchConditionParameters from the provided source SocketAddrMatchConditionParameters
func (parameters *SocketAddrMatchConditionParameters) AssignProperties_From_SocketAddrMatchConditionParameters(source *v20210601s.SocketAddrMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := SocketAddrMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]SocketAddrMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = SocketAddrMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := SocketAddrMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SocketAddrMatchConditionParameters populates the provided destination SocketAddrMatchConditionParameters from our SocketAddrMatchConditionParameters
func (parameters *SocketAddrMatchConditionParameters) AssignProperties_To_SocketAddrMatchConditionParameters(destination *v20210601s.SocketAddrMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/SslProtocolMatchConditionParameters
type SslProtocolMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []SslProtocolMatchConditionParameters_MatchValues `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched
	Operator *SslProtocolMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []SslProtocolMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *SslProtocolMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &SslProtocolMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *SslProtocolMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &SslProtocolMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *SslProtocolMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SslProtocolMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *SslProtocolMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SslProtocolMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SslProtocolMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_SslProtocolMatchConditionParameters populates our SslProtocolMatchConditionParameters from the provided source SslProtocolMatchConditionParameters
func (parameters *SslProtocolMatchConditionParameters) AssignProperties_From_SslProtocolMatchConditionParameters(source *v20210601s.SslProtocolMatchConditionParameters) error {

	// MatchValues
	if source.MatchValues != nil {
		matchValueList := make([]SslProtocolMatchConditionParameters_MatchValues, len(source.MatchValues))
		for matchValueIndex, matchValueItem := range source.MatchValues {
			// Shadow the loop variable to avoid aliasing
			matchValueItem := matchValueItem
			matchValueList[matchValueIndex] = SslProtocolMatchConditionParameters_MatchValues(matchValueItem)
		}
		parameters.MatchValues = matchValueList
	} else {
		parameters.MatchValues = nil
	}

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := SslProtocolMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]SslProtocolMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = SslProtocolMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := SslProtocolMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SslProtocolMatchConditionParameters populates the provided destination SslProtocolMatchConditionParameters from our SslProtocolMatchConditionParameters
func (parameters *SslProtocolMatchConditionParameters) AssignProperties_To_SslProtocolMatchConditionParameters(destination *v20210601s.SslProtocolMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	if parameters.MatchValues != nil {
		matchValueList := make([]string, len(parameters.MatchValues))
		for matchValueIndex, matchValueItem := range parameters.MatchValues {
			// Shadow the loop variable to avoid aliasing
			matchValueItem := matchValueItem
			matchValueList[matchValueIndex] = string(matchValueItem)
		}
		destination.MatchValues = matchValueList
	} else {
		destination.MatchValues = nil
	}

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlFileExtensionMatchConditionParameters
type UrlFileExtensionMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *UrlFileExtensionMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []UrlFileExtensionMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *UrlFileExtensionMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlFileExtensionMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *UrlFileExtensionMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &UrlFileExtensionMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *UrlFileExtensionMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlFileExtensionMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *UrlFileExtensionMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlFileExtensionMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlFileExtensionMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_UrlFileExtensionMatchConditionParameters populates our UrlFileExtensionMatchConditionParameters from the provided source UrlFileExtensionMatchConditionParameters
func (parameters *UrlFileExtensionMatchConditionParameters) AssignProperties_From_UrlFileExtensionMatchConditionParameters(source *v20210601s.UrlFileExtensionMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := UrlFileExtensionMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]UrlFileExtensionMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = UrlFileExtensionMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := UrlFileExtensionMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlFileExtensionMatchConditionParameters populates the provided destination UrlFileExtensionMatchConditionParameters from our UrlFileExtensionMatchConditionParameters
func (parameters *UrlFileExtensionMatchConditionParameters) AssignProperties_To_UrlFileExtensionMatchConditionParameters(destination *v20210601s.UrlFileExtensionMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlFileNameMatchConditionParameters
type UrlFileNameMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *UrlFileNameMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []UrlFileNameMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *UrlFileNameMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlFileNameMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *UrlFileNameMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &UrlFileNameMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *UrlFileNameMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlFileNameMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *UrlFileNameMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlFileNameMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlFileNameMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_UrlFileNameMatchConditionParameters populates our UrlFileNameMatchConditionParameters from the provided source UrlFileNameMatchConditionParameters
func (parameters *UrlFileNameMatchConditionParameters) AssignProperties_From_UrlFileNameMatchConditionParameters(source *v20210601s.UrlFileNameMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := UrlFileNameMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]UrlFileNameMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = UrlFileNameMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := UrlFileNameMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlFileNameMatchConditionParameters populates the provided destination UrlFileNameMatchConditionParameters from our UrlFileNameMatchConditionParameters
func (parameters *UrlFileNameMatchConditionParameters) AssignProperties_To_UrlFileNameMatchConditionParameters(destination *v20210601s.UrlFileNameMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlPathMatchConditionParameters
type UrlPathMatchConditionParameters struct {
	// MatchValues: The match value for the condition of the delivery rule
	MatchValues []string `json:"matchValues,omitempty"`

	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// Operator: Describes operator to be matched.
	Operator *UrlPathMatchConditionParameters_Operator `json:"operator,omitempty"`

	// Transforms: List of transforms
	Transforms []UrlPathMatchConditionParameters_Transforms `json:"transforms,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *UrlPathMatchConditionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlPathMatchConditionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *UrlPathMatchConditionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &UrlPathMatchConditionParameters_ARM{}

	// Set property ‘MatchValues’:
	for _, item := range parameters.MatchValues {
		result.MatchValues = append(result.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if parameters.Operator != nil {
		operator := *parameters.Operator
		result.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range parameters.Transforms {
		result.Transforms = append(result.Transforms, item)
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *UrlPathMatchConditionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlPathMatchConditionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *UrlPathMatchConditionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlPathMatchConditionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlPathMatchConditionParameters_ARM, got %T", armInput)
	}

	// Set property ‘MatchValues’:
	for _, item := range typedInput.MatchValues {
		parameters.MatchValues = append(parameters.MatchValues, item)
	}

	// Set property ‘NegateCondition’:
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		parameters.NegateCondition = &negateCondition
	}

	// Set property ‘Operator’:
	if typedInput.Operator != nil {
		operator := *typedInput.Operator
		parameters.Operator = &operator
	}

	// Set property ‘Transforms’:
	for _, item := range typedInput.Transforms {
		parameters.Transforms = append(parameters.Transforms, item)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_UrlPathMatchConditionParameters populates our UrlPathMatchConditionParameters from the provided source UrlPathMatchConditionParameters
func (parameters *UrlPathMatchConditionParameters) AssignProperties_From_UrlPathMatchConditionParameters(source *v20210601s.UrlPathMatchConditionParameters) error {

	// MatchValues
	parameters.MatchValues = genruntime.CloneSliceOfString(source.MatchValues)

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		parameters.NegateCondition = &negateCondition
	} else {
		parameters.NegateCondition = nil
	}

	// Operator
	if source.Operator != nil {
		operator := UrlPathMatchConditionParameters_Operator(*source.Operator)
		parameters.Operator = &operator
	} else {
		parameters.Operator = nil
	}

	// Transforms
	if source.Transforms != nil {
		transformList := make([]UrlPathMatchConditionParameters_Transforms, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = UrlPathMatchConditionParameters_Transforms(transformItem)
		}
		parameters.Transforms = transformList
	} else {
		parameters.Transforms = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := UrlPathMatchConditionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlPathMatchConditionParameters populates the provided destination UrlPathMatchConditionParameters from our UrlPathMatchConditionParameters
func (parameters *UrlPathMatchConditionParameters) AssignProperties_To_UrlPathMatchConditionParameters(destination *v20210601s.UrlPathMatchConditionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MatchValues
	destination.MatchValues = genruntime.CloneSliceOfString(parameters.MatchValues)

	// NegateCondition
	if parameters.NegateCondition != nil {
		negateCondition := *parameters.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// Operator
	if parameters.Operator != nil {
		operator := string(*parameters.Operator)
		destination.Operator = &operator
	} else {
		destination.Operator = nil
	}

	// Transforms
	if parameters.Transforms != nil {
		transformList := make([]string, len(parameters.Transforms))
		for transformIndex, transformItem := range parameters.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"UrlRedirect"}
type UrlRedirectAction_Name string

const UrlRedirectAction_Name_UrlRedirect = UrlRedirectAction_Name("UrlRedirect")

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlRedirectActionParameters
type UrlRedirectActionParameters struct {
	// CustomFragment: Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include
	// the #.
	CustomFragment *string `json:"customFragment,omitempty"`

	// CustomHostname: Host to redirect. Leave empty to use the incoming host as the destination host.
	CustomHostname *string `json:"customHostname,omitempty"`

	// CustomPath: The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path
	// as destination path.
	CustomPath *string `json:"customPath,omitempty"`

	// CustomQueryString: The set of query strings to be placed in the redirect URL. Setting this value would replace any
	// existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format.
	// ? and & will be added automatically so do not include them.
	CustomQueryString *string `json:"customQueryString,omitempty"`

	// DestinationProtocol: Protocol to use for the redirect. The default value is MatchRequest.
	DestinationProtocol *UrlRedirectActionParameters_DestinationProtocol `json:"destinationProtocol,omitempty"`

	// +kubebuilder:validation:Required
	// RedirectType: The redirect type the rule will use when redirecting traffic.
	RedirectType *UrlRedirectActionParameters_RedirectType `json:"redirectType,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *UrlRedirectActionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlRedirectActionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *UrlRedirectActionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &UrlRedirectActionParameters_ARM{}

	// Set property ‘CustomFragment’:
	if parameters.CustomFragment != nil {
		customFragment := *parameters.CustomFragment
		result.CustomFragment = &customFragment
	}

	// Set property ‘CustomHostname’:
	if parameters.CustomHostname != nil {
		customHostname := *parameters.CustomHostname
		result.CustomHostname = &customHostname
	}

	// Set property ‘CustomPath’:
	if parameters.CustomPath != nil {
		customPath := *parameters.CustomPath
		result.CustomPath = &customPath
	}

	// Set property ‘CustomQueryString’:
	if parameters.CustomQueryString != nil {
		customQueryString := *parameters.CustomQueryString
		result.CustomQueryString = &customQueryString
	}

	// Set property ‘DestinationProtocol’:
	if parameters.DestinationProtocol != nil {
		destinationProtocol := *parameters.DestinationProtocol
		result.DestinationProtocol = &destinationProtocol
	}

	// Set property ‘RedirectType’:
	if parameters.RedirectType != nil {
		redirectType := *parameters.RedirectType
		result.RedirectType = &redirectType
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *UrlRedirectActionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlRedirectActionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *UrlRedirectActionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlRedirectActionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlRedirectActionParameters_ARM, got %T", armInput)
	}

	// Set property ‘CustomFragment’:
	if typedInput.CustomFragment != nil {
		customFragment := *typedInput.CustomFragment
		parameters.CustomFragment = &customFragment
	}

	// Set property ‘CustomHostname’:
	if typedInput.CustomHostname != nil {
		customHostname := *typedInput.CustomHostname
		parameters.CustomHostname = &customHostname
	}

	// Set property ‘CustomPath’:
	if typedInput.CustomPath != nil {
		customPath := *typedInput.CustomPath
		parameters.CustomPath = &customPath
	}

	// Set property ‘CustomQueryString’:
	if typedInput.CustomQueryString != nil {
		customQueryString := *typedInput.CustomQueryString
		parameters.CustomQueryString = &customQueryString
	}

	// Set property ‘DestinationProtocol’:
	if typedInput.DestinationProtocol != nil {
		destinationProtocol := *typedInput.DestinationProtocol
		parameters.DestinationProtocol = &destinationProtocol
	}

	// Set property ‘RedirectType’:
	if typedInput.RedirectType != nil {
		redirectType := *typedInput.RedirectType
		parameters.RedirectType = &redirectType
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_UrlRedirectActionParameters populates our UrlRedirectActionParameters from the provided source UrlRedirectActionParameters
func (parameters *UrlRedirectActionParameters) AssignProperties_From_UrlRedirectActionParameters(source *v20210601s.UrlRedirectActionParameters) error {

	// CustomFragment
	parameters.CustomFragment = genruntime.ClonePointerToString(source.CustomFragment)

	// CustomHostname
	parameters.CustomHostname = genruntime.ClonePointerToString(source.CustomHostname)

	// CustomPath
	parameters.CustomPath = genruntime.ClonePointerToString(source.CustomPath)

	// CustomQueryString
	parameters.CustomQueryString = genruntime.ClonePointerToString(source.CustomQueryString)

	// DestinationProtocol
	if source.DestinationProtocol != nil {
		destinationProtocol := UrlRedirectActionParameters_DestinationProtocol(*source.DestinationProtocol)
		parameters.DestinationProtocol = &destinationProtocol
	} else {
		parameters.DestinationProtocol = nil
	}

	// RedirectType
	if source.RedirectType != nil {
		redirectType := UrlRedirectActionParameters_RedirectType(*source.RedirectType)
		parameters.RedirectType = &redirectType
	} else {
		parameters.RedirectType = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := UrlRedirectActionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlRedirectActionParameters populates the provided destination UrlRedirectActionParameters from our UrlRedirectActionParameters
func (parameters *UrlRedirectActionParameters) AssignProperties_To_UrlRedirectActionParameters(destination *v20210601s.UrlRedirectActionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CustomFragment
	destination.CustomFragment = genruntime.ClonePointerToString(parameters.CustomFragment)

	// CustomHostname
	destination.CustomHostname = genruntime.ClonePointerToString(parameters.CustomHostname)

	// CustomPath
	destination.CustomPath = genruntime.ClonePointerToString(parameters.CustomPath)

	// CustomQueryString
	destination.CustomQueryString = genruntime.ClonePointerToString(parameters.CustomQueryString)

	// DestinationProtocol
	if parameters.DestinationProtocol != nil {
		destinationProtocol := string(*parameters.DestinationProtocol)
		destination.DestinationProtocol = &destinationProtocol
	} else {
		destination.DestinationProtocol = nil
	}

	// RedirectType
	if parameters.RedirectType != nil {
		redirectType := string(*parameters.RedirectType)
		destination.RedirectType = &redirectType
	} else {
		destination.RedirectType = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"UrlRewrite"}
type UrlRewriteAction_Name string

const UrlRewriteAction_Name_UrlRewrite = UrlRewriteAction_Name("UrlRewrite")

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlRewriteActionParameters
type UrlRewriteActionParameters struct {
	// +kubebuilder:validation:Required
	// Destination: Define the relative URL to which the above requests will be rewritten by.
	Destination *string `json:"destination,omitempty"`

	// PreserveUnmatchedPath: Whether to preserve unmatched path. Default value is true.
	PreserveUnmatchedPath *bool `json:"preserveUnmatchedPath,omitempty"`

	// +kubebuilder:validation:Required
	// SourcePattern: define a request URI pattern that identifies the type of requests that may be rewritten. If value is
	// blank, all strings are matched.
	SourcePattern *string `json:"sourcePattern,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *UrlRewriteActionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlRewriteActionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *UrlRewriteActionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &UrlRewriteActionParameters_ARM{}

	// Set property ‘Destination’:
	if parameters.Destination != nil {
		destination := *parameters.Destination
		result.Destination = &destination
	}

	// Set property ‘PreserveUnmatchedPath’:
	if parameters.PreserveUnmatchedPath != nil {
		preserveUnmatchedPath := *parameters.PreserveUnmatchedPath
		result.PreserveUnmatchedPath = &preserveUnmatchedPath
	}

	// Set property ‘SourcePattern’:
	if parameters.SourcePattern != nil {
		sourcePattern := *parameters.SourcePattern
		result.SourcePattern = &sourcePattern
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *UrlRewriteActionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlRewriteActionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *UrlRewriteActionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlRewriteActionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlRewriteActionParameters_ARM, got %T", armInput)
	}

	// Set property ‘Destination’:
	if typedInput.Destination != nil {
		destination := *typedInput.Destination
		parameters.Destination = &destination
	}

	// Set property ‘PreserveUnmatchedPath’:
	if typedInput.PreserveUnmatchedPath != nil {
		preserveUnmatchedPath := *typedInput.PreserveUnmatchedPath
		parameters.PreserveUnmatchedPath = &preserveUnmatchedPath
	}

	// Set property ‘SourcePattern’:
	if typedInput.SourcePattern != nil {
		sourcePattern := *typedInput.SourcePattern
		parameters.SourcePattern = &sourcePattern
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_UrlRewriteActionParameters populates our UrlRewriteActionParameters from the provided source UrlRewriteActionParameters
func (parameters *UrlRewriteActionParameters) AssignProperties_From_UrlRewriteActionParameters(source *v20210601s.UrlRewriteActionParameters) error {

	// Destination
	parameters.Destination = genruntime.ClonePointerToString(source.Destination)

	// PreserveUnmatchedPath
	if source.PreserveUnmatchedPath != nil {
		preserveUnmatchedPath := *source.PreserveUnmatchedPath
		parameters.PreserveUnmatchedPath = &preserveUnmatchedPath
	} else {
		parameters.PreserveUnmatchedPath = nil
	}

	// SourcePattern
	parameters.SourcePattern = genruntime.ClonePointerToString(source.SourcePattern)

	// TypeName
	if source.TypeName != nil {
		typeName := UrlRewriteActionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlRewriteActionParameters populates the provided destination UrlRewriteActionParameters from our UrlRewriteActionParameters
func (parameters *UrlRewriteActionParameters) AssignProperties_To_UrlRewriteActionParameters(destination *v20210601s.UrlRewriteActionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Destination
	destination.Destination = genruntime.ClonePointerToString(parameters.Destination)

	// PreserveUnmatchedPath
	if parameters.PreserveUnmatchedPath != nil {
		preserveUnmatchedPath := *parameters.PreserveUnmatchedPath
		destination.PreserveUnmatchedPath = &preserveUnmatchedPath
	} else {
		destination.PreserveUnmatchedPath = nil
	}

	// SourcePattern
	destination.SourcePattern = genruntime.ClonePointerToString(parameters.SourcePattern)

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"UrlSigning"}
type UrlSigningAction_Name string

const UrlSigningAction_Name_UrlSigning = UrlSigningAction_Name("UrlSigning")

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlSigningActionParameters
type UrlSigningActionParameters struct {
	// Algorithm: Algorithm to use for URL signing.
	Algorithm *UrlSigningActionParameters_Algorithm `json:"algorithm,omitempty"`

	// ParameterNameOverride: Defines which query string parameters in the url to be considered for expires, key id etc.
	ParameterNameOverride []UrlSigningParamIdentifier `json:"parameterNameOverride,omitempty"`

	// +kubebuilder:validation:Required
	TypeName *UrlSigningActionParameters_TypeName `json:"typeName,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlSigningActionParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *UrlSigningActionParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &UrlSigningActionParameters_ARM{}

	// Set property ‘Algorithm’:
	if parameters.Algorithm != nil {
		algorithm := *parameters.Algorithm
		result.Algorithm = &algorithm
	}

	// Set property ‘ParameterNameOverride’:
	for _, item := range parameters.ParameterNameOverride {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.ParameterNameOverride = append(result.ParameterNameOverride, *item_ARM.(*UrlSigningParamIdentifier_ARM))
	}

	// Set property ‘TypeName’:
	if parameters.TypeName != nil {
		typeName := *parameters.TypeName
		result.TypeName = &typeName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *UrlSigningActionParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlSigningActionParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *UrlSigningActionParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlSigningActionParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlSigningActionParameters_ARM, got %T", armInput)
	}

	// Set property ‘Algorithm’:
	if typedInput.Algorithm != nil {
		algorithm := *typedInput.Algorithm
		parameters.Algorithm = &algorithm
	}

	// Set property ‘ParameterNameOverride’:
	for _, item := range typedInput.ParameterNameOverride {
		var item1 UrlSigningParamIdentifier
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		parameters.ParameterNameOverride = append(parameters.ParameterNameOverride, item1)
	}

	// Set property ‘TypeName’:
	if typedInput.TypeName != nil {
		typeName := *typedInput.TypeName
		parameters.TypeName = &typeName
	}

	// No error
	return nil
}

// AssignProperties_From_UrlSigningActionParameters populates our UrlSigningActionParameters from the provided source UrlSigningActionParameters
func (parameters *UrlSigningActionParameters) AssignProperties_From_UrlSigningActionParameters(source *v20210601s.UrlSigningActionParameters) error {

	// Algorithm
	if source.Algorithm != nil {
		algorithm := UrlSigningActionParameters_Algorithm(*source.Algorithm)
		parameters.Algorithm = &algorithm
	} else {
		parameters.Algorithm = nil
	}

	// ParameterNameOverride
	if source.ParameterNameOverride != nil {
		parameterNameOverrideList := make([]UrlSigningParamIdentifier, len(source.ParameterNameOverride))
		for parameterNameOverrideIndex, parameterNameOverrideItem := range source.ParameterNameOverride {
			// Shadow the loop variable to avoid aliasing
			parameterNameOverrideItem := parameterNameOverrideItem
			var parameterNameOverride UrlSigningParamIdentifier
			err := parameterNameOverride.AssignProperties_From_UrlSigningParamIdentifier(&parameterNameOverrideItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_UrlSigningParamIdentifier() to populate field ParameterNameOverride")
			}
			parameterNameOverrideList[parameterNameOverrideIndex] = parameterNameOverride
		}
		parameters.ParameterNameOverride = parameterNameOverrideList
	} else {
		parameters.ParameterNameOverride = nil
	}

	// TypeName
	if source.TypeName != nil {
		typeName := UrlSigningActionParameters_TypeName(*source.TypeName)
		parameters.TypeName = &typeName
	} else {
		parameters.TypeName = nil
	}

	// No error
	return nil
}

// AssignProperties_To_UrlSigningActionParameters populates the provided destination UrlSigningActionParameters from our UrlSigningActionParameters
func (parameters *UrlSigningActionParameters) AssignProperties_To_UrlSigningActionParameters(destination *v20210601s.UrlSigningActionParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Algorithm
	if parameters.Algorithm != nil {
		algorithm := string(*parameters.Algorithm)
		destination.Algorithm = &algorithm
	} else {
		destination.Algorithm = nil
	}

	// ParameterNameOverride
	if parameters.ParameterNameOverride != nil {
		parameterNameOverrideList := make([]v20210601s.UrlSigningParamIdentifier, len(parameters.ParameterNameOverride))
		for parameterNameOverrideIndex, parameterNameOverrideItem := range parameters.ParameterNameOverride {
			// Shadow the loop variable to avoid aliasing
			parameterNameOverrideItem := parameterNameOverrideItem
			var parameterNameOverride v20210601s.UrlSigningParamIdentifier
			err := parameterNameOverrideItem.AssignProperties_To_UrlSigningParamIdentifier(&parameterNameOverride)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_UrlSigningParamIdentifier() to populate field ParameterNameOverride")
			}
			parameterNameOverrideList[parameterNameOverrideIndex] = parameterNameOverride
		}
		destination.ParameterNameOverride = parameterNameOverrideList
	} else {
		destination.ParameterNameOverride = nil
	}

	// TypeName
	if parameters.TypeName != nil {
		typeName := string(*parameters.TypeName)
		destination.TypeName = &typeName
	} else {
		destination.TypeName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/CacheConfiguration
type CacheConfiguration struct {
	// CacheBehavior: Caching behavior for the requests.
	CacheBehavior *CacheConfiguration_CacheBehavior `json:"cacheBehavior,omitempty"`

	// CacheDuration: The duration for which the content needs to be cached. Allowed format is [d.]hh:mm:ss
	CacheDuration *string `json:"cacheDuration,omitempty"`

	// IsCompressionEnabled: Indicates whether content compression is enabled. If compression is enabled, content will be
	// served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when
	// requested content is smaller than 1 byte or larger than 1 MB.
	IsCompressionEnabled *CacheConfiguration_IsCompressionEnabled `json:"isCompressionEnabled,omitempty"`

	// QueryParameters: query parameters to include or exclude (comma separated).
	QueryParameters *string `json:"queryParameters,omitempty"`

	// QueryStringCachingBehavior: Defines how Frontdoor caches requests that include query strings. You can ignore any query
	// strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query
	// strings.
	QueryStringCachingBehavior *CacheConfiguration_QueryStringCachingBehavior `json:"queryStringCachingBehavior,omitempty"`
}

var _ genruntime.ARMTransformer = &CacheConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (configuration *CacheConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if configuration == nil {
		return nil, nil
	}
	result := &CacheConfiguration_ARM{}

	// Set property ‘CacheBehavior’:
	if configuration.CacheBehavior != nil {
		cacheBehavior := *configuration.CacheBehavior
		result.CacheBehavior = &cacheBehavior
	}

	// Set property ‘CacheDuration’:
	if configuration.CacheDuration != nil {
		cacheDuration := *configuration.CacheDuration
		result.CacheDuration = &cacheDuration
	}

	// Set property ‘IsCompressionEnabled’:
	if configuration.IsCompressionEnabled != nil {
		isCompressionEnabled := *configuration.IsCompressionEnabled
		result.IsCompressionEnabled = &isCompressionEnabled
	}

	// Set property ‘QueryParameters’:
	if configuration.QueryParameters != nil {
		queryParameters := *configuration.QueryParameters
		result.QueryParameters = &queryParameters
	}

	// Set property ‘QueryStringCachingBehavior’:
	if configuration.QueryStringCachingBehavior != nil {
		queryStringCachingBehavior := *configuration.QueryStringCachingBehavior
		result.QueryStringCachingBehavior = &queryStringCachingBehavior
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (configuration *CacheConfiguration) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &CacheConfiguration_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (configuration *CacheConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CacheConfiguration_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CacheConfiguration_ARM, got %T", armInput)
	}

	// Set property ‘CacheBehavior’:
	if typedInput.CacheBehavior != nil {
		cacheBehavior := *typedInput.CacheBehavior
		configuration.CacheBehavior = &cacheBehavior
	}

	// Set property ‘CacheDuration’:
	if typedInput.CacheDuration != nil {
		cacheDuration := *typedInput.CacheDuration
		configuration.CacheDuration = &cacheDuration
	}

	// Set property ‘IsCompressionEnabled’:
	if typedInput.IsCompressionEnabled != nil {
		isCompressionEnabled := *typedInput.IsCompressionEnabled
		configuration.IsCompressionEnabled = &isCompressionEnabled
	}

	// Set property ‘QueryParameters’:
	if typedInput.QueryParameters != nil {
		queryParameters := *typedInput.QueryParameters
		configuration.QueryParameters = &queryParameters
	}

	// Set property ‘QueryStringCachingBehavior’:
	if typedInput.QueryStringCachingBehavior != nil {
		queryStringCachingBehavior := *typedInput.QueryStringCachingBehavior
		configuration.QueryStringCachingBehavior = &queryStringCachingBehavior
	}

	// No error
	return nil
}

// AssignProperties_From_CacheConfiguration populates our CacheConfiguration from the provided source CacheConfiguration
func (configuration *CacheConfiguration) AssignProperties_From_CacheConfiguration(source *v20210601s.CacheConfiguration) error {

	// CacheBehavior
	if source.CacheBehavior != nil {
		cacheBehavior := CacheConfiguration_CacheBehavior(*source.CacheBehavior)
		configuration.CacheBehavior = &cacheBehavior
	} else {
		configuration.CacheBehavior = nil
	}

	// CacheDuration
	configuration.CacheDuration = genruntime.ClonePointerToString(source.CacheDuration)

	// IsCompressionEnabled
	if source.IsCompressionEnabled != nil {
		isCompressionEnabled := CacheConfiguration_IsCompressionEnabled(*source.IsCompressionEnabled)
		configuration.IsCompressionEnabled = &isCompressionEnabled
	} else {
		configuration.IsCompressionEnabled = nil
	}

	// QueryParameters
	configuration.QueryParameters = genruntime.ClonePointerToString(source.QueryParameters)

	// QueryStringCachingBehavior
	if source.QueryStringCachingBehavior != nil {
		queryStringCachingBehavior := CacheConfiguration_QueryStringCachingBehavior(*source.QueryStringCachingBehavior)
		configuration.QueryStringCachingBehavior = &queryStringCachingBehavior
	} else {
		configuration.QueryStringCachingBehavior = nil
	}

	// No error
	return nil
}

// AssignProperties_To_CacheConfiguration populates the provided destination CacheConfiguration from our CacheConfiguration
func (configuration *CacheConfiguration) AssignProperties_To_CacheConfiguration(destination *v20210601s.CacheConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CacheBehavior
	if configuration.CacheBehavior != nil {
		cacheBehavior := string(*configuration.CacheBehavior)
		destination.CacheBehavior = &cacheBehavior
	} else {
		destination.CacheBehavior = nil
	}

	// CacheDuration
	destination.CacheDuration = genruntime.ClonePointerToString(configuration.CacheDuration)

	// IsCompressionEnabled
	if configuration.IsCompressionEnabled != nil {
		isCompressionEnabled := string(*configuration.IsCompressionEnabled)
		destination.IsCompressionEnabled = &isCompressionEnabled
	} else {
		destination.IsCompressionEnabled = nil
	}

	// QueryParameters
	destination.QueryParameters = genruntime.ClonePointerToString(configuration.QueryParameters)

	// QueryStringCachingBehavior
	if configuration.QueryStringCachingBehavior != nil {
		queryStringCachingBehavior := string(*configuration.QueryStringCachingBehavior)
		destination.QueryStringCachingBehavior = &queryStringCachingBehavior
	} else {
		destination.QueryStringCachingBehavior = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"BypassCache","Override","SetIfMissing"}
type CacheExpirationActionParameters_CacheBehavior string

const (
	CacheExpirationActionParameters_CacheBehavior_BypassCache  = CacheExpirationActionParameters_CacheBehavior("BypassCache")
	CacheExpirationActionParameters_CacheBehavior_Override     = CacheExpirationActionParameters_CacheBehavior("Override")
	CacheExpirationActionParameters_CacheBehavior_SetIfMissing = CacheExpirationActionParameters_CacheBehavior("SetIfMissing")
)

// +kubebuilder:validation:Enum={"All"}
type CacheExpirationActionParameters_CacheType string

const CacheExpirationActionParameters_CacheType_All = CacheExpirationActionParameters_CacheType("All")

// +kubebuilder:validation:Enum={"DeliveryRuleCacheExpirationActionParameters"}
type CacheExpirationActionParameters_TypeName string

const CacheExpirationActionParameters_TypeName_DeliveryRuleCacheExpirationActionParameters = CacheExpirationActionParameters_TypeName("DeliveryRuleCacheExpirationActionParameters")

// +kubebuilder:validation:Enum={"Exclude","ExcludeAll","Include","IncludeAll"}
type CacheKeyQueryStringActionParameters_QueryStringBehavior string

const (
	CacheKeyQueryStringActionParameters_QueryStringBehavior_Exclude    = CacheKeyQueryStringActionParameters_QueryStringBehavior("Exclude")
	CacheKeyQueryStringActionParameters_QueryStringBehavior_ExcludeAll = CacheKeyQueryStringActionParameters_QueryStringBehavior("ExcludeAll")
	CacheKeyQueryStringActionParameters_QueryStringBehavior_Include    = CacheKeyQueryStringActionParameters_QueryStringBehavior("Include")
	CacheKeyQueryStringActionParameters_QueryStringBehavior_IncludeAll = CacheKeyQueryStringActionParameters_QueryStringBehavior("IncludeAll")
)

// +kubebuilder:validation:Enum={"DeliveryRuleCacheKeyQueryStringBehaviorActionParameters"}
type CacheKeyQueryStringActionParameters_TypeName string

const CacheKeyQueryStringActionParameters_TypeName_DeliveryRuleCacheKeyQueryStringBehaviorActionParameters = CacheKeyQueryStringActionParameters_TypeName("DeliveryRuleCacheKeyQueryStringBehaviorActionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type ClientPortMatchConditionParameters_Operator string

const (
	ClientPortMatchConditionParameters_Operator_Any                = ClientPortMatchConditionParameters_Operator("Any")
	ClientPortMatchConditionParameters_Operator_BeginsWith         = ClientPortMatchConditionParameters_Operator("BeginsWith")
	ClientPortMatchConditionParameters_Operator_Contains           = ClientPortMatchConditionParameters_Operator("Contains")
	ClientPortMatchConditionParameters_Operator_EndsWith           = ClientPortMatchConditionParameters_Operator("EndsWith")
	ClientPortMatchConditionParameters_Operator_Equal              = ClientPortMatchConditionParameters_Operator("Equal")
	ClientPortMatchConditionParameters_Operator_GreaterThan        = ClientPortMatchConditionParameters_Operator("GreaterThan")
	ClientPortMatchConditionParameters_Operator_GreaterThanOrEqual = ClientPortMatchConditionParameters_Operator("GreaterThanOrEqual")
	ClientPortMatchConditionParameters_Operator_LessThan           = ClientPortMatchConditionParameters_Operator("LessThan")
	ClientPortMatchConditionParameters_Operator_LessThanOrEqual    = ClientPortMatchConditionParameters_Operator("LessThanOrEqual")
	ClientPortMatchConditionParameters_Operator_RegEx              = ClientPortMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type ClientPortMatchConditionParameters_Transforms string

const (
	ClientPortMatchConditionParameters_Transforms_Lowercase   = ClientPortMatchConditionParameters_Transforms("Lowercase")
	ClientPortMatchConditionParameters_Transforms_RemoveNulls = ClientPortMatchConditionParameters_Transforms("RemoveNulls")
	ClientPortMatchConditionParameters_Transforms_Trim        = ClientPortMatchConditionParameters_Transforms("Trim")
	ClientPortMatchConditionParameters_Transforms_Uppercase   = ClientPortMatchConditionParameters_Transforms("Uppercase")
	ClientPortMatchConditionParameters_Transforms_UrlDecode   = ClientPortMatchConditionParameters_Transforms("UrlDecode")
	ClientPortMatchConditionParameters_Transforms_UrlEncode   = ClientPortMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleClientPortConditionParameters"}
type ClientPortMatchConditionParameters_TypeName string

const ClientPortMatchConditionParameters_TypeName_DeliveryRuleClientPortConditionParameters = ClientPortMatchConditionParameters_TypeName("DeliveryRuleClientPortConditionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type CookiesMatchConditionParameters_Operator string

const (
	CookiesMatchConditionParameters_Operator_Any                = CookiesMatchConditionParameters_Operator("Any")
	CookiesMatchConditionParameters_Operator_BeginsWith         = CookiesMatchConditionParameters_Operator("BeginsWith")
	CookiesMatchConditionParameters_Operator_Contains           = CookiesMatchConditionParameters_Operator("Contains")
	CookiesMatchConditionParameters_Operator_EndsWith           = CookiesMatchConditionParameters_Operator("EndsWith")
	CookiesMatchConditionParameters_Operator_Equal              = CookiesMatchConditionParameters_Operator("Equal")
	CookiesMatchConditionParameters_Operator_GreaterThan        = CookiesMatchConditionParameters_Operator("GreaterThan")
	CookiesMatchConditionParameters_Operator_GreaterThanOrEqual = CookiesMatchConditionParameters_Operator("GreaterThanOrEqual")
	CookiesMatchConditionParameters_Operator_LessThan           = CookiesMatchConditionParameters_Operator("LessThan")
	CookiesMatchConditionParameters_Operator_LessThanOrEqual    = CookiesMatchConditionParameters_Operator("LessThanOrEqual")
	CookiesMatchConditionParameters_Operator_RegEx              = CookiesMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type CookiesMatchConditionParameters_Transforms string

const (
	CookiesMatchConditionParameters_Transforms_Lowercase   = CookiesMatchConditionParameters_Transforms("Lowercase")
	CookiesMatchConditionParameters_Transforms_RemoveNulls = CookiesMatchConditionParameters_Transforms("RemoveNulls")
	CookiesMatchConditionParameters_Transforms_Trim        = CookiesMatchConditionParameters_Transforms("Trim")
	CookiesMatchConditionParameters_Transforms_Uppercase   = CookiesMatchConditionParameters_Transforms("Uppercase")
	CookiesMatchConditionParameters_Transforms_UrlDecode   = CookiesMatchConditionParameters_Transforms("UrlDecode")
	CookiesMatchConditionParameters_Transforms_UrlEncode   = CookiesMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleCookiesConditionParameters"}
type CookiesMatchConditionParameters_TypeName string

const CookiesMatchConditionParameters_TypeName_DeliveryRuleCookiesConditionParameters = CookiesMatchConditionParameters_TypeName("DeliveryRuleCookiesConditionParameters")

// +kubebuilder:validation:Enum={"Append","Delete","Overwrite"}
type HeaderActionParameters_HeaderAction string

const (
	HeaderActionParameters_HeaderAction_Append    = HeaderActionParameters_HeaderAction("Append")
	HeaderActionParameters_HeaderAction_Delete    = HeaderActionParameters_HeaderAction("Delete")
	HeaderActionParameters_HeaderAction_Overwrite = HeaderActionParameters_HeaderAction("Overwrite")
)

// +kubebuilder:validation:Enum={"DeliveryRuleHeaderActionParameters"}
type HeaderActionParameters_TypeName string

const HeaderActionParameters_TypeName_DeliveryRuleHeaderActionParameters = HeaderActionParameters_TypeName("DeliveryRuleHeaderActionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type HostNameMatchConditionParameters_Operator string

const (
	HostNameMatchConditionParameters_Operator_Any                = HostNameMatchConditionParameters_Operator("Any")
	HostNameMatchConditionParameters_Operator_BeginsWith         = HostNameMatchConditionParameters_Operator("BeginsWith")
	HostNameMatchConditionParameters_Operator_Contains           = HostNameMatchConditionParameters_Operator("Contains")
	HostNameMatchConditionParameters_Operator_EndsWith           = HostNameMatchConditionParameters_Operator("EndsWith")
	HostNameMatchConditionParameters_Operator_Equal              = HostNameMatchConditionParameters_Operator("Equal")
	HostNameMatchConditionParameters_Operator_GreaterThan        = HostNameMatchConditionParameters_Operator("GreaterThan")
	HostNameMatchConditionParameters_Operator_GreaterThanOrEqual = HostNameMatchConditionParameters_Operator("GreaterThanOrEqual")
	HostNameMatchConditionParameters_Operator_LessThan           = HostNameMatchConditionParameters_Operator("LessThan")
	HostNameMatchConditionParameters_Operator_LessThanOrEqual    = HostNameMatchConditionParameters_Operator("LessThanOrEqual")
	HostNameMatchConditionParameters_Operator_RegEx              = HostNameMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type HostNameMatchConditionParameters_Transforms string

const (
	HostNameMatchConditionParameters_Transforms_Lowercase   = HostNameMatchConditionParameters_Transforms("Lowercase")
	HostNameMatchConditionParameters_Transforms_RemoveNulls = HostNameMatchConditionParameters_Transforms("RemoveNulls")
	HostNameMatchConditionParameters_Transforms_Trim        = HostNameMatchConditionParameters_Transforms("Trim")
	HostNameMatchConditionParameters_Transforms_Uppercase   = HostNameMatchConditionParameters_Transforms("Uppercase")
	HostNameMatchConditionParameters_Transforms_UrlDecode   = HostNameMatchConditionParameters_Transforms("UrlDecode")
	HostNameMatchConditionParameters_Transforms_UrlEncode   = HostNameMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleHostNameConditionParameters"}
type HostNameMatchConditionParameters_TypeName string

const HostNameMatchConditionParameters_TypeName_DeliveryRuleHostNameConditionParameters = HostNameMatchConditionParameters_TypeName("DeliveryRuleHostNameConditionParameters")

// +kubebuilder:validation:Enum={"Equal"}
type HttpVersionMatchConditionParameters_Operator string

const HttpVersionMatchConditionParameters_Operator_Equal = HttpVersionMatchConditionParameters_Operator("Equal")

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type HttpVersionMatchConditionParameters_Transforms string

const (
	HttpVersionMatchConditionParameters_Transforms_Lowercase   = HttpVersionMatchConditionParameters_Transforms("Lowercase")
	HttpVersionMatchConditionParameters_Transforms_RemoveNulls = HttpVersionMatchConditionParameters_Transforms("RemoveNulls")
	HttpVersionMatchConditionParameters_Transforms_Trim        = HttpVersionMatchConditionParameters_Transforms("Trim")
	HttpVersionMatchConditionParameters_Transforms_Uppercase   = HttpVersionMatchConditionParameters_Transforms("Uppercase")
	HttpVersionMatchConditionParameters_Transforms_UrlDecode   = HttpVersionMatchConditionParameters_Transforms("UrlDecode")
	HttpVersionMatchConditionParameters_Transforms_UrlEncode   = HttpVersionMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleHttpVersionConditionParameters"}
type HttpVersionMatchConditionParameters_TypeName string

const HttpVersionMatchConditionParameters_TypeName_DeliveryRuleHttpVersionConditionParameters = HttpVersionMatchConditionParameters_TypeName("DeliveryRuleHttpVersionConditionParameters")

// +kubebuilder:validation:Enum={"Desktop","Mobile"}
type IsDeviceMatchConditionParameters_MatchValues string

const (
	IsDeviceMatchConditionParameters_MatchValues_Desktop = IsDeviceMatchConditionParameters_MatchValues("Desktop")
	IsDeviceMatchConditionParameters_MatchValues_Mobile  = IsDeviceMatchConditionParameters_MatchValues("Mobile")
)

// +kubebuilder:validation:Enum={"Equal"}
type IsDeviceMatchConditionParameters_Operator string

const IsDeviceMatchConditionParameters_Operator_Equal = IsDeviceMatchConditionParameters_Operator("Equal")

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type IsDeviceMatchConditionParameters_Transforms string

const (
	IsDeviceMatchConditionParameters_Transforms_Lowercase   = IsDeviceMatchConditionParameters_Transforms("Lowercase")
	IsDeviceMatchConditionParameters_Transforms_RemoveNulls = IsDeviceMatchConditionParameters_Transforms("RemoveNulls")
	IsDeviceMatchConditionParameters_Transforms_Trim        = IsDeviceMatchConditionParameters_Transforms("Trim")
	IsDeviceMatchConditionParameters_Transforms_Uppercase   = IsDeviceMatchConditionParameters_Transforms("Uppercase")
	IsDeviceMatchConditionParameters_Transforms_UrlDecode   = IsDeviceMatchConditionParameters_Transforms("UrlDecode")
	IsDeviceMatchConditionParameters_Transforms_UrlEncode   = IsDeviceMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleIsDeviceConditionParameters"}
type IsDeviceMatchConditionParameters_TypeName string

const IsDeviceMatchConditionParameters_TypeName_DeliveryRuleIsDeviceConditionParameters = IsDeviceMatchConditionParameters_TypeName("DeliveryRuleIsDeviceConditionParameters")

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/OriginGroupOverride
type OriginGroupOverride struct {
	// ForwardingProtocol: Protocol this rule will use when forwarding traffic to backends.
	ForwardingProtocol *OriginGroupOverride_ForwardingProtocol `json:"forwardingProtocol,omitempty"`

	// OriginGroup: Reference to another resource.
	OriginGroup *ResourceReference `json:"originGroup,omitempty"`
}

var _ genruntime.ARMTransformer = &OriginGroupOverride{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (override *OriginGroupOverride) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if override == nil {
		return nil, nil
	}
	result := &OriginGroupOverride_ARM{}

	// Set property ‘ForwardingProtocol’:
	if override.ForwardingProtocol != nil {
		forwardingProtocol := *override.ForwardingProtocol
		result.ForwardingProtocol = &forwardingProtocol
	}

	// Set property ‘OriginGroup’:
	if override.OriginGroup != nil {
		originGroup_ARM, err := (*override.OriginGroup).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		originGroup := *originGroup_ARM.(*ResourceReference_ARM)
		result.OriginGroup = &originGroup
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (override *OriginGroupOverride) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &OriginGroupOverride_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (override *OriginGroupOverride) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OriginGroupOverride_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OriginGroupOverride_ARM, got %T", armInput)
	}

	// Set property ‘ForwardingProtocol’:
	if typedInput.ForwardingProtocol != nil {
		forwardingProtocol := *typedInput.ForwardingProtocol
		override.ForwardingProtocol = &forwardingProtocol
	}

	// Set property ‘OriginGroup’:
	if typedInput.OriginGroup != nil {
		var originGroup1 ResourceReference
		err := originGroup1.PopulateFromARM(owner, *typedInput.OriginGroup)
		if err != nil {
			return err
		}
		originGroup := originGroup1
		override.OriginGroup = &originGroup
	}

	// No error
	return nil
}

// AssignProperties_From_OriginGroupOverride populates our OriginGroupOverride from the provided source OriginGroupOverride
func (override *OriginGroupOverride) AssignProperties_From_OriginGroupOverride(source *v20210601s.OriginGroupOverride) error {

	// ForwardingProtocol
	if source.ForwardingProtocol != nil {
		forwardingProtocol := OriginGroupOverride_ForwardingProtocol(*source.ForwardingProtocol)
		override.ForwardingProtocol = &forwardingProtocol
	} else {
		override.ForwardingProtocol = nil
	}

	// OriginGroup
	if source.OriginGroup != nil {
		var originGroup ResourceReference
		err := originGroup.AssignProperties_From_ResourceReference(source.OriginGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ResourceReference() to populate field OriginGroup")
		}
		override.OriginGroup = &originGroup
	} else {
		override.OriginGroup = nil
	}

	// No error
	return nil
}

// AssignProperties_To_OriginGroupOverride populates the provided destination OriginGroupOverride from our OriginGroupOverride
func (override *OriginGroupOverride) AssignProperties_To_OriginGroupOverride(destination *v20210601s.OriginGroupOverride) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ForwardingProtocol
	if override.ForwardingProtocol != nil {
		forwardingProtocol := string(*override.ForwardingProtocol)
		destination.ForwardingProtocol = &forwardingProtocol
	} else {
		destination.ForwardingProtocol = nil
	}

	// OriginGroup
	if override.OriginGroup != nil {
		var originGroup v20210601s.ResourceReference
		err := override.OriginGroup.AssignProperties_To_ResourceReference(&originGroup)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ResourceReference() to populate field OriginGroup")
		}
		destination.OriginGroup = &originGroup
	} else {
		destination.OriginGroup = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"DeliveryRuleOriginGroupOverrideActionParameters"}
type OriginGroupOverrideActionParameters_TypeName string

const OriginGroupOverrideActionParameters_TypeName_DeliveryRuleOriginGroupOverrideActionParameters = OriginGroupOverrideActionParameters_TypeName("DeliveryRuleOriginGroupOverrideActionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type PostArgsMatchConditionParameters_Operator string

const (
	PostArgsMatchConditionParameters_Operator_Any                = PostArgsMatchConditionParameters_Operator("Any")
	PostArgsMatchConditionParameters_Operator_BeginsWith         = PostArgsMatchConditionParameters_Operator("BeginsWith")
	PostArgsMatchConditionParameters_Operator_Contains           = PostArgsMatchConditionParameters_Operator("Contains")
	PostArgsMatchConditionParameters_Operator_EndsWith           = PostArgsMatchConditionParameters_Operator("EndsWith")
	PostArgsMatchConditionParameters_Operator_Equal              = PostArgsMatchConditionParameters_Operator("Equal")
	PostArgsMatchConditionParameters_Operator_GreaterThan        = PostArgsMatchConditionParameters_Operator("GreaterThan")
	PostArgsMatchConditionParameters_Operator_GreaterThanOrEqual = PostArgsMatchConditionParameters_Operator("GreaterThanOrEqual")
	PostArgsMatchConditionParameters_Operator_LessThan           = PostArgsMatchConditionParameters_Operator("LessThan")
	PostArgsMatchConditionParameters_Operator_LessThanOrEqual    = PostArgsMatchConditionParameters_Operator("LessThanOrEqual")
	PostArgsMatchConditionParameters_Operator_RegEx              = PostArgsMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type PostArgsMatchConditionParameters_Transforms string

const (
	PostArgsMatchConditionParameters_Transforms_Lowercase   = PostArgsMatchConditionParameters_Transforms("Lowercase")
	PostArgsMatchConditionParameters_Transforms_RemoveNulls = PostArgsMatchConditionParameters_Transforms("RemoveNulls")
	PostArgsMatchConditionParameters_Transforms_Trim        = PostArgsMatchConditionParameters_Transforms("Trim")
	PostArgsMatchConditionParameters_Transforms_Uppercase   = PostArgsMatchConditionParameters_Transforms("Uppercase")
	PostArgsMatchConditionParameters_Transforms_UrlDecode   = PostArgsMatchConditionParameters_Transforms("UrlDecode")
	PostArgsMatchConditionParameters_Transforms_UrlEncode   = PostArgsMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRulePostArgsConditionParameters"}
type PostArgsMatchConditionParameters_TypeName string

const PostArgsMatchConditionParameters_TypeName_DeliveryRulePostArgsConditionParameters = PostArgsMatchConditionParameters_TypeName("DeliveryRulePostArgsConditionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type QueryStringMatchConditionParameters_Operator string

const (
	QueryStringMatchConditionParameters_Operator_Any                = QueryStringMatchConditionParameters_Operator("Any")
	QueryStringMatchConditionParameters_Operator_BeginsWith         = QueryStringMatchConditionParameters_Operator("BeginsWith")
	QueryStringMatchConditionParameters_Operator_Contains           = QueryStringMatchConditionParameters_Operator("Contains")
	QueryStringMatchConditionParameters_Operator_EndsWith           = QueryStringMatchConditionParameters_Operator("EndsWith")
	QueryStringMatchConditionParameters_Operator_Equal              = QueryStringMatchConditionParameters_Operator("Equal")
	QueryStringMatchConditionParameters_Operator_GreaterThan        = QueryStringMatchConditionParameters_Operator("GreaterThan")
	QueryStringMatchConditionParameters_Operator_GreaterThanOrEqual = QueryStringMatchConditionParameters_Operator("GreaterThanOrEqual")
	QueryStringMatchConditionParameters_Operator_LessThan           = QueryStringMatchConditionParameters_Operator("LessThan")
	QueryStringMatchConditionParameters_Operator_LessThanOrEqual    = QueryStringMatchConditionParameters_Operator("LessThanOrEqual")
	QueryStringMatchConditionParameters_Operator_RegEx              = QueryStringMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type QueryStringMatchConditionParameters_Transforms string

const (
	QueryStringMatchConditionParameters_Transforms_Lowercase   = QueryStringMatchConditionParameters_Transforms("Lowercase")
	QueryStringMatchConditionParameters_Transforms_RemoveNulls = QueryStringMatchConditionParameters_Transforms("RemoveNulls")
	QueryStringMatchConditionParameters_Transforms_Trim        = QueryStringMatchConditionParameters_Transforms("Trim")
	QueryStringMatchConditionParameters_Transforms_Uppercase   = QueryStringMatchConditionParameters_Transforms("Uppercase")
	QueryStringMatchConditionParameters_Transforms_UrlDecode   = QueryStringMatchConditionParameters_Transforms("UrlDecode")
	QueryStringMatchConditionParameters_Transforms_UrlEncode   = QueryStringMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleQueryStringConditionParameters"}
type QueryStringMatchConditionParameters_TypeName string

const QueryStringMatchConditionParameters_TypeName_DeliveryRuleQueryStringConditionParameters = QueryStringMatchConditionParameters_TypeName("DeliveryRuleQueryStringConditionParameters")

// +kubebuilder:validation:Enum={"Any","GeoMatch","IPMatch"}
type RemoteAddressMatchConditionParameters_Operator string

const (
	RemoteAddressMatchConditionParameters_Operator_Any      = RemoteAddressMatchConditionParameters_Operator("Any")
	RemoteAddressMatchConditionParameters_Operator_GeoMatch = RemoteAddressMatchConditionParameters_Operator("GeoMatch")
	RemoteAddressMatchConditionParameters_Operator_IPMatch  = RemoteAddressMatchConditionParameters_Operator("IPMatch")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type RemoteAddressMatchConditionParameters_Transforms string

const (
	RemoteAddressMatchConditionParameters_Transforms_Lowercase   = RemoteAddressMatchConditionParameters_Transforms("Lowercase")
	RemoteAddressMatchConditionParameters_Transforms_RemoveNulls = RemoteAddressMatchConditionParameters_Transforms("RemoveNulls")
	RemoteAddressMatchConditionParameters_Transforms_Trim        = RemoteAddressMatchConditionParameters_Transforms("Trim")
	RemoteAddressMatchConditionParameters_Transforms_Uppercase   = RemoteAddressMatchConditionParameters_Transforms("Uppercase")
	RemoteAddressMatchConditionParameters_Transforms_UrlDecode   = RemoteAddressMatchConditionParameters_Transforms("UrlDecode")
	RemoteAddressMatchConditionParameters_Transforms_UrlEncode   = RemoteAddressMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleRemoteAddressConditionParameters"}
type RemoteAddressMatchConditionParameters_TypeName string

const RemoteAddressMatchConditionParameters_TypeName_DeliveryRuleRemoteAddressConditionParameters = RemoteAddressMatchConditionParameters_TypeName("DeliveryRuleRemoteAddressConditionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type RequestBodyMatchConditionParameters_Operator string

const (
	RequestBodyMatchConditionParameters_Operator_Any                = RequestBodyMatchConditionParameters_Operator("Any")
	RequestBodyMatchConditionParameters_Operator_BeginsWith         = RequestBodyMatchConditionParameters_Operator("BeginsWith")
	RequestBodyMatchConditionParameters_Operator_Contains           = RequestBodyMatchConditionParameters_Operator("Contains")
	RequestBodyMatchConditionParameters_Operator_EndsWith           = RequestBodyMatchConditionParameters_Operator("EndsWith")
	RequestBodyMatchConditionParameters_Operator_Equal              = RequestBodyMatchConditionParameters_Operator("Equal")
	RequestBodyMatchConditionParameters_Operator_GreaterThan        = RequestBodyMatchConditionParameters_Operator("GreaterThan")
	RequestBodyMatchConditionParameters_Operator_GreaterThanOrEqual = RequestBodyMatchConditionParameters_Operator("GreaterThanOrEqual")
	RequestBodyMatchConditionParameters_Operator_LessThan           = RequestBodyMatchConditionParameters_Operator("LessThan")
	RequestBodyMatchConditionParameters_Operator_LessThanOrEqual    = RequestBodyMatchConditionParameters_Operator("LessThanOrEqual")
	RequestBodyMatchConditionParameters_Operator_RegEx              = RequestBodyMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type RequestBodyMatchConditionParameters_Transforms string

const (
	RequestBodyMatchConditionParameters_Transforms_Lowercase   = RequestBodyMatchConditionParameters_Transforms("Lowercase")
	RequestBodyMatchConditionParameters_Transforms_RemoveNulls = RequestBodyMatchConditionParameters_Transforms("RemoveNulls")
	RequestBodyMatchConditionParameters_Transforms_Trim        = RequestBodyMatchConditionParameters_Transforms("Trim")
	RequestBodyMatchConditionParameters_Transforms_Uppercase   = RequestBodyMatchConditionParameters_Transforms("Uppercase")
	RequestBodyMatchConditionParameters_Transforms_UrlDecode   = RequestBodyMatchConditionParameters_Transforms("UrlDecode")
	RequestBodyMatchConditionParameters_Transforms_UrlEncode   = RequestBodyMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleRequestBodyConditionParameters"}
type RequestBodyMatchConditionParameters_TypeName string

const RequestBodyMatchConditionParameters_TypeName_DeliveryRuleRequestBodyConditionParameters = RequestBodyMatchConditionParameters_TypeName("DeliveryRuleRequestBodyConditionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type RequestHeaderMatchConditionParameters_Operator string

const (
	RequestHeaderMatchConditionParameters_Operator_Any                = RequestHeaderMatchConditionParameters_Operator("Any")
	RequestHeaderMatchConditionParameters_Operator_BeginsWith         = RequestHeaderMatchConditionParameters_Operator("BeginsWith")
	RequestHeaderMatchConditionParameters_Operator_Contains           = RequestHeaderMatchConditionParameters_Operator("Contains")
	RequestHeaderMatchConditionParameters_Operator_EndsWith           = RequestHeaderMatchConditionParameters_Operator("EndsWith")
	RequestHeaderMatchConditionParameters_Operator_Equal              = RequestHeaderMatchConditionParameters_Operator("Equal")
	RequestHeaderMatchConditionParameters_Operator_GreaterThan        = RequestHeaderMatchConditionParameters_Operator("GreaterThan")
	RequestHeaderMatchConditionParameters_Operator_GreaterThanOrEqual = RequestHeaderMatchConditionParameters_Operator("GreaterThanOrEqual")
	RequestHeaderMatchConditionParameters_Operator_LessThan           = RequestHeaderMatchConditionParameters_Operator("LessThan")
	RequestHeaderMatchConditionParameters_Operator_LessThanOrEqual    = RequestHeaderMatchConditionParameters_Operator("LessThanOrEqual")
	RequestHeaderMatchConditionParameters_Operator_RegEx              = RequestHeaderMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type RequestHeaderMatchConditionParameters_Transforms string

const (
	RequestHeaderMatchConditionParameters_Transforms_Lowercase   = RequestHeaderMatchConditionParameters_Transforms("Lowercase")
	RequestHeaderMatchConditionParameters_Transforms_RemoveNulls = RequestHeaderMatchConditionParameters_Transforms("RemoveNulls")
	RequestHeaderMatchConditionParameters_Transforms_Trim        = RequestHeaderMatchConditionParameters_Transforms("Trim")
	RequestHeaderMatchConditionParameters_Transforms_Uppercase   = RequestHeaderMatchConditionParameters_Transforms("Uppercase")
	RequestHeaderMatchConditionParameters_Transforms_UrlDecode   = RequestHeaderMatchConditionParameters_Transforms("UrlDecode")
	RequestHeaderMatchConditionParameters_Transforms_UrlEncode   = RequestHeaderMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleRequestHeaderConditionParameters"}
type RequestHeaderMatchConditionParameters_TypeName string

const RequestHeaderMatchConditionParameters_TypeName_DeliveryRuleRequestHeaderConditionParameters = RequestHeaderMatchConditionParameters_TypeName("DeliveryRuleRequestHeaderConditionParameters")

// +kubebuilder:validation:Enum={"DELETE","GET","HEAD","OPTIONS","POST","PUT","TRACE"}
type RequestMethodMatchConditionParameters_MatchValues string

const (
	RequestMethodMatchConditionParameters_MatchValues_DELETE  = RequestMethodMatchConditionParameters_MatchValues("DELETE")
	RequestMethodMatchConditionParameters_MatchValues_GET     = RequestMethodMatchConditionParameters_MatchValues("GET")
	RequestMethodMatchConditionParameters_MatchValues_HEAD    = RequestMethodMatchConditionParameters_MatchValues("HEAD")
	RequestMethodMatchConditionParameters_MatchValues_OPTIONS = RequestMethodMatchConditionParameters_MatchValues("OPTIONS")
	RequestMethodMatchConditionParameters_MatchValues_POST    = RequestMethodMatchConditionParameters_MatchValues("POST")
	RequestMethodMatchConditionParameters_MatchValues_PUT     = RequestMethodMatchConditionParameters_MatchValues("PUT")
	RequestMethodMatchConditionParameters_MatchValues_TRACE   = RequestMethodMatchConditionParameters_MatchValues("TRACE")
)

// +kubebuilder:validation:Enum={"Equal"}
type RequestMethodMatchConditionParameters_Operator string

const RequestMethodMatchConditionParameters_Operator_Equal = RequestMethodMatchConditionParameters_Operator("Equal")

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type RequestMethodMatchConditionParameters_Transforms string

const (
	RequestMethodMatchConditionParameters_Transforms_Lowercase   = RequestMethodMatchConditionParameters_Transforms("Lowercase")
	RequestMethodMatchConditionParameters_Transforms_RemoveNulls = RequestMethodMatchConditionParameters_Transforms("RemoveNulls")
	RequestMethodMatchConditionParameters_Transforms_Trim        = RequestMethodMatchConditionParameters_Transforms("Trim")
	RequestMethodMatchConditionParameters_Transforms_Uppercase   = RequestMethodMatchConditionParameters_Transforms("Uppercase")
	RequestMethodMatchConditionParameters_Transforms_UrlDecode   = RequestMethodMatchConditionParameters_Transforms("UrlDecode")
	RequestMethodMatchConditionParameters_Transforms_UrlEncode   = RequestMethodMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleRequestMethodConditionParameters"}
type RequestMethodMatchConditionParameters_TypeName string

const RequestMethodMatchConditionParameters_TypeName_DeliveryRuleRequestMethodConditionParameters = RequestMethodMatchConditionParameters_TypeName("DeliveryRuleRequestMethodConditionParameters")

// +kubebuilder:validation:Enum={"HTTP","HTTPS"}
type RequestSchemeMatchConditionParameters_MatchValues string

const (
	RequestSchemeMatchConditionParameters_MatchValues_HTTP  = RequestSchemeMatchConditionParameters_MatchValues("HTTP")
	RequestSchemeMatchConditionParameters_MatchValues_HTTPS = RequestSchemeMatchConditionParameters_MatchValues("HTTPS")
)

// +kubebuilder:validation:Enum={"Equal"}
type RequestSchemeMatchConditionParameters_Operator string

const RequestSchemeMatchConditionParameters_Operator_Equal = RequestSchemeMatchConditionParameters_Operator("Equal")

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type RequestSchemeMatchConditionParameters_Transforms string

const (
	RequestSchemeMatchConditionParameters_Transforms_Lowercase   = RequestSchemeMatchConditionParameters_Transforms("Lowercase")
	RequestSchemeMatchConditionParameters_Transforms_RemoveNulls = RequestSchemeMatchConditionParameters_Transforms("RemoveNulls")
	RequestSchemeMatchConditionParameters_Transforms_Trim        = RequestSchemeMatchConditionParameters_Transforms("Trim")
	RequestSchemeMatchConditionParameters_Transforms_Uppercase   = RequestSchemeMatchConditionParameters_Transforms("Uppercase")
	RequestSchemeMatchConditionParameters_Transforms_UrlDecode   = RequestSchemeMatchConditionParameters_Transforms("UrlDecode")
	RequestSchemeMatchConditionParameters_Transforms_UrlEncode   = RequestSchemeMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleRequestSchemeConditionParameters"}
type RequestSchemeMatchConditionParameters_TypeName string

const RequestSchemeMatchConditionParameters_TypeName_DeliveryRuleRequestSchemeConditionParameters = RequestSchemeMatchConditionParameters_TypeName("DeliveryRuleRequestSchemeConditionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type RequestUriMatchConditionParameters_Operator string

const (
	RequestUriMatchConditionParameters_Operator_Any                = RequestUriMatchConditionParameters_Operator("Any")
	RequestUriMatchConditionParameters_Operator_BeginsWith         = RequestUriMatchConditionParameters_Operator("BeginsWith")
	RequestUriMatchConditionParameters_Operator_Contains           = RequestUriMatchConditionParameters_Operator("Contains")
	RequestUriMatchConditionParameters_Operator_EndsWith           = RequestUriMatchConditionParameters_Operator("EndsWith")
	RequestUriMatchConditionParameters_Operator_Equal              = RequestUriMatchConditionParameters_Operator("Equal")
	RequestUriMatchConditionParameters_Operator_GreaterThan        = RequestUriMatchConditionParameters_Operator("GreaterThan")
	RequestUriMatchConditionParameters_Operator_GreaterThanOrEqual = RequestUriMatchConditionParameters_Operator("GreaterThanOrEqual")
	RequestUriMatchConditionParameters_Operator_LessThan           = RequestUriMatchConditionParameters_Operator("LessThan")
	RequestUriMatchConditionParameters_Operator_LessThanOrEqual    = RequestUriMatchConditionParameters_Operator("LessThanOrEqual")
	RequestUriMatchConditionParameters_Operator_RegEx              = RequestUriMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type RequestUriMatchConditionParameters_Transforms string

const (
	RequestUriMatchConditionParameters_Transforms_Lowercase   = RequestUriMatchConditionParameters_Transforms("Lowercase")
	RequestUriMatchConditionParameters_Transforms_RemoveNulls = RequestUriMatchConditionParameters_Transforms("RemoveNulls")
	RequestUriMatchConditionParameters_Transforms_Trim        = RequestUriMatchConditionParameters_Transforms("Trim")
	RequestUriMatchConditionParameters_Transforms_Uppercase   = RequestUriMatchConditionParameters_Transforms("Uppercase")
	RequestUriMatchConditionParameters_Transforms_UrlDecode   = RequestUriMatchConditionParameters_Transforms("UrlDecode")
	RequestUriMatchConditionParameters_Transforms_UrlEncode   = RequestUriMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleRequestUriConditionParameters"}
type RequestUriMatchConditionParameters_TypeName string

const RequestUriMatchConditionParameters_TypeName_DeliveryRuleRequestUriConditionParameters = RequestUriMatchConditionParameters_TypeName("DeliveryRuleRequestUriConditionParameters")

// +kubebuilder:validation:Enum={"DeliveryRuleRouteConfigurationOverrideActionParameters"}
type RouteConfigurationOverrideActionParameters_TypeName string

const RouteConfigurationOverrideActionParameters_TypeName_DeliveryRuleRouteConfigurationOverrideActionParameters = RouteConfigurationOverrideActionParameters_TypeName("DeliveryRuleRouteConfigurationOverrideActionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type ServerPortMatchConditionParameters_Operator string

const (
	ServerPortMatchConditionParameters_Operator_Any                = ServerPortMatchConditionParameters_Operator("Any")
	ServerPortMatchConditionParameters_Operator_BeginsWith         = ServerPortMatchConditionParameters_Operator("BeginsWith")
	ServerPortMatchConditionParameters_Operator_Contains           = ServerPortMatchConditionParameters_Operator("Contains")
	ServerPortMatchConditionParameters_Operator_EndsWith           = ServerPortMatchConditionParameters_Operator("EndsWith")
	ServerPortMatchConditionParameters_Operator_Equal              = ServerPortMatchConditionParameters_Operator("Equal")
	ServerPortMatchConditionParameters_Operator_GreaterThan        = ServerPortMatchConditionParameters_Operator("GreaterThan")
	ServerPortMatchConditionParameters_Operator_GreaterThanOrEqual = ServerPortMatchConditionParameters_Operator("GreaterThanOrEqual")
	ServerPortMatchConditionParameters_Operator_LessThan           = ServerPortMatchConditionParameters_Operator("LessThan")
	ServerPortMatchConditionParameters_Operator_LessThanOrEqual    = ServerPortMatchConditionParameters_Operator("LessThanOrEqual")
	ServerPortMatchConditionParameters_Operator_RegEx              = ServerPortMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type ServerPortMatchConditionParameters_Transforms string

const (
	ServerPortMatchConditionParameters_Transforms_Lowercase   = ServerPortMatchConditionParameters_Transforms("Lowercase")
	ServerPortMatchConditionParameters_Transforms_RemoveNulls = ServerPortMatchConditionParameters_Transforms("RemoveNulls")
	ServerPortMatchConditionParameters_Transforms_Trim        = ServerPortMatchConditionParameters_Transforms("Trim")
	ServerPortMatchConditionParameters_Transforms_Uppercase   = ServerPortMatchConditionParameters_Transforms("Uppercase")
	ServerPortMatchConditionParameters_Transforms_UrlDecode   = ServerPortMatchConditionParameters_Transforms("UrlDecode")
	ServerPortMatchConditionParameters_Transforms_UrlEncode   = ServerPortMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleServerPortConditionParameters"}
type ServerPortMatchConditionParameters_TypeName string

const ServerPortMatchConditionParameters_TypeName_DeliveryRuleServerPortConditionParameters = ServerPortMatchConditionParameters_TypeName("DeliveryRuleServerPortConditionParameters")

// +kubebuilder:validation:Enum={"Any","IPMatch"}
type SocketAddrMatchConditionParameters_Operator string

const (
	SocketAddrMatchConditionParameters_Operator_Any     = SocketAddrMatchConditionParameters_Operator("Any")
	SocketAddrMatchConditionParameters_Operator_IPMatch = SocketAddrMatchConditionParameters_Operator("IPMatch")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type SocketAddrMatchConditionParameters_Transforms string

const (
	SocketAddrMatchConditionParameters_Transforms_Lowercase   = SocketAddrMatchConditionParameters_Transforms("Lowercase")
	SocketAddrMatchConditionParameters_Transforms_RemoveNulls = SocketAddrMatchConditionParameters_Transforms("RemoveNulls")
	SocketAddrMatchConditionParameters_Transforms_Trim        = SocketAddrMatchConditionParameters_Transforms("Trim")
	SocketAddrMatchConditionParameters_Transforms_Uppercase   = SocketAddrMatchConditionParameters_Transforms("Uppercase")
	SocketAddrMatchConditionParameters_Transforms_UrlDecode   = SocketAddrMatchConditionParameters_Transforms("UrlDecode")
	SocketAddrMatchConditionParameters_Transforms_UrlEncode   = SocketAddrMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleSocketAddrConditionParameters"}
type SocketAddrMatchConditionParameters_TypeName string

const SocketAddrMatchConditionParameters_TypeName_DeliveryRuleSocketAddrConditionParameters = SocketAddrMatchConditionParameters_TypeName("DeliveryRuleSocketAddrConditionParameters")

// +kubebuilder:validation:Enum={"TLSv1","TLSv1.1","TLSv1.2"}
type SslProtocolMatchConditionParameters_MatchValues string

const (
	SslProtocolMatchConditionParameters_MatchValues_TLSv1  = SslProtocolMatchConditionParameters_MatchValues("TLSv1")
	SslProtocolMatchConditionParameters_MatchValues_TLSv11 = SslProtocolMatchConditionParameters_MatchValues("TLSv1.1")
	SslProtocolMatchConditionParameters_MatchValues_TLSv12 = SslProtocolMatchConditionParameters_MatchValues("TLSv1.2")
)

// +kubebuilder:validation:Enum={"Equal"}
type SslProtocolMatchConditionParameters_Operator string

const SslProtocolMatchConditionParameters_Operator_Equal = SslProtocolMatchConditionParameters_Operator("Equal")

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type SslProtocolMatchConditionParameters_Transforms string

const (
	SslProtocolMatchConditionParameters_Transforms_Lowercase   = SslProtocolMatchConditionParameters_Transforms("Lowercase")
	SslProtocolMatchConditionParameters_Transforms_RemoveNulls = SslProtocolMatchConditionParameters_Transforms("RemoveNulls")
	SslProtocolMatchConditionParameters_Transforms_Trim        = SslProtocolMatchConditionParameters_Transforms("Trim")
	SslProtocolMatchConditionParameters_Transforms_Uppercase   = SslProtocolMatchConditionParameters_Transforms("Uppercase")
	SslProtocolMatchConditionParameters_Transforms_UrlDecode   = SslProtocolMatchConditionParameters_Transforms("UrlDecode")
	SslProtocolMatchConditionParameters_Transforms_UrlEncode   = SslProtocolMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleSslProtocolConditionParameters"}
type SslProtocolMatchConditionParameters_TypeName string

const SslProtocolMatchConditionParameters_TypeName_DeliveryRuleSslProtocolConditionParameters = SslProtocolMatchConditionParameters_TypeName("DeliveryRuleSslProtocolConditionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type UrlFileExtensionMatchConditionParameters_Operator string

const (
	UrlFileExtensionMatchConditionParameters_Operator_Any                = UrlFileExtensionMatchConditionParameters_Operator("Any")
	UrlFileExtensionMatchConditionParameters_Operator_BeginsWith         = UrlFileExtensionMatchConditionParameters_Operator("BeginsWith")
	UrlFileExtensionMatchConditionParameters_Operator_Contains           = UrlFileExtensionMatchConditionParameters_Operator("Contains")
	UrlFileExtensionMatchConditionParameters_Operator_EndsWith           = UrlFileExtensionMatchConditionParameters_Operator("EndsWith")
	UrlFileExtensionMatchConditionParameters_Operator_Equal              = UrlFileExtensionMatchConditionParameters_Operator("Equal")
	UrlFileExtensionMatchConditionParameters_Operator_GreaterThan        = UrlFileExtensionMatchConditionParameters_Operator("GreaterThan")
	UrlFileExtensionMatchConditionParameters_Operator_GreaterThanOrEqual = UrlFileExtensionMatchConditionParameters_Operator("GreaterThanOrEqual")
	UrlFileExtensionMatchConditionParameters_Operator_LessThan           = UrlFileExtensionMatchConditionParameters_Operator("LessThan")
	UrlFileExtensionMatchConditionParameters_Operator_LessThanOrEqual    = UrlFileExtensionMatchConditionParameters_Operator("LessThanOrEqual")
	UrlFileExtensionMatchConditionParameters_Operator_RegEx              = UrlFileExtensionMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type UrlFileExtensionMatchConditionParameters_Transforms string

const (
	UrlFileExtensionMatchConditionParameters_Transforms_Lowercase   = UrlFileExtensionMatchConditionParameters_Transforms("Lowercase")
	UrlFileExtensionMatchConditionParameters_Transforms_RemoveNulls = UrlFileExtensionMatchConditionParameters_Transforms("RemoveNulls")
	UrlFileExtensionMatchConditionParameters_Transforms_Trim        = UrlFileExtensionMatchConditionParameters_Transforms("Trim")
	UrlFileExtensionMatchConditionParameters_Transforms_Uppercase   = UrlFileExtensionMatchConditionParameters_Transforms("Uppercase")
	UrlFileExtensionMatchConditionParameters_Transforms_UrlDecode   = UrlFileExtensionMatchConditionParameters_Transforms("UrlDecode")
	UrlFileExtensionMatchConditionParameters_Transforms_UrlEncode   = UrlFileExtensionMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleUrlFileExtensionMatchConditionParameters"}
type UrlFileExtensionMatchConditionParameters_TypeName string

const UrlFileExtensionMatchConditionParameters_TypeName_DeliveryRuleUrlFileExtensionMatchConditionParameters = UrlFileExtensionMatchConditionParameters_TypeName("DeliveryRuleUrlFileExtensionMatchConditionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx"}
type UrlFileNameMatchConditionParameters_Operator string

const (
	UrlFileNameMatchConditionParameters_Operator_Any                = UrlFileNameMatchConditionParameters_Operator("Any")
	UrlFileNameMatchConditionParameters_Operator_BeginsWith         = UrlFileNameMatchConditionParameters_Operator("BeginsWith")
	UrlFileNameMatchConditionParameters_Operator_Contains           = UrlFileNameMatchConditionParameters_Operator("Contains")
	UrlFileNameMatchConditionParameters_Operator_EndsWith           = UrlFileNameMatchConditionParameters_Operator("EndsWith")
	UrlFileNameMatchConditionParameters_Operator_Equal              = UrlFileNameMatchConditionParameters_Operator("Equal")
	UrlFileNameMatchConditionParameters_Operator_GreaterThan        = UrlFileNameMatchConditionParameters_Operator("GreaterThan")
	UrlFileNameMatchConditionParameters_Operator_GreaterThanOrEqual = UrlFileNameMatchConditionParameters_Operator("GreaterThanOrEqual")
	UrlFileNameMatchConditionParameters_Operator_LessThan           = UrlFileNameMatchConditionParameters_Operator("LessThan")
	UrlFileNameMatchConditionParameters_Operator_LessThanOrEqual    = UrlFileNameMatchConditionParameters_Operator("LessThanOrEqual")
	UrlFileNameMatchConditionParameters_Operator_RegEx              = UrlFileNameMatchConditionParameters_Operator("RegEx")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type UrlFileNameMatchConditionParameters_Transforms string

const (
	UrlFileNameMatchConditionParameters_Transforms_Lowercase   = UrlFileNameMatchConditionParameters_Transforms("Lowercase")
	UrlFileNameMatchConditionParameters_Transforms_RemoveNulls = UrlFileNameMatchConditionParameters_Transforms("RemoveNulls")
	UrlFileNameMatchConditionParameters_Transforms_Trim        = UrlFileNameMatchConditionParameters_Transforms("Trim")
	UrlFileNameMatchConditionParameters_Transforms_Uppercase   = UrlFileNameMatchConditionParameters_Transforms("Uppercase")
	UrlFileNameMatchConditionParameters_Transforms_UrlDecode   = UrlFileNameMatchConditionParameters_Transforms("UrlDecode")
	UrlFileNameMatchConditionParameters_Transforms_UrlEncode   = UrlFileNameMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleUrlFilenameConditionParameters"}
type UrlFileNameMatchConditionParameters_TypeName string

const UrlFileNameMatchConditionParameters_TypeName_DeliveryRuleUrlFilenameConditionParameters = UrlFileNameMatchConditionParameters_TypeName("DeliveryRuleUrlFilenameConditionParameters")

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","RegEx","Wildcard"}
type UrlPathMatchConditionParameters_Operator string

const (
	UrlPathMatchConditionParameters_Operator_Any                = UrlPathMatchConditionParameters_Operator("Any")
	UrlPathMatchConditionParameters_Operator_BeginsWith         = UrlPathMatchConditionParameters_Operator("BeginsWith")
	UrlPathMatchConditionParameters_Operator_Contains           = UrlPathMatchConditionParameters_Operator("Contains")
	UrlPathMatchConditionParameters_Operator_EndsWith           = UrlPathMatchConditionParameters_Operator("EndsWith")
	UrlPathMatchConditionParameters_Operator_Equal              = UrlPathMatchConditionParameters_Operator("Equal")
	UrlPathMatchConditionParameters_Operator_GreaterThan        = UrlPathMatchConditionParameters_Operator("GreaterThan")
	UrlPathMatchConditionParameters_Operator_GreaterThanOrEqual = UrlPathMatchConditionParameters_Operator("GreaterThanOrEqual")
	UrlPathMatchConditionParameters_Operator_LessThan           = UrlPathMatchConditionParameters_Operator("LessThan")
	UrlPathMatchConditionParameters_Operator_LessThanOrEqual    = UrlPathMatchConditionParameters_Operator("LessThanOrEqual")
	UrlPathMatchConditionParameters_Operator_RegEx              = UrlPathMatchConditionParameters_Operator("RegEx")
	UrlPathMatchConditionParameters_Operator_Wildcard           = UrlPathMatchConditionParameters_Operator("Wildcard")
)

// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type UrlPathMatchConditionParameters_Transforms string

const (
	UrlPathMatchConditionParameters_Transforms_Lowercase   = UrlPathMatchConditionParameters_Transforms("Lowercase")
	UrlPathMatchConditionParameters_Transforms_RemoveNulls = UrlPathMatchConditionParameters_Transforms("RemoveNulls")
	UrlPathMatchConditionParameters_Transforms_Trim        = UrlPathMatchConditionParameters_Transforms("Trim")
	UrlPathMatchConditionParameters_Transforms_Uppercase   = UrlPathMatchConditionParameters_Transforms("Uppercase")
	UrlPathMatchConditionParameters_Transforms_UrlDecode   = UrlPathMatchConditionParameters_Transforms("UrlDecode")
	UrlPathMatchConditionParameters_Transforms_UrlEncode   = UrlPathMatchConditionParameters_Transforms("UrlEncode")
)

// +kubebuilder:validation:Enum={"DeliveryRuleUrlPathMatchConditionParameters"}
type UrlPathMatchConditionParameters_TypeName string

const UrlPathMatchConditionParameters_TypeName_DeliveryRuleUrlPathMatchConditionParameters = UrlPathMatchConditionParameters_TypeName("DeliveryRuleUrlPathMatchConditionParameters")

// +kubebuilder:validation:Enum={"Http","Https","MatchRequest"}
type UrlRedirectActionParameters_DestinationProtocol string

const (
	UrlRedirectActionParameters_DestinationProtocol_Http         = UrlRedirectActionParameters_DestinationProtocol("Http")
	UrlRedirectActionParameters_DestinationProtocol_Https        = UrlRedirectActionParameters_DestinationProtocol("Https")
	UrlRedirectActionParameters_DestinationProtocol_MatchRequest = UrlRedirectActionParameters_DestinationProtocol("MatchRequest")
)

// +kubebuilder:validation:Enum={"Found","Moved","PermanentRedirect","TemporaryRedirect"}
type UrlRedirectActionParameters_RedirectType string

const (
	UrlRedirectActionParameters_RedirectType_Found             = UrlRedirectActionParameters_RedirectType("Found")
	UrlRedirectActionParameters_RedirectType_Moved             = UrlRedirectActionParameters_RedirectType("Moved")
	UrlRedirectActionParameters_RedirectType_PermanentRedirect = UrlRedirectActionParameters_RedirectType("PermanentRedirect")
	UrlRedirectActionParameters_RedirectType_TemporaryRedirect = UrlRedirectActionParameters_RedirectType("TemporaryRedirect")
)

// +kubebuilder:validation:Enum={"DeliveryRuleUrlRedirectActionParameters"}
type UrlRedirectActionParameters_TypeName string

const UrlRedirectActionParameters_TypeName_DeliveryRuleUrlRedirectActionParameters = UrlRedirectActionParameters_TypeName("DeliveryRuleUrlRedirectActionParameters")

// +kubebuilder:validation:Enum={"DeliveryRuleUrlRewriteActionParameters"}
type UrlRewriteActionParameters_TypeName string

const UrlRewriteActionParameters_TypeName_DeliveryRuleUrlRewriteActionParameters = UrlRewriteActionParameters_TypeName("DeliveryRuleUrlRewriteActionParameters")

// +kubebuilder:validation:Enum={"SHA256"}
type UrlSigningActionParameters_Algorithm string

const UrlSigningActionParameters_Algorithm_SHA256 = UrlSigningActionParameters_Algorithm("SHA256")

// +kubebuilder:validation:Enum={"DeliveryRuleUrlSigningActionParameters"}
type UrlSigningActionParameters_TypeName string

const UrlSigningActionParameters_TypeName_DeliveryRuleUrlSigningActionParameters = UrlSigningActionParameters_TypeName("DeliveryRuleUrlSigningActionParameters")

// Generated from: https://schema.management.azure.com/schemas/2021-06-01/Microsoft.Cdn.json#/definitions/UrlSigningParamIdentifier
type UrlSigningParamIdentifier struct {
	// +kubebuilder:validation:Required
	// ParamIndicator: Indicates the purpose of the parameter.
	ParamIndicator *UrlSigningParamIdentifier_ParamIndicator `json:"paramIndicator,omitempty"`

	// +kubebuilder:validation:Required
	// ParamName: Parameter name
	ParamName *string `json:"paramName,omitempty"`
}

var _ genruntime.ARMTransformer = &UrlSigningParamIdentifier{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identifier *UrlSigningParamIdentifier) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identifier == nil {
		return nil, nil
	}
	result := &UrlSigningParamIdentifier_ARM{}

	// Set property ‘ParamIndicator’:
	if identifier.ParamIndicator != nil {
		paramIndicator := *identifier.ParamIndicator
		result.ParamIndicator = &paramIndicator
	}

	// Set property ‘ParamName’:
	if identifier.ParamName != nil {
		paramName := *identifier.ParamName
		result.ParamName = &paramName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identifier *UrlSigningParamIdentifier) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UrlSigningParamIdentifier_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identifier *UrlSigningParamIdentifier) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UrlSigningParamIdentifier_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UrlSigningParamIdentifier_ARM, got %T", armInput)
	}

	// Set property ‘ParamIndicator’:
	if typedInput.ParamIndicator != nil {
		paramIndicator := *typedInput.ParamIndicator
		identifier.ParamIndicator = &paramIndicator
	}

	// Set property ‘ParamName’:
	if typedInput.ParamName != nil {
		paramName := *typedInput.ParamName
		identifier.ParamName = &paramName
	}

	// No error
	return nil
}

// AssignProperties_From_UrlSigningParamIdentifier populates our UrlSigningParamIdentifier from the provided source UrlSigningParamIdentifier
func (identifier *UrlSigningParamIdentifier) AssignProperties_From_UrlSigningParamIdentifier(source *v20210601s.UrlSigningParamIdentifier) error {

	// ParamIndicator
	if source.ParamIndicator != nil {
		paramIndicator := UrlSigningParamIdentifier_ParamIndicator(*source.ParamIndicator)
		identifier.ParamIndicator = &paramIndicator
	} else {
		identifier.ParamIndicator = nil
	}

	// ParamName
	identifier.ParamName = genruntime.ClonePointerToString(source.ParamName)

	// No error
	return nil
}

// AssignProperties_To_UrlSigningParamIdentifier populates the provided destination UrlSigningParamIdentifier from our UrlSigningParamIdentifier
func (identifier *UrlSigningParamIdentifier) AssignProperties_To_UrlSigningParamIdentifier(destination *v20210601s.UrlSigningParamIdentifier) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ParamIndicator
	if identifier.ParamIndicator != nil {
		paramIndicator := string(*identifier.ParamIndicator)
		destination.ParamIndicator = &paramIndicator
	} else {
		destination.ParamIndicator = nil
	}

	// ParamName
	destination.ParamName = genruntime.ClonePointerToString(identifier.ParamName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"HonorOrigin","OverrideAlways","OverrideIfOriginMissing"}
type CacheConfiguration_CacheBehavior string

const (
	CacheConfiguration_CacheBehavior_HonorOrigin             = CacheConfiguration_CacheBehavior("HonorOrigin")
	CacheConfiguration_CacheBehavior_OverrideAlways          = CacheConfiguration_CacheBehavior("OverrideAlways")
	CacheConfiguration_CacheBehavior_OverrideIfOriginMissing = CacheConfiguration_CacheBehavior("OverrideIfOriginMissing")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type CacheConfiguration_IsCompressionEnabled string

const (
	CacheConfiguration_IsCompressionEnabled_Disabled = CacheConfiguration_IsCompressionEnabled("Disabled")
	CacheConfiguration_IsCompressionEnabled_Enabled  = CacheConfiguration_IsCompressionEnabled("Enabled")
)

// +kubebuilder:validation:Enum={"IgnoreQueryString","IgnoreSpecifiedQueryStrings","IncludeSpecifiedQueryStrings","UseQueryString"}
type CacheConfiguration_QueryStringCachingBehavior string

const (
	CacheConfiguration_QueryStringCachingBehavior_IgnoreQueryString            = CacheConfiguration_QueryStringCachingBehavior("IgnoreQueryString")
	CacheConfiguration_QueryStringCachingBehavior_IgnoreSpecifiedQueryStrings  = CacheConfiguration_QueryStringCachingBehavior("IgnoreSpecifiedQueryStrings")
	CacheConfiguration_QueryStringCachingBehavior_IncludeSpecifiedQueryStrings = CacheConfiguration_QueryStringCachingBehavior("IncludeSpecifiedQueryStrings")
	CacheConfiguration_QueryStringCachingBehavior_UseQueryString               = CacheConfiguration_QueryStringCachingBehavior("UseQueryString")
)

// +kubebuilder:validation:Enum={"HttpOnly","HttpsOnly","MatchRequest"}
type OriginGroupOverride_ForwardingProtocol string

const (
	OriginGroupOverride_ForwardingProtocol_HttpOnly     = OriginGroupOverride_ForwardingProtocol("HttpOnly")
	OriginGroupOverride_ForwardingProtocol_HttpsOnly    = OriginGroupOverride_ForwardingProtocol("HttpsOnly")
	OriginGroupOverride_ForwardingProtocol_MatchRequest = OriginGroupOverride_ForwardingProtocol("MatchRequest")
)

// +kubebuilder:validation:Enum={"Expires","KeyId","Signature"}
type UrlSigningParamIdentifier_ParamIndicator string

const (
	UrlSigningParamIdentifier_ParamIndicator_Expires   = UrlSigningParamIdentifier_ParamIndicator("Expires")
	UrlSigningParamIdentifier_ParamIndicator_KeyId     = UrlSigningParamIdentifier_ParamIndicator("KeyId")
	UrlSigningParamIdentifier_ParamIndicator_Signature = UrlSigningParamIdentifier_ParamIndicator("Signature")
)

func init() {
	SchemeBuilder.Register(&ProfilesEndpoint{}, &ProfilesEndpointList{})
}
