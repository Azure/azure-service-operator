// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ProfilesEndpoint_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProfilesEndpoint_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfilesEndpoint_SpecARM, ProfilesEndpoint_SpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfilesEndpoint_SpecARM runs a test to see if a specific instance of ProfilesEndpoint_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfilesEndpoint_SpecARM(subject ProfilesEndpoint_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProfilesEndpoint_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProfilesEndpoint_SpecARM instances for property testing - lazily instantiated by
// ProfilesEndpoint_SpecARMGenerator()
var profilesEndpoint_SpecARMGenerator gopter.Gen

// ProfilesEndpoint_SpecARMGenerator returns a generator of ProfilesEndpoint_SpecARM instances for property testing.
// We first initialize profilesEndpoint_SpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ProfilesEndpoint_SpecARMGenerator() gopter.Gen {
	if profilesEndpoint_SpecARMGenerator != nil {
		return profilesEndpoint_SpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfilesEndpoint_SpecARM(generators)
	profilesEndpoint_SpecARMGenerator = gen.Struct(reflect.TypeOf(ProfilesEndpoint_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfilesEndpoint_SpecARM(generators)
	AddRelatedPropertyGeneratorsForProfilesEndpoint_SpecARM(generators)
	profilesEndpoint_SpecARMGenerator = gen.Struct(reflect.TypeOf(ProfilesEndpoint_SpecARM{}), generators)

	return profilesEndpoint_SpecARMGenerator
}

// AddIndependentPropertyGeneratorsForProfilesEndpoint_SpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfilesEndpoint_SpecARM(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProfilesEndpoint_SpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfilesEndpoint_SpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EndpointPropertiesARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataARMGenerator())
}

func Test_EndpointPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointPropertiesARM, EndpointPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointPropertiesARM runs a test to see if a specific instance of EndpointPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointPropertiesARM(subject EndpointPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointPropertiesARM instances for property testing - lazily instantiated by
// EndpointPropertiesARMGenerator()
var endpointPropertiesARMGenerator gopter.Gen

// EndpointPropertiesARMGenerator returns a generator of EndpointPropertiesARM instances for property testing.
// We first initialize endpointPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointPropertiesARMGenerator() gopter.Gen {
	if endpointPropertiesARMGenerator != nil {
		return endpointPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesARM(generators)
	endpointPropertiesARMGenerator = gen.Struct(reflect.TypeOf(EndpointPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForEndpointPropertiesARM(generators)
	endpointPropertiesARMGenerator = gen.Struct(reflect.TypeOf(EndpointPropertiesARM{}), generators)

	return endpointPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointPropertiesARM(gens map[string]gopter.Gen) {
	gens["ContentTypesToCompress"] = gen.SliceOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsHttpAllowed"] = gen.PtrOf(gen.Bool())
	gens["IsHttpsAllowed"] = gen.PtrOf(gen.Bool())
	gens["OptimizationType"] = gen.PtrOf(gen.OneConstOf(
		OptimizationTypeDynamicSiteAcceleration,
		OptimizationTypeGeneralMediaStreaming,
		OptimizationTypeGeneralWebDelivery,
		OptimizationTypeLargeFileDownload,
		OptimizationTypeVideoOnDemandMediaStreaming))
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["OriginPath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_ProvisioningStateCreating,
		EndpointProperties_ProvisioningStateDeleting,
		EndpointProperties_ProvisioningStateFailed,
		EndpointProperties_ProvisioningStateSucceeded,
		EndpointProperties_ProvisioningStateUpdating))
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		QueryStringCachingBehaviorBypassCaching,
		QueryStringCachingBehaviorIgnoreQueryString,
		QueryStringCachingBehaviorNotSet,
		QueryStringCachingBehaviorUseQueryString))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_ResourceStateCreating,
		EndpointProperties_ResourceStateDeleting,
		EndpointProperties_ResourceStateRunning,
		EndpointProperties_ResourceStateStarting,
		EndpointProperties_ResourceStateStopped,
		EndpointProperties_ResourceStateStopping))
}

// AddRelatedPropertyGeneratorsForEndpointPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointPropertiesARM(gens map[string]gopter.Gen) {
	gens["CustomDomains"] = gen.SliceOf(CustomDomainARMGenerator())
	gens["DefaultOriginGroup"] = gen.PtrOf(ResourceReferenceARMGenerator())
	gens["DeliveryPolicy"] = gen.PtrOf(EndpointProperties_DeliveryPolicyARMGenerator())
	gens["GeoFilters"] = gen.SliceOf(GeoFilterARMGenerator())
	gens["OriginGroups"] = gen.SliceOf(DeepCreatedOriginGroupARMGenerator())
	gens["Origins"] = gen.SliceOf(DeepCreatedOriginARMGenerator())
	gens["UrlSigningKeys"] = gen.SliceOf(UrlSigningKeyARMGenerator())
	gens["WebApplicationFirewallPolicyLink"] = gen.PtrOf(EndpointProperties_WebApplicationFirewallPolicyLinkARMGenerator())
}

func Test_CustomDomainARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomainARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomainARM, CustomDomainARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomainARM runs a test to see if a specific instance of CustomDomainARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomainARM(subject CustomDomainARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomainARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomainARM instances for property testing - lazily instantiated by CustomDomainARMGenerator()
var customDomainARMGenerator gopter.Gen

// CustomDomainARMGenerator returns a generator of CustomDomainARM instances for property testing.
// We first initialize customDomainARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomDomainARMGenerator() gopter.Gen {
	if customDomainARMGenerator != nil {
		return customDomainARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainARM(generators)
	customDomainARMGenerator = gen.Struct(reflect.TypeOf(CustomDomainARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainARM(generators)
	AddRelatedPropertyGeneratorsForCustomDomainARM(generators)
	customDomainARMGenerator = gen.Struct(reflect.TypeOf(CustomDomainARM{}), generators)

	return customDomainARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomainARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomainARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomDomainARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomDomainARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(CustomDomainPropertiesARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataARMGenerator())
}

func Test_DeepCreatedOriginARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginARM, DeepCreatedOriginARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginARM runs a test to see if a specific instance of DeepCreatedOriginARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginARM(subject DeepCreatedOriginARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginARM instances for property testing - lazily instantiated by
// DeepCreatedOriginARMGenerator()
var deepCreatedOriginARMGenerator gopter.Gen

// DeepCreatedOriginARMGenerator returns a generator of DeepCreatedOriginARM instances for property testing.
// We first initialize deepCreatedOriginARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginARMGenerator() gopter.Gen {
	if deepCreatedOriginARMGenerator != nil {
		return deepCreatedOriginARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginARM(generators)
	deepCreatedOriginARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginARM(generators)
	deepCreatedOriginARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginARM{}), generators)

	return deepCreatedOriginARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginPropertiesARMGenerator())
}

func Test_DeepCreatedOriginGroupARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroupARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupARM, DeepCreatedOriginGroupARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupARM runs a test to see if a specific instance of DeepCreatedOriginGroupARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupARM(subject DeepCreatedOriginGroupARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroupARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroupARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupARMGenerator()
var deepCreatedOriginGroupARMGenerator gopter.Gen

// DeepCreatedOriginGroupARMGenerator returns a generator of DeepCreatedOriginGroupARM instances for property testing.
// We first initialize deepCreatedOriginGroupARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupARMGenerator != nil {
		return deepCreatedOriginGroupARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupARM(generators)
	deepCreatedOriginGroupARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupARM(generators)
	deepCreatedOriginGroupARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupARM{}), generators)

	return deepCreatedOriginGroupARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginGroupPropertiesARMGenerator())
}

func Test_EndpointProperties_DeliveryPolicyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_DeliveryPolicyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_DeliveryPolicyARM, EndpointProperties_DeliveryPolicyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_DeliveryPolicyARM runs a test to see if a specific instance of EndpointProperties_DeliveryPolicyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_DeliveryPolicyARM(subject EndpointProperties_DeliveryPolicyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_DeliveryPolicyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_DeliveryPolicyARM instances for property testing - lazily instantiated by
// EndpointProperties_DeliveryPolicyARMGenerator()
var endpointProperties_DeliveryPolicyARMGenerator gopter.Gen

// EndpointProperties_DeliveryPolicyARMGenerator returns a generator of EndpointProperties_DeliveryPolicyARM instances for property testing.
// We first initialize endpointProperties_DeliveryPolicyARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_DeliveryPolicyARMGenerator() gopter.Gen {
	if endpointProperties_DeliveryPolicyARMGenerator != nil {
		return endpointProperties_DeliveryPolicyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicyARM(generators)
	endpointProperties_DeliveryPolicyARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_DeliveryPolicyARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicyARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicyARM(generators)
	endpointProperties_DeliveryPolicyARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_DeliveryPolicyARM{}), generators)

	return endpointProperties_DeliveryPolicyARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicyARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicyARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicyARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(DeliveryRuleARMGenerator())
}

func Test_EndpointProperties_WebApplicationFirewallPolicyLinkARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_WebApplicationFirewallPolicyLinkARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLinkARM, EndpointProperties_WebApplicationFirewallPolicyLinkARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLinkARM runs a test to see if a specific instance of EndpointProperties_WebApplicationFirewallPolicyLinkARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLinkARM(subject EndpointProperties_WebApplicationFirewallPolicyLinkARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_WebApplicationFirewallPolicyLinkARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_WebApplicationFirewallPolicyLinkARM instances for property testing - lazily
// instantiated by EndpointProperties_WebApplicationFirewallPolicyLinkARMGenerator()
var endpointProperties_WebApplicationFirewallPolicyLinkARMGenerator gopter.Gen

// EndpointProperties_WebApplicationFirewallPolicyLinkARMGenerator returns a generator of EndpointProperties_WebApplicationFirewallPolicyLinkARM instances for property testing.
func EndpointProperties_WebApplicationFirewallPolicyLinkARMGenerator() gopter.Gen {
	if endpointProperties_WebApplicationFirewallPolicyLinkARMGenerator != nil {
		return endpointProperties_WebApplicationFirewallPolicyLinkARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLinkARM(generators)
	endpointProperties_WebApplicationFirewallPolicyLinkARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_WebApplicationFirewallPolicyLinkARM{}), generators)

	return endpointProperties_WebApplicationFirewallPolicyLinkARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLinkARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLinkARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_GeoFilterARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GeoFilterARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGeoFilterARM, GeoFilterARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGeoFilterARM runs a test to see if a specific instance of GeoFilterARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGeoFilterARM(subject GeoFilterARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GeoFilterARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GeoFilterARM instances for property testing - lazily instantiated by GeoFilterARMGenerator()
var geoFilterARMGenerator gopter.Gen

// GeoFilterARMGenerator returns a generator of GeoFilterARM instances for property testing.
func GeoFilterARMGenerator() gopter.Gen {
	if geoFilterARMGenerator != nil {
		return geoFilterARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGeoFilterARM(generators)
	geoFilterARMGenerator = gen.Struct(reflect.TypeOf(GeoFilterARM{}), generators)

	return geoFilterARMGenerator
}

// AddIndependentPropertyGeneratorsForGeoFilterARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGeoFilterARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(GeoFilter_ActionAllow, GeoFilter_ActionBlock))
	gens["CountryCodes"] = gen.SliceOf(gen.AlphaString())
	gens["RelativePath"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceReferenceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReferenceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReferenceARM, ResourceReferenceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReferenceARM runs a test to see if a specific instance of ResourceReferenceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReferenceARM(subject ResourceReferenceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReferenceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReferenceARM instances for property testing - lazily instantiated by
// ResourceReferenceARMGenerator()
var resourceReferenceARMGenerator gopter.Gen

// ResourceReferenceARMGenerator returns a generator of ResourceReferenceARM instances for property testing.
func ResourceReferenceARMGenerator() gopter.Gen {
	if resourceReferenceARMGenerator != nil {
		return resourceReferenceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReferenceARM(generators)
	resourceReferenceARMGenerator = gen.Struct(reflect.TypeOf(ResourceReferenceARM{}), generators)

	return resourceReferenceARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReferenceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReferenceARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UrlSigningKeyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningKeyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningKeyARM, UrlSigningKeyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningKeyARM runs a test to see if a specific instance of UrlSigningKeyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningKeyARM(subject UrlSigningKeyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningKeyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningKeyARM instances for property testing - lazily instantiated by UrlSigningKeyARMGenerator()
var urlSigningKeyARMGenerator gopter.Gen

// UrlSigningKeyARMGenerator returns a generator of UrlSigningKeyARM instances for property testing.
// We first initialize urlSigningKeyARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlSigningKeyARMGenerator() gopter.Gen {
	if urlSigningKeyARMGenerator != nil {
		return urlSigningKeyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKeyARM(generators)
	urlSigningKeyARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKeyARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKeyARM(generators)
	AddRelatedPropertyGeneratorsForUrlSigningKeyARM(generators)
	urlSigningKeyARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKeyARM{}), generators)

	return urlSigningKeyARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningKeyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningKeyARM(gens map[string]gopter.Gen) {
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUrlSigningKeyARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlSigningKeyARM(gens map[string]gopter.Gen) {
	gens["KeySourceParameters"] = gen.PtrOf(KeyVaultSigningKeyParametersARMGenerator())
}

func Test_CustomDomainPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomainPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomainPropertiesARM, CustomDomainPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomainPropertiesARM runs a test to see if a specific instance of CustomDomainPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomainPropertiesARM(subject CustomDomainPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomainPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomainPropertiesARM instances for property testing - lazily instantiated by
// CustomDomainPropertiesARMGenerator()
var customDomainPropertiesARMGenerator gopter.Gen

// CustomDomainPropertiesARMGenerator returns a generator of CustomDomainPropertiesARM instances for property testing.
// We first initialize customDomainPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomDomainPropertiesARMGenerator() gopter.Gen {
	if customDomainPropertiesARMGenerator != nil {
		return customDomainPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainPropertiesARM(generators)
	customDomainPropertiesARMGenerator = gen.Struct(reflect.TypeOf(CustomDomainPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForCustomDomainPropertiesARM(generators)
	customDomainPropertiesARMGenerator = gen.Struct(reflect.TypeOf(CustomDomainPropertiesARM{}), generators)

	return customDomainPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomainPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomainPropertiesARM(gens map[string]gopter.Gen) {
	gens["CustomHttpsProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		CustomDomainProperties_CustomHttpsProvisioningStateDisabled,
		CustomDomainProperties_CustomHttpsProvisioningStateDisabling,
		CustomDomainProperties_CustomHttpsProvisioningStateEnabled,
		CustomDomainProperties_CustomHttpsProvisioningStateEnabling,
		CustomDomainProperties_CustomHttpsProvisioningStateFailed))
	gens["CustomHttpsProvisioningSubstate"] = gen.PtrOf(gen.OneConstOf(
		CustomDomainProperties_CustomHttpsProvisioningSubstateCertificateDeleted,
		CustomDomainProperties_CustomHttpsProvisioningSubstateCertificateDeployed,
		CustomDomainProperties_CustomHttpsProvisioningSubstateDeletingCertificate,
		CustomDomainProperties_CustomHttpsProvisioningSubstateDeployingCertificate,
		CustomDomainProperties_CustomHttpsProvisioningSubstateDomainControlValidationRequestApproved,
		CustomDomainProperties_CustomHttpsProvisioningSubstateDomainControlValidationRequestRejected,
		CustomDomainProperties_CustomHttpsProvisioningSubstateDomainControlValidationRequestTimedOut,
		CustomDomainProperties_CustomHttpsProvisioningSubstateIssuingCertificate,
		CustomDomainProperties_CustomHttpsProvisioningSubstatePendingDomainControlValidationREquestApproval,
		CustomDomainProperties_CustomHttpsProvisioningSubstateSubmittingDomainControlValidationRequest))
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		CustomDomainProperties_ProvisioningStateDisabled,
		CustomDomainProperties_ProvisioningStateDisabling,
		CustomDomainProperties_ProvisioningStateEnabled,
		CustomDomainProperties_ProvisioningStateEnabling,
		CustomDomainProperties_ProvisioningStateFailed))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(CustomDomainProperties_ResourceStateActive, CustomDomainProperties_ResourceStateCreating, CustomDomainProperties_ResourceStateDeleting))
	gens["ValidationData"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomDomainPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomDomainPropertiesARM(gens map[string]gopter.Gen) {
	gens["CustomHttpsParameters"] = gen.PtrOf(CustomDomainHttpsParametersARMGenerator())
}

func Test_DeepCreatedOriginGroupPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroupPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupPropertiesARM, DeepCreatedOriginGroupPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupPropertiesARM runs a test to see if a specific instance of DeepCreatedOriginGroupPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupPropertiesARM(subject DeepCreatedOriginGroupPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroupPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroupPropertiesARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupPropertiesARMGenerator()
var deepCreatedOriginGroupPropertiesARMGenerator gopter.Gen

// DeepCreatedOriginGroupPropertiesARMGenerator returns a generator of DeepCreatedOriginGroupPropertiesARM instances for property testing.
// We first initialize deepCreatedOriginGroupPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupPropertiesARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupPropertiesARMGenerator != nil {
		return deepCreatedOriginGroupPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesARM(generators)
	deepCreatedOriginGroupPropertiesARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupPropertiesARM(generators)
	deepCreatedOriginGroupPropertiesARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupPropertiesARM{}), generators)

	return deepCreatedOriginGroupPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesARM(gens map[string]gopter.Gen) {
	gens["TrafficRestorationTimeToHealedOrNewEndpointsInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupPropertiesARM(gens map[string]gopter.Gen) {
	gens["HealthProbeSettings"] = gen.PtrOf(HealthProbeParametersARMGenerator())
	gens["Origins"] = gen.SliceOf(ResourceReferenceARMGenerator())
	gens["ResponseBasedOriginErrorDetectionSettings"] = gen.PtrOf(ResponseBasedOriginErrorDetectionParametersARMGenerator())
}

func Test_DeepCreatedOriginPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginPropertiesARM, DeepCreatedOriginPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginPropertiesARM runs a test to see if a specific instance of DeepCreatedOriginPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginPropertiesARM(subject DeepCreatedOriginPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginPropertiesARM instances for property testing - lazily instantiated by
// DeepCreatedOriginPropertiesARMGenerator()
var deepCreatedOriginPropertiesARMGenerator gopter.Gen

// DeepCreatedOriginPropertiesARMGenerator returns a generator of DeepCreatedOriginPropertiesARM instances for property testing.
func DeepCreatedOriginPropertiesARMGenerator() gopter.Gen {
	if deepCreatedOriginPropertiesARMGenerator != nil {
		return deepCreatedOriginPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginPropertiesARM(generators)
	deepCreatedOriginPropertiesARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginPropertiesARM{}), generators)

	return deepCreatedOriginPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginPropertiesARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["PrivateEndpointStatus"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointStatusApproved,
		PrivateEndpointStatusDisconnected,
		PrivateEndpointStatusPending,
		PrivateEndpointStatusRejected,
		PrivateEndpointStatusTimeout))
	gens["PrivateLinkAlias"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkApprovalMessage"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

func Test_DeliveryRuleARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleARM, DeliveryRuleARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleARM runs a test to see if a specific instance of DeliveryRuleARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleARM(subject DeliveryRuleARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleARM instances for property testing - lazily instantiated by DeliveryRuleARMGenerator()
var deliveryRuleARMGenerator gopter.Gen

// DeliveryRuleARMGenerator returns a generator of DeliveryRuleARM instances for property testing.
// We first initialize deliveryRuleARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleARMGenerator() gopter.Gen {
	if deliveryRuleARMGenerator != nil {
		return deliveryRuleARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleARM(generators)
	deliveryRuleARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleARM(generators)
	deliveryRuleARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleARM{}), generators)

	return deliveryRuleARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Order"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeliveryRuleARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(DeliveryRuleActionARMGenerator())
	gens["Conditions"] = gen.SliceOf(DeliveryRuleConditionARMGenerator())
}

func Test_KeyVaultSigningKeyParametersARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultSigningKeyParametersARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultSigningKeyParametersARM, KeyVaultSigningKeyParametersARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultSigningKeyParametersARM runs a test to see if a specific instance of KeyVaultSigningKeyParametersARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultSigningKeyParametersARM(subject KeyVaultSigningKeyParametersARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultSigningKeyParametersARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultSigningKeyParametersARM instances for property testing - lazily instantiated by
// KeyVaultSigningKeyParametersARMGenerator()
var keyVaultSigningKeyParametersARMGenerator gopter.Gen

// KeyVaultSigningKeyParametersARMGenerator returns a generator of KeyVaultSigningKeyParametersARM instances for property testing.
func KeyVaultSigningKeyParametersARMGenerator() gopter.Gen {
	if keyVaultSigningKeyParametersARMGenerator != nil {
		return keyVaultSigningKeyParametersARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParametersARM(generators)
	keyVaultSigningKeyParametersARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultSigningKeyParametersARM{}), generators)

	return keyVaultSigningKeyParametersARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParametersARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParametersARM(gens map[string]gopter.Gen) {
	gens["ResourceGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretVersion"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(KeyVaultSigningKeyParameters_TypeNameKeyVaultSigningKeyParameters))
	gens["VaultName"] = gen.PtrOf(gen.AlphaString())
}

func Test_CustomDomainHttpsParametersARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomainHttpsParametersARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomainHttpsParametersARM, CustomDomainHttpsParametersARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomainHttpsParametersARM runs a test to see if a specific instance of CustomDomainHttpsParametersARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomainHttpsParametersARM(subject CustomDomainHttpsParametersARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomainHttpsParametersARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomainHttpsParametersARM instances for property testing - lazily instantiated by
// CustomDomainHttpsParametersARMGenerator()
var customDomainHttpsParametersARMGenerator gopter.Gen

// CustomDomainHttpsParametersARMGenerator returns a generator of CustomDomainHttpsParametersARM instances for property testing.
func CustomDomainHttpsParametersARMGenerator() gopter.Gen {
	if customDomainHttpsParametersARMGenerator != nil {
		return customDomainHttpsParametersARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainHttpsParametersARM(generators)
	customDomainHttpsParametersARMGenerator = gen.Struct(reflect.TypeOf(CustomDomainHttpsParametersARM{}), generators)

	return customDomainHttpsParametersARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomainHttpsParametersARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomainHttpsParametersARM(gens map[string]gopter.Gen) {
	gens["CertificateSource"] = gen.PtrOf(gen.OneConstOf(CustomDomainHttpsParameters_CertificateSourceAzureKeyVault, CustomDomainHttpsParameters_CertificateSourceCdn))
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(CustomDomainHttpsParameters_MinimumTlsVersionNone, CustomDomainHttpsParameters_MinimumTlsVersionTLS10, CustomDomainHttpsParameters_MinimumTlsVersionTLS12))
	gens["ProtocolType"] = gen.PtrOf(gen.OneConstOf(CustomDomainHttpsParameters_ProtocolTypeIPBased, CustomDomainHttpsParameters_ProtocolTypeServerNameIndication))
}

func Test_DeliveryRuleActionARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleActionARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleActionARM, DeliveryRuleActionARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleActionARM runs a test to see if a specific instance of DeliveryRuleActionARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleActionARM(subject DeliveryRuleActionARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleActionARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleActionARM instances for property testing - lazily instantiated by
// DeliveryRuleActionARMGenerator()
var deliveryRuleActionARMGenerator gopter.Gen

// DeliveryRuleActionARMGenerator returns a generator of DeliveryRuleActionARM instances for property testing.
func DeliveryRuleActionARMGenerator() gopter.Gen {
	if deliveryRuleActionARMGenerator != nil {
		return deliveryRuleActionARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleActionARM(generators)
	deliveryRuleActionARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleActionARM{}), generators)

	return deliveryRuleActionARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleActionARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleActionARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleAction_NameCacheExpiration,
		DeliveryRuleAction_NameCacheKeyQueryString,
		DeliveryRuleAction_NameModifyRequestHeader,
		DeliveryRuleAction_NameModifyResponseHeader,
		DeliveryRuleAction_NameOriginGroupOverride,
		DeliveryRuleAction_NameRouteConfigurationOverride,
		DeliveryRuleAction_NameUrlRedirect,
		DeliveryRuleAction_NameUrlRewrite,
		DeliveryRuleAction_NameUrlSigning))
}

func Test_DeliveryRuleConditionARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleConditionARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleConditionARM, DeliveryRuleConditionARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleConditionARM runs a test to see if a specific instance of DeliveryRuleConditionARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleConditionARM(subject DeliveryRuleConditionARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleConditionARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleConditionARM instances for property testing - lazily instantiated by
// DeliveryRuleConditionARMGenerator()
var deliveryRuleConditionARMGenerator gopter.Gen

// DeliveryRuleConditionARMGenerator returns a generator of DeliveryRuleConditionARM instances for property testing.
func DeliveryRuleConditionARMGenerator() gopter.Gen {
	if deliveryRuleConditionARMGenerator != nil {
		return deliveryRuleConditionARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleConditionARM(generators)
	deliveryRuleConditionARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleConditionARM{}), generators)

	return deliveryRuleConditionARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleConditionARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleConditionARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleCondition_NameClientPort,
		DeliveryRuleCondition_NameCookies,
		DeliveryRuleCondition_NameHostName,
		DeliveryRuleCondition_NameHttpVersion,
		DeliveryRuleCondition_NameIsDevice,
		DeliveryRuleCondition_NamePostArgs,
		DeliveryRuleCondition_NameQueryString,
		DeliveryRuleCondition_NameRemoteAddress,
		DeliveryRuleCondition_NameRequestBody,
		DeliveryRuleCondition_NameRequestHeader,
		DeliveryRuleCondition_NameRequestMethod,
		DeliveryRuleCondition_NameRequestScheme,
		DeliveryRuleCondition_NameRequestUri,
		DeliveryRuleCondition_NameServerPort,
		DeliveryRuleCondition_NameSocketAddr,
		DeliveryRuleCondition_NameSslProtocol,
		DeliveryRuleCondition_NameUrlFileExtension,
		DeliveryRuleCondition_NameUrlFileName,
		DeliveryRuleCondition_NameUrlPath))
}

func Test_HealthProbeParametersARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HealthProbeParametersARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHealthProbeParametersARM, HealthProbeParametersARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHealthProbeParametersARM runs a test to see if a specific instance of HealthProbeParametersARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHealthProbeParametersARM(subject HealthProbeParametersARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HealthProbeParametersARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HealthProbeParametersARM instances for property testing - lazily instantiated by
// HealthProbeParametersARMGenerator()
var healthProbeParametersARMGenerator gopter.Gen

// HealthProbeParametersARMGenerator returns a generator of HealthProbeParametersARM instances for property testing.
func HealthProbeParametersARMGenerator() gopter.Gen {
	if healthProbeParametersARMGenerator != nil {
		return healthProbeParametersARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHealthProbeParametersARM(generators)
	healthProbeParametersARMGenerator = gen.Struct(reflect.TypeOf(HealthProbeParametersARM{}), generators)

	return healthProbeParametersARMGenerator
}

// AddIndependentPropertyGeneratorsForHealthProbeParametersARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHealthProbeParametersARM(gens map[string]gopter.Gen) {
	gens["ProbeIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbeProtocol"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeProtocolHttp, HealthProbeParameters_ProbeProtocolHttps, HealthProbeParameters_ProbeProtocolNotSet))
	gens["ProbeRequestType"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeRequestTypeGET, HealthProbeParameters_ProbeRequestTypeHEAD, HealthProbeParameters_ProbeRequestTypeNotSet))
}

func Test_ResponseBasedOriginErrorDetectionParametersARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResponseBasedOriginErrorDetectionParametersARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResponseBasedOriginErrorDetectionParametersARM, ResponseBasedOriginErrorDetectionParametersARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResponseBasedOriginErrorDetectionParametersARM runs a test to see if a specific instance of ResponseBasedOriginErrorDetectionParametersARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResponseBasedOriginErrorDetectionParametersARM(subject ResponseBasedOriginErrorDetectionParametersARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResponseBasedOriginErrorDetectionParametersARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResponseBasedOriginErrorDetectionParametersARM instances for property testing - lazily instantiated by
// ResponseBasedOriginErrorDetectionParametersARMGenerator()
var responseBasedOriginErrorDetectionParametersARMGenerator gopter.Gen

// ResponseBasedOriginErrorDetectionParametersARMGenerator returns a generator of ResponseBasedOriginErrorDetectionParametersARM instances for property testing.
// We first initialize responseBasedOriginErrorDetectionParametersARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResponseBasedOriginErrorDetectionParametersARMGenerator() gopter.Gen {
	if responseBasedOriginErrorDetectionParametersARMGenerator != nil {
		return responseBasedOriginErrorDetectionParametersARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersARM(generators)
	responseBasedOriginErrorDetectionParametersARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParametersARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersARM(generators)
	AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersARM(generators)
	responseBasedOriginErrorDetectionParametersARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParametersARM{}), generators)

	return responseBasedOriginErrorDetectionParametersARMGenerator
}

// AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersARM(gens map[string]gopter.Gen) {
	gens["ResponseBasedDetectedErrorTypes"] = gen.PtrOf(gen.OneConstOf(ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypesNone, ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypesTcpAndHttpErrors, ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypesTcpErrorsOnly))
	gens["ResponseBasedFailoverThresholdPercentage"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersARM(gens map[string]gopter.Gen) {
	gens["HttpErrorRanges"] = gen.SliceOf(HttpErrorRangeParametersARMGenerator())
}

func Test_HttpErrorRangeParametersARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpErrorRangeParametersARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpErrorRangeParametersARM, HttpErrorRangeParametersARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpErrorRangeParametersARM runs a test to see if a specific instance of HttpErrorRangeParametersARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpErrorRangeParametersARM(subject HttpErrorRangeParametersARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpErrorRangeParametersARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpErrorRangeParametersARM instances for property testing - lazily instantiated by
// HttpErrorRangeParametersARMGenerator()
var httpErrorRangeParametersARMGenerator gopter.Gen

// HttpErrorRangeParametersARMGenerator returns a generator of HttpErrorRangeParametersARM instances for property testing.
func HttpErrorRangeParametersARMGenerator() gopter.Gen {
	if httpErrorRangeParametersARMGenerator != nil {
		return httpErrorRangeParametersARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpErrorRangeParametersARM(generators)
	httpErrorRangeParametersARMGenerator = gen.Struct(reflect.TypeOf(HttpErrorRangeParametersARM{}), generators)

	return httpErrorRangeParametersARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpErrorRangeParametersARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpErrorRangeParametersARM(gens map[string]gopter.Gen) {
	gens["Begin"] = gen.PtrOf(gen.Int())
	gens["End"] = gen.PtrOf(gen.Int())
}
