// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Profiles_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Profiles_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfilesSpecARM, ProfilesSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfilesSpecARM runs a test to see if a specific instance of Profiles_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfilesSpecARM(subject Profiles_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Profiles_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Profiles_SpecARM instances for property testing - lazily instantiated by ProfilesSpecARMGenerator()
var profilesSpecARMGenerator gopter.Gen

// ProfilesSpecARMGenerator returns a generator of Profiles_SpecARM instances for property testing.
// We first initialize profilesSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ProfilesSpecARMGenerator() gopter.Gen {
	if profilesSpecARMGenerator != nil {
		return profilesSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfilesSpecARM(generators)
	profilesSpecARMGenerator = gen.Struct(reflect.TypeOf(Profiles_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfilesSpecARM(generators)
	AddRelatedPropertyGeneratorsForProfilesSpecARM(generators)
	profilesSpecARMGenerator = gen.Struct(reflect.TypeOf(Profiles_SpecARM{}), generators)

	return profilesSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForProfilesSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfilesSpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProfilesSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfilesSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ProfilePropertiesARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuARMGenerator())
}

func Test_ProfilePropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ProfilePropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfilePropertiesARM, ProfilePropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfilePropertiesARM runs a test to see if a specific instance of ProfilePropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfilePropertiesARM(subject ProfilePropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ProfilePropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ProfilePropertiesARM instances for property testing - lazily instantiated by
// ProfilePropertiesARMGenerator()
var profilePropertiesARMGenerator gopter.Gen

// ProfilePropertiesARMGenerator returns a generator of ProfilePropertiesARM instances for property testing.
func ProfilePropertiesARMGenerator() gopter.Gen {
	if profilePropertiesARMGenerator != nil {
		return profilePropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfilePropertiesARM(generators)
	profilePropertiesARMGenerator = gen.Struct(reflect.TypeOf(ProfilePropertiesARM{}), generators)

	return profilePropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForProfilePropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfilePropertiesARM(gens map[string]gopter.Gen) {
	gens["OriginResponseTimeoutSeconds"] = gen.PtrOf(gen.Int())
}

func Test_SkuARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuARM, SkuARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuARM runs a test to see if a specific instance of SkuARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuARM(subject SkuARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuARM instances for property testing - lazily instantiated by SkuARMGenerator()
var skuARMGenerator gopter.Gen

// SkuARMGenerator returns a generator of SkuARM instances for property testing.
func SkuARMGenerator() gopter.Gen {
	if skuARMGenerator != nil {
		return skuARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuARM(generators)
	skuARMGenerator = gen.Struct(reflect.TypeOf(SkuARM{}), generators)

	return skuARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		SkuName_CustomVerizon,
		SkuName_PremiumAzureFrontDoor,
		SkuName_PremiumVerizon,
		SkuName_Standard955BandWidthChinaCdn,
		SkuName_StandardAkamai,
		SkuName_StandardAvgBandWidthChinaCdn,
		SkuName_StandardAzureFrontDoor,
		SkuName_StandardChinaCdn,
		SkuName_StandardMicrosoft,
		SkuName_StandardPlus955BandWidthChinaCdn,
		SkuName_StandardPlusAvgBandWidthChinaCdn,
		SkuName_StandardPlusChinaCdn,
		SkuName_StandardVerizon))
}
