// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Endpoint_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Endpoint_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpoint_STATUS_ARM, Endpoint_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpoint_STATUS_ARM runs a test to see if a specific instance of Endpoint_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpoint_STATUS_ARM(subject Endpoint_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Endpoint_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Endpoint_STATUS_ARM instances for property testing - lazily instantiated by
// Endpoint_STATUS_ARMGenerator()
var endpoint_STATUS_ARMGenerator gopter.Gen

// Endpoint_STATUS_ARMGenerator returns a generator of Endpoint_STATUS_ARM instances for property testing.
// We first initialize endpoint_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Endpoint_STATUS_ARMGenerator() gopter.Gen {
	if endpoint_STATUS_ARMGenerator != nil {
		return endpoint_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpoint_STATUS_ARM(generators)
	endpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Endpoint_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpoint_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEndpoint_STATUS_ARM(generators)
	endpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Endpoint_STATUS_ARM{}), generators)

	return endpoint_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EndpointProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_EndpointProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_STATUS_ARM, EndpointProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_STATUS_ARM runs a test to see if a specific instance of EndpointProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_STATUS_ARM(subject EndpointProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUS_ARM instances for property testing - lazily instantiated by
// EndpointProperties_STATUS_ARMGenerator()
var endpointProperties_STATUS_ARMGenerator gopter.Gen

// EndpointProperties_STATUS_ARMGenerator returns a generator of EndpointProperties_STATUS_ARM instances for property testing.
// We first initialize endpointProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_STATUS_ARMGenerator() gopter.Gen {
	if endpointProperties_STATUS_ARMGenerator != nil {
		return endpointProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM(generators)
	endpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_ARM(generators)
	endpointProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_ARM{}), generators)

	return endpointProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ContentTypesToCompress"] = gen.SliceOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsHttpAllowed"] = gen.PtrOf(gen.Bool())
	gens["IsHttpsAllowed"] = gen.PtrOf(gen.Bool())
	gens["OptimizationType"] = gen.PtrOf(gen.OneConstOf(
		OptimizationType_STATUS_DynamicSiteAcceleration,
		OptimizationType_STATUS_GeneralMediaStreaming,
		OptimizationType_STATUS_GeneralWebDelivery,
		OptimizationType_STATUS_LargeFileDownload,
		OptimizationType_STATUS_VideoOnDemandMediaStreaming))
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["OriginPath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_ProvisioningState_STATUS_Creating,
		EndpointProperties_ProvisioningState_STATUS_Deleting,
		EndpointProperties_ProvisioningState_STATUS_Failed,
		EndpointProperties_ProvisioningState_STATUS_Succeeded,
		EndpointProperties_ProvisioningState_STATUS_Updating))
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		QueryStringCachingBehavior_STATUS_BypassCaching,
		QueryStringCachingBehavior_STATUS_IgnoreQueryString,
		QueryStringCachingBehavior_STATUS_NotSet,
		QueryStringCachingBehavior_STATUS_UseQueryString))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_ResourceState_STATUS_Creating,
		EndpointProperties_ResourceState_STATUS_Deleting,
		EndpointProperties_ResourceState_STATUS_Running,
		EndpointProperties_ResourceState_STATUS_Starting,
		EndpointProperties_ResourceState_STATUS_Stopped,
		EndpointProperties_ResourceState_STATUS_Stopping))
}

// AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomDomains"] = gen.SliceOf(CustomDomain_STATUS_SubResourceEmbedded_ARMGenerator())
	gens["DefaultOriginGroup"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
	gens["DeliveryPolicy"] = gen.PtrOf(EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator())
	gens["GeoFilters"] = gen.SliceOf(GeoFilter_STATUS_ARMGenerator())
	gens["OriginGroups"] = gen.SliceOf(DeepCreatedOriginGroup_STATUS_ARMGenerator())
	gens["Origins"] = gen.SliceOf(DeepCreatedOrigin_STATUS_ARMGenerator())
	gens["UrlSigningKeys"] = gen.SliceOf(UrlSigningKey_STATUS_ARMGenerator())
	gens["WebApplicationFirewallPolicyLink"] = gen.PtrOf(EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_Application,
		IdentityType_STATUS_Key,
		IdentityType_STATUS_ManagedIdentity,
		IdentityType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_Application,
		IdentityType_STATUS_Key,
		IdentityType_STATUS_ManagedIdentity,
		IdentityType_STATUS_User))
}

func Test_CustomDomain_STATUS_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomain_STATUS_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomain_STATUS_SubResourceEmbedded_ARM, CustomDomain_STATUS_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomain_STATUS_SubResourceEmbedded_ARM runs a test to see if a specific instance of CustomDomain_STATUS_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomain_STATUS_SubResourceEmbedded_ARM(subject CustomDomain_STATUS_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomain_STATUS_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomain_STATUS_SubResourceEmbedded_ARM instances for property testing - lazily instantiated by
// CustomDomain_STATUS_SubResourceEmbedded_ARMGenerator()
var customDomain_STATUS_SubResourceEmbedded_ARMGenerator gopter.Gen

// CustomDomain_STATUS_SubResourceEmbedded_ARMGenerator returns a generator of CustomDomain_STATUS_SubResourceEmbedded_ARM instances for property testing.
// We first initialize customDomain_STATUS_SubResourceEmbedded_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomDomain_STATUS_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if customDomain_STATUS_SubResourceEmbedded_ARMGenerator != nil {
		return customDomain_STATUS_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbedded_ARM(generators)
	customDomain_STATUS_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_STATUS_SubResourceEmbedded_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbedded_ARM(generators)
	AddRelatedPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbedded_ARM(generators)
	customDomain_STATUS_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_STATUS_SubResourceEmbedded_ARM{}), generators)

	return customDomain_STATUS_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_DeepCreatedOrigin_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOrigin_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOrigin_STATUS_ARM, DeepCreatedOrigin_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOrigin_STATUS_ARM runs a test to see if a specific instance of DeepCreatedOrigin_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOrigin_STATUS_ARM(subject DeepCreatedOrigin_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOrigin_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOrigin_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedOrigin_STATUS_ARMGenerator()
var deepCreatedOrigin_STATUS_ARMGenerator gopter.Gen

// DeepCreatedOrigin_STATUS_ARMGenerator returns a generator of DeepCreatedOrigin_STATUS_ARM instances for property testing.
// We first initialize deepCreatedOrigin_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOrigin_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedOrigin_STATUS_ARMGenerator != nil {
		return deepCreatedOrigin_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(generators)
	deepCreatedOrigin_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(generators)
	deepCreatedOrigin_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUS_ARM{}), generators)

	return deepCreatedOrigin_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginProperties_STATUS_ARMGenerator())
}

func Test_DeepCreatedOriginGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroup_STATUS_ARM, DeepCreatedOriginGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroup_STATUS_ARM runs a test to see if a specific instance of DeepCreatedOriginGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroup_STATUS_ARM(subject DeepCreatedOriginGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroup_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroup_STATUS_ARMGenerator()
var deepCreatedOriginGroup_STATUS_ARMGenerator gopter.Gen

// DeepCreatedOriginGroup_STATUS_ARMGenerator returns a generator of DeepCreatedOriginGroup_STATUS_ARM instances for property testing.
// We first initialize deepCreatedOriginGroup_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroup_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedOriginGroup_STATUS_ARMGenerator != nil {
		return deepCreatedOriginGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(generators)
	deepCreatedOriginGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(generators)
	deepCreatedOriginGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUS_ARM{}), generators)

	return deepCreatedOriginGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginGroupProperties_STATUS_ARMGenerator())
}

func Test_EndpointProperties_DeliveryPolicy_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_DeliveryPolicy_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_DeliveryPolicy_STATUS_ARM, EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_DeliveryPolicy_STATUS_ARM runs a test to see if a specific instance of EndpointProperties_DeliveryPolicy_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_DeliveryPolicy_STATUS_ARM(subject EndpointProperties_DeliveryPolicy_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_DeliveryPolicy_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_DeliveryPolicy_STATUS_ARM instances for property testing - lazily instantiated by
// EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator()
var endpointProperties_DeliveryPolicy_STATUS_ARMGenerator gopter.Gen

// EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator returns a generator of EndpointProperties_DeliveryPolicy_STATUS_ARM instances for property testing.
// We first initialize endpointProperties_DeliveryPolicy_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_DeliveryPolicy_STATUS_ARMGenerator() gopter.Gen {
	if endpointProperties_DeliveryPolicy_STATUS_ARMGenerator != nil {
		return endpointProperties_DeliveryPolicy_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(generators)
	endpointProperties_DeliveryPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_DeliveryPolicy_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(generators)
	endpointProperties_DeliveryPolicy_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_DeliveryPolicy_STATUS_ARM{}), generators)

	return endpointProperties_DeliveryPolicy_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_DeliveryPolicy_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(DeliveryRule_STATUS_ARMGenerator())
}

func Test_EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM, EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM runs a test to see if a specific instance of EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM(subject EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM instances for property testing - lazily
// instantiated by EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator()
var endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator gopter.Gen

// EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator returns a generator of EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM instances for property testing.
func EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator() gopter.Gen {
	if endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator != nil {
		return endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM(generators)
	endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM{}), generators)

	return endpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_WebApplicationFirewallPolicyLink_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_GeoFilter_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GeoFilter_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGeoFilter_STATUS_ARM, GeoFilter_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGeoFilter_STATUS_ARM runs a test to see if a specific instance of GeoFilter_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGeoFilter_STATUS_ARM(subject GeoFilter_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GeoFilter_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GeoFilter_STATUS_ARM instances for property testing - lazily instantiated by
// GeoFilter_STATUS_ARMGenerator()
var geoFilter_STATUS_ARMGenerator gopter.Gen

// GeoFilter_STATUS_ARMGenerator returns a generator of GeoFilter_STATUS_ARM instances for property testing.
func GeoFilter_STATUS_ARMGenerator() gopter.Gen {
	if geoFilter_STATUS_ARMGenerator != nil {
		return geoFilter_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGeoFilter_STATUS_ARM(generators)
	geoFilter_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(GeoFilter_STATUS_ARM{}), generators)

	return geoFilter_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForGeoFilter_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGeoFilter_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(GeoFilter_Action_STATUS_Allow, GeoFilter_Action_STATUS_Block))
	gens["CountryCodes"] = gen.SliceOf(gen.AlphaString())
	gens["RelativePath"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceReference_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_STATUS_ARM, ResourceReference_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_STATUS_ARM runs a test to see if a specific instance of ResourceReference_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_STATUS_ARM(subject ResourceReference_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceReference_STATUS_ARMGenerator()
var resourceReference_STATUS_ARMGenerator gopter.Gen

// ResourceReference_STATUS_ARMGenerator returns a generator of ResourceReference_STATUS_ARM instances for property testing.
func ResourceReference_STATUS_ARMGenerator() gopter.Gen {
	if resourceReference_STATUS_ARMGenerator != nil {
		return resourceReference_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM(generators)
	resourceReference_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_STATUS_ARM{}), generators)

	return resourceReference_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UrlSigningKey_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningKey_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningKey_STATUS_ARM, UrlSigningKey_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningKey_STATUS_ARM runs a test to see if a specific instance of UrlSigningKey_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningKey_STATUS_ARM(subject UrlSigningKey_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningKey_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningKey_STATUS_ARM instances for property testing - lazily instantiated by
// UrlSigningKey_STATUS_ARMGenerator()
var urlSigningKey_STATUS_ARMGenerator gopter.Gen

// UrlSigningKey_STATUS_ARMGenerator returns a generator of UrlSigningKey_STATUS_ARM instances for property testing.
// We first initialize urlSigningKey_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlSigningKey_STATUS_ARMGenerator() gopter.Gen {
	if urlSigningKey_STATUS_ARMGenerator != nil {
		return urlSigningKey_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKey_STATUS_ARM(generators)
	urlSigningKey_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKey_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForUrlSigningKey_STATUS_ARM(generators)
	urlSigningKey_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUS_ARM{}), generators)

	return urlSigningKey_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningKey_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningKey_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUrlSigningKey_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlSigningKey_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["KeySourceParameters"] = gen.PtrOf(KeyVaultSigningKeyParameters_STATUS_ARMGenerator())
}

func Test_DeepCreatedOriginGroupProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroupProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUS_ARM, DeepCreatedOriginGroupProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUS_ARM runs a test to see if a specific instance of DeepCreatedOriginGroupProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUS_ARM(subject DeepCreatedOriginGroupProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroupProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroupProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupProperties_STATUS_ARMGenerator()
var deepCreatedOriginGroupProperties_STATUS_ARMGenerator gopter.Gen

// DeepCreatedOriginGroupProperties_STATUS_ARMGenerator returns a generator of DeepCreatedOriginGroupProperties_STATUS_ARM instances for property testing.
// We first initialize deepCreatedOriginGroupProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupProperties_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupProperties_STATUS_ARMGenerator != nil {
		return deepCreatedOriginGroupProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(generators)
	deepCreatedOriginGroupProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(generators)
	deepCreatedOriginGroupProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUS_ARM{}), generators)

	return deepCreatedOriginGroupProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["TrafficRestorationTimeToHealedOrNewEndpointsInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HealthProbeSettings"] = gen.PtrOf(HealthProbeParameters_STATUS_ARMGenerator())
	gens["Origins"] = gen.SliceOf(ResourceReference_STATUS_ARMGenerator())
	gens["ResponseBasedOriginErrorDetectionSettings"] = gen.PtrOf(ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator())
}

func Test_DeepCreatedOriginProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginProperties_STATUS_ARM, DeepCreatedOriginProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginProperties_STATUS_ARM runs a test to see if a specific instance of DeepCreatedOriginProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginProperties_STATUS_ARM(subject DeepCreatedOriginProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DeepCreatedOriginProperties_STATUS_ARMGenerator()
var deepCreatedOriginProperties_STATUS_ARMGenerator gopter.Gen

// DeepCreatedOriginProperties_STATUS_ARMGenerator returns a generator of DeepCreatedOriginProperties_STATUS_ARM instances for property testing.
func DeepCreatedOriginProperties_STATUS_ARMGenerator() gopter.Gen {
	if deepCreatedOriginProperties_STATUS_ARMGenerator != nil {
		return deepCreatedOriginProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUS_ARM(generators)
	deepCreatedOriginProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginProperties_STATUS_ARM{}), generators)

	return deepCreatedOriginProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["PrivateEndpointStatus"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointStatus_STATUS_Approved,
		PrivateEndpointStatus_STATUS_Disconnected,
		PrivateEndpointStatus_STATUS_Pending,
		PrivateEndpointStatus_STATUS_Rejected,
		PrivateEndpointStatus_STATUS_Timeout))
	gens["PrivateLinkAlias"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkApprovalMessage"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

func Test_DeliveryRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRule_STATUS_ARM, DeliveryRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRule_STATUS_ARM runs a test to see if a specific instance of DeliveryRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRule_STATUS_ARM(subject DeliveryRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRule_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRule_STATUS_ARMGenerator()
var deliveryRule_STATUS_ARMGenerator gopter.Gen

// DeliveryRule_STATUS_ARMGenerator returns a generator of DeliveryRule_STATUS_ARM instances for property testing.
// We first initialize deliveryRule_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRule_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRule_STATUS_ARMGenerator != nil {
		return deliveryRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRule_STATUS_ARM(generators)
	deliveryRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRule_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRule_STATUS_ARM(generators)
	deliveryRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUS_ARM{}), generators)

	return deliveryRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Order"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeliveryRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(DeliveryRuleAction_STATUS_ARMGenerator())
	gens["Conditions"] = gen.SliceOf(DeliveryRuleCondition_STATUS_ARMGenerator())
}

func Test_KeyVaultSigningKeyParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultSigningKeyParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUS_ARM, KeyVaultSigningKeyParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUS_ARM runs a test to see if a specific instance of KeyVaultSigningKeyParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUS_ARM(subject KeyVaultSigningKeyParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultSigningKeyParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultSigningKeyParameters_STATUS_ARM instances for property testing - lazily instantiated by
// KeyVaultSigningKeyParameters_STATUS_ARMGenerator()
var keyVaultSigningKeyParameters_STATUS_ARMGenerator gopter.Gen

// KeyVaultSigningKeyParameters_STATUS_ARMGenerator returns a generator of KeyVaultSigningKeyParameters_STATUS_ARM instances for property testing.
func KeyVaultSigningKeyParameters_STATUS_ARMGenerator() gopter.Gen {
	if keyVaultSigningKeyParameters_STATUS_ARMGenerator != nil {
		return keyVaultSigningKeyParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUS_ARM(generators)
	keyVaultSigningKeyParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultSigningKeyParameters_STATUS_ARM{}), generators)

	return keyVaultSigningKeyParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ResourceGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretVersion"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(KeyVaultSigningKeyParameters_TypeName_STATUS_KeyVaultSigningKeyParameters))
	gens["VaultName"] = gen.PtrOf(gen.AlphaString())
}

func Test_DeliveryRuleAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleAction_STATUS_ARM, DeliveryRuleAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleAction_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleAction_STATUS_ARM(subject DeliveryRuleAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleAction_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleAction_STATUS_ARMGenerator()
var deliveryRuleAction_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleAction_STATUS_ARMGenerator returns a generator of DeliveryRuleAction_STATUS_ARM instances for property testing.
func DeliveryRuleAction_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleAction_STATUS_ARMGenerator != nil {
		return deliveryRuleAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleAction_STATUS_ARM(generators)
	deliveryRuleAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleAction_STATUS_ARM{}), generators)

	return deliveryRuleAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleAction_Name_STATUS_CacheExpiration,
		DeliveryRuleAction_Name_STATUS_CacheKeyQueryString,
		DeliveryRuleAction_Name_STATUS_ModifyRequestHeader,
		DeliveryRuleAction_Name_STATUS_ModifyResponseHeader,
		DeliveryRuleAction_Name_STATUS_OriginGroupOverride,
		DeliveryRuleAction_Name_STATUS_RouteConfigurationOverride,
		DeliveryRuleAction_Name_STATUS_UrlRedirect,
		DeliveryRuleAction_Name_STATUS_UrlRewrite,
		DeliveryRuleAction_Name_STATUS_UrlSigning))
}

func Test_DeliveryRuleCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleCondition_STATUS_ARM, DeliveryRuleCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleCondition_STATUS_ARM runs a test to see if a specific instance of DeliveryRuleCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleCondition_STATUS_ARM(subject DeliveryRuleCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleCondition_STATUS_ARM instances for property testing - lazily instantiated by
// DeliveryRuleCondition_STATUS_ARMGenerator()
var deliveryRuleCondition_STATUS_ARMGenerator gopter.Gen

// DeliveryRuleCondition_STATUS_ARMGenerator returns a generator of DeliveryRuleCondition_STATUS_ARM instances for property testing.
func DeliveryRuleCondition_STATUS_ARMGenerator() gopter.Gen {
	if deliveryRuleCondition_STATUS_ARMGenerator != nil {
		return deliveryRuleCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleCondition_STATUS_ARM(generators)
	deliveryRuleCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCondition_STATUS_ARM{}), generators)

	return deliveryRuleCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleCondition_Name_STATUS_ClientPort,
		DeliveryRuleCondition_Name_STATUS_Cookies,
		DeliveryRuleCondition_Name_STATUS_HostName,
		DeliveryRuleCondition_Name_STATUS_HttpVersion,
		DeliveryRuleCondition_Name_STATUS_IsDevice,
		DeliveryRuleCondition_Name_STATUS_PostArgs,
		DeliveryRuleCondition_Name_STATUS_QueryString,
		DeliveryRuleCondition_Name_STATUS_RemoteAddress,
		DeliveryRuleCondition_Name_STATUS_RequestBody,
		DeliveryRuleCondition_Name_STATUS_RequestHeader,
		DeliveryRuleCondition_Name_STATUS_RequestMethod,
		DeliveryRuleCondition_Name_STATUS_RequestScheme,
		DeliveryRuleCondition_Name_STATUS_RequestUri,
		DeliveryRuleCondition_Name_STATUS_ServerPort,
		DeliveryRuleCondition_Name_STATUS_SocketAddr,
		DeliveryRuleCondition_Name_STATUS_SslProtocol,
		DeliveryRuleCondition_Name_STATUS_UrlFileExtension,
		DeliveryRuleCondition_Name_STATUS_UrlFileName,
		DeliveryRuleCondition_Name_STATUS_UrlPath))
}

func Test_HealthProbeParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HealthProbeParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHealthProbeParameters_STATUS_ARM, HealthProbeParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHealthProbeParameters_STATUS_ARM runs a test to see if a specific instance of HealthProbeParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHealthProbeParameters_STATUS_ARM(subject HealthProbeParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HealthProbeParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HealthProbeParameters_STATUS_ARM instances for property testing - lazily instantiated by
// HealthProbeParameters_STATUS_ARMGenerator()
var healthProbeParameters_STATUS_ARMGenerator gopter.Gen

// HealthProbeParameters_STATUS_ARMGenerator returns a generator of HealthProbeParameters_STATUS_ARM instances for property testing.
func HealthProbeParameters_STATUS_ARMGenerator() gopter.Gen {
	if healthProbeParameters_STATUS_ARMGenerator != nil {
		return healthProbeParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUS_ARM(generators)
	healthProbeParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HealthProbeParameters_STATUS_ARM{}), generators)

	return healthProbeParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProbeIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbeProtocol"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeProtocol_STATUS_Http, HealthProbeParameters_ProbeProtocol_STATUS_Https, HealthProbeParameters_ProbeProtocol_STATUS_NotSet))
	gens["ProbeRequestType"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeRequestType_STATUS_GET, HealthProbeParameters_ProbeRequestType_STATUS_HEAD, HealthProbeParameters_ProbeRequestType_STATUS_NotSet))
}

func Test_ResponseBasedOriginErrorDetectionParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResponseBasedOriginErrorDetectionParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUS_ARM, ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUS_ARM runs a test to see if a specific instance of ResponseBasedOriginErrorDetectionParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(subject ResponseBasedOriginErrorDetectionParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResponseBasedOriginErrorDetectionParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResponseBasedOriginErrorDetectionParameters_STATUS_ARM instances for property testing - lazily
// instantiated by ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator()
var responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator gopter.Gen

// ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator returns a generator of ResponseBasedOriginErrorDetectionParameters_STATUS_ARM instances for property testing.
// We first initialize responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResponseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator() gopter.Gen {
	if responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator != nil {
		return responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(generators)
	responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(generators)
	responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUS_ARM{}), generators)

	return responseBasedOriginErrorDetectionParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ResponseBasedDetectedErrorTypes"] = gen.PtrOf(gen.OneConstOf(ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS_None, ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS_TcpAndHttpErrors, ResponseBasedOriginErrorDetectionParameters_ResponseBasedDetectedErrorTypes_STATUS_TcpErrorsOnly))
	gens["ResponseBasedFailoverThresholdPercentage"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HttpErrorRanges"] = gen.SliceOf(HttpErrorRangeParameters_STATUS_ARMGenerator())
}

func Test_HttpErrorRangeParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpErrorRangeParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpErrorRangeParameters_STATUS_ARM, HttpErrorRangeParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpErrorRangeParameters_STATUS_ARM runs a test to see if a specific instance of HttpErrorRangeParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpErrorRangeParameters_STATUS_ARM(subject HttpErrorRangeParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpErrorRangeParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpErrorRangeParameters_STATUS_ARM instances for property testing - lazily instantiated by
// HttpErrorRangeParameters_STATUS_ARMGenerator()
var httpErrorRangeParameters_STATUS_ARMGenerator gopter.Gen

// HttpErrorRangeParameters_STATUS_ARMGenerator returns a generator of HttpErrorRangeParameters_STATUS_ARM instances for property testing.
func HttpErrorRangeParameters_STATUS_ARMGenerator() gopter.Gen {
	if httpErrorRangeParameters_STATUS_ARMGenerator != nil {
		return httpErrorRangeParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUS_ARM(generators)
	httpErrorRangeParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HttpErrorRangeParameters_STATUS_ARM{}), generators)

	return httpErrorRangeParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Begin"] = gen.PtrOf(gen.Int())
	gens["End"] = gen.PtrOf(gen.Int())
}
