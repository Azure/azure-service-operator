// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Endpoint_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Endpoint_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpoint_STATUSARM, Endpoint_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpoint_STATUSARM runs a test to see if a specific instance of Endpoint_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpoint_STATUSARM(subject Endpoint_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Endpoint_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Endpoint_STATUSARM instances for property testing - lazily instantiated by Endpoint_STATUSARMGenerator()
var endpoint_STATUSARMGenerator gopter.Gen

// Endpoint_STATUSARMGenerator returns a generator of Endpoint_STATUSARM instances for property testing.
// We first initialize endpoint_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Endpoint_STATUSARMGenerator() gopter.Gen {
	if endpoint_STATUSARMGenerator != nil {
		return endpoint_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpoint_STATUSARM(generators)
	endpoint_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Endpoint_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpoint_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForEndpoint_STATUSARM(generators)
	endpoint_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Endpoint_STATUSARM{}), generators)

	return endpoint_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpoint_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpoint_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpoint_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpoint_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EndpointProperties_STATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_EndpointProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_STATUSARM, EndpointProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_STATUSARM runs a test to see if a specific instance of EndpointProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_STATUSARM(subject EndpointProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUSARM instances for property testing - lazily instantiated by
// EndpointProperties_STATUSARMGenerator()
var endpointProperties_STATUSARMGenerator gopter.Gen

// EndpointProperties_STATUSARMGenerator returns a generator of EndpointProperties_STATUSARM instances for property testing.
// We first initialize endpointProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_STATUSARMGenerator() gopter.Gen {
	if endpointProperties_STATUSARMGenerator != nil {
		return endpointProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUSARM(generators)
	endpointProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_STATUSARM(generators)
	endpointProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUSARM{}), generators)

	return endpointProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["ContentTypesToCompress"] = gen.SliceOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsHttpAllowed"] = gen.PtrOf(gen.Bool())
	gens["IsHttpsAllowed"] = gen.PtrOf(gen.Bool())
	gens["OptimizationType"] = gen.PtrOf(gen.OneConstOf(
		OptimizationType_STATUS_DynamicSiteAcceleration,
		OptimizationType_STATUS_GeneralMediaStreaming,
		OptimizationType_STATUS_GeneralWebDelivery,
		OptimizationType_STATUS_LargeFileDownload,
		OptimizationType_STATUS_VideoOnDemandMediaStreaming))
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["OriginPath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_STATUS_ProvisioningState_Creating,
		EndpointProperties_STATUS_ProvisioningState_Deleting,
		EndpointProperties_STATUS_ProvisioningState_Failed,
		EndpointProperties_STATUS_ProvisioningState_Succeeded,
		EndpointProperties_STATUS_ProvisioningState_Updating))
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		QueryStringCachingBehavior_STATUS_BypassCaching,
		QueryStringCachingBehavior_STATUS_IgnoreQueryString,
		QueryStringCachingBehavior_STATUS_NotSet,
		QueryStringCachingBehavior_STATUS_UseQueryString))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		EndpointProperties_STATUS_ResourceState_Creating,
		EndpointProperties_STATUS_ResourceState_Deleting,
		EndpointProperties_STATUS_ResourceState_Running,
		EndpointProperties_STATUS_ResourceState_Starting,
		EndpointProperties_STATUS_ResourceState_Stopped,
		EndpointProperties_STATUS_ResourceState_Stopping))
}

// AddRelatedPropertyGeneratorsForEndpointProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["CustomDomains"] = gen.SliceOf(CustomDomain_STATUS_SubResourceEmbeddedARMGenerator())
	gens["DefaultOriginGroup"] = gen.PtrOf(ResourceReference_STATUSARMGenerator())
	gens["DeliveryPolicy"] = gen.PtrOf(EndpointProperties_STATUS_DeliveryPolicyARMGenerator())
	gens["GeoFilters"] = gen.SliceOf(GeoFilter_STATUSARMGenerator())
	gens["OriginGroups"] = gen.SliceOf(DeepCreatedOriginGroup_STATUSARMGenerator())
	gens["Origins"] = gen.SliceOf(DeepCreatedOrigin_STATUSARMGenerator())
	gens["UrlSigningKeys"] = gen.SliceOf(UrlSigningKey_STATUSARMGenerator())
	gens["WebApplicationFirewallPolicyLink"] = gen.PtrOf(EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator())
}

func Test_SystemData_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUSARM, SystemData_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUSARM runs a test to see if a specific instance of SystemData_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUSARM(subject SystemData_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUSARM instances for property testing - lazily instantiated by
// SystemData_STATUSARMGenerator()
var systemData_STATUSARMGenerator gopter.Gen

// SystemData_STATUSARMGenerator returns a generator of SystemData_STATUSARM instances for property testing.
func SystemData_STATUSARMGenerator() gopter.Gen {
	if systemData_STATUSARMGenerator != nil {
		return systemData_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUSARM(generators)
	systemData_STATUSARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUSARM{}), generators)

	return systemData_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUSARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_Application,
		IdentityType_STATUS_Key,
		IdentityType_STATUS_ManagedIdentity,
		IdentityType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_Application,
		IdentityType_STATUS_Key,
		IdentityType_STATUS_ManagedIdentity,
		IdentityType_STATUS_User))
}

func Test_CustomDomain_STATUS_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomain_STATUS_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomain_STATUS_SubResourceEmbeddedARM, CustomDomain_STATUS_SubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomain_STATUS_SubResourceEmbeddedARM runs a test to see if a specific instance of CustomDomain_STATUS_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomain_STATUS_SubResourceEmbeddedARM(subject CustomDomain_STATUS_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomain_STATUS_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomain_STATUS_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
// CustomDomain_STATUS_SubResourceEmbeddedARMGenerator()
var customDomain_STATUS_SubResourceEmbeddedARMGenerator gopter.Gen

// CustomDomain_STATUS_SubResourceEmbeddedARMGenerator returns a generator of CustomDomain_STATUS_SubResourceEmbeddedARM instances for property testing.
// We first initialize customDomain_STATUS_SubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomDomain_STATUS_SubResourceEmbeddedARMGenerator() gopter.Gen {
	if customDomain_STATUS_SubResourceEmbeddedARMGenerator != nil {
		return customDomain_STATUS_SubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbeddedARM(generators)
	customDomain_STATUS_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_STATUS_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbeddedARM(generators)
	customDomain_STATUS_SubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_STATUS_SubResourceEmbeddedARM{}), generators)

	return customDomain_STATUS_SubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomDomain_STATUS_SubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSARMGenerator())
}

func Test_DeepCreatedOrigin_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOrigin_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOrigin_STATUSARM, DeepCreatedOrigin_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOrigin_STATUSARM runs a test to see if a specific instance of DeepCreatedOrigin_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOrigin_STATUSARM(subject DeepCreatedOrigin_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOrigin_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOrigin_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOrigin_STATUSARMGenerator()
var deepCreatedOrigin_STATUSARMGenerator gopter.Gen

// DeepCreatedOrigin_STATUSARMGenerator returns a generator of DeepCreatedOrigin_STATUSARM instances for property testing.
// We first initialize deepCreatedOrigin_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOrigin_STATUSARMGenerator() gopter.Gen {
	if deepCreatedOrigin_STATUSARMGenerator != nil {
		return deepCreatedOrigin_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(generators)
	deepCreatedOrigin_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(generators)
	deepCreatedOrigin_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUSARM{}), generators)

	return deepCreatedOrigin_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOrigin_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginProperties_STATUSARMGenerator())
}

func Test_DeepCreatedOriginGroup_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroup_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroup_STATUSARM, DeepCreatedOriginGroup_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroup_STATUSARM runs a test to see if a specific instance of DeepCreatedOriginGroup_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroup_STATUSARM(subject DeepCreatedOriginGroup_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroup_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroup_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroup_STATUSARMGenerator()
var deepCreatedOriginGroup_STATUSARMGenerator gopter.Gen

// DeepCreatedOriginGroup_STATUSARMGenerator returns a generator of DeepCreatedOriginGroup_STATUSARM instances for property testing.
// We first initialize deepCreatedOriginGroup_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroup_STATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginGroup_STATUSARMGenerator != nil {
		return deepCreatedOriginGroup_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(generators)
	deepCreatedOriginGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(generators)
	deepCreatedOriginGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUSARM{}), generators)

	return deepCreatedOriginGroup_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginGroupProperties_STATUSARMGenerator())
}

func Test_EndpointProperties_STATUS_DeliveryPolicyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUS_DeliveryPolicyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_STATUS_DeliveryPolicyARM, EndpointProperties_STATUS_DeliveryPolicyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_STATUS_DeliveryPolicyARM runs a test to see if a specific instance of EndpointProperties_STATUS_DeliveryPolicyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_STATUS_DeliveryPolicyARM(subject EndpointProperties_STATUS_DeliveryPolicyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUS_DeliveryPolicyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUS_DeliveryPolicyARM instances for property testing - lazily instantiated by
// EndpointProperties_STATUS_DeliveryPolicyARMGenerator()
var endpointProperties_STATUS_DeliveryPolicyARMGenerator gopter.Gen

// EndpointProperties_STATUS_DeliveryPolicyARMGenerator returns a generator of EndpointProperties_STATUS_DeliveryPolicyARM instances for property testing.
// We first initialize endpointProperties_STATUS_DeliveryPolicyARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointProperties_STATUS_DeliveryPolicyARMGenerator() gopter.Gen {
	if endpointProperties_STATUS_DeliveryPolicyARMGenerator != nil {
		return endpointProperties_STATUS_DeliveryPolicyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_DeliveryPolicyARM(generators)
	endpointProperties_STATUS_DeliveryPolicyARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_DeliveryPolicyARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_DeliveryPolicyARM(generators)
	AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_DeliveryPolicyARM(generators)
	endpointProperties_STATUS_DeliveryPolicyARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_DeliveryPolicyARM{}), generators)

	return endpointProperties_STATUS_DeliveryPolicyARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_DeliveryPolicyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_DeliveryPolicyARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_DeliveryPolicyARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointProperties_STATUS_DeliveryPolicyARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(DeliveryRule_STATUSARMGenerator())
}

func Test_EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM, EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM runs a test to see if a specific instance of EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM(subject EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM instances for property testing - lazily
// instantiated by EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator()
var endpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator gopter.Gen

// EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator returns a generator of EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM instances for property testing.
func EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator() gopter.Gen {
	if endpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator != nil {
		return endpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM(generators)
	endpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM{}), generators)

	return endpointProperties_STATUS_WebApplicationFirewallPolicyLinkARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_GeoFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GeoFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGeoFilter_STATUSARM, GeoFilter_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGeoFilter_STATUSARM runs a test to see if a specific instance of GeoFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGeoFilter_STATUSARM(subject GeoFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GeoFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GeoFilter_STATUSARM instances for property testing - lazily instantiated by
// GeoFilter_STATUSARMGenerator()
var geoFilter_STATUSARMGenerator gopter.Gen

// GeoFilter_STATUSARMGenerator returns a generator of GeoFilter_STATUSARM instances for property testing.
func GeoFilter_STATUSARMGenerator() gopter.Gen {
	if geoFilter_STATUSARMGenerator != nil {
		return geoFilter_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGeoFilter_STATUSARM(generators)
	geoFilter_STATUSARMGenerator = gen.Struct(reflect.TypeOf(GeoFilter_STATUSARM{}), generators)

	return geoFilter_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForGeoFilter_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGeoFilter_STATUSARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(GeoFilter_STATUS_Action_Allow, GeoFilter_STATUS_Action_Block))
	gens["CountryCodes"] = gen.SliceOf(gen.AlphaString())
	gens["RelativePath"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceReference_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_STATUSARM, ResourceReference_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_STATUSARM runs a test to see if a specific instance of ResourceReference_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_STATUSARM(subject ResourceReference_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_STATUSARM instances for property testing - lazily instantiated by
// ResourceReference_STATUSARMGenerator()
var resourceReference_STATUSARMGenerator gopter.Gen

// ResourceReference_STATUSARMGenerator returns a generator of ResourceReference_STATUSARM instances for property testing.
func ResourceReference_STATUSARMGenerator() gopter.Gen {
	if resourceReference_STATUSARMGenerator != nil {
		return resourceReference_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_STATUSARM(generators)
	resourceReference_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_STATUSARM{}), generators)

	return resourceReference_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UrlSigningKey_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningKey_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningKey_STATUSARM, UrlSigningKey_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningKey_STATUSARM runs a test to see if a specific instance of UrlSigningKey_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningKey_STATUSARM(subject UrlSigningKey_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningKey_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningKey_STATUSARM instances for property testing - lazily instantiated by
// UrlSigningKey_STATUSARMGenerator()
var urlSigningKey_STATUSARMGenerator gopter.Gen

// UrlSigningKey_STATUSARMGenerator returns a generator of UrlSigningKey_STATUSARM instances for property testing.
// We first initialize urlSigningKey_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlSigningKey_STATUSARMGenerator() gopter.Gen {
	if urlSigningKey_STATUSARMGenerator != nil {
		return urlSigningKey_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKey_STATUSARM(generators)
	urlSigningKey_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKey_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForUrlSigningKey_STATUSARM(generators)
	urlSigningKey_STATUSARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUSARM{}), generators)

	return urlSigningKey_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningKey_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningKey_STATUSARM(gens map[string]gopter.Gen) {
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUrlSigningKey_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlSigningKey_STATUSARM(gens map[string]gopter.Gen) {
	gens["KeySourceParameters"] = gen.PtrOf(KeyVaultSigningKeyParameters_STATUSARMGenerator())
}

func Test_DeepCreatedOriginGroupProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroupProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUSARM, DeepCreatedOriginGroupProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUSARM runs a test to see if a specific instance of DeepCreatedOriginGroupProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupProperties_STATUSARM(subject DeepCreatedOriginGroupProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroupProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroupProperties_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupProperties_STATUSARMGenerator()
var deepCreatedOriginGroupProperties_STATUSARMGenerator gopter.Gen

// DeepCreatedOriginGroupProperties_STATUSARMGenerator returns a generator of DeepCreatedOriginGroupProperties_STATUSARM instances for property testing.
// We first initialize deepCreatedOriginGroupProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupProperties_STATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupProperties_STATUSARMGenerator != nil {
		return deepCreatedOriginGroupProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(generators)
	deepCreatedOriginGroupProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(generators)
	deepCreatedOriginGroupProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUSARM{}), generators)

	return deepCreatedOriginGroupProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["TrafficRestorationTimeToHealedOrNewEndpointsInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["HealthProbeSettings"] = gen.PtrOf(HealthProbeParameters_STATUSARMGenerator())
	gens["Origins"] = gen.SliceOf(ResourceReference_STATUSARMGenerator())
	gens["ResponseBasedOriginErrorDetectionSettings"] = gen.PtrOf(ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator())
}

func Test_DeepCreatedOriginProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginProperties_STATUSARM, DeepCreatedOriginProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginProperties_STATUSARM runs a test to see if a specific instance of DeepCreatedOriginProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginProperties_STATUSARM(subject DeepCreatedOriginProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginProperties_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginProperties_STATUSARMGenerator()
var deepCreatedOriginProperties_STATUSARMGenerator gopter.Gen

// DeepCreatedOriginProperties_STATUSARMGenerator returns a generator of DeepCreatedOriginProperties_STATUSARM instances for property testing.
func DeepCreatedOriginProperties_STATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginProperties_STATUSARMGenerator != nil {
		return deepCreatedOriginProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUSARM(generators)
	deepCreatedOriginProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginProperties_STATUSARM{}), generators)

	return deepCreatedOriginProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["PrivateEndpointStatus"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointStatus_STATUS_Approved,
		PrivateEndpointStatus_STATUS_Disconnected,
		PrivateEndpointStatus_STATUS_Pending,
		PrivateEndpointStatus_STATUS_Rejected,
		PrivateEndpointStatus_STATUS_Timeout))
	gens["PrivateLinkAlias"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkApprovalMessage"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

func Test_DeliveryRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRule_STATUSARM, DeliveryRule_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRule_STATUSARM runs a test to see if a specific instance of DeliveryRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRule_STATUSARM(subject DeliveryRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRule_STATUSARM instances for property testing - lazily instantiated by
// DeliveryRule_STATUSARMGenerator()
var deliveryRule_STATUSARMGenerator gopter.Gen

// DeliveryRule_STATUSARMGenerator returns a generator of DeliveryRule_STATUSARM instances for property testing.
// We first initialize deliveryRule_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRule_STATUSARMGenerator() gopter.Gen {
	if deliveryRule_STATUSARMGenerator != nil {
		return deliveryRule_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRule_STATUSARM(generators)
	deliveryRule_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRule_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRule_STATUSARM(generators)
	deliveryRule_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUSARM{}), generators)

	return deliveryRule_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRule_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Order"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeliveryRule_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRule_STATUSARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(DeliveryRuleAction_STATUSARMGenerator())
	gens["Conditions"] = gen.SliceOf(DeliveryRuleCondition_STATUSARMGenerator())
}

func Test_KeyVaultSigningKeyParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultSigningKeyParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUSARM, KeyVaultSigningKeyParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUSARM runs a test to see if a specific instance of KeyVaultSigningKeyParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultSigningKeyParameters_STATUSARM(subject KeyVaultSigningKeyParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultSigningKeyParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultSigningKeyParameters_STATUSARM instances for property testing - lazily instantiated by
// KeyVaultSigningKeyParameters_STATUSARMGenerator()
var keyVaultSigningKeyParameters_STATUSARMGenerator gopter.Gen

// KeyVaultSigningKeyParameters_STATUSARMGenerator returns a generator of KeyVaultSigningKeyParameters_STATUSARM instances for property testing.
func KeyVaultSigningKeyParameters_STATUSARMGenerator() gopter.Gen {
	if keyVaultSigningKeyParameters_STATUSARMGenerator != nil {
		return keyVaultSigningKeyParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUSARM(generators)
	keyVaultSigningKeyParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultSigningKeyParameters_STATUSARM{}), generators)

	return keyVaultSigningKeyParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["ResourceGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretVersion"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(KeyVaultSigningKeyParameters_STATUS_TypeName_KeyVaultSigningKeyParameters))
	gens["VaultName"] = gen.PtrOf(gen.AlphaString())
}

func Test_DeliveryRuleAction_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleAction_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleAction_STATUSARM, DeliveryRuleAction_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleAction_STATUSARM runs a test to see if a specific instance of DeliveryRuleAction_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleAction_STATUSARM(subject DeliveryRuleAction_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleAction_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleAction_STATUSARM instances for property testing - lazily instantiated by
// DeliveryRuleAction_STATUSARMGenerator()
var deliveryRuleAction_STATUSARMGenerator gopter.Gen

// DeliveryRuleAction_STATUSARMGenerator returns a generator of DeliveryRuleAction_STATUSARM instances for property testing.
func DeliveryRuleAction_STATUSARMGenerator() gopter.Gen {
	if deliveryRuleAction_STATUSARMGenerator != nil {
		return deliveryRuleAction_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleAction_STATUSARM(generators)
	deliveryRuleAction_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleAction_STATUSARM{}), generators)

	return deliveryRuleAction_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleAction_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleAction_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleAction_STATUS_Name_CacheExpiration,
		DeliveryRuleAction_STATUS_Name_CacheKeyQueryString,
		DeliveryRuleAction_STATUS_Name_ModifyRequestHeader,
		DeliveryRuleAction_STATUS_Name_ModifyResponseHeader,
		DeliveryRuleAction_STATUS_Name_OriginGroupOverride,
		DeliveryRuleAction_STATUS_Name_RouteConfigurationOverride,
		DeliveryRuleAction_STATUS_Name_UrlRedirect,
		DeliveryRuleAction_STATUS_Name_UrlRewrite,
		DeliveryRuleAction_STATUS_Name_UrlSigning))
}

func Test_DeliveryRuleCondition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleCondition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleCondition_STATUSARM, DeliveryRuleCondition_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleCondition_STATUSARM runs a test to see if a specific instance of DeliveryRuleCondition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleCondition_STATUSARM(subject DeliveryRuleCondition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleCondition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleCondition_STATUSARM instances for property testing - lazily instantiated by
// DeliveryRuleCondition_STATUSARMGenerator()
var deliveryRuleCondition_STATUSARMGenerator gopter.Gen

// DeliveryRuleCondition_STATUSARMGenerator returns a generator of DeliveryRuleCondition_STATUSARM instances for property testing.
func DeliveryRuleCondition_STATUSARMGenerator() gopter.Gen {
	if deliveryRuleCondition_STATUSARMGenerator != nil {
		return deliveryRuleCondition_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleCondition_STATUSARM(generators)
	deliveryRuleCondition_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCondition_STATUSARM{}), generators)

	return deliveryRuleCondition_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleCondition_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleCondition_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleCondition_STATUS_Name_ClientPort,
		DeliveryRuleCondition_STATUS_Name_Cookies,
		DeliveryRuleCondition_STATUS_Name_HostName,
		DeliveryRuleCondition_STATUS_Name_HttpVersion,
		DeliveryRuleCondition_STATUS_Name_IsDevice,
		DeliveryRuleCondition_STATUS_Name_PostArgs,
		DeliveryRuleCondition_STATUS_Name_QueryString,
		DeliveryRuleCondition_STATUS_Name_RemoteAddress,
		DeliveryRuleCondition_STATUS_Name_RequestBody,
		DeliveryRuleCondition_STATUS_Name_RequestHeader,
		DeliveryRuleCondition_STATUS_Name_RequestMethod,
		DeliveryRuleCondition_STATUS_Name_RequestScheme,
		DeliveryRuleCondition_STATUS_Name_RequestUri,
		DeliveryRuleCondition_STATUS_Name_ServerPort,
		DeliveryRuleCondition_STATUS_Name_SocketAddr,
		DeliveryRuleCondition_STATUS_Name_SslProtocol,
		DeliveryRuleCondition_STATUS_Name_UrlFileExtension,
		DeliveryRuleCondition_STATUS_Name_UrlFileName,
		DeliveryRuleCondition_STATUS_Name_UrlPath))
}

func Test_HealthProbeParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HealthProbeParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHealthProbeParameters_STATUSARM, HealthProbeParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHealthProbeParameters_STATUSARM runs a test to see if a specific instance of HealthProbeParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHealthProbeParameters_STATUSARM(subject HealthProbeParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HealthProbeParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HealthProbeParameters_STATUSARM instances for property testing - lazily instantiated by
// HealthProbeParameters_STATUSARMGenerator()
var healthProbeParameters_STATUSARMGenerator gopter.Gen

// HealthProbeParameters_STATUSARMGenerator returns a generator of HealthProbeParameters_STATUSARM instances for property testing.
func HealthProbeParameters_STATUSARMGenerator() gopter.Gen {
	if healthProbeParameters_STATUSARMGenerator != nil {
		return healthProbeParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUSARM(generators)
	healthProbeParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(HealthProbeParameters_STATUSARM{}), generators)

	return healthProbeParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["ProbeIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbeProtocol"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_STATUS_ProbeProtocol_Http, HealthProbeParameters_STATUS_ProbeProtocol_Https, HealthProbeParameters_STATUS_ProbeProtocol_NotSet))
	gens["ProbeRequestType"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_STATUS_ProbeRequestType_GET, HealthProbeParameters_STATUS_ProbeRequestType_HEAD, HealthProbeParameters_STATUS_ProbeRequestType_NotSet))
}

func Test_ResponseBasedOriginErrorDetectionParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResponseBasedOriginErrorDetectionParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUSARM, ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUSARM runs a test to see if a specific instance of ResponseBasedOriginErrorDetectionParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResponseBasedOriginErrorDetectionParameters_STATUSARM(subject ResponseBasedOriginErrorDetectionParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResponseBasedOriginErrorDetectionParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResponseBasedOriginErrorDetectionParameters_STATUSARM instances for property testing - lazily
// instantiated by ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator()
var responseBasedOriginErrorDetectionParameters_STATUSARMGenerator gopter.Gen

// ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator returns a generator of ResponseBasedOriginErrorDetectionParameters_STATUSARM instances for property testing.
// We first initialize responseBasedOriginErrorDetectionParameters_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResponseBasedOriginErrorDetectionParameters_STATUSARMGenerator() gopter.Gen {
	if responseBasedOriginErrorDetectionParameters_STATUSARMGenerator != nil {
		return responseBasedOriginErrorDetectionParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(generators)
	responseBasedOriginErrorDetectionParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(generators)
	responseBasedOriginErrorDetectionParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUSARM{}), generators)

	return responseBasedOriginErrorDetectionParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["ResponseBasedDetectedErrorTypes"] = gen.PtrOf(gen.OneConstOf(ResponseBasedOriginErrorDetectionParameters_STATUS_ResponseBasedDetectedErrorTypes_None, ResponseBasedOriginErrorDetectionParameters_STATUS_ResponseBasedDetectedErrorTypes_TcpAndHttpErrors, ResponseBasedOriginErrorDetectionParameters_STATUS_ResponseBasedDetectedErrorTypes_TcpErrorsOnly))
	gens["ResponseBasedFailoverThresholdPercentage"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["HttpErrorRanges"] = gen.SliceOf(HttpErrorRangeParameters_STATUSARMGenerator())
}

func Test_HttpErrorRangeParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpErrorRangeParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpErrorRangeParameters_STATUSARM, HttpErrorRangeParameters_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpErrorRangeParameters_STATUSARM runs a test to see if a specific instance of HttpErrorRangeParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpErrorRangeParameters_STATUSARM(subject HttpErrorRangeParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpErrorRangeParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpErrorRangeParameters_STATUSARM instances for property testing - lazily instantiated by
// HttpErrorRangeParameters_STATUSARMGenerator()
var httpErrorRangeParameters_STATUSARMGenerator gopter.Gen

// HttpErrorRangeParameters_STATUSARMGenerator returns a generator of HttpErrorRangeParameters_STATUSARM instances for property testing.
func HttpErrorRangeParameters_STATUSARMGenerator() gopter.Gen {
	if httpErrorRangeParameters_STATUSARMGenerator != nil {
		return httpErrorRangeParameters_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUSARM(generators)
	httpErrorRangeParameters_STATUSARMGenerator = gen.Struct(reflect.TypeOf(HttpErrorRangeParameters_STATUSARM{}), generators)

	return httpErrorRangeParameters_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpErrorRangeParameters_STATUSARM(gens map[string]gopter.Gen) {
	gens["Begin"] = gen.PtrOf(gen.Int())
	gens["End"] = gen.PtrOf(gen.Int())
}
