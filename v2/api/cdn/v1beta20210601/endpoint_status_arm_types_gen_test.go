// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Endpoint_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Endpoint_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointSTATUSARM, EndpointSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointSTATUSARM runs a test to see if a specific instance of Endpoint_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointSTATUSARM(subject Endpoint_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Endpoint_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Endpoint_STATUSARM instances for property testing - lazily instantiated by EndpointSTATUSARMGenerator()
var endpointSTATUSARMGenerator gopter.Gen

// EndpointSTATUSARMGenerator returns a generator of Endpoint_STATUSARM instances for property testing.
// We first initialize endpointSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointSTATUSARMGenerator() gopter.Gen {
	if endpointSTATUSARMGenerator != nil {
		return endpointSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointSTATUSARM(generators)
	endpointSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Endpoint_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForEndpointSTATUSARM(generators)
	endpointSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Endpoint_STATUSARM{}), generators)

	return endpointSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpointSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(EndpointPropertiesSTATUSARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_EndpointProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointPropertiesSTATUSARM, EndpointPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointPropertiesSTATUSARM runs a test to see if a specific instance of EndpointProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointPropertiesSTATUSARM(subject EndpointProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUSARM instances for property testing - lazily instantiated by
// EndpointPropertiesSTATUSARMGenerator()
var endpointPropertiesSTATUSARMGenerator gopter.Gen

// EndpointPropertiesSTATUSARMGenerator returns a generator of EndpointProperties_STATUSARM instances for property testing.
// We first initialize endpointPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointPropertiesSTATUSARMGenerator() gopter.Gen {
	if endpointPropertiesSTATUSARMGenerator != nil {
		return endpointPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSARM(generators)
	endpointPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForEndpointPropertiesSTATUSARM(generators)
	endpointPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUSARM{}), generators)

	return endpointPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["ContentTypesToCompress"] = gen.SliceOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsHttpAllowed"] = gen.PtrOf(gen.Bool())
	gens["IsHttpsAllowed"] = gen.PtrOf(gen.Bool())
	gens["OptimizationType"] = gen.PtrOf(gen.OneConstOf(
		OptimizationType_STATUS_DynamicSiteAcceleration,
		OptimizationType_STATUS_GeneralMediaStreaming,
		OptimizationType_STATUS_GeneralWebDelivery,
		OptimizationType_STATUS_LargeFileDownload,
		OptimizationType_STATUS_VideoOnDemandMediaStreaming))
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["OriginPath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		EndpointPropertiesSTATUSProvisioningState_Creating,
		EndpointPropertiesSTATUSProvisioningState_Deleting,
		EndpointPropertiesSTATUSProvisioningState_Failed,
		EndpointPropertiesSTATUSProvisioningState_Succeeded,
		EndpointPropertiesSTATUSProvisioningState_Updating))
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		QueryStringCachingBehavior_STATUS_BypassCaching,
		QueryStringCachingBehavior_STATUS_IgnoreQueryString,
		QueryStringCachingBehavior_STATUS_NotSet,
		QueryStringCachingBehavior_STATUS_UseQueryString))
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		EndpointPropertiesSTATUSResourceState_Creating,
		EndpointPropertiesSTATUSResourceState_Deleting,
		EndpointPropertiesSTATUSResourceState_Running,
		EndpointPropertiesSTATUSResourceState_Starting,
		EndpointPropertiesSTATUSResourceState_Stopped,
		EndpointPropertiesSTATUSResourceState_Stopping))
}

// AddRelatedPropertyGeneratorsForEndpointPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["CustomDomains"] = gen.SliceOf(CustomDomainSTATUSSubResourceEmbeddedARMGenerator())
	gens["DefaultOriginGroup"] = gen.PtrOf(ResourceReferenceSTATUSARMGenerator())
	gens["DeliveryPolicy"] = gen.PtrOf(EndpointPropertiesSTATUSDeliveryPolicyARMGenerator())
	gens["GeoFilters"] = gen.SliceOf(GeoFilterSTATUSARMGenerator())
	gens["OriginGroups"] = gen.SliceOf(DeepCreatedOriginGroupSTATUSARMGenerator())
	gens["Origins"] = gen.SliceOf(DeepCreatedOriginSTATUSARMGenerator())
	gens["UrlSigningKeys"] = gen.SliceOf(UrlSigningKeySTATUSARMGenerator())
	gens["WebApplicationFirewallPolicyLink"] = gen.PtrOf(EndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator())
}

func Test_SystemData_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemDataSTATUSARM, SystemDataSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemDataSTATUSARM runs a test to see if a specific instance of SystemData_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemDataSTATUSARM(subject SystemData_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUSARM instances for property testing - lazily instantiated by
// SystemDataSTATUSARMGenerator()
var systemDataSTATUSARMGenerator gopter.Gen

// SystemDataSTATUSARMGenerator returns a generator of SystemData_STATUSARM instances for property testing.
func SystemDataSTATUSARMGenerator() gopter.Gen {
	if systemDataSTATUSARMGenerator != nil {
		return systemDataSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemDataSTATUSARM(generators)
	systemDataSTATUSARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUSARM{}), generators)

	return systemDataSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemDataSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemDataSTATUSARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_Application,
		IdentityType_STATUS_Key,
		IdentityType_STATUS_ManagedIdentity,
		IdentityType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_Application,
		IdentityType_STATUS_Key,
		IdentityType_STATUS_ManagedIdentity,
		IdentityType_STATUS_User))
}

func Test_CustomDomain_STATUS_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CustomDomain_STATUS_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCustomDomainSTATUSSubResourceEmbeddedARM, CustomDomainSTATUSSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCustomDomainSTATUSSubResourceEmbeddedARM runs a test to see if a specific instance of CustomDomain_STATUS_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCustomDomainSTATUSSubResourceEmbeddedARM(subject CustomDomain_STATUS_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CustomDomain_STATUS_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CustomDomain_STATUS_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
// CustomDomainSTATUSSubResourceEmbeddedARMGenerator()
var customDomainSTATUSSubResourceEmbeddedARMGenerator gopter.Gen

// CustomDomainSTATUSSubResourceEmbeddedARMGenerator returns a generator of CustomDomain_STATUS_SubResourceEmbeddedARM instances for property testing.
// We first initialize customDomainSTATUSSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func CustomDomainSTATUSSubResourceEmbeddedARMGenerator() gopter.Gen {
	if customDomainSTATUSSubResourceEmbeddedARMGenerator != nil {
		return customDomainSTATUSSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainSTATUSSubResourceEmbeddedARM(generators)
	customDomainSTATUSSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_STATUS_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCustomDomainSTATUSSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForCustomDomainSTATUSSubResourceEmbeddedARM(generators)
	customDomainSTATUSSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(CustomDomain_STATUS_SubResourceEmbeddedARM{}), generators)

	return customDomainSTATUSSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForCustomDomainSTATUSSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCustomDomainSTATUSSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForCustomDomainSTATUSSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForCustomDomainSTATUSSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemDataSTATUSARMGenerator())
}

func Test_DeepCreatedOrigin_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOrigin_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginSTATUSARM, DeepCreatedOriginSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginSTATUSARM runs a test to see if a specific instance of DeepCreatedOrigin_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginSTATUSARM(subject DeepCreatedOrigin_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOrigin_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOrigin_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginSTATUSARMGenerator()
var deepCreatedOriginSTATUSARMGenerator gopter.Gen

// DeepCreatedOriginSTATUSARMGenerator returns a generator of DeepCreatedOrigin_STATUSARM instances for property testing.
// We first initialize deepCreatedOriginSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginSTATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginSTATUSARMGenerator != nil {
		return deepCreatedOriginSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginSTATUSARM(generators)
	deepCreatedOriginSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginSTATUSARM(generators)
	deepCreatedOriginSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOrigin_STATUSARM{}), generators)

	return deepCreatedOriginSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginPropertiesSTATUSARMGenerator())
}

func Test_DeepCreatedOriginGroup_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroup_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupSTATUSARM, DeepCreatedOriginGroupSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupSTATUSARM runs a test to see if a specific instance of DeepCreatedOriginGroup_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupSTATUSARM(subject DeepCreatedOriginGroup_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroup_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroup_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupSTATUSARMGenerator()
var deepCreatedOriginGroupSTATUSARMGenerator gopter.Gen

// DeepCreatedOriginGroupSTATUSARMGenerator returns a generator of DeepCreatedOriginGroup_STATUSARM instances for property testing.
// We first initialize deepCreatedOriginGroupSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupSTATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupSTATUSARMGenerator != nil {
		return deepCreatedOriginGroupSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupSTATUSARM(generators)
	deepCreatedOriginGroupSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupSTATUSARM(generators)
	deepCreatedOriginGroupSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroup_STATUSARM{}), generators)

	return deepCreatedOriginGroupSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(DeepCreatedOriginGroupPropertiesSTATUSARMGenerator())
}

func Test_EndpointProperties_STATUS_DeliveryPolicyARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUS_DeliveryPolicyARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointPropertiesSTATUSDeliveryPolicyARM, EndpointPropertiesSTATUSDeliveryPolicyARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointPropertiesSTATUSDeliveryPolicyARM runs a test to see if a specific instance of EndpointProperties_STATUS_DeliveryPolicyARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointPropertiesSTATUSDeliveryPolicyARM(subject EndpointProperties_STATUS_DeliveryPolicyARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUS_DeliveryPolicyARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUS_DeliveryPolicyARM instances for property testing - lazily instantiated by
// EndpointPropertiesSTATUSDeliveryPolicyARMGenerator()
var endpointPropertiesSTATUSDeliveryPolicyARMGenerator gopter.Gen

// EndpointPropertiesSTATUSDeliveryPolicyARMGenerator returns a generator of EndpointProperties_STATUS_DeliveryPolicyARM instances for property testing.
// We first initialize endpointPropertiesSTATUSDeliveryPolicyARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EndpointPropertiesSTATUSDeliveryPolicyARMGenerator() gopter.Gen {
	if endpointPropertiesSTATUSDeliveryPolicyARMGenerator != nil {
		return endpointPropertiesSTATUSDeliveryPolicyARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSDeliveryPolicyARM(generators)
	endpointPropertiesSTATUSDeliveryPolicyARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_DeliveryPolicyARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSDeliveryPolicyARM(generators)
	AddRelatedPropertyGeneratorsForEndpointPropertiesSTATUSDeliveryPolicyARM(generators)
	endpointPropertiesSTATUSDeliveryPolicyARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_DeliveryPolicyARM{}), generators)

	return endpointPropertiesSTATUSDeliveryPolicyARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSDeliveryPolicyARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSDeliveryPolicyARM(gens map[string]gopter.Gen) {
	gens["Description"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForEndpointPropertiesSTATUSDeliveryPolicyARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEndpointPropertiesSTATUSDeliveryPolicyARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(DeliveryRuleSTATUSARMGenerator())
}

func Test_EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARM, EndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARM runs a test to see if a specific instance of EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARM(subject EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM instances for property testing - lazily
// instantiated by EndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator()
var endpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator gopter.Gen

// EndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator returns a generator of EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM instances for property testing.
func EndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator() gopter.Gen {
	if endpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator != nil {
		return endpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARM(generators)
	endpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator = gen.Struct(reflect.TypeOf(EndpointProperties_STATUS_WebApplicationFirewallPolicyLinkARM{}), generators)

	return endpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARMGenerator
}

// AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEndpointPropertiesSTATUSWebApplicationFirewallPolicyLinkARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_GeoFilter_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GeoFilter_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGeoFilterSTATUSARM, GeoFilterSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGeoFilterSTATUSARM runs a test to see if a specific instance of GeoFilter_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGeoFilterSTATUSARM(subject GeoFilter_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GeoFilter_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GeoFilter_STATUSARM instances for property testing - lazily instantiated by GeoFilterSTATUSARMGenerator()
var geoFilterSTATUSARMGenerator gopter.Gen

// GeoFilterSTATUSARMGenerator returns a generator of GeoFilter_STATUSARM instances for property testing.
func GeoFilterSTATUSARMGenerator() gopter.Gen {
	if geoFilterSTATUSARMGenerator != nil {
		return geoFilterSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGeoFilterSTATUSARM(generators)
	geoFilterSTATUSARMGenerator = gen.Struct(reflect.TypeOf(GeoFilter_STATUSARM{}), generators)

	return geoFilterSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForGeoFilterSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGeoFilterSTATUSARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(gen.OneConstOf(GeoFilterSTATUSAction_Allow, GeoFilterSTATUSAction_Block))
	gens["CountryCodes"] = gen.SliceOf(gen.AlphaString())
	gens["RelativePath"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceReference_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReferenceSTATUSARM, ResourceReferenceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReferenceSTATUSARM runs a test to see if a specific instance of ResourceReference_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReferenceSTATUSARM(subject ResourceReference_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_STATUSARM instances for property testing - lazily instantiated by
// ResourceReferenceSTATUSARMGenerator()
var resourceReferenceSTATUSARMGenerator gopter.Gen

// ResourceReferenceSTATUSARMGenerator returns a generator of ResourceReference_STATUSARM instances for property testing.
func ResourceReferenceSTATUSARMGenerator() gopter.Gen {
	if resourceReferenceSTATUSARMGenerator != nil {
		return resourceReferenceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReferenceSTATUSARM(generators)
	resourceReferenceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_STATUSARM{}), generators)

	return resourceReferenceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReferenceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReferenceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_UrlSigningKey_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UrlSigningKey_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUrlSigningKeySTATUSARM, UrlSigningKeySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUrlSigningKeySTATUSARM runs a test to see if a specific instance of UrlSigningKey_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUrlSigningKeySTATUSARM(subject UrlSigningKey_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UrlSigningKey_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UrlSigningKey_STATUSARM instances for property testing - lazily instantiated by
// UrlSigningKeySTATUSARMGenerator()
var urlSigningKeySTATUSARMGenerator gopter.Gen

// UrlSigningKeySTATUSARMGenerator returns a generator of UrlSigningKey_STATUSARM instances for property testing.
// We first initialize urlSigningKeySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func UrlSigningKeySTATUSARMGenerator() gopter.Gen {
	if urlSigningKeySTATUSARMGenerator != nil {
		return urlSigningKeySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKeySTATUSARM(generators)
	urlSigningKeySTATUSARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUrlSigningKeySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForUrlSigningKeySTATUSARM(generators)
	urlSigningKeySTATUSARMGenerator = gen.Struct(reflect.TypeOf(UrlSigningKey_STATUSARM{}), generators)

	return urlSigningKeySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForUrlSigningKeySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUrlSigningKeySTATUSARM(gens map[string]gopter.Gen) {
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForUrlSigningKeySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForUrlSigningKeySTATUSARM(gens map[string]gopter.Gen) {
	gens["KeySourceParameters"] = gen.PtrOf(KeyVaultSigningKeyParametersSTATUSARMGenerator())
}

func Test_DeepCreatedOriginGroupProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginGroupProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginGroupPropertiesSTATUSARM, DeepCreatedOriginGroupPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginGroupPropertiesSTATUSARM runs a test to see if a specific instance of DeepCreatedOriginGroupProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginGroupPropertiesSTATUSARM(subject DeepCreatedOriginGroupProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginGroupProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginGroupProperties_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginGroupPropertiesSTATUSARMGenerator()
var deepCreatedOriginGroupPropertiesSTATUSARMGenerator gopter.Gen

// DeepCreatedOriginGroupPropertiesSTATUSARMGenerator returns a generator of DeepCreatedOriginGroupProperties_STATUSARM instances for property testing.
// We first initialize deepCreatedOriginGroupPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeepCreatedOriginGroupPropertiesSTATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginGroupPropertiesSTATUSARMGenerator != nil {
		return deepCreatedOriginGroupPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesSTATUSARM(generators)
	deepCreatedOriginGroupPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupPropertiesSTATUSARM(generators)
	deepCreatedOriginGroupPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginGroupProperties_STATUSARM{}), generators)

	return deepCreatedOriginGroupPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginGroupPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["TrafficRestorationTimeToHealedOrNewEndpointsInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeepCreatedOriginGroupPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["HealthProbeSettings"] = gen.PtrOf(HealthProbeParametersSTATUSARMGenerator())
	gens["Origins"] = gen.SliceOf(ResourceReferenceSTATUSARMGenerator())
	gens["ResponseBasedOriginErrorDetectionSettings"] = gen.PtrOf(ResponseBasedOriginErrorDetectionParametersSTATUSARMGenerator())
}

func Test_DeepCreatedOriginProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeepCreatedOriginProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeepCreatedOriginPropertiesSTATUSARM, DeepCreatedOriginPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeepCreatedOriginPropertiesSTATUSARM runs a test to see if a specific instance of DeepCreatedOriginProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeepCreatedOriginPropertiesSTATUSARM(subject DeepCreatedOriginProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeepCreatedOriginProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeepCreatedOriginProperties_STATUSARM instances for property testing - lazily instantiated by
// DeepCreatedOriginPropertiesSTATUSARMGenerator()
var deepCreatedOriginPropertiesSTATUSARMGenerator gopter.Gen

// DeepCreatedOriginPropertiesSTATUSARMGenerator returns a generator of DeepCreatedOriginProperties_STATUSARM instances for property testing.
func DeepCreatedOriginPropertiesSTATUSARMGenerator() gopter.Gen {
	if deepCreatedOriginPropertiesSTATUSARMGenerator != nil {
		return deepCreatedOriginPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeepCreatedOriginPropertiesSTATUSARM(generators)
	deepCreatedOriginPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeepCreatedOriginProperties_STATUSARM{}), generators)

	return deepCreatedOriginPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeepCreatedOriginPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeepCreatedOriginPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Enabled"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["PrivateEndpointStatus"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointStatus_STATUS_Approved,
		PrivateEndpointStatus_STATUS_Disconnected,
		PrivateEndpointStatus_STATUS_Pending,
		PrivateEndpointStatus_STATUS_Rejected,
		PrivateEndpointStatus_STATUS_Timeout))
	gens["PrivateLinkAlias"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkApprovalMessage"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

func Test_DeliveryRule_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRule_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleSTATUSARM, DeliveryRuleSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleSTATUSARM runs a test to see if a specific instance of DeliveryRule_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleSTATUSARM(subject DeliveryRule_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRule_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRule_STATUSARM instances for property testing - lazily instantiated by
// DeliveryRuleSTATUSARMGenerator()
var deliveryRuleSTATUSARMGenerator gopter.Gen

// DeliveryRuleSTATUSARMGenerator returns a generator of DeliveryRule_STATUSARM instances for property testing.
// We first initialize deliveryRuleSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DeliveryRuleSTATUSARMGenerator() gopter.Gen {
	if deliveryRuleSTATUSARMGenerator != nil {
		return deliveryRuleSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleSTATUSARM(generators)
	deliveryRuleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForDeliveryRuleSTATUSARM(generators)
	deliveryRuleSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRule_STATUSARM{}), generators)

	return deliveryRuleSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Order"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForDeliveryRuleSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDeliveryRuleSTATUSARM(gens map[string]gopter.Gen) {
	gens["Actions"] = gen.SliceOf(DeliveryRuleActionSTATUSARMGenerator())
	gens["Conditions"] = gen.SliceOf(DeliveryRuleConditionSTATUSARMGenerator())
}

func Test_KeyVaultSigningKeyParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultSigningKeyParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultSigningKeyParametersSTATUSARM, KeyVaultSigningKeyParametersSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultSigningKeyParametersSTATUSARM runs a test to see if a specific instance of KeyVaultSigningKeyParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultSigningKeyParametersSTATUSARM(subject KeyVaultSigningKeyParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultSigningKeyParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultSigningKeyParameters_STATUSARM instances for property testing - lazily instantiated by
// KeyVaultSigningKeyParametersSTATUSARMGenerator()
var keyVaultSigningKeyParametersSTATUSARMGenerator gopter.Gen

// KeyVaultSigningKeyParametersSTATUSARMGenerator returns a generator of KeyVaultSigningKeyParameters_STATUSARM instances for property testing.
func KeyVaultSigningKeyParametersSTATUSARMGenerator() gopter.Gen {
	if keyVaultSigningKeyParametersSTATUSARMGenerator != nil {
		return keyVaultSigningKeyParametersSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParametersSTATUSARM(generators)
	keyVaultSigningKeyParametersSTATUSARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultSigningKeyParameters_STATUSARM{}), generators)

	return keyVaultSigningKeyParametersSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParametersSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultSigningKeyParametersSTATUSARM(gens map[string]gopter.Gen) {
	gens["ResourceGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretName"] = gen.PtrOf(gen.AlphaString())
	gens["SecretVersion"] = gen.PtrOf(gen.AlphaString())
	gens["SubscriptionId"] = gen.PtrOf(gen.AlphaString())
	gens["TypeName"] = gen.PtrOf(gen.OneConstOf(KeyVaultSigningKeyParametersSTATUSTypeName_KeyVaultSigningKeyParameters))
	gens["VaultName"] = gen.PtrOf(gen.AlphaString())
}

func Test_DeliveryRuleAction_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleAction_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleActionSTATUSARM, DeliveryRuleActionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleActionSTATUSARM runs a test to see if a specific instance of DeliveryRuleAction_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleActionSTATUSARM(subject DeliveryRuleAction_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleAction_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleAction_STATUSARM instances for property testing - lazily instantiated by
// DeliveryRuleActionSTATUSARMGenerator()
var deliveryRuleActionSTATUSARMGenerator gopter.Gen

// DeliveryRuleActionSTATUSARMGenerator returns a generator of DeliveryRuleAction_STATUSARM instances for property testing.
func DeliveryRuleActionSTATUSARMGenerator() gopter.Gen {
	if deliveryRuleActionSTATUSARMGenerator != nil {
		return deliveryRuleActionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleActionSTATUSARM(generators)
	deliveryRuleActionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleAction_STATUSARM{}), generators)

	return deliveryRuleActionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleActionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleActionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleActionSTATUSName_CacheExpiration,
		DeliveryRuleActionSTATUSName_CacheKeyQueryString,
		DeliveryRuleActionSTATUSName_ModifyRequestHeader,
		DeliveryRuleActionSTATUSName_ModifyResponseHeader,
		DeliveryRuleActionSTATUSName_OriginGroupOverride,
		DeliveryRuleActionSTATUSName_RouteConfigurationOverride,
		DeliveryRuleActionSTATUSName_UrlRedirect,
		DeliveryRuleActionSTATUSName_UrlRewrite,
		DeliveryRuleActionSTATUSName_UrlSigning))
}

func Test_DeliveryRuleCondition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DeliveryRuleCondition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDeliveryRuleConditionSTATUSARM, DeliveryRuleConditionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDeliveryRuleConditionSTATUSARM runs a test to see if a specific instance of DeliveryRuleCondition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDeliveryRuleConditionSTATUSARM(subject DeliveryRuleCondition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DeliveryRuleCondition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DeliveryRuleCondition_STATUSARM instances for property testing - lazily instantiated by
// DeliveryRuleConditionSTATUSARMGenerator()
var deliveryRuleConditionSTATUSARMGenerator gopter.Gen

// DeliveryRuleConditionSTATUSARMGenerator returns a generator of DeliveryRuleCondition_STATUSARM instances for property testing.
func DeliveryRuleConditionSTATUSARMGenerator() gopter.Gen {
	if deliveryRuleConditionSTATUSARMGenerator != nil {
		return deliveryRuleConditionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDeliveryRuleConditionSTATUSARM(generators)
	deliveryRuleConditionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DeliveryRuleCondition_STATUSARM{}), generators)

	return deliveryRuleConditionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDeliveryRuleConditionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDeliveryRuleConditionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.OneConstOf(
		DeliveryRuleConditionSTATUSName_ClientPort,
		DeliveryRuleConditionSTATUSName_Cookies,
		DeliveryRuleConditionSTATUSName_HostName,
		DeliveryRuleConditionSTATUSName_HttpVersion,
		DeliveryRuleConditionSTATUSName_IsDevice,
		DeliveryRuleConditionSTATUSName_PostArgs,
		DeliveryRuleConditionSTATUSName_QueryString,
		DeliveryRuleConditionSTATUSName_RemoteAddress,
		DeliveryRuleConditionSTATUSName_RequestBody,
		DeliveryRuleConditionSTATUSName_RequestHeader,
		DeliveryRuleConditionSTATUSName_RequestMethod,
		DeliveryRuleConditionSTATUSName_RequestScheme,
		DeliveryRuleConditionSTATUSName_RequestUri,
		DeliveryRuleConditionSTATUSName_ServerPort,
		DeliveryRuleConditionSTATUSName_SocketAddr,
		DeliveryRuleConditionSTATUSName_SslProtocol,
		DeliveryRuleConditionSTATUSName_UrlFileExtension,
		DeliveryRuleConditionSTATUSName_UrlFileName,
		DeliveryRuleConditionSTATUSName_UrlPath))
}

func Test_HealthProbeParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HealthProbeParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHealthProbeParametersSTATUSARM, HealthProbeParametersSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHealthProbeParametersSTATUSARM runs a test to see if a specific instance of HealthProbeParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHealthProbeParametersSTATUSARM(subject HealthProbeParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HealthProbeParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HealthProbeParameters_STATUSARM instances for property testing - lazily instantiated by
// HealthProbeParametersSTATUSARMGenerator()
var healthProbeParametersSTATUSARMGenerator gopter.Gen

// HealthProbeParametersSTATUSARMGenerator returns a generator of HealthProbeParameters_STATUSARM instances for property testing.
func HealthProbeParametersSTATUSARMGenerator() gopter.Gen {
	if healthProbeParametersSTATUSARMGenerator != nil {
		return healthProbeParametersSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHealthProbeParametersSTATUSARM(generators)
	healthProbeParametersSTATUSARMGenerator = gen.Struct(reflect.TypeOf(HealthProbeParameters_STATUSARM{}), generators)

	return healthProbeParametersSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHealthProbeParametersSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHealthProbeParametersSTATUSARM(gens map[string]gopter.Gen) {
	gens["ProbeIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbeProtocol"] = gen.PtrOf(gen.OneConstOf(HealthProbeParametersSTATUSProbeProtocol_Http, HealthProbeParametersSTATUSProbeProtocol_Https, HealthProbeParametersSTATUSProbeProtocol_NotSet))
	gens["ProbeRequestType"] = gen.PtrOf(gen.OneConstOf(HealthProbeParametersSTATUSProbeRequestType_GET, HealthProbeParametersSTATUSProbeRequestType_HEAD, HealthProbeParametersSTATUSProbeRequestType_NotSet))
}

func Test_ResponseBasedOriginErrorDetectionParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResponseBasedOriginErrorDetectionParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResponseBasedOriginErrorDetectionParametersSTATUSARM, ResponseBasedOriginErrorDetectionParametersSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResponseBasedOriginErrorDetectionParametersSTATUSARM runs a test to see if a specific instance of ResponseBasedOriginErrorDetectionParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResponseBasedOriginErrorDetectionParametersSTATUSARM(subject ResponseBasedOriginErrorDetectionParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResponseBasedOriginErrorDetectionParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResponseBasedOriginErrorDetectionParameters_STATUSARM instances for property testing - lazily
// instantiated by ResponseBasedOriginErrorDetectionParametersSTATUSARMGenerator()
var responseBasedOriginErrorDetectionParametersSTATUSARMGenerator gopter.Gen

// ResponseBasedOriginErrorDetectionParametersSTATUSARMGenerator returns a generator of ResponseBasedOriginErrorDetectionParameters_STATUSARM instances for property testing.
// We first initialize responseBasedOriginErrorDetectionParametersSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResponseBasedOriginErrorDetectionParametersSTATUSARMGenerator() gopter.Gen {
	if responseBasedOriginErrorDetectionParametersSTATUSARMGenerator != nil {
		return responseBasedOriginErrorDetectionParametersSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersSTATUSARM(generators)
	responseBasedOriginErrorDetectionParametersSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersSTATUSARM(generators)
	responseBasedOriginErrorDetectionParametersSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResponseBasedOriginErrorDetectionParameters_STATUSARM{}), generators)

	return responseBasedOriginErrorDetectionParametersSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersSTATUSARM(gens map[string]gopter.Gen) {
	gens["ResponseBasedDetectedErrorTypes"] = gen.PtrOf(gen.OneConstOf(ResponseBasedOriginErrorDetectionParametersSTATUSResponseBasedDetectedErrorTypes_None, ResponseBasedOriginErrorDetectionParametersSTATUSResponseBasedDetectedErrorTypes_TcpAndHttpErrors, ResponseBasedOriginErrorDetectionParametersSTATUSResponseBasedDetectedErrorTypes_TcpErrorsOnly))
	gens["ResponseBasedFailoverThresholdPercentage"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResponseBasedOriginErrorDetectionParametersSTATUSARM(gens map[string]gopter.Gen) {
	gens["HttpErrorRanges"] = gen.SliceOf(HttpErrorRangeParametersSTATUSARMGenerator())
}

func Test_HttpErrorRangeParameters_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpErrorRangeParameters_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpErrorRangeParametersSTATUSARM, HttpErrorRangeParametersSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpErrorRangeParametersSTATUSARM runs a test to see if a specific instance of HttpErrorRangeParameters_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpErrorRangeParametersSTATUSARM(subject HttpErrorRangeParameters_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpErrorRangeParameters_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpErrorRangeParameters_STATUSARM instances for property testing - lazily instantiated by
// HttpErrorRangeParametersSTATUSARMGenerator()
var httpErrorRangeParametersSTATUSARMGenerator gopter.Gen

// HttpErrorRangeParametersSTATUSARMGenerator returns a generator of HttpErrorRangeParameters_STATUSARM instances for property testing.
func HttpErrorRangeParametersSTATUSARMGenerator() gopter.Gen {
	if httpErrorRangeParametersSTATUSARMGenerator != nil {
		return httpErrorRangeParametersSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpErrorRangeParametersSTATUSARM(generators)
	httpErrorRangeParametersSTATUSARMGenerator = gen.Struct(reflect.TypeOf(HttpErrorRangeParameters_STATUSARM{}), generators)

	return httpErrorRangeParametersSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpErrorRangeParametersSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpErrorRangeParametersSTATUSARM(gens map[string]gopter.Gen) {
	gens["Begin"] = gen.PtrOf(gen.Int())
	gens["End"] = gen.PtrOf(gen.Int())
}
