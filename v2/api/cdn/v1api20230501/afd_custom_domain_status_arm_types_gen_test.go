// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AFDDomainHttpsParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AFDDomainHttpsParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAFDDomainHttpsParameters_STATUS_ARM, AFDDomainHttpsParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAFDDomainHttpsParameters_STATUS_ARM runs a test to see if a specific instance of AFDDomainHttpsParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAFDDomainHttpsParameters_STATUS_ARM(subject AFDDomainHttpsParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AFDDomainHttpsParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AFDDomainHttpsParameters_STATUS_ARM instances for property testing - lazily instantiated by
// AFDDomainHttpsParameters_STATUS_ARMGenerator()
var afdDomainHttpsParameters_STATUS_ARMGenerator gopter.Gen

// AFDDomainHttpsParameters_STATUS_ARMGenerator returns a generator of AFDDomainHttpsParameters_STATUS_ARM instances for property testing.
// We first initialize afdDomainHttpsParameters_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AFDDomainHttpsParameters_STATUS_ARMGenerator() gopter.Gen {
	if afdDomainHttpsParameters_STATUS_ARMGenerator != nil {
		return afdDomainHttpsParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAFDDomainHttpsParameters_STATUS_ARM(generators)
	afdDomainHttpsParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AFDDomainHttpsParameters_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAFDDomainHttpsParameters_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAFDDomainHttpsParameters_STATUS_ARM(generators)
	afdDomainHttpsParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AFDDomainHttpsParameters_STATUS_ARM{}), generators)

	return afdDomainHttpsParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAFDDomainHttpsParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAFDDomainHttpsParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CertificateType"] = gen.PtrOf(gen.OneConstOf(AFDDomainHttpsParameters_CertificateType_STATUS_ARM_AzureFirstPartyManagedCertificate, AFDDomainHttpsParameters_CertificateType_STATUS_ARM_CustomerCertificate, AFDDomainHttpsParameters_CertificateType_STATUS_ARM_ManagedCertificate))
	gens["MinimumTlsVersion"] = gen.PtrOf(gen.OneConstOf(AFDDomainHttpsParameters_MinimumTlsVersion_STATUS_ARM_TLS10, AFDDomainHttpsParameters_MinimumTlsVersion_STATUS_ARM_TLS12))
}

// AddRelatedPropertyGeneratorsForAFDDomainHttpsParameters_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAFDDomainHttpsParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Secret"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
}

func Test_AFDDomainProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AFDDomainProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAFDDomainProperties_STATUS_ARM, AFDDomainProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAFDDomainProperties_STATUS_ARM runs a test to see if a specific instance of AFDDomainProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAFDDomainProperties_STATUS_ARM(subject AFDDomainProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AFDDomainProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AFDDomainProperties_STATUS_ARM instances for property testing - lazily instantiated by
// AFDDomainProperties_STATUS_ARMGenerator()
var afdDomainProperties_STATUS_ARMGenerator gopter.Gen

// AFDDomainProperties_STATUS_ARMGenerator returns a generator of AFDDomainProperties_STATUS_ARM instances for property testing.
// We first initialize afdDomainProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AFDDomainProperties_STATUS_ARMGenerator() gopter.Gen {
	if afdDomainProperties_STATUS_ARMGenerator != nil {
		return afdDomainProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAFDDomainProperties_STATUS_ARM(generators)
	afdDomainProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AFDDomainProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAFDDomainProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAFDDomainProperties_STATUS_ARM(generators)
	afdDomainProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AFDDomainProperties_STATUS_ARM{}), generators)

	return afdDomainProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAFDDomainProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAFDDomainProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DeploymentStatus"] = gen.PtrOf(gen.OneConstOf(
		AFDDomainProperties_DeploymentStatus_STATUS_ARM_Failed,
		AFDDomainProperties_DeploymentStatus_STATUS_ARM_InProgress,
		AFDDomainProperties_DeploymentStatus_STATUS_ARM_NotStarted,
		AFDDomainProperties_DeploymentStatus_STATUS_ARM_Succeeded))
	gens["DomainValidationState"] = gen.PtrOf(gen.OneConstOf(
		AFDDomainProperties_DomainValidationState_STATUS_ARM_Approved,
		AFDDomainProperties_DomainValidationState_STATUS_ARM_InternalError,
		AFDDomainProperties_DomainValidationState_STATUS_ARM_Pending,
		AFDDomainProperties_DomainValidationState_STATUS_ARM_PendingRevalidation,
		AFDDomainProperties_DomainValidationState_STATUS_ARM_RefreshingValidationToken,
		AFDDomainProperties_DomainValidationState_STATUS_ARM_Rejected,
		AFDDomainProperties_DomainValidationState_STATUS_ARM_Submitting,
		AFDDomainProperties_DomainValidationState_STATUS_ARM_TimedOut,
		AFDDomainProperties_DomainValidationState_STATUS_ARM_Unknown))
	gens["ExtendedProperties"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["ProfileName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AFDDomainProperties_ProvisioningState_STATUS_ARM_Creating,
		AFDDomainProperties_ProvisioningState_STATUS_ARM_Deleting,
		AFDDomainProperties_ProvisioningState_STATUS_ARM_Failed,
		AFDDomainProperties_ProvisioningState_STATUS_ARM_Succeeded,
		AFDDomainProperties_ProvisioningState_STATUS_ARM_Updating))
}

// AddRelatedPropertyGeneratorsForAFDDomainProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAFDDomainProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AzureDnsZone"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
	gens["PreValidatedCustomDomainResourceId"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
	gens["TlsSettings"] = gen.PtrOf(AFDDomainHttpsParameters_STATUS_ARMGenerator())
	gens["ValidationProperties"] = gen.PtrOf(DomainValidationProperties_STATUS_ARMGenerator())
}

func Test_AfdCustomDomain_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AfdCustomDomain_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAfdCustomDomain_STATUS_ARM, AfdCustomDomain_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAfdCustomDomain_STATUS_ARM runs a test to see if a specific instance of AfdCustomDomain_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAfdCustomDomain_STATUS_ARM(subject AfdCustomDomain_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AfdCustomDomain_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AfdCustomDomain_STATUS_ARM instances for property testing - lazily instantiated by
// AfdCustomDomain_STATUS_ARMGenerator()
var afdCustomDomain_STATUS_ARMGenerator gopter.Gen

// AfdCustomDomain_STATUS_ARMGenerator returns a generator of AfdCustomDomain_STATUS_ARM instances for property testing.
// We first initialize afdCustomDomain_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AfdCustomDomain_STATUS_ARMGenerator() gopter.Gen {
	if afdCustomDomain_STATUS_ARMGenerator != nil {
		return afdCustomDomain_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAfdCustomDomain_STATUS_ARM(generators)
	afdCustomDomain_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AfdCustomDomain_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAfdCustomDomain_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAfdCustomDomain_STATUS_ARM(generators)
	afdCustomDomain_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AfdCustomDomain_STATUS_ARM{}), generators)

	return afdCustomDomain_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAfdCustomDomain_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAfdCustomDomain_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAfdCustomDomain_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAfdCustomDomain_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AFDDomainProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_DomainValidationProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DomainValidationProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDomainValidationProperties_STATUS_ARM, DomainValidationProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDomainValidationProperties_STATUS_ARM runs a test to see if a specific instance of DomainValidationProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDomainValidationProperties_STATUS_ARM(subject DomainValidationProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DomainValidationProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DomainValidationProperties_STATUS_ARM instances for property testing - lazily instantiated by
// DomainValidationProperties_STATUS_ARMGenerator()
var domainValidationProperties_STATUS_ARMGenerator gopter.Gen

// DomainValidationProperties_STATUS_ARMGenerator returns a generator of DomainValidationProperties_STATUS_ARM instances for property testing.
func DomainValidationProperties_STATUS_ARMGenerator() gopter.Gen {
	if domainValidationProperties_STATUS_ARMGenerator != nil {
		return domainValidationProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDomainValidationProperties_STATUS_ARM(generators)
	domainValidationProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DomainValidationProperties_STATUS_ARM{}), generators)

	return domainValidationProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDomainValidationProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDomainValidationProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ExpirationDate"] = gen.PtrOf(gen.AlphaString())
	gens["ValidationToken"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceReference_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_STATUS_ARM, ResourceReference_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_STATUS_ARM runs a test to see if a specific instance of ResourceReference_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_STATUS_ARM(subject ResourceReference_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceReference_STATUS_ARMGenerator()
var resourceReference_STATUS_ARMGenerator gopter.Gen

// ResourceReference_STATUS_ARMGenerator returns a generator of ResourceReference_STATUS_ARM instances for property testing.
func ResourceReference_STATUS_ARMGenerator() gopter.Gen {
	if resourceReference_STATUS_ARMGenerator != nil {
		return resourceReference_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM(generators)
	resourceReference_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_STATUS_ARM{}), generators)

	return resourceReference_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_ARM_Application,
		IdentityType_STATUS_ARM_Key,
		IdentityType_STATUS_ARM_ManagedIdentity,
		IdentityType_STATUS_ARM_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_ARM_Application,
		IdentityType_STATUS_ARM_Key,
		IdentityType_STATUS_ARM_ManagedIdentity,
		IdentityType_STATUS_ARM_User))
}
