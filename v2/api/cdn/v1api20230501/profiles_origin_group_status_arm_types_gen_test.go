// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AFDOriginGroupProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AFDOriginGroupProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAFDOriginGroupProperties_STATUS_ARM, AFDOriginGroupProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAFDOriginGroupProperties_STATUS_ARM runs a test to see if a specific instance of AFDOriginGroupProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAFDOriginGroupProperties_STATUS_ARM(subject AFDOriginGroupProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AFDOriginGroupProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AFDOriginGroupProperties_STATUS_ARM instances for property testing - lazily instantiated by
// AFDOriginGroupProperties_STATUS_ARMGenerator()
var afdOriginGroupProperties_STATUS_ARMGenerator gopter.Gen

// AFDOriginGroupProperties_STATUS_ARMGenerator returns a generator of AFDOriginGroupProperties_STATUS_ARM instances for property testing.
// We first initialize afdOriginGroupProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AFDOriginGroupProperties_STATUS_ARMGenerator() gopter.Gen {
	if afdOriginGroupProperties_STATUS_ARMGenerator != nil {
		return afdOriginGroupProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAFDOriginGroupProperties_STATUS_ARM(generators)
	afdOriginGroupProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AFDOriginGroupProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAFDOriginGroupProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAFDOriginGroupProperties_STATUS_ARM(generators)
	afdOriginGroupProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AFDOriginGroupProperties_STATUS_ARM{}), generators)

	return afdOriginGroupProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAFDOriginGroupProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAFDOriginGroupProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DeploymentStatus"] = gen.PtrOf(gen.OneConstOf(
		AFDOriginGroupProperties_DeploymentStatus_STATUS_ARM_Failed,
		AFDOriginGroupProperties_DeploymentStatus_STATUS_ARM_InProgress,
		AFDOriginGroupProperties_DeploymentStatus_STATUS_ARM_NotStarted,
		AFDOriginGroupProperties_DeploymentStatus_STATUS_ARM_Succeeded))
	gens["ProfileName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AFDOriginGroupProperties_ProvisioningState_STATUS_ARM_Creating,
		AFDOriginGroupProperties_ProvisioningState_STATUS_ARM_Deleting,
		AFDOriginGroupProperties_ProvisioningState_STATUS_ARM_Failed,
		AFDOriginGroupProperties_ProvisioningState_STATUS_ARM_Succeeded,
		AFDOriginGroupProperties_ProvisioningState_STATUS_ARM_Updating))
	gens["SessionAffinityState"] = gen.PtrOf(gen.OneConstOf(AFDOriginGroupProperties_SessionAffinityState_STATUS_ARM_Disabled, AFDOriginGroupProperties_SessionAffinityState_STATUS_ARM_Enabled))
	gens["TrafficRestorationTimeToHealedOrNewEndpointsInMinutes"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForAFDOriginGroupProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAFDOriginGroupProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HealthProbeSettings"] = gen.PtrOf(HealthProbeParameters_STATUS_ARMGenerator())
	gens["LoadBalancingSettings"] = gen.PtrOf(LoadBalancingSettingsParameters_STATUS_ARMGenerator())
}

func Test_HealthProbeParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HealthProbeParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHealthProbeParameters_STATUS_ARM, HealthProbeParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHealthProbeParameters_STATUS_ARM runs a test to see if a specific instance of HealthProbeParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHealthProbeParameters_STATUS_ARM(subject HealthProbeParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HealthProbeParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HealthProbeParameters_STATUS_ARM instances for property testing - lazily instantiated by
// HealthProbeParameters_STATUS_ARMGenerator()
var healthProbeParameters_STATUS_ARMGenerator gopter.Gen

// HealthProbeParameters_STATUS_ARMGenerator returns a generator of HealthProbeParameters_STATUS_ARM instances for property testing.
func HealthProbeParameters_STATUS_ARMGenerator() gopter.Gen {
	if healthProbeParameters_STATUS_ARMGenerator != nil {
		return healthProbeParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUS_ARM(generators)
	healthProbeParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HealthProbeParameters_STATUS_ARM{}), generators)

	return healthProbeParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHealthProbeParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProbeIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["ProbePath"] = gen.PtrOf(gen.AlphaString())
	gens["ProbeProtocol"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeProtocol_STATUS_ARM_Http, HealthProbeParameters_ProbeProtocol_STATUS_ARM_Https, HealthProbeParameters_ProbeProtocol_STATUS_ARM_NotSet))
	gens["ProbeRequestType"] = gen.PtrOf(gen.OneConstOf(HealthProbeParameters_ProbeRequestType_STATUS_ARM_GET, HealthProbeParameters_ProbeRequestType_STATUS_ARM_HEAD, HealthProbeParameters_ProbeRequestType_STATUS_ARM_NotSet))
}

func Test_LoadBalancingSettingsParameters_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancingSettingsParameters_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancingSettingsParameters_STATUS_ARM, LoadBalancingSettingsParameters_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancingSettingsParameters_STATUS_ARM runs a test to see if a specific instance of LoadBalancingSettingsParameters_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancingSettingsParameters_STATUS_ARM(subject LoadBalancingSettingsParameters_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancingSettingsParameters_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancingSettingsParameters_STATUS_ARM instances for property testing - lazily instantiated by
// LoadBalancingSettingsParameters_STATUS_ARMGenerator()
var loadBalancingSettingsParameters_STATUS_ARMGenerator gopter.Gen

// LoadBalancingSettingsParameters_STATUS_ARMGenerator returns a generator of LoadBalancingSettingsParameters_STATUS_ARM instances for property testing.
func LoadBalancingSettingsParameters_STATUS_ARMGenerator() gopter.Gen {
	if loadBalancingSettingsParameters_STATUS_ARMGenerator != nil {
		return loadBalancingSettingsParameters_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingSettingsParameters_STATUS_ARM(generators)
	loadBalancingSettingsParameters_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingSettingsParameters_STATUS_ARM{}), generators)

	return loadBalancingSettingsParameters_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancingSettingsParameters_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancingSettingsParameters_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdditionalLatencyInMilliseconds"] = gen.PtrOf(gen.Int())
	gens["SampleSize"] = gen.PtrOf(gen.Int())
	gens["SuccessfulSamplesRequired"] = gen.PtrOf(gen.Int())
}

func Test_Profiles_OriginGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Profiles_OriginGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfiles_OriginGroup_STATUS_ARM, Profiles_OriginGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfiles_OriginGroup_STATUS_ARM runs a test to see if a specific instance of Profiles_OriginGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfiles_OriginGroup_STATUS_ARM(subject Profiles_OriginGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Profiles_OriginGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Profiles_OriginGroup_STATUS_ARM instances for property testing - lazily instantiated by
// Profiles_OriginGroup_STATUS_ARMGenerator()
var profiles_OriginGroup_STATUS_ARMGenerator gopter.Gen

// Profiles_OriginGroup_STATUS_ARMGenerator returns a generator of Profiles_OriginGroup_STATUS_ARM instances for property testing.
// We first initialize profiles_OriginGroup_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Profiles_OriginGroup_STATUS_ARMGenerator() gopter.Gen {
	if profiles_OriginGroup_STATUS_ARMGenerator != nil {
		return profiles_OriginGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_OriginGroup_STATUS_ARM(generators)
	profiles_OriginGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Profiles_OriginGroup_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_OriginGroup_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForProfiles_OriginGroup_STATUS_ARM(generators)
	profiles_OriginGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Profiles_OriginGroup_STATUS_ARM{}), generators)

	return profiles_OriginGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForProfiles_OriginGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfiles_OriginGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProfiles_OriginGroup_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfiles_OriginGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AFDOriginGroupProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}
