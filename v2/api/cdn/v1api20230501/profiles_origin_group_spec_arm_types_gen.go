// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Profiles_OriginGroup_Spec_ARM struct {
	Name string `json:"name,omitempty"`

	// Properties: The JSON object that contains the properties of the origin group.
	Properties *AFDOriginGroupProperties_ARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Profiles_OriginGroup_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-05-01"
func (group Profiles_OriginGroup_Spec_ARM) GetAPIVersion() string {
	return "2023-05-01"
}

// GetName returns the Name of the resource
func (group *Profiles_OriginGroup_Spec_ARM) GetName() string {
	return group.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cdn/profiles/originGroups"
func (group *Profiles_OriginGroup_Spec_ARM) GetType() string {
	return "Microsoft.Cdn/profiles/originGroups"
}

// The JSON object that contains the properties of the origin group.
type AFDOriginGroupProperties_ARM struct {
	// HealthProbeSettings: Health probe settings to the origin that is used to determine the health of the origin.
	HealthProbeSettings *HealthProbeParameters_ARM `json:"healthProbeSettings,omitempty"`

	// LoadBalancingSettings: Load balancing settings for a backend pool
	LoadBalancingSettings *LoadBalancingSettingsParameters_ARM `json:"loadBalancingSettings,omitempty"`

	// SessionAffinityState: Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityState *AFDOriginGroupProperties_SessionAffinityState_ARM `json:"sessionAffinityState,omitempty"`

	// TrafficRestorationTimeToHealedOrNewEndpointsInMinutes: Time in minutes to shift the traffic to the endpoint gradually
	// when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins. This property is currently not
	// supported.
	TrafficRestorationTimeToHealedOrNewEndpointsInMinutes *int `json:"trafficRestorationTimeToHealedOrNewEndpointsInMinutes,omitempty"`
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type AFDOriginGroupProperties_SessionAffinityState_ARM string

const (
	AFDOriginGroupProperties_SessionAffinityState_ARM_Disabled = AFDOriginGroupProperties_SessionAffinityState_ARM("Disabled")
	AFDOriginGroupProperties_SessionAffinityState_ARM_Enabled  = AFDOriginGroupProperties_SessionAffinityState_ARM("Enabled")
)

// Mapping from string to AFDOriginGroupProperties_SessionAffinityState_ARM
var aFDOriginGroupProperties_SessionAffinityState_ARM_Values = map[string]AFDOriginGroupProperties_SessionAffinityState_ARM{
	"disabled": AFDOriginGroupProperties_SessionAffinityState_ARM_Disabled,
	"enabled":  AFDOriginGroupProperties_SessionAffinityState_ARM_Enabled,
}

// The JSON object that contains the properties to send health probes to origin.
type HealthProbeParameters_ARM struct {
	// ProbeIntervalInSeconds: The number of seconds between health probes.Default is 240sec.
	ProbeIntervalInSeconds *int `json:"probeIntervalInSeconds,omitempty"`

	// ProbePath: The path relative to the origin that is used to determine the health of the origin.
	ProbePath *string `json:"probePath,omitempty"`

	// ProbeProtocol: Protocol to use for health probe.
	ProbeProtocol *HealthProbeParameters_ProbeProtocol_ARM `json:"probeProtocol,omitempty"`

	// ProbeRequestType: The type of health probe request that is made.
	ProbeRequestType *HealthProbeParameters_ProbeRequestType_ARM `json:"probeRequestType,omitempty"`
}

// Round-Robin load balancing settings for a backend pool
type LoadBalancingSettingsParameters_ARM struct {
	// AdditionalLatencyInMilliseconds: The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyInMilliseconds *int `json:"additionalLatencyInMilliseconds,omitempty"`

	// SampleSize: The number of samples to consider for load balancing decisions
	SampleSize *int `json:"sampleSize,omitempty"`

	// SuccessfulSamplesRequired: The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired *int `json:"successfulSamplesRequired,omitempty"`
}

// +kubebuilder:validation:Enum={"Http","Https","NotSet"}
type HealthProbeParameters_ProbeProtocol_ARM string

const (
	HealthProbeParameters_ProbeProtocol_ARM_Http   = HealthProbeParameters_ProbeProtocol_ARM("Http")
	HealthProbeParameters_ProbeProtocol_ARM_Https  = HealthProbeParameters_ProbeProtocol_ARM("Https")
	HealthProbeParameters_ProbeProtocol_ARM_NotSet = HealthProbeParameters_ProbeProtocol_ARM("NotSet")
)

// Mapping from string to HealthProbeParameters_ProbeProtocol_ARM
var healthProbeParameters_ProbeProtocol_ARM_Values = map[string]HealthProbeParameters_ProbeProtocol_ARM{
	"http":   HealthProbeParameters_ProbeProtocol_ARM_Http,
	"https":  HealthProbeParameters_ProbeProtocol_ARM_Https,
	"notset": HealthProbeParameters_ProbeProtocol_ARM_NotSet,
}

// +kubebuilder:validation:Enum={"GET","HEAD","NotSet"}
type HealthProbeParameters_ProbeRequestType_ARM string

const (
	HealthProbeParameters_ProbeRequestType_ARM_GET    = HealthProbeParameters_ProbeRequestType_ARM("GET")
	HealthProbeParameters_ProbeRequestType_ARM_HEAD   = HealthProbeParameters_ProbeRequestType_ARM("HEAD")
	HealthProbeParameters_ProbeRequestType_ARM_NotSet = HealthProbeParameters_ProbeRequestType_ARM("NotSet")
)

// Mapping from string to HealthProbeParameters_ProbeRequestType_ARM
var healthProbeParameters_ProbeRequestType_ARM_Values = map[string]HealthProbeParameters_ProbeRequestType_ARM{
	"get":    HealthProbeParameters_ProbeRequestType_ARM_GET,
	"head":   HealthProbeParameters_ProbeRequestType_ARM_HEAD,
	"notset": HealthProbeParameters_ProbeRequestType_ARM_NotSet,
}
