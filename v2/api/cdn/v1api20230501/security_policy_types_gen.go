// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import (
	"fmt"
	v20230501s "github.com/Azure/azure-service-operator/v2/api/cdn/v1api20230501/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /cdn/resource-manager/Microsoft.Cdn/stable/2023-05-01/afdx.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/securityPolicies/{securityPolicyName}
type SecurityPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Profiles_SecurityPolicy_Spec   `json:"spec,omitempty"`
	Status            Profiles_SecurityPolicy_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SecurityPolicy{}

// GetConditions returns the conditions of the resource
func (policy *SecurityPolicy) GetConditions() conditions.Conditions {
	return policy.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (policy *SecurityPolicy) SetConditions(conditions conditions.Conditions) {
	policy.Status.Conditions = conditions
}

var _ conversion.Convertible = &SecurityPolicy{}

// ConvertFrom populates our SecurityPolicy from the provided hub SecurityPolicy
func (policy *SecurityPolicy) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20230501s.SecurityPolicy)
	if !ok {
		return fmt.Errorf("expected cdn/v1api20230501/storage/SecurityPolicy but received %T instead", hub)
	}

	return policy.AssignProperties_From_SecurityPolicy(source)
}

// ConvertTo populates the provided hub SecurityPolicy from our SecurityPolicy
func (policy *SecurityPolicy) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20230501s.SecurityPolicy)
	if !ok {
		return fmt.Errorf("expected cdn/v1api20230501/storage/SecurityPolicy but received %T instead", hub)
	}

	return policy.AssignProperties_To_SecurityPolicy(destination)
}

// +kubebuilder:webhook:path=/mutate-cdn-azure-com-v1api20230501-securitypolicy,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cdn.azure.com,resources=securitypolicies,verbs=create;update,versions=v1api20230501,name=default.v1api20230501.securitypolicies.cdn.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &SecurityPolicy{}

// Default applies defaults to the SecurityPolicy resource
func (policy *SecurityPolicy) Default() {
	policy.defaultImpl()
	var temp any = policy
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (policy *SecurityPolicy) defaultAzureName() {
	if policy.Spec.AzureName == "" {
		policy.Spec.AzureName = policy.Name
	}
}

// defaultImpl applies the code generated defaults to the SecurityPolicy resource
func (policy *SecurityPolicy) defaultImpl() { policy.defaultAzureName() }

var _ genruntime.ImportableResource = &SecurityPolicy{}

// InitializeSpec initializes the spec for this resource from the given status
func (policy *SecurityPolicy) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*Profiles_SecurityPolicy_STATUS); ok {
		return policy.Spec.Initialize_From_Profiles_SecurityPolicy_STATUS(s)
	}

	return fmt.Errorf("expected Status of type Profiles_SecurityPolicy_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &SecurityPolicy{}

// AzureName returns the Azure name of the resource
func (policy *SecurityPolicy) AzureName() string {
	return policy.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-05-01"
func (policy SecurityPolicy) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (policy *SecurityPolicy) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (policy *SecurityPolicy) GetSpec() genruntime.ConvertibleSpec {
	return &policy.Spec
}

// GetStatus returns the status of this resource
func (policy *SecurityPolicy) GetStatus() genruntime.ConvertibleStatus {
	return &policy.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (policy *SecurityPolicy) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Cdn/profiles/securityPolicies"
func (policy *SecurityPolicy) GetType() string {
	return "Microsoft.Cdn/profiles/securityPolicies"
}

// NewEmptyStatus returns a new empty (blank) status
func (policy *SecurityPolicy) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Profiles_SecurityPolicy_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (policy *SecurityPolicy) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(policy.Spec)
	return policy.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (policy *SecurityPolicy) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Profiles_SecurityPolicy_STATUS); ok {
		policy.Status = *st
		return nil
	}

	// Convert status to required version
	var st Profiles_SecurityPolicy_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	policy.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-cdn-azure-com-v1api20230501-securitypolicy,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=cdn.azure.com,resources=securitypolicies,verbs=create;update,versions=v1api20230501,name=validate.v1api20230501.securitypolicies.cdn.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &SecurityPolicy{}

// ValidateCreate validates the creation of the resource
func (policy *SecurityPolicy) ValidateCreate() (admission.Warnings, error) {
	validations := policy.createValidations()
	var temp any = policy
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (policy *SecurityPolicy) ValidateDelete() (admission.Warnings, error) {
	validations := policy.deleteValidations()
	var temp any = policy
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (policy *SecurityPolicy) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := policy.updateValidations()
	var temp any = policy
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (policy *SecurityPolicy) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){policy.validateResourceReferences, policy.validateOwnerReference}
}

// deleteValidations validates the deletion of the resource
func (policy *SecurityPolicy) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (policy *SecurityPolicy) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return policy.validateResourceReferences()
		},
		policy.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return policy.validateOwnerReference()
		},
	}
}

// validateOwnerReference validates the owner field
func (policy *SecurityPolicy) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(policy)
}

// validateResourceReferences validates all resource references
func (policy *SecurityPolicy) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&policy.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (policy *SecurityPolicy) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*SecurityPolicy)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, policy)
}

// AssignProperties_From_SecurityPolicy populates our SecurityPolicy from the provided source SecurityPolicy
func (policy *SecurityPolicy) AssignProperties_From_SecurityPolicy(source *v20230501s.SecurityPolicy) error {

	// ObjectMeta
	policy.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Profiles_SecurityPolicy_Spec
	err := spec.AssignProperties_From_Profiles_SecurityPolicy_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Profiles_SecurityPolicy_Spec() to populate field Spec")
	}
	policy.Spec = spec

	// Status
	var status Profiles_SecurityPolicy_STATUS
	err = status.AssignProperties_From_Profiles_SecurityPolicy_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Profiles_SecurityPolicy_STATUS() to populate field Status")
	}
	policy.Status = status

	// No error
	return nil
}

// AssignProperties_To_SecurityPolicy populates the provided destination SecurityPolicy from our SecurityPolicy
func (policy *SecurityPolicy) AssignProperties_To_SecurityPolicy(destination *v20230501s.SecurityPolicy) error {

	// ObjectMeta
	destination.ObjectMeta = *policy.ObjectMeta.DeepCopy()

	// Spec
	var spec v20230501s.Profiles_SecurityPolicy_Spec
	err := policy.Spec.AssignProperties_To_Profiles_SecurityPolicy_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Profiles_SecurityPolicy_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20230501s.Profiles_SecurityPolicy_STATUS
	err = policy.Status.AssignProperties_To_Profiles_SecurityPolicy_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Profiles_SecurityPolicy_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (policy *SecurityPolicy) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: policy.Spec.OriginalVersion(),
		Kind:    "SecurityPolicy",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /cdn/resource-manager/Microsoft.Cdn/stable/2023-05-01/afdx.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/securityPolicies/{securityPolicyName}
type SecurityPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityPolicy `json:"items"`
}

type Profiles_SecurityPolicy_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a cdn.azure.com/Profile resource
	Owner *genruntime.KnownResourceReference `group:"cdn.azure.com" json:"owner,omitempty" kind:"Profile"`

	// Parameters: object which contains security policy parameters
	Parameters *SecurityPolicyPropertiesParameters `json:"parameters,omitempty"`
}

var _ genruntime.ARMTransformer = &Profiles_SecurityPolicy_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *Profiles_SecurityPolicy_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &Profiles_SecurityPolicy_Spec_ARM{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if policy.Parameters != nil {
		result.Properties = &SecurityPolicyProperties_ARM{}
	}
	if policy.Parameters != nil {
		parameters_ARM, err := (*policy.Parameters).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		parameters := *parameters_ARM.(*SecurityPolicyPropertiesParameters_ARM)
		result.Properties.Parameters = &parameters
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *Profiles_SecurityPolicy_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Profiles_SecurityPolicy_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *Profiles_SecurityPolicy_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Profiles_SecurityPolicy_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Profiles_SecurityPolicy_Spec_ARM, got %T", armInput)
	}

	// Set property "AzureName":
	policy.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Owner":
	policy.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Parameters":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Parameters != nil {
			var parameters1 SecurityPolicyPropertiesParameters
			err := parameters1.PopulateFromARM(owner, *typedInput.Properties.Parameters)
			if err != nil {
				return err
			}
			parameters := parameters1
			policy.Parameters = &parameters
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Profiles_SecurityPolicy_Spec{}

// ConvertSpecFrom populates our Profiles_SecurityPolicy_Spec from the provided source
func (policy *Profiles_SecurityPolicy_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20230501s.Profiles_SecurityPolicy_Spec)
	if ok {
		// Populate our instance from source
		return policy.AssignProperties_From_Profiles_SecurityPolicy_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20230501s.Profiles_SecurityPolicy_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = policy.AssignProperties_From_Profiles_SecurityPolicy_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Profiles_SecurityPolicy_Spec
func (policy *Profiles_SecurityPolicy_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20230501s.Profiles_SecurityPolicy_Spec)
	if ok {
		// Populate destination from our instance
		return policy.AssignProperties_To_Profiles_SecurityPolicy_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20230501s.Profiles_SecurityPolicy_Spec{}
	err := policy.AssignProperties_To_Profiles_SecurityPolicy_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Profiles_SecurityPolicy_Spec populates our Profiles_SecurityPolicy_Spec from the provided source Profiles_SecurityPolicy_Spec
func (policy *Profiles_SecurityPolicy_Spec) AssignProperties_From_Profiles_SecurityPolicy_Spec(source *v20230501s.Profiles_SecurityPolicy_Spec) error {

	// AzureName
	policy.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		policy.Owner = &owner
	} else {
		policy.Owner = nil
	}

	// Parameters
	if source.Parameters != nil {
		var parameter SecurityPolicyPropertiesParameters
		err := parameter.AssignProperties_From_SecurityPolicyPropertiesParameters(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SecurityPolicyPropertiesParameters() to populate field Parameters")
		}
		policy.Parameters = &parameter
	} else {
		policy.Parameters = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Profiles_SecurityPolicy_Spec populates the provided destination Profiles_SecurityPolicy_Spec from our Profiles_SecurityPolicy_Spec
func (policy *Profiles_SecurityPolicy_Spec) AssignProperties_To_Profiles_SecurityPolicy_Spec(destination *v20230501s.Profiles_SecurityPolicy_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = policy.AzureName

	// OriginalVersion
	destination.OriginalVersion = policy.OriginalVersion()

	// Owner
	if policy.Owner != nil {
		owner := policy.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Parameters
	if policy.Parameters != nil {
		var parameter v20230501s.SecurityPolicyPropertiesParameters
		err := policy.Parameters.AssignProperties_To_SecurityPolicyPropertiesParameters(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SecurityPolicyPropertiesParameters() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_Profiles_SecurityPolicy_STATUS populates our Profiles_SecurityPolicy_Spec from the provided source Profiles_SecurityPolicy_STATUS
func (policy *Profiles_SecurityPolicy_Spec) Initialize_From_Profiles_SecurityPolicy_STATUS(source *Profiles_SecurityPolicy_STATUS) error {

	// Parameters
	if source.Parameters != nil {
		var parameter SecurityPolicyPropertiesParameters
		err := parameter.Initialize_From_SecurityPolicyPropertiesParameters_STATUS(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SecurityPolicyPropertiesParameters_STATUS() to populate field Parameters")
		}
		policy.Parameters = &parameter
	} else {
		policy.Parameters = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (policy *Profiles_SecurityPolicy_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (policy *Profiles_SecurityPolicy_Spec) SetAzureName(azureName string) {
	policy.AzureName = azureName
}

type Profiles_SecurityPolicy_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions       []conditions.Condition                            `json:"conditions,omitempty"`
	DeploymentStatus *SecurityPolicyProperties_DeploymentStatus_STATUS `json:"deploymentStatus,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Parameters: object which contains security policy parameters
	Parameters *SecurityPolicyPropertiesParameters_STATUS `json:"parameters,omitempty"`

	// ProfileName: The name of the profile which holds the security policy.
	ProfileName *string `json:"profileName,omitempty"`

	// ProvisioningState: Provisioning status
	ProvisioningState *SecurityPolicyProperties_ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// SystemData: Read only system data
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Profiles_SecurityPolicy_STATUS{}

// ConvertStatusFrom populates our Profiles_SecurityPolicy_STATUS from the provided source
func (policy *Profiles_SecurityPolicy_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20230501s.Profiles_SecurityPolicy_STATUS)
	if ok {
		// Populate our instance from source
		return policy.AssignProperties_From_Profiles_SecurityPolicy_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20230501s.Profiles_SecurityPolicy_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = policy.AssignProperties_From_Profiles_SecurityPolicy_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Profiles_SecurityPolicy_STATUS
func (policy *Profiles_SecurityPolicy_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20230501s.Profiles_SecurityPolicy_STATUS)
	if ok {
		// Populate destination from our instance
		return policy.AssignProperties_To_Profiles_SecurityPolicy_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20230501s.Profiles_SecurityPolicy_STATUS{}
	err := policy.AssignProperties_To_Profiles_SecurityPolicy_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Profiles_SecurityPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *Profiles_SecurityPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Profiles_SecurityPolicy_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *Profiles_SecurityPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Profiles_SecurityPolicy_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Profiles_SecurityPolicy_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "DeploymentStatus":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DeploymentStatus != nil {
			deploymentStatus := *typedInput.Properties.DeploymentStatus
			policy.DeploymentStatus = &deploymentStatus
		}
	}

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		policy.Id = &id
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		policy.Name = &name
	}

	// Set property "Parameters":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Parameters != nil {
			var parameters1 SecurityPolicyPropertiesParameters_STATUS
			err := parameters1.PopulateFromARM(owner, *typedInput.Properties.Parameters)
			if err != nil {
				return err
			}
			parameters := parameters1
			policy.Parameters = &parameters
		}
	}

	// Set property "ProfileName":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProfileName != nil {
			profileName := *typedInput.Properties.ProfileName
			policy.ProfileName = &profileName
		}
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			policy.ProvisioningState = &provisioningState
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		policy.SystemData = &systemData
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		policy.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_Profiles_SecurityPolicy_STATUS populates our Profiles_SecurityPolicy_STATUS from the provided source Profiles_SecurityPolicy_STATUS
func (policy *Profiles_SecurityPolicy_STATUS) AssignProperties_From_Profiles_SecurityPolicy_STATUS(source *v20230501s.Profiles_SecurityPolicy_STATUS) error {

	// Conditions
	policy.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DeploymentStatus
	if source.DeploymentStatus != nil {
		deploymentStatus := SecurityPolicyProperties_DeploymentStatus_STATUS(*source.DeploymentStatus)
		policy.DeploymentStatus = &deploymentStatus
	} else {
		policy.DeploymentStatus = nil
	}

	// Id
	policy.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	policy.Name = genruntime.ClonePointerToString(source.Name)

	// Parameters
	if source.Parameters != nil {
		var parameter SecurityPolicyPropertiesParameters_STATUS
		err := parameter.AssignProperties_From_SecurityPolicyPropertiesParameters_STATUS(source.Parameters)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SecurityPolicyPropertiesParameters_STATUS() to populate field Parameters")
		}
		policy.Parameters = &parameter
	} else {
		policy.Parameters = nil
	}

	// ProfileName
	policy.ProfileName = genruntime.ClonePointerToString(source.ProfileName)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := SecurityPolicyProperties_ProvisioningState_STATUS(*source.ProvisioningState)
		policy.ProvisioningState = &provisioningState
	} else {
		policy.ProvisioningState = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		policy.SystemData = &systemDatum
	} else {
		policy.SystemData = nil
	}

	// Type
	policy.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_Profiles_SecurityPolicy_STATUS populates the provided destination Profiles_SecurityPolicy_STATUS from our Profiles_SecurityPolicy_STATUS
func (policy *Profiles_SecurityPolicy_STATUS) AssignProperties_To_Profiles_SecurityPolicy_STATUS(destination *v20230501s.Profiles_SecurityPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(policy.Conditions)

	// DeploymentStatus
	if policy.DeploymentStatus != nil {
		deploymentStatus := string(*policy.DeploymentStatus)
		destination.DeploymentStatus = &deploymentStatus
	} else {
		destination.DeploymentStatus = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(policy.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(policy.Name)

	// Parameters
	if policy.Parameters != nil {
		var parameter v20230501s.SecurityPolicyPropertiesParameters_STATUS
		err := policy.Parameters.AssignProperties_To_SecurityPolicyPropertiesParameters_STATUS(&parameter)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SecurityPolicyPropertiesParameters_STATUS() to populate field Parameters")
		}
		destination.Parameters = &parameter
	} else {
		destination.Parameters = nil
	}

	// ProfileName
	destination.ProfileName = genruntime.ClonePointerToString(policy.ProfileName)

	// ProvisioningState
	if policy.ProvisioningState != nil {
		provisioningState := string(*policy.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// SystemData
	if policy.SystemData != nil {
		var systemDatum v20230501s.SystemData_STATUS
		err := policy.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(policy.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SecurityPolicyPropertiesParameters struct {
	// WebApplicationFirewall: Mutually exclusive with all other properties
	WebApplicationFirewall *SecurityPolicyWebApplicationFirewallParameters `json:"webApplicationFirewall,omitempty"`
}

var _ genruntime.ARMTransformer = &SecurityPolicyPropertiesParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *SecurityPolicyPropertiesParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &SecurityPolicyPropertiesParameters_ARM{}

	// Set property "WebApplicationFirewall":
	if parameters.WebApplicationFirewall != nil {
		webApplicationFirewall_ARM, err := (*parameters.WebApplicationFirewall).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		webApplicationFirewall := *webApplicationFirewall_ARM.(*SecurityPolicyWebApplicationFirewallParameters_ARM)
		result.WebApplicationFirewall = &webApplicationFirewall
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *SecurityPolicyPropertiesParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityPolicyPropertiesParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *SecurityPolicyPropertiesParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityPolicyPropertiesParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityPolicyPropertiesParameters_ARM, got %T", armInput)
	}

	// Set property "WebApplicationFirewall":
	if typedInput.WebApplicationFirewall != nil {
		var webApplicationFirewall1 SecurityPolicyWebApplicationFirewallParameters
		err := webApplicationFirewall1.PopulateFromARM(owner, *typedInput.WebApplicationFirewall)
		if err != nil {
			return err
		}
		webApplicationFirewall := webApplicationFirewall1
		parameters.WebApplicationFirewall = &webApplicationFirewall
	}

	// No error
	return nil
}

// AssignProperties_From_SecurityPolicyPropertiesParameters populates our SecurityPolicyPropertiesParameters from the provided source SecurityPolicyPropertiesParameters
func (parameters *SecurityPolicyPropertiesParameters) AssignProperties_From_SecurityPolicyPropertiesParameters(source *v20230501s.SecurityPolicyPropertiesParameters) error {

	// WebApplicationFirewall
	if source.WebApplicationFirewall != nil {
		var webApplicationFirewall SecurityPolicyWebApplicationFirewallParameters
		err := webApplicationFirewall.AssignProperties_From_SecurityPolicyWebApplicationFirewallParameters(source.WebApplicationFirewall)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SecurityPolicyWebApplicationFirewallParameters() to populate field WebApplicationFirewall")
		}
		parameters.WebApplicationFirewall = &webApplicationFirewall
	} else {
		parameters.WebApplicationFirewall = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SecurityPolicyPropertiesParameters populates the provided destination SecurityPolicyPropertiesParameters from our SecurityPolicyPropertiesParameters
func (parameters *SecurityPolicyPropertiesParameters) AssignProperties_To_SecurityPolicyPropertiesParameters(destination *v20230501s.SecurityPolicyPropertiesParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// WebApplicationFirewall
	if parameters.WebApplicationFirewall != nil {
		var webApplicationFirewall v20230501s.SecurityPolicyWebApplicationFirewallParameters
		err := parameters.WebApplicationFirewall.AssignProperties_To_SecurityPolicyWebApplicationFirewallParameters(&webApplicationFirewall)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SecurityPolicyWebApplicationFirewallParameters() to populate field WebApplicationFirewall")
		}
		destination.WebApplicationFirewall = &webApplicationFirewall
	} else {
		destination.WebApplicationFirewall = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_SecurityPolicyPropertiesParameters_STATUS populates our SecurityPolicyPropertiesParameters from the provided source SecurityPolicyPropertiesParameters_STATUS
func (parameters *SecurityPolicyPropertiesParameters) Initialize_From_SecurityPolicyPropertiesParameters_STATUS(source *SecurityPolicyPropertiesParameters_STATUS) error {

	// WebApplicationFirewall
	if source.WebApplicationFirewall != nil {
		var webApplicationFirewall SecurityPolicyWebApplicationFirewallParameters
		err := webApplicationFirewall.Initialize_From_SecurityPolicyWebApplicationFirewallParameters_STATUS(source.WebApplicationFirewall)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_SecurityPolicyWebApplicationFirewallParameters_STATUS() to populate field WebApplicationFirewall")
		}
		parameters.WebApplicationFirewall = &webApplicationFirewall
	} else {
		parameters.WebApplicationFirewall = nil
	}

	// No error
	return nil
}

type SecurityPolicyPropertiesParameters_STATUS struct {
	// WebApplicationFirewall: Mutually exclusive with all other properties
	WebApplicationFirewall *SecurityPolicyWebApplicationFirewallParameters_STATUS `json:"webApplicationFirewall,omitempty"`
}

var _ genruntime.FromARMConverter = &SecurityPolicyPropertiesParameters_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *SecurityPolicyPropertiesParameters_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityPolicyPropertiesParameters_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *SecurityPolicyPropertiesParameters_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityPolicyPropertiesParameters_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityPolicyPropertiesParameters_STATUS_ARM, got %T", armInput)
	}

	// Set property "WebApplicationFirewall":
	if typedInput.WebApplicationFirewall != nil {
		var webApplicationFirewall1 SecurityPolicyWebApplicationFirewallParameters_STATUS
		err := webApplicationFirewall1.PopulateFromARM(owner, *typedInput.WebApplicationFirewall)
		if err != nil {
			return err
		}
		webApplicationFirewall := webApplicationFirewall1
		parameters.WebApplicationFirewall = &webApplicationFirewall
	}

	// No error
	return nil
}

// AssignProperties_From_SecurityPolicyPropertiesParameters_STATUS populates our SecurityPolicyPropertiesParameters_STATUS from the provided source SecurityPolicyPropertiesParameters_STATUS
func (parameters *SecurityPolicyPropertiesParameters_STATUS) AssignProperties_From_SecurityPolicyPropertiesParameters_STATUS(source *v20230501s.SecurityPolicyPropertiesParameters_STATUS) error {

	// WebApplicationFirewall
	if source.WebApplicationFirewall != nil {
		var webApplicationFirewall SecurityPolicyWebApplicationFirewallParameters_STATUS
		err := webApplicationFirewall.AssignProperties_From_SecurityPolicyWebApplicationFirewallParameters_STATUS(source.WebApplicationFirewall)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SecurityPolicyWebApplicationFirewallParameters_STATUS() to populate field WebApplicationFirewall")
		}
		parameters.WebApplicationFirewall = &webApplicationFirewall
	} else {
		parameters.WebApplicationFirewall = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SecurityPolicyPropertiesParameters_STATUS populates the provided destination SecurityPolicyPropertiesParameters_STATUS from our SecurityPolicyPropertiesParameters_STATUS
func (parameters *SecurityPolicyPropertiesParameters_STATUS) AssignProperties_To_SecurityPolicyPropertiesParameters_STATUS(destination *v20230501s.SecurityPolicyPropertiesParameters_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// WebApplicationFirewall
	if parameters.WebApplicationFirewall != nil {
		var webApplicationFirewall v20230501s.SecurityPolicyWebApplicationFirewallParameters_STATUS
		err := parameters.WebApplicationFirewall.AssignProperties_To_SecurityPolicyWebApplicationFirewallParameters_STATUS(&webApplicationFirewall)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SecurityPolicyWebApplicationFirewallParameters_STATUS() to populate field WebApplicationFirewall")
		}
		destination.WebApplicationFirewall = &webApplicationFirewall
	} else {
		destination.WebApplicationFirewall = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SecurityPolicyWebApplicationFirewallParameters struct {
	// Associations: Waf associations
	Associations []SecurityPolicyWebApplicationFirewallAssociation `json:"associations,omitempty"`

	// +kubebuilder:validation:Required
	// Type: The type of the Security policy to create.
	Type *SecurityPolicyWebApplicationFirewallParameters_Type `json:"type,omitempty"`

	// WafPolicy: Resource ID.
	WafPolicy *ResourceReference `json:"wafPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &SecurityPolicyWebApplicationFirewallParameters{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (parameters *SecurityPolicyWebApplicationFirewallParameters) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if parameters == nil {
		return nil, nil
	}
	result := &SecurityPolicyWebApplicationFirewallParameters_ARM{}

	// Set property "Associations":
	for _, item := range parameters.Associations {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Associations = append(result.Associations, *item_ARM.(*SecurityPolicyWebApplicationFirewallAssociation_ARM))
	}

	// Set property "Type":
	if parameters.Type != nil {
		result.Type = *parameters.Type
	}

	// Set property "WafPolicy":
	if parameters.WafPolicy != nil {
		wafPolicy_ARM, err := (*parameters.WafPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		wafPolicy := *wafPolicy_ARM.(*ResourceReference_ARM)
		result.WafPolicy = &wafPolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *SecurityPolicyWebApplicationFirewallParameters) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityPolicyWebApplicationFirewallParameters_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *SecurityPolicyWebApplicationFirewallParameters) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityPolicyWebApplicationFirewallParameters_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityPolicyWebApplicationFirewallParameters_ARM, got %T", armInput)
	}

	// Set property "Associations":
	for _, item := range typedInput.Associations {
		var item1 SecurityPolicyWebApplicationFirewallAssociation
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		parameters.Associations = append(parameters.Associations, item1)
	}

	// Set property "Type":
	parameters.Type = &typedInput.Type

	// Set property "WafPolicy":
	if typedInput.WafPolicy != nil {
		var wafPolicy1 ResourceReference
		err := wafPolicy1.PopulateFromARM(owner, *typedInput.WafPolicy)
		if err != nil {
			return err
		}
		wafPolicy := wafPolicy1
		parameters.WafPolicy = &wafPolicy
	}

	// No error
	return nil
}

// AssignProperties_From_SecurityPolicyWebApplicationFirewallParameters populates our SecurityPolicyWebApplicationFirewallParameters from the provided source SecurityPolicyWebApplicationFirewallParameters
func (parameters *SecurityPolicyWebApplicationFirewallParameters) AssignProperties_From_SecurityPolicyWebApplicationFirewallParameters(source *v20230501s.SecurityPolicyWebApplicationFirewallParameters) error {

	// Associations
	if source.Associations != nil {
		associationList := make([]SecurityPolicyWebApplicationFirewallAssociation, len(source.Associations))
		for associationIndex, associationItem := range source.Associations {
			// Shadow the loop variable to avoid aliasing
			associationItem := associationItem
			var association SecurityPolicyWebApplicationFirewallAssociation
			err := association.AssignProperties_From_SecurityPolicyWebApplicationFirewallAssociation(&associationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SecurityPolicyWebApplicationFirewallAssociation() to populate field Associations")
			}
			associationList[associationIndex] = association
		}
		parameters.Associations = associationList
	} else {
		parameters.Associations = nil
	}

	// Type
	if source.Type != nil {
		typeVar := SecurityPolicyWebApplicationFirewallParameters_Type(*source.Type)
		parameters.Type = &typeVar
	} else {
		parameters.Type = nil
	}

	// WafPolicy
	if source.WafPolicy != nil {
		var wafPolicy ResourceReference
		err := wafPolicy.AssignProperties_From_ResourceReference(source.WafPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ResourceReference() to populate field WafPolicy")
		}
		parameters.WafPolicy = &wafPolicy
	} else {
		parameters.WafPolicy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SecurityPolicyWebApplicationFirewallParameters populates the provided destination SecurityPolicyWebApplicationFirewallParameters from our SecurityPolicyWebApplicationFirewallParameters
func (parameters *SecurityPolicyWebApplicationFirewallParameters) AssignProperties_To_SecurityPolicyWebApplicationFirewallParameters(destination *v20230501s.SecurityPolicyWebApplicationFirewallParameters) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Associations
	if parameters.Associations != nil {
		associationList := make([]v20230501s.SecurityPolicyWebApplicationFirewallAssociation, len(parameters.Associations))
		for associationIndex, associationItem := range parameters.Associations {
			// Shadow the loop variable to avoid aliasing
			associationItem := associationItem
			var association v20230501s.SecurityPolicyWebApplicationFirewallAssociation
			err := associationItem.AssignProperties_To_SecurityPolicyWebApplicationFirewallAssociation(&association)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SecurityPolicyWebApplicationFirewallAssociation() to populate field Associations")
			}
			associationList[associationIndex] = association
		}
		destination.Associations = associationList
	} else {
		destination.Associations = nil
	}

	// Type
	if parameters.Type != nil {
		typeVar := string(*parameters.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// WafPolicy
	if parameters.WafPolicy != nil {
		var wafPolicy v20230501s.ResourceReference
		err := parameters.WafPolicy.AssignProperties_To_ResourceReference(&wafPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ResourceReference() to populate field WafPolicy")
		}
		destination.WafPolicy = &wafPolicy
	} else {
		destination.WafPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_SecurityPolicyWebApplicationFirewallParameters_STATUS populates our SecurityPolicyWebApplicationFirewallParameters from the provided source SecurityPolicyWebApplicationFirewallParameters_STATUS
func (parameters *SecurityPolicyWebApplicationFirewallParameters) Initialize_From_SecurityPolicyWebApplicationFirewallParameters_STATUS(source *SecurityPolicyWebApplicationFirewallParameters_STATUS) error {

	// Associations
	if source.Associations != nil {
		associationList := make([]SecurityPolicyWebApplicationFirewallAssociation, len(source.Associations))
		for associationIndex, associationItem := range source.Associations {
			// Shadow the loop variable to avoid aliasing
			associationItem := associationItem
			var association SecurityPolicyWebApplicationFirewallAssociation
			err := association.Initialize_From_SecurityPolicyWebApplicationFirewallAssociation_STATUS(&associationItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_SecurityPolicyWebApplicationFirewallAssociation_STATUS() to populate field Associations")
			}
			associationList[associationIndex] = association
		}
		parameters.Associations = associationList
	} else {
		parameters.Associations = nil
	}

	// Type
	if source.Type != nil {
		typeVar := SecurityPolicyWebApplicationFirewallParameters_Type(*source.Type)
		parameters.Type = &typeVar
	} else {
		parameters.Type = nil
	}

	// WafPolicy
	if source.WafPolicy != nil {
		var wafPolicy ResourceReference
		err := wafPolicy.Initialize_From_ResourceReference_STATUS(source.WafPolicy)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_ResourceReference_STATUS() to populate field WafPolicy")
		}
		parameters.WafPolicy = &wafPolicy
	} else {
		parameters.WafPolicy = nil
	}

	// No error
	return nil
}

type SecurityPolicyWebApplicationFirewallParameters_STATUS struct {
	// Associations: Waf associations
	Associations []SecurityPolicyWebApplicationFirewallAssociation_STATUS `json:"associations,omitempty"`

	// Type: The type of the Security policy to create.
	Type *SecurityPolicyWebApplicationFirewallParameters_Type_STATUS `json:"type,omitempty"`

	// WafPolicy: Resource ID.
	WafPolicy *ResourceReference_STATUS `json:"wafPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &SecurityPolicyWebApplicationFirewallParameters_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *SecurityPolicyWebApplicationFirewallParameters_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityPolicyWebApplicationFirewallParameters_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *SecurityPolicyWebApplicationFirewallParameters_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityPolicyWebApplicationFirewallParameters_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityPolicyWebApplicationFirewallParameters_STATUS_ARM, got %T", armInput)
	}

	// Set property "Associations":
	for _, item := range typedInput.Associations {
		var item1 SecurityPolicyWebApplicationFirewallAssociation_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		parameters.Associations = append(parameters.Associations, item1)
	}

	// Set property "Type":
	parameters.Type = &typedInput.Type

	// Set property "WafPolicy":
	if typedInput.WafPolicy != nil {
		var wafPolicy1 ResourceReference_STATUS
		err := wafPolicy1.PopulateFromARM(owner, *typedInput.WafPolicy)
		if err != nil {
			return err
		}
		wafPolicy := wafPolicy1
		parameters.WafPolicy = &wafPolicy
	}

	// No error
	return nil
}

// AssignProperties_From_SecurityPolicyWebApplicationFirewallParameters_STATUS populates our SecurityPolicyWebApplicationFirewallParameters_STATUS from the provided source SecurityPolicyWebApplicationFirewallParameters_STATUS
func (parameters *SecurityPolicyWebApplicationFirewallParameters_STATUS) AssignProperties_From_SecurityPolicyWebApplicationFirewallParameters_STATUS(source *v20230501s.SecurityPolicyWebApplicationFirewallParameters_STATUS) error {

	// Associations
	if source.Associations != nil {
		associationList := make([]SecurityPolicyWebApplicationFirewallAssociation_STATUS, len(source.Associations))
		for associationIndex, associationItem := range source.Associations {
			// Shadow the loop variable to avoid aliasing
			associationItem := associationItem
			var association SecurityPolicyWebApplicationFirewallAssociation_STATUS
			err := association.AssignProperties_From_SecurityPolicyWebApplicationFirewallAssociation_STATUS(&associationItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SecurityPolicyWebApplicationFirewallAssociation_STATUS() to populate field Associations")
			}
			associationList[associationIndex] = association
		}
		parameters.Associations = associationList
	} else {
		parameters.Associations = nil
	}

	// Type
	if source.Type != nil {
		typeVar := SecurityPolicyWebApplicationFirewallParameters_Type_STATUS(*source.Type)
		parameters.Type = &typeVar
	} else {
		parameters.Type = nil
	}

	// WafPolicy
	if source.WafPolicy != nil {
		var wafPolicy ResourceReference_STATUS
		err := wafPolicy.AssignProperties_From_ResourceReference_STATUS(source.WafPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ResourceReference_STATUS() to populate field WafPolicy")
		}
		parameters.WafPolicy = &wafPolicy
	} else {
		parameters.WafPolicy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SecurityPolicyWebApplicationFirewallParameters_STATUS populates the provided destination SecurityPolicyWebApplicationFirewallParameters_STATUS from our SecurityPolicyWebApplicationFirewallParameters_STATUS
func (parameters *SecurityPolicyWebApplicationFirewallParameters_STATUS) AssignProperties_To_SecurityPolicyWebApplicationFirewallParameters_STATUS(destination *v20230501s.SecurityPolicyWebApplicationFirewallParameters_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Associations
	if parameters.Associations != nil {
		associationList := make([]v20230501s.SecurityPolicyWebApplicationFirewallAssociation_STATUS, len(parameters.Associations))
		for associationIndex, associationItem := range parameters.Associations {
			// Shadow the loop variable to avoid aliasing
			associationItem := associationItem
			var association v20230501s.SecurityPolicyWebApplicationFirewallAssociation_STATUS
			err := associationItem.AssignProperties_To_SecurityPolicyWebApplicationFirewallAssociation_STATUS(&association)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SecurityPolicyWebApplicationFirewallAssociation_STATUS() to populate field Associations")
			}
			associationList[associationIndex] = association
		}
		destination.Associations = associationList
	} else {
		destination.Associations = nil
	}

	// Type
	if parameters.Type != nil {
		typeVar := string(*parameters.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// WafPolicy
	if parameters.WafPolicy != nil {
		var wafPolicy v20230501s.ResourceReference_STATUS
		err := parameters.WafPolicy.AssignProperties_To_ResourceReference_STATUS(&wafPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ResourceReference_STATUS() to populate field WafPolicy")
		}
		destination.WafPolicy = &wafPolicy
	} else {
		destination.WafPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// settings for security policy patterns to match
type SecurityPolicyWebApplicationFirewallAssociation struct {
	// Domains: List of domains.
	Domains []ActivatedResourceReference `json:"domains,omitempty"`

	// PatternsToMatch: List of paths
	PatternsToMatch []string `json:"patternsToMatch,omitempty"`
}

var _ genruntime.ARMTransformer = &SecurityPolicyWebApplicationFirewallAssociation{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (association *SecurityPolicyWebApplicationFirewallAssociation) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if association == nil {
		return nil, nil
	}
	result := &SecurityPolicyWebApplicationFirewallAssociation_ARM{}

	// Set property "Domains":
	for _, item := range association.Domains {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Domains = append(result.Domains, *item_ARM.(*ActivatedResourceReference_ARM))
	}

	// Set property "PatternsToMatch":
	for _, item := range association.PatternsToMatch {
		result.PatternsToMatch = append(result.PatternsToMatch, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (association *SecurityPolicyWebApplicationFirewallAssociation) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityPolicyWebApplicationFirewallAssociation_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (association *SecurityPolicyWebApplicationFirewallAssociation) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityPolicyWebApplicationFirewallAssociation_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityPolicyWebApplicationFirewallAssociation_ARM, got %T", armInput)
	}

	// Set property "Domains":
	for _, item := range typedInput.Domains {
		var item1 ActivatedResourceReference
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		association.Domains = append(association.Domains, item1)
	}

	// Set property "PatternsToMatch":
	for _, item := range typedInput.PatternsToMatch {
		association.PatternsToMatch = append(association.PatternsToMatch, item)
	}

	// No error
	return nil
}

// AssignProperties_From_SecurityPolicyWebApplicationFirewallAssociation populates our SecurityPolicyWebApplicationFirewallAssociation from the provided source SecurityPolicyWebApplicationFirewallAssociation
func (association *SecurityPolicyWebApplicationFirewallAssociation) AssignProperties_From_SecurityPolicyWebApplicationFirewallAssociation(source *v20230501s.SecurityPolicyWebApplicationFirewallAssociation) error {

	// Domains
	if source.Domains != nil {
		domainList := make([]ActivatedResourceReference, len(source.Domains))
		for domainIndex, domainItem := range source.Domains {
			// Shadow the loop variable to avoid aliasing
			domainItem := domainItem
			var domain ActivatedResourceReference
			err := domain.AssignProperties_From_ActivatedResourceReference(&domainItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ActivatedResourceReference() to populate field Domains")
			}
			domainList[domainIndex] = domain
		}
		association.Domains = domainList
	} else {
		association.Domains = nil
	}

	// PatternsToMatch
	association.PatternsToMatch = genruntime.CloneSliceOfString(source.PatternsToMatch)

	// No error
	return nil
}

// AssignProperties_To_SecurityPolicyWebApplicationFirewallAssociation populates the provided destination SecurityPolicyWebApplicationFirewallAssociation from our SecurityPolicyWebApplicationFirewallAssociation
func (association *SecurityPolicyWebApplicationFirewallAssociation) AssignProperties_To_SecurityPolicyWebApplicationFirewallAssociation(destination *v20230501s.SecurityPolicyWebApplicationFirewallAssociation) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Domains
	if association.Domains != nil {
		domainList := make([]v20230501s.ActivatedResourceReference, len(association.Domains))
		for domainIndex, domainItem := range association.Domains {
			// Shadow the loop variable to avoid aliasing
			domainItem := domainItem
			var domain v20230501s.ActivatedResourceReference
			err := domainItem.AssignProperties_To_ActivatedResourceReference(&domain)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ActivatedResourceReference() to populate field Domains")
			}
			domainList[domainIndex] = domain
		}
		destination.Domains = domainList
	} else {
		destination.Domains = nil
	}

	// PatternsToMatch
	destination.PatternsToMatch = genruntime.CloneSliceOfString(association.PatternsToMatch)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_SecurityPolicyWebApplicationFirewallAssociation_STATUS populates our SecurityPolicyWebApplicationFirewallAssociation from the provided source SecurityPolicyWebApplicationFirewallAssociation_STATUS
func (association *SecurityPolicyWebApplicationFirewallAssociation) Initialize_From_SecurityPolicyWebApplicationFirewallAssociation_STATUS(source *SecurityPolicyWebApplicationFirewallAssociation_STATUS) error {

	// Domains
	if source.Domains != nil {
		domainList := make([]ActivatedResourceReference, len(source.Domains))
		for domainIndex, domainItem := range source.Domains {
			// Shadow the loop variable to avoid aliasing
			domainItem := domainItem
			var domain ActivatedResourceReference
			err := domain.Initialize_From_ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded(&domainItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded() to populate field Domains")
			}
			domainList[domainIndex] = domain
		}
		association.Domains = domainList
	} else {
		association.Domains = nil
	}

	// PatternsToMatch
	association.PatternsToMatch = genruntime.CloneSliceOfString(source.PatternsToMatch)

	// No error
	return nil
}

// settings for security policy patterns to match
type SecurityPolicyWebApplicationFirewallAssociation_STATUS struct {
	// Domains: List of domains.
	Domains []ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded `json:"domains,omitempty"`

	// PatternsToMatch: List of paths
	PatternsToMatch []string `json:"patternsToMatch,omitempty"`
}

var _ genruntime.FromARMConverter = &SecurityPolicyWebApplicationFirewallAssociation_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (association *SecurityPolicyWebApplicationFirewallAssociation_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityPolicyWebApplicationFirewallAssociation_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (association *SecurityPolicyWebApplicationFirewallAssociation_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityPolicyWebApplicationFirewallAssociation_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityPolicyWebApplicationFirewallAssociation_STATUS_ARM, got %T", armInput)
	}

	// Set property "Domains":
	for _, item := range typedInput.Domains {
		var item1 ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		association.Domains = append(association.Domains, item1)
	}

	// Set property "PatternsToMatch":
	for _, item := range typedInput.PatternsToMatch {
		association.PatternsToMatch = append(association.PatternsToMatch, item)
	}

	// No error
	return nil
}

// AssignProperties_From_SecurityPolicyWebApplicationFirewallAssociation_STATUS populates our SecurityPolicyWebApplicationFirewallAssociation_STATUS from the provided source SecurityPolicyWebApplicationFirewallAssociation_STATUS
func (association *SecurityPolicyWebApplicationFirewallAssociation_STATUS) AssignProperties_From_SecurityPolicyWebApplicationFirewallAssociation_STATUS(source *v20230501s.SecurityPolicyWebApplicationFirewallAssociation_STATUS) error {

	// Domains
	if source.Domains != nil {
		domainList := make([]ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded, len(source.Domains))
		for domainIndex, domainItem := range source.Domains {
			// Shadow the loop variable to avoid aliasing
			domainItem := domainItem
			var domain ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded
			err := domain.AssignProperties_From_ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded(&domainItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded() to populate field Domains")
			}
			domainList[domainIndex] = domain
		}
		association.Domains = domainList
	} else {
		association.Domains = nil
	}

	// PatternsToMatch
	association.PatternsToMatch = genruntime.CloneSliceOfString(source.PatternsToMatch)

	// No error
	return nil
}

// AssignProperties_To_SecurityPolicyWebApplicationFirewallAssociation_STATUS populates the provided destination SecurityPolicyWebApplicationFirewallAssociation_STATUS from our SecurityPolicyWebApplicationFirewallAssociation_STATUS
func (association *SecurityPolicyWebApplicationFirewallAssociation_STATUS) AssignProperties_To_SecurityPolicyWebApplicationFirewallAssociation_STATUS(destination *v20230501s.SecurityPolicyWebApplicationFirewallAssociation_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Domains
	if association.Domains != nil {
		domainList := make([]v20230501s.ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded, len(association.Domains))
		for domainIndex, domainItem := range association.Domains {
			// Shadow the loop variable to avoid aliasing
			domainItem := domainItem
			var domain v20230501s.ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded
			err := domainItem.AssignProperties_To_ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded(&domain)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_ActivatedResourceReference_STATUS_Profiles_SecurityPolicy_SubResourceEmbedded() to populate field Domains")
			}
			domainList[domainIndex] = domain
		}
		destination.Domains = domainList
	} else {
		destination.Domains = nil
	}

	// PatternsToMatch
	destination.PatternsToMatch = genruntime.CloneSliceOfString(association.PatternsToMatch)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&SecurityPolicy{}, &SecurityPolicyList{})
}
