// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import "encoding/json"

type Profiles_Secret_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Properties: The JSON object that contains the properties of the Secret to create.
	Properties *SecretProperties_STATUS_ARM `json:"properties,omitempty"`

	// SystemData: Read only system data
	SystemData *SystemData_STATUS_ARM `json:"systemData,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

// The JSON object that contains the properties of the Secret to create.
type SecretProperties_STATUS_ARM struct {
	DeploymentStatus *SecretProperties_DeploymentStatus_STATUS_ARM `json:"deploymentStatus,omitempty"`

	// Parameters: object which contains secret parameters
	Parameters *SecretParameters_STATUS_ARM `json:"parameters,omitempty"`

	// ProfileName: The name of the profile which holds the secret.
	ProfileName *string `json:"profileName,omitempty"`

	// ProvisioningState: Provisioning status
	ProvisioningState *SecretProperties_ProvisioningState_STATUS_ARM `json:"provisioningState,omitempty"`
}

type SecretParameters_STATUS_ARM struct {
	// AzureFirstPartyManagedCertificate: Mutually exclusive with all other properties
	AzureFirstPartyManagedCertificate *AzureFirstPartyManagedCertificateParameters_STATUS_ARM `json:"azureFirstPartyManagedCertificate,omitempty"`

	// CustomerCertificate: Mutually exclusive with all other properties
	CustomerCertificate *CustomerCertificateParameters_STATUS_ARM `json:"customerCertificate,omitempty"`

	// ManagedCertificate: Mutually exclusive with all other properties
	ManagedCertificate *ManagedCertificateParameters_STATUS_ARM `json:"managedCertificate,omitempty"`

	// UrlSigningKey: Mutually exclusive with all other properties
	UrlSigningKey *UrlSigningKeyParameters_STATUS_ARM `json:"urlSigningKey,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because SecretParameters_STATUS_ARM represents a discriminated union (JSON OneOf)
func (parameters SecretParameters_STATUS_ARM) MarshalJSON() ([]byte, error) {
	if parameters.AzureFirstPartyManagedCertificate != nil {
		return json.Marshal(parameters.AzureFirstPartyManagedCertificate)
	}
	if parameters.CustomerCertificate != nil {
		return json.Marshal(parameters.CustomerCertificate)
	}
	if parameters.ManagedCertificate != nil {
		return json.Marshal(parameters.ManagedCertificate)
	}
	if parameters.UrlSigningKey != nil {
		return json.Marshal(parameters.UrlSigningKey)
	}
	return nil, nil
}

// UnmarshalJSON unmarshals the SecretParameters_STATUS_ARM
func (parameters *SecretParameters_STATUS_ARM) UnmarshalJSON(data []byte) error {
	var rawJson map[string]interface{}
	err := json.Unmarshal(data, &rawJson)
	if err != nil {
		return err
	}
	discriminator := rawJson["type"]
	if discriminator == "AzureFirstPartyManagedCertificate" {
		parameters.AzureFirstPartyManagedCertificate = &AzureFirstPartyManagedCertificateParameters_STATUS_ARM{}
		return json.Unmarshal(data, parameters.AzureFirstPartyManagedCertificate)
	}
	if discriminator == "CustomerCertificate" {
		parameters.CustomerCertificate = &CustomerCertificateParameters_STATUS_ARM{}
		return json.Unmarshal(data, parameters.CustomerCertificate)
	}
	if discriminator == "ManagedCertificate" {
		parameters.ManagedCertificate = &ManagedCertificateParameters_STATUS_ARM{}
		return json.Unmarshal(data, parameters.ManagedCertificate)
	}
	if discriminator == "UrlSigningKey" {
		parameters.UrlSigningKey = &UrlSigningKeyParameters_STATUS_ARM{}
		return json.Unmarshal(data, parameters.UrlSigningKey)
	}

	// No error
	return nil
}

type SecretProperties_DeploymentStatus_STATUS_ARM string

const (
	SecretProperties_DeploymentStatus_STATUS_ARM_Failed     = SecretProperties_DeploymentStatus_STATUS_ARM("Failed")
	SecretProperties_DeploymentStatus_STATUS_ARM_InProgress = SecretProperties_DeploymentStatus_STATUS_ARM("InProgress")
	SecretProperties_DeploymentStatus_STATUS_ARM_NotStarted = SecretProperties_DeploymentStatus_STATUS_ARM("NotStarted")
	SecretProperties_DeploymentStatus_STATUS_ARM_Succeeded  = SecretProperties_DeploymentStatus_STATUS_ARM("Succeeded")
)

// Mapping from string to SecretProperties_DeploymentStatus_STATUS_ARM
var secretProperties_DeploymentStatus_STATUS_ARM_Values = map[string]SecretProperties_DeploymentStatus_STATUS_ARM{
	"failed":     SecretProperties_DeploymentStatus_STATUS_ARM_Failed,
	"inprogress": SecretProperties_DeploymentStatus_STATUS_ARM_InProgress,
	"notstarted": SecretProperties_DeploymentStatus_STATUS_ARM_NotStarted,
	"succeeded":  SecretProperties_DeploymentStatus_STATUS_ARM_Succeeded,
}

type SecretProperties_ProvisioningState_STATUS_ARM string

const (
	SecretProperties_ProvisioningState_STATUS_ARM_Creating  = SecretProperties_ProvisioningState_STATUS_ARM("Creating")
	SecretProperties_ProvisioningState_STATUS_ARM_Deleting  = SecretProperties_ProvisioningState_STATUS_ARM("Deleting")
	SecretProperties_ProvisioningState_STATUS_ARM_Failed    = SecretProperties_ProvisioningState_STATUS_ARM("Failed")
	SecretProperties_ProvisioningState_STATUS_ARM_Succeeded = SecretProperties_ProvisioningState_STATUS_ARM("Succeeded")
	SecretProperties_ProvisioningState_STATUS_ARM_Updating  = SecretProperties_ProvisioningState_STATUS_ARM("Updating")
)

// Mapping from string to SecretProperties_ProvisioningState_STATUS_ARM
var secretProperties_ProvisioningState_STATUS_ARM_Values = map[string]SecretProperties_ProvisioningState_STATUS_ARM{
	"creating":  SecretProperties_ProvisioningState_STATUS_ARM_Creating,
	"deleting":  SecretProperties_ProvisioningState_STATUS_ARM_Deleting,
	"failed":    SecretProperties_ProvisioningState_STATUS_ARM_Failed,
	"succeeded": SecretProperties_ProvisioningState_STATUS_ARM_Succeeded,
	"updating":  SecretProperties_ProvisioningState_STATUS_ARM_Updating,
}

type AzureFirstPartyManagedCertificateParameters_STATUS_ARM struct {
	// CertificateAuthority: Certificate issuing authority.
	CertificateAuthority *string `json:"certificateAuthority,omitempty"`

	// ExpirationDate: Certificate expiration date.
	ExpirationDate *string `json:"expirationDate,omitempty"`

	// SecretSource: Resource reference to the Azure Key Vault certificate. Expected to be in format of
	// /subscriptions/{​​​​​​​​​subscriptionId}​​​​​​​​​/resourceGroups/{​​​​​​​​​resourceGroupName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/providers/Microsoft.KeyVault/vaults/{vaultName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/secrets/{certificateName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
	SecretSource *ResourceReference_STATUS_ARM `json:"secretSource,omitempty"`

	// Subject: Subject name in the certificate.
	Subject *string `json:"subject,omitempty"`

	// SubjectAlternativeNames: The list of SANs.
	SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty"`

	// Thumbprint: Certificate thumbprint.
	Thumbprint *string                                                     `json:"thumbprint,omitempty"`
	Type       AzureFirstPartyManagedCertificateParameters_Type_STATUS_ARM `json:"type,omitempty"`
}

type CustomerCertificateParameters_STATUS_ARM struct {
	// CertificateAuthority: Certificate issuing authority.
	CertificateAuthority *string `json:"certificateAuthority,omitempty"`

	// ExpirationDate: Certificate expiration date.
	ExpirationDate *string `json:"expirationDate,omitempty"`

	// SecretSource: Resource reference to the Azure Key Vault certificate. Expected to be in format of
	// /subscriptions/{​​​​​​​​​subscriptionId}​​​​​​​​​/resourceGroups/{​​​​​​​​​resourceGroupName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/providers/Microsoft.KeyVault/vaults/{vaultName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/secrets/{certificateName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
	SecretSource *ResourceReference_STATUS_ARM `json:"secretSource,omitempty"`

	// SecretVersion: Version of the secret to be used
	SecretVersion *string `json:"secretVersion,omitempty"`

	// Subject: Subject name in the certificate.
	Subject *string `json:"subject,omitempty"`

	// SubjectAlternativeNames: The list of SANs.
	SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty"`

	// Thumbprint: Certificate thumbprint.
	Thumbprint *string                                       `json:"thumbprint,omitempty"`
	Type       CustomerCertificateParameters_Type_STATUS_ARM `json:"type,omitempty"`

	// UseLatestVersion: Whether to use the latest version for the certificate
	UseLatestVersion *bool `json:"useLatestVersion,omitempty"`
}

type ManagedCertificateParameters_STATUS_ARM struct {
	// ExpirationDate: Certificate expiration date.
	ExpirationDate *string `json:"expirationDate,omitempty"`

	// Subject: Subject name in the certificate.
	Subject *string                                      `json:"subject,omitempty"`
	Type    ManagedCertificateParameters_Type_STATUS_ARM `json:"type,omitempty"`
}

type UrlSigningKeyParameters_STATUS_ARM struct {
	// KeyId: Defines the customer defined key Id. This id will exist in the incoming request to indicate the key used to form
	// the hash.
	KeyId *string `json:"keyId,omitempty"`

	// SecretSource: Resource reference to the Azure Key Vault secret. Expected to be in format of
	// /subscriptions/{​​​​​​​​​subscriptionId}​​​​​​​​​/resourceGroups/{​​​​​​​​​resourceGroupName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/providers/Microsoft.KeyVault/vaults/{vaultName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/secrets/{secretName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
	SecretSource *ResourceReference_STATUS_ARM `json:"secretSource,omitempty"`

	// SecretVersion: Version of the secret to be used
	SecretVersion *string                                 `json:"secretVersion,omitempty"`
	Type          UrlSigningKeyParameters_Type_STATUS_ARM `json:"type,omitempty"`
}

type AzureFirstPartyManagedCertificateParameters_Type_STATUS_ARM string

const AzureFirstPartyManagedCertificateParameters_Type_STATUS_ARM_AzureFirstPartyManagedCertificate = AzureFirstPartyManagedCertificateParameters_Type_STATUS_ARM("AzureFirstPartyManagedCertificate")

// Mapping from string to AzureFirstPartyManagedCertificateParameters_Type_STATUS_ARM
var azureFirstPartyManagedCertificateParameters_Type_STATUS_ARM_Values = map[string]AzureFirstPartyManagedCertificateParameters_Type_STATUS_ARM{
	"azurefirstpartymanagedcertificate": AzureFirstPartyManagedCertificateParameters_Type_STATUS_ARM_AzureFirstPartyManagedCertificate,
}

type CustomerCertificateParameters_Type_STATUS_ARM string

const CustomerCertificateParameters_Type_STATUS_ARM_CustomerCertificate = CustomerCertificateParameters_Type_STATUS_ARM("CustomerCertificate")

// Mapping from string to CustomerCertificateParameters_Type_STATUS_ARM
var customerCertificateParameters_Type_STATUS_ARM_Values = map[string]CustomerCertificateParameters_Type_STATUS_ARM{
	"customercertificate": CustomerCertificateParameters_Type_STATUS_ARM_CustomerCertificate,
}

type ManagedCertificateParameters_Type_STATUS_ARM string

const ManagedCertificateParameters_Type_STATUS_ARM_ManagedCertificate = ManagedCertificateParameters_Type_STATUS_ARM("ManagedCertificate")

// Mapping from string to ManagedCertificateParameters_Type_STATUS_ARM
var managedCertificateParameters_Type_STATUS_ARM_Values = map[string]ManagedCertificateParameters_Type_STATUS_ARM{
	"managedcertificate": ManagedCertificateParameters_Type_STATUS_ARM_ManagedCertificate,
}

type UrlSigningKeyParameters_Type_STATUS_ARM string

const UrlSigningKeyParameters_Type_STATUS_ARM_UrlSigningKey = UrlSigningKeyParameters_Type_STATUS_ARM("UrlSigningKey")

// Mapping from string to UrlSigningKeyParameters_Type_STATUS_ARM
var urlSigningKeyParameters_Type_STATUS_ARM_Values = map[string]UrlSigningKeyParameters_Type_STATUS_ARM{
	"urlsigningkey": UrlSigningKeyParameters_Type_STATUS_ARM_UrlSigningKey,
}
