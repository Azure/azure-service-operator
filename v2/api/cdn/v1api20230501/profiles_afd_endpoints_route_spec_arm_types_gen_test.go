// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ActivatedResourceReference_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ActivatedResourceReference_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForActivatedResourceReference_ARM, ActivatedResourceReference_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForActivatedResourceReference_ARM runs a test to see if a specific instance of ActivatedResourceReference_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForActivatedResourceReference_ARM(subject ActivatedResourceReference_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ActivatedResourceReference_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ActivatedResourceReference_ARM instances for property testing - lazily instantiated by
// ActivatedResourceReference_ARMGenerator()
var activatedResourceReference_ARMGenerator gopter.Gen

// ActivatedResourceReference_ARMGenerator returns a generator of ActivatedResourceReference_ARM instances for property testing.
func ActivatedResourceReference_ARMGenerator() gopter.Gen {
	if activatedResourceReference_ARMGenerator != nil {
		return activatedResourceReference_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForActivatedResourceReference_ARM(generators)
	activatedResourceReference_ARMGenerator = gen.Struct(reflect.TypeOf(ActivatedResourceReference_ARM{}), generators)

	return activatedResourceReference_ARMGenerator
}

// AddIndependentPropertyGeneratorsForActivatedResourceReference_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForActivatedResourceReference_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_AfdRouteCacheConfiguration_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AfdRouteCacheConfiguration_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAfdRouteCacheConfiguration_ARM, AfdRouteCacheConfiguration_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAfdRouteCacheConfiguration_ARM runs a test to see if a specific instance of AfdRouteCacheConfiguration_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAfdRouteCacheConfiguration_ARM(subject AfdRouteCacheConfiguration_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AfdRouteCacheConfiguration_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AfdRouteCacheConfiguration_ARM instances for property testing - lazily instantiated by
// AfdRouteCacheConfiguration_ARMGenerator()
var afdRouteCacheConfiguration_ARMGenerator gopter.Gen

// AfdRouteCacheConfiguration_ARMGenerator returns a generator of AfdRouteCacheConfiguration_ARM instances for property testing.
// We first initialize afdRouteCacheConfiguration_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AfdRouteCacheConfiguration_ARMGenerator() gopter.Gen {
	if afdRouteCacheConfiguration_ARMGenerator != nil {
		return afdRouteCacheConfiguration_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAfdRouteCacheConfiguration_ARM(generators)
	afdRouteCacheConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(AfdRouteCacheConfiguration_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAfdRouteCacheConfiguration_ARM(generators)
	AddRelatedPropertyGeneratorsForAfdRouteCacheConfiguration_ARM(generators)
	afdRouteCacheConfiguration_ARMGenerator = gen.Struct(reflect.TypeOf(AfdRouteCacheConfiguration_ARM{}), generators)

	return afdRouteCacheConfiguration_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAfdRouteCacheConfiguration_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAfdRouteCacheConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["QueryParameters"] = gen.PtrOf(gen.AlphaString())
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		AfdRouteCacheConfiguration_QueryStringCachingBehavior_ARM_IgnoreQueryString,
		AfdRouteCacheConfiguration_QueryStringCachingBehavior_ARM_IgnoreSpecifiedQueryStrings,
		AfdRouteCacheConfiguration_QueryStringCachingBehavior_ARM_IncludeSpecifiedQueryStrings,
		AfdRouteCacheConfiguration_QueryStringCachingBehavior_ARM_UseQueryString))
}

// AddRelatedPropertyGeneratorsForAfdRouteCacheConfiguration_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAfdRouteCacheConfiguration_ARM(gens map[string]gopter.Gen) {
	gens["CompressionSettings"] = gen.PtrOf(CompressionSettings_ARMGenerator())
}

func Test_CompressionSettings_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CompressionSettings_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCompressionSettings_ARM, CompressionSettings_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCompressionSettings_ARM runs a test to see if a specific instance of CompressionSettings_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCompressionSettings_ARM(subject CompressionSettings_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CompressionSettings_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CompressionSettings_ARM instances for property testing - lazily instantiated by
// CompressionSettings_ARMGenerator()
var compressionSettings_ARMGenerator gopter.Gen

// CompressionSettings_ARMGenerator returns a generator of CompressionSettings_ARM instances for property testing.
func CompressionSettings_ARMGenerator() gopter.Gen {
	if compressionSettings_ARMGenerator != nil {
		return compressionSettings_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCompressionSettings_ARM(generators)
	compressionSettings_ARMGenerator = gen.Struct(reflect.TypeOf(CompressionSettings_ARM{}), generators)

	return compressionSettings_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCompressionSettings_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCompressionSettings_ARM(gens map[string]gopter.Gen) {
	gens["ContentTypesToCompress"] = gen.SliceOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_Profiles_AfdEndpoints_Route_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Profiles_AfdEndpoints_Route_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfiles_AfdEndpoints_Route_Spec_ARM, Profiles_AfdEndpoints_Route_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfiles_AfdEndpoints_Route_Spec_ARM runs a test to see if a specific instance of Profiles_AfdEndpoints_Route_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfiles_AfdEndpoints_Route_Spec_ARM(subject Profiles_AfdEndpoints_Route_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Profiles_AfdEndpoints_Route_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Profiles_AfdEndpoints_Route_Spec_ARM instances for property testing - lazily instantiated by
// Profiles_AfdEndpoints_Route_Spec_ARMGenerator()
var profiles_AfdEndpoints_Route_Spec_ARMGenerator gopter.Gen

// Profiles_AfdEndpoints_Route_Spec_ARMGenerator returns a generator of Profiles_AfdEndpoints_Route_Spec_ARM instances for property testing.
// We first initialize profiles_AfdEndpoints_Route_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Profiles_AfdEndpoints_Route_Spec_ARMGenerator() gopter.Gen {
	if profiles_AfdEndpoints_Route_Spec_ARMGenerator != nil {
		return profiles_AfdEndpoints_Route_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_AfdEndpoints_Route_Spec_ARM(generators)
	profiles_AfdEndpoints_Route_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Profiles_AfdEndpoints_Route_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_AfdEndpoints_Route_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForProfiles_AfdEndpoints_Route_Spec_ARM(generators)
	profiles_AfdEndpoints_Route_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Profiles_AfdEndpoints_Route_Spec_ARM{}), generators)

	return profiles_AfdEndpoints_Route_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForProfiles_AfdEndpoints_Route_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfiles_AfdEndpoints_Route_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForProfiles_AfdEndpoints_Route_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfiles_AfdEndpoints_Route_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteProperties_ARMGenerator())
}

func Test_ResourceReference_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceReference_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceReference_ARM, ResourceReference_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceReference_ARM runs a test to see if a specific instance of ResourceReference_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceReference_ARM(subject ResourceReference_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceReference_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceReference_ARM instances for property testing - lazily instantiated by
// ResourceReference_ARMGenerator()
var resourceReference_ARMGenerator gopter.Gen

// ResourceReference_ARMGenerator returns a generator of ResourceReference_ARM instances for property testing.
func ResourceReference_ARMGenerator() gopter.Gen {
	if resourceReference_ARMGenerator != nil {
		return resourceReference_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceReference_ARM(generators)
	resourceReference_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceReference_ARM{}), generators)

	return resourceReference_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceReference_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceReference_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_RouteProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteProperties_ARM, RouteProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteProperties_ARM runs a test to see if a specific instance of RouteProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteProperties_ARM(subject RouteProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteProperties_ARM instances for property testing - lazily instantiated by
// RouteProperties_ARMGenerator()
var routeProperties_ARMGenerator gopter.Gen

// RouteProperties_ARMGenerator returns a generator of RouteProperties_ARM instances for property testing.
// We first initialize routeProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteProperties_ARMGenerator() gopter.Gen {
	if routeProperties_ARMGenerator != nil {
		return routeProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteProperties_ARM(generators)
	routeProperties_ARMGenerator = gen.Struct(reflect.TypeOf(RouteProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForRouteProperties_ARM(generators)
	routeProperties_ARMGenerator = gen.Struct(reflect.TypeOf(RouteProperties_ARM{}), generators)

	return routeProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteProperties_ARM(gens map[string]gopter.Gen) {
	gens["EnabledState"] = gen.PtrOf(gen.OneConstOf(RouteProperties_EnabledState_ARM_Disabled, RouteProperties_EnabledState_ARM_Enabled))
	gens["ForwardingProtocol"] = gen.PtrOf(gen.OneConstOf(RouteProperties_ForwardingProtocol_ARM_HttpOnly, RouteProperties_ForwardingProtocol_ARM_HttpsOnly, RouteProperties_ForwardingProtocol_ARM_MatchRequest))
	gens["HttpsRedirect"] = gen.PtrOf(gen.OneConstOf(RouteProperties_HttpsRedirect_ARM_Disabled, RouteProperties_HttpsRedirect_ARM_Enabled))
	gens["LinkToDefaultDomain"] = gen.PtrOf(gen.OneConstOf(RouteProperties_LinkToDefaultDomain_ARM_Disabled, RouteProperties_LinkToDefaultDomain_ARM_Enabled))
	gens["OriginPath"] = gen.PtrOf(gen.AlphaString())
	gens["PatternsToMatch"] = gen.SliceOf(gen.AlphaString())
	gens["SupportedProtocols"] = gen.SliceOf(gen.OneConstOf(AFDEndpointProtocols_ARM_Http, AFDEndpointProtocols_ARM_Https))
}

// AddRelatedPropertyGeneratorsForRouteProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteProperties_ARM(gens map[string]gopter.Gen) {
	gens["CacheConfiguration"] = gen.PtrOf(AfdRouteCacheConfiguration_ARMGenerator())
	gens["CustomDomains"] = gen.SliceOf(ActivatedResourceReference_ARMGenerator())
	gens["OriginGroup"] = gen.PtrOf(ResourceReference_ARMGenerator())
	gens["RuleSets"] = gen.SliceOf(ResourceReference_ARMGenerator())
}
