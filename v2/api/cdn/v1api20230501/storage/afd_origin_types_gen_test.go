// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AfdOrigin_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AfdOrigin via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAfdOrigin, AfdOriginGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAfdOrigin runs a test to see if a specific instance of AfdOrigin round trips to JSON and back losslessly
func RunJSONSerializationTestForAfdOrigin(subject AfdOrigin) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AfdOrigin
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AfdOrigin instances for property testing - lazily instantiated by AfdOriginGenerator()
var afdOriginGenerator gopter.Gen

// AfdOriginGenerator returns a generator of AfdOrigin instances for property testing.
func AfdOriginGenerator() gopter.Gen {
	if afdOriginGenerator != nil {
		return afdOriginGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAfdOrigin(generators)
	afdOriginGenerator = gen.Struct(reflect.TypeOf(AfdOrigin{}), generators)

	return afdOriginGenerator
}

// AddRelatedPropertyGeneratorsForAfdOrigin is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAfdOrigin(gens map[string]gopter.Gen) {
	gens["Spec"] = Profiles_OriginGroups_Origin_SpecGenerator()
	gens["Status"] = Profiles_OriginGroups_Origin_STATUSGenerator()
}

func Test_Profiles_OriginGroups_Origin_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Profiles_OriginGroups_Origin_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfiles_OriginGroups_Origin_Spec, Profiles_OriginGroups_Origin_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfiles_OriginGroups_Origin_Spec runs a test to see if a specific instance of Profiles_OriginGroups_Origin_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForProfiles_OriginGroups_Origin_Spec(subject Profiles_OriginGroups_Origin_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Profiles_OriginGroups_Origin_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Profiles_OriginGroups_Origin_Spec instances for property testing - lazily instantiated by
// Profiles_OriginGroups_Origin_SpecGenerator()
var profiles_OriginGroups_Origin_SpecGenerator gopter.Gen

// Profiles_OriginGroups_Origin_SpecGenerator returns a generator of Profiles_OriginGroups_Origin_Spec instances for property testing.
// We first initialize profiles_OriginGroups_Origin_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Profiles_OriginGroups_Origin_SpecGenerator() gopter.Gen {
	if profiles_OriginGroups_Origin_SpecGenerator != nil {
		return profiles_OriginGroups_Origin_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_Spec(generators)
	profiles_OriginGroups_Origin_SpecGenerator = gen.Struct(reflect.TypeOf(Profiles_OriginGroups_Origin_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_Spec(generators)
	AddRelatedPropertyGeneratorsForProfiles_OriginGroups_Origin_Spec(generators)
	profiles_OriginGroups_Origin_SpecGenerator = gen.Struct(reflect.TypeOf(Profiles_OriginGroups_Origin_Spec{}), generators)

	return profiles_OriginGroups_Origin_SpecGenerator
}

// AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["EnabledState"] = gen.PtrOf(gen.AlphaString())
	gens["EnforceCertificateNameCheck"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForProfiles_OriginGroups_Origin_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfiles_OriginGroups_Origin_Spec(gens map[string]gopter.Gen) {
	gens["AzureOrigin"] = gen.PtrOf(ResourceReferenceGenerator())
	gens["SharedPrivateLinkResource"] = gen.PtrOf(SharedPrivateLinkResourcePropertiesGenerator())
}

func Test_Profiles_OriginGroups_Origin_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Profiles_OriginGroups_Origin_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfiles_OriginGroups_Origin_STATUS, Profiles_OriginGroups_Origin_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfiles_OriginGroups_Origin_STATUS runs a test to see if a specific instance of Profiles_OriginGroups_Origin_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForProfiles_OriginGroups_Origin_STATUS(subject Profiles_OriginGroups_Origin_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Profiles_OriginGroups_Origin_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Profiles_OriginGroups_Origin_STATUS instances for property testing - lazily instantiated by
// Profiles_OriginGroups_Origin_STATUSGenerator()
var profiles_OriginGroups_Origin_STATUSGenerator gopter.Gen

// Profiles_OriginGroups_Origin_STATUSGenerator returns a generator of Profiles_OriginGroups_Origin_STATUS instances for property testing.
// We first initialize profiles_OriginGroups_Origin_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Profiles_OriginGroups_Origin_STATUSGenerator() gopter.Gen {
	if profiles_OriginGroups_Origin_STATUSGenerator != nil {
		return profiles_OriginGroups_Origin_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS(generators)
	profiles_OriginGroups_Origin_STATUSGenerator = gen.Struct(reflect.TypeOf(Profiles_OriginGroups_Origin_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS(generators)
	AddRelatedPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS(generators)
	profiles_OriginGroups_Origin_STATUSGenerator = gen.Struct(reflect.TypeOf(Profiles_OriginGroups_Origin_STATUS{}), generators)

	return profiles_OriginGroups_Origin_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS(gens map[string]gopter.Gen) {
	gens["DeploymentStatus"] = gen.PtrOf(gen.AlphaString())
	gens["EnabledState"] = gen.PtrOf(gen.AlphaString())
	gens["EnforceCertificateNameCheck"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["OriginGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Weight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS(gens map[string]gopter.Gen) {
	gens["AzureOrigin"] = gen.PtrOf(ResourceReference_STATUSGenerator())
	gens["SharedPrivateLinkResource"] = gen.PtrOf(SharedPrivateLinkResourceProperties_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_SharedPrivateLinkResourceProperties_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResourceProperties via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResourceProperties, SharedPrivateLinkResourcePropertiesGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResourceProperties runs a test to see if a specific instance of SharedPrivateLinkResourceProperties round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResourceProperties(subject SharedPrivateLinkResourceProperties) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResourceProperties
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResourceProperties instances for property testing - lazily instantiated by
// SharedPrivateLinkResourcePropertiesGenerator()
var sharedPrivateLinkResourcePropertiesGenerator gopter.Gen

// SharedPrivateLinkResourcePropertiesGenerator returns a generator of SharedPrivateLinkResourceProperties instances for property testing.
// We first initialize sharedPrivateLinkResourcePropertiesGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SharedPrivateLinkResourcePropertiesGenerator() gopter.Gen {
	if sharedPrivateLinkResourcePropertiesGenerator != nil {
		return sharedPrivateLinkResourcePropertiesGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties(generators)
	sharedPrivateLinkResourcePropertiesGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResourceProperties{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties(generators)
	AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceProperties(generators)
	sharedPrivateLinkResourcePropertiesGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResourceProperties{}), generators)

	return sharedPrivateLinkResourcePropertiesGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["RequestMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceProperties is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceProperties(gens map[string]gopter.Gen) {
	gens["PrivateLink"] = gen.PtrOf(ResourceReferenceGenerator())
}

func Test_SharedPrivateLinkResourceProperties_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResourceProperties_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResourceProperties_STATUS, SharedPrivateLinkResourceProperties_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResourceProperties_STATUS runs a test to see if a specific instance of SharedPrivateLinkResourceProperties_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResourceProperties_STATUS(subject SharedPrivateLinkResourceProperties_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResourceProperties_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResourceProperties_STATUS instances for property testing - lazily instantiated by
// SharedPrivateLinkResourceProperties_STATUSGenerator()
var sharedPrivateLinkResourceProperties_STATUSGenerator gopter.Gen

// SharedPrivateLinkResourceProperties_STATUSGenerator returns a generator of SharedPrivateLinkResourceProperties_STATUS instances for property testing.
// We first initialize sharedPrivateLinkResourceProperties_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SharedPrivateLinkResourceProperties_STATUSGenerator() gopter.Gen {
	if sharedPrivateLinkResourceProperties_STATUSGenerator != nil {
		return sharedPrivateLinkResourceProperties_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS(generators)
	sharedPrivateLinkResourceProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResourceProperties_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS(generators)
	AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS(generators)
	sharedPrivateLinkResourceProperties_STATUSGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResourceProperties_STATUS{}), generators)

	return sharedPrivateLinkResourceProperties_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["RequestMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS(gens map[string]gopter.Gen) {
	gens["PrivateLink"] = gen.PtrOf(ResourceReference_STATUSGenerator())
}
