// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AfdEndpoint_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AfdEndpoint via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAfdEndpoint, AfdEndpointGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAfdEndpoint runs a test to see if a specific instance of AfdEndpoint round trips to JSON and back losslessly
func RunJSONSerializationTestForAfdEndpoint(subject AfdEndpoint) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AfdEndpoint
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AfdEndpoint instances for property testing - lazily instantiated by AfdEndpointGenerator()
var afdEndpointGenerator gopter.Gen

// AfdEndpointGenerator returns a generator of AfdEndpoint instances for property testing.
func AfdEndpointGenerator() gopter.Gen {
	if afdEndpointGenerator != nil {
		return afdEndpointGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForAfdEndpoint(generators)
	afdEndpointGenerator = gen.Struct(reflect.TypeOf(AfdEndpoint{}), generators)

	return afdEndpointGenerator
}

// AddRelatedPropertyGeneratorsForAfdEndpoint is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAfdEndpoint(gens map[string]gopter.Gen) {
	gens["Spec"] = AfdEndpoint_SpecGenerator()
	gens["Status"] = AfdEndpoint_STATUSGenerator()
}

func Test_AfdEndpoint_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AfdEndpoint_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAfdEndpoint_STATUS, AfdEndpoint_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAfdEndpoint_STATUS runs a test to see if a specific instance of AfdEndpoint_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForAfdEndpoint_STATUS(subject AfdEndpoint_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AfdEndpoint_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AfdEndpoint_STATUS instances for property testing - lazily instantiated by AfdEndpoint_STATUSGenerator()
var afdEndpoint_STATUSGenerator gopter.Gen

// AfdEndpoint_STATUSGenerator returns a generator of AfdEndpoint_STATUS instances for property testing.
// We first initialize afdEndpoint_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AfdEndpoint_STATUSGenerator() gopter.Gen {
	if afdEndpoint_STATUSGenerator != nil {
		return afdEndpoint_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAfdEndpoint_STATUS(generators)
	afdEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(AfdEndpoint_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAfdEndpoint_STATUS(generators)
	AddRelatedPropertyGeneratorsForAfdEndpoint_STATUS(generators)
	afdEndpoint_STATUSGenerator = gen.Struct(reflect.TypeOf(AfdEndpoint_STATUS{}), generators)

	return afdEndpoint_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForAfdEndpoint_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAfdEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["AutoGeneratedDomainNameLabelScope"] = gen.PtrOf(gen.AlphaString())
	gens["DeploymentStatus"] = gen.PtrOf(gen.AlphaString())
	gens["EnabledState"] = gen.PtrOf(gen.AlphaString())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProfileName"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAfdEndpoint_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAfdEndpoint_STATUS(gens map[string]gopter.Gen) {
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_AfdEndpoint_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AfdEndpoint_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAfdEndpoint_Spec, AfdEndpoint_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAfdEndpoint_Spec runs a test to see if a specific instance of AfdEndpoint_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForAfdEndpoint_Spec(subject AfdEndpoint_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AfdEndpoint_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AfdEndpoint_Spec instances for property testing - lazily instantiated by AfdEndpoint_SpecGenerator()
var afdEndpoint_SpecGenerator gopter.Gen

// AfdEndpoint_SpecGenerator returns a generator of AfdEndpoint_Spec instances for property testing.
func AfdEndpoint_SpecGenerator() gopter.Gen {
	if afdEndpoint_SpecGenerator != nil {
		return afdEndpoint_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAfdEndpoint_Spec(generators)
	afdEndpoint_SpecGenerator = gen.Struct(reflect.TypeOf(AfdEndpoint_Spec{}), generators)

	return afdEndpoint_SpecGenerator
}

// AddIndependentPropertyGeneratorsForAfdEndpoint_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAfdEndpoint_Spec(gens map[string]gopter.Gen) {
	gens["AutoGeneratedDomainNameLabelScope"] = gen.PtrOf(gen.AlphaString())
	gens["AzureName"] = gen.AlphaString()
	gens["EnabledState"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}
