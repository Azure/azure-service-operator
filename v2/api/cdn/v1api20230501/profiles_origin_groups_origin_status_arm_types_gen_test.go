// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AFDOriginProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AFDOriginProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAFDOriginProperties_STATUS_ARM, AFDOriginProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAFDOriginProperties_STATUS_ARM runs a test to see if a specific instance of AFDOriginProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAFDOriginProperties_STATUS_ARM(subject AFDOriginProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AFDOriginProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AFDOriginProperties_STATUS_ARM instances for property testing - lazily instantiated by
// AFDOriginProperties_STATUS_ARMGenerator()
var afdOriginProperties_STATUS_ARMGenerator gopter.Gen

// AFDOriginProperties_STATUS_ARMGenerator returns a generator of AFDOriginProperties_STATUS_ARM instances for property testing.
// We first initialize afdOriginProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AFDOriginProperties_STATUS_ARMGenerator() gopter.Gen {
	if afdOriginProperties_STATUS_ARMGenerator != nil {
		return afdOriginProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAFDOriginProperties_STATUS_ARM(generators)
	afdOriginProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AFDOriginProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAFDOriginProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAFDOriginProperties_STATUS_ARM(generators)
	afdOriginProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AFDOriginProperties_STATUS_ARM{}), generators)

	return afdOriginProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAFDOriginProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAFDOriginProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DeploymentStatus"] = gen.PtrOf(gen.OneConstOf(
		AFDOriginProperties_DeploymentStatus_STATUS_Failed,
		AFDOriginProperties_DeploymentStatus_STATUS_InProgress,
		AFDOriginProperties_DeploymentStatus_STATUS_NotStarted,
		AFDOriginProperties_DeploymentStatus_STATUS_Succeeded))
	gens["EnabledState"] = gen.PtrOf(gen.OneConstOf(AFDOriginProperties_EnabledState_STATUS_Disabled, AFDOriginProperties_EnabledState_STATUS_Enabled))
	gens["EnforceCertificateNameCheck"] = gen.PtrOf(gen.Bool())
	gens["HostName"] = gen.PtrOf(gen.AlphaString())
	gens["HttpPort"] = gen.PtrOf(gen.Int())
	gens["HttpsPort"] = gen.PtrOf(gen.Int())
	gens["OriginGroupName"] = gen.PtrOf(gen.AlphaString())
	gens["OriginHostHeader"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		AFDOriginProperties_ProvisioningState_STATUS_Creating,
		AFDOriginProperties_ProvisioningState_STATUS_Deleting,
		AFDOriginProperties_ProvisioningState_STATUS_Failed,
		AFDOriginProperties_ProvisioningState_STATUS_Succeeded,
		AFDOriginProperties_ProvisioningState_STATUS_Updating))
	gens["Weight"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForAFDOriginProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAFDOriginProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AzureOrigin"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
	gens["SharedPrivateLinkResource"] = gen.PtrOf(SharedPrivateLinkResourceProperties_STATUS_ARMGenerator())
}

func Test_Profiles_OriginGroups_Origin_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Profiles_OriginGroups_Origin_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForProfiles_OriginGroups_Origin_STATUS_ARM, Profiles_OriginGroups_Origin_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForProfiles_OriginGroups_Origin_STATUS_ARM runs a test to see if a specific instance of Profiles_OriginGroups_Origin_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForProfiles_OriginGroups_Origin_STATUS_ARM(subject Profiles_OriginGroups_Origin_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Profiles_OriginGroups_Origin_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Profiles_OriginGroups_Origin_STATUS_ARM instances for property testing - lazily instantiated by
// Profiles_OriginGroups_Origin_STATUS_ARMGenerator()
var profiles_OriginGroups_Origin_STATUS_ARMGenerator gopter.Gen

// Profiles_OriginGroups_Origin_STATUS_ARMGenerator returns a generator of Profiles_OriginGroups_Origin_STATUS_ARM instances for property testing.
// We first initialize profiles_OriginGroups_Origin_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Profiles_OriginGroups_Origin_STATUS_ARMGenerator() gopter.Gen {
	if profiles_OriginGroups_Origin_STATUS_ARMGenerator != nil {
		return profiles_OriginGroups_Origin_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS_ARM(generators)
	profiles_OriginGroups_Origin_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Profiles_OriginGroups_Origin_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS_ARM(generators)
	profiles_OriginGroups_Origin_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Profiles_OriginGroups_Origin_STATUS_ARM{}), generators)

	return profiles_OriginGroups_Origin_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForProfiles_OriginGroups_Origin_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(AFDOriginProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_SharedPrivateLinkResourceProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SharedPrivateLinkResourceProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSharedPrivateLinkResourceProperties_STATUS_ARM, SharedPrivateLinkResourceProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSharedPrivateLinkResourceProperties_STATUS_ARM runs a test to see if a specific instance of SharedPrivateLinkResourceProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSharedPrivateLinkResourceProperties_STATUS_ARM(subject SharedPrivateLinkResourceProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SharedPrivateLinkResourceProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SharedPrivateLinkResourceProperties_STATUS_ARM instances for property testing - lazily instantiated by
// SharedPrivateLinkResourceProperties_STATUS_ARMGenerator()
var sharedPrivateLinkResourceProperties_STATUS_ARMGenerator gopter.Gen

// SharedPrivateLinkResourceProperties_STATUS_ARMGenerator returns a generator of SharedPrivateLinkResourceProperties_STATUS_ARM instances for property testing.
// We first initialize sharedPrivateLinkResourceProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SharedPrivateLinkResourceProperties_STATUS_ARMGenerator() gopter.Gen {
	if sharedPrivateLinkResourceProperties_STATUS_ARMGenerator != nil {
		return sharedPrivateLinkResourceProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS_ARM(generators)
	sharedPrivateLinkResourceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResourceProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS_ARM(generators)
	sharedPrivateLinkResourceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SharedPrivateLinkResourceProperties_STATUS_ARM{}), generators)

	return sharedPrivateLinkResourceProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["GroupId"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateLinkLocation"] = gen.PtrOf(gen.AlphaString())
	gens["RequestMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		SharedPrivateLinkResourceProperties_Status_STATUS_Approved,
		SharedPrivateLinkResourceProperties_Status_STATUS_Disconnected,
		SharedPrivateLinkResourceProperties_Status_STATUS_Pending,
		SharedPrivateLinkResourceProperties_Status_STATUS_Rejected,
		SharedPrivateLinkResourceProperties_Status_STATUS_Timeout))
}

// AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSharedPrivateLinkResourceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateLink"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
}
