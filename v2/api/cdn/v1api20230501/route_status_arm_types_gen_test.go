// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM, ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM runs a test to see if a specific instance of ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM(subject ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM instances for
// property testing - lazily instantiated by
// ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator()
var activatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator gopter.Gen

// ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator returns a generator of ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM instances for property testing.
func ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator() gopter.Gen {
	if activatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator != nil {
		return activatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM(generators)
	activatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator = gen.Struct(reflect.TypeOf(ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM{}), generators)

	return activatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator
}

// AddIndependentPropertyGeneratorsForActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_AfdRouteCacheConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AfdRouteCacheConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAfdRouteCacheConfiguration_STATUS_ARM, AfdRouteCacheConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAfdRouteCacheConfiguration_STATUS_ARM runs a test to see if a specific instance of AfdRouteCacheConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAfdRouteCacheConfiguration_STATUS_ARM(subject AfdRouteCacheConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AfdRouteCacheConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AfdRouteCacheConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// AfdRouteCacheConfiguration_STATUS_ARMGenerator()
var afdRouteCacheConfiguration_STATUS_ARMGenerator gopter.Gen

// AfdRouteCacheConfiguration_STATUS_ARMGenerator returns a generator of AfdRouteCacheConfiguration_STATUS_ARM instances for property testing.
// We first initialize afdRouteCacheConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AfdRouteCacheConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if afdRouteCacheConfiguration_STATUS_ARMGenerator != nil {
		return afdRouteCacheConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAfdRouteCacheConfiguration_STATUS_ARM(generators)
	afdRouteCacheConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AfdRouteCacheConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAfdRouteCacheConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAfdRouteCacheConfiguration_STATUS_ARM(generators)
	afdRouteCacheConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AfdRouteCacheConfiguration_STATUS_ARM{}), generators)

	return afdRouteCacheConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAfdRouteCacheConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAfdRouteCacheConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["QueryParameters"] = gen.PtrOf(gen.AlphaString())
	gens["QueryStringCachingBehavior"] = gen.PtrOf(gen.OneConstOf(
		AfdRouteCacheConfiguration_QueryStringCachingBehavior_STATUS_ARM_IgnoreQueryString,
		AfdRouteCacheConfiguration_QueryStringCachingBehavior_STATUS_ARM_IgnoreSpecifiedQueryStrings,
		AfdRouteCacheConfiguration_QueryStringCachingBehavior_STATUS_ARM_IncludeSpecifiedQueryStrings,
		AfdRouteCacheConfiguration_QueryStringCachingBehavior_STATUS_ARM_UseQueryString))
}

// AddRelatedPropertyGeneratorsForAfdRouteCacheConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAfdRouteCacheConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CompressionSettings"] = gen.PtrOf(CompressionSettings_STATUS_ARMGenerator())
}

func Test_CompressionSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CompressionSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCompressionSettings_STATUS_ARM, CompressionSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCompressionSettings_STATUS_ARM runs a test to see if a specific instance of CompressionSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCompressionSettings_STATUS_ARM(subject CompressionSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CompressionSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CompressionSettings_STATUS_ARM instances for property testing - lazily instantiated by
// CompressionSettings_STATUS_ARMGenerator()
var compressionSettings_STATUS_ARMGenerator gopter.Gen

// CompressionSettings_STATUS_ARMGenerator returns a generator of CompressionSettings_STATUS_ARM instances for property testing.
func CompressionSettings_STATUS_ARMGenerator() gopter.Gen {
	if compressionSettings_STATUS_ARMGenerator != nil {
		return compressionSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCompressionSettings_STATUS_ARM(generators)
	compressionSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CompressionSettings_STATUS_ARM{}), generators)

	return compressionSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCompressionSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCompressionSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ContentTypesToCompress"] = gen.SliceOf(gen.AlphaString())
	gens["IsCompressionEnabled"] = gen.PtrOf(gen.Bool())
}

func Test_RouteProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteProperties_STATUS_ARM, RouteProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteProperties_STATUS_ARM runs a test to see if a specific instance of RouteProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteProperties_STATUS_ARM(subject RouteProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteProperties_STATUS_ARM instances for property testing - lazily instantiated by
// RouteProperties_STATUS_ARMGenerator()
var routeProperties_STATUS_ARMGenerator gopter.Gen

// RouteProperties_STATUS_ARMGenerator returns a generator of RouteProperties_STATUS_ARM instances for property testing.
// We first initialize routeProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteProperties_STATUS_ARMGenerator() gopter.Gen {
	if routeProperties_STATUS_ARMGenerator != nil {
		return routeProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteProperties_STATUS_ARM(generators)
	routeProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RouteProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRouteProperties_STATUS_ARM(generators)
	routeProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RouteProperties_STATUS_ARM{}), generators)

	return routeProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DeploymentStatus"] = gen.PtrOf(gen.OneConstOf(
		RouteProperties_DeploymentStatus_STATUS_ARM_Failed,
		RouteProperties_DeploymentStatus_STATUS_ARM_InProgress,
		RouteProperties_DeploymentStatus_STATUS_ARM_NotStarted,
		RouteProperties_DeploymentStatus_STATUS_ARM_Succeeded))
	gens["EnabledState"] = gen.PtrOf(gen.OneConstOf(RouteProperties_EnabledState_STATUS_ARM_Disabled, RouteProperties_EnabledState_STATUS_ARM_Enabled))
	gens["EndpointName"] = gen.PtrOf(gen.AlphaString())
	gens["ForwardingProtocol"] = gen.PtrOf(gen.OneConstOf(RouteProperties_ForwardingProtocol_STATUS_ARM_HttpOnly, RouteProperties_ForwardingProtocol_STATUS_ARM_HttpsOnly, RouteProperties_ForwardingProtocol_STATUS_ARM_MatchRequest))
	gens["HttpsRedirect"] = gen.PtrOf(gen.OneConstOf(RouteProperties_HttpsRedirect_STATUS_ARM_Disabled, RouteProperties_HttpsRedirect_STATUS_ARM_Enabled))
	gens["LinkToDefaultDomain"] = gen.PtrOf(gen.OneConstOf(RouteProperties_LinkToDefaultDomain_STATUS_ARM_Disabled, RouteProperties_LinkToDefaultDomain_STATUS_ARM_Enabled))
	gens["OriginPath"] = gen.PtrOf(gen.AlphaString())
	gens["PatternsToMatch"] = gen.SliceOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		RouteProperties_ProvisioningState_STATUS_ARM_Creating,
		RouteProperties_ProvisioningState_STATUS_ARM_Deleting,
		RouteProperties_ProvisioningState_STATUS_ARM_Failed,
		RouteProperties_ProvisioningState_STATUS_ARM_Succeeded,
		RouteProperties_ProvisioningState_STATUS_ARM_Updating))
	gens["SupportedProtocols"] = gen.SliceOf(gen.OneConstOf(AFDEndpointProtocols_STATUS_ARM_Http, AFDEndpointProtocols_STATUS_ARM_Https))
}

// AddRelatedPropertyGeneratorsForRouteProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CacheConfiguration"] = gen.PtrOf(AfdRouteCacheConfiguration_STATUS_ARMGenerator())
	gens["CustomDomains"] = gen.SliceOf(ActivatedResourceReference_STATUS_Profiles_AfdEndpoints_Route_SubResourceEmbedded_ARMGenerator())
	gens["OriginGroup"] = gen.PtrOf(ResourceReference_STATUS_ARMGenerator())
	gens["RuleSets"] = gen.SliceOf(ResourceReference_STATUS_ARMGenerator())
}

func Test_Route_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Route_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoute_STATUS_ARM, Route_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoute_STATUS_ARM runs a test to see if a specific instance of Route_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoute_STATUS_ARM(subject Route_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Route_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Route_STATUS_ARM instances for property testing - lazily instantiated by Route_STATUS_ARMGenerator()
var route_STATUS_ARMGenerator gopter.Gen

// Route_STATUS_ARMGenerator returns a generator of Route_STATUS_ARM instances for property testing.
// We first initialize route_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Route_STATUS_ARMGenerator() gopter.Gen {
	if route_STATUS_ARMGenerator != nil {
		return route_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoute_STATUS_ARM(generators)
	route_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Route_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoute_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRoute_STATUS_ARM(generators)
	route_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Route_STATUS_ARM{}), generators)

	return route_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRoute_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoute_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRoute_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRoute_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}
