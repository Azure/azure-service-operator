// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AccessPolicyEntry_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AccessPolicyEntry_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAccessPolicyEntry_STATUS_ARM, AccessPolicyEntry_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAccessPolicyEntry_STATUS_ARM runs a test to see if a specific instance of AccessPolicyEntry_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAccessPolicyEntry_STATUS_ARM(subject AccessPolicyEntry_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AccessPolicyEntry_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AccessPolicyEntry_STATUS_ARM instances for property testing - lazily instantiated by
// AccessPolicyEntry_STATUS_ARMGenerator()
var accessPolicyEntry_STATUS_ARMGenerator gopter.Gen

// AccessPolicyEntry_STATUS_ARMGenerator returns a generator of AccessPolicyEntry_STATUS_ARM instances for property testing.
// We first initialize accessPolicyEntry_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AccessPolicyEntry_STATUS_ARMGenerator() gopter.Gen {
	if accessPolicyEntry_STATUS_ARMGenerator != nil {
		return accessPolicyEntry_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessPolicyEntry_STATUS_ARM(generators)
	accessPolicyEntry_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AccessPolicyEntry_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessPolicyEntry_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAccessPolicyEntry_STATUS_ARM(generators)
	accessPolicyEntry_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AccessPolicyEntry_STATUS_ARM{}), generators)

	return accessPolicyEntry_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAccessPolicyEntry_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAccessPolicyEntry_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ApplicationId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAccessPolicyEntry_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAccessPolicyEntry_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Permissions"] = gen.PtrOf(Permissions_STATUS_ARMGenerator())
}

func Test_IPRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPRule_STATUS_ARM, IPRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPRule_STATUS_ARM runs a test to see if a specific instance of IPRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPRule_STATUS_ARM(subject IPRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPRule_STATUS_ARM instances for property testing - lazily instantiated by IPRule_STATUS_ARMGenerator()
var ipRule_STATUS_ARMGenerator gopter.Gen

// IPRule_STATUS_ARMGenerator returns a generator of IPRule_STATUS_ARM instances for property testing.
func IPRule_STATUS_ARMGenerator() gopter.Gen {
	if ipRule_STATUS_ARMGenerator != nil {
		return ipRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPRule_STATUS_ARM(generators)
	ipRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IPRule_STATUS_ARM{}), generators)

	return ipRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIPRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkRuleSet_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkRuleSet_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkRuleSet_STATUS_ARM, NetworkRuleSet_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkRuleSet_STATUS_ARM runs a test to see if a specific instance of NetworkRuleSet_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkRuleSet_STATUS_ARM(subject NetworkRuleSet_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkRuleSet_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkRuleSet_STATUS_ARM instances for property testing - lazily instantiated by
// NetworkRuleSet_STATUS_ARMGenerator()
var networkRuleSet_STATUS_ARMGenerator gopter.Gen

// NetworkRuleSet_STATUS_ARMGenerator returns a generator of NetworkRuleSet_STATUS_ARM instances for property testing.
// We first initialize networkRuleSet_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkRuleSet_STATUS_ARMGenerator() gopter.Gen {
	if networkRuleSet_STATUS_ARMGenerator != nil {
		return networkRuleSet_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSet_STATUS_ARM(generators)
	networkRuleSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSet_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSet_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkRuleSet_STATUS_ARM(generators)
	networkRuleSet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSet_STATUS_ARM{}), generators)

	return networkRuleSet_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkRuleSet_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkRuleSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Bypass"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSet_Bypass_STATUS_ARM_AzureServices, NetworkRuleSet_Bypass_STATUS_ARM_None))
	gens["DefaultAction"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSet_DefaultAction_STATUS_ARM_Allow, NetworkRuleSet_DefaultAction_STATUS_ARM_Deny))
}

// AddRelatedPropertyGeneratorsForNetworkRuleSet_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkRuleSet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["IpRules"] = gen.SliceOf(IPRule_STATUS_ARMGenerator())
	gens["VirtualNetworkRules"] = gen.SliceOf(VirtualNetworkRule_STATUS_ARMGenerator())
}

func Test_Permissions_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Permissions_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPermissions_STATUS_ARM, Permissions_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPermissions_STATUS_ARM runs a test to see if a specific instance of Permissions_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPermissions_STATUS_ARM(subject Permissions_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Permissions_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Permissions_STATUS_ARM instances for property testing - lazily instantiated by
// Permissions_STATUS_ARMGenerator()
var permissions_STATUS_ARMGenerator gopter.Gen

// Permissions_STATUS_ARMGenerator returns a generator of Permissions_STATUS_ARM instances for property testing.
func Permissions_STATUS_ARMGenerator() gopter.Gen {
	if permissions_STATUS_ARMGenerator != nil {
		return permissions_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPermissions_STATUS_ARM(generators)
	permissions_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Permissions_STATUS_ARM{}), generators)

	return permissions_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPermissions_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPermissions_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Certificates"] = gen.SliceOf(gen.OneConstOf(
		Permissions_Certificates_STATUS_ARM_All,
		Permissions_Certificates_STATUS_ARM_Backup,
		Permissions_Certificates_STATUS_ARM_Create,
		Permissions_Certificates_STATUS_ARM_Delete,
		Permissions_Certificates_STATUS_ARM_Deleteissuers,
		Permissions_Certificates_STATUS_ARM_Get,
		Permissions_Certificates_STATUS_ARM_Getissuers,
		Permissions_Certificates_STATUS_ARM_Import,
		Permissions_Certificates_STATUS_ARM_List,
		Permissions_Certificates_STATUS_ARM_Listissuers,
		Permissions_Certificates_STATUS_ARM_Managecontacts,
		Permissions_Certificates_STATUS_ARM_Manageissuers,
		Permissions_Certificates_STATUS_ARM_Purge,
		Permissions_Certificates_STATUS_ARM_Recover,
		Permissions_Certificates_STATUS_ARM_Restore,
		Permissions_Certificates_STATUS_ARM_Setissuers,
		Permissions_Certificates_STATUS_ARM_Update))
	gens["Keys"] = gen.SliceOf(gen.OneConstOf(
		Permissions_Keys_STATUS_ARM_All,
		Permissions_Keys_STATUS_ARM_Backup,
		Permissions_Keys_STATUS_ARM_Create,
		Permissions_Keys_STATUS_ARM_Decrypt,
		Permissions_Keys_STATUS_ARM_Delete,
		Permissions_Keys_STATUS_ARM_Encrypt,
		Permissions_Keys_STATUS_ARM_Get,
		Permissions_Keys_STATUS_ARM_Getrotationpolicy,
		Permissions_Keys_STATUS_ARM_Import,
		Permissions_Keys_STATUS_ARM_List,
		Permissions_Keys_STATUS_ARM_Purge,
		Permissions_Keys_STATUS_ARM_Recover,
		Permissions_Keys_STATUS_ARM_Release,
		Permissions_Keys_STATUS_ARM_Restore,
		Permissions_Keys_STATUS_ARM_Rotate,
		Permissions_Keys_STATUS_ARM_Setrotationpolicy,
		Permissions_Keys_STATUS_ARM_Sign,
		Permissions_Keys_STATUS_ARM_UnwrapKey,
		Permissions_Keys_STATUS_ARM_Update,
		Permissions_Keys_STATUS_ARM_Verify,
		Permissions_Keys_STATUS_ARM_WrapKey))
	gens["Secrets"] = gen.SliceOf(gen.OneConstOf(
		Permissions_Secrets_STATUS_ARM_All,
		Permissions_Secrets_STATUS_ARM_Backup,
		Permissions_Secrets_STATUS_ARM_Delete,
		Permissions_Secrets_STATUS_ARM_Get,
		Permissions_Secrets_STATUS_ARM_List,
		Permissions_Secrets_STATUS_ARM_Purge,
		Permissions_Secrets_STATUS_ARM_Recover,
		Permissions_Secrets_STATUS_ARM_Restore,
		Permissions_Secrets_STATUS_ARM_Set))
	gens["Storage"] = gen.SliceOf(gen.OneConstOf(
		Permissions_Storage_STATUS_ARM_All,
		Permissions_Storage_STATUS_ARM_Backup,
		Permissions_Storage_STATUS_ARM_Delete,
		Permissions_Storage_STATUS_ARM_Deletesas,
		Permissions_Storage_STATUS_ARM_Get,
		Permissions_Storage_STATUS_ARM_Getsas,
		Permissions_Storage_STATUS_ARM_List,
		Permissions_Storage_STATUS_ARM_Listsas,
		Permissions_Storage_STATUS_ARM_Purge,
		Permissions_Storage_STATUS_ARM_Recover,
		Permissions_Storage_STATUS_ARM_Regeneratekey,
		Permissions_Storage_STATUS_ARM_Restore,
		Permissions_Storage_STATUS_ARM_Set,
		Permissions_Storage_STATUS_ARM_Setsas,
		Permissions_Storage_STATUS_ARM_Update))
}

func Test_PrivateEndpointConnectionItem_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnectionItem_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionItem_STATUS_ARM, PrivateEndpointConnectionItem_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionItem_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointConnectionItem_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionItem_STATUS_ARM(subject PrivateEndpointConnectionItem_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnectionItem_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnectionItem_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointConnectionItem_STATUS_ARMGenerator()
var privateEndpointConnectionItem_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointConnectionItem_STATUS_ARMGenerator returns a generator of PrivateEndpointConnectionItem_STATUS_ARM instances for property testing.
// We first initialize privateEndpointConnectionItem_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnectionItem_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointConnectionItem_STATUS_ARMGenerator != nil {
		return privateEndpointConnectionItem_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionItem_STATUS_ARM(generators)
	privateEndpointConnectionItem_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionItem_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionItem_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnectionItem_STATUS_ARM(generators)
	privateEndpointConnectionItem_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionItem_STATUS_ARM{}), generators)

	return privateEndpointConnectionItem_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionItem_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionItem_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnectionItem_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnectionItem_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateEndpointConnectionProperties_STATUS_ARMGenerator())
}

func Test_PrivateEndpointConnectionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnectionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionProperties_STATUS_ARM, PrivateEndpointConnectionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionProperties_STATUS_ARM runs a test to see if a specific instance of PrivateEndpointConnectionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionProperties_STATUS_ARM(subject PrivateEndpointConnectionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnectionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnectionProperties_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpointConnectionProperties_STATUS_ARMGenerator()
var privateEndpointConnectionProperties_STATUS_ARMGenerator gopter.Gen

// PrivateEndpointConnectionProperties_STATUS_ARMGenerator returns a generator of PrivateEndpointConnectionProperties_STATUS_ARM instances for property testing.
// We first initialize privateEndpointConnectionProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnectionProperties_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpointConnectionProperties_STATUS_ARMGenerator != nil {
		return privateEndpointConnectionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	privateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(generators)
	privateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	return privateEndpointConnectionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointConnectionProvisioningState_STATUS_ARM_Creating,
		PrivateEndpointConnectionProvisioningState_STATUS_ARM_Deleting,
		PrivateEndpointConnectionProvisioningState_STATUS_ARM_Disconnected,
		PrivateEndpointConnectionProvisioningState_STATUS_ARM_Failed,
		PrivateEndpointConnectionProvisioningState_STATUS_ARM_Succeeded,
		PrivateEndpointConnectionProvisioningState_STATUS_ARM_Updating))
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpoint_STATUS_ARMGenerator())
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(PrivateLinkServiceConnectionState_STATUS_ARMGenerator())
}

func Test_PrivateEndpoint_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpoint_STATUS_ARM, PrivateEndpoint_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpoint_STATUS_ARM runs a test to see if a specific instance of PrivateEndpoint_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpoint_STATUS_ARM(subject PrivateEndpoint_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateEndpoint_STATUS_ARMGenerator()
var privateEndpoint_STATUS_ARMGenerator gopter.Gen

// PrivateEndpoint_STATUS_ARMGenerator returns a generator of PrivateEndpoint_STATUS_ARM instances for property testing.
func PrivateEndpoint_STATUS_ARMGenerator() gopter.Gen {
	if privateEndpoint_STATUS_ARMGenerator != nil {
		return privateEndpoint_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUS_ARM(generators)
	privateEndpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_STATUS_ARM{}), generators)

	return privateEndpoint_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateLinkServiceConnectionState_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnectionState_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUS_ARM, PrivateLinkServiceConnectionState_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUS_ARM runs a test to see if a specific instance of PrivateLinkServiceConnectionState_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnectionState_STATUS_ARM(subject PrivateLinkServiceConnectionState_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnectionState_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnectionState_STATUS_ARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnectionState_STATUS_ARMGenerator()
var privateLinkServiceConnectionState_STATUS_ARMGenerator gopter.Gen

// PrivateLinkServiceConnectionState_STATUS_ARMGenerator returns a generator of PrivateLinkServiceConnectionState_STATUS_ARM instances for property testing.
func PrivateLinkServiceConnectionState_STATUS_ARMGenerator() gopter.Gen {
	if privateLinkServiceConnectionState_STATUS_ARMGenerator != nil {
		return privateLinkServiceConnectionState_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUS_ARM(generators)
	privateLinkServiceConnectionState_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionState_STATUS_ARM{}), generators)

	return privateLinkServiceConnectionState_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionState_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.OneConstOf(PrivateLinkServiceConnectionState_ActionsRequired_STATUS_ARM_None))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointServiceConnectionStatus_STATUS_ARM_Approved,
		PrivateEndpointServiceConnectionStatus_STATUS_ARM_Disconnected,
		PrivateEndpointServiceConnectionStatus_STATUS_ARM_Pending,
		PrivateEndpointServiceConnectionStatus_STATUS_ARM_Rejected))
}

func Test_Sku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS_ARM, Sku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS_ARM runs a test to see if a specific instance of Sku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS_ARM(subject Sku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS_ARM instances for property testing - lazily instantiated by Sku_STATUS_ARMGenerator()
var sku_STATUS_ARMGenerator gopter.Gen

// Sku_STATUS_ARMGenerator returns a generator of Sku_STATUS_ARM instances for property testing.
func Sku_STATUS_ARMGenerator() gopter.Gen {
	if sku_STATUS_ARMGenerator != nil {
		return sku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS_ARM(generators)
	sku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS_ARM{}), generators)

	return sku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Family"] = gen.PtrOf(gen.OneConstOf(Sku_Family_STATUS_ARM_A))
	gens["Name"] = gen.PtrOf(gen.OneConstOf(Sku_Name_STATUS_ARM_Premium, Sku_Name_STATUS_ARM_Standard))
}

func Test_SystemData_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS_ARM, SystemData_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS_ARM runs a test to see if a specific instance of SystemData_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS_ARM(subject SystemData_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS_ARM instances for property testing - lazily instantiated by
// SystemData_STATUS_ARMGenerator()
var systemData_STATUS_ARMGenerator gopter.Gen

// SystemData_STATUS_ARMGenerator returns a generator of SystemData_STATUS_ARM instances for property testing.
func SystemData_STATUS_ARMGenerator() gopter.Gen {
	if systemData_STATUS_ARMGenerator != nil {
		return systemData_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(generators)
	systemData_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS_ARM{}), generators)

	return systemData_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_ARM_Application,
		IdentityType_STATUS_ARM_Key,
		IdentityType_STATUS_ARM_ManagedIdentity,
		IdentityType_STATUS_ARM_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_STATUS_ARM_Application,
		IdentityType_STATUS_ARM_Key,
		IdentityType_STATUS_ARM_ManagedIdentity,
		IdentityType_STATUS_ARM_User))
}

func Test_VaultProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VaultProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultProperties_STATUS_ARM, VaultProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultProperties_STATUS_ARM runs a test to see if a specific instance of VaultProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultProperties_STATUS_ARM(subject VaultProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VaultProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VaultProperties_STATUS_ARM instances for property testing - lazily instantiated by
// VaultProperties_STATUS_ARMGenerator()
var vaultProperties_STATUS_ARMGenerator gopter.Gen

// VaultProperties_STATUS_ARMGenerator returns a generator of VaultProperties_STATUS_ARM instances for property testing.
// We first initialize vaultProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VaultProperties_STATUS_ARMGenerator() gopter.Gen {
	if vaultProperties_STATUS_ARMGenerator != nil {
		return vaultProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultProperties_STATUS_ARM(generators)
	vaultProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VaultProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVaultProperties_STATUS_ARM(generators)
	vaultProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VaultProperties_STATUS_ARM{}), generators)

	return vaultProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVaultProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVaultProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		VaultProperties_CreateMode_STATUS_ARM_CreateOrRecover,
		VaultProperties_CreateMode_STATUS_ARM_Default,
		VaultProperties_CreateMode_STATUS_ARM_PurgeThenCreate,
		VaultProperties_CreateMode_STATUS_ARM_Recover))
	gens["EnablePurgeProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableRbacAuthorization"] = gen.PtrOf(gen.Bool())
	gens["EnableSoftDelete"] = gen.PtrOf(gen.Bool())
	gens["EnabledForDeployment"] = gen.PtrOf(gen.Bool())
	gens["EnabledForDiskEncryption"] = gen.PtrOf(gen.Bool())
	gens["EnabledForTemplateDeployment"] = gen.PtrOf(gen.Bool())
	gens["HsmPoolResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(VaultProperties_ProvisioningState_STATUS_ARM_RegisteringDns, VaultProperties_ProvisioningState_STATUS_ARM_Succeeded))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
	gens["SoftDeleteRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["VaultUri"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVaultProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVaultProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AccessPolicies"] = gen.SliceOf(AccessPolicyEntry_STATUS_ARMGenerator())
	gens["NetworkAcls"] = gen.PtrOf(NetworkRuleSet_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnectionItem_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
}

func Test_Vault_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Vault_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVault_STATUS_ARM, Vault_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVault_STATUS_ARM runs a test to see if a specific instance of Vault_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVault_STATUS_ARM(subject Vault_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Vault_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Vault_STATUS_ARM instances for property testing - lazily instantiated by Vault_STATUS_ARMGenerator()
var vault_STATUS_ARMGenerator gopter.Gen

// Vault_STATUS_ARMGenerator returns a generator of Vault_STATUS_ARM instances for property testing.
// We first initialize vault_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Vault_STATUS_ARMGenerator() gopter.Gen {
	if vault_STATUS_ARMGenerator != nil {
		return vault_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVault_STATUS_ARM(generators)
	vault_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Vault_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVault_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVault_STATUS_ARM(generators)
	vault_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Vault_STATUS_ARM{}), generators)

	return vault_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVault_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVault_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVault_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVault_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VaultProperties_STATUS_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUS_ARMGenerator())
}

func Test_VirtualNetworkRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkRule_STATUS_ARM, VirtualNetworkRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkRule_STATUS_ARM runs a test to see if a specific instance of VirtualNetworkRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkRule_STATUS_ARM(subject VirtualNetworkRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkRule_STATUS_ARM instances for property testing - lazily instantiated by
// VirtualNetworkRule_STATUS_ARMGenerator()
var virtualNetworkRule_STATUS_ARMGenerator gopter.Gen

// VirtualNetworkRule_STATUS_ARMGenerator returns a generator of VirtualNetworkRule_STATUS_ARM instances for property testing.
func VirtualNetworkRule_STATUS_ARMGenerator() gopter.Gen {
	if virtualNetworkRule_STATUS_ARMGenerator != nil {
		return virtualNetworkRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkRule_STATUS_ARM(generators)
	virtualNetworkRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkRule_STATUS_ARM{}), generators)

	return virtualNetworkRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreMissingVnetServiceEndpoint"] = gen.PtrOf(gen.Bool())
}
