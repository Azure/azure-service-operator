// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230701

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AccessPolicyEntry_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AccessPolicyEntry_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAccessPolicyEntry_ARM, AccessPolicyEntry_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAccessPolicyEntry_ARM runs a test to see if a specific instance of AccessPolicyEntry_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAccessPolicyEntry_ARM(subject AccessPolicyEntry_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AccessPolicyEntry_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AccessPolicyEntry_ARM instances for property testing - lazily instantiated by
// AccessPolicyEntry_ARMGenerator()
var accessPolicyEntry_ARMGenerator gopter.Gen

// AccessPolicyEntry_ARMGenerator returns a generator of AccessPolicyEntry_ARM instances for property testing.
// We first initialize accessPolicyEntry_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AccessPolicyEntry_ARMGenerator() gopter.Gen {
	if accessPolicyEntry_ARMGenerator != nil {
		return accessPolicyEntry_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessPolicyEntry_ARM(generators)
	accessPolicyEntry_ARMGenerator = gen.Struct(reflect.TypeOf(AccessPolicyEntry_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessPolicyEntry_ARM(generators)
	AddRelatedPropertyGeneratorsForAccessPolicyEntry_ARM(generators)
	accessPolicyEntry_ARMGenerator = gen.Struct(reflect.TypeOf(AccessPolicyEntry_ARM{}), generators)

	return accessPolicyEntry_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAccessPolicyEntry_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAccessPolicyEntry_ARM(gens map[string]gopter.Gen) {
	gens["ApplicationId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAccessPolicyEntry_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAccessPolicyEntry_ARM(gens map[string]gopter.Gen) {
	gens["Permissions"] = gen.PtrOf(Permissions_ARMGenerator())
}

func Test_IPRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPRule_ARM, IPRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPRule_ARM runs a test to see if a specific instance of IPRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPRule_ARM(subject IPRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPRule_ARM instances for property testing - lazily instantiated by IPRule_ARMGenerator()
var ipRule_ARMGenerator gopter.Gen

// IPRule_ARMGenerator returns a generator of IPRule_ARM instances for property testing.
func IPRule_ARMGenerator() gopter.Gen {
	if ipRule_ARMGenerator != nil {
		return ipRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPRule_ARM(generators)
	ipRule_ARMGenerator = gen.Struct(reflect.TypeOf(IPRule_ARM{}), generators)

	return ipRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIPRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPRule_ARM(gens map[string]gopter.Gen) {
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_NetworkRuleSet_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkRuleSet_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkRuleSet_ARM, NetworkRuleSet_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkRuleSet_ARM runs a test to see if a specific instance of NetworkRuleSet_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkRuleSet_ARM(subject NetworkRuleSet_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkRuleSet_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkRuleSet_ARM instances for property testing - lazily instantiated by NetworkRuleSet_ARMGenerator()
var networkRuleSet_ARMGenerator gopter.Gen

// NetworkRuleSet_ARMGenerator returns a generator of NetworkRuleSet_ARM instances for property testing.
// We first initialize networkRuleSet_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkRuleSet_ARMGenerator() gopter.Gen {
	if networkRuleSet_ARMGenerator != nil {
		return networkRuleSet_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSet_ARM(generators)
	networkRuleSet_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSet_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSet_ARM(generators)
	AddRelatedPropertyGeneratorsForNetworkRuleSet_ARM(generators)
	networkRuleSet_ARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSet_ARM{}), generators)

	return networkRuleSet_ARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkRuleSet_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkRuleSet_ARM(gens map[string]gopter.Gen) {
	gens["Bypass"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSet_Bypass_AzureServices, NetworkRuleSet_Bypass_None))
	gens["DefaultAction"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSet_DefaultAction_Allow, NetworkRuleSet_DefaultAction_Deny))
}

// AddRelatedPropertyGeneratorsForNetworkRuleSet_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkRuleSet_ARM(gens map[string]gopter.Gen) {
	gens["IpRules"] = gen.SliceOf(IPRule_ARMGenerator())
	gens["VirtualNetworkRules"] = gen.SliceOf(VirtualNetworkRule_ARMGenerator())
}

func Test_Permissions_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Permissions_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPermissions_ARM, Permissions_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPermissions_ARM runs a test to see if a specific instance of Permissions_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPermissions_ARM(subject Permissions_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Permissions_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Permissions_ARM instances for property testing - lazily instantiated by Permissions_ARMGenerator()
var permissions_ARMGenerator gopter.Gen

// Permissions_ARMGenerator returns a generator of Permissions_ARM instances for property testing.
func Permissions_ARMGenerator() gopter.Gen {
	if permissions_ARMGenerator != nil {
		return permissions_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPermissions_ARM(generators)
	permissions_ARMGenerator = gen.Struct(reflect.TypeOf(Permissions_ARM{}), generators)

	return permissions_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPermissions_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPermissions_ARM(gens map[string]gopter.Gen) {
	gens["Certificates"] = gen.SliceOf(gen.OneConstOf(
		Permissions_Certificates_All,
		Permissions_Certificates_Backup,
		Permissions_Certificates_Create,
		Permissions_Certificates_Delete,
		Permissions_Certificates_Deleteissuers,
		Permissions_Certificates_Get,
		Permissions_Certificates_Getissuers,
		Permissions_Certificates_Import,
		Permissions_Certificates_List,
		Permissions_Certificates_Listissuers,
		Permissions_Certificates_Managecontacts,
		Permissions_Certificates_Manageissuers,
		Permissions_Certificates_Purge,
		Permissions_Certificates_Recover,
		Permissions_Certificates_Restore,
		Permissions_Certificates_Setissuers,
		Permissions_Certificates_Update))
	gens["Keys"] = gen.SliceOf(gen.OneConstOf(
		Permissions_Keys_All,
		Permissions_Keys_Backup,
		Permissions_Keys_Create,
		Permissions_Keys_Decrypt,
		Permissions_Keys_Delete,
		Permissions_Keys_Encrypt,
		Permissions_Keys_Get,
		Permissions_Keys_Getrotationpolicy,
		Permissions_Keys_Import,
		Permissions_Keys_List,
		Permissions_Keys_Purge,
		Permissions_Keys_Recover,
		Permissions_Keys_Release,
		Permissions_Keys_Restore,
		Permissions_Keys_Rotate,
		Permissions_Keys_Setrotationpolicy,
		Permissions_Keys_Sign,
		Permissions_Keys_UnwrapKey,
		Permissions_Keys_Update,
		Permissions_Keys_Verify,
		Permissions_Keys_WrapKey))
	gens["Secrets"] = gen.SliceOf(gen.OneConstOf(
		Permissions_Secrets_All,
		Permissions_Secrets_Backup,
		Permissions_Secrets_Delete,
		Permissions_Secrets_Get,
		Permissions_Secrets_List,
		Permissions_Secrets_Purge,
		Permissions_Secrets_Recover,
		Permissions_Secrets_Restore,
		Permissions_Secrets_Set))
	gens["Storage"] = gen.SliceOf(gen.OneConstOf(
		Permissions_Storage_All,
		Permissions_Storage_Backup,
		Permissions_Storage_Delete,
		Permissions_Storage_Deletesas,
		Permissions_Storage_Get,
		Permissions_Storage_Getsas,
		Permissions_Storage_List,
		Permissions_Storage_Listsas,
		Permissions_Storage_Purge,
		Permissions_Storage_Recover,
		Permissions_Storage_Regeneratekey,
		Permissions_Storage_Restore,
		Permissions_Storage_Set,
		Permissions_Storage_Setsas,
		Permissions_Storage_Update))
}

func Test_Sku_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_ARM, Sku_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_ARM runs a test to see if a specific instance of Sku_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_ARM(subject Sku_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_ARM instances for property testing - lazily instantiated by Sku_ARMGenerator()
var sku_ARMGenerator gopter.Gen

// Sku_ARMGenerator returns a generator of Sku_ARM instances for property testing.
func Sku_ARMGenerator() gopter.Gen {
	if sku_ARMGenerator != nil {
		return sku_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_ARM(generators)
	sku_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_ARM{}), generators)

	return sku_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_ARM(gens map[string]gopter.Gen) {
	gens["Family"] = gen.PtrOf(gen.OneConstOf(Sku_Family_A))
	gens["Name"] = gen.PtrOf(gen.OneConstOf(Sku_Name_Premium, Sku_Name_Standard))
}

func Test_VaultProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VaultProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultProperties_ARM, VaultProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultProperties_ARM runs a test to see if a specific instance of VaultProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultProperties_ARM(subject VaultProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VaultProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VaultProperties_ARM instances for property testing - lazily instantiated by
// VaultProperties_ARMGenerator()
var vaultProperties_ARMGenerator gopter.Gen

// VaultProperties_ARMGenerator returns a generator of VaultProperties_ARM instances for property testing.
// We first initialize vaultProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VaultProperties_ARMGenerator() gopter.Gen {
	if vaultProperties_ARMGenerator != nil {
		return vaultProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultProperties_ARM(generators)
	vaultProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VaultProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForVaultProperties_ARM(generators)
	vaultProperties_ARMGenerator = gen.Struct(reflect.TypeOf(VaultProperties_ARM{}), generators)

	return vaultProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVaultProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVaultProperties_ARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		VaultProperties_CreateMode_CreateOrRecover,
		VaultProperties_CreateMode_Default,
		VaultProperties_CreateMode_PurgeThenCreate,
		VaultProperties_CreateMode_Recover))
	gens["EnablePurgeProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableRbacAuthorization"] = gen.PtrOf(gen.Bool())
	gens["EnableSoftDelete"] = gen.PtrOf(gen.Bool())
	gens["EnabledForDeployment"] = gen.PtrOf(gen.Bool())
	gens["EnabledForDiskEncryption"] = gen.PtrOf(gen.Bool())
	gens["EnabledForTemplateDeployment"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(VaultProperties_ProvisioningState_RegisteringDns, VaultProperties_ProvisioningState_Succeeded))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.AlphaString())
	gens["SoftDeleteRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["VaultUri"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVaultProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVaultProperties_ARM(gens map[string]gopter.Gen) {
	gens["AccessPolicies"] = gen.SliceOf(AccessPolicyEntry_ARMGenerator())
	gens["NetworkAcls"] = gen.PtrOf(NetworkRuleSet_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_ARMGenerator())
}

func Test_Vault_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Vault_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVault_Spec_ARM, Vault_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVault_Spec_ARM runs a test to see if a specific instance of Vault_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVault_Spec_ARM(subject Vault_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Vault_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Vault_Spec_ARM instances for property testing - lazily instantiated by Vault_Spec_ARMGenerator()
var vault_Spec_ARMGenerator gopter.Gen

// Vault_Spec_ARMGenerator returns a generator of Vault_Spec_ARM instances for property testing.
// We first initialize vault_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Vault_Spec_ARMGenerator() gopter.Gen {
	if vault_Spec_ARMGenerator != nil {
		return vault_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVault_Spec_ARM(generators)
	vault_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Vault_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVault_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForVault_Spec_ARM(generators)
	vault_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Vault_Spec_ARM{}), generators)

	return vault_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVault_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVault_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVault_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVault_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VaultProperties_ARMGenerator())
}

func Test_VirtualNetworkRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkRule_ARM, VirtualNetworkRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkRule_ARM runs a test to see if a specific instance of VirtualNetworkRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkRule_ARM(subject VirtualNetworkRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkRule_ARM instances for property testing - lazily instantiated by
// VirtualNetworkRule_ARMGenerator()
var virtualNetworkRule_ARMGenerator gopter.Gen

// VirtualNetworkRule_ARMGenerator returns a generator of VirtualNetworkRule_ARM instances for property testing.
func VirtualNetworkRule_ARMGenerator() gopter.Gen {
	if virtualNetworkRule_ARMGenerator != nil {
		return virtualNetworkRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkRule_ARM(generators)
	virtualNetworkRule_ARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkRule_ARM{}), generators)

	return virtualNetworkRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkRule_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreMissingVnetServiceEndpoint"] = gen.PtrOf(gen.Bool())
}
