// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210401preview

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Vault_Spec_ARM struct {
	// Location: The supported Azure location where the key vault should be created.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Properties of the vault
	Properties *VaultProperties_ARM `json:"properties,omitempty"`

	// Tags: The tags that will be assigned to the key vault.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Vault_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01-preview"
func (vault Vault_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (vault *Vault_Spec_ARM) GetName() string {
	return vault.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.KeyVault/vaults"
func (vault *Vault_Spec_ARM) GetType() string {
	return "Microsoft.KeyVault/vaults"
}

// Properties of the vault
type VaultProperties_ARM struct {
	// AccessPolicies: An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use
	// the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not
	// required. Otherwise, access policies are required.
	AccessPolicies []AccessPolicyEntry_ARM `json:"accessPolicies,omitempty"`

	// CreateMode: The vault's create mode to indicate whether the vault need to be recovered or not.
	CreateMode *VaultProperties_CreateMode_ARM `json:"createMode,omitempty"`

	// EnablePurgeProtection: Property specifying whether protection against purge is enabled for this vault. Setting this
	// property to true activates protection against purge for this vault and its content - only the Key Vault service may
	// initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this
	// functionality is irreversible - that is, the property does not accept false as its value.
	EnablePurgeProtection *bool `json:"enablePurgeProtection,omitempty"`

	// EnableRbacAuthorization: Property that controls how data actions are authorized. When true, the key vault will use Role
	// Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties
	// will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy
	// stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value
	// of false. Note that management actions are always authorized with RBAC.
	EnableRbacAuthorization *bool `json:"enableRbacAuthorization,omitempty"`

	// EnableSoftDelete: Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not
	// set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it
	// cannot be reverted to false.
	EnableSoftDelete *bool `json:"enableSoftDelete,omitempty"`

	// EnabledForDeployment: Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored
	// as secrets from the key vault.
	EnabledForDeployment *bool `json:"enabledForDeployment,omitempty"`

	// EnabledForDiskEncryption: Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the
	// vault and unwrap keys.
	EnabledForDiskEncryption *bool `json:"enabledForDiskEncryption,omitempty"`

	// EnabledForTemplateDeployment: Property to specify whether Azure Resource Manager is permitted to retrieve secrets from
	// the key vault.
	EnabledForTemplateDeployment *bool `json:"enabledForTemplateDeployment,omitempty"`

	// NetworkAcls: Rules governing the accessibility of the key vault from specific network locations.
	NetworkAcls *NetworkRuleSet_ARM `json:"networkAcls,omitempty"`

	// ProvisioningState: Provisioning state of the vault.
	ProvisioningState *VaultProperties_ProvisioningState_ARM `json:"provisioningState,omitempty"`

	// Sku: SKU details
	Sku *Sku_ARM `json:"sku,omitempty"`

	// SoftDeleteRetentionInDays: softDelete data retention days. It accepts >=7 and <=90.
	SoftDeleteRetentionInDays *int `json:"softDeleteRetentionInDays,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty" optionalConfigMapPair:"TenantId"`

	// VaultUri: The URI of the vault for performing operations on keys and secrets.
	VaultUri *string `json:"vaultUri,omitempty"`
}

// An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key
// vault's tenant ID.
type AccessPolicyEntry_ARM struct {
	// ApplicationId:  Application ID of the client making request on behalf of a principal
	ApplicationId *string `json:"applicationId,omitempty" optionalConfigMapPair:"ApplicationId"`

	// ObjectId: The object ID of a user, service principal or security group in the Azure Active Directory tenant for the
	// vault. The object ID must be unique for the list of access policies.
	ObjectId *string `json:"objectId,omitempty" optionalConfigMapPair:"ObjectId"`

	// Permissions: Permissions the identity has for keys, secrets and certificates.
	Permissions *Permissions_ARM `json:"permissions,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty" optionalConfigMapPair:"TenantId"`
}

// A set of rules governing the network accessibility of a vault.
type NetworkRuleSet_ARM struct {
	// Bypass: Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the
	// default is 'AzureServices'.
	Bypass *NetworkRuleSet_Bypass_ARM `json:"bypass,omitempty"`

	// DefaultAction: The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after
	// the bypass property has been evaluated.
	DefaultAction *NetworkRuleSet_DefaultAction_ARM `json:"defaultAction,omitempty"`

	// IpRules: The list of IP address rules.
	IpRules []IPRule_ARM `json:"ipRules,omitempty"`

	// VirtualNetworkRules: The list of virtual network rules.
	VirtualNetworkRules []VirtualNetworkRule_ARM `json:"virtualNetworkRules,omitempty"`
}

// SKU details
type Sku_ARM struct {
	// Family: SKU family name
	Family *Sku_Family_ARM `json:"family,omitempty"`

	// Name: SKU name to specify whether the key vault is a standard vault or a premium vault.
	Name *Sku_Name_ARM `json:"name,omitempty"`
}

// +kubebuilder:validation:Enum={"createOrRecover","default","purgeThenCreate","recover"}
type VaultProperties_CreateMode_ARM string

const (
	VaultProperties_CreateMode_ARM_CreateOrRecover = VaultProperties_CreateMode_ARM("createOrRecover")
	VaultProperties_CreateMode_ARM_Default         = VaultProperties_CreateMode_ARM("default")
	VaultProperties_CreateMode_ARM_PurgeThenCreate = VaultProperties_CreateMode_ARM("purgeThenCreate")
	VaultProperties_CreateMode_ARM_Recover         = VaultProperties_CreateMode_ARM("recover")
)

// Mapping from string to VaultProperties_CreateMode_ARM
var vaultProperties_CreateMode_ARM_Values = map[string]VaultProperties_CreateMode_ARM{
	"createorrecover": VaultProperties_CreateMode_ARM_CreateOrRecover,
	"default":         VaultProperties_CreateMode_ARM_Default,
	"purgethencreate": VaultProperties_CreateMode_ARM_PurgeThenCreate,
	"recover":         VaultProperties_CreateMode_ARM_Recover,
}

// +kubebuilder:validation:Enum={"RegisteringDns","Succeeded"}
type VaultProperties_ProvisioningState_ARM string

const (
	VaultProperties_ProvisioningState_ARM_RegisteringDns = VaultProperties_ProvisioningState_ARM("RegisteringDns")
	VaultProperties_ProvisioningState_ARM_Succeeded      = VaultProperties_ProvisioningState_ARM("Succeeded")
)

// Mapping from string to VaultProperties_ProvisioningState_ARM
var vaultProperties_ProvisioningState_ARM_Values = map[string]VaultProperties_ProvisioningState_ARM{
	"registeringdns": VaultProperties_ProvisioningState_ARM_RegisteringDns,
	"succeeded":      VaultProperties_ProvisioningState_ARM_Succeeded,
}

// A rule governing the accessibility of a vault from a specific ip address or ip range.
type IPRule_ARM struct {
	// Value: An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all
	// addresses that start with 124.56.78).
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:validation:Enum={"AzureServices","None"}
type NetworkRuleSet_Bypass_ARM string

const (
	NetworkRuleSet_Bypass_ARM_AzureServices = NetworkRuleSet_Bypass_ARM("AzureServices")
	NetworkRuleSet_Bypass_ARM_None          = NetworkRuleSet_Bypass_ARM("None")
)

// Mapping from string to NetworkRuleSet_Bypass_ARM
var networkRuleSet_Bypass_ARM_Values = map[string]NetworkRuleSet_Bypass_ARM{
	"azureservices": NetworkRuleSet_Bypass_ARM_AzureServices,
	"none":          NetworkRuleSet_Bypass_ARM_None,
}

// +kubebuilder:validation:Enum={"Allow","Deny"}
type NetworkRuleSet_DefaultAction_ARM string

const (
	NetworkRuleSet_DefaultAction_ARM_Allow = NetworkRuleSet_DefaultAction_ARM("Allow")
	NetworkRuleSet_DefaultAction_ARM_Deny  = NetworkRuleSet_DefaultAction_ARM("Deny")
)

// Mapping from string to NetworkRuleSet_DefaultAction_ARM
var networkRuleSet_DefaultAction_ARM_Values = map[string]NetworkRuleSet_DefaultAction_ARM{
	"allow": NetworkRuleSet_DefaultAction_ARM_Allow,
	"deny":  NetworkRuleSet_DefaultAction_ARM_Deny,
}

// Permissions the identity has for keys, secrets, certificates and storage.
type Permissions_ARM struct {
	// Certificates: Permissions to certificates
	Certificates []Permissions_Certificates_ARM `json:"certificates,omitempty"`

	// Keys: Permissions to keys
	Keys []Permissions_Keys_ARM `json:"keys,omitempty"`

	// Secrets: Permissions to secrets
	Secrets []Permissions_Secrets_ARM `json:"secrets,omitempty"`

	// Storage: Permissions to storage accounts
	Storage []Permissions_Storage_ARM `json:"storage,omitempty"`
}

// +kubebuilder:validation:Enum={"A"}
type Sku_Family_ARM string

const Sku_Family_ARM_A = Sku_Family_ARM("A")

// Mapping from string to Sku_Family_ARM
var sku_Family_ARM_Values = map[string]Sku_Family_ARM{
	"a": Sku_Family_ARM_A,
}

// +kubebuilder:validation:Enum={"premium","standard"}
type Sku_Name_ARM string

const (
	Sku_Name_ARM_Premium  = Sku_Name_ARM("premium")
	Sku_Name_ARM_Standard = Sku_Name_ARM("standard")
)

// Mapping from string to Sku_Name_ARM
var sku_Name_ARM_Values = map[string]Sku_Name_ARM{
	"premium":  Sku_Name_ARM_Premium,
	"standard": Sku_Name_ARM_Standard,
}

// A rule governing the accessibility of a vault from a specific virtual network.
type VirtualNetworkRule_ARM struct {
	Id *string `json:"id,omitempty"`

	// IgnoreMissingVnetServiceEndpoint: Property to specify whether NRP will ignore the check if parent subnet has
	// serviceEndpoints configured.
	IgnoreMissingVnetServiceEndpoint *bool `json:"ignoreMissingVnetServiceEndpoint,omitempty"`
}

// +kubebuilder:validation:Enum={"backup","create","delete","deleteissuers","get","getissuers","import","list","listissuers","managecontacts","manageissuers","purge","recover","restore","setissuers","update"}
type Permissions_Certificates_ARM string

const (
	Permissions_Certificates_ARM_Backup         = Permissions_Certificates_ARM("backup")
	Permissions_Certificates_ARM_Create         = Permissions_Certificates_ARM("create")
	Permissions_Certificates_ARM_Delete         = Permissions_Certificates_ARM("delete")
	Permissions_Certificates_ARM_Deleteissuers  = Permissions_Certificates_ARM("deleteissuers")
	Permissions_Certificates_ARM_Get            = Permissions_Certificates_ARM("get")
	Permissions_Certificates_ARM_Getissuers     = Permissions_Certificates_ARM("getissuers")
	Permissions_Certificates_ARM_Import         = Permissions_Certificates_ARM("import")
	Permissions_Certificates_ARM_List           = Permissions_Certificates_ARM("list")
	Permissions_Certificates_ARM_Listissuers    = Permissions_Certificates_ARM("listissuers")
	Permissions_Certificates_ARM_Managecontacts = Permissions_Certificates_ARM("managecontacts")
	Permissions_Certificates_ARM_Manageissuers  = Permissions_Certificates_ARM("manageissuers")
	Permissions_Certificates_ARM_Purge          = Permissions_Certificates_ARM("purge")
	Permissions_Certificates_ARM_Recover        = Permissions_Certificates_ARM("recover")
	Permissions_Certificates_ARM_Restore        = Permissions_Certificates_ARM("restore")
	Permissions_Certificates_ARM_Setissuers     = Permissions_Certificates_ARM("setissuers")
	Permissions_Certificates_ARM_Update         = Permissions_Certificates_ARM("update")
)

// Mapping from string to Permissions_Certificates_ARM
var permissions_Certificates_ARM_Values = map[string]Permissions_Certificates_ARM{
	"backup":         Permissions_Certificates_ARM_Backup,
	"create":         Permissions_Certificates_ARM_Create,
	"delete":         Permissions_Certificates_ARM_Delete,
	"deleteissuers":  Permissions_Certificates_ARM_Deleteissuers,
	"get":            Permissions_Certificates_ARM_Get,
	"getissuers":     Permissions_Certificates_ARM_Getissuers,
	"import":         Permissions_Certificates_ARM_Import,
	"list":           Permissions_Certificates_ARM_List,
	"listissuers":    Permissions_Certificates_ARM_Listissuers,
	"managecontacts": Permissions_Certificates_ARM_Managecontacts,
	"manageissuers":  Permissions_Certificates_ARM_Manageissuers,
	"purge":          Permissions_Certificates_ARM_Purge,
	"recover":        Permissions_Certificates_ARM_Recover,
	"restore":        Permissions_Certificates_ARM_Restore,
	"setissuers":     Permissions_Certificates_ARM_Setissuers,
	"update":         Permissions_Certificates_ARM_Update,
}

// +kubebuilder:validation:Enum={"backup","create","decrypt","delete","encrypt","get","import","list","purge","recover","release","restore","sign","unwrapKey","update","verify","wrapKey"}
type Permissions_Keys_ARM string

const (
	Permissions_Keys_ARM_Backup    = Permissions_Keys_ARM("backup")
	Permissions_Keys_ARM_Create    = Permissions_Keys_ARM("create")
	Permissions_Keys_ARM_Decrypt   = Permissions_Keys_ARM("decrypt")
	Permissions_Keys_ARM_Delete    = Permissions_Keys_ARM("delete")
	Permissions_Keys_ARM_Encrypt   = Permissions_Keys_ARM("encrypt")
	Permissions_Keys_ARM_Get       = Permissions_Keys_ARM("get")
	Permissions_Keys_ARM_Import    = Permissions_Keys_ARM("import")
	Permissions_Keys_ARM_List      = Permissions_Keys_ARM("list")
	Permissions_Keys_ARM_Purge     = Permissions_Keys_ARM("purge")
	Permissions_Keys_ARM_Recover   = Permissions_Keys_ARM("recover")
	Permissions_Keys_ARM_Release   = Permissions_Keys_ARM("release")
	Permissions_Keys_ARM_Restore   = Permissions_Keys_ARM("restore")
	Permissions_Keys_ARM_Sign      = Permissions_Keys_ARM("sign")
	Permissions_Keys_ARM_UnwrapKey = Permissions_Keys_ARM("unwrapKey")
	Permissions_Keys_ARM_Update    = Permissions_Keys_ARM("update")
	Permissions_Keys_ARM_Verify    = Permissions_Keys_ARM("verify")
	Permissions_Keys_ARM_WrapKey   = Permissions_Keys_ARM("wrapKey")
)

// Mapping from string to Permissions_Keys_ARM
var permissions_Keys_ARM_Values = map[string]Permissions_Keys_ARM{
	"backup":    Permissions_Keys_ARM_Backup,
	"create":    Permissions_Keys_ARM_Create,
	"decrypt":   Permissions_Keys_ARM_Decrypt,
	"delete":    Permissions_Keys_ARM_Delete,
	"encrypt":   Permissions_Keys_ARM_Encrypt,
	"get":       Permissions_Keys_ARM_Get,
	"import":    Permissions_Keys_ARM_Import,
	"list":      Permissions_Keys_ARM_List,
	"purge":     Permissions_Keys_ARM_Purge,
	"recover":   Permissions_Keys_ARM_Recover,
	"release":   Permissions_Keys_ARM_Release,
	"restore":   Permissions_Keys_ARM_Restore,
	"sign":      Permissions_Keys_ARM_Sign,
	"unwrapkey": Permissions_Keys_ARM_UnwrapKey,
	"update":    Permissions_Keys_ARM_Update,
	"verify":    Permissions_Keys_ARM_Verify,
	"wrapkey":   Permissions_Keys_ARM_WrapKey,
}

// +kubebuilder:validation:Enum={"backup","delete","get","list","purge","recover","restore","set"}
type Permissions_Secrets_ARM string

const (
	Permissions_Secrets_ARM_Backup  = Permissions_Secrets_ARM("backup")
	Permissions_Secrets_ARM_Delete  = Permissions_Secrets_ARM("delete")
	Permissions_Secrets_ARM_Get     = Permissions_Secrets_ARM("get")
	Permissions_Secrets_ARM_List    = Permissions_Secrets_ARM("list")
	Permissions_Secrets_ARM_Purge   = Permissions_Secrets_ARM("purge")
	Permissions_Secrets_ARM_Recover = Permissions_Secrets_ARM("recover")
	Permissions_Secrets_ARM_Restore = Permissions_Secrets_ARM("restore")
	Permissions_Secrets_ARM_Set     = Permissions_Secrets_ARM("set")
)

// Mapping from string to Permissions_Secrets_ARM
var permissions_Secrets_ARM_Values = map[string]Permissions_Secrets_ARM{
	"backup":  Permissions_Secrets_ARM_Backup,
	"delete":  Permissions_Secrets_ARM_Delete,
	"get":     Permissions_Secrets_ARM_Get,
	"list":    Permissions_Secrets_ARM_List,
	"purge":   Permissions_Secrets_ARM_Purge,
	"recover": Permissions_Secrets_ARM_Recover,
	"restore": Permissions_Secrets_ARM_Restore,
	"set":     Permissions_Secrets_ARM_Set,
}

// +kubebuilder:validation:Enum={"backup","delete","deletesas","get","getsas","list","listsas","purge","recover","regeneratekey","restore","set","setsas","update"}
type Permissions_Storage_ARM string

const (
	Permissions_Storage_ARM_Backup        = Permissions_Storage_ARM("backup")
	Permissions_Storage_ARM_Delete        = Permissions_Storage_ARM("delete")
	Permissions_Storage_ARM_Deletesas     = Permissions_Storage_ARM("deletesas")
	Permissions_Storage_ARM_Get           = Permissions_Storage_ARM("get")
	Permissions_Storage_ARM_Getsas        = Permissions_Storage_ARM("getsas")
	Permissions_Storage_ARM_List          = Permissions_Storage_ARM("list")
	Permissions_Storage_ARM_Listsas       = Permissions_Storage_ARM("listsas")
	Permissions_Storage_ARM_Purge         = Permissions_Storage_ARM("purge")
	Permissions_Storage_ARM_Recover       = Permissions_Storage_ARM("recover")
	Permissions_Storage_ARM_Regeneratekey = Permissions_Storage_ARM("regeneratekey")
	Permissions_Storage_ARM_Restore       = Permissions_Storage_ARM("restore")
	Permissions_Storage_ARM_Set           = Permissions_Storage_ARM("set")
	Permissions_Storage_ARM_Setsas        = Permissions_Storage_ARM("setsas")
	Permissions_Storage_ARM_Update        = Permissions_Storage_ARM("update")
)

// Mapping from string to Permissions_Storage_ARM
var permissions_Storage_ARM_Values = map[string]Permissions_Storage_ARM{
	"backup":        Permissions_Storage_ARM_Backup,
	"delete":        Permissions_Storage_ARM_Delete,
	"deletesas":     Permissions_Storage_ARM_Deletesas,
	"get":           Permissions_Storage_ARM_Get,
	"getsas":        Permissions_Storage_ARM_Getsas,
	"list":          Permissions_Storage_ARM_List,
	"listsas":       Permissions_Storage_ARM_Listsas,
	"purge":         Permissions_Storage_ARM_Purge,
	"recover":       Permissions_Storage_ARM_Recover,
	"regeneratekey": Permissions_Storage_ARM_Regeneratekey,
	"restore":       Permissions_Storage_ARM_Restore,
	"set":           Permissions_Storage_ARM_Set,
	"setsas":        Permissions_Storage_ARM_Setsas,
	"update":        Permissions_Storage_ARM_Update,
}
