// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401preview

type Vault_STATUSARM struct {
	// Location: The supported Azure location where the key vault should be created.
	Location *string `json:"location,omitempty"`

	// Properties: Properties of the vault
	Properties *VaultProperties_STATUSARM `json:"properties,omitempty"`

	// Tags: The tags that will be assigned to the key vault.
	Tags map[string]string `json:"tags,omitempty"`
}

type VaultProperties_STATUSARM struct {
	// AccessPolicies: An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use
	// the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not
	// required. Otherwise, access policies are required.
	AccessPolicies []AccessPolicyEntry_STATUSARM `json:"accessPolicies,omitempty"`

	// CreateMode: The vault's create mode to indicate whether the vault need to be recovered or not.
	CreateMode *VaultProperties_CreateMode_STATUS `json:"createMode,omitempty"`

	// EnablePurgeProtection: Property specifying whether protection against purge is enabled for this vault. Setting this
	// property to true activates protection against purge for this vault and its content - only the Key Vault service may
	// initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this
	// functionality is irreversible - that is, the property does not accept false as its value.
	EnablePurgeProtection *bool `json:"enablePurgeProtection,omitempty"`

	// EnableRbacAuthorization: Property that controls how data actions are authorized. When true, the key vault will use Role
	// Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties
	// will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy
	// stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value
	// of false. Note that management actions are always authorized with RBAC.
	EnableRbacAuthorization *bool `json:"enableRbacAuthorization,omitempty"`

	// EnableSoftDelete: Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not
	// set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it
	// cannot be reverted to false.
	EnableSoftDelete *bool `json:"enableSoftDelete,omitempty"`

	// EnabledForDeployment: Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored
	// as secrets from the key vault.
	EnabledForDeployment *bool `json:"enabledForDeployment,omitempty"`

	// EnabledForDiskEncryption: Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the
	// vault and unwrap keys.
	EnabledForDiskEncryption *bool `json:"enabledForDiskEncryption,omitempty"`

	// EnabledForTemplateDeployment: Property to specify whether Azure Resource Manager is permitted to retrieve secrets from
	// the key vault.
	EnabledForTemplateDeployment *bool `json:"enabledForTemplateDeployment,omitempty"`

	// HsmPoolResourceId: The resource id of HSM Pool.
	HsmPoolResourceId *string `json:"hsmPoolResourceId,omitempty"`

	// NetworkAcls: Rules governing the accessibility of the key vault from specific network locations.
	NetworkAcls *NetworkRuleSet_STATUSARM `json:"networkAcls,omitempty"`

	// PrivateEndpointConnections: List of private endpoint connections associated with the key vault.
	PrivateEndpointConnections []PrivateEndpointConnectionItem_STATUSARM `json:"privateEndpointConnections,omitempty"`

	// ProvisioningState: Provisioning state of the vault.
	ProvisioningState *VaultProperties_ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// Sku: SKU details
	Sku *Sku_STATUSARM `json:"sku,omitempty"`

	// SoftDeleteRetentionInDays: softDelete data retention days. It accepts >=7 and <=90.
	SoftDeleteRetentionInDays *int `json:"softDeleteRetentionInDays,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty"`

	// VaultUri: The URI of the vault for performing operations on keys and secrets.
	VaultUri *string `json:"vaultUri,omitempty"`
}

type AccessPolicyEntry_STATUSARM struct {
	// ApplicationId:  Application ID of the client making request on behalf of a principal
	ApplicationId *string `json:"applicationId,omitempty"`

	// ObjectId: The object ID of a user, service principal or security group in the Azure Active Directory tenant for the
	// vault. The object ID must be unique for the list of access policies.
	ObjectId *string `json:"objectId,omitempty"`

	// Permissions: Permissions the identity has for keys, secrets and certificates.
	Permissions *Permissions_STATUSARM `json:"permissions,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty"`
}

type NetworkRuleSet_STATUSARM struct {
	// Bypass: Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the
	// default is 'AzureServices'.
	Bypass *NetworkRuleSet_Bypass_STATUS `json:"bypass,omitempty"`

	// DefaultAction: The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after
	// the bypass property has been evaluated.
	DefaultAction *NetworkRuleSet_DefaultAction_STATUS `json:"defaultAction,omitempty"`

	// IpRules: The list of IP address rules.
	IpRules []IPRule_STATUSARM `json:"ipRules,omitempty"`

	// VirtualNetworkRules: The list of virtual network rules.
	VirtualNetworkRules []VirtualNetworkRule_STATUSARM `json:"virtualNetworkRules,omitempty"`
}

type PrivateEndpointConnectionItem_STATUSARM struct {
	// Etag: Modified whenever there is a change in the state of private endpoint connection.
	Etag *string `json:"etag,omitempty"`

	// Id: Id of private endpoint connection.
	Id *string `json:"id,omitempty"`

	// Properties: Private endpoint connection properties.
	Properties *PrivateEndpointConnectionProperties_STATUSARM `json:"properties,omitempty"`
}

type Sku_STATUSARM struct {
	// Family: SKU family name
	Family *Sku_Family_STATUS `json:"family,omitempty"`

	// Name: SKU name to specify whether the key vault is a standard vault or a premium vault.
	Name *Sku_Name_STATUS `json:"name,omitempty"`
}

type VaultProperties_CreateMode_STATUS string

const (
	VaultProperties_CreateMode_Default_STATUS = VaultProperties_CreateMode_STATUS("default")
	VaultProperties_CreateMode_Recover_STATUS = VaultProperties_CreateMode_STATUS("recover")
)

type VaultProperties_ProvisioningState_STATUS string

const (
	VaultProperties_ProvisioningState_RegisteringDns_STATUS = VaultProperties_ProvisioningState_STATUS("RegisteringDns")
	VaultProperties_ProvisioningState_Succeeded_STATUS      = VaultProperties_ProvisioningState_STATUS("Succeeded")
)

type IPRule_STATUSARM struct {
	// Value: An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all
	// addresses that start with 124.56.78).
	Value *string `json:"value,omitempty"`
}

type NetworkRuleSet_Bypass_STATUS string

const (
	NetworkRuleSet_Bypass_AzureServices_STATUS = NetworkRuleSet_Bypass_STATUS("AzureServices")
	NetworkRuleSet_Bypass_None_STATUS          = NetworkRuleSet_Bypass_STATUS("None")
)

type NetworkRuleSet_DefaultAction_STATUS string

const (
	NetworkRuleSet_DefaultAction_Allow_STATUS = NetworkRuleSet_DefaultAction_STATUS("Allow")
	NetworkRuleSet_DefaultAction_Deny_STATUS  = NetworkRuleSet_DefaultAction_STATUS("Deny")
)

type Permissions_STATUSARM struct {
	// Certificates: Permissions to certificates
	Certificates []Permissions_Certificates_STATUS `json:"certificates,omitempty"`

	// Keys: Permissions to keys
	Keys []Permissions_Keys_STATUS `json:"keys,omitempty"`

	// Secrets: Permissions to secrets
	Secrets []Permissions_Secrets_STATUS `json:"secrets,omitempty"`

	// Storage: Permissions to storage accounts
	Storage []Permissions_Storage_STATUS `json:"storage,omitempty"`
}

type PrivateEndpointConnectionProperties_STATUSARM struct {
	// PrivateEndpoint: Properties of the private endpoint object.
	PrivateEndpoint *PrivateEndpoint_STATUSARM `json:"privateEndpoint,omitempty"`

	// PrivateLinkServiceConnectionState: Approval state of the private link connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState_STATUSARM `json:"privateLinkServiceConnectionState,omitempty"`

	// ProvisioningState: Provisioning state of the private endpoint connection.
	ProvisioningState *PrivateEndpointConnectionProvisioningState_STATUS `json:"provisioningState,omitempty"`
}

type Sku_Family_STATUS string

const Sku_Family_A_STATUS = Sku_Family_STATUS("A")

type Sku_Name_STATUS string

const (
	Sku_Name_Premium_STATUS  = Sku_Name_STATUS("premium")
	Sku_Name_Standard_STATUS = Sku_Name_STATUS("standard")
)

type VirtualNetworkRule_STATUSARM struct {
	// Id: Full resource id of a vnet subnet, such as
	// '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
	Id *string `json:"id,omitempty"`

	// IgnoreMissingVnetServiceEndpoint: Property to specify whether NRP will ignore the check if parent subnet has
	// serviceEndpoints configured.
	IgnoreMissingVnetServiceEndpoint *bool `json:"ignoreMissingVnetServiceEndpoint,omitempty"`
}

type Permissions_Certificates_STATUS string

const (
	Permissions_Certificates_Backup_STATUS         = Permissions_Certificates_STATUS("backup")
	Permissions_Certificates_Create_STATUS         = Permissions_Certificates_STATUS("create")
	Permissions_Certificates_Delete_STATUS         = Permissions_Certificates_STATUS("delete")
	Permissions_Certificates_Deleteissuers_STATUS  = Permissions_Certificates_STATUS("deleteissuers")
	Permissions_Certificates_Get_STATUS            = Permissions_Certificates_STATUS("get")
	Permissions_Certificates_Getissuers_STATUS     = Permissions_Certificates_STATUS("getissuers")
	Permissions_Certificates_Import_STATUS         = Permissions_Certificates_STATUS("import")
	Permissions_Certificates_List_STATUS           = Permissions_Certificates_STATUS("list")
	Permissions_Certificates_Listissuers_STATUS    = Permissions_Certificates_STATUS("listissuers")
	Permissions_Certificates_Managecontacts_STATUS = Permissions_Certificates_STATUS("managecontacts")
	Permissions_Certificates_Manageissuers_STATUS  = Permissions_Certificates_STATUS("manageissuers")
	Permissions_Certificates_Purge_STATUS          = Permissions_Certificates_STATUS("purge")
	Permissions_Certificates_Recover_STATUS        = Permissions_Certificates_STATUS("recover")
	Permissions_Certificates_Restore_STATUS        = Permissions_Certificates_STATUS("restore")
	Permissions_Certificates_Setissuers_STATUS     = Permissions_Certificates_STATUS("setissuers")
	Permissions_Certificates_Update_STATUS         = Permissions_Certificates_STATUS("update")
)

type Permissions_Keys_STATUS string

const (
	Permissions_Keys_Backup_STATUS    = Permissions_Keys_STATUS("backup")
	Permissions_Keys_Create_STATUS    = Permissions_Keys_STATUS("create")
	Permissions_Keys_Decrypt_STATUS   = Permissions_Keys_STATUS("decrypt")
	Permissions_Keys_Delete_STATUS    = Permissions_Keys_STATUS("delete")
	Permissions_Keys_Encrypt_STATUS   = Permissions_Keys_STATUS("encrypt")
	Permissions_Keys_Get_STATUS       = Permissions_Keys_STATUS("get")
	Permissions_Keys_Import_STATUS    = Permissions_Keys_STATUS("import")
	Permissions_Keys_List_STATUS      = Permissions_Keys_STATUS("list")
	Permissions_Keys_Purge_STATUS     = Permissions_Keys_STATUS("purge")
	Permissions_Keys_Recover_STATUS   = Permissions_Keys_STATUS("recover")
	Permissions_Keys_Release_STATUS   = Permissions_Keys_STATUS("release")
	Permissions_Keys_Restore_STATUS   = Permissions_Keys_STATUS("restore")
	Permissions_Keys_Sign_STATUS      = Permissions_Keys_STATUS("sign")
	Permissions_Keys_UnwrapKey_STATUS = Permissions_Keys_STATUS("unwrapKey")
	Permissions_Keys_Update_STATUS    = Permissions_Keys_STATUS("update")
	Permissions_Keys_Verify_STATUS    = Permissions_Keys_STATUS("verify")
	Permissions_Keys_WrapKey_STATUS   = Permissions_Keys_STATUS("wrapKey")
)

type Permissions_Secrets_STATUS string

const (
	Permissions_Secrets_Backup_STATUS  = Permissions_Secrets_STATUS("backup")
	Permissions_Secrets_Delete_STATUS  = Permissions_Secrets_STATUS("delete")
	Permissions_Secrets_Get_STATUS     = Permissions_Secrets_STATUS("get")
	Permissions_Secrets_List_STATUS    = Permissions_Secrets_STATUS("list")
	Permissions_Secrets_Purge_STATUS   = Permissions_Secrets_STATUS("purge")
	Permissions_Secrets_Recover_STATUS = Permissions_Secrets_STATUS("recover")
	Permissions_Secrets_Restore_STATUS = Permissions_Secrets_STATUS("restore")
	Permissions_Secrets_Set_STATUS     = Permissions_Secrets_STATUS("set")
)

type Permissions_Storage_STATUS string

const (
	Permissions_Storage_Backup_STATUS        = Permissions_Storage_STATUS("backup")
	Permissions_Storage_Delete_STATUS        = Permissions_Storage_STATUS("delete")
	Permissions_Storage_Deletesas_STATUS     = Permissions_Storage_STATUS("deletesas")
	Permissions_Storage_Get_STATUS           = Permissions_Storage_STATUS("get")
	Permissions_Storage_Getsas_STATUS        = Permissions_Storage_STATUS("getsas")
	Permissions_Storage_List_STATUS          = Permissions_Storage_STATUS("list")
	Permissions_Storage_Listsas_STATUS       = Permissions_Storage_STATUS("listsas")
	Permissions_Storage_Purge_STATUS         = Permissions_Storage_STATUS("purge")
	Permissions_Storage_Recover_STATUS       = Permissions_Storage_STATUS("recover")
	Permissions_Storage_Regeneratekey_STATUS = Permissions_Storage_STATUS("regeneratekey")
	Permissions_Storage_Restore_STATUS       = Permissions_Storage_STATUS("restore")
	Permissions_Storage_Set_STATUS           = Permissions_Storage_STATUS("set")
	Permissions_Storage_Setsas_STATUS        = Permissions_Storage_STATUS("setsas")
	Permissions_Storage_Update_STATUS        = Permissions_Storage_STATUS("update")
)

type PrivateEndpoint_STATUSARM struct {
	// Id: Full identifier of the private endpoint resource.
	Id *string `json:"id,omitempty"`
}

type PrivateLinkServiceConnectionState_STATUSARM struct {
	// ActionsRequired: A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *PrivateLinkServiceConnectionState_ActionsRequired_STATUS `json:"actionsRequired,omitempty"`

	// Description: The reason for approval or rejection.
	Description *string `json:"description,omitempty"`

	// Status: Indicates whether the connection has been approved, rejected or removed by the key vault owner.
	Status *PrivateEndpointServiceConnectionStatus_STATUS `json:"status,omitempty"`
}
