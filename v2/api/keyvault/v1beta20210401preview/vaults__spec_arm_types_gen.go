// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401preview

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type Vaults_SpecARM struct {
	// Location: The supported Azure location where the key vault should be created.
	Location *string `json:"location,omitempty"`

	// Name: Name of the resource
	Name string `json:"name,omitempty"`

	// Properties: Properties of the vault
	Properties *VaultPropertiesARM `json:"properties,omitempty"`

	// Tags: The tags that will be assigned to the key vault.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &Vaults_SpecARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-04-01-preview"
func (vaults Vaults_SpecARM) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetName returns the Name of the resource
func (vaults *Vaults_SpecARM) GetName() string {
	return vaults.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.KeyVault/vaults"
func (vaults *Vaults_SpecARM) GetType() string {
	return "Microsoft.KeyVault/vaults"
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01-preview/Microsoft.KeyVault.json#/definitions/VaultProperties
type VaultPropertiesARM struct {
	// AccessPolicies: An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use
	// the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not
	// required. Otherwise, access policies are required.
	AccessPolicies []AccessPolicyEntryARM `json:"accessPolicies,omitempty"`

	// CreateMode: The vault's create mode to indicate whether the vault need to be recovered or not.
	CreateMode *VaultPropertiesCreateMode `json:"createMode,omitempty"`

	// EnablePurgeProtection: Property specifying whether protection against purge is enabled for this vault. Setting this
	// property to true activates protection against purge for this vault and its content - only the Key Vault service may
	// initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this
	// functionality is irreversible - that is, the property does not accept false as its value.
	EnablePurgeProtection *bool `json:"enablePurgeProtection,omitempty"`

	// EnableRbacAuthorization: Property that controls how data actions are authorized. When true, the key vault will use Role
	// Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties
	// will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy
	// stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value
	// of false. Note that management actions are always authorized with RBAC.
	EnableRbacAuthorization *bool `json:"enableRbacAuthorization,omitempty"`

	// EnableSoftDelete: Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not
	// set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it
	// cannot be reverted to false.
	EnableSoftDelete *bool `json:"enableSoftDelete,omitempty"`

	// EnabledForDeployment: Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored
	// as secrets from the key vault.
	EnabledForDeployment *bool `json:"enabledForDeployment,omitempty"`

	// EnabledForDiskEncryption: Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the
	// vault and unwrap keys.
	EnabledForDiskEncryption *bool `json:"enabledForDiskEncryption,omitempty"`

	// EnabledForTemplateDeployment: Property to specify whether Azure Resource Manager is permitted to retrieve secrets from
	// the key vault.
	EnabledForTemplateDeployment *bool `json:"enabledForTemplateDeployment,omitempty"`

	// NetworkAcls: A set of rules governing the network accessibility of a vault.
	NetworkAcls *NetworkRuleSetARM `json:"networkAcls,omitempty"`

	// ProvisioningState: Provisioning state of the vault.
	ProvisioningState *VaultPropertiesProvisioningState `json:"provisioningState,omitempty"`

	// Sku: SKU details
	Sku *SkuARM `json:"sku,omitempty"`

	// SoftDeleteRetentionInDays: softDelete data retention days. It accepts >=7 and <=90.
	SoftDeleteRetentionInDays *int `json:"softDeleteRetentionInDays,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty"`

	// VaultUri: The URI of the vault for performing operations on keys and secrets.
	VaultUri *string `json:"vaultUri,omitempty"`
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01-preview/Microsoft.KeyVault.json#/definitions/AccessPolicyEntry
type AccessPolicyEntryARM struct {
	// ApplicationId:  Application ID of the client making request on behalf of a principal
	ApplicationId *string `json:"applicationId,omitempty"`

	// ObjectId: The object ID of a user, service principal or security group in the Azure Active Directory tenant for the
	// vault. The object ID must be unique for the list of access policies.
	ObjectId *string `json:"objectId,omitempty"`

	// Permissions: Permissions the identity has for keys, secrets, certificates and storage.
	Permissions *PermissionsARM `json:"permissions,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty"`
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01-preview/Microsoft.KeyVault.json#/definitions/NetworkRuleSet
type NetworkRuleSetARM struct {
	// Bypass: Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the
	// default is 'AzureServices'.
	Bypass *NetworkRuleSetBypass `json:"bypass,omitempty"`

	// DefaultAction: The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after
	// the bypass property has been evaluated.
	DefaultAction *NetworkRuleSetDefaultAction `json:"defaultAction,omitempty"`

	// IpRules: The list of IP address rules.
	IpRules []IPRuleARM `json:"ipRules,omitempty"`

	// VirtualNetworkRules: The list of virtual network rules.
	VirtualNetworkRules []VirtualNetworkRuleARM `json:"virtualNetworkRules,omitempty"`
}

// Generated from: https://schema.management.azure.com/schemas/2021-04-01-preview/Microsoft.KeyVault.json#/definitions/Sku
type SkuARM struct {
	// Family: SKU family name
	Family *SkuFamily `json:"family,omitempty"`

	// Name: SKU name to specify whether the key vault is a standard vault or a premium vault.
	Name *SkuName `json:"name,omitempty"`
}

// +kubebuilder:validation:Enum={"default","recover"}
type VaultPropertiesCreateMode string

const (
	VaultPropertiesCreateModeDefault = VaultPropertiesCreateMode("default")
	VaultPropertiesCreateModeRecover = VaultPropertiesCreateMode("recover")
)

// +kubebuilder:validation:Enum={"RegisteringDns","Succeeded"}
type VaultPropertiesProvisioningState string

const (
	VaultPropertiesProvisioningStateRegisteringDns = VaultPropertiesProvisioningState("RegisteringDns")
	VaultPropertiesProvisioningStateSucceeded      = VaultPropertiesProvisioningState("Succeeded")
)

// Generated from: https://schema.management.azure.com/schemas/2021-04-01-preview/Microsoft.KeyVault.json#/definitions/IPRule
type IPRuleARM struct {
	// Value: An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all
	// addresses that start with 124.56.78).
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:validation:Enum={"AzureServices","None"}
type NetworkRuleSetBypass string

const (
	NetworkRuleSetBypassAzureServices = NetworkRuleSetBypass("AzureServices")
	NetworkRuleSetBypassNone          = NetworkRuleSetBypass("None")
)

// +kubebuilder:validation:Enum={"Allow","Deny"}
type NetworkRuleSetDefaultAction string

const (
	NetworkRuleSetDefaultActionAllow = NetworkRuleSetDefaultAction("Allow")
	NetworkRuleSetDefaultActionDeny  = NetworkRuleSetDefaultAction("Deny")
)

// Generated from: https://schema.management.azure.com/schemas/2021-04-01-preview/Microsoft.KeyVault.json#/definitions/Permissions
type PermissionsARM struct {
	// Certificates: Permissions to certificates
	Certificates []PermissionsCertificates `json:"certificates,omitempty"`

	// Keys: Permissions to keys
	Keys []PermissionsKeys `json:"keys,omitempty"`

	// Secrets: Permissions to secrets
	Secrets []PermissionsSecrets `json:"secrets,omitempty"`

	// Storage: Permissions to storage accounts
	Storage []PermissionsStorage `json:"storage,omitempty"`
}

// +kubebuilder:validation:Enum={"A"}
type SkuFamily string

const SkuFamilyA = SkuFamily("A")

// +kubebuilder:validation:Enum={"premium","standard"}
type SkuName string

const (
	SkuNamePremium  = SkuName("premium")
	SkuNameStandard = SkuName("standard")
)

// Generated from: https://schema.management.azure.com/schemas/2021-04-01-preview/Microsoft.KeyVault.json#/definitions/VirtualNetworkRule
type VirtualNetworkRuleARM struct {
	Id *string `json:"id,omitempty"`

	// IgnoreMissingVnetServiceEndpoint: Property to specify whether NRP will ignore the check if parent subnet has
	// serviceEndpoints configured.
	IgnoreMissingVnetServiceEndpoint *bool `json:"ignoreMissingVnetServiceEndpoint,omitempty"`
}

// +kubebuilder:validation:Enum={"backup","create","delete","deleteissuers","get","getissuers","import","list","listissuers","managecontacts","manageissuers","purge","recover","restore","setissuers","update"}
type PermissionsCertificates string

const (
	PermissionsCertificatesBackup         = PermissionsCertificates("backup")
	PermissionsCertificatesCreate         = PermissionsCertificates("create")
	PermissionsCertificatesDelete         = PermissionsCertificates("delete")
	PermissionsCertificatesDeleteissuers  = PermissionsCertificates("deleteissuers")
	PermissionsCertificatesGet            = PermissionsCertificates("get")
	PermissionsCertificatesGetissuers     = PermissionsCertificates("getissuers")
	PermissionsCertificatesImport         = PermissionsCertificates("import")
	PermissionsCertificatesList           = PermissionsCertificates("list")
	PermissionsCertificatesListissuers    = PermissionsCertificates("listissuers")
	PermissionsCertificatesManagecontacts = PermissionsCertificates("managecontacts")
	PermissionsCertificatesManageissuers  = PermissionsCertificates("manageissuers")
	PermissionsCertificatesPurge          = PermissionsCertificates("purge")
	PermissionsCertificatesRecover        = PermissionsCertificates("recover")
	PermissionsCertificatesRestore        = PermissionsCertificates("restore")
	PermissionsCertificatesSetissuers     = PermissionsCertificates("setissuers")
	PermissionsCertificatesUpdate         = PermissionsCertificates("update")
)

// +kubebuilder:validation:Enum={"backup","create","decrypt","delete","encrypt","get","import","list","purge","recover","release","restore","sign","unwrapKey","update","verify","wrapKey"}
type PermissionsKeys string

const (
	PermissionsKeysBackup    = PermissionsKeys("backup")
	PermissionsKeysCreate    = PermissionsKeys("create")
	PermissionsKeysDecrypt   = PermissionsKeys("decrypt")
	PermissionsKeysDelete    = PermissionsKeys("delete")
	PermissionsKeysEncrypt   = PermissionsKeys("encrypt")
	PermissionsKeysGet       = PermissionsKeys("get")
	PermissionsKeysImport    = PermissionsKeys("import")
	PermissionsKeysList      = PermissionsKeys("list")
	PermissionsKeysPurge     = PermissionsKeys("purge")
	PermissionsKeysRecover   = PermissionsKeys("recover")
	PermissionsKeysRelease   = PermissionsKeys("release")
	PermissionsKeysRestore   = PermissionsKeys("restore")
	PermissionsKeysSign      = PermissionsKeys("sign")
	PermissionsKeysUnwrapKey = PermissionsKeys("unwrapKey")
	PermissionsKeysUpdate    = PermissionsKeys("update")
	PermissionsKeysVerify    = PermissionsKeys("verify")
	PermissionsKeysWrapKey   = PermissionsKeys("wrapKey")
)

// +kubebuilder:validation:Enum={"backup","delete","get","list","purge","recover","restore","set"}
type PermissionsSecrets string

const (
	PermissionsSecretsBackup  = PermissionsSecrets("backup")
	PermissionsSecretsDelete  = PermissionsSecrets("delete")
	PermissionsSecretsGet     = PermissionsSecrets("get")
	PermissionsSecretsList    = PermissionsSecrets("list")
	PermissionsSecretsPurge   = PermissionsSecrets("purge")
	PermissionsSecretsRecover = PermissionsSecrets("recover")
	PermissionsSecretsRestore = PermissionsSecrets("restore")
	PermissionsSecretsSet     = PermissionsSecrets("set")
)

// +kubebuilder:validation:Enum={"backup","delete","deletesas","get","getsas","list","listsas","purge","recover","regeneratekey","restore","set","setsas","update"}
type PermissionsStorage string

const (
	PermissionsStorageBackup        = PermissionsStorage("backup")
	PermissionsStorageDelete        = PermissionsStorage("delete")
	PermissionsStorageDeletesas     = PermissionsStorage("deletesas")
	PermissionsStorageGet           = PermissionsStorage("get")
	PermissionsStorageGetsas        = PermissionsStorage("getsas")
	PermissionsStorageList          = PermissionsStorage("list")
	PermissionsStorageListsas       = PermissionsStorage("listsas")
	PermissionsStoragePurge         = PermissionsStorage("purge")
	PermissionsStorageRecover       = PermissionsStorage("recover")
	PermissionsStorageRegeneratekey = PermissionsStorage("regeneratekey")
	PermissionsStorageRestore       = PermissionsStorage("restore")
	PermissionsStorageSet           = PermissionsStorage("set")
	PermissionsStorageSetsas        = PermissionsStorage("setsas")
	PermissionsStorageUpdate        = PermissionsStorage("update")
)
