// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Vaults_SpecARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Vaults_SpecARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultsSpecARM, VaultsSpecARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultsSpecARM runs a test to see if a specific instance of Vaults_SpecARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultsSpecARM(subject Vaults_SpecARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Vaults_SpecARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Vaults_SpecARM instances for property testing - lazily instantiated by VaultsSpecARMGenerator()
var vaultsSpecARMGenerator gopter.Gen

// VaultsSpecARMGenerator returns a generator of Vaults_SpecARM instances for property testing.
// We first initialize vaultsSpecARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VaultsSpecARMGenerator() gopter.Gen {
	if vaultsSpecARMGenerator != nil {
		return vaultsSpecARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultsSpecARM(generators)
	vaultsSpecARMGenerator = gen.Struct(reflect.TypeOf(Vaults_SpecARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultsSpecARM(generators)
	AddRelatedPropertyGeneratorsForVaultsSpecARM(generators)
	vaultsSpecARMGenerator = gen.Struct(reflect.TypeOf(Vaults_SpecARM{}), generators)

	return vaultsSpecARMGenerator
}

// AddIndependentPropertyGeneratorsForVaultsSpecARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVaultsSpecARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVaultsSpecARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVaultsSpecARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VaultPropertiesARMGenerator())
}

func Test_VaultPropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VaultPropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultPropertiesARM, VaultPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultPropertiesARM runs a test to see if a specific instance of VaultPropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultPropertiesARM(subject VaultPropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VaultPropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VaultPropertiesARM instances for property testing - lazily instantiated by VaultPropertiesARMGenerator()
var vaultPropertiesARMGenerator gopter.Gen

// VaultPropertiesARMGenerator returns a generator of VaultPropertiesARM instances for property testing.
// We first initialize vaultPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VaultPropertiesARMGenerator() gopter.Gen {
	if vaultPropertiesARMGenerator != nil {
		return vaultPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultPropertiesARM(generators)
	vaultPropertiesARMGenerator = gen.Struct(reflect.TypeOf(VaultPropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForVaultPropertiesARM(generators)
	vaultPropertiesARMGenerator = gen.Struct(reflect.TypeOf(VaultPropertiesARM{}), generators)

	return vaultPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForVaultPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVaultPropertiesARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(VaultPropertiesCreateMode_Default, VaultPropertiesCreateMode_Recover))
	gens["EnablePurgeProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableRbacAuthorization"] = gen.PtrOf(gen.Bool())
	gens["EnableSoftDelete"] = gen.PtrOf(gen.Bool())
	gens["EnabledForDeployment"] = gen.PtrOf(gen.Bool())
	gens["EnabledForDiskEncryption"] = gen.PtrOf(gen.Bool())
	gens["EnabledForTemplateDeployment"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(VaultPropertiesProvisioningState_RegisteringDns, VaultPropertiesProvisioningState_Succeeded))
	gens["SoftDeleteRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["VaultUri"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVaultPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVaultPropertiesARM(gens map[string]gopter.Gen) {
	gens["AccessPolicies"] = gen.SliceOf(AccessPolicyEntryARMGenerator())
	gens["NetworkAcls"] = gen.PtrOf(NetworkRuleSetARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuARMGenerator())
}

func Test_AccessPolicyEntryARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AccessPolicyEntryARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAccessPolicyEntryARM, AccessPolicyEntryARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAccessPolicyEntryARM runs a test to see if a specific instance of AccessPolicyEntryARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAccessPolicyEntryARM(subject AccessPolicyEntryARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AccessPolicyEntryARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AccessPolicyEntryARM instances for property testing - lazily instantiated by
// AccessPolicyEntryARMGenerator()
var accessPolicyEntryARMGenerator gopter.Gen

// AccessPolicyEntryARMGenerator returns a generator of AccessPolicyEntryARM instances for property testing.
// We first initialize accessPolicyEntryARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AccessPolicyEntryARMGenerator() gopter.Gen {
	if accessPolicyEntryARMGenerator != nil {
		return accessPolicyEntryARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessPolicyEntryARM(generators)
	accessPolicyEntryARMGenerator = gen.Struct(reflect.TypeOf(AccessPolicyEntryARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessPolicyEntryARM(generators)
	AddRelatedPropertyGeneratorsForAccessPolicyEntryARM(generators)
	accessPolicyEntryARMGenerator = gen.Struct(reflect.TypeOf(AccessPolicyEntryARM{}), generators)

	return accessPolicyEntryARMGenerator
}

// AddIndependentPropertyGeneratorsForAccessPolicyEntryARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAccessPolicyEntryARM(gens map[string]gopter.Gen) {
	gens["ApplicationId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAccessPolicyEntryARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAccessPolicyEntryARM(gens map[string]gopter.Gen) {
	gens["Permissions"] = gen.PtrOf(PermissionsARMGenerator())
}

func Test_NetworkRuleSetARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkRuleSetARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkRuleSetARM, NetworkRuleSetARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkRuleSetARM runs a test to see if a specific instance of NetworkRuleSetARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkRuleSetARM(subject NetworkRuleSetARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkRuleSetARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkRuleSetARM instances for property testing - lazily instantiated by NetworkRuleSetARMGenerator()
var networkRuleSetARMGenerator gopter.Gen

// NetworkRuleSetARMGenerator returns a generator of NetworkRuleSetARM instances for property testing.
// We first initialize networkRuleSetARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkRuleSetARMGenerator() gopter.Gen {
	if networkRuleSetARMGenerator != nil {
		return networkRuleSetARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSetARM(generators)
	networkRuleSetARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSetARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSetARM(generators)
	AddRelatedPropertyGeneratorsForNetworkRuleSetARM(generators)
	networkRuleSetARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSetARM{}), generators)

	return networkRuleSetARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkRuleSetARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkRuleSetARM(gens map[string]gopter.Gen) {
	gens["Bypass"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSetBypass_AzureServices, NetworkRuleSetBypass_None))
	gens["DefaultAction"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSetDefaultAction_Allow, NetworkRuleSetDefaultAction_Deny))
}

// AddRelatedPropertyGeneratorsForNetworkRuleSetARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkRuleSetARM(gens map[string]gopter.Gen) {
	gens["IpRules"] = gen.SliceOf(IPRuleARMGenerator())
	gens["VirtualNetworkRules"] = gen.SliceOf(VirtualNetworkRuleARMGenerator())
}

func Test_SkuARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SkuARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuARM, SkuARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuARM runs a test to see if a specific instance of SkuARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuARM(subject SkuARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SkuARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SkuARM instances for property testing - lazily instantiated by SkuARMGenerator()
var skuARMGenerator gopter.Gen

// SkuARMGenerator returns a generator of SkuARM instances for property testing.
func SkuARMGenerator() gopter.Gen {
	if skuARMGenerator != nil {
		return skuARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuARM(generators)
	skuARMGenerator = gen.Struct(reflect.TypeOf(SkuARM{}), generators)

	return skuARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuARM(gens map[string]gopter.Gen) {
	gens["Family"] = gen.PtrOf(gen.OneConstOf(SkuFamily_A))
	gens["Name"] = gen.PtrOf(gen.OneConstOf(SkuName_Premium, SkuName_Standard))
}

func Test_IPRuleARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPRuleARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPRuleARM, IPRuleARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPRuleARM runs a test to see if a specific instance of IPRuleARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPRuleARM(subject IPRuleARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPRuleARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPRuleARM instances for property testing - lazily instantiated by IPRuleARMGenerator()
var ipRuleARMGenerator gopter.Gen

// IPRuleARMGenerator returns a generator of IPRuleARM instances for property testing.
func IPRuleARMGenerator() gopter.Gen {
	if ipRuleARMGenerator != nil {
		return ipRuleARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPRuleARM(generators)
	ipRuleARMGenerator = gen.Struct(reflect.TypeOf(IPRuleARM{}), generators)

	return ipRuleARMGenerator
}

// AddIndependentPropertyGeneratorsForIPRuleARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPRuleARM(gens map[string]gopter.Gen) {
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_PermissionsARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PermissionsARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPermissionsARM, PermissionsARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPermissionsARM runs a test to see if a specific instance of PermissionsARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPermissionsARM(subject PermissionsARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PermissionsARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PermissionsARM instances for property testing - lazily instantiated by PermissionsARMGenerator()
var permissionsARMGenerator gopter.Gen

// PermissionsARMGenerator returns a generator of PermissionsARM instances for property testing.
func PermissionsARMGenerator() gopter.Gen {
	if permissionsARMGenerator != nil {
		return permissionsARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPermissionsARM(generators)
	permissionsARMGenerator = gen.Struct(reflect.TypeOf(PermissionsARM{}), generators)

	return permissionsARMGenerator
}

// AddIndependentPropertyGeneratorsForPermissionsARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPermissionsARM(gens map[string]gopter.Gen) {
	gens["Certificates"] = gen.SliceOf(gen.OneConstOf(
		PermissionsCertificates_Backup,
		PermissionsCertificates_Create,
		PermissionsCertificates_Delete,
		PermissionsCertificates_Deleteissuers,
		PermissionsCertificates_Get,
		PermissionsCertificates_Getissuers,
		PermissionsCertificates_Import,
		PermissionsCertificates_List,
		PermissionsCertificates_Listissuers,
		PermissionsCertificates_Managecontacts,
		PermissionsCertificates_Manageissuers,
		PermissionsCertificates_Purge,
		PermissionsCertificates_Recover,
		PermissionsCertificates_Restore,
		PermissionsCertificates_Setissuers,
		PermissionsCertificates_Update))
	gens["Keys"] = gen.SliceOf(gen.OneConstOf(
		PermissionsKeys_Backup,
		PermissionsKeys_Create,
		PermissionsKeys_Decrypt,
		PermissionsKeys_Delete,
		PermissionsKeys_Encrypt,
		PermissionsKeys_Get,
		PermissionsKeys_Import,
		PermissionsKeys_List,
		PermissionsKeys_Purge,
		PermissionsKeys_Recover,
		PermissionsKeys_Release,
		PermissionsKeys_Restore,
		PermissionsKeys_Sign,
		PermissionsKeys_UnwrapKey,
		PermissionsKeys_Update,
		PermissionsKeys_Verify,
		PermissionsKeys_WrapKey))
	gens["Secrets"] = gen.SliceOf(gen.OneConstOf(
		PermissionsSecrets_Backup,
		PermissionsSecrets_Delete,
		PermissionsSecrets_Get,
		PermissionsSecrets_List,
		PermissionsSecrets_Purge,
		PermissionsSecrets_Recover,
		PermissionsSecrets_Restore,
		PermissionsSecrets_Set))
	gens["Storage"] = gen.SliceOf(gen.OneConstOf(
		PermissionsStorage_Backup,
		PermissionsStorage_Delete,
		PermissionsStorage_Deletesas,
		PermissionsStorage_Get,
		PermissionsStorage_Getsas,
		PermissionsStorage_List,
		PermissionsStorage_Listsas,
		PermissionsStorage_Purge,
		PermissionsStorage_Recover,
		PermissionsStorage_Regeneratekey,
		PermissionsStorage_Restore,
		PermissionsStorage_Set,
		PermissionsStorage_Setsas,
		PermissionsStorage_Update))
}

func Test_VirtualNetworkRuleARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkRuleARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkRuleARM, VirtualNetworkRuleARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkRuleARM runs a test to see if a specific instance of VirtualNetworkRuleARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkRuleARM(subject VirtualNetworkRuleARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkRuleARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkRuleARM instances for property testing - lazily instantiated by
// VirtualNetworkRuleARMGenerator()
var virtualNetworkRuleARMGenerator gopter.Gen

// VirtualNetworkRuleARMGenerator returns a generator of VirtualNetworkRuleARM instances for property testing.
func VirtualNetworkRuleARMGenerator() gopter.Gen {
	if virtualNetworkRuleARMGenerator != nil {
		return virtualNetworkRuleARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkRuleARM(generators)
	virtualNetworkRuleARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkRuleARM{}), generators)

	return virtualNetworkRuleARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkRuleARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkRuleARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreMissingVnetServiceEndpoint"] = gen.PtrOf(gen.Bool())
}
