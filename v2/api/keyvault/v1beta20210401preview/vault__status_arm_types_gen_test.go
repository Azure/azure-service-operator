// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401preview

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Vault_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Vault_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultStatusARM, VaultStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultStatusARM runs a test to see if a specific instance of Vault_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultStatusARM(subject Vault_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Vault_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Vault_StatusARM instances for property testing - lazily instantiated by VaultStatusARMGenerator()
var vaultStatusARMGenerator gopter.Gen

// VaultStatusARMGenerator returns a generator of Vault_StatusARM instances for property testing.
// We first initialize vaultStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VaultStatusARMGenerator() gopter.Gen {
	if vaultStatusARMGenerator != nil {
		return vaultStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultStatusARM(generators)
	vaultStatusARMGenerator = gen.Struct(reflect.TypeOf(Vault_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultStatusARM(generators)
	AddRelatedPropertyGeneratorsForVaultStatusARM(generators)
	vaultStatusARMGenerator = gen.Struct(reflect.TypeOf(Vault_StatusARM{}), generators)

	return vaultStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVaultStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVaultStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVaultStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVaultStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(VaultPropertiesStatusARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemDataStatusARMGenerator())
}

func Test_SystemData_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemDataStatusARM, SystemDataStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemDataStatusARM runs a test to see if a specific instance of SystemData_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemDataStatusARM(subject SystemData_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_StatusARM instances for property testing - lazily instantiated by
// SystemDataStatusARMGenerator()
var systemDataStatusARMGenerator gopter.Gen

// SystemDataStatusARMGenerator returns a generator of SystemData_StatusARM instances for property testing.
func SystemDataStatusARMGenerator() gopter.Gen {
	if systemDataStatusARMGenerator != nil {
		return systemDataStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemDataStatusARM(generators)
	systemDataStatusARMGenerator = gen.Struct(reflect.TypeOf(SystemData_StatusARM{}), generators)

	return systemDataStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemDataStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemDataStatusARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_StatusApplication,
		IdentityType_StatusKey,
		IdentityType_StatusManagedIdentity,
		IdentityType_StatusUser))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		IdentityType_StatusApplication,
		IdentityType_StatusKey,
		IdentityType_StatusManagedIdentity,
		IdentityType_StatusUser))
}

func Test_VaultProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VaultProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVaultPropertiesStatusARM, VaultPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVaultPropertiesStatusARM runs a test to see if a specific instance of VaultProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVaultPropertiesStatusARM(subject VaultProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VaultProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VaultProperties_StatusARM instances for property testing - lazily instantiated by
// VaultPropertiesStatusARMGenerator()
var vaultPropertiesStatusARMGenerator gopter.Gen

// VaultPropertiesStatusARMGenerator returns a generator of VaultProperties_StatusARM instances for property testing.
// We first initialize vaultPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VaultPropertiesStatusARMGenerator() gopter.Gen {
	if vaultPropertiesStatusARMGenerator != nil {
		return vaultPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultPropertiesStatusARM(generators)
	vaultPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VaultProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVaultPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForVaultPropertiesStatusARM(generators)
	vaultPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(VaultProperties_StatusARM{}), generators)

	return vaultPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVaultPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVaultPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(VaultPropertiesStatusCreateModeDefault, VaultPropertiesStatusCreateModeRecover))
	gens["EnablePurgeProtection"] = gen.PtrOf(gen.Bool())
	gens["EnableRbacAuthorization"] = gen.PtrOf(gen.Bool())
	gens["EnableSoftDelete"] = gen.PtrOf(gen.Bool())
	gens["EnabledForDeployment"] = gen.PtrOf(gen.Bool())
	gens["EnabledForDiskEncryption"] = gen.PtrOf(gen.Bool())
	gens["EnabledForTemplateDeployment"] = gen.PtrOf(gen.Bool())
	gens["HsmPoolResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(VaultPropertiesStatusProvisioningStateRegisteringDns, VaultPropertiesStatusProvisioningStateSucceeded))
	gens["SoftDeleteRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["VaultUri"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVaultPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVaultPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["AccessPolicies"] = gen.SliceOf(AccessPolicyEntryStatusARMGenerator())
	gens["NetworkAcls"] = gen.PtrOf(NetworkRuleSetStatusARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(PrivateEndpointConnectionItemStatusARMGenerator())
	gens["Sku"] = gen.PtrOf(SkuStatusARMGenerator())
}

func Test_AccessPolicyEntry_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AccessPolicyEntry_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAccessPolicyEntryStatusARM, AccessPolicyEntryStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAccessPolicyEntryStatusARM runs a test to see if a specific instance of AccessPolicyEntry_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAccessPolicyEntryStatusARM(subject AccessPolicyEntry_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AccessPolicyEntry_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AccessPolicyEntry_StatusARM instances for property testing - lazily instantiated by
// AccessPolicyEntryStatusARMGenerator()
var accessPolicyEntryStatusARMGenerator gopter.Gen

// AccessPolicyEntryStatusARMGenerator returns a generator of AccessPolicyEntry_StatusARM instances for property testing.
// We first initialize accessPolicyEntryStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AccessPolicyEntryStatusARMGenerator() gopter.Gen {
	if accessPolicyEntryStatusARMGenerator != nil {
		return accessPolicyEntryStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessPolicyEntryStatusARM(generators)
	accessPolicyEntryStatusARMGenerator = gen.Struct(reflect.TypeOf(AccessPolicyEntry_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAccessPolicyEntryStatusARM(generators)
	AddRelatedPropertyGeneratorsForAccessPolicyEntryStatusARM(generators)
	accessPolicyEntryStatusARMGenerator = gen.Struct(reflect.TypeOf(AccessPolicyEntry_StatusARM{}), generators)

	return accessPolicyEntryStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAccessPolicyEntryStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAccessPolicyEntryStatusARM(gens map[string]gopter.Gen) {
	gens["ApplicationId"] = gen.PtrOf(gen.AlphaString())
	gens["ObjectId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAccessPolicyEntryStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAccessPolicyEntryStatusARM(gens map[string]gopter.Gen) {
	gens["Permissions"] = gen.PtrOf(PermissionsStatusARMGenerator())
}

func Test_NetworkRuleSet_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of NetworkRuleSet_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForNetworkRuleSetStatusARM, NetworkRuleSetStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForNetworkRuleSetStatusARM runs a test to see if a specific instance of NetworkRuleSet_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForNetworkRuleSetStatusARM(subject NetworkRuleSet_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual NetworkRuleSet_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of NetworkRuleSet_StatusARM instances for property testing - lazily instantiated by
// NetworkRuleSetStatusARMGenerator()
var networkRuleSetStatusARMGenerator gopter.Gen

// NetworkRuleSetStatusARMGenerator returns a generator of NetworkRuleSet_StatusARM instances for property testing.
// We first initialize networkRuleSetStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func NetworkRuleSetStatusARMGenerator() gopter.Gen {
	if networkRuleSetStatusARMGenerator != nil {
		return networkRuleSetStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSetStatusARM(generators)
	networkRuleSetStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSet_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForNetworkRuleSetStatusARM(generators)
	AddRelatedPropertyGeneratorsForNetworkRuleSetStatusARM(generators)
	networkRuleSetStatusARMGenerator = gen.Struct(reflect.TypeOf(NetworkRuleSet_StatusARM{}), generators)

	return networkRuleSetStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForNetworkRuleSetStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForNetworkRuleSetStatusARM(gens map[string]gopter.Gen) {
	gens["Bypass"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSetStatusBypassAzureServices, NetworkRuleSetStatusBypassNone))
	gens["DefaultAction"] = gen.PtrOf(gen.OneConstOf(NetworkRuleSetStatusDefaultActionAllow, NetworkRuleSetStatusDefaultActionDeny))
}

// AddRelatedPropertyGeneratorsForNetworkRuleSetStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForNetworkRuleSetStatusARM(gens map[string]gopter.Gen) {
	gens["IpRules"] = gen.SliceOf(IPRuleStatusARMGenerator())
	gens["VirtualNetworkRules"] = gen.SliceOf(VirtualNetworkRuleStatusARMGenerator())
}

func Test_PrivateEndpointConnectionItem_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnectionItem_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionItemStatusARM, PrivateEndpointConnectionItemStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionItemStatusARM runs a test to see if a specific instance of PrivateEndpointConnectionItem_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionItemStatusARM(subject PrivateEndpointConnectionItem_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnectionItem_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnectionItem_StatusARM instances for property testing - lazily instantiated by
// PrivateEndpointConnectionItemStatusARMGenerator()
var privateEndpointConnectionItemStatusARMGenerator gopter.Gen

// PrivateEndpointConnectionItemStatusARMGenerator returns a generator of PrivateEndpointConnectionItem_StatusARM instances for property testing.
// We first initialize privateEndpointConnectionItemStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnectionItemStatusARMGenerator() gopter.Gen {
	if privateEndpointConnectionItemStatusARMGenerator != nil {
		return privateEndpointConnectionItemStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionItemStatusARM(generators)
	privateEndpointConnectionItemStatusARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionItem_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionItemStatusARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnectionItemStatusARM(generators)
	privateEndpointConnectionItemStatusARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionItem_StatusARM{}), generators)

	return privateEndpointConnectionItemStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionItemStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionItemStatusARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnectionItemStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnectionItemStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(PrivateEndpointConnectionPropertiesStatusARMGenerator())
}

func Test_Sku_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSkuStatusARM, SkuStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSkuStatusARM runs a test to see if a specific instance of Sku_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSkuStatusARM(subject Sku_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_StatusARM instances for property testing - lazily instantiated by SkuStatusARMGenerator()
var skuStatusARMGenerator gopter.Gen

// SkuStatusARMGenerator returns a generator of Sku_StatusARM instances for property testing.
func SkuStatusARMGenerator() gopter.Gen {
	if skuStatusARMGenerator != nil {
		return skuStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSkuStatusARM(generators)
	skuStatusARMGenerator = gen.Struct(reflect.TypeOf(Sku_StatusARM{}), generators)

	return skuStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSkuStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSkuStatusARM(gens map[string]gopter.Gen) {
	gens["Family"] = gen.PtrOf(gen.OneConstOf(SkuStatusFamilyA))
	gens["Name"] = gen.PtrOf(gen.OneConstOf(SkuStatusNamePremium, SkuStatusNameStandard))
}

func Test_IPRule_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IPRule_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIPRuleStatusARM, IPRuleStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIPRuleStatusARM runs a test to see if a specific instance of IPRule_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIPRuleStatusARM(subject IPRule_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IPRule_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IPRule_StatusARM instances for property testing - lazily instantiated by IPRuleStatusARMGenerator()
var ipRuleStatusARMGenerator gopter.Gen

// IPRuleStatusARMGenerator returns a generator of IPRule_StatusARM instances for property testing.
func IPRuleStatusARMGenerator() gopter.Gen {
	if ipRuleStatusARMGenerator != nil {
		return ipRuleStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIPRuleStatusARM(generators)
	ipRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(IPRule_StatusARM{}), generators)

	return ipRuleStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForIPRuleStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIPRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_Permissions_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Permissions_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPermissionsStatusARM, PermissionsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPermissionsStatusARM runs a test to see if a specific instance of Permissions_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPermissionsStatusARM(subject Permissions_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Permissions_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Permissions_StatusARM instances for property testing - lazily instantiated by
// PermissionsStatusARMGenerator()
var permissionsStatusARMGenerator gopter.Gen

// PermissionsStatusARMGenerator returns a generator of Permissions_StatusARM instances for property testing.
func PermissionsStatusARMGenerator() gopter.Gen {
	if permissionsStatusARMGenerator != nil {
		return permissionsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPermissionsStatusARM(generators)
	permissionsStatusARMGenerator = gen.Struct(reflect.TypeOf(Permissions_StatusARM{}), generators)

	return permissionsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPermissionsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPermissionsStatusARM(gens map[string]gopter.Gen) {
	gens["Certificates"] = gen.SliceOf(gen.OneConstOf(
		PermissionsStatusCertificatesBackup,
		PermissionsStatusCertificatesCreate,
		PermissionsStatusCertificatesDelete,
		PermissionsStatusCertificatesDeleteissuers,
		PermissionsStatusCertificatesGet,
		PermissionsStatusCertificatesGetissuers,
		PermissionsStatusCertificatesImport,
		PermissionsStatusCertificatesList,
		PermissionsStatusCertificatesListissuers,
		PermissionsStatusCertificatesManagecontacts,
		PermissionsStatusCertificatesManageissuers,
		PermissionsStatusCertificatesPurge,
		PermissionsStatusCertificatesRecover,
		PermissionsStatusCertificatesRestore,
		PermissionsStatusCertificatesSetissuers,
		PermissionsStatusCertificatesUpdate))
	gens["Keys"] = gen.SliceOf(gen.OneConstOf(
		PermissionsStatusKeysBackup,
		PermissionsStatusKeysCreate,
		PermissionsStatusKeysDecrypt,
		PermissionsStatusKeysDelete,
		PermissionsStatusKeysEncrypt,
		PermissionsStatusKeysGet,
		PermissionsStatusKeysImport,
		PermissionsStatusKeysList,
		PermissionsStatusKeysPurge,
		PermissionsStatusKeysRecover,
		PermissionsStatusKeysRelease,
		PermissionsStatusKeysRestore,
		PermissionsStatusKeysSign,
		PermissionsStatusKeysUnwrapKey,
		PermissionsStatusKeysUpdate,
		PermissionsStatusKeysVerify,
		PermissionsStatusKeysWrapKey))
	gens["Secrets"] = gen.SliceOf(gen.OneConstOf(
		PermissionsStatusSecretsBackup,
		PermissionsStatusSecretsDelete,
		PermissionsStatusSecretsGet,
		PermissionsStatusSecretsList,
		PermissionsStatusSecretsPurge,
		PermissionsStatusSecretsRecover,
		PermissionsStatusSecretsRestore,
		PermissionsStatusSecretsSet))
	gens["Storage"] = gen.SliceOf(gen.OneConstOf(
		PermissionsStatusStorageBackup,
		PermissionsStatusStorageDelete,
		PermissionsStatusStorageDeletesas,
		PermissionsStatusStorageGet,
		PermissionsStatusStorageGetsas,
		PermissionsStatusStorageList,
		PermissionsStatusStorageListsas,
		PermissionsStatusStoragePurge,
		PermissionsStatusStorageRecover,
		PermissionsStatusStorageRegeneratekey,
		PermissionsStatusStorageRestore,
		PermissionsStatusStorageSet,
		PermissionsStatusStorageSetsas,
		PermissionsStatusStorageUpdate))
}

func Test_PrivateEndpointConnectionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpointConnectionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointConnectionPropertiesStatusARM, PrivateEndpointConnectionPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointConnectionPropertiesStatusARM runs a test to see if a specific instance of PrivateEndpointConnectionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointConnectionPropertiesStatusARM(subject PrivateEndpointConnectionProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpointConnectionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpointConnectionProperties_StatusARM instances for property testing - lazily instantiated by
// PrivateEndpointConnectionPropertiesStatusARMGenerator()
var privateEndpointConnectionPropertiesStatusARMGenerator gopter.Gen

// PrivateEndpointConnectionPropertiesStatusARMGenerator returns a generator of PrivateEndpointConnectionProperties_StatusARM instances for property testing.
// We first initialize privateEndpointConnectionPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PrivateEndpointConnectionPropertiesStatusARMGenerator() gopter.Gen {
	if privateEndpointConnectionPropertiesStatusARMGenerator != nil {
		return privateEndpointConnectionPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionPropertiesStatusARM(generators)
	privateEndpointConnectionPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointConnectionPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForPrivateEndpointConnectionPropertiesStatusARM(generators)
	privateEndpointConnectionPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpointConnectionProperties_StatusARM{}), generators)

	return privateEndpointConnectionPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointConnectionPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointConnectionPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointConnectionProvisioningState_StatusCreating,
		PrivateEndpointConnectionProvisioningState_StatusDeleting,
		PrivateEndpointConnectionProvisioningState_StatusDisconnected,
		PrivateEndpointConnectionProvisioningState_StatusFailed,
		PrivateEndpointConnectionProvisioningState_StatusSucceeded,
		PrivateEndpointConnectionProvisioningState_StatusUpdating))
}

// AddRelatedPropertyGeneratorsForPrivateEndpointConnectionPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPrivateEndpointConnectionPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(PrivateEndpointStatusARMGenerator())
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(PrivateLinkServiceConnectionStateStatusARMGenerator())
}

func Test_VirtualNetworkRule_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VirtualNetworkRule_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVirtualNetworkRuleStatusARM, VirtualNetworkRuleStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVirtualNetworkRuleStatusARM runs a test to see if a specific instance of VirtualNetworkRule_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVirtualNetworkRuleStatusARM(subject VirtualNetworkRule_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VirtualNetworkRule_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VirtualNetworkRule_StatusARM instances for property testing - lazily instantiated by
// VirtualNetworkRuleStatusARMGenerator()
var virtualNetworkRuleStatusARMGenerator gopter.Gen

// VirtualNetworkRuleStatusARMGenerator returns a generator of VirtualNetworkRule_StatusARM instances for property testing.
func VirtualNetworkRuleStatusARMGenerator() gopter.Gen {
	if virtualNetworkRuleStatusARMGenerator != nil {
		return virtualNetworkRuleStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVirtualNetworkRuleStatusARM(generators)
	virtualNetworkRuleStatusARMGenerator = gen.Struct(reflect.TypeOf(VirtualNetworkRule_StatusARM{}), generators)

	return virtualNetworkRuleStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVirtualNetworkRuleStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVirtualNetworkRuleStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IgnoreMissingVnetServiceEndpoint"] = gen.PtrOf(gen.Bool())
}

func Test_PrivateEndpoint_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateEndpoint_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateEndpointStatusARM, PrivateEndpointStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateEndpointStatusARM runs a test to see if a specific instance of PrivateEndpoint_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateEndpointStatusARM(subject PrivateEndpoint_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateEndpoint_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateEndpoint_StatusARM instances for property testing - lazily instantiated by
// PrivateEndpointStatusARMGenerator()
var privateEndpointStatusARMGenerator gopter.Gen

// PrivateEndpointStatusARMGenerator returns a generator of PrivateEndpoint_StatusARM instances for property testing.
func PrivateEndpointStatusARMGenerator() gopter.Gen {
	if privateEndpointStatusARMGenerator != nil {
		return privateEndpointStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateEndpointStatusARM(generators)
	privateEndpointStatusARMGenerator = gen.Struct(reflect.TypeOf(PrivateEndpoint_StatusARM{}), generators)

	return privateEndpointStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateEndpointStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateEndpointStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_PrivateLinkServiceConnectionState_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PrivateLinkServiceConnectionState_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPrivateLinkServiceConnectionStateStatusARM, PrivateLinkServiceConnectionStateStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPrivateLinkServiceConnectionStateStatusARM runs a test to see if a specific instance of PrivateLinkServiceConnectionState_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPrivateLinkServiceConnectionStateStatusARM(subject PrivateLinkServiceConnectionState_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PrivateLinkServiceConnectionState_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PrivateLinkServiceConnectionState_StatusARM instances for property testing - lazily instantiated by
// PrivateLinkServiceConnectionStateStatusARMGenerator()
var privateLinkServiceConnectionStateStatusARMGenerator gopter.Gen

// PrivateLinkServiceConnectionStateStatusARMGenerator returns a generator of PrivateLinkServiceConnectionState_StatusARM instances for property testing.
func PrivateLinkServiceConnectionStateStatusARMGenerator() gopter.Gen {
	if privateLinkServiceConnectionStateStatusARMGenerator != nil {
		return privateLinkServiceConnectionStateStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionStateStatusARM(generators)
	privateLinkServiceConnectionStateStatusARMGenerator = gen.Struct(reflect.TypeOf(PrivateLinkServiceConnectionState_StatusARM{}), generators)

	return privateLinkServiceConnectionStateStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionStateStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPrivateLinkServiceConnectionStateStatusARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.OneConstOf(PrivateLinkServiceConnectionStateStatusActionsRequiredNone))
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		PrivateEndpointServiceConnectionStatus_StatusApproved,
		PrivateEndpointServiceConnectionStatus_StatusDisconnected,
		PrivateEndpointServiceConnectionStatus_StatusPending,
		PrivateEndpointServiceConnectionStatus_StatusRejected))
}
