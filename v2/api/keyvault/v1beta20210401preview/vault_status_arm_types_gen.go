// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401preview

type Vault_STATUSARM struct {
	// Id: Fully qualified identifier of the key vault resource.
	Id *string `json:"id,omitempty"`

	// Location: Azure location of the key vault resource.
	Location *string `json:"location,omitempty"`

	// Name: Name of the key vault resource.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the vault
	Properties *VaultProperties_STATUSARM `json:"properties,omitempty"`

	// SystemData: System metadata for the key vault.
	SystemData *SystemData_STATUSARM `json:"systemData,omitempty"`

	// Tags: Tags assigned to the key vault resource.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type of the key vault resource.
	Type *string `json:"type,omitempty"`
}

type SystemData_STATUSARM struct {
	// CreatedAt: The timestamp of the key vault resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the key vault resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the key vault resource.
	CreatedByType *IdentityType_STATUS `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of the key vault resource last modification (UTC).
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the key vault resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the key vault resource.
	LastModifiedByType *IdentityType_STATUS `json:"lastModifiedByType,omitempty"`
}

type VaultProperties_STATUSARM struct {
	// AccessPolicies: An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use
	// the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not
	// required. Otherwise, access policies are required.
	AccessPolicies []AccessPolicyEntry_STATUSARM `json:"accessPolicies,omitempty"`

	// CreateMode: The vault's create mode to indicate whether the vault need to be recovered or not.
	CreateMode *VaultProperties_STATUS_CreateMode `json:"createMode,omitempty"`

	// EnablePurgeProtection: Property specifying whether protection against purge is enabled for this vault. Setting this
	// property to true activates protection against purge for this vault and its content - only the Key Vault service may
	// initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this
	// functionality is irreversible - that is, the property does not accept false as its value.
	EnablePurgeProtection *bool `json:"enablePurgeProtection,omitempty"`

	// EnableRbacAuthorization: Property that controls how data actions are authorized. When true, the key vault will use Role
	// Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties
	// will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy
	// stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value
	// of false. Note that management actions are always authorized with RBAC.
	EnableRbacAuthorization *bool `json:"enableRbacAuthorization,omitempty"`

	// EnableSoftDelete: Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not
	// set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it
	// cannot be reverted to false.
	EnableSoftDelete *bool `json:"enableSoftDelete,omitempty"`

	// EnabledForDeployment: Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored
	// as secrets from the key vault.
	EnabledForDeployment *bool `json:"enabledForDeployment,omitempty"`

	// EnabledForDiskEncryption: Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the
	// vault and unwrap keys.
	EnabledForDiskEncryption *bool `json:"enabledForDiskEncryption,omitempty"`

	// EnabledForTemplateDeployment: Property to specify whether Azure Resource Manager is permitted to retrieve secrets from
	// the key vault.
	EnabledForTemplateDeployment *bool `json:"enabledForTemplateDeployment,omitempty"`

	// HsmPoolResourceId: The resource id of HSM Pool.
	HsmPoolResourceId *string `json:"hsmPoolResourceId,omitempty"`

	// NetworkAcls: Rules governing the accessibility of the key vault from specific network locations.
	NetworkAcls *NetworkRuleSet_STATUSARM `json:"networkAcls,omitempty"`

	// PrivateEndpointConnections: List of private endpoint connections associated with the key vault.
	PrivateEndpointConnections []PrivateEndpointConnectionItem_STATUSARM `json:"privateEndpointConnections,omitempty"`

	// ProvisioningState: Provisioning state of the vault.
	ProvisioningState *VaultProperties_STATUS_ProvisioningState `json:"provisioningState,omitempty"`

	// Sku: SKU details
	Sku *Sku_STATUSARM `json:"sku,omitempty"`

	// SoftDeleteRetentionInDays: softDelete data retention days. It accepts >=7 and <=90.
	SoftDeleteRetentionInDays *int `json:"softDeleteRetentionInDays,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty"`

	// VaultUri: The URI of the vault for performing operations on keys and secrets.
	VaultUri *string `json:"vaultUri,omitempty"`
}

type AccessPolicyEntry_STATUSARM struct {
	// ApplicationId:  Application ID of the client making request on behalf of a principal
	ApplicationId *string `json:"applicationId,omitempty"`

	// ObjectId: The object ID of a user, service principal or security group in the Azure Active Directory tenant for the
	// vault. The object ID must be unique for the list of access policies.
	ObjectId *string `json:"objectId,omitempty"`

	// Permissions: Permissions the identity has for keys, secrets and certificates.
	Permissions *Permissions_STATUSARM `json:"permissions,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty"`
}

type IdentityType_STATUS string

const (
	IdentityType_STATUS_Application     = IdentityType_STATUS("Application")
	IdentityType_STATUS_Key             = IdentityType_STATUS("Key")
	IdentityType_STATUS_ManagedIdentity = IdentityType_STATUS("ManagedIdentity")
	IdentityType_STATUS_User            = IdentityType_STATUS("User")
)

type NetworkRuleSet_STATUSARM struct {
	// Bypass: Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the
	// default is 'AzureServices'.
	Bypass *NetworkRuleSet_STATUS_Bypass `json:"bypass,omitempty"`

	// DefaultAction: The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after
	// the bypass property has been evaluated.
	DefaultAction *NetworkRuleSet_STATUS_DefaultAction `json:"defaultAction,omitempty"`

	// IpRules: The list of IP address rules.
	IpRules []IPRule_STATUSARM `json:"ipRules,omitempty"`

	// VirtualNetworkRules: The list of virtual network rules.
	VirtualNetworkRules []VirtualNetworkRule_STATUSARM `json:"virtualNetworkRules,omitempty"`
}

type PrivateEndpointConnectionItem_STATUSARM struct {
	// Etag: Modified whenever there is a change in the state of private endpoint connection.
	Etag *string `json:"etag,omitempty"`

	// Id: Id of private endpoint connection.
	Id *string `json:"id,omitempty"`

	// Properties: Private endpoint connection properties.
	Properties *PrivateEndpointConnectionProperties_STATUSARM `json:"properties,omitempty"`
}

type Sku_STATUSARM struct {
	// Family: SKU family name
	Family *Sku_STATUS_Family `json:"family,omitempty"`

	// Name: SKU name to specify whether the key vault is a standard vault or a premium vault.
	Name *Sku_STATUS_Name `json:"name,omitempty"`
}

type VaultProperties_STATUS_CreateMode string

const (
	VaultProperties_STATUS_CreateMode_Default = VaultProperties_STATUS_CreateMode("default")
	VaultProperties_STATUS_CreateMode_Recover = VaultProperties_STATUS_CreateMode("recover")
)

type VaultProperties_STATUS_ProvisioningState string

const (
	VaultProperties_STATUS_ProvisioningState_RegisteringDns = VaultProperties_STATUS_ProvisioningState("RegisteringDns")
	VaultProperties_STATUS_ProvisioningState_Succeeded      = VaultProperties_STATUS_ProvisioningState("Succeeded")
)

type IPRule_STATUSARM struct {
	// Value: An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all
	// addresses that start with 124.56.78).
	Value *string `json:"value,omitempty"`
}

type NetworkRuleSet_STATUS_Bypass string

const (
	NetworkRuleSet_STATUS_Bypass_AzureServices = NetworkRuleSet_STATUS_Bypass("AzureServices")
	NetworkRuleSet_STATUS_Bypass_None          = NetworkRuleSet_STATUS_Bypass("None")
)

type NetworkRuleSet_STATUS_DefaultAction string

const (
	NetworkRuleSet_STATUS_DefaultAction_Allow = NetworkRuleSet_STATUS_DefaultAction("Allow")
	NetworkRuleSet_STATUS_DefaultAction_Deny  = NetworkRuleSet_STATUS_DefaultAction("Deny")
)

type Permissions_STATUSARM struct {
	// Certificates: Permissions to certificates
	Certificates []Permissions_STATUS_Certificates `json:"certificates,omitempty"`

	// Keys: Permissions to keys
	Keys []Permissions_STATUS_Keys `json:"keys,omitempty"`

	// Secrets: Permissions to secrets
	Secrets []Permissions_STATUS_Secrets `json:"secrets,omitempty"`

	// Storage: Permissions to storage accounts
	Storage []Permissions_STATUS_Storage `json:"storage,omitempty"`
}

type PrivateEndpointConnectionProperties_STATUSARM struct {
	// PrivateEndpoint: Properties of the private endpoint object.
	PrivateEndpoint *PrivateEndpoint_STATUSARM `json:"privateEndpoint,omitempty"`

	// PrivateLinkServiceConnectionState: Approval state of the private link connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState_STATUSARM `json:"privateLinkServiceConnectionState,omitempty"`

	// ProvisioningState: Provisioning state of the private endpoint connection.
	ProvisioningState *PrivateEndpointConnectionProvisioningState_STATUS `json:"provisioningState,omitempty"`
}

type Sku_STATUS_Family string

const Sku_STATUS_Family_A = Sku_STATUS_Family("A")

type Sku_STATUS_Name string

const (
	Sku_STATUS_Name_Premium  = Sku_STATUS_Name("premium")
	Sku_STATUS_Name_Standard = Sku_STATUS_Name("standard")
)

type VirtualNetworkRule_STATUSARM struct {
	// Id: Full resource id of a vnet subnet, such as
	// '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
	Id *string `json:"id,omitempty"`

	// IgnoreMissingVnetServiceEndpoint: Property to specify whether NRP will ignore the check if parent subnet has
	// serviceEndpoints configured.
	IgnoreMissingVnetServiceEndpoint *bool `json:"ignoreMissingVnetServiceEndpoint,omitempty"`
}

type Permissions_STATUS_Certificates string

const (
	Permissions_STATUS_Certificates_Backup         = Permissions_STATUS_Certificates("backup")
	Permissions_STATUS_Certificates_Create         = Permissions_STATUS_Certificates("create")
	Permissions_STATUS_Certificates_Delete         = Permissions_STATUS_Certificates("delete")
	Permissions_STATUS_Certificates_Deleteissuers  = Permissions_STATUS_Certificates("deleteissuers")
	Permissions_STATUS_Certificates_Get            = Permissions_STATUS_Certificates("get")
	Permissions_STATUS_Certificates_Getissuers     = Permissions_STATUS_Certificates("getissuers")
	Permissions_STATUS_Certificates_Import         = Permissions_STATUS_Certificates("import")
	Permissions_STATUS_Certificates_List           = Permissions_STATUS_Certificates("list")
	Permissions_STATUS_Certificates_Listissuers    = Permissions_STATUS_Certificates("listissuers")
	Permissions_STATUS_Certificates_Managecontacts = Permissions_STATUS_Certificates("managecontacts")
	Permissions_STATUS_Certificates_Manageissuers  = Permissions_STATUS_Certificates("manageissuers")
	Permissions_STATUS_Certificates_Purge          = Permissions_STATUS_Certificates("purge")
	Permissions_STATUS_Certificates_Recover        = Permissions_STATUS_Certificates("recover")
	Permissions_STATUS_Certificates_Restore        = Permissions_STATUS_Certificates("restore")
	Permissions_STATUS_Certificates_Setissuers     = Permissions_STATUS_Certificates("setissuers")
	Permissions_STATUS_Certificates_Update         = Permissions_STATUS_Certificates("update")
)

type Permissions_STATUS_Keys string

const (
	Permissions_STATUS_Keys_Backup    = Permissions_STATUS_Keys("backup")
	Permissions_STATUS_Keys_Create    = Permissions_STATUS_Keys("create")
	Permissions_STATUS_Keys_Decrypt   = Permissions_STATUS_Keys("decrypt")
	Permissions_STATUS_Keys_Delete    = Permissions_STATUS_Keys("delete")
	Permissions_STATUS_Keys_Encrypt   = Permissions_STATUS_Keys("encrypt")
	Permissions_STATUS_Keys_Get       = Permissions_STATUS_Keys("get")
	Permissions_STATUS_Keys_Import    = Permissions_STATUS_Keys("import")
	Permissions_STATUS_Keys_List      = Permissions_STATUS_Keys("list")
	Permissions_STATUS_Keys_Purge     = Permissions_STATUS_Keys("purge")
	Permissions_STATUS_Keys_Recover   = Permissions_STATUS_Keys("recover")
	Permissions_STATUS_Keys_Release   = Permissions_STATUS_Keys("release")
	Permissions_STATUS_Keys_Restore   = Permissions_STATUS_Keys("restore")
	Permissions_STATUS_Keys_Sign      = Permissions_STATUS_Keys("sign")
	Permissions_STATUS_Keys_UnwrapKey = Permissions_STATUS_Keys("unwrapKey")
	Permissions_STATUS_Keys_Update    = Permissions_STATUS_Keys("update")
	Permissions_STATUS_Keys_Verify    = Permissions_STATUS_Keys("verify")
	Permissions_STATUS_Keys_WrapKey   = Permissions_STATUS_Keys("wrapKey")
)

type Permissions_STATUS_Secrets string

const (
	Permissions_STATUS_Secrets_Backup  = Permissions_STATUS_Secrets("backup")
	Permissions_STATUS_Secrets_Delete  = Permissions_STATUS_Secrets("delete")
	Permissions_STATUS_Secrets_Get     = Permissions_STATUS_Secrets("get")
	Permissions_STATUS_Secrets_List    = Permissions_STATUS_Secrets("list")
	Permissions_STATUS_Secrets_Purge   = Permissions_STATUS_Secrets("purge")
	Permissions_STATUS_Secrets_Recover = Permissions_STATUS_Secrets("recover")
	Permissions_STATUS_Secrets_Restore = Permissions_STATUS_Secrets("restore")
	Permissions_STATUS_Secrets_Set     = Permissions_STATUS_Secrets("set")
)

type Permissions_STATUS_Storage string

const (
	Permissions_STATUS_Storage_Backup        = Permissions_STATUS_Storage("backup")
	Permissions_STATUS_Storage_Delete        = Permissions_STATUS_Storage("delete")
	Permissions_STATUS_Storage_Deletesas     = Permissions_STATUS_Storage("deletesas")
	Permissions_STATUS_Storage_Get           = Permissions_STATUS_Storage("get")
	Permissions_STATUS_Storage_Getsas        = Permissions_STATUS_Storage("getsas")
	Permissions_STATUS_Storage_List          = Permissions_STATUS_Storage("list")
	Permissions_STATUS_Storage_Listsas       = Permissions_STATUS_Storage("listsas")
	Permissions_STATUS_Storage_Purge         = Permissions_STATUS_Storage("purge")
	Permissions_STATUS_Storage_Recover       = Permissions_STATUS_Storage("recover")
	Permissions_STATUS_Storage_Regeneratekey = Permissions_STATUS_Storage("regeneratekey")
	Permissions_STATUS_Storage_Restore       = Permissions_STATUS_Storage("restore")
	Permissions_STATUS_Storage_Set           = Permissions_STATUS_Storage("set")
	Permissions_STATUS_Storage_Setsas        = Permissions_STATUS_Storage("setsas")
	Permissions_STATUS_Storage_Update        = Permissions_STATUS_Storage("update")
)

type PrivateEndpoint_STATUSARM struct {
	// Id: Full identifier of the private endpoint resource.
	Id *string `json:"id,omitempty"`
}

type PrivateLinkServiceConnectionState_STATUSARM struct {
	// ActionsRequired: A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *PrivateLinkServiceConnectionState_STATUS_ActionsRequired `json:"actionsRequired,omitempty"`

	// Description: The reason for approval or rejection.
	Description *string `json:"description,omitempty"`

	// Status: Indicates whether the connection has been approved, rejected or removed by the key vault owner.
	Status *PrivateEndpointServiceConnectionStatus_STATUS `json:"status,omitempty"`
}
