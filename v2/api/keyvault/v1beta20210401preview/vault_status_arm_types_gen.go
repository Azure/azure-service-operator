// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210401preview

type Vault_STATUSARM struct {
	// Id: Fully qualified identifier of the key vault resource.
	Id *string `json:"id,omitempty"`

	// Location: Azure location of the key vault resource.
	Location *string `json:"location,omitempty"`

	// Name: Name of the key vault resource.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the vault
	Properties *VaultProperties_STATUSARM `json:"properties,omitempty"`

	// SystemData: System metadata for the key vault.
	SystemData *SystemData_STATUSARM `json:"systemData,omitempty"`

	// Tags: Tags assigned to the key vault resource.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type of the key vault resource.
	Type *string `json:"type,omitempty"`
}

type SystemData_STATUSARM struct {
	// CreatedAt: The timestamp of the key vault resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the key vault resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the key vault resource.
	CreatedByType *IdentityType_STATUS `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of the key vault resource last modification (UTC).
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the key vault resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the key vault resource.
	LastModifiedByType *IdentityType_STATUS `json:"lastModifiedByType,omitempty"`
}

type VaultProperties_STATUSARM struct {
	// AccessPolicies: An array of 0 to 1024 identities that have access to the key vault. All identities in the array must use
	// the same tenant ID as the key vault's tenant ID. When `createMode` is set to `recover`, access policies are not
	// required. Otherwise, access policies are required.
	AccessPolicies []AccessPolicyEntry_STATUSARM `json:"accessPolicies,omitempty"`

	// CreateMode: The vault's create mode to indicate whether the vault need to be recovered or not.
	CreateMode *VaultPropertiesSTATUSCreateMode `json:"createMode,omitempty"`

	// EnablePurgeProtection: Property specifying whether protection against purge is enabled for this vault. Setting this
	// property to true activates protection against purge for this vault and its content - only the Key Vault service may
	// initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this
	// functionality is irreversible - that is, the property does not accept false as its value.
	EnablePurgeProtection *bool `json:"enablePurgeProtection,omitempty"`

	// EnableRbacAuthorization: Property that controls how data actions are authorized. When true, the key vault will use Role
	// Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties
	// will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy
	// stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value
	// of false. Note that management actions are always authorized with RBAC.
	EnableRbacAuthorization *bool `json:"enableRbacAuthorization,omitempty"`

	// EnableSoftDelete: Property to specify whether the 'soft delete' functionality is enabled for this key vault. If it's not
	// set to any value(true or false) when creating new key vault, it will be set to true by default. Once set to true, it
	// cannot be reverted to false.
	EnableSoftDelete *bool `json:"enableSoftDelete,omitempty"`

	// EnabledForDeployment: Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored
	// as secrets from the key vault.
	EnabledForDeployment *bool `json:"enabledForDeployment,omitempty"`

	// EnabledForDiskEncryption: Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the
	// vault and unwrap keys.
	EnabledForDiskEncryption *bool `json:"enabledForDiskEncryption,omitempty"`

	// EnabledForTemplateDeployment: Property to specify whether Azure Resource Manager is permitted to retrieve secrets from
	// the key vault.
	EnabledForTemplateDeployment *bool `json:"enabledForTemplateDeployment,omitempty"`

	// HsmPoolResourceId: The resource id of HSM Pool.
	HsmPoolResourceId *string `json:"hsmPoolResourceId,omitempty"`

	// NetworkAcls: Rules governing the accessibility of the key vault from specific network locations.
	NetworkAcls *NetworkRuleSet_STATUSARM `json:"networkAcls,omitempty"`

	// PrivateEndpointConnections: List of private endpoint connections associated with the key vault.
	PrivateEndpointConnections []PrivateEndpointConnectionItem_STATUSARM `json:"privateEndpointConnections,omitempty"`

	// ProvisioningState: Provisioning state of the vault.
	ProvisioningState *VaultPropertiesSTATUSProvisioningState `json:"provisioningState,omitempty"`

	// Sku: SKU details
	Sku *Sku_STATUSARM `json:"sku,omitempty"`

	// SoftDeleteRetentionInDays: softDelete data retention days. It accepts >=7 and <=90.
	SoftDeleteRetentionInDays *int `json:"softDeleteRetentionInDays,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty"`

	// VaultUri: The URI of the vault for performing operations on keys and secrets.
	VaultUri *string `json:"vaultUri,omitempty"`
}

type AccessPolicyEntry_STATUSARM struct {
	// ApplicationId:  Application ID of the client making request on behalf of a principal
	ApplicationId *string `json:"applicationId,omitempty"`

	// ObjectId: The object ID of a user, service principal or security group in the Azure Active Directory tenant for the
	// vault. The object ID must be unique for the list of access policies.
	ObjectId *string `json:"objectId,omitempty"`

	// Permissions: Permissions the identity has for keys, secrets and certificates.
	Permissions *Permissions_STATUSARM `json:"permissions,omitempty"`

	// TenantId: The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `json:"tenantId,omitempty"`
}

type IdentityType_STATUS string

const (
	IdentityType_STATUS_Application     = IdentityType_STATUS("Application")
	IdentityType_STATUS_Key             = IdentityType_STATUS("Key")
	IdentityType_STATUS_ManagedIdentity = IdentityType_STATUS("ManagedIdentity")
	IdentityType_STATUS_User            = IdentityType_STATUS("User")
)

type NetworkRuleSet_STATUSARM struct {
	// Bypass: Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the
	// default is 'AzureServices'.
	Bypass *NetworkRuleSetSTATUSBypass `json:"bypass,omitempty"`

	// DefaultAction: The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after
	// the bypass property has been evaluated.
	DefaultAction *NetworkRuleSetSTATUSDefaultAction `json:"defaultAction,omitempty"`

	// IpRules: The list of IP address rules.
	IpRules []IPRule_STATUSARM `json:"ipRules,omitempty"`

	// VirtualNetworkRules: The list of virtual network rules.
	VirtualNetworkRules []VirtualNetworkRule_STATUSARM `json:"virtualNetworkRules,omitempty"`
}

type PrivateEndpointConnectionItem_STATUSARM struct {
	// Etag: Modified whenever there is a change in the state of private endpoint connection.
	Etag *string `json:"etag,omitempty"`

	// Id: Id of private endpoint connection.
	Id *string `json:"id,omitempty"`

	// Properties: Private endpoint connection properties.
	Properties *PrivateEndpointConnectionProperties_STATUSARM `json:"properties,omitempty"`
}

type Sku_STATUSARM struct {
	// Family: SKU family name
	Family *SkuSTATUSFamily `json:"family,omitempty"`

	// Name: SKU name to specify whether the key vault is a standard vault or a premium vault.
	Name *SkuSTATUSName `json:"name,omitempty"`
}

type VaultPropertiesSTATUSCreateMode string

const (
	VaultPropertiesSTATUSCreateMode_Default = VaultPropertiesSTATUSCreateMode("default")
	VaultPropertiesSTATUSCreateMode_Recover = VaultPropertiesSTATUSCreateMode("recover")
)

type VaultPropertiesSTATUSProvisioningState string

const (
	VaultPropertiesSTATUSProvisioningState_RegisteringDns = VaultPropertiesSTATUSProvisioningState("RegisteringDns")
	VaultPropertiesSTATUSProvisioningState_Succeeded      = VaultPropertiesSTATUSProvisioningState("Succeeded")
)

type IPRule_STATUSARM struct {
	// Value: An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all
	// addresses that start with 124.56.78).
	Value *string `json:"value,omitempty"`
}

type NetworkRuleSetSTATUSBypass string

const (
	NetworkRuleSetSTATUSBypass_AzureServices = NetworkRuleSetSTATUSBypass("AzureServices")
	NetworkRuleSetSTATUSBypass_None          = NetworkRuleSetSTATUSBypass("None")
)

type NetworkRuleSetSTATUSDefaultAction string

const (
	NetworkRuleSetSTATUSDefaultAction_Allow = NetworkRuleSetSTATUSDefaultAction("Allow")
	NetworkRuleSetSTATUSDefaultAction_Deny  = NetworkRuleSetSTATUSDefaultAction("Deny")
)

type Permissions_STATUSARM struct {
	// Certificates: Permissions to certificates
	Certificates []PermissionsSTATUSCertificates `json:"certificates,omitempty"`

	// Keys: Permissions to keys
	Keys []PermissionsSTATUSKeys `json:"keys,omitempty"`

	// Secrets: Permissions to secrets
	Secrets []PermissionsSTATUSSecrets `json:"secrets,omitempty"`

	// Storage: Permissions to storage accounts
	Storage []PermissionsSTATUSStorage `json:"storage,omitempty"`
}

type PrivateEndpointConnectionProperties_STATUSARM struct {
	// PrivateEndpoint: Properties of the private endpoint object.
	PrivateEndpoint *PrivateEndpoint_STATUSARM `json:"privateEndpoint,omitempty"`

	// PrivateLinkServiceConnectionState: Approval state of the private link connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState_STATUSARM `json:"privateLinkServiceConnectionState,omitempty"`

	// ProvisioningState: Provisioning state of the private endpoint connection.
	ProvisioningState *PrivateEndpointConnectionProvisioningState_STATUS `json:"provisioningState,omitempty"`
}

type SkuSTATUSFamily string

const SkuSTATUSFamily_A = SkuSTATUSFamily("A")

type SkuSTATUSName string

const (
	SkuSTATUSName_Premium  = SkuSTATUSName("premium")
	SkuSTATUSName_Standard = SkuSTATUSName("standard")
)

type VirtualNetworkRule_STATUSARM struct {
	// Id: Full resource id of a vnet subnet, such as
	// '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
	Id *string `json:"id,omitempty"`

	// IgnoreMissingVnetServiceEndpoint: Property to specify whether NRP will ignore the check if parent subnet has
	// serviceEndpoints configured.
	IgnoreMissingVnetServiceEndpoint *bool `json:"ignoreMissingVnetServiceEndpoint,omitempty"`
}

type PermissionsSTATUSCertificates string

const (
	PermissionsSTATUSCertificates_Backup         = PermissionsSTATUSCertificates("backup")
	PermissionsSTATUSCertificates_Create         = PermissionsSTATUSCertificates("create")
	PermissionsSTATUSCertificates_Delete         = PermissionsSTATUSCertificates("delete")
	PermissionsSTATUSCertificates_Deleteissuers  = PermissionsSTATUSCertificates("deleteissuers")
	PermissionsSTATUSCertificates_Get            = PermissionsSTATUSCertificates("get")
	PermissionsSTATUSCertificates_Getissuers     = PermissionsSTATUSCertificates("getissuers")
	PermissionsSTATUSCertificates_Import         = PermissionsSTATUSCertificates("import")
	PermissionsSTATUSCertificates_List           = PermissionsSTATUSCertificates("list")
	PermissionsSTATUSCertificates_Listissuers    = PermissionsSTATUSCertificates("listissuers")
	PermissionsSTATUSCertificates_Managecontacts = PermissionsSTATUSCertificates("managecontacts")
	PermissionsSTATUSCertificates_Manageissuers  = PermissionsSTATUSCertificates("manageissuers")
	PermissionsSTATUSCertificates_Purge          = PermissionsSTATUSCertificates("purge")
	PermissionsSTATUSCertificates_Recover        = PermissionsSTATUSCertificates("recover")
	PermissionsSTATUSCertificates_Restore        = PermissionsSTATUSCertificates("restore")
	PermissionsSTATUSCertificates_Setissuers     = PermissionsSTATUSCertificates("setissuers")
	PermissionsSTATUSCertificates_Update         = PermissionsSTATUSCertificates("update")
)

type PermissionsSTATUSKeys string

const (
	PermissionsSTATUSKeys_Backup    = PermissionsSTATUSKeys("backup")
	PermissionsSTATUSKeys_Create    = PermissionsSTATUSKeys("create")
	PermissionsSTATUSKeys_Decrypt   = PermissionsSTATUSKeys("decrypt")
	PermissionsSTATUSKeys_Delete    = PermissionsSTATUSKeys("delete")
	PermissionsSTATUSKeys_Encrypt   = PermissionsSTATUSKeys("encrypt")
	PermissionsSTATUSKeys_Get       = PermissionsSTATUSKeys("get")
	PermissionsSTATUSKeys_Import    = PermissionsSTATUSKeys("import")
	PermissionsSTATUSKeys_List      = PermissionsSTATUSKeys("list")
	PermissionsSTATUSKeys_Purge     = PermissionsSTATUSKeys("purge")
	PermissionsSTATUSKeys_Recover   = PermissionsSTATUSKeys("recover")
	PermissionsSTATUSKeys_Release   = PermissionsSTATUSKeys("release")
	PermissionsSTATUSKeys_Restore   = PermissionsSTATUSKeys("restore")
	PermissionsSTATUSKeys_Sign      = PermissionsSTATUSKeys("sign")
	PermissionsSTATUSKeys_UnwrapKey = PermissionsSTATUSKeys("unwrapKey")
	PermissionsSTATUSKeys_Update    = PermissionsSTATUSKeys("update")
	PermissionsSTATUSKeys_Verify    = PermissionsSTATUSKeys("verify")
	PermissionsSTATUSKeys_WrapKey   = PermissionsSTATUSKeys("wrapKey")
)

type PermissionsSTATUSSecrets string

const (
	PermissionsSTATUSSecrets_Backup  = PermissionsSTATUSSecrets("backup")
	PermissionsSTATUSSecrets_Delete  = PermissionsSTATUSSecrets("delete")
	PermissionsSTATUSSecrets_Get     = PermissionsSTATUSSecrets("get")
	PermissionsSTATUSSecrets_List    = PermissionsSTATUSSecrets("list")
	PermissionsSTATUSSecrets_Purge   = PermissionsSTATUSSecrets("purge")
	PermissionsSTATUSSecrets_Recover = PermissionsSTATUSSecrets("recover")
	PermissionsSTATUSSecrets_Restore = PermissionsSTATUSSecrets("restore")
	PermissionsSTATUSSecrets_Set     = PermissionsSTATUSSecrets("set")
)

type PermissionsSTATUSStorage string

const (
	PermissionsSTATUSStorage_Backup        = PermissionsSTATUSStorage("backup")
	PermissionsSTATUSStorage_Delete        = PermissionsSTATUSStorage("delete")
	PermissionsSTATUSStorage_Deletesas     = PermissionsSTATUSStorage("deletesas")
	PermissionsSTATUSStorage_Get           = PermissionsSTATUSStorage("get")
	PermissionsSTATUSStorage_Getsas        = PermissionsSTATUSStorage("getsas")
	PermissionsSTATUSStorage_List          = PermissionsSTATUSStorage("list")
	PermissionsSTATUSStorage_Listsas       = PermissionsSTATUSStorage("listsas")
	PermissionsSTATUSStorage_Purge         = PermissionsSTATUSStorage("purge")
	PermissionsSTATUSStorage_Recover       = PermissionsSTATUSStorage("recover")
	PermissionsSTATUSStorage_Regeneratekey = PermissionsSTATUSStorage("regeneratekey")
	PermissionsSTATUSStorage_Restore       = PermissionsSTATUSStorage("restore")
	PermissionsSTATUSStorage_Set           = PermissionsSTATUSStorage("set")
	PermissionsSTATUSStorage_Setsas        = PermissionsSTATUSStorage("setsas")
	PermissionsSTATUSStorage_Update        = PermissionsSTATUSStorage("update")
)

type PrivateEndpoint_STATUSARM struct {
	// Id: Full identifier of the private endpoint resource.
	Id *string `json:"id,omitempty"`
}

type PrivateLinkServiceConnectionState_STATUSARM struct {
	// ActionsRequired: A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *PrivateLinkServiceConnectionStateSTATUSActionsRequired `json:"actionsRequired,omitempty"`

	// Description: The reason for approval or rejection.
	Description *string `json:"description,omitempty"`

	// Status: Indicates whether the connection has been approved, rejected or removed by the key vault owner.
	Status *PrivateEndpointServiceConnectionStatus_STATUS `json:"status,omitempty"`
}
