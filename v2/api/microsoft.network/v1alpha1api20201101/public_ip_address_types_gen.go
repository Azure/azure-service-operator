// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/hack/generated/pkg/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.network/v1alpha1api20201101storage"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources=publicipaddresses,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources={publicipaddresses/status,publicipaddresses/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/publicIPAddresses
type PublicIPAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicIPAddresses_Spec                                     `json:"spec,omitempty"`
	Status            PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &PublicIPAddress{}

// GetConditions returns the conditions of the resource
func (publicIPAddress *PublicIPAddress) GetConditions() conditions.Conditions {
	return publicIPAddress.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (publicIPAddress *PublicIPAddress) SetConditions(conditions conditions.Conditions) {
	publicIPAddress.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-network-azure-com-v1alpha1api20201101-publicipaddress,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=publicipaddresses,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.publicipaddresses.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &PublicIPAddress{}

// Default applies defaults to the PublicIPAddress resource
func (publicIPAddress *PublicIPAddress) Default() {
	publicIPAddress.defaultImpl()
	var temp interface{} = publicIPAddress
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (publicIPAddress *PublicIPAddress) defaultAzureName() {
	if publicIPAddress.Spec.AzureName == "" {
		publicIPAddress.Spec.AzureName = publicIPAddress.Name
	}
}

// defaultImpl applies the code generated defaults to the PublicIPAddress resource
func (publicIPAddress *PublicIPAddress) defaultImpl() { publicIPAddress.defaultAzureName() }

var _ genruntime.KubernetesResource = &PublicIPAddress{}

// AzureName returns the Azure name of the resource
func (publicIPAddress *PublicIPAddress) AzureName() string {
	return publicIPAddress.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (publicIPAddress *PublicIPAddress) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (publicIPAddress *PublicIPAddress) GetSpec() genruntime.ConvertibleSpec {
	return &publicIPAddress.Spec
}

// GetStatus returns the status of this resource
func (publicIPAddress *PublicIPAddress) GetStatus() genruntime.ConvertibleStatus {
	return &publicIPAddress.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/publicIPAddresses"
func (publicIPAddress *PublicIPAddress) GetType() string {
	return "Microsoft.Network/publicIPAddresses"
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (publicIPAddress *PublicIPAddress) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(publicIPAddress.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: publicIPAddress.Namespace, Name: publicIPAddress.Spec.Owner.Name}
}

// SetStatus sets the status of this resource
func (publicIPAddress *PublicIPAddress) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded); ok {
		publicIPAddress.Status = *st
		return nil
	}

	// Convert status to required version
	var st PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	publicIPAddress.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-network-azure-com-v1alpha1api20201101-publicipaddress,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=publicipaddresses,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.publicipaddresses.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &PublicIPAddress{}

// ValidateCreate validates the creation of the resource
func (publicIPAddress *PublicIPAddress) ValidateCreate() error {
	validations := publicIPAddress.createValidations()
	var temp interface{} = publicIPAddress
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (publicIPAddress *PublicIPAddress) ValidateDelete() error {
	validations := publicIPAddress.deleteValidations()
	var temp interface{} = publicIPAddress
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (publicIPAddress *PublicIPAddress) ValidateUpdate(old runtime.Object) error {
	validations := publicIPAddress.updateValidations()
	var temp interface{} = publicIPAddress
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (publicIPAddress *PublicIPAddress) createValidations() []func() error {
	return []func() error{publicIPAddress.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (publicIPAddress *PublicIPAddress) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (publicIPAddress *PublicIPAddress) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return publicIPAddress.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (publicIPAddress *PublicIPAddress) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&publicIPAddress.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromPublicIPAddress populates our PublicIPAddress from the provided source PublicIPAddress
func (publicIPAddress *PublicIPAddress) AssignPropertiesFromPublicIPAddress(source *v1alpha1api20201101storage.PublicIPAddress) error {

	// Spec
	var spec PublicIPAddresses_Spec
	err := spec.AssignPropertiesFromPublicIPAddressesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromPublicIPAddressesSpec()")
	}
	publicIPAddress.Spec = spec

	// Status
	var status PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
	err = status.AssignPropertiesFromPublicIPAddressStatusPublicIPAddressSubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromPublicIPAddressStatusPublicIPAddressSubResourceEmbedded()")
	}
	publicIPAddress.Status = status

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddress populates the provided destination PublicIPAddress from our PublicIPAddress
func (publicIPAddress *PublicIPAddress) AssignPropertiesToPublicIPAddress(destination *v1alpha1api20201101storage.PublicIPAddress) error {

	// Spec
	var spec v1alpha1api20201101storage.PublicIPAddresses_Spec
	err := publicIPAddress.Spec.AssignPropertiesToPublicIPAddressesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToPublicIPAddressesSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
	err = publicIPAddress.Status.AssignPropertiesToPublicIPAddressStatusPublicIPAddressSubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToPublicIPAddressStatusPublicIPAddressSubResourceEmbedded()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (publicIPAddress *PublicIPAddress) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: publicIPAddress.Spec.OriginalVersion(),
		Kind:    "PublicIPAddress",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/publicIPAddresses
type PublicIPAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicIPAddress `json:"items"`
}

//Generated from:
type PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DdosSettings: The DDoS protection custom policy associated with the public IP
	//address.
	DdosSettings *DdosSettings_Status `json:"ddosSettings,omitempty"`

	//DnsSettings: The FQDN of the DNS record associated with the public IP address.
	DnsSettings *PublicIPAddressDnsSettings_Status `json:"dnsSettings,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//ExtendedLocation: The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//IdleTimeoutInMinutes: The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `json:"idleTimeoutInMinutes,omitempty"`

	//IpAddress: The IP address associated with the public IP address resource.
	IpAddress *string `json:"ipAddress,omitempty"`

	//IpConfiguration: The IP configuration associated with the public IP address.
	IpConfiguration *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded `json:"ipConfiguration,omitempty"`

	//IpTags: The list of tags associated with the public IP address.
	IpTags []IpTag_Status `json:"ipTags,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//MigrationPhase: Migration phase of Public IP Address.
	MigrationPhase *PublicIPAddressPropertiesFormatStatusMigrationPhase `json:"migrationPhase,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//NatGateway: The NatGateway for the Public IP address.
	NatGateway *NatGateway_Status_PublicIPAddress_SubResourceEmbedded `json:"natGateway,omitempty"`

	//ProvisioningState: The provisioning state of the public IP address resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//PublicIPAddressVersion: The public IP address version.
	PublicIPAddressVersion *IPVersion_Status `json:"publicIPAddressVersion,omitempty"`

	//PublicIPAllocationMethod: The public IP address allocation method.
	PublicIPAllocationMethod *IPAllocationMethod_Status `json:"publicIPAllocationMethod,omitempty"`

	//PublicIPPrefix: The Public IP Prefix this Public IP Address should be allocated
	//from.
	PublicIPPrefix *SubResource_Status `json:"publicIPPrefix,omitempty"`

	//ResourceGuid: The resource GUID property of the public IP address resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//Sku: The public IP address SKU.
	Sku *PublicIPAddressSku_Status `json:"sku,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`

	//Zones: A list of availability zones denoting the IP allocated for the resource
	//needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ConvertibleStatus = &PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}

// ConvertStatusFrom populates our PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded from the provided source
func (publicIPAddressStatusPublicIPAddressSubResourceEmbedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return publicIPAddressStatusPublicIPAddressSubResourceEmbedded.AssignPropertiesFromPublicIPAddressStatusPublicIPAddressSubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = publicIPAddressStatusPublicIPAddressSubResourceEmbedded.AssignPropertiesFromPublicIPAddressStatusPublicIPAddressSubResourceEmbedded(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
func (publicIPAddressStatusPublicIPAddressSubResourceEmbedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return publicIPAddressStatusPublicIPAddressSubResourceEmbedded.AssignPropertiesToPublicIPAddressStatusPublicIPAddressSubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}
	err := publicIPAddressStatusPublicIPAddressSubResourceEmbedded.AssignPropertiesToPublicIPAddressStatusPublicIPAddressSubResourceEmbedded(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (publicIPAddressStatusPublicIPAddressSubResourceEmbedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (publicIPAddressStatusPublicIPAddressSubResourceEmbedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddress_Status_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DdosSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DdosSettings != nil {
			var ddosSettings1 DdosSettings_Status
			err := ddosSettings1.PopulateFromARM(owner, *typedInput.Properties.DdosSettings)
			if err != nil {
				return err
			}
			ddosSettings := ddosSettings1
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DdosSettings = &ddosSettings
		}
	}

	// Set property ‘DnsSettings’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DnsSettings != nil {
			var dnsSettings1 PublicIPAddressDnsSettings_Status
			err := dnsSettings1.PopulateFromARM(owner, *typedInput.Properties.DnsSettings)
			if err != nil {
				return err
			}
			dnsSettings := dnsSettings1
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DnsSettings = &dnsSettings
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Etag = &etag
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Id = &id
	}

	// Set property ‘IdleTimeoutInMinutes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IdleTimeoutInMinutes != nil {
			idleTimeoutInMinutes := *typedInput.Properties.IdleTimeoutInMinutes
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IdleTimeoutInMinutes = &idleTimeoutInMinutes
		}
	}

	// Set property ‘IpAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IpAddress != nil {
			ipAddress := *typedInput.Properties.IpAddress
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpAddress = &ipAddress
		}
	}

	// Set property ‘IpConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IpConfiguration != nil {
			var ipConfiguration1 IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
			err := ipConfiguration1.PopulateFromARM(owner, *typedInput.Properties.IpConfiguration)
			if err != nil {
				return err
			}
			ipConfiguration := ipConfiguration1
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpConfiguration = &ipConfiguration
		}
	}

	// Set property ‘IpTags’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpTags {
			var item1 IpTag_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpTags = append(publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpTags, item1)
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Location = &location
	}

	// Set property ‘MigrationPhase’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.MigrationPhase != nil {
			migrationPhase := *typedInput.Properties.MigrationPhase
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.MigrationPhase = &migrationPhase
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Name = &name
	}

	// Set property ‘NatGateway’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NatGateway != nil {
			var natGateway1 NatGateway_Status_PublicIPAddress_SubResourceEmbedded
			err := natGateway1.PopulateFromARM(owner, *typedInput.Properties.NatGateway)
			if err != nil {
				return err
			}
			natGateway := natGateway1
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.NatGateway = &natGateway
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicIPAddressVersion’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAddressVersion != nil {
			publicIPAddressVersion := *typedInput.Properties.PublicIPAddressVersion
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAddressVersion = &publicIPAddressVersion
		}
	}

	// Set property ‘PublicIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPAllocationMethod != nil {
			publicIPAllocationMethod := *typedInput.Properties.PublicIPAllocationMethod
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAllocationMethod = &publicIPAllocationMethod
		}
	}

	// Set property ‘PublicIPPrefix’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicIPPrefix != nil {
			var publicIPPrefix1 SubResource_Status
			err := publicIPPrefix1.PopulateFromARM(owner, *typedInput.Properties.PublicIPPrefix)
			if err != nil {
				return err
			}
			publicIPPrefix := publicIPPrefix1
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPPrefix = &publicIPPrefix
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Type = &typeVar
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Zones = append(publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressStatusPublicIPAddressSubResourceEmbedded populates our PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded from the provided source PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
func (publicIPAddressStatusPublicIPAddressSubResourceEmbedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromPublicIPAddressStatusPublicIPAddressSubResourceEmbedded(source *v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) error {

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Conditions = conditionList

	// DdosSettings
	if source.DdosSettings != nil {
		var ddosSetting DdosSettings_Status
		err := ddosSetting.AssignPropertiesFromDdosSettingsStatus(source.DdosSettings)
		if err != nil {
			return errors.Wrap(err, "populating DdosSettings from DdosSettings, calling AssignPropertiesFromDdosSettingsStatus()")
		}
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DdosSettings = &ddosSetting
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DdosSettings = nil
	}

	// DnsSettings
	if source.DnsSettings != nil {
		var dnsSetting PublicIPAddressDnsSettings_Status
		err := dnsSetting.AssignPropertiesFromPublicIPAddressDnsSettingsStatus(source.DnsSettings)
		if err != nil {
			return errors.Wrap(err, "populating DnsSettings from DnsSettings, calling AssignPropertiesFromPublicIPAddressDnsSettingsStatus()")
		}
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DnsSettings = &dnsSetting
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DnsSettings = nil
	}

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Etag = &etag
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Etag = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesFromExtendedLocationStatus()")
		}
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ExtendedLocation = &extendedLocation
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ExtendedLocation = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Id = &id
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Id = nil
	}

	// IdleTimeoutInMinutes
	if source.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinute := *source.IdleTimeoutInMinutes
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IdleTimeoutInMinutes = &idleTimeoutInMinute
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IdleTimeoutInMinutes = nil
	}

	// IpAddress
	if source.IpAddress != nil {
		ipAddress := *source.IpAddress
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpAddress = &ipAddress
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpAddress = nil
	}

	// IpConfiguration
	if source.IpConfiguration != nil {
		var ipConfiguration IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
		err := ipConfiguration.AssignPropertiesFromIPConfigurationStatusPublicIPAddressSubResourceEmbedded(source.IpConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating IpConfiguration from IpConfiguration, calling AssignPropertiesFromIPConfigurationStatusPublicIPAddressSubResourceEmbedded()")
		}
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpConfiguration = &ipConfiguration
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpConfiguration = nil
	}

	// IpTags
	ipTagList := make([]IpTag_Status, len(source.IpTags))
	for ipTagIndex, ipTagItem := range source.IpTags {
		// Shadow the loop variable to avoid aliasing
		ipTagItem := ipTagItem
		var ipTag IpTag_Status
		err := ipTag.AssignPropertiesFromIpTagStatus(&ipTagItem)
		if err != nil {
			return errors.Wrap(err, "populating IpTags from IpTags, calling AssignPropertiesFromIpTagStatus()")
		}
		ipTagList[ipTagIndex] = ipTag
	}
	publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpTags = ipTagList

	// Location
	if source.Location != nil {
		location := *source.Location
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Location = &location
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Location = nil
	}

	// MigrationPhase
	if source.MigrationPhase != nil {
		migrationPhase := PublicIPAddressPropertiesFormatStatusMigrationPhase(*source.MigrationPhase)
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.MigrationPhase = &migrationPhase
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.MigrationPhase = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Name = &name
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Name = nil
	}

	// NatGateway
	if source.NatGateway != nil {
		var natGateway NatGateway_Status_PublicIPAddress_SubResourceEmbedded
		err := natGateway.AssignPropertiesFromNatGatewayStatusPublicIPAddressSubResourceEmbedded(source.NatGateway)
		if err != nil {
			return errors.Wrap(err, "populating NatGateway from NatGateway, calling AssignPropertiesFromNatGatewayStatusPublicIPAddressSubResourceEmbedded()")
		}
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.NatGateway = &natGateway
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.NatGateway = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ProvisioningState = &provisioningState
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ProvisioningState = nil
	}

	// PublicIPAddressVersion
	if source.PublicIPAddressVersion != nil {
		publicIPAddressVersion := IPVersion_Status(*source.PublicIPAddressVersion)
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	if source.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := IPAllocationMethod_Status(*source.PublicIPAllocationMethod)
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAllocationMethod = &publicIPAllocationMethod
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAllocationMethod = nil
	}

	// PublicIPPrefix
	if source.PublicIPPrefix != nil {
		var publicIPPrefix SubResource_Status
		err := publicIPPrefix.AssignPropertiesFromSubResourceStatus(source.PublicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "populating PublicIPPrefix from PublicIPPrefix, calling AssignPropertiesFromSubResourceStatus()")
		}
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPPrefix = &publicIPPrefix
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPPrefix = nil
	}

	// ResourceGuid
	if source.ResourceGuid != nil {
		resourceGuid := *source.ResourceGuid
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ResourceGuid = &resourceGuid
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ResourceGuid = nil
	}

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku_Status
		err := sku.AssignPropertiesFromPublicIPAddressSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromPublicIPAddressSkuStatus()")
		}
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Sku = &sku
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Sku = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Tags = tagMap

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Type = &typeVar
	} else {
		publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Type = nil
	}

	// Zones
	zoneList := make([]string, len(source.Zones))
	for zoneIndex, zoneItem := range source.Zones {
		// Shadow the loop variable to avoid aliasing
		zoneItem := zoneItem
		zoneList[zoneIndex] = zoneItem
	}
	publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Zones = zoneList

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressStatusPublicIPAddressSubResourceEmbedded populates the provided destination PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded from our PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded
func (publicIPAddressStatusPublicIPAddressSubResourceEmbedded *PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToPublicIPAddressStatusPublicIPAddressSubResourceEmbedded(destination *v1alpha1api20201101storage.PublicIPAddress_Status_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	conditionList := make([]conditions.Condition, len(publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Conditions))
	for conditionIndex, conditionItem := range publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// DdosSettings
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DdosSettings != nil {
		var ddosSetting v1alpha1api20201101storage.DdosSettings_Status
		err := (*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DdosSettings).AssignPropertiesToDdosSettingsStatus(&ddosSetting)
		if err != nil {
			return errors.Wrap(err, "populating DdosSettings from DdosSettings, calling AssignPropertiesToDdosSettingsStatus()")
		}
		destination.DdosSettings = &ddosSetting
	} else {
		destination.DdosSettings = nil
	}

	// DnsSettings
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DnsSettings != nil {
		var dnsSetting v1alpha1api20201101storage.PublicIPAddressDnsSettings_Status
		err := (*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.DnsSettings).AssignPropertiesToPublicIPAddressDnsSettingsStatus(&dnsSetting)
		if err != nil {
			return errors.Wrap(err, "populating DnsSettings from DnsSettings, calling AssignPropertiesToPublicIPAddressDnsSettingsStatus()")
		}
		destination.DnsSettings = &dnsSetting
	} else {
		destination.DnsSettings = nil
	}

	// Etag
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Etag != nil {
		etag := *publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// ExtendedLocation
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Status
		err := (*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ExtendedLocation).AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesToExtendedLocationStatus()")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Id != nil {
		id := *publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// IdleTimeoutInMinutes
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinute := *publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IdleTimeoutInMinutes
		destination.IdleTimeoutInMinutes = &idleTimeoutInMinute
	} else {
		destination.IdleTimeoutInMinutes = nil
	}

	// IpAddress
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpAddress != nil {
		ipAddress := *publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpAddress
		destination.IpAddress = &ipAddress
	} else {
		destination.IpAddress = nil
	}

	// IpConfiguration
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpConfiguration != nil {
		var ipConfiguration v1alpha1api20201101storage.IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
		err := (*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpConfiguration).AssignPropertiesToIPConfigurationStatusPublicIPAddressSubResourceEmbedded(&ipConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating IpConfiguration from IpConfiguration, calling AssignPropertiesToIPConfigurationStatusPublicIPAddressSubResourceEmbedded()")
		}
		destination.IpConfiguration = &ipConfiguration
	} else {
		destination.IpConfiguration = nil
	}

	// IpTags
	ipTagList := make([]v1alpha1api20201101storage.IpTag_Status, len(publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpTags))
	for ipTagIndex, ipTagItem := range publicIPAddressStatusPublicIPAddressSubResourceEmbedded.IpTags {
		// Shadow the loop variable to avoid aliasing
		ipTagItem := ipTagItem
		var ipTag v1alpha1api20201101storage.IpTag_Status
		err := ipTagItem.AssignPropertiesToIpTagStatus(&ipTag)
		if err != nil {
			return errors.Wrap(err, "populating IpTags from IpTags, calling AssignPropertiesToIpTagStatus()")
		}
		ipTagList[ipTagIndex] = ipTag
	}
	destination.IpTags = ipTagList

	// Location
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Location != nil {
		location := *publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// MigrationPhase
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.MigrationPhase != nil {
		migrationPhase := string(*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.MigrationPhase)
		destination.MigrationPhase = &migrationPhase
	} else {
		destination.MigrationPhase = nil
	}

	// Name
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Name != nil {
		name := *publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// NatGateway
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.NatGateway != nil {
		var natGateway v1alpha1api20201101storage.NatGateway_Status_PublicIPAddress_SubResourceEmbedded
		err := (*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.NatGateway).AssignPropertiesToNatGatewayStatusPublicIPAddressSubResourceEmbedded(&natGateway)
		if err != nil {
			return errors.Wrap(err, "populating NatGateway from NatGateway, calling AssignPropertiesToNatGatewayStatusPublicIPAddressSubResourceEmbedded()")
		}
		destination.NatGateway = &natGateway
	} else {
		destination.NatGateway = nil
	}

	// ProvisioningState
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ProvisioningState != nil {
		provisioningState := string(*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicIPAddressVersion
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAddressVersion != nil {
		publicIPAddressVersion := string(*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAddressVersion)
		destination.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		destination.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAllocationMethod != nil {
		publicIPAllocationMethod := string(*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPAllocationMethod)
		destination.PublicIPAllocationMethod = &publicIPAllocationMethod
	} else {
		destination.PublicIPAllocationMethod = nil
	}

	// PublicIPPrefix
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPPrefix != nil {
		var publicIPPrefix v1alpha1api20201101storage.SubResource_Status
		err := (*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.PublicIPPrefix).AssignPropertiesToSubResourceStatus(&publicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "populating PublicIPPrefix from PublicIPPrefix, calling AssignPropertiesToSubResourceStatus()")
		}
		destination.PublicIPPrefix = &publicIPPrefix
	} else {
		destination.PublicIPPrefix = nil
	}

	// ResourceGuid
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ResourceGuid != nil {
		resourceGuid := *publicIPAddressStatusPublicIPAddressSubResourceEmbedded.ResourceGuid
		destination.ResourceGuid = &resourceGuid
	} else {
		destination.ResourceGuid = nil
	}

	// Sku
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Sku != nil {
		var sku v1alpha1api20201101storage.PublicIPAddressSku_Status
		err := (*publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Sku).AssignPropertiesToPublicIPAddressSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToPublicIPAddressSkuStatus()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Type
	if publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Type != nil {
		typeVar := *publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Zones
	zoneList := make([]string, len(publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Zones))
	for zoneIndex, zoneItem := range publicIPAddressStatusPublicIPAddressSubResourceEmbedded.Zones {
		// Shadow the loop variable to avoid aliasing
		zoneItem := zoneItem
		zoneList[zoneIndex] = zoneItem
	}
	destination.Zones = zoneList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type PublicIPAddresses_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DdosSettings: The DDoS protection custom policy associated with the public IP
	//address.
	DdosSettings *DdosSettings `json:"ddosSettings,omitempty"`

	//DnsSettings: The FQDN of the DNS record associated with the public IP address.
	DnsSettings *PublicIPAddressDnsSettings `json:"dnsSettings,omitempty"`

	//ExtendedLocation: The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	//IdleTimeoutInMinutes: The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `json:"idleTimeoutInMinutes,omitempty"`

	//IpAddress: The IP address associated with the public IP address resource.
	IpAddress *string `json:"ipAddress,omitempty"`

	//IpTags: The list of tags associated with the public IP address.
	IpTags []IpTag `json:"ipTags,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PublicIPAddressVersion: The public IP address version.
	PublicIPAddressVersion *PublicIPAddressPropertiesFormatPublicIPAddressVersion `json:"publicIPAddressVersion,omitempty"`

	// +kubebuilder:validation:Required
	//PublicIPAllocationMethod: The public IP address allocation method.
	PublicIPAllocationMethod PublicIPAddressPropertiesFormatPublicIPAllocationMethod `json:"publicIPAllocationMethod"`

	//PublicIPPrefix: The Public IP Prefix this Public IP Address should be allocated
	//from.
	PublicIPPrefix *SubResource `json:"publicIPPrefix,omitempty"`

	//Sku: The public IP address SKU.
	Sku *PublicIPAddressSku `json:"sku,omitempty"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	//Zones: A list of availability zones denoting the IP allocated for the resource
	//needs to come from.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddresses_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (publicIPAddressesSpec *PublicIPAddresses_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if publicIPAddressesSpec == nil {
		return nil, nil
	}
	var result PublicIPAddresses_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = PublicIPAddressesSpecAPIVersion20201101

	// Set property ‘ExtendedLocation’:
	if publicIPAddressesSpec.ExtendedLocation != nil {
		extendedLocationARM, err := (*publicIPAddressesSpec.ExtendedLocation).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		extendedLocation := extendedLocationARM.(ExtendedLocationARM)
		result.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Location’:
	result.Location = publicIPAddressesSpec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if publicIPAddressesSpec.DdosSettings != nil {
		ddosSettingsARM, err := (*publicIPAddressesSpec.DdosSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		ddosSettings := ddosSettingsARM.(DdosSettingsARM)
		result.Properties.DdosSettings = &ddosSettings
	}
	if publicIPAddressesSpec.DnsSettings != nil {
		dnsSettingsARM, err := (*publicIPAddressesSpec.DnsSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		dnsSettings := dnsSettingsARM.(PublicIPAddressDnsSettingsARM)
		result.Properties.DnsSettings = &dnsSettings
	}
	if publicIPAddressesSpec.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinutes := *publicIPAddressesSpec.IdleTimeoutInMinutes
		result.Properties.IdleTimeoutInMinutes = &idleTimeoutInMinutes
	}
	if publicIPAddressesSpec.IpAddress != nil {
		ipAddress := *publicIPAddressesSpec.IpAddress
		result.Properties.IpAddress = &ipAddress
	}
	for _, item := range publicIPAddressesSpec.IpTags {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpTags = append(result.Properties.IpTags, itemARM.(IpTagARM))
	}
	if publicIPAddressesSpec.PublicIPAddressVersion != nil {
		publicIPAddressVersion := *publicIPAddressesSpec.PublicIPAddressVersion
		result.Properties.PublicIPAddressVersion = &publicIPAddressVersion
	}
	result.Properties.PublicIPAllocationMethod = publicIPAddressesSpec.PublicIPAllocationMethod
	if publicIPAddressesSpec.PublicIPPrefix != nil {
		publicIPPrefixARM, err := (*publicIPAddressesSpec.PublicIPPrefix).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		publicIPPrefix := publicIPPrefixARM.(SubResourceARM)
		result.Properties.PublicIPPrefix = &publicIPPrefix
	}

	// Set property ‘Sku’:
	if publicIPAddressesSpec.Sku != nil {
		skuARM, err := (*publicIPAddressesSpec.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := skuARM.(PublicIPAddressSkuARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if publicIPAddressesSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range publicIPAddressesSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = PublicIPAddressesSpecTypeMicrosoftNetworkPublicIPAddresses

	// Set property ‘Zones’:
	for _, item := range publicIPAddressesSpec.Zones {
		result.Zones = append(result.Zones, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (publicIPAddressesSpec *PublicIPAddresses_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddresses_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (publicIPAddressesSpec *PublicIPAddresses_Spec) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddresses_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddresses_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	publicIPAddressesSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DdosSettings’:
	// copying flattened property:
	if typedInput.Properties.DdosSettings != nil {
		var ddosSettings1 DdosSettings
		err := ddosSettings1.PopulateFromARM(owner, *typedInput.Properties.DdosSettings)
		if err != nil {
			return err
		}
		ddosSettings := ddosSettings1
		publicIPAddressesSpec.DdosSettings = &ddosSettings
	}

	// Set property ‘DnsSettings’:
	// copying flattened property:
	if typedInput.Properties.DnsSettings != nil {
		var dnsSettings1 PublicIPAddressDnsSettings
		err := dnsSettings1.PopulateFromARM(owner, *typedInput.Properties.DnsSettings)
		if err != nil {
			return err
		}
		dnsSettings := dnsSettings1
		publicIPAddressesSpec.DnsSettings = &dnsSettings
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		publicIPAddressesSpec.ExtendedLocation = &extendedLocation
	}

	// Set property ‘IdleTimeoutInMinutes’:
	// copying flattened property:
	if typedInput.Properties.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinutes := *typedInput.Properties.IdleTimeoutInMinutes
		publicIPAddressesSpec.IdleTimeoutInMinutes = &idleTimeoutInMinutes
	}

	// Set property ‘IpAddress’:
	// copying flattened property:
	if typedInput.Properties.IpAddress != nil {
		ipAddress := *typedInput.Properties.IpAddress
		publicIPAddressesSpec.IpAddress = &ipAddress
	}

	// Set property ‘IpTags’:
	// copying flattened property:
	for _, item := range typedInput.Properties.IpTags {
		var item1 IpTag
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		publicIPAddressesSpec.IpTags = append(publicIPAddressesSpec.IpTags, item1)
	}

	// Set property ‘Location’:
	publicIPAddressesSpec.Location = typedInput.Location

	// Set property ‘Owner’:
	publicIPAddressesSpec.Owner = owner

	// Set property ‘PublicIPAddressVersion’:
	// copying flattened property:
	if typedInput.Properties.PublicIPAddressVersion != nil {
		publicIPAddressVersion := *typedInput.Properties.PublicIPAddressVersion
		publicIPAddressesSpec.PublicIPAddressVersion = &publicIPAddressVersion
	}

	// Set property ‘PublicIPAllocationMethod’:
	// copying flattened property:
	publicIPAddressesSpec.PublicIPAllocationMethod = typedInput.Properties.PublicIPAllocationMethod

	// Set property ‘PublicIPPrefix’:
	// copying flattened property:
	if typedInput.Properties.PublicIPPrefix != nil {
		var publicIPPrefix1 SubResource
		err := publicIPPrefix1.PopulateFromARM(owner, *typedInput.Properties.PublicIPPrefix)
		if err != nil {
			return err
		}
		publicIPPrefix := publicIPPrefix1
		publicIPAddressesSpec.PublicIPPrefix = &publicIPPrefix
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 PublicIPAddressSku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		publicIPAddressesSpec.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		publicIPAddressesSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			publicIPAddressesSpec.Tags[key] = value
		}
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		publicIPAddressesSpec.Zones = append(publicIPAddressesSpec.Zones, item)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &PublicIPAddresses_Spec{}

// ConvertSpecFrom populates our PublicIPAddresses_Spec from the provided source
func (publicIPAddressesSpec *PublicIPAddresses_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.PublicIPAddresses_Spec)
	if ok {
		// Populate our instance from source
		return publicIPAddressesSpec.AssignPropertiesFromPublicIPAddressesSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.PublicIPAddresses_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = publicIPAddressesSpec.AssignPropertiesFromPublicIPAddressesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our PublicIPAddresses_Spec
func (publicIPAddressesSpec *PublicIPAddresses_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.PublicIPAddresses_Spec)
	if ok {
		// Populate destination from our instance
		return publicIPAddressesSpec.AssignPropertiesToPublicIPAddressesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.PublicIPAddresses_Spec{}
	err := publicIPAddressesSpec.AssignPropertiesToPublicIPAddressesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromPublicIPAddressesSpec populates our PublicIPAddresses_Spec from the provided source PublicIPAddresses_Spec
func (publicIPAddressesSpec *PublicIPAddresses_Spec) AssignPropertiesFromPublicIPAddressesSpec(source *v1alpha1api20201101storage.PublicIPAddresses_Spec) error {

	// AzureName
	publicIPAddressesSpec.AzureName = source.AzureName

	// DdosSettings
	if source.DdosSettings != nil {
		var ddosSetting DdosSettings
		err := ddosSetting.AssignPropertiesFromDdosSettings(source.DdosSettings)
		if err != nil {
			return errors.Wrap(err, "populating DdosSettings from DdosSettings, calling AssignPropertiesFromDdosSettings()")
		}
		publicIPAddressesSpec.DdosSettings = &ddosSetting
	} else {
		publicIPAddressesSpec.DdosSettings = nil
	}

	// DnsSettings
	if source.DnsSettings != nil {
		var dnsSetting PublicIPAddressDnsSettings
		err := dnsSetting.AssignPropertiesFromPublicIPAddressDnsSettings(source.DnsSettings)
		if err != nil {
			return errors.Wrap(err, "populating DnsSettings from DnsSettings, calling AssignPropertiesFromPublicIPAddressDnsSettings()")
		}
		publicIPAddressesSpec.DnsSettings = &dnsSetting
	} else {
		publicIPAddressesSpec.DnsSettings = nil
	}

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation
		err := extendedLocation.AssignPropertiesFromExtendedLocation(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesFromExtendedLocation()")
		}
		publicIPAddressesSpec.ExtendedLocation = &extendedLocation
	} else {
		publicIPAddressesSpec.ExtendedLocation = nil
	}

	// IdleTimeoutInMinutes
	if source.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinute := *source.IdleTimeoutInMinutes
		publicIPAddressesSpec.IdleTimeoutInMinutes = &idleTimeoutInMinute
	} else {
		publicIPAddressesSpec.IdleTimeoutInMinutes = nil
	}

	// IpAddress
	if source.IpAddress != nil {
		ipAddress := *source.IpAddress
		publicIPAddressesSpec.IpAddress = &ipAddress
	} else {
		publicIPAddressesSpec.IpAddress = nil
	}

	// IpTags
	ipTagList := make([]IpTag, len(source.IpTags))
	for ipTagIndex, ipTagItem := range source.IpTags {
		// Shadow the loop variable to avoid aliasing
		ipTagItem := ipTagItem
		var ipTag IpTag
		err := ipTag.AssignPropertiesFromIpTag(&ipTagItem)
		if err != nil {
			return errors.Wrap(err, "populating IpTags from IpTags, calling AssignPropertiesFromIpTag()")
		}
		ipTagList[ipTagIndex] = ipTag
	}
	publicIPAddressesSpec.IpTags = ipTagList

	// Location
	if source.Location != nil {
		publicIPAddressesSpec.Location = *source.Location
	} else {
		publicIPAddressesSpec.Location = ""
	}

	// Owner
	publicIPAddressesSpec.Owner = source.Owner.Copy()

	// PublicIPAddressVersion
	if source.PublicIPAddressVersion != nil {
		publicIPAddressVersion := PublicIPAddressPropertiesFormatPublicIPAddressVersion(*source.PublicIPAddressVersion)
		publicIPAddressesSpec.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		publicIPAddressesSpec.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	if source.PublicIPAllocationMethod != nil {
		publicIPAddressesSpec.PublicIPAllocationMethod = PublicIPAddressPropertiesFormatPublicIPAllocationMethod(*source.PublicIPAllocationMethod)
	} else {
		publicIPAddressesSpec.PublicIPAllocationMethod = ""
	}

	// PublicIPPrefix
	if source.PublicIPPrefix != nil {
		var publicIPPrefix SubResource
		err := publicIPPrefix.AssignPropertiesFromSubResource(source.PublicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "populating PublicIPPrefix from PublicIPPrefix, calling AssignPropertiesFromSubResource()")
		}
		publicIPAddressesSpec.PublicIPPrefix = &publicIPPrefix
	} else {
		publicIPAddressesSpec.PublicIPPrefix = nil
	}

	// Sku
	if source.Sku != nil {
		var sku PublicIPAddressSku
		err := sku.AssignPropertiesFromPublicIPAddressSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromPublicIPAddressSku()")
		}
		publicIPAddressesSpec.Sku = &sku
	} else {
		publicIPAddressesSpec.Sku = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	publicIPAddressesSpec.Tags = tagMap

	// Zones
	zoneList := make([]string, len(source.Zones))
	for zoneIndex, zoneItem := range source.Zones {
		// Shadow the loop variable to avoid aliasing
		zoneItem := zoneItem
		zoneList[zoneIndex] = zoneItem
	}
	publicIPAddressesSpec.Zones = zoneList

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressesSpec populates the provided destination PublicIPAddresses_Spec from our PublicIPAddresses_Spec
func (publicIPAddressesSpec *PublicIPAddresses_Spec) AssignPropertiesToPublicIPAddressesSpec(destination *v1alpha1api20201101storage.PublicIPAddresses_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = publicIPAddressesSpec.AzureName

	// DdosSettings
	if publicIPAddressesSpec.DdosSettings != nil {
		var ddosSetting v1alpha1api20201101storage.DdosSettings
		err := (*publicIPAddressesSpec.DdosSettings).AssignPropertiesToDdosSettings(&ddosSetting)
		if err != nil {
			return errors.Wrap(err, "populating DdosSettings from DdosSettings, calling AssignPropertiesToDdosSettings()")
		}
		destination.DdosSettings = &ddosSetting
	} else {
		destination.DdosSettings = nil
	}

	// DnsSettings
	if publicIPAddressesSpec.DnsSettings != nil {
		var dnsSetting v1alpha1api20201101storage.PublicIPAddressDnsSettings
		err := (*publicIPAddressesSpec.DnsSettings).AssignPropertiesToPublicIPAddressDnsSettings(&dnsSetting)
		if err != nil {
			return errors.Wrap(err, "populating DnsSettings from DnsSettings, calling AssignPropertiesToPublicIPAddressDnsSettings()")
		}
		destination.DnsSettings = &dnsSetting
	} else {
		destination.DnsSettings = nil
	}

	// ExtendedLocation
	if publicIPAddressesSpec.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation
		err := (*publicIPAddressesSpec.ExtendedLocation).AssignPropertiesToExtendedLocation(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesToExtendedLocation()")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// IdleTimeoutInMinutes
	if publicIPAddressesSpec.IdleTimeoutInMinutes != nil {
		idleTimeoutInMinute := *publicIPAddressesSpec.IdleTimeoutInMinutes
		destination.IdleTimeoutInMinutes = &idleTimeoutInMinute
	} else {
		destination.IdleTimeoutInMinutes = nil
	}

	// IpAddress
	if publicIPAddressesSpec.IpAddress != nil {
		ipAddress := *publicIPAddressesSpec.IpAddress
		destination.IpAddress = &ipAddress
	} else {
		destination.IpAddress = nil
	}

	// IpTags
	ipTagList := make([]v1alpha1api20201101storage.IpTag, len(publicIPAddressesSpec.IpTags))
	for ipTagIndex, ipTagItem := range publicIPAddressesSpec.IpTags {
		// Shadow the loop variable to avoid aliasing
		ipTagItem := ipTagItem
		var ipTag v1alpha1api20201101storage.IpTag
		err := ipTagItem.AssignPropertiesToIpTag(&ipTag)
		if err != nil {
			return errors.Wrap(err, "populating IpTags from IpTags, calling AssignPropertiesToIpTag()")
		}
		ipTagList[ipTagIndex] = ipTag
	}
	destination.IpTags = ipTagList

	// Location
	location := publicIPAddressesSpec.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = publicIPAddressesSpec.OriginalVersion()

	// Owner
	destination.Owner = publicIPAddressesSpec.Owner.Copy()

	// PublicIPAddressVersion
	if publicIPAddressesSpec.PublicIPAddressVersion != nil {
		publicIPAddressVersion := string(*publicIPAddressesSpec.PublicIPAddressVersion)
		destination.PublicIPAddressVersion = &publicIPAddressVersion
	} else {
		destination.PublicIPAddressVersion = nil
	}

	// PublicIPAllocationMethod
	publicIPAllocationMethod := string(publicIPAddressesSpec.PublicIPAllocationMethod)
	destination.PublicIPAllocationMethod = &publicIPAllocationMethod

	// PublicIPPrefix
	if publicIPAddressesSpec.PublicIPPrefix != nil {
		var publicIPPrefix v1alpha1api20201101storage.SubResource
		err := (*publicIPAddressesSpec.PublicIPPrefix).AssignPropertiesToSubResource(&publicIPPrefix)
		if err != nil {
			return errors.Wrap(err, "populating PublicIPPrefix from PublicIPPrefix, calling AssignPropertiesToSubResource()")
		}
		destination.PublicIPPrefix = &publicIPPrefix
	} else {
		destination.PublicIPPrefix = nil
	}

	// Sku
	if publicIPAddressesSpec.Sku != nil {
		var sku v1alpha1api20201101storage.PublicIPAddressSku
		err := (*publicIPAddressesSpec.Sku).AssignPropertiesToPublicIPAddressSku(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToPublicIPAddressSku()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range publicIPAddressesSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Zones
	zoneList := make([]string, len(publicIPAddressesSpec.Zones))
	for zoneIndex, zoneItem := range publicIPAddressesSpec.Zones {
		// Shadow the loop variable to avoid aliasing
		zoneItem := zoneItem
		zoneList[zoneIndex] = zoneItem
	}
	destination.Zones = zoneList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (publicIPAddressesSpec *PublicIPAddresses_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (publicIPAddressesSpec *PublicIPAddresses_Spec) SetAzureName(azureName string) {
	publicIPAddressesSpec.AzureName = azureName
}

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/DdosSettings
type DdosSettings struct {
	//DdosCustomPolicy: The DDoS custom policy associated with the public IP.
	DdosCustomPolicy *SubResource `json:"ddosCustomPolicy,omitempty"`

	//ProtectedIP: Enables DDoS protection on the public IP.
	ProtectedIP *bool `json:"protectedIP,omitempty"`

	//ProtectionCoverage: The DDoS protection policy customizability of the public IP.
	//Only standard coverage will have the ability to be customized.
	ProtectionCoverage *DdosSettingsProtectionCoverage `json:"protectionCoverage,omitempty"`
}

var _ genruntime.ARMTransformer = &DdosSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ddosSettings *DdosSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ddosSettings == nil {
		return nil, nil
	}
	var result DdosSettingsARM

	// Set property ‘DdosCustomPolicy’:
	if ddosSettings.DdosCustomPolicy != nil {
		ddosCustomPolicyARM, err := (*ddosSettings.DdosCustomPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		ddosCustomPolicy := ddosCustomPolicyARM.(SubResourceARM)
		result.DdosCustomPolicy = &ddosCustomPolicy
	}

	// Set property ‘ProtectedIP’:
	if ddosSettings.ProtectedIP != nil {
		protectedIP := *ddosSettings.ProtectedIP
		result.ProtectedIP = &protectedIP
	}

	// Set property ‘ProtectionCoverage’:
	if ddosSettings.ProtectionCoverage != nil {
		protectionCoverage := *ddosSettings.ProtectionCoverage
		result.ProtectionCoverage = &protectionCoverage
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ddosSettings *DdosSettings) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DdosSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ddosSettings *DdosSettings) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(DdosSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DdosSettingsARM, got %T", armInput)
	}

	// Set property ‘DdosCustomPolicy’:
	if typedInput.DdosCustomPolicy != nil {
		var ddosCustomPolicy1 SubResource
		err := ddosCustomPolicy1.PopulateFromARM(owner, *typedInput.DdosCustomPolicy)
		if err != nil {
			return err
		}
		ddosCustomPolicy := ddosCustomPolicy1
		ddosSettings.DdosCustomPolicy = &ddosCustomPolicy
	}

	// Set property ‘ProtectedIP’:
	if typedInput.ProtectedIP != nil {
		protectedIP := *typedInput.ProtectedIP
		ddosSettings.ProtectedIP = &protectedIP
	}

	// Set property ‘ProtectionCoverage’:
	if typedInput.ProtectionCoverage != nil {
		protectionCoverage := *typedInput.ProtectionCoverage
		ddosSettings.ProtectionCoverage = &protectionCoverage
	}

	// No error
	return nil
}

// AssignPropertiesFromDdosSettings populates our DdosSettings from the provided source DdosSettings
func (ddosSettings *DdosSettings) AssignPropertiesFromDdosSettings(source *v1alpha1api20201101storage.DdosSettings) error {

	// DdosCustomPolicy
	if source.DdosCustomPolicy != nil {
		var ddosCustomPolicy SubResource
		err := ddosCustomPolicy.AssignPropertiesFromSubResource(source.DdosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "populating DdosCustomPolicy from DdosCustomPolicy, calling AssignPropertiesFromSubResource()")
		}
		ddosSettings.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		ddosSettings.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if source.ProtectedIP != nil {
		protectedIP := *source.ProtectedIP
		ddosSettings.ProtectedIP = &protectedIP
	} else {
		ddosSettings.ProtectedIP = nil
	}

	// ProtectionCoverage
	if source.ProtectionCoverage != nil {
		protectionCoverage := DdosSettingsProtectionCoverage(*source.ProtectionCoverage)
		ddosSettings.ProtectionCoverage = &protectionCoverage
	} else {
		ddosSettings.ProtectionCoverage = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDdosSettings populates the provided destination DdosSettings from our DdosSettings
func (ddosSettings *DdosSettings) AssignPropertiesToDdosSettings(destination *v1alpha1api20201101storage.DdosSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DdosCustomPolicy
	if ddosSettings.DdosCustomPolicy != nil {
		var ddosCustomPolicy v1alpha1api20201101storage.SubResource
		err := (*ddosSettings.DdosCustomPolicy).AssignPropertiesToSubResource(&ddosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "populating DdosCustomPolicy from DdosCustomPolicy, calling AssignPropertiesToSubResource()")
		}
		destination.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		destination.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if ddosSettings.ProtectedIP != nil {
		protectedIP := *ddosSettings.ProtectedIP
		destination.ProtectedIP = &protectedIP
	} else {
		destination.ProtectedIP = nil
	}

	// ProtectionCoverage
	if ddosSettings.ProtectionCoverage != nil {
		protectionCoverage := string(*ddosSettings.ProtectionCoverage)
		destination.ProtectionCoverage = &protectionCoverage
	} else {
		destination.ProtectionCoverage = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type DdosSettings_Status struct {
	//DdosCustomPolicy: The DDoS custom policy associated with the public IP.
	DdosCustomPolicy *SubResource_Status `json:"ddosCustomPolicy,omitempty"`

	//ProtectedIP: Enables DDoS protection on the public IP.
	ProtectedIP *bool `json:"protectedIP,omitempty"`

	//ProtectionCoverage: The DDoS protection policy customizability of the public IP.
	//Only standard coverage will have the ability to be customized.
	ProtectionCoverage *DdosSettingsStatusProtectionCoverage `json:"protectionCoverage,omitempty"`
}

var _ genruntime.FromARMConverter = &DdosSettings_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ddosSettingsStatus *DdosSettings_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DdosSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ddosSettingsStatus *DdosSettings_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(DdosSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DdosSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘DdosCustomPolicy’:
	if typedInput.DdosCustomPolicy != nil {
		var ddosCustomPolicy1 SubResource_Status
		err := ddosCustomPolicy1.PopulateFromARM(owner, *typedInput.DdosCustomPolicy)
		if err != nil {
			return err
		}
		ddosCustomPolicy := ddosCustomPolicy1
		ddosSettingsStatus.DdosCustomPolicy = &ddosCustomPolicy
	}

	// Set property ‘ProtectedIP’:
	if typedInput.ProtectedIP != nil {
		protectedIP := *typedInput.ProtectedIP
		ddosSettingsStatus.ProtectedIP = &protectedIP
	}

	// Set property ‘ProtectionCoverage’:
	if typedInput.ProtectionCoverage != nil {
		protectionCoverage := *typedInput.ProtectionCoverage
		ddosSettingsStatus.ProtectionCoverage = &protectionCoverage
	}

	// No error
	return nil
}

// AssignPropertiesFromDdosSettingsStatus populates our DdosSettings_Status from the provided source DdosSettings_Status
func (ddosSettingsStatus *DdosSettings_Status) AssignPropertiesFromDdosSettingsStatus(source *v1alpha1api20201101storage.DdosSettings_Status) error {

	// DdosCustomPolicy
	if source.DdosCustomPolicy != nil {
		var ddosCustomPolicy SubResource_Status
		err := ddosCustomPolicy.AssignPropertiesFromSubResourceStatus(source.DdosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "populating DdosCustomPolicy from DdosCustomPolicy, calling AssignPropertiesFromSubResourceStatus()")
		}
		ddosSettingsStatus.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		ddosSettingsStatus.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if source.ProtectedIP != nil {
		protectedIP := *source.ProtectedIP
		ddosSettingsStatus.ProtectedIP = &protectedIP
	} else {
		ddosSettingsStatus.ProtectedIP = nil
	}

	// ProtectionCoverage
	if source.ProtectionCoverage != nil {
		protectionCoverage := DdosSettingsStatusProtectionCoverage(*source.ProtectionCoverage)
		ddosSettingsStatus.ProtectionCoverage = &protectionCoverage
	} else {
		ddosSettingsStatus.ProtectionCoverage = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDdosSettingsStatus populates the provided destination DdosSettings_Status from our DdosSettings_Status
func (ddosSettingsStatus *DdosSettings_Status) AssignPropertiesToDdosSettingsStatus(destination *v1alpha1api20201101storage.DdosSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DdosCustomPolicy
	if ddosSettingsStatus.DdosCustomPolicy != nil {
		var ddosCustomPolicy v1alpha1api20201101storage.SubResource_Status
		err := (*ddosSettingsStatus.DdosCustomPolicy).AssignPropertiesToSubResourceStatus(&ddosCustomPolicy)
		if err != nil {
			return errors.Wrap(err, "populating DdosCustomPolicy from DdosCustomPolicy, calling AssignPropertiesToSubResourceStatus()")
		}
		destination.DdosCustomPolicy = &ddosCustomPolicy
	} else {
		destination.DdosCustomPolicy = nil
	}

	// ProtectedIP
	if ddosSettingsStatus.ProtectedIP != nil {
		protectedIP := *ddosSettingsStatus.ProtectedIP
		destination.ProtectedIP = &protectedIP
	} else {
		destination.ProtectedIP = nil
	}

	// ProtectionCoverage
	if ddosSettingsStatus.ProtectionCoverage != nil {
		protectionCoverage := string(*ddosSettingsStatus.ProtectionCoverage)
		destination.ProtectionCoverage = &protectionCoverage
	} else {
		destination.ProtectionCoverage = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type IPAllocationMethod_Status string

const (
	IPAllocationMethod_StatusDynamic = IPAllocationMethod_Status("Dynamic")
	IPAllocationMethod_StatusStatic  = IPAllocationMethod_Status("Static")
)

//Generated from:
type IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded struct {
	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource that is unique within a resource group. This name
	//can be used to access the resource.
	Name *string `json:"name,omitempty"`

	//PrivateIPAddress: The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	//PrivateIPAllocationMethod: The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod_Status `json:"privateIPAllocationMethod,omitempty"`

	//ProvisioningState: The provisioning state of the IP configuration resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//Subnet: The reference to the subnet resource.
	Subnet *Subnet_Status_PublicIPAddress_SubResourceEmbedded `json:"subnet,omitempty"`
}

var _ genruntime.FromARMConverter = &IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipConfigurationStatusPublicIPAddressSubResourceEmbedded *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipConfigurationStatusPublicIPAddressSubResourceEmbedded *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPConfiguration_Status_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Name = &name
	}

	// Set property ‘PrivateIPAddress’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAddress != nil {
			privateIPAddress := *typedInput.Properties.PrivateIPAddress
			ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAddress = &privateIPAddress
		}
	}

	// Set property ‘PrivateIPAllocationMethod’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateIPAllocationMethod != nil {
			privateIPAllocationMethod := *typedInput.Properties.PrivateIPAllocationMethod
			ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAllocationMethod = &privateIPAllocationMethod
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			ipConfigurationStatusPublicIPAddressSubResourceEmbedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Subnet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Subnet != nil {
			var subnet1 Subnet_Status_PublicIPAddress_SubResourceEmbedded
			err := subnet1.PopulateFromARM(owner, *typedInput.Properties.Subnet)
			if err != nil {
				return err
			}
			subnet := subnet1
			ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Subnet = &subnet
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIPConfigurationStatusPublicIPAddressSubResourceEmbedded populates our IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded from the provided source IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
func (ipConfigurationStatusPublicIPAddressSubResourceEmbedded *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromIPConfigurationStatusPublicIPAddressSubResourceEmbedded(source *v1alpha1api20201101storage.IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) error {

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Etag = &etag
	} else {
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Etag = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Id = &id
	} else {
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Id = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Name = &name
	} else {
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Name = nil
	}

	// PrivateIPAddress
	if source.PrivateIPAddress != nil {
		privateIPAddress := *source.PrivateIPAddress
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAddress = &privateIPAddress
	} else {
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAddress = nil
	}

	// PrivateIPAllocationMethod
	if source.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := IPAllocationMethod_Status(*source.PrivateIPAllocationMethod)
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.ProvisioningState = &provisioningState
	} else {
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.ProvisioningState = nil
	}

	// Subnet
	if source.Subnet != nil {
		var subnet Subnet_Status_PublicIPAddress_SubResourceEmbedded
		err := subnet.AssignPropertiesFromSubnetStatusPublicIPAddressSubResourceEmbedded(source.Subnet)
		if err != nil {
			return errors.Wrap(err, "populating Subnet from Subnet, calling AssignPropertiesFromSubnetStatusPublicIPAddressSubResourceEmbedded()")
		}
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Subnet = &subnet
	} else {
		ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Subnet = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIPConfigurationStatusPublicIPAddressSubResourceEmbedded populates the provided destination IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded from our IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded
func (ipConfigurationStatusPublicIPAddressSubResourceEmbedded *IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToIPConfigurationStatusPublicIPAddressSubResourceEmbedded(destination *v1alpha1api20201101storage.IPConfiguration_Status_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	if ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Etag != nil {
		etag := *ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// Id
	if ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Id != nil {
		id := *ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Name
	if ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Name != nil {
		name := *ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// PrivateIPAddress
	if ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAddress != nil {
		privateIPAddress := *ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAddress
		destination.PrivateIPAddress = &privateIPAddress
	} else {
		destination.PrivateIPAddress = nil
	}

	// PrivateIPAllocationMethod
	if ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAllocationMethod != nil {
		privateIPAllocationMethod := string(*ipConfigurationStatusPublicIPAddressSubResourceEmbedded.PrivateIPAllocationMethod)
		destination.PrivateIPAllocationMethod = &privateIPAllocationMethod
	} else {
		destination.PrivateIPAllocationMethod = nil
	}

	// ProvisioningState
	if ipConfigurationStatusPublicIPAddressSubResourceEmbedded.ProvisioningState != nil {
		provisioningState := string(*ipConfigurationStatusPublicIPAddressSubResourceEmbedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Subnet
	if ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Subnet != nil {
		var subnet v1alpha1api20201101storage.Subnet_Status_PublicIPAddress_SubResourceEmbedded
		err := (*ipConfigurationStatusPublicIPAddressSubResourceEmbedded.Subnet).AssignPropertiesToSubnetStatusPublicIPAddressSubResourceEmbedded(&subnet)
		if err != nil {
			return errors.Wrap(err, "populating Subnet from Subnet, calling AssignPropertiesToSubnetStatusPublicIPAddressSubResourceEmbedded()")
		}
		destination.Subnet = &subnet
	} else {
		destination.Subnet = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type IPVersion_Status string

const (
	IPVersion_StatusIPv4 = IPVersion_Status("IPv4")
	IPVersion_StatusIPv6 = IPVersion_Status("IPv6")
)

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/IpTag
type IpTag struct {
	//IpTagType: The IP tag type. Example: FirstPartyUsage.
	IpTagType *string `json:"ipTagType,omitempty"`

	//Tag: The value of the IP tag associated with the public IP. Example: SQL.
	Tag *string `json:"tag,omitempty"`
}

var _ genruntime.ARMTransformer = &IpTag{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ipTag *IpTag) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ipTag == nil {
		return nil, nil
	}
	var result IpTagARM

	// Set property ‘IpTagType’:
	if ipTag.IpTagType != nil {
		ipTagType := *ipTag.IpTagType
		result.IpTagType = &ipTagType
	}

	// Set property ‘Tag’:
	if ipTag.Tag != nil {
		tag := *ipTag.Tag
		result.Tag = &tag
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipTag *IpTag) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpTagARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipTag *IpTag) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpTagARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpTagARM, got %T", armInput)
	}

	// Set property ‘IpTagType’:
	if typedInput.IpTagType != nil {
		ipTagType := *typedInput.IpTagType
		ipTag.IpTagType = &ipTagType
	}

	// Set property ‘Tag’:
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		ipTag.Tag = &tag
	}

	// No error
	return nil
}

// AssignPropertiesFromIpTag populates our IpTag from the provided source IpTag
func (ipTag *IpTag) AssignPropertiesFromIpTag(source *v1alpha1api20201101storage.IpTag) error {

	// IpTagType
	if source.IpTagType != nil {
		ipTagType := *source.IpTagType
		ipTag.IpTagType = &ipTagType
	} else {
		ipTag.IpTagType = nil
	}

	// Tag
	if source.Tag != nil {
		tag := *source.Tag
		ipTag.Tag = &tag
	} else {
		ipTag.Tag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIpTag populates the provided destination IpTag from our IpTag
func (ipTag *IpTag) AssignPropertiesToIpTag(destination *v1alpha1api20201101storage.IpTag) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpTagType
	if ipTag.IpTagType != nil {
		ipTagType := *ipTag.IpTagType
		destination.IpTagType = &ipTagType
	} else {
		destination.IpTagType = nil
	}

	// Tag
	if ipTag.Tag != nil {
		tag := *ipTag.Tag
		destination.Tag = &tag
	} else {
		destination.Tag = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type IpTag_Status struct {
	//IpTagType: The IP tag type. Example: FirstPartyUsage.
	IpTagType *string `json:"ipTagType,omitempty"`

	//Tag: The value of the IP tag associated with the public IP. Example: SQL.
	Tag *string `json:"tag,omitempty"`
}

var _ genruntime.FromARMConverter = &IpTag_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipTagStatus *IpTag_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpTag_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipTagStatus *IpTag_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpTag_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpTag_StatusARM, got %T", armInput)
	}

	// Set property ‘IpTagType’:
	if typedInput.IpTagType != nil {
		ipTagType := *typedInput.IpTagType
		ipTagStatus.IpTagType = &ipTagType
	}

	// Set property ‘Tag’:
	if typedInput.Tag != nil {
		tag := *typedInput.Tag
		ipTagStatus.Tag = &tag
	}

	// No error
	return nil
}

// AssignPropertiesFromIpTagStatus populates our IpTag_Status from the provided source IpTag_Status
func (ipTagStatus *IpTag_Status) AssignPropertiesFromIpTagStatus(source *v1alpha1api20201101storage.IpTag_Status) error {

	// IpTagType
	if source.IpTagType != nil {
		ipTagType := *source.IpTagType
		ipTagStatus.IpTagType = &ipTagType
	} else {
		ipTagStatus.IpTagType = nil
	}

	// Tag
	if source.Tag != nil {
		tag := *source.Tag
		ipTagStatus.Tag = &tag
	} else {
		ipTagStatus.Tag = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIpTagStatus populates the provided destination IpTag_Status from our IpTag_Status
func (ipTagStatus *IpTag_Status) AssignPropertiesToIpTagStatus(destination *v1alpha1api20201101storage.IpTag_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpTagType
	if ipTagStatus.IpTagType != nil {
		ipTagType := *ipTagStatus.IpTagType
		destination.IpTagType = &ipTagType
	} else {
		destination.IpTagType = nil
	}

	// Tag
	if ipTagStatus.Tag != nil {
		tag := *ipTagStatus.Tag
		destination.Tag = &tag
	} else {
		destination.Tag = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type NatGateway_Status_PublicIPAddress_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Sku: The nat gateway SKU.
	Sku *NatGatewaySku_Status `json:"sku,omitempty"`

	//Zones: A list of availability zones denoting the zone in which Nat Gateway
	//should be deployed.
	Zones []string `json:"zones,omitempty"`
}

var _ genruntime.FromARMConverter = &NatGateway_Status_PublicIPAddress_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (natGatewayStatusPublicIPAddressSubResourceEmbedded *NatGateway_Status_PublicIPAddress_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (natGatewayStatusPublicIPAddressSubResourceEmbedded *NatGateway_Status_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGateway_Status_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		natGatewayStatusPublicIPAddressSubResourceEmbedded.Id = &id
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 NatGatewaySku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		natGatewayStatusPublicIPAddressSubResourceEmbedded.Sku = &sku
	}

	// Set property ‘Zones’:
	for _, item := range typedInput.Zones {
		natGatewayStatusPublicIPAddressSubResourceEmbedded.Zones = append(natGatewayStatusPublicIPAddressSubResourceEmbedded.Zones, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGatewayStatusPublicIPAddressSubResourceEmbedded populates our NatGateway_Status_PublicIPAddress_SubResourceEmbedded from the provided source NatGateway_Status_PublicIPAddress_SubResourceEmbedded
func (natGatewayStatusPublicIPAddressSubResourceEmbedded *NatGateway_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromNatGatewayStatusPublicIPAddressSubResourceEmbedded(source *v1alpha1api20201101storage.NatGateway_Status_PublicIPAddress_SubResourceEmbedded) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		natGatewayStatusPublicIPAddressSubResourceEmbedded.Id = &id
	} else {
		natGatewayStatusPublicIPAddressSubResourceEmbedded.Id = nil
	}

	// Sku
	if source.Sku != nil {
		var sku NatGatewaySku_Status
		err := sku.AssignPropertiesFromNatGatewaySkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesFromNatGatewaySkuStatus()")
		}
		natGatewayStatusPublicIPAddressSubResourceEmbedded.Sku = &sku
	} else {
		natGatewayStatusPublicIPAddressSubResourceEmbedded.Sku = nil
	}

	// Zones
	zoneList := make([]string, len(source.Zones))
	for zoneIndex, zoneItem := range source.Zones {
		// Shadow the loop variable to avoid aliasing
		zoneItem := zoneItem
		zoneList[zoneIndex] = zoneItem
	}
	natGatewayStatusPublicIPAddressSubResourceEmbedded.Zones = zoneList

	// No error
	return nil
}

// AssignPropertiesToNatGatewayStatusPublicIPAddressSubResourceEmbedded populates the provided destination NatGateway_Status_PublicIPAddress_SubResourceEmbedded from our NatGateway_Status_PublicIPAddress_SubResourceEmbedded
func (natGatewayStatusPublicIPAddressSubResourceEmbedded *NatGateway_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToNatGatewayStatusPublicIPAddressSubResourceEmbedded(destination *v1alpha1api20201101storage.NatGateway_Status_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if natGatewayStatusPublicIPAddressSubResourceEmbedded.Id != nil {
		id := *natGatewayStatusPublicIPAddressSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Sku
	if natGatewayStatusPublicIPAddressSubResourceEmbedded.Sku != nil {
		var sku v1alpha1api20201101storage.NatGatewaySku_Status
		err := (*natGatewayStatusPublicIPAddressSubResourceEmbedded.Sku).AssignPropertiesToNatGatewaySkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "populating Sku from Sku, calling AssignPropertiesToNatGatewaySkuStatus()")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Zones
	zoneList := make([]string, len(natGatewayStatusPublicIPAddressSubResourceEmbedded.Zones))
	for zoneIndex, zoneItem := range natGatewayStatusPublicIPAddressSubResourceEmbedded.Zones {
		// Shadow the loop variable to avoid aliasing
		zoneItem := zoneItem
		zoneList[zoneIndex] = zoneItem
	}
	destination.Zones = zoneList

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/PublicIPAddressDnsSettings
type PublicIPAddressDnsSettings struct {
	// +kubebuilder:validation:Required
	//DomainNameLabel: The domain name label. The concatenation of the domain name
	//label and the regionalized DNS zone make up the fully qualified domain name
	//associated with the public IP address. If a domain name label is specified, an A
	//DNS record is created for the public IP in the Microsoft Azure DNS system.
	DomainNameLabel string `json:"domainNameLabel"`

	//Fqdn: The Fully Qualified Domain Name of the A DNS record associated with the
	//public IP. This is the concatenation of the domainNameLabel and the regionalized
	//DNS zone.
	Fqdn *string `json:"fqdn,omitempty"`

	//ReverseFqdn: The reverse FQDN. A user-visible, fully qualified domain name that
	//resolves to this public IP address. If the reverseFqdn is specified, then a PTR
	//DNS record is created pointing from the IP address in the in-addr.arpa domain to
	//the reverse FQDN.
	ReverseFqdn *string `json:"reverseFqdn,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddressDnsSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (publicIPAddressDnsSettings *PublicIPAddressDnsSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if publicIPAddressDnsSettings == nil {
		return nil, nil
	}
	var result PublicIPAddressDnsSettingsARM

	// Set property ‘DomainNameLabel’:
	result.DomainNameLabel = publicIPAddressDnsSettings.DomainNameLabel

	// Set property ‘Fqdn’:
	if publicIPAddressDnsSettings.Fqdn != nil {
		fqdn := *publicIPAddressDnsSettings.Fqdn
		result.Fqdn = &fqdn
	}

	// Set property ‘ReverseFqdn’:
	if publicIPAddressDnsSettings.ReverseFqdn != nil {
		reverseFqdn := *publicIPAddressDnsSettings.ReverseFqdn
		result.ReverseFqdn = &reverseFqdn
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (publicIPAddressDnsSettings *PublicIPAddressDnsSettings) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressDnsSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (publicIPAddressDnsSettings *PublicIPAddressDnsSettings) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressDnsSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressDnsSettingsARM, got %T", armInput)
	}

	// Set property ‘DomainNameLabel’:
	publicIPAddressDnsSettings.DomainNameLabel = typedInput.DomainNameLabel

	// Set property ‘Fqdn’:
	if typedInput.Fqdn != nil {
		fqdn := *typedInput.Fqdn
		publicIPAddressDnsSettings.Fqdn = &fqdn
	}

	// Set property ‘ReverseFqdn’:
	if typedInput.ReverseFqdn != nil {
		reverseFqdn := *typedInput.ReverseFqdn
		publicIPAddressDnsSettings.ReverseFqdn = &reverseFqdn
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressDnsSettings populates our PublicIPAddressDnsSettings from the provided source PublicIPAddressDnsSettings
func (publicIPAddressDnsSettings *PublicIPAddressDnsSettings) AssignPropertiesFromPublicIPAddressDnsSettings(source *v1alpha1api20201101storage.PublicIPAddressDnsSettings) error {

	// DomainNameLabel
	if source.DomainNameLabel != nil {
		publicIPAddressDnsSettings.DomainNameLabel = *source.DomainNameLabel
	} else {
		publicIPAddressDnsSettings.DomainNameLabel = ""
	}

	// Fqdn
	if source.Fqdn != nil {
		fqdn := *source.Fqdn
		publicIPAddressDnsSettings.Fqdn = &fqdn
	} else {
		publicIPAddressDnsSettings.Fqdn = nil
	}

	// ReverseFqdn
	if source.ReverseFqdn != nil {
		reverseFqdn := *source.ReverseFqdn
		publicIPAddressDnsSettings.ReverseFqdn = &reverseFqdn
	} else {
		publicIPAddressDnsSettings.ReverseFqdn = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressDnsSettings populates the provided destination PublicIPAddressDnsSettings from our PublicIPAddressDnsSettings
func (publicIPAddressDnsSettings *PublicIPAddressDnsSettings) AssignPropertiesToPublicIPAddressDnsSettings(destination *v1alpha1api20201101storage.PublicIPAddressDnsSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DomainNameLabel
	domainNameLabel := publicIPAddressDnsSettings.DomainNameLabel
	destination.DomainNameLabel = &domainNameLabel

	// Fqdn
	if publicIPAddressDnsSettings.Fqdn != nil {
		fqdn := *publicIPAddressDnsSettings.Fqdn
		destination.Fqdn = &fqdn
	} else {
		destination.Fqdn = nil
	}

	// ReverseFqdn
	if publicIPAddressDnsSettings.ReverseFqdn != nil {
		reverseFqdn := *publicIPAddressDnsSettings.ReverseFqdn
		destination.ReverseFqdn = &reverseFqdn
	} else {
		destination.ReverseFqdn = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type PublicIPAddressDnsSettings_Status struct {
	//DomainNameLabel: The domain name label. The concatenation of the domain name
	//label and the regionalized DNS zone make up the fully qualified domain name
	//associated with the public IP address. If a domain name label is specified, an A
	//DNS record is created for the public IP in the Microsoft Azure DNS system.
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`

	//Fqdn: The Fully Qualified Domain Name of the A DNS record associated with the
	//public IP. This is the concatenation of the domainNameLabel and the regionalized
	//DNS zone.
	Fqdn *string `json:"fqdn,omitempty"`

	//ReverseFqdn: The reverse FQDN. A user-visible, fully qualified domain name that
	//resolves to this public IP address. If the reverseFqdn is specified, then a PTR
	//DNS record is created pointing from the IP address in the in-addr.arpa domain to
	//the reverse FQDN.
	ReverseFqdn *string `json:"reverseFqdn,omitempty"`
}

var _ genruntime.FromARMConverter = &PublicIPAddressDnsSettings_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (publicIPAddressDnsSettingsStatus *PublicIPAddressDnsSettings_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressDnsSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (publicIPAddressDnsSettingsStatus *PublicIPAddressDnsSettings_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressDnsSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressDnsSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘DomainNameLabel’:
	if typedInput.DomainNameLabel != nil {
		domainNameLabel := *typedInput.DomainNameLabel
		publicIPAddressDnsSettingsStatus.DomainNameLabel = &domainNameLabel
	}

	// Set property ‘Fqdn’:
	if typedInput.Fqdn != nil {
		fqdn := *typedInput.Fqdn
		publicIPAddressDnsSettingsStatus.Fqdn = &fqdn
	}

	// Set property ‘ReverseFqdn’:
	if typedInput.ReverseFqdn != nil {
		reverseFqdn := *typedInput.ReverseFqdn
		publicIPAddressDnsSettingsStatus.ReverseFqdn = &reverseFqdn
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressDnsSettingsStatus populates our PublicIPAddressDnsSettings_Status from the provided source PublicIPAddressDnsSettings_Status
func (publicIPAddressDnsSettingsStatus *PublicIPAddressDnsSettings_Status) AssignPropertiesFromPublicIPAddressDnsSettingsStatus(source *v1alpha1api20201101storage.PublicIPAddressDnsSettings_Status) error {

	// DomainNameLabel
	if source.DomainNameLabel != nil {
		domainNameLabel := *source.DomainNameLabel
		publicIPAddressDnsSettingsStatus.DomainNameLabel = &domainNameLabel
	} else {
		publicIPAddressDnsSettingsStatus.DomainNameLabel = nil
	}

	// Fqdn
	if source.Fqdn != nil {
		fqdn := *source.Fqdn
		publicIPAddressDnsSettingsStatus.Fqdn = &fqdn
	} else {
		publicIPAddressDnsSettingsStatus.Fqdn = nil
	}

	// ReverseFqdn
	if source.ReverseFqdn != nil {
		reverseFqdn := *source.ReverseFqdn
		publicIPAddressDnsSettingsStatus.ReverseFqdn = &reverseFqdn
	} else {
		publicIPAddressDnsSettingsStatus.ReverseFqdn = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressDnsSettingsStatus populates the provided destination PublicIPAddressDnsSettings_Status from our PublicIPAddressDnsSettings_Status
func (publicIPAddressDnsSettingsStatus *PublicIPAddressDnsSettings_Status) AssignPropertiesToPublicIPAddressDnsSettingsStatus(destination *v1alpha1api20201101storage.PublicIPAddressDnsSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DomainNameLabel
	if publicIPAddressDnsSettingsStatus.DomainNameLabel != nil {
		domainNameLabel := *publicIPAddressDnsSettingsStatus.DomainNameLabel
		destination.DomainNameLabel = &domainNameLabel
	} else {
		destination.DomainNameLabel = nil
	}

	// Fqdn
	if publicIPAddressDnsSettingsStatus.Fqdn != nil {
		fqdn := *publicIPAddressDnsSettingsStatus.Fqdn
		destination.Fqdn = &fqdn
	} else {
		destination.Fqdn = nil
	}

	// ReverseFqdn
	if publicIPAddressDnsSettingsStatus.ReverseFqdn != nil {
		reverseFqdn := *publicIPAddressDnsSettingsStatus.ReverseFqdn
		destination.ReverseFqdn = &reverseFqdn
	} else {
		destination.ReverseFqdn = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"IPv4","IPv6"}
type PublicIPAddressPropertiesFormatPublicIPAddressVersion string

const (
	PublicIPAddressPropertiesFormatPublicIPAddressVersionIPv4 = PublicIPAddressPropertiesFormatPublicIPAddressVersion("IPv4")
	PublicIPAddressPropertiesFormatPublicIPAddressVersionIPv6 = PublicIPAddressPropertiesFormatPublicIPAddressVersion("IPv6")
)

// +kubebuilder:validation:Enum={"Dynamic","Static"}
type PublicIPAddressPropertiesFormatPublicIPAllocationMethod string

const (
	PublicIPAddressPropertiesFormatPublicIPAllocationMethodDynamic = PublicIPAddressPropertiesFormatPublicIPAllocationMethod("Dynamic")
	PublicIPAddressPropertiesFormatPublicIPAllocationMethodStatic  = PublicIPAddressPropertiesFormatPublicIPAllocationMethod("Static")
)

type PublicIPAddressPropertiesFormatStatusMigrationPhase string

const (
	PublicIPAddressPropertiesFormatStatusMigrationPhaseAbort     = PublicIPAddressPropertiesFormatStatusMigrationPhase("Abort")
	PublicIPAddressPropertiesFormatStatusMigrationPhaseCommit    = PublicIPAddressPropertiesFormatStatusMigrationPhase("Commit")
	PublicIPAddressPropertiesFormatStatusMigrationPhaseCommitted = PublicIPAddressPropertiesFormatStatusMigrationPhase("Committed")
	PublicIPAddressPropertiesFormatStatusMigrationPhaseNone      = PublicIPAddressPropertiesFormatStatusMigrationPhase("None")
	PublicIPAddressPropertiesFormatStatusMigrationPhasePrepare   = PublicIPAddressPropertiesFormatStatusMigrationPhase("Prepare")
)

//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/definitions/PublicIPAddressSku
type PublicIPAddressSku struct {
	//Name: Name of a public IP address SKU.
	Name *PublicIPAddressSkuName `json:"name,omitempty"`

	//Tier: Tier of a public IP address SKU.
	Tier *PublicIPAddressSkuTier `json:"tier,omitempty"`
}

var _ genruntime.ARMTransformer = &PublicIPAddressSku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (publicIPAddressSku *PublicIPAddressSku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if publicIPAddressSku == nil {
		return nil, nil
	}
	var result PublicIPAddressSkuARM

	// Set property ‘Name’:
	if publicIPAddressSku.Name != nil {
		name := *publicIPAddressSku.Name
		result.Name = &name
	}

	// Set property ‘Tier’:
	if publicIPAddressSku.Tier != nil {
		tier := *publicIPAddressSku.Tier
		result.Tier = &tier
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (publicIPAddressSku *PublicIPAddressSku) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressSkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (publicIPAddressSku *PublicIPAddressSku) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressSkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressSkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		publicIPAddressSku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		publicIPAddressSku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressSku populates our PublicIPAddressSku from the provided source PublicIPAddressSku
func (publicIPAddressSku *PublicIPAddressSku) AssignPropertiesFromPublicIPAddressSku(source *v1alpha1api20201101storage.PublicIPAddressSku) error {

	// Name
	if source.Name != nil {
		name := PublicIPAddressSkuName(*source.Name)
		publicIPAddressSku.Name = &name
	} else {
		publicIPAddressSku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := PublicIPAddressSkuTier(*source.Tier)
		publicIPAddressSku.Tier = &tier
	} else {
		publicIPAddressSku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressSku populates the provided destination PublicIPAddressSku from our PublicIPAddressSku
func (publicIPAddressSku *PublicIPAddressSku) AssignPropertiesToPublicIPAddressSku(destination *v1alpha1api20201101storage.PublicIPAddressSku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if publicIPAddressSku.Name != nil {
		name := string(*publicIPAddressSku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if publicIPAddressSku.Tier != nil {
		tier := string(*publicIPAddressSku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type PublicIPAddressSku_Status struct {
	//Name: Name of a public IP address SKU.
	Name *PublicIPAddressSkuStatusName `json:"name,omitempty"`

	//Tier: Tier of a public IP address SKU.
	Tier *PublicIPAddressSkuStatusTier `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &PublicIPAddressSku_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (publicIPAddressSkuStatus *PublicIPAddressSku_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PublicIPAddressSku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (publicIPAddressSkuStatus *PublicIPAddressSku_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(PublicIPAddressSku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PublicIPAddressSku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		publicIPAddressSkuStatus.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		publicIPAddressSkuStatus.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromPublicIPAddressSkuStatus populates our PublicIPAddressSku_Status from the provided source PublicIPAddressSku_Status
func (publicIPAddressSkuStatus *PublicIPAddressSku_Status) AssignPropertiesFromPublicIPAddressSkuStatus(source *v1alpha1api20201101storage.PublicIPAddressSku_Status) error {

	// Name
	if source.Name != nil {
		name := PublicIPAddressSkuStatusName(*source.Name)
		publicIPAddressSkuStatus.Name = &name
	} else {
		publicIPAddressSkuStatus.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := PublicIPAddressSkuStatusTier(*source.Tier)
		publicIPAddressSkuStatus.Tier = &tier
	} else {
		publicIPAddressSkuStatus.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPublicIPAddressSkuStatus populates the provided destination PublicIPAddressSku_Status from our PublicIPAddressSku_Status
func (publicIPAddressSkuStatus *PublicIPAddressSku_Status) AssignPropertiesToPublicIPAddressSkuStatus(destination *v1alpha1api20201101storage.PublicIPAddressSku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if publicIPAddressSkuStatus.Name != nil {
		name := string(*publicIPAddressSkuStatus.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if publicIPAddressSkuStatus.Tier != nil {
		tier := string(*publicIPAddressSkuStatus.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type SubResource_Status struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &SubResource_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subResourceStatus *SubResource_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SubResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subResourceStatus *SubResource_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(SubResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SubResource_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		subResourceStatus.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubResourceStatus populates our SubResource_Status from the provided source SubResource_Status
func (subResourceStatus *SubResource_Status) AssignPropertiesFromSubResourceStatus(source *v1alpha1api20201101storage.SubResource_Status) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		subResourceStatus.Id = &id
	} else {
		subResourceStatus.Id = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSubResourceStatus populates the provided destination SubResource_Status from our SubResource_Status
func (subResourceStatus *SubResource_Status) AssignPropertiesToSubResourceStatus(destination *v1alpha1api20201101storage.SubResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if subResourceStatus.Id != nil {
		id := *subResourceStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Basic","Standard"}
type DdosSettingsProtectionCoverage string

const (
	DdosSettingsProtectionCoverageBasic    = DdosSettingsProtectionCoverage("Basic")
	DdosSettingsProtectionCoverageStandard = DdosSettingsProtectionCoverage("Standard")
)

type DdosSettingsStatusProtectionCoverage string

const (
	DdosSettingsStatusProtectionCoverageBasic    = DdosSettingsStatusProtectionCoverage("Basic")
	DdosSettingsStatusProtectionCoverageStandard = DdosSettingsStatusProtectionCoverage("Standard")
)

//Generated from:
type NatGatewaySku_Status struct {
	//Name: Name of Nat Gateway SKU.
	Name *NatGatewaySkuStatusName `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &NatGatewaySku_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (natGatewaySkuStatus *NatGatewaySku_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &NatGatewaySku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (natGatewaySkuStatus *NatGatewaySku_Status) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(NatGatewaySku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NatGatewaySku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		natGatewaySkuStatus.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromNatGatewaySkuStatus populates our NatGatewaySku_Status from the provided source NatGatewaySku_Status
func (natGatewaySkuStatus *NatGatewaySku_Status) AssignPropertiesFromNatGatewaySkuStatus(source *v1alpha1api20201101storage.NatGatewaySku_Status) error {

	// Name
	if source.Name != nil {
		name := NatGatewaySkuStatusName(*source.Name)
		natGatewaySkuStatus.Name = &name
	} else {
		natGatewaySkuStatus.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNatGatewaySkuStatus populates the provided destination NatGatewaySku_Status from our NatGatewaySku_Status
func (natGatewaySkuStatus *NatGatewaySku_Status) AssignPropertiesToNatGatewaySkuStatus(destination *v1alpha1api20201101storage.NatGatewaySku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if natGatewaySkuStatus.Name != nil {
		name := string(*natGatewaySkuStatus.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type Subnet_Status_PublicIPAddress_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &Subnet_Status_PublicIPAddress_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subnetStatusPublicIPAddressSubResourceEmbedded *Subnet_Status_PublicIPAddress_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subnetStatusPublicIPAddressSubResourceEmbedded *Subnet_Status_PublicIPAddress_SubResourceEmbedded) PopulateFromARM(owner genruntime.KnownResourceReference, armInput interface{}) error {
	typedInput, ok := armInput.(Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_Status_PublicIPAddress_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		subnetStatusPublicIPAddressSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubnetStatusPublicIPAddressSubResourceEmbedded populates our Subnet_Status_PublicIPAddress_SubResourceEmbedded from the provided source Subnet_Status_PublicIPAddress_SubResourceEmbedded
func (subnetStatusPublicIPAddressSubResourceEmbedded *Subnet_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesFromSubnetStatusPublicIPAddressSubResourceEmbedded(source *v1alpha1api20201101storage.Subnet_Status_PublicIPAddress_SubResourceEmbedded) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		subnetStatusPublicIPAddressSubResourceEmbedded.Id = &id
	} else {
		subnetStatusPublicIPAddressSubResourceEmbedded.Id = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSubnetStatusPublicIPAddressSubResourceEmbedded populates the provided destination Subnet_Status_PublicIPAddress_SubResourceEmbedded from our Subnet_Status_PublicIPAddress_SubResourceEmbedded
func (subnetStatusPublicIPAddressSubResourceEmbedded *Subnet_Status_PublicIPAddress_SubResourceEmbedded) AssignPropertiesToSubnetStatusPublicIPAddressSubResourceEmbedded(destination *v1alpha1api20201101storage.Subnet_Status_PublicIPAddress_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if subnetStatusPublicIPAddressSubResourceEmbedded.Id != nil {
		id := *subnetStatusPublicIPAddressSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type NatGatewaySkuStatusName string

const NatGatewaySkuStatusNameStandard = NatGatewaySkuStatusName("Standard")

func init() {
	SchemeBuilder.Register(&PublicIPAddress{}, &PublicIPAddressList{})
}
