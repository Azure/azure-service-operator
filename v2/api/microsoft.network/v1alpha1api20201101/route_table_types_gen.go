// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources=routetables,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources={routetables/status,routetables/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/routeTables
type RouteTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteTables_Spec                                 `json:"spec,omitempty"`
	Status            RouteTable_Status_RouteTable_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RouteTable{}

// GetConditions returns the conditions of the resource
func (routeTable *RouteTable) GetConditions() conditions.Conditions {
	return routeTable.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (routeTable *RouteTable) SetConditions(conditions conditions.Conditions) {
	routeTable.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-network-azure-com-v1alpha1api20201101-routetable,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=routetables,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.routetables.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &RouteTable{}

// Default applies defaults to the RouteTable resource
func (routeTable *RouteTable) Default() {
	routeTable.defaultImpl()
	var temp interface{} = routeTable
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (routeTable *RouteTable) defaultAzureName() {
	if routeTable.Spec.AzureName == "" {
		routeTable.Spec.AzureName = routeTable.Name
	}
}

// defaultImpl applies the code generated defaults to the RouteTable resource
func (routeTable *RouteTable) defaultImpl() { routeTable.defaultAzureName() }

var _ genruntime.KubernetesResource = &RouteTable{}

// AzureName returns the Azure name of the resource
func (routeTable *RouteTable) AzureName() string {
	return routeTable.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (routeTable *RouteTable) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (routeTable *RouteTable) GetSpec() genruntime.ConvertibleSpec {
	return &routeTable.Spec
}

// GetStatus returns the status of this resource
func (routeTable *RouteTable) GetStatus() genruntime.ConvertibleStatus {
	return &routeTable.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/routeTables"
func (routeTable *RouteTable) GetType() string {
	return "Microsoft.Network/routeTables"
}

// NewEmptyStatus returns a new empty (blank) status
func (routeTable *RouteTable) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &RouteTable_Status_RouteTable_SubResourceEmbedded{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (routeTable *RouteTable) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(routeTable.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: routeTable.Namespace,
		Name:      routeTable.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (routeTable *RouteTable) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RouteTable_Status_RouteTable_SubResourceEmbedded); ok {
		routeTable.Status = *st
		return nil
	}

	// Convert status to required version
	var st RouteTable_Status_RouteTable_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	routeTable.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-network-azure-com-v1alpha1api20201101-routetable,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=routetables,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.routetables.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &RouteTable{}

// ValidateCreate validates the creation of the resource
func (routeTable *RouteTable) ValidateCreate() error {
	validations := routeTable.createValidations()
	var temp interface{} = routeTable
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (routeTable *RouteTable) ValidateDelete() error {
	validations := routeTable.deleteValidations()
	var temp interface{} = routeTable
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (routeTable *RouteTable) ValidateUpdate(old runtime.Object) error {
	validations := routeTable.updateValidations()
	var temp interface{} = routeTable
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (routeTable *RouteTable) createValidations() []func() error {
	return []func() error{routeTable.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (routeTable *RouteTable) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (routeTable *RouteTable) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return routeTable.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (routeTable *RouteTable) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&routeTable.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromRouteTable populates our RouteTable from the provided source RouteTable
func (routeTable *RouteTable) AssignPropertiesFromRouteTable(source *v1alpha1api20201101storage.RouteTable) error {

	// Spec
	var spec RouteTables_Spec
	err := spec.AssignPropertiesFromRouteTablesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromRouteTablesSpec()")
	}
	routeTable.Spec = spec

	// Status
	var status RouteTable_Status_RouteTable_SubResourceEmbedded
	err = status.AssignPropertiesFromRouteTableStatusRouteTableSubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromRouteTableStatusRouteTableSubResourceEmbedded()")
	}
	routeTable.Status = status

	// No error
	return nil
}

// AssignPropertiesToRouteTable populates the provided destination RouteTable from our RouteTable
func (routeTable *RouteTable) AssignPropertiesToRouteTable(destination *v1alpha1api20201101storage.RouteTable) error {

	// Spec
	var spec v1alpha1api20201101storage.RouteTables_Spec
	err := routeTable.Spec.AssignPropertiesToRouteTablesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToRouteTablesSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.RouteTable_Status_RouteTable_SubResourceEmbedded
	err = routeTable.Status.AssignPropertiesToRouteTableStatusRouteTableSubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToRouteTableStatusRouteTableSubResourceEmbedded()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (routeTable *RouteTable) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: routeTable.Spec.OriginalVersion(),
		Kind:    "RouteTable",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/routeTables
type RouteTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteTable `json:"items"`
}

//Generated from:
type RouteTable_Status_RouteTable_SubResourceEmbedded struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DisableBgpRoutePropagation: Whether to disable the routes learned by BGP on that
	//route table. True means disable.
	DisableBgpRoutePropagation *bool `json:"disableBgpRoutePropagation,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//ProvisioningState: The provisioning state of the route table resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ResourceGuid: The resource GUID property of the route table.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//Routes: Collection of routes contained within a route table.
	Routes []Route_Status_SubResourceEmbedded `json:"routes,omitempty"`

	//Subnets: A collection of references to subnets.
	Subnets []Subnet_Status_RouteTable_SubResourceEmbedded `json:"subnets,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RouteTable_Status_RouteTable_SubResourceEmbedded{}

// ConvertStatusFrom populates our RouteTable_Status_RouteTable_SubResourceEmbedded from the provided source
func (routeTableStatusRouteTableSubResourceEmbedded *RouteTable_Status_RouteTable_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.RouteTable_Status_RouteTable_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return routeTableStatusRouteTableSubResourceEmbedded.AssignPropertiesFromRouteTableStatusRouteTableSubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.RouteTable_Status_RouteTable_SubResourceEmbedded{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = routeTableStatusRouteTableSubResourceEmbedded.AssignPropertiesFromRouteTableStatusRouteTableSubResourceEmbedded(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our RouteTable_Status_RouteTable_SubResourceEmbedded
func (routeTableStatusRouteTableSubResourceEmbedded *RouteTable_Status_RouteTable_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.RouteTable_Status_RouteTable_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return routeTableStatusRouteTableSubResourceEmbedded.AssignPropertiesToRouteTableStatusRouteTableSubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.RouteTable_Status_RouteTable_SubResourceEmbedded{}
	err := routeTableStatusRouteTableSubResourceEmbedded.AssignPropertiesToRouteTableStatusRouteTableSubResourceEmbedded(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &RouteTable_Status_RouteTable_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (routeTableStatusRouteTableSubResourceEmbedded *RouteTable_Status_RouteTable_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RouteTable_Status_RouteTable_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (routeTableStatusRouteTableSubResourceEmbedded *RouteTable_Status_RouteTable_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RouteTable_Status_RouteTable_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RouteTable_Status_RouteTable_SubResourceEmbeddedARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DisableBgpRoutePropagation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableBgpRoutePropagation != nil {
			disableBgpRoutePropagation := *typedInput.Properties.DisableBgpRoutePropagation
			routeTableStatusRouteTableSubResourceEmbedded.DisableBgpRoutePropagation = &disableBgpRoutePropagation
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		routeTableStatusRouteTableSubResourceEmbedded.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		routeTableStatusRouteTableSubResourceEmbedded.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		routeTableStatusRouteTableSubResourceEmbedded.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		routeTableStatusRouteTableSubResourceEmbedded.Name = &name
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			routeTableStatusRouteTableSubResourceEmbedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			routeTableStatusRouteTableSubResourceEmbedded.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘Routes’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Routes {
			var item1 Route_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			routeTableStatusRouteTableSubResourceEmbedded.Routes = append(routeTableStatusRouteTableSubResourceEmbedded.Routes, item1)
		}
	}

	// Set property ‘Subnets’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Subnets {
			var item1 Subnet_Status_RouteTable_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			routeTableStatusRouteTableSubResourceEmbedded.Subnets = append(routeTableStatusRouteTableSubResourceEmbedded.Subnets, item1)
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		routeTableStatusRouteTableSubResourceEmbedded.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			routeTableStatusRouteTableSubResourceEmbedded.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		routeTableStatusRouteTableSubResourceEmbedded.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromRouteTableStatusRouteTableSubResourceEmbedded populates our RouteTable_Status_RouteTable_SubResourceEmbedded from the provided source RouteTable_Status_RouteTable_SubResourceEmbedded
func (routeTableStatusRouteTableSubResourceEmbedded *RouteTable_Status_RouteTable_SubResourceEmbedded) AssignPropertiesFromRouteTableStatusRouteTableSubResourceEmbedded(source *v1alpha1api20201101storage.RouteTable_Status_RouteTable_SubResourceEmbedded) error {

	// Conditions
	routeTableStatusRouteTableSubResourceEmbedded.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DisableBgpRoutePropagation
	if source.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *source.DisableBgpRoutePropagation
		routeTableStatusRouteTableSubResourceEmbedded.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	} else {
		routeTableStatusRouteTableSubResourceEmbedded.DisableBgpRoutePropagation = nil
	}

	// Etag
	routeTableStatusRouteTableSubResourceEmbedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	routeTableStatusRouteTableSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	routeTableStatusRouteTableSubResourceEmbedded.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	routeTableStatusRouteTableSubResourceEmbedded.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		routeTableStatusRouteTableSubResourceEmbedded.ProvisioningState = &provisioningState
	} else {
		routeTableStatusRouteTableSubResourceEmbedded.ProvisioningState = nil
	}

	// ResourceGuid
	routeTableStatusRouteTableSubResourceEmbedded.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// Routes
	if source.Routes != nil {
		routeList := make([]Route_Status_SubResourceEmbedded, len(source.Routes))
		for routeIndex, routeItem := range source.Routes {
			// Shadow the loop variable to avoid aliasing
			routeItem := routeItem
			var route Route_Status_SubResourceEmbedded
			err := route.AssignPropertiesFromRouteStatusSubResourceEmbedded(&routeItem)
			if err != nil {
				return errors.Wrap(err, "populating Routes from Routes, calling AssignPropertiesFromRouteStatusSubResourceEmbedded()")
			}
			routeList[routeIndex] = route
		}
		routeTableStatusRouteTableSubResourceEmbedded.Routes = routeList
	} else {
		routeTableStatusRouteTableSubResourceEmbedded.Routes = nil
	}

	// Subnets
	if source.Subnets != nil {
		subnetList := make([]Subnet_Status_RouteTable_SubResourceEmbedded, len(source.Subnets))
		for subnetIndex, subnetItem := range source.Subnets {
			// Shadow the loop variable to avoid aliasing
			subnetItem := subnetItem
			var subnet Subnet_Status_RouteTable_SubResourceEmbedded
			err := subnet.AssignPropertiesFromSubnetStatusRouteTableSubResourceEmbedded(&subnetItem)
			if err != nil {
				return errors.Wrap(err, "populating Subnets from Subnets, calling AssignPropertiesFromSubnetStatusRouteTableSubResourceEmbedded()")
			}
			subnetList[subnetIndex] = subnet
		}
		routeTableStatusRouteTableSubResourceEmbedded.Subnets = subnetList
	} else {
		routeTableStatusRouteTableSubResourceEmbedded.Subnets = nil
	}

	// Tags
	routeTableStatusRouteTableSubResourceEmbedded.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	routeTableStatusRouteTableSubResourceEmbedded.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToRouteTableStatusRouteTableSubResourceEmbedded populates the provided destination RouteTable_Status_RouteTable_SubResourceEmbedded from our RouteTable_Status_RouteTable_SubResourceEmbedded
func (routeTableStatusRouteTableSubResourceEmbedded *RouteTable_Status_RouteTable_SubResourceEmbedded) AssignPropertiesToRouteTableStatusRouteTableSubResourceEmbedded(destination *v1alpha1api20201101storage.RouteTable_Status_RouteTable_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(routeTableStatusRouteTableSubResourceEmbedded.Conditions)

	// DisableBgpRoutePropagation
	if routeTableStatusRouteTableSubResourceEmbedded.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *routeTableStatusRouteTableSubResourceEmbedded.DisableBgpRoutePropagation
		destination.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	} else {
		destination.DisableBgpRoutePropagation = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(routeTableStatusRouteTableSubResourceEmbedded.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(routeTableStatusRouteTableSubResourceEmbedded.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(routeTableStatusRouteTableSubResourceEmbedded.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(routeTableStatusRouteTableSubResourceEmbedded.Name)

	// ProvisioningState
	if routeTableStatusRouteTableSubResourceEmbedded.ProvisioningState != nil {
		provisioningState := string(*routeTableStatusRouteTableSubResourceEmbedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(routeTableStatusRouteTableSubResourceEmbedded.ResourceGuid)

	// Routes
	if routeTableStatusRouteTableSubResourceEmbedded.Routes != nil {
		routeList := make([]v1alpha1api20201101storage.Route_Status_SubResourceEmbedded, len(routeTableStatusRouteTableSubResourceEmbedded.Routes))
		for routeIndex, routeItem := range routeTableStatusRouteTableSubResourceEmbedded.Routes {
			// Shadow the loop variable to avoid aliasing
			routeItem := routeItem
			var route v1alpha1api20201101storage.Route_Status_SubResourceEmbedded
			err := routeItem.AssignPropertiesToRouteStatusSubResourceEmbedded(&route)
			if err != nil {
				return errors.Wrap(err, "populating Routes from Routes, calling AssignPropertiesToRouteStatusSubResourceEmbedded()")
			}
			routeList[routeIndex] = route
		}
		destination.Routes = routeList
	} else {
		destination.Routes = nil
	}

	// Subnets
	if routeTableStatusRouteTableSubResourceEmbedded.Subnets != nil {
		subnetList := make([]v1alpha1api20201101storage.Subnet_Status_RouteTable_SubResourceEmbedded, len(routeTableStatusRouteTableSubResourceEmbedded.Subnets))
		for subnetIndex, subnetItem := range routeTableStatusRouteTableSubResourceEmbedded.Subnets {
			// Shadow the loop variable to avoid aliasing
			subnetItem := subnetItem
			var subnet v1alpha1api20201101storage.Subnet_Status_RouteTable_SubResourceEmbedded
			err := subnetItem.AssignPropertiesToSubnetStatusRouteTableSubResourceEmbedded(&subnet)
			if err != nil {
				return errors.Wrap(err, "populating Subnets from Subnets, calling AssignPropertiesToSubnetStatusRouteTableSubResourceEmbedded()")
			}
			subnetList[subnetIndex] = subnet
		}
		destination.Subnets = subnetList
	} else {
		destination.Subnets = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(routeTableStatusRouteTableSubResourceEmbedded.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(routeTableStatusRouteTableSubResourceEmbedded.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-11-01"}
type RouteTablesSpecAPIVersion string

const RouteTablesSpecAPIVersion20201101 = RouteTablesSpecAPIVersion("2020-11-01")

type RouteTables_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DisableBgpRoutePropagation: Whether to disable the routes learned by BGP on that
	//route table. True means disable.
	DisableBgpRoutePropagation *bool `json:"disableBgpRoutePropagation,omitempty"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &RouteTables_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (routeTablesSpec *RouteTables_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if routeTablesSpec == nil {
		return nil, nil
	}
	var result RouteTables_SpecARM

	// Set property ‘Location’:
	result.Location = routeTablesSpec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if routeTablesSpec.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *routeTablesSpec.DisableBgpRoutePropagation
		result.Properties.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	}

	// Set property ‘Tags’:
	if routeTablesSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range routeTablesSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (routeTablesSpec *RouteTables_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RouteTables_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (routeTablesSpec *RouteTables_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RouteTables_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RouteTables_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	routeTablesSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DisableBgpRoutePropagation’:
	// copying flattened property:
	if typedInput.Properties.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *typedInput.Properties.DisableBgpRoutePropagation
		routeTablesSpec.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	}

	// Set property ‘Location’:
	routeTablesSpec.Location = typedInput.Location

	// Set property ‘Owner’:
	routeTablesSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		routeTablesSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			routeTablesSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &RouteTables_Spec{}

// ConvertSpecFrom populates our RouteTables_Spec from the provided source
func (routeTablesSpec *RouteTables_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.RouteTables_Spec)
	if ok {
		// Populate our instance from source
		return routeTablesSpec.AssignPropertiesFromRouteTablesSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.RouteTables_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = routeTablesSpec.AssignPropertiesFromRouteTablesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our RouteTables_Spec
func (routeTablesSpec *RouteTables_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.RouteTables_Spec)
	if ok {
		// Populate destination from our instance
		return routeTablesSpec.AssignPropertiesToRouteTablesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.RouteTables_Spec{}
	err := routeTablesSpec.AssignPropertiesToRouteTablesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRouteTablesSpec populates our RouteTables_Spec from the provided source RouteTables_Spec
func (routeTablesSpec *RouteTables_Spec) AssignPropertiesFromRouteTablesSpec(source *v1alpha1api20201101storage.RouteTables_Spec) error {

	// AzureName
	routeTablesSpec.AzureName = source.AzureName

	// DisableBgpRoutePropagation
	if source.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *source.DisableBgpRoutePropagation
		routeTablesSpec.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	} else {
		routeTablesSpec.DisableBgpRoutePropagation = nil
	}

	// Location
	routeTablesSpec.Location = genruntime.GetOptionalStringValue(source.Location)

	// Owner
	routeTablesSpec.Owner = source.Owner.Copy()

	// Tags
	routeTablesSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToRouteTablesSpec populates the provided destination RouteTables_Spec from our RouteTables_Spec
func (routeTablesSpec *RouteTables_Spec) AssignPropertiesToRouteTablesSpec(destination *v1alpha1api20201101storage.RouteTables_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = routeTablesSpec.AzureName

	// DisableBgpRoutePropagation
	if routeTablesSpec.DisableBgpRoutePropagation != nil {
		disableBgpRoutePropagation := *routeTablesSpec.DisableBgpRoutePropagation
		destination.DisableBgpRoutePropagation = &disableBgpRoutePropagation
	} else {
		destination.DisableBgpRoutePropagation = nil
	}

	// Location
	location := routeTablesSpec.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = routeTablesSpec.OriginalVersion()

	// Owner
	destination.Owner = routeTablesSpec.Owner.Copy()

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(routeTablesSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (routeTablesSpec *RouteTables_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (routeTablesSpec *RouteTables_Spec) SetAzureName(azureName string) {
	routeTablesSpec.AzureName = azureName
}

//Generated from:
type Route_Status_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &Route_Status_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (routeStatusSubResourceEmbedded *Route_Status_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Route_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (routeStatusSubResourceEmbedded *Route_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Route_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Route_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		routeStatusSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromRouteStatusSubResourceEmbedded populates our Route_Status_SubResourceEmbedded from the provided source Route_Status_SubResourceEmbedded
func (routeStatusSubResourceEmbedded *Route_Status_SubResourceEmbedded) AssignPropertiesFromRouteStatusSubResourceEmbedded(source *v1alpha1api20201101storage.Route_Status_SubResourceEmbedded) error {

	// Id
	routeStatusSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToRouteStatusSubResourceEmbedded populates the provided destination Route_Status_SubResourceEmbedded from our Route_Status_SubResourceEmbedded
func (routeStatusSubResourceEmbedded *Route_Status_SubResourceEmbedded) AssignPropertiesToRouteStatusSubResourceEmbedded(destination *v1alpha1api20201101storage.Route_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(routeStatusSubResourceEmbedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type Subnet_Status_RouteTable_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &Subnet_Status_RouteTable_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subnetStatusRouteTableSubResourceEmbedded *Subnet_Status_RouteTable_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Subnet_Status_RouteTable_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subnetStatusRouteTableSubResourceEmbedded *Subnet_Status_RouteTable_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Subnet_Status_RouteTable_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_Status_RouteTable_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		subnetStatusRouteTableSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubnetStatusRouteTableSubResourceEmbedded populates our Subnet_Status_RouteTable_SubResourceEmbedded from the provided source Subnet_Status_RouteTable_SubResourceEmbedded
func (subnetStatusRouteTableSubResourceEmbedded *Subnet_Status_RouteTable_SubResourceEmbedded) AssignPropertiesFromSubnetStatusRouteTableSubResourceEmbedded(source *v1alpha1api20201101storage.Subnet_Status_RouteTable_SubResourceEmbedded) error {

	// Id
	subnetStatusRouteTableSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSubnetStatusRouteTableSubResourceEmbedded populates the provided destination Subnet_Status_RouteTable_SubResourceEmbedded from our Subnet_Status_RouteTable_SubResourceEmbedded
func (subnetStatusRouteTableSubResourceEmbedded *Subnet_Status_RouteTable_SubResourceEmbedded) AssignPropertiesToSubnetStatusRouteTableSubResourceEmbedded(destination *v1alpha1api20201101storage.Subnet_Status_RouteTable_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(subnetStatusRouteTableSubResourceEmbedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&RouteTable{}, &RouteTableList{})
}
