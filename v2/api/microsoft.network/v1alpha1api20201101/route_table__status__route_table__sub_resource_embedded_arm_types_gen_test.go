// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RouteTable_Status_RouteTable_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_Status_RouteTable_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTableStatusRouteTableSubResourceEmbeddedARM, RouteTableStatusRouteTableSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTableStatusRouteTableSubResourceEmbeddedARM runs a test to see if a specific instance of RouteTable_Status_RouteTable_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTableStatusRouteTableSubResourceEmbeddedARM(subject RouteTable_Status_RouteTable_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_Status_RouteTable_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_Status_RouteTable_SubResourceEmbeddedARM instances for property testing - lazily instantiated
//by RouteTableStatusRouteTableSubResourceEmbeddedARMGenerator()
var routeTableStatusRouteTableSubResourceEmbeddedARMGenerator gopter.Gen

// RouteTableStatusRouteTableSubResourceEmbeddedARMGenerator returns a generator of RouteTable_Status_RouteTable_SubResourceEmbeddedARM instances for property testing.
// We first initialize routeTableStatusRouteTableSubResourceEmbeddedARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTableStatusRouteTableSubResourceEmbeddedARMGenerator() gopter.Gen {
	if routeTableStatusRouteTableSubResourceEmbeddedARMGenerator != nil {
		return routeTableStatusRouteTableSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbeddedARM(generators)
	routeTableStatusRouteTableSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_Status_RouteTable_SubResourceEmbeddedARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbeddedARM(generators)
	AddRelatedPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbeddedARM(generators)
	routeTableStatusRouteTableSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(RouteTable_Status_RouteTable_SubResourceEmbeddedARM{}), generators)

	return routeTableStatusRouteTableSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RouteTablePropertiesFormatStatusARMGenerator())
}

func Test_RouteTablePropertiesFormat_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTablePropertiesFormat_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablePropertiesFormatStatusARM, RouteTablePropertiesFormatStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablePropertiesFormatStatusARM runs a test to see if a specific instance of RouteTablePropertiesFormat_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablePropertiesFormatStatusARM(subject RouteTablePropertiesFormat_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTablePropertiesFormat_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTablePropertiesFormat_StatusARM instances for property testing - lazily instantiated by
//RouteTablePropertiesFormatStatusARMGenerator()
var routeTablePropertiesFormatStatusARMGenerator gopter.Gen

// RouteTablePropertiesFormatStatusARMGenerator returns a generator of RouteTablePropertiesFormat_StatusARM instances for property testing.
// We first initialize routeTablePropertiesFormatStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTablePropertiesFormatStatusARMGenerator() gopter.Gen {
	if routeTablePropertiesFormatStatusARMGenerator != nil {
		return routeTablePropertiesFormatStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatStatusARM(generators)
	routeTablePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatStatusARM(generators)
	AddRelatedPropertyGeneratorsForRouteTablePropertiesFormatStatusARM(generators)
	routeTablePropertiesFormatStatusARMGenerator = gen.Struct(reflect.TypeOf(RouteTablePropertiesFormat_StatusARM{}), generators)

	return routeTablePropertiesFormatStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(ProvisioningState_StatusDeleting, ProvisioningState_StatusFailed, ProvisioningState_StatusSucceeded, ProvisioningState_StatusUpdating))
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTablePropertiesFormatStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTablePropertiesFormatStatusARM(gens map[string]gopter.Gen) {
	gens["Routes"] = gen.SliceOf(RouteStatusSubResourceEmbeddedARMGenerator())
	gens["Subnets"] = gen.SliceOf(SubnetStatusRouteTableSubResourceEmbeddedARMGenerator())
}

func Test_Route_Status_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Route_Status_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteStatusSubResourceEmbeddedARM, RouteStatusSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteStatusSubResourceEmbeddedARM runs a test to see if a specific instance of Route_Status_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteStatusSubResourceEmbeddedARM(subject Route_Status_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Route_Status_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Route_Status_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
//RouteStatusSubResourceEmbeddedARMGenerator()
var routeStatusSubResourceEmbeddedARMGenerator gopter.Gen

// RouteStatusSubResourceEmbeddedARMGenerator returns a generator of Route_Status_SubResourceEmbeddedARM instances for property testing.
func RouteStatusSubResourceEmbeddedARMGenerator() gopter.Gen {
	if routeStatusSubResourceEmbeddedARMGenerator != nil {
		return routeStatusSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteStatusSubResourceEmbeddedARM(generators)
	routeStatusSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Route_Status_SubResourceEmbeddedARM{}), generators)

	return routeStatusSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForRouteStatusSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteStatusSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_Subnet_Status_RouteTable_SubResourceEmbeddedARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_RouteTable_SubResourceEmbeddedARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetStatusRouteTableSubResourceEmbeddedARM, SubnetStatusRouteTableSubResourceEmbeddedARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetStatusRouteTableSubResourceEmbeddedARM runs a test to see if a specific instance of Subnet_Status_RouteTable_SubResourceEmbeddedARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetStatusRouteTableSubResourceEmbeddedARM(subject Subnet_Status_RouteTable_SubResourceEmbeddedARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_RouteTable_SubResourceEmbeddedARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_RouteTable_SubResourceEmbeddedARM instances for property testing - lazily instantiated by
//SubnetStatusRouteTableSubResourceEmbeddedARMGenerator()
var subnetStatusRouteTableSubResourceEmbeddedARMGenerator gopter.Gen

// SubnetStatusRouteTableSubResourceEmbeddedARMGenerator returns a generator of Subnet_Status_RouteTable_SubResourceEmbeddedARM instances for property testing.
func SubnetStatusRouteTableSubResourceEmbeddedARMGenerator() gopter.Gen {
	if subnetStatusRouteTableSubResourceEmbeddedARMGenerator != nil {
		return subnetStatusRouteTableSubResourceEmbeddedARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetStatusRouteTableSubResourceEmbeddedARM(generators)
	subnetStatusRouteTableSubResourceEmbeddedARMGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_RouteTable_SubResourceEmbeddedARM{}), generators)

	return subnetStatusRouteTableSubResourceEmbeddedARMGenerator
}

// AddIndependentPropertyGeneratorsForSubnetStatusRouteTableSubResourceEmbeddedARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetStatusRouteTableSubResourceEmbeddedARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
