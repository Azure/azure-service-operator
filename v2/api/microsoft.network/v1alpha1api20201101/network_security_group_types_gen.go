// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.network/v1alpha1api20201101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources=networksecuritygroups,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.network.azure.com,resources={networksecuritygroups/status,networksecuritygroups/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/networkSecurityGroups
type NetworkSecurityGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkSecurityGroups_Spec                                           `json:"spec,omitempty"`
	Status            NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &NetworkSecurityGroup{}

// GetConditions returns the conditions of the resource
func (networkSecurityGroup *NetworkSecurityGroup) GetConditions() conditions.Conditions {
	return networkSecurityGroup.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (networkSecurityGroup *NetworkSecurityGroup) SetConditions(conditions conditions.Conditions) {
	networkSecurityGroup.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-network-azure-com-v1alpha1api20201101-networksecuritygroup,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=networksecuritygroups,verbs=create;update,versions=v1alpha1api20201101,name=default.v1alpha1api20201101.networksecuritygroups.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &NetworkSecurityGroup{}

// Default applies defaults to the NetworkSecurityGroup resource
func (networkSecurityGroup *NetworkSecurityGroup) Default() {
	networkSecurityGroup.defaultImpl()
	var temp interface{} = networkSecurityGroup
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (networkSecurityGroup *NetworkSecurityGroup) defaultAzureName() {
	if networkSecurityGroup.Spec.AzureName == "" {
		networkSecurityGroup.Spec.AzureName = networkSecurityGroup.Name
	}
}

// defaultImpl applies the code generated defaults to the NetworkSecurityGroup resource
func (networkSecurityGroup *NetworkSecurityGroup) defaultImpl() {
	networkSecurityGroup.defaultAzureName()
}

var _ genruntime.KubernetesResource = &NetworkSecurityGroup{}

// AzureName returns the Azure name of the resource
func (networkSecurityGroup *NetworkSecurityGroup) AzureName() string {
	return networkSecurityGroup.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (networkSecurityGroup *NetworkSecurityGroup) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (networkSecurityGroup *NetworkSecurityGroup) GetSpec() genruntime.ConvertibleSpec {
	return &networkSecurityGroup.Spec
}

// GetStatus returns the status of this resource
func (networkSecurityGroup *NetworkSecurityGroup) GetStatus() genruntime.ConvertibleStatus {
	return &networkSecurityGroup.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/networkSecurityGroups"
func (networkSecurityGroup *NetworkSecurityGroup) GetType() string {
	return "Microsoft.Network/networkSecurityGroups"
}

// NewEmptyStatus returns a new empty (blank) status
func (networkSecurityGroup *NetworkSecurityGroup) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (networkSecurityGroup *NetworkSecurityGroup) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(networkSecurityGroup.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: networkSecurityGroup.Namespace,
		Name:      networkSecurityGroup.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (networkSecurityGroup *NetworkSecurityGroup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded); ok {
		networkSecurityGroup.Status = *st
		return nil
	}

	// Convert status to required version
	var st NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	networkSecurityGroup.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-network-azure-com-v1alpha1api20201101-networksecuritygroup,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.network.azure.com,resources=networksecuritygroups,verbs=create;update,versions=v1alpha1api20201101,name=validate.v1alpha1api20201101.networksecuritygroups.microsoft.network.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &NetworkSecurityGroup{}

// ValidateCreate validates the creation of the resource
func (networkSecurityGroup *NetworkSecurityGroup) ValidateCreate() error {
	validations := networkSecurityGroup.createValidations()
	var temp interface{} = networkSecurityGroup
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (networkSecurityGroup *NetworkSecurityGroup) ValidateDelete() error {
	validations := networkSecurityGroup.deleteValidations()
	var temp interface{} = networkSecurityGroup
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (networkSecurityGroup *NetworkSecurityGroup) ValidateUpdate(old runtime.Object) error {
	validations := networkSecurityGroup.updateValidations()
	var temp interface{} = networkSecurityGroup
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (networkSecurityGroup *NetworkSecurityGroup) createValidations() []func() error {
	return []func() error{networkSecurityGroup.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (networkSecurityGroup *NetworkSecurityGroup) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (networkSecurityGroup *NetworkSecurityGroup) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return networkSecurityGroup.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (networkSecurityGroup *NetworkSecurityGroup) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&networkSecurityGroup.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromNetworkSecurityGroup populates our NetworkSecurityGroup from the provided source NetworkSecurityGroup
func (networkSecurityGroup *NetworkSecurityGroup) AssignPropertiesFromNetworkSecurityGroup(source *v1alpha1api20201101storage.NetworkSecurityGroup) error {

	// Spec
	var spec NetworkSecurityGroups_Spec
	err := spec.AssignPropertiesFromNetworkSecurityGroupsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromNetworkSecurityGroupsSpec()")
	}
	networkSecurityGroup.Spec = spec

	// Status
	var status NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded
	err = status.AssignPropertiesFromNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded()")
	}
	networkSecurityGroup.Status = status

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroup populates the provided destination NetworkSecurityGroup from our NetworkSecurityGroup
func (networkSecurityGroup *NetworkSecurityGroup) AssignPropertiesToNetworkSecurityGroup(destination *v1alpha1api20201101storage.NetworkSecurityGroup) error {

	// Spec
	var spec v1alpha1api20201101storage.NetworkSecurityGroups_Spec
	err := networkSecurityGroup.Spec.AssignPropertiesToNetworkSecurityGroupsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToNetworkSecurityGroupsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20201101storage.NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded
	err = networkSecurityGroup.Status.AssignPropertiesToNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (networkSecurityGroup *NetworkSecurityGroup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: networkSecurityGroup.Spec.OriginalVersion(),
		Kind:    "NetworkSecurityGroup",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/networkSecurityGroups
type NetworkSecurityGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkSecurityGroup `json:"items"`
}

//Generated from:
type NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DefaultSecurityRules: The default security rules of network security group.
	DefaultSecurityRules []SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded `json:"defaultSecurityRules,omitempty"`

	//Etag: A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	//FlowLogs: A collection of references to flow log resources.
	FlowLogs []FlowLog_Status_SubResourceEmbedded `json:"flowLogs,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`

	//Location: Resource location.
	Location *string `json:"location,omitempty"`

	//Name: Resource name.
	Name *string `json:"name,omitempty"`

	//NetworkInterfaces: A collection of references to network interfaces.
	NetworkInterfaces []NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded `json:"networkInterfaces,omitempty"`

	//ProvisioningState: The provisioning state of the network security group resource.
	ProvisioningState *ProvisioningState_Status `json:"provisioningState,omitempty"`

	//ResourceGuid: The resource GUID property of the network security group resource.
	ResourceGuid *string `json:"resourceGuid,omitempty"`

	//SecurityRules: A collection of security rules of the network security group.
	SecurityRules []SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded `json:"securityRules,omitempty"`

	//Subnets: A collection of references to subnets.
	Subnets []Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded `json:"subnets,omitempty"`

	//Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded{}

// ConvertStatusFrom populates our NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded from the provided source
func (networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded *NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20201101storage.NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded)
	if ok {
		// Populate our instance from source
		return networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.AssignPropertiesFromNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.AssignPropertiesFromNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded
func (networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded *NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20201101storage.NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded)
	if ok {
		// Populate destination from our instance
		return networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.AssignPropertiesToNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded{}
	err := networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.AssignPropertiesToNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded *NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded *NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbeddedARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DefaultSecurityRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DefaultSecurityRules {
			var item1 SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.DefaultSecurityRules = append(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.DefaultSecurityRules, item1)
		}
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Etag = &etag
	}

	// Set property ‘FlowLogs’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.FlowLogs {
			var item1 FlowLog_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.FlowLogs = append(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.FlowLogs, item1)
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Name = &name
	}

	// Set property ‘NetworkInterfaces’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NetworkInterfaces {
			var item1 NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.NetworkInterfaces = append(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.NetworkInterfaces, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘ResourceGuid’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceGuid != nil {
			resourceGuid := *typedInput.Properties.ResourceGuid
			networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.ResourceGuid = &resourceGuid
		}
	}

	// Set property ‘SecurityRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.SecurityRules {
			var item1 SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.SecurityRules = append(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.SecurityRules, item1)
		}
	}

	// Set property ‘Subnets’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Subnets {
			var item1 Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Subnets = append(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Subnets, item1)
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded populates our NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded from the provided source NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded
func (networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded *NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded) AssignPropertiesFromNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded(source *v1alpha1api20201101storage.NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded) error {

	// Conditions
	networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DefaultSecurityRules
	if source.DefaultSecurityRules != nil {
		defaultSecurityRuleList := make([]SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded, len(source.DefaultSecurityRules))
		for defaultSecurityRuleIndex, defaultSecurityRuleItem := range source.DefaultSecurityRules {
			// Shadow the loop variable to avoid aliasing
			defaultSecurityRuleItem := defaultSecurityRuleItem
			var defaultSecurityRule SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := defaultSecurityRule.AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded(&defaultSecurityRuleItem)
			if err != nil {
				return errors.Wrap(err, "populating DefaultSecurityRules from DefaultSecurityRules, calling AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded()")
			}
			defaultSecurityRuleList[defaultSecurityRuleIndex] = defaultSecurityRule
		}
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.DefaultSecurityRules = defaultSecurityRuleList
	} else {
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.DefaultSecurityRules = nil
	}

	// Etag
	networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Etag = genruntime.ClonePointerToString(source.Etag)

	// FlowLogs
	if source.FlowLogs != nil {
		flowLogList := make([]FlowLog_Status_SubResourceEmbedded, len(source.FlowLogs))
		for flowLogIndex, flowLogItem := range source.FlowLogs {
			// Shadow the loop variable to avoid aliasing
			flowLogItem := flowLogItem
			var flowLog FlowLog_Status_SubResourceEmbedded
			err := flowLog.AssignPropertiesFromFlowLogStatusSubResourceEmbedded(&flowLogItem)
			if err != nil {
				return errors.Wrap(err, "populating FlowLogs from FlowLogs, calling AssignPropertiesFromFlowLogStatusSubResourceEmbedded()")
			}
			flowLogList[flowLogIndex] = flowLog
		}
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.FlowLogs = flowLogList
	} else {
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.FlowLogs = nil
	}

	// Id
	networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkInterfaces
	if source.NetworkInterfaces != nil {
		networkInterfaceList := make([]NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded, len(source.NetworkInterfaces))
		for networkInterfaceIndex, networkInterfaceItem := range source.NetworkInterfaces {
			// Shadow the loop variable to avoid aliasing
			networkInterfaceItem := networkInterfaceItem
			var networkInterface NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := networkInterface.AssignPropertiesFromNetworkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded(&networkInterfaceItem)
			if err != nil {
				return errors.Wrap(err, "populating NetworkInterfaces from NetworkInterfaces, calling AssignPropertiesFromNetworkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded()")
			}
			networkInterfaceList[networkInterfaceIndex] = networkInterface
		}
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.NetworkInterfaces = networkInterfaceList
	} else {
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.NetworkInterfaces = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := ProvisioningState_Status(*source.ProvisioningState)
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.ProvisioningState = &provisioningState
	} else {
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.ProvisioningState = nil
	}

	// ResourceGuid
	networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.ResourceGuid = genruntime.ClonePointerToString(source.ResourceGuid)

	// SecurityRules
	if source.SecurityRules != nil {
		securityRuleList := make([]SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded, len(source.SecurityRules))
		for securityRuleIndex, securityRuleItem := range source.SecurityRules {
			// Shadow the loop variable to avoid aliasing
			securityRuleItem := securityRuleItem
			var securityRule SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := securityRule.AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded(&securityRuleItem)
			if err != nil {
				return errors.Wrap(err, "populating SecurityRules from SecurityRules, calling AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded()")
			}
			securityRuleList[securityRuleIndex] = securityRule
		}
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.SecurityRules = securityRuleList
	} else {
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.SecurityRules = nil
	}

	// Subnets
	if source.Subnets != nil {
		subnetList := make([]Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded, len(source.Subnets))
		for subnetIndex, subnetItem := range source.Subnets {
			// Shadow the loop variable to avoid aliasing
			subnetItem := subnetItem
			var subnet Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := subnet.AssignPropertiesFromSubnetStatusNetworkSecurityGroupSubResourceEmbedded(&subnetItem)
			if err != nil {
				return errors.Wrap(err, "populating Subnets from Subnets, calling AssignPropertiesFromSubnetStatusNetworkSecurityGroupSubResourceEmbedded()")
			}
			subnetList[subnetIndex] = subnet
		}
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Subnets = subnetList
	} else {
		networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Subnets = nil
	}

	// Tags
	networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded populates the provided destination NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded from our NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded
func (networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded *NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded) AssignPropertiesToNetworkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded(destination *v1alpha1api20201101storage.NetworkSecurityGroup_Status_NetworkSecurityGroup_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Conditions)

	// DefaultSecurityRules
	if networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.DefaultSecurityRules != nil {
		defaultSecurityRuleList := make([]v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded, len(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.DefaultSecurityRules))
		for defaultSecurityRuleIndex, defaultSecurityRuleItem := range networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.DefaultSecurityRules {
			// Shadow the loop variable to avoid aliasing
			defaultSecurityRuleItem := defaultSecurityRuleItem
			var defaultSecurityRule v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := defaultSecurityRuleItem.AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded(&defaultSecurityRule)
			if err != nil {
				return errors.Wrap(err, "populating DefaultSecurityRules from DefaultSecurityRules, calling AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded()")
			}
			defaultSecurityRuleList[defaultSecurityRuleIndex] = defaultSecurityRule
		}
		destination.DefaultSecurityRules = defaultSecurityRuleList
	} else {
		destination.DefaultSecurityRules = nil
	}

	// Etag
	destination.Etag = genruntime.ClonePointerToString(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Etag)

	// FlowLogs
	if networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.FlowLogs != nil {
		flowLogList := make([]v1alpha1api20201101storage.FlowLog_Status_SubResourceEmbedded, len(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.FlowLogs))
		for flowLogIndex, flowLogItem := range networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.FlowLogs {
			// Shadow the loop variable to avoid aliasing
			flowLogItem := flowLogItem
			var flowLog v1alpha1api20201101storage.FlowLog_Status_SubResourceEmbedded
			err := flowLogItem.AssignPropertiesToFlowLogStatusSubResourceEmbedded(&flowLog)
			if err != nil {
				return errors.Wrap(err, "populating FlowLogs from FlowLogs, calling AssignPropertiesToFlowLogStatusSubResourceEmbedded()")
			}
			flowLogList[flowLogIndex] = flowLog
		}
		destination.FlowLogs = flowLogList
	} else {
		destination.FlowLogs = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Name)

	// NetworkInterfaces
	if networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.NetworkInterfaces != nil {
		networkInterfaceList := make([]v1alpha1api20201101storage.NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded, len(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.NetworkInterfaces))
		for networkInterfaceIndex, networkInterfaceItem := range networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.NetworkInterfaces {
			// Shadow the loop variable to avoid aliasing
			networkInterfaceItem := networkInterfaceItem
			var networkInterface v1alpha1api20201101storage.NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := networkInterfaceItem.AssignPropertiesToNetworkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded(&networkInterface)
			if err != nil {
				return errors.Wrap(err, "populating NetworkInterfaces from NetworkInterfaces, calling AssignPropertiesToNetworkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded()")
			}
			networkInterfaceList[networkInterfaceIndex] = networkInterface
		}
		destination.NetworkInterfaces = networkInterfaceList
	} else {
		destination.NetworkInterfaces = nil
	}

	// ProvisioningState
	if networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.ProvisioningState != nil {
		provisioningState := string(*networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// ResourceGuid
	destination.ResourceGuid = genruntime.ClonePointerToString(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.ResourceGuid)

	// SecurityRules
	if networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.SecurityRules != nil {
		securityRuleList := make([]v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded, len(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.SecurityRules))
		for securityRuleIndex, securityRuleItem := range networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.SecurityRules {
			// Shadow the loop variable to avoid aliasing
			securityRuleItem := securityRuleItem
			var securityRule v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := securityRuleItem.AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded(&securityRule)
			if err != nil {
				return errors.Wrap(err, "populating SecurityRules from SecurityRules, calling AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded()")
			}
			securityRuleList[securityRuleIndex] = securityRule
		}
		destination.SecurityRules = securityRuleList
	} else {
		destination.SecurityRules = nil
	}

	// Subnets
	if networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Subnets != nil {
		subnetList := make([]v1alpha1api20201101storage.Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded, len(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Subnets))
		for subnetIndex, subnetItem := range networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Subnets {
			// Shadow the loop variable to avoid aliasing
			subnetItem := subnetItem
			var subnet v1alpha1api20201101storage.Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded
			err := subnetItem.AssignPropertiesToSubnetStatusNetworkSecurityGroupSubResourceEmbedded(&subnet)
			if err != nil {
				return errors.Wrap(err, "populating Subnets from Subnets, calling AssignPropertiesToSubnetStatusNetworkSecurityGroupSubResourceEmbedded()")
			}
			subnetList[subnetIndex] = subnet
		}
		destination.Subnets = subnetList
	} else {
		destination.Subnets = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(networkSecurityGroupStatusNetworkSecurityGroupSubResourceEmbedded.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"2020-11-01"}
type NetworkSecurityGroupsSpecAPIVersion string

const NetworkSecurityGroupsSpecAPIVersion20201101 = NetworkSecurityGroupsSpecAPIVersion("2020-11-01")

type NetworkSecurityGroups_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: Location to deploy resource to
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkSecurityGroups_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (networkSecurityGroupsSpec *NetworkSecurityGroups_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if networkSecurityGroupsSpec == nil {
		return nil, nil
	}
	var result NetworkSecurityGroups_SpecARM

	// Set property ‘Location’:
	result.Location = networkSecurityGroupsSpec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Tags’:
	if networkSecurityGroupsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range networkSecurityGroupsSpec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkSecurityGroupsSpec *NetworkSecurityGroups_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkSecurityGroups_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkSecurityGroupsSpec *NetworkSecurityGroups_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkSecurityGroups_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkSecurityGroups_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	networkSecurityGroupsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	networkSecurityGroupsSpec.Location = typedInput.Location

	// Set property ‘Owner’:
	networkSecurityGroupsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		networkSecurityGroupsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			networkSecurityGroupsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &NetworkSecurityGroups_Spec{}

// ConvertSpecFrom populates our NetworkSecurityGroups_Spec from the provided source
func (networkSecurityGroupsSpec *NetworkSecurityGroups_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20201101storage.NetworkSecurityGroups_Spec)
	if ok {
		// Populate our instance from source
		return networkSecurityGroupsSpec.AssignPropertiesFromNetworkSecurityGroupsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20201101storage.NetworkSecurityGroups_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = networkSecurityGroupsSpec.AssignPropertiesFromNetworkSecurityGroupsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our NetworkSecurityGroups_Spec
func (networkSecurityGroupsSpec *NetworkSecurityGroups_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20201101storage.NetworkSecurityGroups_Spec)
	if ok {
		// Populate destination from our instance
		return networkSecurityGroupsSpec.AssignPropertiesToNetworkSecurityGroupsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20201101storage.NetworkSecurityGroups_Spec{}
	err := networkSecurityGroupsSpec.AssignPropertiesToNetworkSecurityGroupsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromNetworkSecurityGroupsSpec populates our NetworkSecurityGroups_Spec from the provided source NetworkSecurityGroups_Spec
func (networkSecurityGroupsSpec *NetworkSecurityGroups_Spec) AssignPropertiesFromNetworkSecurityGroupsSpec(source *v1alpha1api20201101storage.NetworkSecurityGroups_Spec) error {

	// AzureName
	networkSecurityGroupsSpec.AzureName = source.AzureName

	// Location
	networkSecurityGroupsSpec.Location = genruntime.GetOptionalStringValue(source.Location)

	// Owner
	networkSecurityGroupsSpec.Owner = source.Owner.Copy()

	// Tags
	networkSecurityGroupsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToNetworkSecurityGroupsSpec populates the provided destination NetworkSecurityGroups_Spec from our NetworkSecurityGroups_Spec
func (networkSecurityGroupsSpec *NetworkSecurityGroups_Spec) AssignPropertiesToNetworkSecurityGroupsSpec(destination *v1alpha1api20201101storage.NetworkSecurityGroups_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = networkSecurityGroupsSpec.AzureName

	// Location
	location := networkSecurityGroupsSpec.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = networkSecurityGroupsSpec.OriginalVersion()

	// Owner
	destination.Owner = networkSecurityGroupsSpec.Owner.Copy()

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(networkSecurityGroupsSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (networkSecurityGroupsSpec *NetworkSecurityGroups_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (networkSecurityGroupsSpec *NetworkSecurityGroups_Spec) SetAzureName(azureName string) {
	networkSecurityGroupsSpec.AzureName = azureName
}

//Generated from:
type FlowLog_Status_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &FlowLog_Status_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (flowLogStatusSubResourceEmbedded *FlowLog_Status_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &FlowLog_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (flowLogStatusSubResourceEmbedded *FlowLog_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FlowLog_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FlowLog_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		flowLogStatusSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromFlowLogStatusSubResourceEmbedded populates our FlowLog_Status_SubResourceEmbedded from the provided source FlowLog_Status_SubResourceEmbedded
func (flowLogStatusSubResourceEmbedded *FlowLog_Status_SubResourceEmbedded) AssignPropertiesFromFlowLogStatusSubResourceEmbedded(source *v1alpha1api20201101storage.FlowLog_Status_SubResourceEmbedded) error {

	// Id
	flowLogStatusSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToFlowLogStatusSubResourceEmbedded populates the provided destination FlowLog_Status_SubResourceEmbedded from our FlowLog_Status_SubResourceEmbedded
func (flowLogStatusSubResourceEmbedded *FlowLog_Status_SubResourceEmbedded) AssignPropertiesToFlowLogStatusSubResourceEmbedded(destination *v1alpha1api20201101storage.FlowLog_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(flowLogStatusSubResourceEmbedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded struct {
	//ExtendedLocation: The extended location of the network interface.
	ExtendedLocation *ExtendedLocation_Status `json:"extendedLocation,omitempty"`

	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded *NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded *NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘ExtendedLocation’:
	if typedInput.ExtendedLocation != nil {
		var extendedLocation1 ExtendedLocation_Status
		err := extendedLocation1.PopulateFromARM(owner, *typedInput.ExtendedLocation)
		if err != nil {
			return err
		}
		extendedLocation := extendedLocation1
		networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded.ExtendedLocation = &extendedLocation
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded populates our NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded from the provided source NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded
func (networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded *NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded) AssignPropertiesFromNetworkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded(source *v1alpha1api20201101storage.NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded) error {

	// ExtendedLocation
	if source.ExtendedLocation != nil {
		var extendedLocation ExtendedLocation_Status
		err := extendedLocation.AssignPropertiesFromExtendedLocationStatus(source.ExtendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesFromExtendedLocationStatus()")
		}
		networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded.ExtendedLocation = &extendedLocation
	} else {
		networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded.ExtendedLocation = nil
	}

	// Id
	networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToNetworkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded populates the provided destination NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded from our NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded
func (networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded *NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded) AssignPropertiesToNetworkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded(destination *v1alpha1api20201101storage.NetworkInterface_Status_NetworkSecurityGroup_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExtendedLocation
	if networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded.ExtendedLocation != nil {
		var extendedLocation v1alpha1api20201101storage.ExtendedLocation_Status
		err := (*networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded.ExtendedLocation).AssignPropertiesToExtendedLocationStatus(&extendedLocation)
		if err != nil {
			return errors.Wrap(err, "populating ExtendedLocation from ExtendedLocation, calling AssignPropertiesToExtendedLocationStatus()")
		}
		destination.ExtendedLocation = &extendedLocation
	} else {
		destination.ExtendedLocation = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(networkInterfaceStatusNetworkSecurityGroupSubResourceEmbedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (securityRuleStatusNetworkSecurityGroupSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (securityRuleStatusNetworkSecurityGroupSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		securityRuleStatusNetworkSecurityGroupSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded populates our SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded from the provided source SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded
func (securityRuleStatusNetworkSecurityGroupSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded) AssignPropertiesFromSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded(source *v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded) error {

	// Id
	securityRuleStatusNetworkSecurityGroupSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded populates the provided destination SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded from our SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded
func (securityRuleStatusNetworkSecurityGroupSubResourceEmbedded *SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded) AssignPropertiesToSecurityRuleStatusNetworkSecurityGroupSubResourceEmbedded(destination *v1alpha1api20201101storage.SecurityRule_Status_NetworkSecurityGroup_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(securityRuleStatusNetworkSecurityGroupSubResourceEmbedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded struct {
	//Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (subnetStatusNetworkSecurityGroupSubResourceEmbedded *Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (subnetStatusNetworkSecurityGroupSubResourceEmbedded *Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Subnet_Status_NetworkSecurityGroup_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		subnetStatusNetworkSecurityGroupSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromSubnetStatusNetworkSecurityGroupSubResourceEmbedded populates our Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded from the provided source Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded
func (subnetStatusNetworkSecurityGroupSubResourceEmbedded *Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded) AssignPropertiesFromSubnetStatusNetworkSecurityGroupSubResourceEmbedded(source *v1alpha1api20201101storage.Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded) error {

	// Id
	subnetStatusNetworkSecurityGroupSubResourceEmbedded.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToSubnetStatusNetworkSecurityGroupSubResourceEmbedded populates the provided destination Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded from our Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded
func (subnetStatusNetworkSecurityGroupSubResourceEmbedded *Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded) AssignPropertiesToSubnetStatusNetworkSecurityGroupSubResourceEmbedded(destination *v1alpha1api20201101storage.Subnet_Status_NetworkSecurityGroup_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(subnetStatusNetworkSecurityGroupSubResourceEmbedded.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&NetworkSecurityGroup{}, &NetworkSecurityGroupList{})
}
