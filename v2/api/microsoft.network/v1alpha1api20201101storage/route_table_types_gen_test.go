// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RouteTable_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTable, RouteTableGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTable runs a test to see if a specific instance of RouteTable round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTable(subject RouteTable) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable instances for property testing - lazily instantiated by RouteTableGenerator()
var routeTableGenerator gopter.Gen

// RouteTableGenerator returns a generator of RouteTable instances for property testing.
func RouteTableGenerator() gopter.Gen {
	if routeTableGenerator != nil {
		return routeTableGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRouteTable(generators)
	routeTableGenerator = gen.Struct(reflect.TypeOf(RouteTable{}), generators)

	return routeTableGenerator
}

// AddRelatedPropertyGeneratorsForRouteTable is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTable(gens map[string]gopter.Gen) {
	gens["Spec"] = RouteTablesSpecGenerator()
	gens["Status"] = RouteTableStatusRouteTableSubResourceEmbeddedGenerator()
}

func Test_RouteTable_Status_RouteTable_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTable_Status_RouteTable_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTableStatusRouteTableSubResourceEmbedded, RouteTableStatusRouteTableSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTableStatusRouteTableSubResourceEmbedded runs a test to see if a specific instance of RouteTable_Status_RouteTable_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTableStatusRouteTableSubResourceEmbedded(subject RouteTable_Status_RouteTable_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTable_Status_RouteTable_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTable_Status_RouteTable_SubResourceEmbedded instances for property testing - lazily instantiated by
//RouteTableStatusRouteTableSubResourceEmbeddedGenerator()
var routeTableStatusRouteTableSubResourceEmbeddedGenerator gopter.Gen

// RouteTableStatusRouteTableSubResourceEmbeddedGenerator returns a generator of RouteTable_Status_RouteTable_SubResourceEmbedded instances for property testing.
// We first initialize routeTableStatusRouteTableSubResourceEmbeddedGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RouteTableStatusRouteTableSubResourceEmbeddedGenerator() gopter.Gen {
	if routeTableStatusRouteTableSubResourceEmbeddedGenerator != nil {
		return routeTableStatusRouteTableSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbedded(generators)
	routeTableStatusRouteTableSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(RouteTable_Status_RouteTable_SubResourceEmbedded{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbedded(generators)
	AddRelatedPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbedded(generators)
	routeTableStatusRouteTableSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(RouteTable_Status_RouteTable_SubResourceEmbedded{}), generators)

	return routeTableStatusRouteTableSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceGuid"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbedded is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteTableStatusRouteTableSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Routes"] = gen.SliceOf(RouteStatusSubResourceEmbeddedGenerator())
	gens["Subnets"] = gen.SliceOf(SubnetStatusRouteTableSubResourceEmbeddedGenerator())
}

func Test_RouteTables_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteTables_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteTablesSpec, RouteTablesSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteTablesSpec runs a test to see if a specific instance of RouteTables_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteTablesSpec(subject RouteTables_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteTables_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteTables_Spec instances for property testing - lazily instantiated by RouteTablesSpecGenerator()
var routeTablesSpecGenerator gopter.Gen

// RouteTablesSpecGenerator returns a generator of RouteTables_Spec instances for property testing.
func RouteTablesSpecGenerator() gopter.Gen {
	if routeTablesSpecGenerator != nil {
		return routeTablesSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteTablesSpec(generators)
	routeTablesSpecGenerator = gen.Struct(reflect.TypeOf(RouteTables_Spec{}), generators)

	return routeTablesSpecGenerator
}

// AddIndependentPropertyGeneratorsForRouteTablesSpec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteTablesSpec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["DisableBgpRoutePropagation"] = gen.PtrOf(gen.Bool())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_Route_Status_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Route_Status_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteStatusSubResourceEmbedded, RouteStatusSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteStatusSubResourceEmbedded runs a test to see if a specific instance of Route_Status_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteStatusSubResourceEmbedded(subject Route_Status_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Route_Status_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Route_Status_SubResourceEmbedded instances for property testing - lazily instantiated by
//RouteStatusSubResourceEmbeddedGenerator()
var routeStatusSubResourceEmbeddedGenerator gopter.Gen

// RouteStatusSubResourceEmbeddedGenerator returns a generator of Route_Status_SubResourceEmbedded instances for property testing.
func RouteStatusSubResourceEmbeddedGenerator() gopter.Gen {
	if routeStatusSubResourceEmbeddedGenerator != nil {
		return routeStatusSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRouteStatusSubResourceEmbedded(generators)
	routeStatusSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(Route_Status_SubResourceEmbedded{}), generators)

	return routeStatusSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForRouteStatusSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRouteStatusSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_Subnet_Status_RouteTable_SubResourceEmbedded_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Subnet_Status_RouteTable_SubResourceEmbedded via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubnetStatusRouteTableSubResourceEmbedded, SubnetStatusRouteTableSubResourceEmbeddedGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubnetStatusRouteTableSubResourceEmbedded runs a test to see if a specific instance of Subnet_Status_RouteTable_SubResourceEmbedded round trips to JSON and back losslessly
func RunJSONSerializationTestForSubnetStatusRouteTableSubResourceEmbedded(subject Subnet_Status_RouteTable_SubResourceEmbedded) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Subnet_Status_RouteTable_SubResourceEmbedded
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Subnet_Status_RouteTable_SubResourceEmbedded instances for property testing - lazily instantiated by
//SubnetStatusRouteTableSubResourceEmbeddedGenerator()
var subnetStatusRouteTableSubResourceEmbeddedGenerator gopter.Gen

// SubnetStatusRouteTableSubResourceEmbeddedGenerator returns a generator of Subnet_Status_RouteTable_SubResourceEmbedded instances for property testing.
func SubnetStatusRouteTableSubResourceEmbeddedGenerator() gopter.Gen {
	if subnetStatusRouteTableSubResourceEmbeddedGenerator != nil {
		return subnetStatusRouteTableSubResourceEmbeddedGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubnetStatusRouteTableSubResourceEmbedded(generators)
	subnetStatusRouteTableSubResourceEmbeddedGenerator = gen.Struct(reflect.TypeOf(Subnet_Status_RouteTable_SubResourceEmbedded{}), generators)

	return subnetStatusRouteTableSubResourceEmbeddedGenerator
}

// AddIndependentPropertyGeneratorsForSubnetStatusRouteTableSubResourceEmbedded is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubnetStatusRouteTableSubResourceEmbedded(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
