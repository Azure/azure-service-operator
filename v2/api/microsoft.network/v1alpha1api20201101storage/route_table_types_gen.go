// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20201101storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Storage version of v1alpha1api20201101.RouteTable
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/routeTables
type RouteTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteTables_Spec                                 `json:"spec,omitempty"`
	Status            RouteTable_Status_RouteTable_SubResourceEmbedded `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RouteTable{}

// GetConditions returns the conditions of the resource
func (routeTable *RouteTable) GetConditions() conditions.Conditions {
	return routeTable.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (routeTable *RouteTable) SetConditions(conditions conditions.Conditions) {
	routeTable.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &RouteTable{}

// AzureName returns the Azure name of the resource
func (routeTable *RouteTable) AzureName() string {
	return routeTable.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (routeTable *RouteTable) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (routeTable *RouteTable) GetSpec() genruntime.ConvertibleSpec {
	return &routeTable.Spec
}

// GetStatus returns the status of this resource
func (routeTable *RouteTable) GetStatus() genruntime.ConvertibleStatus {
	return &routeTable.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/routeTables"
func (routeTable *RouteTable) GetType() string {
	return "Microsoft.Network/routeTables"
}

// NewEmptyStatus returns a new empty (blank) status
func (routeTable *RouteTable) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &RouteTable_Status_RouteTable_SubResourceEmbedded{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (routeTable *RouteTable) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(routeTable.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: routeTable.Namespace,
		Name:      routeTable.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (routeTable *RouteTable) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RouteTable_Status_RouteTable_SubResourceEmbedded); ok {
		routeTable.Status = *st
		return nil
	}

	// Convert status to required version
	var st RouteTable_Status_RouteTable_SubResourceEmbedded
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	routeTable.Status = st
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (routeTable *RouteTable) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: routeTable.Spec.OriginalVersion,
		Kind:    "RouteTable",
	}
}

// +kubebuilder:object:root=true
//Storage version of v1alpha1api20201101.RouteTable
//Generated from: https://schema.management.azure.com/schemas/2020-11-01/Microsoft.Network.json#/resourceDefinitions/routeTables
type RouteTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteTable `json:"items"`
}

//Storage version of v1alpha1api20201101.RouteTable_Status_RouteTable_SubResourceEmbedded
//Generated from:
type RouteTable_Status_RouteTable_SubResourceEmbedded struct {
	Conditions                 []conditions.Condition                         `json:"conditions,omitempty"`
	DisableBgpRoutePropagation *bool                                          `json:"disableBgpRoutePropagation,omitempty"`
	Etag                       *string                                        `json:"etag,omitempty"`
	Id                         *string                                        `json:"id,omitempty"`
	Location                   *string                                        `json:"location,omitempty"`
	Name                       *string                                        `json:"name,omitempty"`
	PropertyBag                genruntime.PropertyBag                         `json:"$propertyBag,omitempty"`
	ProvisioningState          *string                                        `json:"provisioningState,omitempty"`
	ResourceGuid               *string                                        `json:"resourceGuid,omitempty"`
	Routes                     []Route_Status_SubResourceEmbedded             `json:"routes,omitempty"`
	Subnets                    []Subnet_Status_RouteTable_SubResourceEmbedded `json:"subnets,omitempty"`
	Tags                       map[string]string                              `json:"tags,omitempty"`
	Type                       *string                                        `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RouteTable_Status_RouteTable_SubResourceEmbedded{}

// ConvertStatusFrom populates our RouteTable_Status_RouteTable_SubResourceEmbedded from the provided source
func (routeTableStatusRouteTableSubResourceEmbedded *RouteTable_Status_RouteTable_SubResourceEmbedded) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == routeTableStatusRouteTableSubResourceEmbedded {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(routeTableStatusRouteTableSubResourceEmbedded)
}

// ConvertStatusTo populates the provided destination from our RouteTable_Status_RouteTable_SubResourceEmbedded
func (routeTableStatusRouteTableSubResourceEmbedded *RouteTable_Status_RouteTable_SubResourceEmbedded) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == routeTableStatusRouteTableSubResourceEmbedded {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(routeTableStatusRouteTableSubResourceEmbedded)
}

//Storage version of v1alpha1api20201101.RouteTables_Spec
type RouteTables_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName                  string  `json:"azureName"`
	DisableBgpRoutePropagation *bool   `json:"disableBgpRoutePropagation,omitempty"`
	Location                   *string `json:"location,omitempty"`
	OriginalVersion            string  `json:"originalVersion"`

	// +kubebuilder:validation:Required
	Owner       genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`
	PropertyBag genruntime.PropertyBag            `json:"$propertyBag,omitempty"`
	Tags        map[string]string                 `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &RouteTables_Spec{}

// ConvertSpecFrom populates our RouteTables_Spec from the provided source
func (routeTablesSpec *RouteTables_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == routeTablesSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(routeTablesSpec)
}

// ConvertSpecTo populates the provided destination from our RouteTables_Spec
func (routeTablesSpec *RouteTables_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == routeTablesSpec {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(routeTablesSpec)
}

//Storage version of v1alpha1api20201101.Route_Status_SubResourceEmbedded
//Generated from:
type Route_Status_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

//Storage version of v1alpha1api20201101.Subnet_Status_RouteTable_SubResourceEmbedded
//Generated from:
type Subnet_Status_RouteTable_SubResourceEmbedded struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

func init() {
	SchemeBuilder.Register(&RouteTable{}, &RouteTableList{})
}
