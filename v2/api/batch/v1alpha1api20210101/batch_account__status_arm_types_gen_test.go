// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_BatchAccount_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BatchAccount_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBatchAccount_StatusARM, BatchAccount_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBatchAccount_StatusARM runs a test to see if a specific instance of BatchAccount_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBatchAccount_StatusARM(subject BatchAccount_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BatchAccount_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BatchAccount_StatusARM instances for property testing - lazily instantiated by
//BatchAccount_StatusARMGenerator()
var batchAccount_statusARMGenerator gopter.Gen

// BatchAccount_StatusARMGenerator returns a generator of BatchAccount_StatusARM instances for property testing.
// We first initialize batchAccount_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BatchAccount_StatusARMGenerator() gopter.Gen {
	if batchAccount_statusARMGenerator != nil {
		return batchAccount_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccount_StatusARM(generators)
	batchAccount_statusARMGenerator = gen.Struct(reflect.TypeOf(BatchAccount_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccount_StatusARM(generators)
	AddRelatedPropertyGeneratorsForBatchAccount_StatusARM(generators)
	batchAccount_statusARMGenerator = gen.Struct(reflect.TypeOf(BatchAccount_StatusARM{}), generators)

	return batchAccount_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForBatchAccount_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBatchAccount_StatusARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForBatchAccount_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBatchAccount_StatusARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(BatchAccountIdentity_StatusARMGenerator())
	gens["Properties"] = gen.PtrOf(BatchAccountProperties_StatusARMGenerator())
}

func Test_BatchAccountIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BatchAccountIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBatchAccountIdentity_StatusARM, BatchAccountIdentity_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBatchAccountIdentity_StatusARM runs a test to see if a specific instance of BatchAccountIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBatchAccountIdentity_StatusARM(subject BatchAccountIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BatchAccountIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BatchAccountIdentity_StatusARM instances for property testing - lazily instantiated by
//BatchAccountIdentity_StatusARMGenerator()
var batchAccountIdentity_statusARMGenerator gopter.Gen

// BatchAccountIdentity_StatusARMGenerator returns a generator of BatchAccountIdentity_StatusARM instances for property testing.
// We first initialize batchAccountIdentity_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BatchAccountIdentity_StatusARMGenerator() gopter.Gen {
	if batchAccountIdentity_statusARMGenerator != nil {
		return batchAccountIdentity_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountIdentity_StatusARM(generators)
	batchAccountIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(BatchAccountIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountIdentity_StatusARM(generators)
	AddRelatedPropertyGeneratorsForBatchAccountIdentity_StatusARM(generators)
	batchAccountIdentity_statusARMGenerator = gen.Struct(reflect.TypeOf(BatchAccountIdentity_StatusARM{}), generators)

	return batchAccountIdentity_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForBatchAccountIdentity_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBatchAccountIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.OneConstOf(BatchAccountIdentity_Type_StatusNone, BatchAccountIdentity_Type_StatusSystemAssigned, BatchAccountIdentity_Type_StatusUserAssigned)
}

// AddRelatedPropertyGeneratorsForBatchAccountIdentity_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBatchAccountIdentity_StatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), BatchAccountIdentity_UserAssignedIdentities_StatusARMGenerator())
}

func Test_BatchAccountProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BatchAccountProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBatchAccountProperties_StatusARM, BatchAccountProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBatchAccountProperties_StatusARM runs a test to see if a specific instance of BatchAccountProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBatchAccountProperties_StatusARM(subject BatchAccountProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BatchAccountProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BatchAccountProperties_StatusARM instances for property testing - lazily instantiated by
//BatchAccountProperties_StatusARMGenerator()
var batchAccountProperties_statusARMGenerator gopter.Gen

// BatchAccountProperties_StatusARMGenerator returns a generator of BatchAccountProperties_StatusARM instances for property testing.
// We first initialize batchAccountProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func BatchAccountProperties_StatusARMGenerator() gopter.Gen {
	if batchAccountProperties_statusARMGenerator != nil {
		return batchAccountProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountProperties_StatusARM(generators)
	batchAccountProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(BatchAccountProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForBatchAccountProperties_StatusARM(generators)
	batchAccountProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(BatchAccountProperties_StatusARM{}), generators)

	return batchAccountProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForBatchAccountProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBatchAccountProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["PoolAllocationMode"] = gen.PtrOf(gen.OneConstOf(PoolAllocationMode_StatusBatchService, PoolAllocationMode_StatusUserSubscription))
	gens["PublicNetworkAccess"] = gen.PtrOf(gen.OneConstOf(PublicNetworkAccessType_StatusDisabled, PublicNetworkAccessType_StatusEnabled))
}

// AddRelatedPropertyGeneratorsForBatchAccountProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForBatchAccountProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["AutoStorage"] = gen.PtrOf(AutoStorageBaseProperties_StatusARMGenerator())
	gens["Encryption"] = gen.PtrOf(EncryptionProperties_StatusARMGenerator())
	gens["KeyVaultReference"] = gen.PtrOf(KeyVaultReference_StatusARMGenerator())
}

func Test_AutoStorageBaseProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AutoStorageBaseProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAutoStorageBaseProperties_StatusARM, AutoStorageBaseProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAutoStorageBaseProperties_StatusARM runs a test to see if a specific instance of AutoStorageBaseProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAutoStorageBaseProperties_StatusARM(subject AutoStorageBaseProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AutoStorageBaseProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AutoStorageBaseProperties_StatusARM instances for property testing - lazily instantiated by
//AutoStorageBaseProperties_StatusARMGenerator()
var autoStorageBaseProperties_statusARMGenerator gopter.Gen

// AutoStorageBaseProperties_StatusARMGenerator returns a generator of AutoStorageBaseProperties_StatusARM instances for property testing.
func AutoStorageBaseProperties_StatusARMGenerator() gopter.Gen {
	if autoStorageBaseProperties_statusARMGenerator != nil {
		return autoStorageBaseProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAutoStorageBaseProperties_StatusARM(generators)
	autoStorageBaseProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(AutoStorageBaseProperties_StatusARM{}), generators)

	return autoStorageBaseProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForAutoStorageBaseProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAutoStorageBaseProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["StorageAccountId"] = gen.AlphaString()
}

func Test_BatchAccountIdentity_UserAssignedIdentities_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BatchAccountIdentity_UserAssignedIdentities_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBatchAccountIdentity_UserAssignedIdentities_StatusARM, BatchAccountIdentity_UserAssignedIdentities_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBatchAccountIdentity_UserAssignedIdentities_StatusARM runs a test to see if a specific instance of BatchAccountIdentity_UserAssignedIdentities_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBatchAccountIdentity_UserAssignedIdentities_StatusARM(subject BatchAccountIdentity_UserAssignedIdentities_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BatchAccountIdentity_UserAssignedIdentities_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BatchAccountIdentity_UserAssignedIdentities_StatusARM instances for property testing - lazily
//instantiated by BatchAccountIdentity_UserAssignedIdentities_StatusARMGenerator()
var batchAccountIdentity_userAssignedIdentities_statusARMGenerator gopter.Gen

// BatchAccountIdentity_UserAssignedIdentities_StatusARMGenerator returns a generator of BatchAccountIdentity_UserAssignedIdentities_StatusARM instances for property testing.
func BatchAccountIdentity_UserAssignedIdentities_StatusARMGenerator() gopter.Gen {
	if batchAccountIdentity_userAssignedIdentities_statusARMGenerator != nil {
		return batchAccountIdentity_userAssignedIdentities_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBatchAccountIdentity_UserAssignedIdentities_StatusARM(generators)
	batchAccountIdentity_userAssignedIdentities_statusARMGenerator = gen.Struct(reflect.TypeOf(BatchAccountIdentity_UserAssignedIdentities_StatusARM{}), generators)

	return batchAccountIdentity_userAssignedIdentities_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForBatchAccountIdentity_UserAssignedIdentities_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBatchAccountIdentity_UserAssignedIdentities_StatusARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_EncryptionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionProperties_StatusARM, EncryptionProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionProperties_StatusARM runs a test to see if a specific instance of EncryptionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionProperties_StatusARM(subject EncryptionProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionProperties_StatusARM instances for property testing - lazily instantiated by
//EncryptionProperties_StatusARMGenerator()
var encryptionProperties_statusARMGenerator gopter.Gen

// EncryptionProperties_StatusARMGenerator returns a generator of EncryptionProperties_StatusARM instances for property testing.
// We first initialize encryptionProperties_statusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func EncryptionProperties_StatusARMGenerator() gopter.Gen {
	if encryptionProperties_statusARMGenerator != nil {
		return encryptionProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionProperties_StatusARM(generators)
	encryptionProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionProperties_StatusARM(generators)
	AddRelatedPropertyGeneratorsForEncryptionProperties_StatusARM(generators)
	encryptionProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperties_StatusARM{}), generators)

	return encryptionProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["KeySource"] = gen.PtrOf(gen.OneConstOf(EncryptionProperties_KeySource_StatusMicrosoftBatch, EncryptionProperties_KeySource_StatusMicrosoftKeyVault))
}

// AddRelatedPropertyGeneratorsForEncryptionProperties_StatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForEncryptionProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["KeyVaultProperties"] = gen.PtrOf(KeyVaultProperties_StatusARMGenerator())
}

func Test_KeyVaultReference_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultReference_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultReference_StatusARM, KeyVaultReference_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultReference_StatusARM runs a test to see if a specific instance of KeyVaultReference_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultReference_StatusARM(subject KeyVaultReference_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultReference_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultReference_StatusARM instances for property testing - lazily instantiated by
//KeyVaultReference_StatusARMGenerator()
var keyVaultReference_statusARMGenerator gopter.Gen

// KeyVaultReference_StatusARMGenerator returns a generator of KeyVaultReference_StatusARM instances for property testing.
func KeyVaultReference_StatusARMGenerator() gopter.Gen {
	if keyVaultReference_statusARMGenerator != nil {
		return keyVaultReference_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultReference_StatusARM(generators)
	keyVaultReference_statusARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultReference_StatusARM{}), generators)

	return keyVaultReference_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultReference_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultReference_StatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.AlphaString()
	gens["Url"] = gen.AlphaString()
}

func Test_KeyVaultProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KeyVaultProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKeyVaultProperties_StatusARM, KeyVaultProperties_StatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKeyVaultProperties_StatusARM runs a test to see if a specific instance of KeyVaultProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKeyVaultProperties_StatusARM(subject KeyVaultProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KeyVaultProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KeyVaultProperties_StatusARM instances for property testing - lazily instantiated by
//KeyVaultProperties_StatusARMGenerator()
var keyVaultProperties_statusARMGenerator gopter.Gen

// KeyVaultProperties_StatusARMGenerator returns a generator of KeyVaultProperties_StatusARM instances for property testing.
func KeyVaultProperties_StatusARMGenerator() gopter.Gen {
	if keyVaultProperties_statusARMGenerator != nil {
		return keyVaultProperties_statusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKeyVaultProperties_StatusARM(generators)
	keyVaultProperties_statusARMGenerator = gen.Struct(reflect.TypeOf(KeyVaultProperties_StatusARM{}), generators)

	return keyVaultProperties_statusARMGenerator
}

// AddIndependentPropertyGeneratorsForKeyVaultProperties_StatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKeyVaultProperties_StatusARM(gens map[string]gopter.Gen) {
	gens["KeyIdentifier"] = gen.PtrOf(gen.AlphaString())
}
