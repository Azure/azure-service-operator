// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101

import (
	"fmt"
	alpha20210101s "github.com/Azure/azure-service-operator/v2/api/batch/v1alpha1api20210101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of BatchAccount. Use v1beta20210101.BatchAccount instead
type BatchAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchAccounts_Spec  `json:"spec,omitempty"`
	Status            BatchAccount_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &BatchAccount{}

// GetConditions returns the conditions of the resource
func (account *BatchAccount) GetConditions() conditions.Conditions {
	return account.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (account *BatchAccount) SetConditions(conditions conditions.Conditions) {
	account.Status.Conditions = conditions
}

var _ conversion.Convertible = &BatchAccount{}

// ConvertFrom populates our BatchAccount from the provided hub BatchAccount
func (account *BatchAccount) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source alpha20210101s.BatchAccount

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = account.AssignPropertiesFromBatchAccount(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to account")
	}

	return nil
}

// ConvertTo populates the provided hub BatchAccount from our BatchAccount
func (account *BatchAccount) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination alpha20210101s.BatchAccount
	err := account.AssignPropertiesToBatchAccount(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from account")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-batch-azure-com-v1alpha1api20210101-batchaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=batch.azure.com,resources=batchaccounts,verbs=create;update,versions=v1alpha1api20210101,name=default.v1alpha1api20210101.batchaccounts.batch.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &BatchAccount{}

// Default applies defaults to the BatchAccount resource
func (account *BatchAccount) Default() {
	account.defaultImpl()
	var temp interface{} = account
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (account *BatchAccount) defaultAzureName() {
	if account.Spec.AzureName == "" {
		account.Spec.AzureName = account.Name
	}
}

// defaultImpl applies the code generated defaults to the BatchAccount resource
func (account *BatchAccount) defaultImpl() { account.defaultAzureName() }

var _ genruntime.KubernetesResource = &BatchAccount{}

// AzureName returns the Azure name of the resource
func (account *BatchAccount) AzureName() string {
	return account.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-01-01"
func (account BatchAccount) GetAPIVersion() string {
	return "2021-01-01"
}

// GetResourceKind returns the kind of the resource
func (account *BatchAccount) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (account *BatchAccount) GetSpec() genruntime.ConvertibleSpec {
	return &account.Spec
}

// GetStatus returns the status of this resource
func (account *BatchAccount) GetStatus() genruntime.ConvertibleStatus {
	return &account.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Batch/batchAccounts"
func (account *BatchAccount) GetType() string {
	return "Microsoft.Batch/batchAccounts"
}

// NewEmptyStatus returns a new empty (blank) status
func (account *BatchAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &BatchAccount_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (account *BatchAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(account.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  account.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (account *BatchAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*BatchAccount_Status); ok {
		account.Status = *st
		return nil
	}

	// Convert status to required version
	var st BatchAccount_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	account.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-batch-azure-com-v1alpha1api20210101-batchaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=batch.azure.com,resources=batchaccounts,verbs=create;update,versions=v1alpha1api20210101,name=validate.v1alpha1api20210101.batchaccounts.batch.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &BatchAccount{}

// ValidateCreate validates the creation of the resource
func (account *BatchAccount) ValidateCreate() error {
	validations := account.createValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (account *BatchAccount) ValidateDelete() error {
	validations := account.deleteValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (account *BatchAccount) ValidateUpdate(old runtime.Object) error {
	validations := account.updateValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (account *BatchAccount) createValidations() []func() error {
	return []func() error{account.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (account *BatchAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (account *BatchAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return account.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (account *BatchAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&account.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromBatchAccount populates our BatchAccount from the provided source BatchAccount
func (account *BatchAccount) AssignPropertiesFromBatchAccount(source *alpha20210101s.BatchAccount) error {

	// ObjectMeta
	account.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec BatchAccounts_Spec
	err := spec.AssignPropertiesFromBatchAccountsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountsSpec() to populate field Spec")
	}
	account.Spec = spec

	// Status
	var status BatchAccount_Status
	err = status.AssignPropertiesFromBatchAccountStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountStatus() to populate field Status")
	}
	account.Status = status

	// No error
	return nil
}

// AssignPropertiesToBatchAccount populates the provided destination BatchAccount from our BatchAccount
func (account *BatchAccount) AssignPropertiesToBatchAccount(destination *alpha20210101s.BatchAccount) error {

	// ObjectMeta
	destination.ObjectMeta = *account.ObjectMeta.DeepCopy()

	// Spec
	var spec alpha20210101s.BatchAccounts_Spec
	err := account.Spec.AssignPropertiesToBatchAccountsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBatchAccountsSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status alpha20210101s.BatchAccount_Status
	err = account.Status.AssignPropertiesToBatchAccountStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBatchAccountStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (account *BatchAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: account.Spec.OriginalVersion(),
		Kind:    "BatchAccount",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of BatchAccount. Use v1beta20210101.BatchAccount instead
type BatchAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchAccount `json:"items"`
}

// Deprecated version of BatchAccount_Status. Use v1beta20210101.BatchAccount_Status instead
type BatchAccount_Status struct {
	AccountEndpoint              *string                       `json:"accountEndpoint,omitempty"`
	ActiveJobAndJobScheduleQuota *int                          `json:"activeJobAndJobScheduleQuota,omitempty"`
	AutoStorage                  *AutoStorageProperties_Status `json:"autoStorage,omitempty"`

	// Conditions: The observed state of the resource
	Conditions                            []conditions.Condition                         `json:"conditions,omitempty"`
	DedicatedCoreQuota                    *int                                           `json:"dedicatedCoreQuota,omitempty"`
	DedicatedCoreQuotaPerVMFamily         []VirtualMachineFamilyCoreQuota_Status         `json:"dedicatedCoreQuotaPerVMFamily,omitempty"`
	DedicatedCoreQuotaPerVMFamilyEnforced *bool                                          `json:"dedicatedCoreQuotaPerVMFamilyEnforced,omitempty"`
	Encryption                            *EncryptionProperties_Status                   `json:"encryption,omitempty"`
	Id                                    *string                                        `json:"id,omitempty"`
	Identity                              *BatchAccountIdentity_Status                   `json:"identity,omitempty"`
	KeyVaultReference                     *KeyVaultReference_Status                      `json:"keyVaultReference,omitempty"`
	Location                              *string                                        `json:"location,omitempty"`
	LowPriorityCoreQuota                  *int                                           `json:"lowPriorityCoreQuota,omitempty"`
	Name                                  *string                                        `json:"name,omitempty"`
	PoolAllocationMode                    *PoolAllocationMode_Status                     `json:"poolAllocationMode,omitempty"`
	PoolQuota                             *int                                           `json:"poolQuota,omitempty"`
	PrivateEndpointConnections            []PrivateEndpointConnection_Status             `json:"privateEndpointConnections,omitempty"`
	ProvisioningState                     *BatchAccountPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`
	PublicNetworkAccess                   *PublicNetworkAccessType_Status                `json:"publicNetworkAccess,omitempty"`
	Tags                                  map[string]string                              `json:"tags,omitempty"`
	Type                                  *string                                        `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &BatchAccount_Status{}

// ConvertStatusFrom populates our BatchAccount_Status from the provided source
func (account *BatchAccount_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*alpha20210101s.BatchAccount_Status)
	if ok {
		// Populate our instance from source
		return account.AssignPropertiesFromBatchAccountStatus(src)
	}

	// Convert to an intermediate form
	src = &alpha20210101s.BatchAccount_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = account.AssignPropertiesFromBatchAccountStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our BatchAccount_Status
func (account *BatchAccount_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*alpha20210101s.BatchAccount_Status)
	if ok {
		// Populate destination from our instance
		return account.AssignPropertiesToBatchAccountStatus(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210101s.BatchAccount_Status{}
	err := account.AssignPropertiesToBatchAccountStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &BatchAccount_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (account *BatchAccount_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccount_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (account *BatchAccount_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccount_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccount_StatusARM, got %T", armInput)
	}

	// Set property ‘AccountEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccountEndpoint != nil {
			accountEndpoint := *typedInput.Properties.AccountEndpoint
			account.AccountEndpoint = &accountEndpoint
		}
	}

	// Set property ‘ActiveJobAndJobScheduleQuota’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ActiveJobAndJobScheduleQuota != nil {
			activeJobAndJobScheduleQuota := *typedInput.Properties.ActiveJobAndJobScheduleQuota
			account.ActiveJobAndJobScheduleQuota = &activeJobAndJobScheduleQuota
		}
	}

	// Set property ‘AutoStorage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoStorage != nil {
			var autoStorage1 AutoStorageProperties_Status
			err := autoStorage1.PopulateFromARM(owner, *typedInput.Properties.AutoStorage)
			if err != nil {
				return err
			}
			autoStorage := autoStorage1
			account.AutoStorage = &autoStorage
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DedicatedCoreQuota’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DedicatedCoreQuota != nil {
			dedicatedCoreQuota := *typedInput.Properties.DedicatedCoreQuota
			account.DedicatedCoreQuota = &dedicatedCoreQuota
		}
	}

	// Set property ‘DedicatedCoreQuotaPerVMFamily’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DedicatedCoreQuotaPerVMFamily {
			var item1 VirtualMachineFamilyCoreQuota_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			account.DedicatedCoreQuotaPerVMFamily = append(account.DedicatedCoreQuotaPerVMFamily, item1)
		}
	}

	// Set property ‘DedicatedCoreQuotaPerVMFamilyEnforced’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DedicatedCoreQuotaPerVMFamilyEnforced != nil {
			dedicatedCoreQuotaPerVMFamilyEnforced := *typedInput.Properties.DedicatedCoreQuotaPerVMFamilyEnforced
			account.DedicatedCoreQuotaPerVMFamilyEnforced = &dedicatedCoreQuotaPerVMFamilyEnforced
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperties_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			account.Encryption = &encryption
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		account.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 BatchAccountIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		account.Identity = &identity
	}

	// Set property ‘KeyVaultReference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyVaultReference != nil {
			var keyVaultReference1 KeyVaultReference_Status
			err := keyVaultReference1.PopulateFromARM(owner, *typedInput.Properties.KeyVaultReference)
			if err != nil {
				return err
			}
			keyVaultReference := keyVaultReference1
			account.KeyVaultReference = &keyVaultReference
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		account.Location = &location
	}

	// Set property ‘LowPriorityCoreQuota’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LowPriorityCoreQuota != nil {
			lowPriorityCoreQuota := *typedInput.Properties.LowPriorityCoreQuota
			account.LowPriorityCoreQuota = &lowPriorityCoreQuota
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		account.Name = &name
	}

	// Set property ‘PoolAllocationMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PoolAllocationMode != nil {
			poolAllocationMode := *typedInput.Properties.PoolAllocationMode
			account.PoolAllocationMode = &poolAllocationMode
		}
	}

	// Set property ‘PoolQuota’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PoolQuota != nil {
			poolQuota := *typedInput.Properties.PoolQuota
			account.PoolQuota = &poolQuota
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			account.PrivateEndpointConnections = append(account.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			account.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			account.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		account.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			account.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		account.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountStatus populates our BatchAccount_Status from the provided source BatchAccount_Status
func (account *BatchAccount_Status) AssignPropertiesFromBatchAccountStatus(source *alpha20210101s.BatchAccount_Status) error {

	// AccountEndpoint
	account.AccountEndpoint = genruntime.ClonePointerToString(source.AccountEndpoint)

	// ActiveJobAndJobScheduleQuota
	account.ActiveJobAndJobScheduleQuota = genruntime.ClonePointerToInt(source.ActiveJobAndJobScheduleQuota)

	// AutoStorage
	if source.AutoStorage != nil {
		var autoStorage AutoStorageProperties_Status
		err := autoStorage.AssignPropertiesFromAutoStoragePropertiesStatus(source.AutoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoStoragePropertiesStatus() to populate field AutoStorage")
		}
		account.AutoStorage = &autoStorage
	} else {
		account.AutoStorage = nil
	}

	// Conditions
	account.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DedicatedCoreQuota
	account.DedicatedCoreQuota = genruntime.ClonePointerToInt(source.DedicatedCoreQuota)

	// DedicatedCoreQuotaPerVMFamily
	if source.DedicatedCoreQuotaPerVMFamily != nil {
		dedicatedCoreQuotaPerVMFamilyList := make([]VirtualMachineFamilyCoreQuota_Status, len(source.DedicatedCoreQuotaPerVMFamily))
		for dedicatedCoreQuotaPerVMFamilyIndex, dedicatedCoreQuotaPerVMFamilyItem := range source.DedicatedCoreQuotaPerVMFamily {
			// Shadow the loop variable to avoid aliasing
			dedicatedCoreQuotaPerVMFamilyItem := dedicatedCoreQuotaPerVMFamilyItem
			var dedicatedCoreQuotaPerVMFamily VirtualMachineFamilyCoreQuota_Status
			err := dedicatedCoreQuotaPerVMFamily.AssignPropertiesFromVirtualMachineFamilyCoreQuotaStatus(&dedicatedCoreQuotaPerVMFamilyItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromVirtualMachineFamilyCoreQuotaStatus() to populate field DedicatedCoreQuotaPerVMFamily")
			}
			dedicatedCoreQuotaPerVMFamilyList[dedicatedCoreQuotaPerVMFamilyIndex] = dedicatedCoreQuotaPerVMFamily
		}
		account.DedicatedCoreQuotaPerVMFamily = dedicatedCoreQuotaPerVMFamilyList
	} else {
		account.DedicatedCoreQuotaPerVMFamily = nil
	}

	// DedicatedCoreQuotaPerVMFamilyEnforced
	if source.DedicatedCoreQuotaPerVMFamilyEnforced != nil {
		dedicatedCoreQuotaPerVMFamilyEnforced := *source.DedicatedCoreQuotaPerVMFamilyEnforced
		account.DedicatedCoreQuotaPerVMFamilyEnforced = &dedicatedCoreQuotaPerVMFamilyEnforced
	} else {
		account.DedicatedCoreQuotaPerVMFamilyEnforced = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperties_Status
		err := encryption.AssignPropertiesFromEncryptionPropertiesStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionPropertiesStatus() to populate field Encryption")
		}
		account.Encryption = &encryption
	} else {
		account.Encryption = nil
	}

	// Id
	account.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity BatchAccountIdentity_Status
		err := identity.AssignPropertiesFromBatchAccountIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountIdentityStatus() to populate field Identity")
		}
		account.Identity = &identity
	} else {
		account.Identity = nil
	}

	// KeyVaultReference
	if source.KeyVaultReference != nil {
		var keyVaultReference KeyVaultReference_Status
		err := keyVaultReference.AssignPropertiesFromKeyVaultReferenceStatus(source.KeyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultReferenceStatus() to populate field KeyVaultReference")
		}
		account.KeyVaultReference = &keyVaultReference
	} else {
		account.KeyVaultReference = nil
	}

	// Location
	account.Location = genruntime.ClonePointerToString(source.Location)

	// LowPriorityCoreQuota
	account.LowPriorityCoreQuota = genruntime.ClonePointerToInt(source.LowPriorityCoreQuota)

	// Name
	account.Name = genruntime.ClonePointerToString(source.Name)

	// PoolAllocationMode
	if source.PoolAllocationMode != nil {
		poolAllocationMode := PoolAllocationMode_Status(*source.PoolAllocationMode)
		account.PoolAllocationMode = &poolAllocationMode
	} else {
		account.PoolAllocationMode = nil
	}

	// PoolQuota
	account.PoolQuota = genruntime.ClonePointerToInt(source.PoolQuota)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatus(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatus() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		account.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		account.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := BatchAccountPropertiesStatusProvisioningState(*source.ProvisioningState)
		account.ProvisioningState = &provisioningState
	} else {
		account.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := PublicNetworkAccessType_Status(*source.PublicNetworkAccess)
		account.PublicNetworkAccess = &publicNetworkAccess
	} else {
		account.PublicNetworkAccess = nil
	}

	// Tags
	account.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	account.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToBatchAccountStatus populates the provided destination BatchAccount_Status from our BatchAccount_Status
func (account *BatchAccount_Status) AssignPropertiesToBatchAccountStatus(destination *alpha20210101s.BatchAccount_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccountEndpoint
	destination.AccountEndpoint = genruntime.ClonePointerToString(account.AccountEndpoint)

	// ActiveJobAndJobScheduleQuota
	destination.ActiveJobAndJobScheduleQuota = genruntime.ClonePointerToInt(account.ActiveJobAndJobScheduleQuota)

	// AutoStorage
	if account.AutoStorage != nil {
		var autoStorage alpha20210101s.AutoStorageProperties_Status
		err := account.AutoStorage.AssignPropertiesToAutoStoragePropertiesStatus(&autoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoStoragePropertiesStatus() to populate field AutoStorage")
		}
		destination.AutoStorage = &autoStorage
	} else {
		destination.AutoStorage = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(account.Conditions)

	// DedicatedCoreQuota
	destination.DedicatedCoreQuota = genruntime.ClonePointerToInt(account.DedicatedCoreQuota)

	// DedicatedCoreQuotaPerVMFamily
	if account.DedicatedCoreQuotaPerVMFamily != nil {
		dedicatedCoreQuotaPerVMFamilyList := make([]alpha20210101s.VirtualMachineFamilyCoreQuota_Status, len(account.DedicatedCoreQuotaPerVMFamily))
		for dedicatedCoreQuotaPerVMFamilyIndex, dedicatedCoreQuotaPerVMFamilyItem := range account.DedicatedCoreQuotaPerVMFamily {
			// Shadow the loop variable to avoid aliasing
			dedicatedCoreQuotaPerVMFamilyItem := dedicatedCoreQuotaPerVMFamilyItem
			var dedicatedCoreQuotaPerVMFamily alpha20210101s.VirtualMachineFamilyCoreQuota_Status
			err := dedicatedCoreQuotaPerVMFamilyItem.AssignPropertiesToVirtualMachineFamilyCoreQuotaStatus(&dedicatedCoreQuotaPerVMFamily)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToVirtualMachineFamilyCoreQuotaStatus() to populate field DedicatedCoreQuotaPerVMFamily")
			}
			dedicatedCoreQuotaPerVMFamilyList[dedicatedCoreQuotaPerVMFamilyIndex] = dedicatedCoreQuotaPerVMFamily
		}
		destination.DedicatedCoreQuotaPerVMFamily = dedicatedCoreQuotaPerVMFamilyList
	} else {
		destination.DedicatedCoreQuotaPerVMFamily = nil
	}

	// DedicatedCoreQuotaPerVMFamilyEnforced
	if account.DedicatedCoreQuotaPerVMFamilyEnforced != nil {
		dedicatedCoreQuotaPerVMFamilyEnforced := *account.DedicatedCoreQuotaPerVMFamilyEnforced
		destination.DedicatedCoreQuotaPerVMFamilyEnforced = &dedicatedCoreQuotaPerVMFamilyEnforced
	} else {
		destination.DedicatedCoreQuotaPerVMFamilyEnforced = nil
	}

	// Encryption
	if account.Encryption != nil {
		var encryption alpha20210101s.EncryptionProperties_Status
		err := account.Encryption.AssignPropertiesToEncryptionPropertiesStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionPropertiesStatus() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(account.Id)

	// Identity
	if account.Identity != nil {
		var identity alpha20210101s.BatchAccountIdentity_Status
		err := account.Identity.AssignPropertiesToBatchAccountIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBatchAccountIdentityStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyVaultReference
	if account.KeyVaultReference != nil {
		var keyVaultReference alpha20210101s.KeyVaultReference_Status
		err := account.KeyVaultReference.AssignPropertiesToKeyVaultReferenceStatus(&keyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultReferenceStatus() to populate field KeyVaultReference")
		}
		destination.KeyVaultReference = &keyVaultReference
	} else {
		destination.KeyVaultReference = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(account.Location)

	// LowPriorityCoreQuota
	destination.LowPriorityCoreQuota = genruntime.ClonePointerToInt(account.LowPriorityCoreQuota)

	// Name
	destination.Name = genruntime.ClonePointerToString(account.Name)

	// PoolAllocationMode
	if account.PoolAllocationMode != nil {
		poolAllocationMode := string(*account.PoolAllocationMode)
		destination.PoolAllocationMode = &poolAllocationMode
	} else {
		destination.PoolAllocationMode = nil
	}

	// PoolQuota
	destination.PoolQuota = genruntime.ClonePointerToInt(account.PoolQuota)

	// PrivateEndpointConnections
	if account.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]alpha20210101s.PrivateEndpointConnection_Status, len(account.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range account.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection alpha20210101s.PrivateEndpointConnection_Status
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatus(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatus() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if account.ProvisioningState != nil {
		provisioningState := string(*account.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if account.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*account.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(account.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(account.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BatchAccounts_Spec struct {
	AutoStorage *AutoStorageBaseProperties `json:"autoStorage,omitempty"`

	// +kubebuilder:validation:MaxLength=24
	// +kubebuilder:validation:MinLength=3
	// +kubebuilder:validation:Pattern="^[a-zA-Z0-9]+$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName         string                `json:"azureName,omitempty"`
	Encryption        *EncryptionProperties `json:"encryption,omitempty"`
	Identity          *BatchAccountIdentity `json:"identity,omitempty"`
	KeyVaultReference *KeyVaultReference    `json:"keyVaultReference,omitempty"`
	Location          *string               `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner               *genruntime.KnownResourceReference               `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PoolAllocationMode  *BatchAccountCreatePropertiesPoolAllocationMode  `json:"poolAllocationMode,omitempty"`
	PublicNetworkAccess *BatchAccountCreatePropertiesPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`
	Tags                map[string]string                                `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &BatchAccounts_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (accounts *BatchAccounts_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if accounts == nil {
		return nil, nil
	}
	var result BatchAccounts_SpecARM

	// Set property ‘Identity’:
	if accounts.Identity != nil {
		identityARM, err := (*accounts.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(BatchAccountIdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	if accounts.Location != nil {
		location := *accounts.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if accounts.AutoStorage != nil ||
		accounts.Encryption != nil ||
		accounts.KeyVaultReference != nil ||
		accounts.PoolAllocationMode != nil ||
		accounts.PublicNetworkAccess != nil {
		result.Properties = &BatchAccountCreatePropertiesARM{}
	}
	if accounts.AutoStorage != nil {
		autoStorageARM, err := (*accounts.AutoStorage).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoStorage := autoStorageARM.(AutoStorageBasePropertiesARM)
		result.Properties.AutoStorage = &autoStorage
	}
	if accounts.Encryption != nil {
		encryptionARM, err := (*accounts.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(EncryptionPropertiesARM)
		result.Properties.Encryption = &encryption
	}
	if accounts.KeyVaultReference != nil {
		keyVaultReferenceARM, err := (*accounts.KeyVaultReference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultReference := keyVaultReferenceARM.(KeyVaultReferenceARM)
		result.Properties.KeyVaultReference = &keyVaultReference
	}
	if accounts.PoolAllocationMode != nil {
		poolAllocationMode := *accounts.PoolAllocationMode
		result.Properties.PoolAllocationMode = &poolAllocationMode
	}
	if accounts.PublicNetworkAccess != nil {
		publicNetworkAccess := *accounts.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Tags’:
	if accounts.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range accounts.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (accounts *BatchAccounts_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccounts_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (accounts *BatchAccounts_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccounts_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccounts_SpecARM, got %T", armInput)
	}

	// Set property ‘AutoStorage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoStorage != nil {
			var autoStorage1 AutoStorageBaseProperties
			err := autoStorage1.PopulateFromARM(owner, *typedInput.Properties.AutoStorage)
			if err != nil {
				return err
			}
			autoStorage := autoStorage1
			accounts.AutoStorage = &autoStorage
		}
	}

	// Set property ‘AzureName’:
	accounts.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperties
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			accounts.Encryption = &encryption
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 BatchAccountIdentity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		accounts.Identity = &identity
	}

	// Set property ‘KeyVaultReference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyVaultReference != nil {
			var keyVaultReference1 KeyVaultReference
			err := keyVaultReference1.PopulateFromARM(owner, *typedInput.Properties.KeyVaultReference)
			if err != nil {
				return err
			}
			keyVaultReference := keyVaultReference1
			accounts.KeyVaultReference = &keyVaultReference
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		accounts.Location = &location
	}

	// Set property ‘Owner’:
	accounts.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PoolAllocationMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PoolAllocationMode != nil {
			poolAllocationMode := *typedInput.Properties.PoolAllocationMode
			accounts.PoolAllocationMode = &poolAllocationMode
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			accounts.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		accounts.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			accounts.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &BatchAccounts_Spec{}

// ConvertSpecFrom populates our BatchAccounts_Spec from the provided source
func (accounts *BatchAccounts_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*alpha20210101s.BatchAccounts_Spec)
	if ok {
		// Populate our instance from source
		return accounts.AssignPropertiesFromBatchAccountsSpec(src)
	}

	// Convert to an intermediate form
	src = &alpha20210101s.BatchAccounts_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = accounts.AssignPropertiesFromBatchAccountsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our BatchAccounts_Spec
func (accounts *BatchAccounts_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*alpha20210101s.BatchAccounts_Spec)
	if ok {
		// Populate destination from our instance
		return accounts.AssignPropertiesToBatchAccountsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &alpha20210101s.BatchAccounts_Spec{}
	err := accounts.AssignPropertiesToBatchAccountsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromBatchAccountsSpec populates our BatchAccounts_Spec from the provided source BatchAccounts_Spec
func (accounts *BatchAccounts_Spec) AssignPropertiesFromBatchAccountsSpec(source *alpha20210101s.BatchAccounts_Spec) error {

	// AutoStorage
	if source.AutoStorage != nil {
		var autoStorage AutoStorageBaseProperties
		err := autoStorage.AssignPropertiesFromAutoStorageBaseProperties(source.AutoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoStorageBaseProperties() to populate field AutoStorage")
		}
		accounts.AutoStorage = &autoStorage
	} else {
		accounts.AutoStorage = nil
	}

	// AzureName
	accounts.AzureName = source.AzureName

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperties
		err := encryption.AssignPropertiesFromEncryptionProperties(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionProperties() to populate field Encryption")
		}
		accounts.Encryption = &encryption
	} else {
		accounts.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity BatchAccountIdentity
		err := identity.AssignPropertiesFromBatchAccountIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountIdentity() to populate field Identity")
		}
		accounts.Identity = &identity
	} else {
		accounts.Identity = nil
	}

	// KeyVaultReference
	if source.KeyVaultReference != nil {
		var keyVaultReference KeyVaultReference
		err := keyVaultReference.AssignPropertiesFromKeyVaultReference(source.KeyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultReference() to populate field KeyVaultReference")
		}
		accounts.KeyVaultReference = &keyVaultReference
	} else {
		accounts.KeyVaultReference = nil
	}

	// Location
	accounts.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		accounts.Owner = &owner
	} else {
		accounts.Owner = nil
	}

	// PoolAllocationMode
	if source.PoolAllocationMode != nil {
		poolAllocationMode := BatchAccountCreatePropertiesPoolAllocationMode(*source.PoolAllocationMode)
		accounts.PoolAllocationMode = &poolAllocationMode
	} else {
		accounts.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := BatchAccountCreatePropertiesPublicNetworkAccess(*source.PublicNetworkAccess)
		accounts.PublicNetworkAccess = &publicNetworkAccess
	} else {
		accounts.PublicNetworkAccess = nil
	}

	// Tags
	accounts.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToBatchAccountsSpec populates the provided destination BatchAccounts_Spec from our BatchAccounts_Spec
func (accounts *BatchAccounts_Spec) AssignPropertiesToBatchAccountsSpec(destination *alpha20210101s.BatchAccounts_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoStorage
	if accounts.AutoStorage != nil {
		var autoStorage alpha20210101s.AutoStorageBaseProperties
		err := accounts.AutoStorage.AssignPropertiesToAutoStorageBaseProperties(&autoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoStorageBaseProperties() to populate field AutoStorage")
		}
		destination.AutoStorage = &autoStorage
	} else {
		destination.AutoStorage = nil
	}

	// AzureName
	destination.AzureName = accounts.AzureName

	// Encryption
	if accounts.Encryption != nil {
		var encryption alpha20210101s.EncryptionProperties
		err := accounts.Encryption.AssignPropertiesToEncryptionProperties(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionProperties() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if accounts.Identity != nil {
		var identity alpha20210101s.BatchAccountIdentity
		err := accounts.Identity.AssignPropertiesToBatchAccountIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBatchAccountIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyVaultReference
	if accounts.KeyVaultReference != nil {
		var keyVaultReference alpha20210101s.KeyVaultReference
		err := accounts.KeyVaultReference.AssignPropertiesToKeyVaultReference(&keyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultReference() to populate field KeyVaultReference")
		}
		destination.KeyVaultReference = &keyVaultReference
	} else {
		destination.KeyVaultReference = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(accounts.Location)

	// OriginalVersion
	destination.OriginalVersion = accounts.OriginalVersion()

	// Owner
	if accounts.Owner != nil {
		owner := accounts.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PoolAllocationMode
	if accounts.PoolAllocationMode != nil {
		poolAllocationMode := string(*accounts.PoolAllocationMode)
		destination.PoolAllocationMode = &poolAllocationMode
	} else {
		destination.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if accounts.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*accounts.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(accounts.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (accounts *BatchAccounts_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (accounts *BatchAccounts_Spec) SetAzureName(azureName string) { accounts.AzureName = azureName }

// Deprecated version of AutoStorageBaseProperties. Use v1beta20210101.AutoStorageBaseProperties instead
type AutoStorageBaseProperties struct {
	// +kubebuilder:validation:Required
	StorageAccountReference *genruntime.ResourceReference `armReference:"StorageAccountId" json:"storageAccountReference,omitempty"`
}

var _ genruntime.ARMTransformer = &AutoStorageBaseProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *AutoStorageBaseProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result AutoStorageBasePropertiesARM

	// Set property ‘StorageAccountId’:
	if properties.StorageAccountReference != nil {
		storageAccountReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.StorageAccountReference)
		if err != nil {
			return nil, err
		}
		storageAccountReference := storageAccountReferenceARMID
		result.StorageAccountId = &storageAccountReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *AutoStorageBaseProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoStorageBasePropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *AutoStorageBaseProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(AutoStorageBasePropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoStorageBasePropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘StorageAccountReference’

	// No error
	return nil
}

// AssignPropertiesFromAutoStorageBaseProperties populates our AutoStorageBaseProperties from the provided source AutoStorageBaseProperties
func (properties *AutoStorageBaseProperties) AssignPropertiesFromAutoStorageBaseProperties(source *alpha20210101s.AutoStorageBaseProperties) error {

	// StorageAccountReference
	if source.StorageAccountReference != nil {
		storageAccountReference := source.StorageAccountReference.Copy()
		properties.StorageAccountReference = &storageAccountReference
	} else {
		properties.StorageAccountReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAutoStorageBaseProperties populates the provided destination AutoStorageBaseProperties from our AutoStorageBaseProperties
func (properties *AutoStorageBaseProperties) AssignPropertiesToAutoStorageBaseProperties(destination *alpha20210101s.AutoStorageBaseProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StorageAccountReference
	if properties.StorageAccountReference != nil {
		storageAccountReference := properties.StorageAccountReference.Copy()
		destination.StorageAccountReference = &storageAccountReference
	} else {
		destination.StorageAccountReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of AutoStorageProperties_Status. Use v1beta20210101.AutoStorageProperties_Status instead
type AutoStorageProperties_Status struct {
	LastKeySync      *string `json:"lastKeySync,omitempty"`
	StorageAccountId *string `json:"storageAccountId,omitempty"`
}

var _ genruntime.FromARMConverter = &AutoStorageProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *AutoStorageProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoStorageProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *AutoStorageProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoStorageProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoStorageProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘LastKeySync’:
	if typedInput.LastKeySync != nil {
		lastKeySync := *typedInput.LastKeySync
		properties.LastKeySync = &lastKeySync
	}

	// Set property ‘StorageAccountId’:
	if typedInput.StorageAccountId != nil {
		storageAccountId := *typedInput.StorageAccountId
		properties.StorageAccountId = &storageAccountId
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoStoragePropertiesStatus populates our AutoStorageProperties_Status from the provided source AutoStorageProperties_Status
func (properties *AutoStorageProperties_Status) AssignPropertiesFromAutoStoragePropertiesStatus(source *alpha20210101s.AutoStorageProperties_Status) error {

	// LastKeySync
	properties.LastKeySync = genruntime.ClonePointerToString(source.LastKeySync)

	// StorageAccountId
	properties.StorageAccountId = genruntime.ClonePointerToString(source.StorageAccountId)

	// No error
	return nil
}

// AssignPropertiesToAutoStoragePropertiesStatus populates the provided destination AutoStorageProperties_Status from our AutoStorageProperties_Status
func (properties *AutoStorageProperties_Status) AssignPropertiesToAutoStoragePropertiesStatus(destination *alpha20210101s.AutoStorageProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// LastKeySync
	destination.LastKeySync = genruntime.ClonePointerToString(properties.LastKeySync)

	// StorageAccountId
	destination.StorageAccountId = genruntime.ClonePointerToString(properties.StorageAccountId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of BatchAccountCreatePropertiesPoolAllocationMode. Use
// v1beta20210101.BatchAccountCreatePropertiesPoolAllocationMode instead
// +kubebuilder:validation:Enum={"BatchService","UserSubscription"}
type BatchAccountCreatePropertiesPoolAllocationMode string

const (
	BatchAccountCreatePropertiesPoolAllocationModeBatchService     = BatchAccountCreatePropertiesPoolAllocationMode("BatchService")
	BatchAccountCreatePropertiesPoolAllocationModeUserSubscription = BatchAccountCreatePropertiesPoolAllocationMode("UserSubscription")
)

// Deprecated version of BatchAccountCreatePropertiesPublicNetworkAccess. Use
// v1beta20210101.BatchAccountCreatePropertiesPublicNetworkAccess instead
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type BatchAccountCreatePropertiesPublicNetworkAccess string

const (
	BatchAccountCreatePropertiesPublicNetworkAccessDisabled = BatchAccountCreatePropertiesPublicNetworkAccess("Disabled")
	BatchAccountCreatePropertiesPublicNetworkAccessEnabled  = BatchAccountCreatePropertiesPublicNetworkAccess("Enabled")
)

// Deprecated version of BatchAccountIdentity. Use v1beta20210101.BatchAccountIdentity instead
type BatchAccountIdentity struct {
	// +kubebuilder:validation:Required
	Type *BatchAccountIdentityType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &BatchAccountIdentity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *BatchAccountIdentity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	var result BatchAccountIdentityARM

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *BatchAccountIdentity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *BatchAccountIdentity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentity populates our BatchAccountIdentity from the provided source BatchAccountIdentity
func (identity *BatchAccountIdentity) AssignPropertiesFromBatchAccountIdentity(source *alpha20210101s.BatchAccountIdentity) error {

	// Type
	if source.Type != nil {
		typeVar := BatchAccountIdentityType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentity populates the provided destination BatchAccountIdentity from our BatchAccountIdentity
func (identity *BatchAccountIdentity) AssignPropertiesToBatchAccountIdentity(destination *alpha20210101s.BatchAccountIdentity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of BatchAccountIdentity_Status. Use v1beta20210101.BatchAccountIdentity_Status instead
type BatchAccountIdentity_Status struct {
	PrincipalId            *string                                                       `json:"principalId,omitempty"`
	TenantId               *string                                                       `json:"tenantId,omitempty"`
	Type                   *BatchAccountIdentityStatusType                               `json:"type,omitempty"`
	UserAssignedIdentities map[string]BatchAccountIdentity_Status_UserAssignedIdentities `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &BatchAccountIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *BatchAccountIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *BatchAccountIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]BatchAccountIdentity_Status_UserAssignedIdentities)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 BatchAccountIdentity_Status_UserAssignedIdentities
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentityStatus populates our BatchAccountIdentity_Status from the provided source BatchAccountIdentity_Status
func (identity *BatchAccountIdentity_Status) AssignPropertiesFromBatchAccountIdentityStatus(source *alpha20210101s.BatchAccountIdentity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := BatchAccountIdentityStatusType(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]BatchAccountIdentity_Status_UserAssignedIdentities, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity BatchAccountIdentity_Status_UserAssignedIdentities
			err := userAssignedIdentity.AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentityStatus populates the provided destination BatchAccountIdentity_Status from our BatchAccountIdentity_Status
func (identity *BatchAccountIdentity_Status) AssignPropertiesToBatchAccountIdentityStatus(destination *alpha20210101s.BatchAccountIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]alpha20210101s.BatchAccountIdentity_Status_UserAssignedIdentities, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity alpha20210101s.BatchAccountIdentity_Status_UserAssignedIdentities
			err := userAssignedIdentityValue.AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of BatchAccountPropertiesStatusProvisioningState. Use
// v1beta20210101.BatchAccountPropertiesStatusProvisioningState instead
type BatchAccountPropertiesStatusProvisioningState string

const (
	BatchAccountPropertiesStatusProvisioningStateCancelled = BatchAccountPropertiesStatusProvisioningState("Cancelled")
	BatchAccountPropertiesStatusProvisioningStateCreating  = BatchAccountPropertiesStatusProvisioningState("Creating")
	BatchAccountPropertiesStatusProvisioningStateDeleting  = BatchAccountPropertiesStatusProvisioningState("Deleting")
	BatchAccountPropertiesStatusProvisioningStateFailed    = BatchAccountPropertiesStatusProvisioningState("Failed")
	BatchAccountPropertiesStatusProvisioningStateInvalid   = BatchAccountPropertiesStatusProvisioningState("Invalid")
	BatchAccountPropertiesStatusProvisioningStateSucceeded = BatchAccountPropertiesStatusProvisioningState("Succeeded")
)

// Deprecated version of EncryptionProperties. Use v1beta20210101.EncryptionProperties instead
type EncryptionProperties struct {
	KeySource          *EncryptionPropertiesKeySource `json:"keySource,omitempty"`
	KeyVaultProperties *KeyVaultProperties            `json:"keyVaultProperties,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *EncryptionProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result EncryptionPropertiesARM

	// Set property ‘KeySource’:
	if properties.KeySource != nil {
		keySource := *properties.KeySource
		result.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if properties.KeyVaultProperties != nil {
		keyVaultPropertiesARM, err := (*properties.KeyVaultProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultProperties := keyVaultPropertiesARM.(KeyVaultPropertiesARM)
		result.KeyVaultProperties = &keyVaultProperties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *EncryptionProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *EncryptionProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionPropertiesARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		properties.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		properties.KeyVaultProperties = &keyVaultProperties
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionProperties populates our EncryptionProperties from the provided source EncryptionProperties
func (properties *EncryptionProperties) AssignPropertiesFromEncryptionProperties(source *alpha20210101s.EncryptionProperties) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionPropertiesKeySource(*source.KeySource)
		properties.KeySource = &keySource
	} else {
		properties.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties
		err := keyVaultProperty.AssignPropertiesFromKeyVaultProperties(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties() to populate field KeyVaultProperties")
		}
		properties.KeyVaultProperties = &keyVaultProperty
	} else {
		properties.KeyVaultProperties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionProperties populates the provided destination EncryptionProperties from our EncryptionProperties
func (properties *EncryptionProperties) AssignPropertiesToEncryptionProperties(destination *alpha20210101s.EncryptionProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if properties.KeySource != nil {
		keySource := string(*properties.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if properties.KeyVaultProperties != nil {
		var keyVaultProperty alpha20210101s.KeyVaultProperties
		err := properties.KeyVaultProperties.AssignPropertiesToKeyVaultProperties(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionProperties_Status. Use v1beta20210101.EncryptionProperties_Status instead
type EncryptionProperties_Status struct {
	KeySource          *EncryptionPropertiesStatusKeySource `json:"keySource,omitempty"`
	KeyVaultProperties *KeyVaultProperties_Status           `json:"keyVaultProperties,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *EncryptionProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *EncryptionProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		properties.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties_Status
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		properties.KeyVaultProperties = &keyVaultProperties
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionPropertiesStatus populates our EncryptionProperties_Status from the provided source EncryptionProperties_Status
func (properties *EncryptionProperties_Status) AssignPropertiesFromEncryptionPropertiesStatus(source *alpha20210101s.EncryptionProperties_Status) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionPropertiesStatusKeySource(*source.KeySource)
		properties.KeySource = &keySource
	} else {
		properties.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties_Status
		err := keyVaultProperty.AssignPropertiesFromKeyVaultPropertiesStatus(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
		}
		properties.KeyVaultProperties = &keyVaultProperty
	} else {
		properties.KeyVaultProperties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionPropertiesStatus populates the provided destination EncryptionProperties_Status from our EncryptionProperties_Status
func (properties *EncryptionProperties_Status) AssignPropertiesToEncryptionPropertiesStatus(destination *alpha20210101s.EncryptionProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if properties.KeySource != nil {
		keySource := string(*properties.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if properties.KeyVaultProperties != nil {
		var keyVaultProperty alpha20210101s.KeyVaultProperties_Status
		err := properties.KeyVaultProperties.AssignPropertiesToKeyVaultPropertiesStatus(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyVaultReference. Use v1beta20210101.KeyVaultReference instead
type KeyVaultReference struct {
	// +kubebuilder:validation:Required
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	// +kubebuilder:validation:Required
	Url *string `json:"url,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultReference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *KeyVaultReference) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result KeyVaultReferenceARM

	// Set property ‘Id’:
	if reference.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*reference.Reference)
		if err != nil {
			return nil, err
		}
		reference1 := referenceARMID
		result.Id = &reference1
	}

	// Set property ‘Url’:
	if reference.Url != nil {
		url := *reference.Url
		result.Url = &url
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultReference) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultReferenceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultReference) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultReferenceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultReferenceARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// Set property ‘Url’:
	if typedInput.Url != nil {
		url := *typedInput.Url
		reference.Url = &url
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultReference populates our KeyVaultReference from the provided source KeyVaultReference
func (reference *KeyVaultReference) AssignPropertiesFromKeyVaultReference(source *alpha20210101s.KeyVaultReference) error {

	// Reference
	if source.Reference != nil {
		referenceTemp := source.Reference.Copy()
		reference.Reference = &referenceTemp
	} else {
		reference.Reference = nil
	}

	// Url
	reference.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultReference populates the provided destination KeyVaultReference from our KeyVaultReference
func (reference *KeyVaultReference) AssignPropertiesToKeyVaultReference(destination *alpha20210101s.KeyVaultReference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if reference.Reference != nil {
		referenceTemp := reference.Reference.Copy()
		destination.Reference = &referenceTemp
	} else {
		destination.Reference = nil
	}

	// Url
	destination.Url = genruntime.ClonePointerToString(reference.Url)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyVaultReference_Status. Use v1beta20210101.KeyVaultReference_Status instead
type KeyVaultReference_Status struct {
	Id  *string `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultReference_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		reference.Id = &id
	}

	// Set property ‘Url’:
	if typedInput.Url != nil {
		url := *typedInput.Url
		reference.Url = &url
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultReferenceStatus populates our KeyVaultReference_Status from the provided source KeyVaultReference_Status
func (reference *KeyVaultReference_Status) AssignPropertiesFromKeyVaultReferenceStatus(source *alpha20210101s.KeyVaultReference_Status) error {

	// Id
	reference.Id = genruntime.ClonePointerToString(source.Id)

	// Url
	reference.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultReferenceStatus populates the provided destination KeyVaultReference_Status from our KeyVaultReference_Status
func (reference *KeyVaultReference_Status) AssignPropertiesToKeyVaultReferenceStatus(destination *alpha20210101s.KeyVaultReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(reference.Id)

	// Url
	destination.Url = genruntime.ClonePointerToString(reference.Url)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PoolAllocationMode_Status. Use v1beta20210101.PoolAllocationMode_Status instead
type PoolAllocationMode_Status string

const (
	PoolAllocationMode_StatusBatchService     = PoolAllocationMode_Status("BatchService")
	PoolAllocationMode_StatusUserSubscription = PoolAllocationMode_Status("UserSubscription")
)

// Deprecated version of PrivateEndpointConnection_Status. Use v1beta20210101.PrivateEndpointConnection_Status instead
type PrivateEndpointConnection_Status struct {
	Etag                              *string                                                     `json:"etag,omitempty"`
	Id                                *string                                                     `json:"id,omitempty"`
	Name                              *string                                                     `json:"name,omitempty"`
	PrivateEndpoint                   *PrivateEndpoint_Status                                     `json:"privateEndpoint,omitempty"`
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState_Status                   `json:"privateLinkServiceConnectionState,omitempty"`
	ProvisioningState                 *PrivateEndpointConnectionPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`
	Type                              *string                                                     `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (connection *PrivateEndpointConnection_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (connection *PrivateEndpointConnection_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		connection.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		connection.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		connection.Name = &name
	}

	// Set property ‘PrivateEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpoint != nil {
			var privateEndpoint1 PrivateEndpoint_Status
			err := privateEndpoint1.PopulateFromARM(owner, *typedInput.Properties.PrivateEndpoint)
			if err != nil {
				return err
			}
			privateEndpoint := privateEndpoint1
			connection.PrivateEndpoint = &privateEndpoint
		}
	}

	// Set property ‘PrivateLinkServiceConnectionState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkServiceConnectionState != nil {
			var privateLinkServiceConnectionState1 PrivateLinkServiceConnectionState_Status
			err := privateLinkServiceConnectionState1.PopulateFromARM(owner, *typedInput.Properties.PrivateLinkServiceConnectionState)
			if err != nil {
				return err
			}
			privateLinkServiceConnectionState := privateLinkServiceConnectionState1
			connection.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			connection.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		connection.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatus populates our PrivateEndpointConnection_Status from the provided source PrivateEndpointConnection_Status
func (connection *PrivateEndpointConnection_Status) AssignPropertiesFromPrivateEndpointConnectionStatus(source *alpha20210101s.PrivateEndpointConnection_Status) error {

	// Etag
	connection.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	connection.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	connection.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpoint
	if source.PrivateEndpoint != nil {
		var privateEndpoint PrivateEndpoint_Status
		err := privateEndpoint.AssignPropertiesFromPrivateEndpointStatus(source.PrivateEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointStatus() to populate field PrivateEndpoint")
		}
		connection.PrivateEndpoint = &privateEndpoint
	} else {
		connection.PrivateEndpoint = nil
	}

	// PrivateLinkServiceConnectionState
	if source.PrivateLinkServiceConnectionState != nil {
		var privateLinkServiceConnectionState PrivateLinkServiceConnectionState_Status
		err := privateLinkServiceConnectionState.AssignPropertiesFromPrivateLinkServiceConnectionStateStatus(source.PrivateLinkServiceConnectionState)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPrivateLinkServiceConnectionStateStatus() to populate field PrivateLinkServiceConnectionState")
		}
		connection.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	} else {
		connection.PrivateLinkServiceConnectionState = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := PrivateEndpointConnectionPropertiesStatusProvisioningState(*source.ProvisioningState)
		connection.ProvisioningState = &provisioningState
	} else {
		connection.ProvisioningState = nil
	}

	// Type
	connection.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatus populates the provided destination PrivateEndpointConnection_Status from our PrivateEndpointConnection_Status
func (connection *PrivateEndpointConnection_Status) AssignPropertiesToPrivateEndpointConnectionStatus(destination *alpha20210101s.PrivateEndpointConnection_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	destination.Etag = genruntime.ClonePointerToString(connection.Etag)

	// Id
	destination.Id = genruntime.ClonePointerToString(connection.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(connection.Name)

	// PrivateEndpoint
	if connection.PrivateEndpoint != nil {
		var privateEndpoint alpha20210101s.PrivateEndpoint_Status
		err := connection.PrivateEndpoint.AssignPropertiesToPrivateEndpointStatus(&privateEndpoint)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointStatus() to populate field PrivateEndpoint")
		}
		destination.PrivateEndpoint = &privateEndpoint
	} else {
		destination.PrivateEndpoint = nil
	}

	// PrivateLinkServiceConnectionState
	if connection.PrivateLinkServiceConnectionState != nil {
		var privateLinkServiceConnectionState alpha20210101s.PrivateLinkServiceConnectionState_Status
		err := connection.PrivateLinkServiceConnectionState.AssignPropertiesToPrivateLinkServiceConnectionStateStatus(&privateLinkServiceConnectionState)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPrivateLinkServiceConnectionStateStatus() to populate field PrivateLinkServiceConnectionState")
		}
		destination.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	} else {
		destination.PrivateLinkServiceConnectionState = nil
	}

	// ProvisioningState
	if connection.ProvisioningState != nil {
		provisioningState := string(*connection.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(connection.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PublicNetworkAccessType_Status. Use v1beta20210101.PublicNetworkAccessType_Status instead
type PublicNetworkAccessType_Status string

const (
	PublicNetworkAccessType_StatusDisabled = PublicNetworkAccessType_Status("Disabled")
	PublicNetworkAccessType_StatusEnabled  = PublicNetworkAccessType_Status("Enabled")
)

// Deprecated version of VirtualMachineFamilyCoreQuota_Status. Use v1beta20210101.VirtualMachineFamilyCoreQuota_Status instead
type VirtualMachineFamilyCoreQuota_Status struct {
	CoreQuota *int    `json:"coreQuota,omitempty"`
	Name      *string `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineFamilyCoreQuota_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (quota *VirtualMachineFamilyCoreQuota_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineFamilyCoreQuota_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (quota *VirtualMachineFamilyCoreQuota_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineFamilyCoreQuota_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineFamilyCoreQuota_StatusARM, got %T", armInput)
	}

	// Set property ‘CoreQuota’:
	if typedInput.CoreQuota != nil {
		coreQuota := *typedInput.CoreQuota
		quota.CoreQuota = &coreQuota
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		quota.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineFamilyCoreQuotaStatus populates our VirtualMachineFamilyCoreQuota_Status from the provided source VirtualMachineFamilyCoreQuota_Status
func (quota *VirtualMachineFamilyCoreQuota_Status) AssignPropertiesFromVirtualMachineFamilyCoreQuotaStatus(source *alpha20210101s.VirtualMachineFamilyCoreQuota_Status) error {

	// CoreQuota
	quota.CoreQuota = genruntime.ClonePointerToInt(source.CoreQuota)

	// Name
	quota.Name = genruntime.ClonePointerToString(source.Name)

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineFamilyCoreQuotaStatus populates the provided destination VirtualMachineFamilyCoreQuota_Status from our VirtualMachineFamilyCoreQuota_Status
func (quota *VirtualMachineFamilyCoreQuota_Status) AssignPropertiesToVirtualMachineFamilyCoreQuotaStatus(destination *alpha20210101s.VirtualMachineFamilyCoreQuota_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CoreQuota
	destination.CoreQuota = genruntime.ClonePointerToInt(quota.CoreQuota)

	// Name
	destination.Name = genruntime.ClonePointerToString(quota.Name)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of BatchAccountIdentity_Status_UserAssignedIdentities. Use v1beta20210101.BatchAccountIdentity_Status_UserAssignedIdentities instead
type BatchAccountIdentity_Status_UserAssignedIdentities struct {
	ClientId    *string `json:"clientId,omitempty"`
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &BatchAccountIdentity_Status_UserAssignedIdentities{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identities *BatchAccountIdentity_Status_UserAssignedIdentities) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentity_Status_UserAssignedIdentitiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identities *BatchAccountIdentity_Status_UserAssignedIdentities) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentity_Status_UserAssignedIdentitiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentity_Status_UserAssignedIdentitiesARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identities.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identities.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities populates our BatchAccountIdentity_Status_UserAssignedIdentities from the provided source BatchAccountIdentity_Status_UserAssignedIdentities
func (identities *BatchAccountIdentity_Status_UserAssignedIdentities) AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities(source *alpha20210101s.BatchAccountIdentity_Status_UserAssignedIdentities) error {

	// ClientId
	identities.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identities.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities populates the provided destination BatchAccountIdentity_Status_UserAssignedIdentities from our BatchAccountIdentity_Status_UserAssignedIdentities
func (identities *BatchAccountIdentity_Status_UserAssignedIdentities) AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities(destination *alpha20210101s.BatchAccountIdentity_Status_UserAssignedIdentities) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identities.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identities.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionPropertiesKeySource. Use v1beta20210101.EncryptionPropertiesKeySource instead
// +kubebuilder:validation:Enum={"Microsoft.Batch","Microsoft.KeyVault"}
type EncryptionPropertiesKeySource string

const (
	EncryptionPropertiesKeySourceMicrosoftBatch    = EncryptionPropertiesKeySource("Microsoft.Batch")
	EncryptionPropertiesKeySourceMicrosoftKeyVault = EncryptionPropertiesKeySource("Microsoft.KeyVault")
)

// Deprecated version of EncryptionPropertiesStatusKeySource. Use v1beta20210101.EncryptionPropertiesStatusKeySource instead
type EncryptionPropertiesStatusKeySource string

const (
	EncryptionPropertiesStatusKeySourceMicrosoftBatch    = EncryptionPropertiesStatusKeySource("Microsoft.Batch")
	EncryptionPropertiesStatusKeySourceMicrosoftKeyVault = EncryptionPropertiesStatusKeySource("Microsoft.KeyVault")
)

// Deprecated version of KeyVaultProperties. Use v1beta20210101.KeyVaultProperties instead
type KeyVaultProperties struct {
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result KeyVaultPropertiesARM

	// Set property ‘KeyIdentifier’:
	if properties.KeyIdentifier != nil {
		keyIdentifier := *properties.KeyIdentifier
		result.KeyIdentifier = &keyIdentifier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultPropertiesARM, got %T", armInput)
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *alpha20210101s.KeyVaultProperties) error {

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *alpha20210101s.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyVaultProperties_Status. Use v1beta20210101.KeyVaultProperties_Status instead
type KeyVaultProperties_Status struct {
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesStatus populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultPropertiesStatus(source *alpha20210101s.KeyVaultProperties_Status) error {

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesStatus populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesToKeyVaultPropertiesStatus(destination *alpha20210101s.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PrivateEndpointConnectionPropertiesStatusProvisioningState. Use
// v1beta20210101.PrivateEndpointConnectionPropertiesStatusProvisioningState instead
type PrivateEndpointConnectionPropertiesStatusProvisioningState string

const (
	PrivateEndpointConnectionPropertiesStatusProvisioningStateFailed    = PrivateEndpointConnectionPropertiesStatusProvisioningState("Failed")
	PrivateEndpointConnectionPropertiesStatusProvisioningStateSucceeded = PrivateEndpointConnectionPropertiesStatusProvisioningState("Succeeded")
	PrivateEndpointConnectionPropertiesStatusProvisioningStateUpdating  = PrivateEndpointConnectionPropertiesStatusProvisioningState("Updating")
)

// Deprecated version of PrivateEndpoint_Status. Use v1beta20210101.PrivateEndpoint_Status instead
type PrivateEndpoint_Status struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpoint_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (endpoint *PrivateEndpoint_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpoint_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (endpoint *PrivateEndpoint_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpoint_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpoint_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		endpoint.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointStatus populates our PrivateEndpoint_Status from the provided source PrivateEndpoint_Status
func (endpoint *PrivateEndpoint_Status) AssignPropertiesFromPrivateEndpointStatus(source *alpha20210101s.PrivateEndpoint_Status) error {

	// Id
	endpoint.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointStatus populates the provided destination PrivateEndpoint_Status from our PrivateEndpoint_Status
func (endpoint *PrivateEndpoint_Status) AssignPropertiesToPrivateEndpointStatus(destination *alpha20210101s.PrivateEndpoint_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(endpoint.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PrivateLinkServiceConnectionState_Status. Use v1beta20210101.PrivateLinkServiceConnectionState_Status instead
type PrivateLinkServiceConnectionState_Status struct {
	ActionRequired *string                                    `json:"actionRequired,omitempty"`
	Description    *string                                    `json:"description,omitempty"`
	Status         *PrivateLinkServiceConnectionStatus_Status `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateLinkServiceConnectionState_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (state *PrivateLinkServiceConnectionState_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateLinkServiceConnectionState_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (state *PrivateLinkServiceConnectionState_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateLinkServiceConnectionState_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateLinkServiceConnectionState_StatusARM, got %T", armInput)
	}

	// Set property ‘ActionRequired’:
	if typedInput.ActionRequired != nil {
		actionRequired := *typedInput.ActionRequired
		state.ActionRequired = &actionRequired
	}

	// Set property ‘Description’:
	if typedInput.Description != nil {
		description := *typedInput.Description
		state.Description = &description
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		state.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateLinkServiceConnectionStateStatus populates our PrivateLinkServiceConnectionState_Status from the provided source PrivateLinkServiceConnectionState_Status
func (state *PrivateLinkServiceConnectionState_Status) AssignPropertiesFromPrivateLinkServiceConnectionStateStatus(source *alpha20210101s.PrivateLinkServiceConnectionState_Status) error {

	// ActionRequired
	state.ActionRequired = genruntime.ClonePointerToString(source.ActionRequired)

	// Description
	state.Description = genruntime.ClonePointerToString(source.Description)

	// Status
	if source.Status != nil {
		status := PrivateLinkServiceConnectionStatus_Status(*source.Status)
		state.Status = &status
	} else {
		state.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateLinkServiceConnectionStateStatus populates the provided destination PrivateLinkServiceConnectionState_Status from our PrivateLinkServiceConnectionState_Status
func (state *PrivateLinkServiceConnectionState_Status) AssignPropertiesToPrivateLinkServiceConnectionStateStatus(destination *alpha20210101s.PrivateLinkServiceConnectionState_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActionRequired
	destination.ActionRequired = genruntime.ClonePointerToString(state.ActionRequired)

	// Description
	destination.Description = genruntime.ClonePointerToString(state.Description)

	// Status
	if state.Status != nil {
		status := string(*state.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PrivateLinkServiceConnectionStatus_Status. Use
// v1beta20210101.PrivateLinkServiceConnectionStatus_Status instead
type PrivateLinkServiceConnectionStatus_Status string

const (
	PrivateLinkServiceConnectionStatus_StatusApproved     = PrivateLinkServiceConnectionStatus_Status("Approved")
	PrivateLinkServiceConnectionStatus_StatusDisconnected = PrivateLinkServiceConnectionStatus_Status("Disconnected")
	PrivateLinkServiceConnectionStatus_StatusPending      = PrivateLinkServiceConnectionStatus_Status("Pending")
	PrivateLinkServiceConnectionStatus_StatusRejected     = PrivateLinkServiceConnectionStatus_Status("Rejected")
)

func init() {
	SchemeBuilder.Register(&BatchAccount{}, &BatchAccountList{})
}
