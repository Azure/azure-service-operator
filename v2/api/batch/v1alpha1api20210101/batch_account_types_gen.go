// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/batch/v1alpha1api20210101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
type BatchAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchAccounts_SPEC                  `json:"spec,omitempty"`
	Status            BatchAccountCreateParameters_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &BatchAccount{}

// GetConditions returns the conditions of the resource
func (account *BatchAccount) GetConditions() conditions.Conditions {
	return account.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (account *BatchAccount) SetConditions(conditions conditions.Conditions) {
	account.Status.Conditions = conditions
}

var _ conversion.Convertible = &BatchAccount{}

// ConvertFrom populates our BatchAccount from the provided hub BatchAccount
func (account *BatchAccount) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210101storage.BatchAccount)
	if !ok {
		return fmt.Errorf("expected storage:batch/v1alpha1api20210101storage/BatchAccount but received %T instead", hub)
	}

	return account.AssignPropertiesFromBatchAccount(source)
}

// ConvertTo populates the provided hub BatchAccount from our BatchAccount
func (account *BatchAccount) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210101storage.BatchAccount)
	if !ok {
		return fmt.Errorf("expected storage:batch/v1alpha1api20210101storage/BatchAccount but received %T instead", hub)
	}

	return account.AssignPropertiesToBatchAccount(destination)
}

// +kubebuilder:webhook:path=/mutate-batch-azure-com-v1alpha1api20210101-batchaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=batch.azure.com,resources=batchaccounts,verbs=create;update,versions=v1alpha1api20210101,name=default.v1alpha1api20210101.batchaccounts.batch.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &BatchAccount{}

// Default applies defaults to the BatchAccount resource
func (account *BatchAccount) Default() {
	account.defaultImpl()
	var temp interface{} = account
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (account *BatchAccount) defaultAzureName() {
	if account.Spec.AzureName == "" {
		account.Spec.AzureName = account.Name
	}
}

// defaultImpl applies the code generated defaults to the BatchAccount resource
func (account *BatchAccount) defaultImpl() { account.defaultAzureName() }

var _ genruntime.KubernetesResource = &BatchAccount{}

// AzureName returns the Azure name of the resource
func (account *BatchAccount) AzureName() string {
	return account.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-01-01"
func (account BatchAccount) GetAPIVersion() string {
	return string(APIVersionValue)
}

// GetResourceKind returns the kind of the resource
func (account *BatchAccount) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (account *BatchAccount) GetSpec() genruntime.ConvertibleSpec {
	return &account.Spec
}

// GetStatus returns the status of this resource
func (account *BatchAccount) GetStatus() genruntime.ConvertibleStatus {
	return &account.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (account *BatchAccount) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (account *BatchAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &BatchAccountCreateParameters_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (account *BatchAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(account.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  account.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (account *BatchAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*BatchAccountCreateParameters_Status); ok {
		account.Status = *st
		return nil
	}

	// Convert status to required version
	var st BatchAccountCreateParameters_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	account.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-batch-azure-com-v1alpha1api20210101-batchaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=batch.azure.com,resources=batchaccounts,verbs=create;update,versions=v1alpha1api20210101,name=validate.v1alpha1api20210101.batchaccounts.batch.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &BatchAccount{}

// ValidateCreate validates the creation of the resource
func (account *BatchAccount) ValidateCreate() error {
	validations := account.createValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (account *BatchAccount) ValidateDelete() error {
	validations := account.deleteValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (account *BatchAccount) ValidateUpdate(old runtime.Object) error {
	validations := account.updateValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (account *BatchAccount) createValidations() []func() error {
	return []func() error{account.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (account *BatchAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (account *BatchAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return account.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (account *BatchAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&account.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromBatchAccount populates our BatchAccount from the provided source BatchAccount
func (account *BatchAccount) AssignPropertiesFromBatchAccount(source *v1alpha1api20210101storage.BatchAccount) error {

	// ObjectMeta
	account.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec BatchAccounts_SPEC
	err := spec.AssignPropertiesFromBatchAccountsSPEC(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountsSPEC() to populate field Spec")
	}
	account.Spec = spec

	// Status
	var status BatchAccountCreateParameters_Status
	err = status.AssignPropertiesFromBatchAccountCreateParametersStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountCreateParametersStatus() to populate field Status")
	}
	account.Status = status

	// No error
	return nil
}

// AssignPropertiesToBatchAccount populates the provided destination BatchAccount from our BatchAccount
func (account *BatchAccount) AssignPropertiesToBatchAccount(destination *v1alpha1api20210101storage.BatchAccount) error {

	// ObjectMeta
	destination.ObjectMeta = *account.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210101storage.BatchAccounts_SPEC
	err := account.Spec.AssignPropertiesToBatchAccountsSPEC(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBatchAccountsSPEC() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210101storage.BatchAccountCreateParameters_Status
	err = account.Status.AssignPropertiesToBatchAccountCreateParametersStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBatchAccountCreateParametersStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (account *BatchAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: account.Spec.OriginalVersion(),
		Kind:    "BatchAccount",
	}
}

// +kubebuilder:object:root=true
type BatchAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchAccount `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-01-01"}
type APIVersion string

const APIVersionValue = APIVersion("2021-01-01")

type BatchAccountCreateParameters_Status struct {
	//AutoStorage: The properties related to the auto-storage account.
	AutoStorage *AutoStorageBaseProperties_Status `json:"autoStorage,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Encryption: Configures how customer data is encrypted inside the Batch account.
	//By default, accounts are encrypted using a Microsoft managed key. For additional
	//control, a customer-managed key can be used instead.
	Encryption *EncryptionProperties_Status `json:"encryption,omitempty"`

	//Identity: The identity of the Batch account.
	Identity *BatchAccountIdentity_Status `json:"identity,omitempty"`

	//KeyVaultReference: A reference to the Azure key vault associated with the Batch
	//account.
	KeyVaultReference *KeyVaultReference_Status `json:"keyVaultReference,omitempty"`

	//Location: The region in which to create the account.
	Location *string `json:"location,omitempty"`

	//PoolAllocationMode: The pool allocation mode also affects how clients may
	//authenticate to the Batch Service API. If the mode is BatchService, clients may
	//authenticate using access keys or Azure Active Directory. If the mode is
	//UserSubscription, clients must use Azure Active Directory. The default is
	//BatchService.
	PoolAllocationMode *PoolAllocationMode_Status `json:"poolAllocationMode,omitempty"`

	//PublicNetworkAccess: If not specified, the default value is 'enabled'.
	PublicNetworkAccess *PublicNetworkAccessType_Status `json:"publicNetworkAccess,omitempty"`

	//Tags: The user-specified tags associated with the account.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleStatus = &BatchAccountCreateParameters_Status{}

// ConvertStatusFrom populates our BatchAccountCreateParameters_Status from the provided source
func (parameters *BatchAccountCreateParameters_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210101storage.BatchAccountCreateParameters_Status)
	if ok {
		// Populate our instance from source
		return parameters.AssignPropertiesFromBatchAccountCreateParametersStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101storage.BatchAccountCreateParameters_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = parameters.AssignPropertiesFromBatchAccountCreateParametersStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our BatchAccountCreateParameters_Status
func (parameters *BatchAccountCreateParameters_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210101storage.BatchAccountCreateParameters_Status)
	if ok {
		// Populate destination from our instance
		return parameters.AssignPropertiesToBatchAccountCreateParametersStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101storage.BatchAccountCreateParameters_Status{}
	err := parameters.AssignPropertiesToBatchAccountCreateParametersStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &BatchAccountCreateParameters_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (parameters *BatchAccountCreateParameters_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountCreateParameters_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (parameters *BatchAccountCreateParameters_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountCreateParameters_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountCreateParameters_StatusARM, got %T", armInput)
	}

	// Set property ‘AutoStorage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoStorage != nil {
			var autoStorage1 AutoStorageBaseProperties_Status
			err := autoStorage1.PopulateFromARM(owner, *typedInput.Properties.AutoStorage)
			if err != nil {
				return err
			}
			autoStorage := autoStorage1
			parameters.AutoStorage = &autoStorage
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperties_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			parameters.Encryption = &encryption
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 BatchAccountIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		parameters.Identity = &identity
	}

	// Set property ‘KeyVaultReference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyVaultReference != nil {
			var keyVaultReference1 KeyVaultReference_Status
			err := keyVaultReference1.PopulateFromARM(owner, *typedInput.Properties.KeyVaultReference)
			if err != nil {
				return err
			}
			keyVaultReference := keyVaultReference1
			parameters.KeyVaultReference = &keyVaultReference
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		parameters.Location = &location
	}

	// Set property ‘PoolAllocationMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PoolAllocationMode != nil {
			poolAllocationMode := *typedInput.Properties.PoolAllocationMode
			parameters.PoolAllocationMode = &poolAllocationMode
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			parameters.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		parameters.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			parameters.Tags[key] = value
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountCreateParametersStatus populates our BatchAccountCreateParameters_Status from the provided source BatchAccountCreateParameters_Status
func (parameters *BatchAccountCreateParameters_Status) AssignPropertiesFromBatchAccountCreateParametersStatus(source *v1alpha1api20210101storage.BatchAccountCreateParameters_Status) error {

	// AutoStorage
	if source.AutoStorage != nil {
		var autoStorage AutoStorageBaseProperties_Status
		err := autoStorage.AssignPropertiesFromAutoStorageBasePropertiesStatus(source.AutoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoStorageBasePropertiesStatus() to populate field AutoStorage")
		}
		parameters.AutoStorage = &autoStorage
	} else {
		parameters.AutoStorage = nil
	}

	// Conditions
	parameters.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperties_Status
		err := encryption.AssignPropertiesFromEncryptionPropertiesStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionPropertiesStatus() to populate field Encryption")
		}
		parameters.Encryption = &encryption
	} else {
		parameters.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity BatchAccountIdentity_Status
		err := identity.AssignPropertiesFromBatchAccountIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountIdentityStatus() to populate field Identity")
		}
		parameters.Identity = &identity
	} else {
		parameters.Identity = nil
	}

	// KeyVaultReference
	if source.KeyVaultReference != nil {
		var keyVaultReference KeyVaultReference_Status
		err := keyVaultReference.AssignPropertiesFromKeyVaultReferenceStatus(source.KeyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultReferenceStatus() to populate field KeyVaultReference")
		}
		parameters.KeyVaultReference = &keyVaultReference
	} else {
		parameters.KeyVaultReference = nil
	}

	// Location
	parameters.Location = genruntime.ClonePointerToString(source.Location)

	// PoolAllocationMode
	if source.PoolAllocationMode != nil {
		poolAllocationMode := PoolAllocationMode_Status(*source.PoolAllocationMode)
		parameters.PoolAllocationMode = &poolAllocationMode
	} else {
		parameters.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := PublicNetworkAccessType_Status(*source.PublicNetworkAccess)
		parameters.PublicNetworkAccess = &publicNetworkAccess
	} else {
		parameters.PublicNetworkAccess = nil
	}

	// Tags
	parameters.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToBatchAccountCreateParametersStatus populates the provided destination BatchAccountCreateParameters_Status from our BatchAccountCreateParameters_Status
func (parameters *BatchAccountCreateParameters_Status) AssignPropertiesToBatchAccountCreateParametersStatus(destination *v1alpha1api20210101storage.BatchAccountCreateParameters_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoStorage
	if parameters.AutoStorage != nil {
		var autoStorage v1alpha1api20210101storage.AutoStorageBaseProperties_Status
		err := parameters.AutoStorage.AssignPropertiesToAutoStorageBasePropertiesStatus(&autoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoStorageBasePropertiesStatus() to populate field AutoStorage")
		}
		destination.AutoStorage = &autoStorage
	} else {
		destination.AutoStorage = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(parameters.Conditions)

	// Encryption
	if parameters.Encryption != nil {
		var encryption v1alpha1api20210101storage.EncryptionProperties_Status
		err := parameters.Encryption.AssignPropertiesToEncryptionPropertiesStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionPropertiesStatus() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if parameters.Identity != nil {
		var identity v1alpha1api20210101storage.BatchAccountIdentity_Status
		err := parameters.Identity.AssignPropertiesToBatchAccountIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBatchAccountIdentityStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyVaultReference
	if parameters.KeyVaultReference != nil {
		var keyVaultReference v1alpha1api20210101storage.KeyVaultReference_Status
		err := parameters.KeyVaultReference.AssignPropertiesToKeyVaultReferenceStatus(&keyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultReferenceStatus() to populate field KeyVaultReference")
		}
		destination.KeyVaultReference = &keyVaultReference
	} else {
		destination.KeyVaultReference = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(parameters.Location)

	// PoolAllocationMode
	if parameters.PoolAllocationMode != nil {
		poolAllocationMode := string(*parameters.PoolAllocationMode)
		destination.PoolAllocationMode = &poolAllocationMode
	} else {
		destination.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if parameters.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*parameters.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(parameters.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BatchAccounts_SPEC struct {
	//AutoStorage: The properties related to the auto-storage account.
	AutoStorage *AutoStorageBaseProperties_Spec `json:"autoStorage,omitempty"`

	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Encryption: Configures how customer data is encrypted inside the Batch account.
	//By default, accounts are encrypted using a Microsoft managed key. For additional
	//control, a customer-managed key can be used instead.
	Encryption *EncryptionProperties_Spec `json:"encryption,omitempty"`

	//Identity: The identity of the Batch account.
	Identity *BatchAccountIdentity_Spec `json:"identity,omitempty"`

	//KeyVaultReference: A reference to the Azure key vault associated with the Batch
	//account.
	KeyVaultReference *KeyVaultReference_Spec `json:"keyVaultReference,omitempty"`

	// +kubebuilder:validation:Required
	//Location: The region in which to create the account.
	Location string `json:"location"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PoolAllocationMode: The pool allocation mode also affects how clients may
	//authenticate to the Batch Service API. If the mode is BatchService, clients may
	//authenticate using access keys or Azure Active Directory. If the mode is
	//UserSubscription, clients must use Azure Active Directory. The default is
	//BatchService.
	PoolAllocationMode *PoolAllocationMode_Spec `json:"poolAllocationMode,omitempty"`

	//PublicNetworkAccess: If not specified, the default value is 'enabled'.
	PublicNetworkAccess *PublicNetworkAccessType_Spec `json:"publicNetworkAccess,omitempty"`

	//Tags: The user-specified tags associated with the account.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &BatchAccounts_SPEC{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spec *BatchAccounts_SPEC) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spec == nil {
		return nil, nil
	}
	var result BatchAccounts_SPECARM

	// Set property ‘AzureName’:
	result.AzureName = spec.AzureName

	// Set property ‘Identity’:
	if spec.Identity != nil {
		identityARM, err := (*spec.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(BatchAccountIdentity_SpecARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	result.Location = spec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if spec.AutoStorage != nil ||
		spec.Encryption != nil ||
		spec.KeyVaultReference != nil ||
		spec.PoolAllocationMode != nil ||
		spec.PublicNetworkAccess != nil {
		result.Properties = &BatchAccountCreateProperties_SpecARM{}
	}
	if spec.AutoStorage != nil {
		autoStorageARM, err := (*spec.AutoStorage).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoStorage := autoStorageARM.(AutoStorageBaseProperties_SpecARM)
		result.Properties.AutoStorage = &autoStorage
	}
	if spec.Encryption != nil {
		encryptionARM, err := (*spec.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(EncryptionProperties_SpecARM)
		result.Properties.Encryption = &encryption
	}
	if spec.KeyVaultReference != nil {
		keyVaultReferenceARM, err := (*spec.KeyVaultReference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultReference := keyVaultReferenceARM.(KeyVaultReference_SpecARM)
		result.Properties.KeyVaultReference = &keyVaultReference
	}
	if spec.PoolAllocationMode != nil {
		poolAllocationMode := *spec.PoolAllocationMode
		result.Properties.PoolAllocationMode = &poolAllocationMode
	}
	if spec.PublicNetworkAccess != nil {
		publicNetworkAccess := *spec.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Tags’:
	if spec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range spec.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spec *BatchAccounts_SPEC) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccounts_SPECARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spec *BatchAccounts_SPEC) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccounts_SPECARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccounts_SPECARM, got %T", armInput)
	}

	// Set property ‘AutoStorage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoStorage != nil {
			var autoStorage1 AutoStorageBaseProperties_Spec
			err := autoStorage1.PopulateFromARM(owner, *typedInput.Properties.AutoStorage)
			if err != nil {
				return err
			}
			autoStorage := autoStorage1
			spec.AutoStorage = &autoStorage
		}
	}

	// Set property ‘AzureName’:
	spec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperties_Spec
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			spec.Encryption = &encryption
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 BatchAccountIdentity_Spec
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		spec.Identity = &identity
	}

	// Set property ‘KeyVaultReference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyVaultReference != nil {
			var keyVaultReference1 KeyVaultReference_Spec
			err := keyVaultReference1.PopulateFromARM(owner, *typedInput.Properties.KeyVaultReference)
			if err != nil {
				return err
			}
			keyVaultReference := keyVaultReference1
			spec.KeyVaultReference = &keyVaultReference
		}
	}

	// Set property ‘Location’:
	spec.Location = typedInput.Location

	// Set property ‘Owner’:
	spec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PoolAllocationMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PoolAllocationMode != nil {
			poolAllocationMode := *typedInput.Properties.PoolAllocationMode
			spec.PoolAllocationMode = &poolAllocationMode
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			spec.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		spec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			spec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &BatchAccounts_SPEC{}

// ConvertSpecFrom populates our BatchAccounts_SPEC from the provided source
func (spec *BatchAccounts_SPEC) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210101storage.BatchAccounts_SPEC)
	if ok {
		// Populate our instance from source
		return spec.AssignPropertiesFromBatchAccountsSPEC(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101storage.BatchAccounts_SPEC{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = spec.AssignPropertiesFromBatchAccountsSPEC(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our BatchAccounts_SPEC
func (spec *BatchAccounts_SPEC) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210101storage.BatchAccounts_SPEC)
	if ok {
		// Populate destination from our instance
		return spec.AssignPropertiesToBatchAccountsSPEC(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101storage.BatchAccounts_SPEC{}
	err := spec.AssignPropertiesToBatchAccountsSPEC(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromBatchAccountsSPEC populates our BatchAccounts_SPEC from the provided source BatchAccounts_SPEC
func (spec *BatchAccounts_SPEC) AssignPropertiesFromBatchAccountsSPEC(source *v1alpha1api20210101storage.BatchAccounts_SPEC) error {

	// AutoStorage
	if source.AutoStorage != nil {
		var autoStorage AutoStorageBaseProperties_Spec
		err := autoStorage.AssignPropertiesFromAutoStorageBasePropertiesSpec(source.AutoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoStorageBasePropertiesSpec() to populate field AutoStorage")
		}
		spec.AutoStorage = &autoStorage
	} else {
		spec.AutoStorage = nil
	}

	// AzureName
	spec.AzureName = source.AzureName

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperties_Spec
		err := encryption.AssignPropertiesFromEncryptionPropertiesSpec(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionPropertiesSpec() to populate field Encryption")
		}
		spec.Encryption = &encryption
	} else {
		spec.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity BatchAccountIdentity_Spec
		err := identity.AssignPropertiesFromBatchAccountIdentitySpec(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountIdentitySpec() to populate field Identity")
		}
		spec.Identity = &identity
	} else {
		spec.Identity = nil
	}

	// KeyVaultReference
	if source.KeyVaultReference != nil {
		var keyVaultReference KeyVaultReference_Spec
		err := keyVaultReference.AssignPropertiesFromKeyVaultReferenceSpec(source.KeyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultReferenceSpec() to populate field KeyVaultReference")
		}
		spec.KeyVaultReference = &keyVaultReference
	} else {
		spec.KeyVaultReference = nil
	}

	// Location
	spec.Location = genruntime.GetOptionalStringValue(source.Location)

	// Owner
	spec.Owner = source.Owner.Copy()

	// PoolAllocationMode
	if source.PoolAllocationMode != nil {
		poolAllocationMode := PoolAllocationMode_Spec(*source.PoolAllocationMode)
		spec.PoolAllocationMode = &poolAllocationMode
	} else {
		spec.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := PublicNetworkAccessType_Spec(*source.PublicNetworkAccess)
		spec.PublicNetworkAccess = &publicNetworkAccess
	} else {
		spec.PublicNetworkAccess = nil
	}

	// Tags
	spec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToBatchAccountsSPEC populates the provided destination BatchAccounts_SPEC from our BatchAccounts_SPEC
func (spec *BatchAccounts_SPEC) AssignPropertiesToBatchAccountsSPEC(destination *v1alpha1api20210101storage.BatchAccounts_SPEC) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoStorage
	if spec.AutoStorage != nil {
		var autoStorage v1alpha1api20210101storage.AutoStorageBaseProperties_Spec
		err := spec.AutoStorage.AssignPropertiesToAutoStorageBasePropertiesSpec(&autoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoStorageBasePropertiesSpec() to populate field AutoStorage")
		}
		destination.AutoStorage = &autoStorage
	} else {
		destination.AutoStorage = nil
	}

	// AzureName
	destination.AzureName = spec.AzureName

	// Encryption
	if spec.Encryption != nil {
		var encryption v1alpha1api20210101storage.EncryptionProperties_Spec
		err := spec.Encryption.AssignPropertiesToEncryptionPropertiesSpec(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionPropertiesSpec() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if spec.Identity != nil {
		var identity v1alpha1api20210101storage.BatchAccountIdentity_Spec
		err := spec.Identity.AssignPropertiesToBatchAccountIdentitySpec(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBatchAccountIdentitySpec() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyVaultReference
	if spec.KeyVaultReference != nil {
		var keyVaultReference v1alpha1api20210101storage.KeyVaultReference_Spec
		err := spec.KeyVaultReference.AssignPropertiesToKeyVaultReferenceSpec(&keyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultReferenceSpec() to populate field KeyVaultReference")
		}
		destination.KeyVaultReference = &keyVaultReference
	} else {
		destination.KeyVaultReference = nil
	}

	// Location
	location := spec.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = spec.OriginalVersion()

	// Owner
	destination.Owner = spec.Owner.Copy()

	// PoolAllocationMode
	if spec.PoolAllocationMode != nil {
		poolAllocationMode := string(*spec.PoolAllocationMode)
		destination.PoolAllocationMode = &poolAllocationMode
	} else {
		destination.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if spec.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*spec.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(spec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (spec *BatchAccounts_SPEC) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (spec *BatchAccounts_SPEC) SetAzureName(azureName string) { spec.AzureName = azureName }

type AutoStorageBaseProperties_Spec struct {
	// +kubebuilder:validation:Required
	//StorageAccountReference: The resource ID of the storage account to be used for
	//auto-storage account.
	StorageAccountReference genruntime.ResourceReference `armReference:"StorageAccountId" json:"storageAccountReference"`
}

var _ genruntime.ARMTransformer = &AutoStorageBaseProperties_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *AutoStorageBaseProperties_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result AutoStorageBaseProperties_SpecARM

	// Set property ‘StorageAccountId’:
	storageAccountReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(properties.StorageAccountReference)
	if err != nil {
		return nil, err
	}
	result.StorageAccountId = storageAccountReferenceARMID
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *AutoStorageBaseProperties_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoStorageBaseProperties_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *AutoStorageBaseProperties_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(AutoStorageBaseProperties_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoStorageBaseProperties_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘StorageAccountReference’

	// No error
	return nil
}

// AssignPropertiesFromAutoStorageBasePropertiesSpec populates our AutoStorageBaseProperties_Spec from the provided source AutoStorageBaseProperties_Spec
func (properties *AutoStorageBaseProperties_Spec) AssignPropertiesFromAutoStorageBasePropertiesSpec(source *v1alpha1api20210101storage.AutoStorageBaseProperties_Spec) error {

	// StorageAccountReference
	properties.StorageAccountReference = source.StorageAccountReference.Copy()

	// No error
	return nil
}

// AssignPropertiesToAutoStorageBasePropertiesSpec populates the provided destination AutoStorageBaseProperties_Spec from our AutoStorageBaseProperties_Spec
func (properties *AutoStorageBaseProperties_Spec) AssignPropertiesToAutoStorageBasePropertiesSpec(destination *v1alpha1api20210101storage.AutoStorageBaseProperties_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StorageAccountReference
	destination.StorageAccountReference = properties.StorageAccountReference.Copy()

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AutoStorageBaseProperties_Status struct {
	// +kubebuilder:validation:Required
	//StorageAccountId: The resource ID of the storage account to be used for
	//auto-storage account.
	StorageAccountId string `json:"storageAccountId"`
}

var _ genruntime.FromARMConverter = &AutoStorageBaseProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *AutoStorageBaseProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoStorageBaseProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *AutoStorageBaseProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoStorageBaseProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoStorageBaseProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘StorageAccountId’:
	properties.StorageAccountId = typedInput.StorageAccountId

	// No error
	return nil
}

// AssignPropertiesFromAutoStorageBasePropertiesStatus populates our AutoStorageBaseProperties_Status from the provided source AutoStorageBaseProperties_Status
func (properties *AutoStorageBaseProperties_Status) AssignPropertiesFromAutoStorageBasePropertiesStatus(source *v1alpha1api20210101storage.AutoStorageBaseProperties_Status) error {

	// StorageAccountId
	properties.StorageAccountId = genruntime.GetOptionalStringValue(source.StorageAccountId)

	// No error
	return nil
}

// AssignPropertiesToAutoStorageBasePropertiesStatus populates the provided destination AutoStorageBaseProperties_Status from our AutoStorageBaseProperties_Status
func (properties *AutoStorageBaseProperties_Status) AssignPropertiesToAutoStorageBasePropertiesStatus(destination *v1alpha1api20210101storage.AutoStorageBaseProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StorageAccountId
	storageAccountId := properties.StorageAccountId
	destination.StorageAccountId = &storageAccountId

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BatchAccountIdentity_Spec struct {
	// +kubebuilder:validation:Required
	//Type: The type of identity used for the Batch account.
	Type BatchAccountIdentitySpecType `json:"type"`
}

var _ genruntime.ARMTransformer = &BatchAccountIdentity_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *BatchAccountIdentity_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	var result BatchAccountIdentity_SpecARM

	// Set property ‘Type’:
	result.Type = identity.Type
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *BatchAccountIdentity_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentity_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *BatchAccountIdentity_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentity_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentity_SpecARM, got %T", armInput)
	}

	// Set property ‘Type’:
	identity.Type = typedInput.Type

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentitySpec populates our BatchAccountIdentity_Spec from the provided source BatchAccountIdentity_Spec
func (identity *BatchAccountIdentity_Spec) AssignPropertiesFromBatchAccountIdentitySpec(source *v1alpha1api20210101storage.BatchAccountIdentity_Spec) error {

	// Type
	if source.Type != nil {
		identity.Type = BatchAccountIdentitySpecType(*source.Type)
	} else {
		identity.Type = ""
	}

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentitySpec populates the provided destination BatchAccountIdentity_Spec from our BatchAccountIdentity_Spec
func (identity *BatchAccountIdentity_Spec) AssignPropertiesToBatchAccountIdentitySpec(destination *v1alpha1api20210101storage.BatchAccountIdentity_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	typeVar := string(identity.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BatchAccountIdentity_Status struct {
	//PrincipalId: The principal id of the Batch account. This property will only be
	//provided for a system assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant id associated with the Batch account. This property will
	//only be provided for a system assigned identity.
	TenantId *string `json:"tenantId,omitempty"`

	// +kubebuilder:validation:Required
	//Type: The type of identity used for the Batch account.
	Type BatchAccountIdentityStatusType `json:"type"`

	//UserAssignedIdentities: The list of user identities associated with the Batch
	//account. The user identity dictionary key references will be ARM resource ids in
	//the form:
	//'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]BatchAccountIdentity_Status_UserAssignedIdentities `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &BatchAccountIdentity_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *BatchAccountIdentity_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *BatchAccountIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	identity.Type = typedInput.Type

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]BatchAccountIdentity_Status_UserAssignedIdentities)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 BatchAccountIdentity_Status_UserAssignedIdentities
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentityStatus populates our BatchAccountIdentity_Status from the provided source BatchAccountIdentity_Status
func (identity *BatchAccountIdentity_Status) AssignPropertiesFromBatchAccountIdentityStatus(source *v1alpha1api20210101storage.BatchAccountIdentity_Status) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		identity.Type = BatchAccountIdentityStatusType(*source.Type)
	} else {
		identity.Type = ""
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]BatchAccountIdentity_Status_UserAssignedIdentities, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity BatchAccountIdentity_Status_UserAssignedIdentities
			err := userAssignedIdentity.AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentityStatus populates the provided destination BatchAccountIdentity_Status from our BatchAccountIdentity_Status
func (identity *BatchAccountIdentity_Status) AssignPropertiesToBatchAccountIdentityStatus(destination *v1alpha1api20210101storage.BatchAccountIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	typeVar := string(identity.Type)
	destination.Type = &typeVar

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20210101storage.BatchAccountIdentity_Status_UserAssignedIdentities, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20210101storage.BatchAccountIdentity_Status_UserAssignedIdentities
			err := userAssignedIdentityValue.AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionProperties_Spec struct {
	//KeySource: Type of the key source.
	KeySource *EncryptionPropertiesSpecKeySource `json:"keySource,omitempty"`

	//KeyVaultProperties: Additional details when using Microsoft.KeyVault
	KeyVaultProperties *KeyVaultProperties_Spec `json:"keyVaultProperties,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionProperties_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *EncryptionProperties_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result EncryptionProperties_SpecARM

	// Set property ‘KeySource’:
	if properties.KeySource != nil {
		keySource := *properties.KeySource
		result.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if properties.KeyVaultProperties != nil {
		keyVaultPropertiesARM, err := (*properties.KeyVaultProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultProperties := keyVaultPropertiesARM.(KeyVaultProperties_SpecARM)
		result.KeyVaultProperties = &keyVaultProperties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *EncryptionProperties_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionProperties_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *EncryptionProperties_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionProperties_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionProperties_SpecARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		properties.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties_Spec
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		properties.KeyVaultProperties = &keyVaultProperties
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionPropertiesSpec populates our EncryptionProperties_Spec from the provided source EncryptionProperties_Spec
func (properties *EncryptionProperties_Spec) AssignPropertiesFromEncryptionPropertiesSpec(source *v1alpha1api20210101storage.EncryptionProperties_Spec) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionPropertiesSpecKeySource(*source.KeySource)
		properties.KeySource = &keySource
	} else {
		properties.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties_Spec
		err := keyVaultProperty.AssignPropertiesFromKeyVaultPropertiesSpec(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesSpec() to populate field KeyVaultProperties")
		}
		properties.KeyVaultProperties = &keyVaultProperty
	} else {
		properties.KeyVaultProperties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionPropertiesSpec populates the provided destination EncryptionProperties_Spec from our EncryptionProperties_Spec
func (properties *EncryptionProperties_Spec) AssignPropertiesToEncryptionPropertiesSpec(destination *v1alpha1api20210101storage.EncryptionProperties_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if properties.KeySource != nil {
		keySource := string(*properties.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if properties.KeyVaultProperties != nil {
		var keyVaultProperty v1alpha1api20210101storage.KeyVaultProperties_Spec
		err := properties.KeyVaultProperties.AssignPropertiesToKeyVaultPropertiesSpec(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesSpec() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionProperties_Status struct {
	//KeySource: Type of the key source.
	KeySource *EncryptionPropertiesStatusKeySource `json:"keySource,omitempty"`

	//KeyVaultProperties: Additional details when using Microsoft.KeyVault
	KeyVaultProperties *KeyVaultProperties_Status `json:"keyVaultProperties,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *EncryptionProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *EncryptionProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		properties.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties_Status
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		properties.KeyVaultProperties = &keyVaultProperties
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionPropertiesStatus populates our EncryptionProperties_Status from the provided source EncryptionProperties_Status
func (properties *EncryptionProperties_Status) AssignPropertiesFromEncryptionPropertiesStatus(source *v1alpha1api20210101storage.EncryptionProperties_Status) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionPropertiesStatusKeySource(*source.KeySource)
		properties.KeySource = &keySource
	} else {
		properties.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties_Status
		err := keyVaultProperty.AssignPropertiesFromKeyVaultPropertiesStatus(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
		}
		properties.KeyVaultProperties = &keyVaultProperty
	} else {
		properties.KeyVaultProperties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionPropertiesStatus populates the provided destination EncryptionProperties_Status from our EncryptionProperties_Status
func (properties *EncryptionProperties_Status) AssignPropertiesToEncryptionPropertiesStatus(destination *v1alpha1api20210101storage.EncryptionProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if properties.KeySource != nil {
		keySource := string(*properties.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if properties.KeyVaultProperties != nil {
		var keyVaultProperty v1alpha1api20210101storage.KeyVaultProperties_Status
		err := properties.KeyVaultProperties.AssignPropertiesToKeyVaultPropertiesStatus(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultReference_Spec struct {
	// +kubebuilder:validation:Required
	//Reference: The resource ID of the Azure key vault associated with the Batch
	//account.
	Reference genruntime.ResourceReference `armReference:"Id" json:"reference"`

	// +kubebuilder:validation:Required
	//Url: The URL of the Azure key vault associated with the Batch account.
	Url string `json:"url"`
}

var _ genruntime.ARMTransformer = &KeyVaultReference_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *KeyVaultReference_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	var result KeyVaultReference_SpecARM

	// Set property ‘Id’:
	referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(reference.Reference)
	if err != nil {
		return nil, err
	}
	result.Id = referenceARMID

	// Set property ‘Url’:
	result.Url = reference.Url
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultReference_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultReference_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultReference_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultReference_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultReference_SpecARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// Set property ‘Url’:
	reference.Url = typedInput.Url

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultReferenceSpec populates our KeyVaultReference_Spec from the provided source KeyVaultReference_Spec
func (reference *KeyVaultReference_Spec) AssignPropertiesFromKeyVaultReferenceSpec(source *v1alpha1api20210101storage.KeyVaultReference_Spec) error {

	// Reference
	reference.Reference = source.Reference.Copy()

	// Url
	reference.Url = genruntime.GetOptionalStringValue(source.Url)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultReferenceSpec populates the provided destination KeyVaultReference_Spec from our KeyVaultReference_Spec
func (reference *KeyVaultReference_Spec) AssignPropertiesToKeyVaultReferenceSpec(destination *v1alpha1api20210101storage.KeyVaultReference_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	destination.Reference = reference.Reference.Copy()

	// Url
	url := reference.Url
	destination.Url = &url

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultReference_Status struct {
	// +kubebuilder:validation:Required
	//Id: The resource ID of the Azure key vault associated with the Batch account.
	Id string `json:"id"`

	// +kubebuilder:validation:Required
	//Url: The URL of the Azure key vault associated with the Batch account.
	Url string `json:"url"`
}

var _ genruntime.FromARMConverter = &KeyVaultReference_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultReference_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultReference_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	reference.Id = typedInput.Id

	// Set property ‘Url’:
	reference.Url = typedInput.Url

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultReferenceStatus populates our KeyVaultReference_Status from the provided source KeyVaultReference_Status
func (reference *KeyVaultReference_Status) AssignPropertiesFromKeyVaultReferenceStatus(source *v1alpha1api20210101storage.KeyVaultReference_Status) error {

	// Id
	reference.Id = genruntime.GetOptionalStringValue(source.Id)

	// Url
	reference.Url = genruntime.GetOptionalStringValue(source.Url)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultReferenceStatus populates the provided destination KeyVaultReference_Status from our KeyVaultReference_Status
func (reference *KeyVaultReference_Status) AssignPropertiesToKeyVaultReferenceStatus(destination *v1alpha1api20210101storage.KeyVaultReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	id := reference.Id
	destination.Id = &id

	// Url
	url := reference.Url
	destination.Url = &url

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"BatchService","UserSubscription"}
type PoolAllocationMode_Spec string

const (
	PoolAllocationMode_SpecBatchService     = PoolAllocationMode_Spec("BatchService")
	PoolAllocationMode_SpecUserSubscription = PoolAllocationMode_Spec("UserSubscription")
)

type PoolAllocationMode_Status string

const (
	PoolAllocationMode_StatusBatchService     = PoolAllocationMode_Status("BatchService")
	PoolAllocationMode_StatusUserSubscription = PoolAllocationMode_Status("UserSubscription")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type PublicNetworkAccessType_Spec string

const (
	PublicNetworkAccessType_SpecDisabled = PublicNetworkAccessType_Spec("Disabled")
	PublicNetworkAccessType_SpecEnabled  = PublicNetworkAccessType_Spec("Enabled")
)

type PublicNetworkAccessType_Status string

const (
	PublicNetworkAccessType_StatusDisabled = PublicNetworkAccessType_Status("Disabled")
	PublicNetworkAccessType_StatusEnabled  = PublicNetworkAccessType_Status("Enabled")
)

type BatchAccountIdentity_Status_UserAssignedIdentities struct {
	//ClientId: The client id of user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal id of user assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &BatchAccountIdentity_Status_UserAssignedIdentities{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identities *BatchAccountIdentity_Status_UserAssignedIdentities) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentity_Status_UserAssignedIdentitiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identities *BatchAccountIdentity_Status_UserAssignedIdentities) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentity_Status_UserAssignedIdentitiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentity_Status_UserAssignedIdentitiesARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identities.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identities.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities populates our BatchAccountIdentity_Status_UserAssignedIdentities from the provided source BatchAccountIdentity_Status_UserAssignedIdentities
func (identities *BatchAccountIdentity_Status_UserAssignedIdentities) AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities(source *v1alpha1api20210101storage.BatchAccountIdentity_Status_UserAssignedIdentities) error {

	// ClientId
	identities.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identities.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities populates the provided destination BatchAccountIdentity_Status_UserAssignedIdentities from our BatchAccountIdentity_Status_UserAssignedIdentities
func (identities *BatchAccountIdentity_Status_UserAssignedIdentities) AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities(destination *v1alpha1api20210101storage.BatchAccountIdentity_Status_UserAssignedIdentities) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identities.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identities.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Microsoft.Batch","Microsoft.KeyVault"}
type EncryptionPropertiesSpecKeySource string

const (
	EncryptionPropertiesSpecKeySourceMicrosoftBatch    = EncryptionPropertiesSpecKeySource("Microsoft.Batch")
	EncryptionPropertiesSpecKeySourceMicrosoftKeyVault = EncryptionPropertiesSpecKeySource("Microsoft.KeyVault")
)

type EncryptionPropertiesStatusKeySource string

const (
	EncryptionPropertiesStatusKeySourceMicrosoftBatch    = EncryptionPropertiesStatusKeySource("Microsoft.Batch")
	EncryptionPropertiesStatusKeySourceMicrosoftKeyVault = EncryptionPropertiesStatusKeySource("Microsoft.KeyVault")
)

type KeyVaultProperties_Spec struct {
	//KeyIdentifier: Full path to the versioned secret. Example
	//https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
	//To be usable the following prerequisites must be met:
	//The Batch Account has a System Assigned identity
	//The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap
	//permissions
	//The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result KeyVaultProperties_SpecARM

	// Set property ‘KeyIdentifier’:
	if properties.KeyIdentifier != nil {
		keyIdentifier := *properties.KeyIdentifier
		result.KeyIdentifier = &keyIdentifier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_SpecARM, got %T", armInput)
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesSpec populates our KeyVaultProperties_Spec from the provided source KeyVaultProperties_Spec
func (properties *KeyVaultProperties_Spec) AssignPropertiesFromKeyVaultPropertiesSpec(source *v1alpha1api20210101storage.KeyVaultProperties_Spec) error {

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesSpec populates the provided destination KeyVaultProperties_Spec from our KeyVaultProperties_Spec
func (properties *KeyVaultProperties_Spec) AssignPropertiesToKeyVaultPropertiesSpec(destination *v1alpha1api20210101storage.KeyVaultProperties_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultProperties_Status struct {
	//KeyIdentifier: Full path to the versioned secret. Example
	//https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
	//To be usable the following prerequisites must be met:
	//The Batch Account has a System Assigned identity
	//The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap
	//permissions
	//The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesStatus populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultPropertiesStatus(source *v1alpha1api20210101storage.KeyVaultProperties_Status) error {

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesStatus populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesToKeyVaultPropertiesStatus(destination *v1alpha1api20210101storage.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&BatchAccount{}, &BatchAccountList{})
}
