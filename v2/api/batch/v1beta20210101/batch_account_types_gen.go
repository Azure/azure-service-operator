// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210101

import (
	"fmt"
	v20210101s "github.com/Azure/azure-service-operator/v2/api/batch/v1beta20210101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /batch/resource-manager/Microsoft.Batch/stable/2021-01-01/BatchManagement.json
type BatchAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchAccount_Spec   `json:"spec,omitempty"`
	Status            BatchAccount_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &BatchAccount{}

// GetConditions returns the conditions of the resource
func (account *BatchAccount) GetConditions() conditions.Conditions {
	return account.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (account *BatchAccount) SetConditions(conditions conditions.Conditions) {
	account.Status.Conditions = conditions
}

var _ conversion.Convertible = &BatchAccount{}

// ConvertFrom populates our BatchAccount from the provided hub BatchAccount
func (account *BatchAccount) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210101s.BatchAccount)
	if !ok {
		return fmt.Errorf("expected batch/v1beta20210101storage/BatchAccount but received %T instead", hub)
	}

	return account.AssignPropertiesFromBatchAccount(source)
}

// ConvertTo populates the provided hub BatchAccount from our BatchAccount
func (account *BatchAccount) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210101s.BatchAccount)
	if !ok {
		return fmt.Errorf("expected batch/v1beta20210101storage/BatchAccount but received %T instead", hub)
	}

	return account.AssignPropertiesToBatchAccount(destination)
}

// +kubebuilder:webhook:path=/mutate-batch-azure-com-v1beta20210101-batchaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=batch.azure.com,resources=batchaccounts,verbs=create;update,versions=v1beta20210101,name=default.v1beta20210101.batchaccounts.batch.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &BatchAccount{}

// Default applies defaults to the BatchAccount resource
func (account *BatchAccount) Default() {
	account.defaultImpl()
	var temp interface{} = account
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (account *BatchAccount) defaultAzureName() {
	if account.Spec.AzureName == "" {
		account.Spec.AzureName = account.Name
	}
}

// defaultImpl applies the code generated defaults to the BatchAccount resource
func (account *BatchAccount) defaultImpl() { account.defaultAzureName() }

var _ genruntime.KubernetesResource = &BatchAccount{}

// AzureName returns the Azure name of the resource
func (account *BatchAccount) AzureName() string {
	return account.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "20210101"
func (account BatchAccount) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceKind returns the kind of the resource
func (account *BatchAccount) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (account *BatchAccount) GetSpec() genruntime.ConvertibleSpec {
	return &account.Spec
}

// GetStatus returns the status of this resource
func (account *BatchAccount) GetStatus() genruntime.ConvertibleStatus {
	return &account.Status
}

// GetType returns the ARM Type of the resource. This is always ""
func (account *BatchAccount) GetType() string {
	return ""
}

// NewEmptyStatus returns a new empty (blank) status
func (account *BatchAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &BatchAccount_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (account *BatchAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(account.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  account.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (account *BatchAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*BatchAccount_STATUS); ok {
		account.Status = *st
		return nil
	}

	// Convert status to required version
	var st BatchAccount_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	account.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-batch-azure-com-v1beta20210101-batchaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=batch.azure.com,resources=batchaccounts,verbs=create;update,versions=v1beta20210101,name=validate.v1beta20210101.batchaccounts.batch.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &BatchAccount{}

// ValidateCreate validates the creation of the resource
func (account *BatchAccount) ValidateCreate() error {
	validations := account.createValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (account *BatchAccount) ValidateDelete() error {
	validations := account.deleteValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (account *BatchAccount) ValidateUpdate(old runtime.Object) error {
	validations := account.updateValidations()
	var temp interface{} = account
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (account *BatchAccount) createValidations() []func() error {
	return []func() error{account.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (account *BatchAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (account *BatchAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return account.validateResourceReferences()
		},
		account.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (account *BatchAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&account.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (account *BatchAccount) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*BatchAccount)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, account)
}

// AssignPropertiesFromBatchAccount populates our BatchAccount from the provided source BatchAccount
func (account *BatchAccount) AssignPropertiesFromBatchAccount(source *v20210101s.BatchAccount) error {

	// ObjectMeta
	account.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec BatchAccount_Spec
	err := spec.AssignPropertiesFromBatchAccount_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBatchAccount_Spec() to populate field Spec")
	}
	account.Spec = spec

	// Status
	var status BatchAccount_STATUS
	err = status.AssignPropertiesFromBatchAccount_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromBatchAccount_STATUS() to populate field Status")
	}
	account.Status = status

	// No error
	return nil
}

// AssignPropertiesToBatchAccount populates the provided destination BatchAccount from our BatchAccount
func (account *BatchAccount) AssignPropertiesToBatchAccount(destination *v20210101s.BatchAccount) error {

	// ObjectMeta
	destination.ObjectMeta = *account.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210101s.BatchAccount_Spec
	err := account.Spec.AssignPropertiesToBatchAccount_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBatchAccount_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210101s.BatchAccount_STATUS
	err = account.Status.AssignPropertiesToBatchAccount_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToBatchAccount_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (account *BatchAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: account.Spec.OriginalVersion(),
		Kind:    "BatchAccount",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /batch/resource-manager/Microsoft.Batch/stable/2021-01-01/BatchManagement.json
type BatchAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchAccount `json:"items"`
}

// +kubebuilder:validation:Enum={"20210101"}
type APIVersion string

const APIVersion_Value = APIVersion("20210101")

type BatchAccount_STATUS struct {
	// AutoStorage: The properties related to the auto-storage account.
	AutoStorage *AutoStorageBaseProperties_STATUS `json:"autoStorage,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Encryption: Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using
	// a Microsoft managed key. For additional control, a customer-managed key can be used instead.
	Encryption *EncryptionProperties_STATUS `json:"encryption,omitempty"`

	// Identity: The identity of the Batch account.
	Identity *BatchAccountIdentity_STATUS `json:"identity,omitempty"`

	// KeyVaultReference: A reference to the Azure key vault associated with the Batch account.
	KeyVaultReference *KeyVaultReference_STATUS `json:"keyVaultReference,omitempty"`

	// Location: The region in which to create the account.
	Location *string `json:"location,omitempty"`

	// PoolAllocationMode: The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the
	// mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is
	// UserSubscription, clients must use Azure Active Directory. The default is BatchService.
	PoolAllocationMode *PoolAllocationMode_STATUS `json:"poolAllocationMode,omitempty"`

	// PublicNetworkAccess: If not specified, the default value is 'enabled'.
	PublicNetworkAccess *PublicNetworkAccessType_STATUS `json:"publicNetworkAccess,omitempty"`

	// Tags: The user-specified tags associated with the account.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleStatus = &BatchAccount_STATUS{}

// ConvertStatusFrom populates our BatchAccount_STATUS from the provided source
func (account *BatchAccount_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210101s.BatchAccount_STATUS)
	if ok {
		// Populate our instance from source
		return account.AssignPropertiesFromBatchAccount_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210101s.BatchAccount_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = account.AssignPropertiesFromBatchAccount_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our BatchAccount_STATUS
func (account *BatchAccount_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210101s.BatchAccount_STATUS)
	if ok {
		// Populate destination from our instance
		return account.AssignPropertiesToBatchAccount_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210101s.BatchAccount_STATUS{}
	err := account.AssignPropertiesToBatchAccount_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &BatchAccount_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (account *BatchAccount_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccount_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (account *BatchAccount_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccount_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccount_STATUSARM, got %T", armInput)
	}

	// Set property ‘AutoStorage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoStorage != nil {
			var autoStorage1 AutoStorageBaseProperties_STATUS
			err := autoStorage1.PopulateFromARM(owner, *typedInput.Properties.AutoStorage)
			if err != nil {
				return err
			}
			autoStorage := autoStorage1
			account.AutoStorage = &autoStorage
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperties_STATUS
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			account.Encryption = &encryption
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 BatchAccountIdentity_STATUS
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		account.Identity = &identity
	}

	// Set property ‘KeyVaultReference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyVaultReference != nil {
			var keyVaultReference1 KeyVaultReference_STATUS
			err := keyVaultReference1.PopulateFromARM(owner, *typedInput.Properties.KeyVaultReference)
			if err != nil {
				return err
			}
			keyVaultReference := keyVaultReference1
			account.KeyVaultReference = &keyVaultReference
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		account.Location = &location
	}

	// Set property ‘PoolAllocationMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PoolAllocationMode != nil {
			poolAllocationMode := *typedInput.Properties.PoolAllocationMode
			account.PoolAllocationMode = &poolAllocationMode
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			account.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		account.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			account.Tags[key] = value
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccount_STATUS populates our BatchAccount_STATUS from the provided source BatchAccount_STATUS
func (account *BatchAccount_STATUS) AssignPropertiesFromBatchAccount_STATUS(source *v20210101s.BatchAccount_STATUS) error {

	// AutoStorage
	if source.AutoStorage != nil {
		var autoStorage AutoStorageBaseProperties_STATUS
		err := autoStorage.AssignPropertiesFromAutoStorageBaseProperties_STATUS(source.AutoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoStorageBaseProperties_STATUS() to populate field AutoStorage")
		}
		account.AutoStorage = &autoStorage
	} else {
		account.AutoStorage = nil
	}

	// Conditions
	account.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperties_STATUS
		err := encryption.AssignPropertiesFromEncryptionProperties_STATUS(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionProperties_STATUS() to populate field Encryption")
		}
		account.Encryption = &encryption
	} else {
		account.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity BatchAccountIdentity_STATUS
		err := identity.AssignPropertiesFromBatchAccountIdentity_STATUS(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountIdentity_STATUS() to populate field Identity")
		}
		account.Identity = &identity
	} else {
		account.Identity = nil
	}

	// KeyVaultReference
	if source.KeyVaultReference != nil {
		var keyVaultReference KeyVaultReference_STATUS
		err := keyVaultReference.AssignPropertiesFromKeyVaultReference_STATUS(source.KeyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultReference_STATUS() to populate field KeyVaultReference")
		}
		account.KeyVaultReference = &keyVaultReference
	} else {
		account.KeyVaultReference = nil
	}

	// Location
	account.Location = genruntime.ClonePointerToString(source.Location)

	// PoolAllocationMode
	if source.PoolAllocationMode != nil {
		poolAllocationMode := PoolAllocationMode_STATUS(*source.PoolAllocationMode)
		account.PoolAllocationMode = &poolAllocationMode
	} else {
		account.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := PublicNetworkAccessType_STATUS(*source.PublicNetworkAccess)
		account.PublicNetworkAccess = &publicNetworkAccess
	} else {
		account.PublicNetworkAccess = nil
	}

	// Tags
	account.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToBatchAccount_STATUS populates the provided destination BatchAccount_STATUS from our BatchAccount_STATUS
func (account *BatchAccount_STATUS) AssignPropertiesToBatchAccount_STATUS(destination *v20210101s.BatchAccount_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoStorage
	if account.AutoStorage != nil {
		var autoStorage v20210101s.AutoStorageBaseProperties_STATUS
		err := account.AutoStorage.AssignPropertiesToAutoStorageBaseProperties_STATUS(&autoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoStorageBaseProperties_STATUS() to populate field AutoStorage")
		}
		destination.AutoStorage = &autoStorage
	} else {
		destination.AutoStorage = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(account.Conditions)

	// Encryption
	if account.Encryption != nil {
		var encryption v20210101s.EncryptionProperties_STATUS
		err := account.Encryption.AssignPropertiesToEncryptionProperties_STATUS(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionProperties_STATUS() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if account.Identity != nil {
		var identity v20210101s.BatchAccountIdentity_STATUS
		err := account.Identity.AssignPropertiesToBatchAccountIdentity_STATUS(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBatchAccountIdentity_STATUS() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyVaultReference
	if account.KeyVaultReference != nil {
		var keyVaultReference v20210101s.KeyVaultReference_STATUS
		err := account.KeyVaultReference.AssignPropertiesToKeyVaultReference_STATUS(&keyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultReference_STATUS() to populate field KeyVaultReference")
		}
		destination.KeyVaultReference = &keyVaultReference
	} else {
		destination.KeyVaultReference = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(account.Location)

	// PoolAllocationMode
	if account.PoolAllocationMode != nil {
		poolAllocationMode := string(*account.PoolAllocationMode)
		destination.PoolAllocationMode = &poolAllocationMode
	} else {
		destination.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if account.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*account.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(account.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BatchAccount_Spec struct {
	// AutoStorage: The properties related to the auto-storage account.
	AutoStorage *AutoStorageBaseProperties `json:"autoStorage,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// Encryption: Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using
	// a Microsoft managed key. For additional control, a customer-managed key can be used instead.
	Encryption *EncryptionProperties `json:"encryption,omitempty"`

	// Identity: The identity of the Batch account.
	Identity *BatchAccountIdentity `json:"identity,omitempty"`

	// KeyVaultReference: A reference to the Azure key vault associated with the Batch account.
	KeyVaultReference *KeyVaultReference `json:"keyVaultReference,omitempty"`

	// +kubebuilder:validation:Required
	// Location: The region in which to create the account.
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`

	// PoolAllocationMode: The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the
	// mode is BatchService, clients may authenticate using access keys or Azure Active Directory. If the mode is
	// UserSubscription, clients must use Azure Active Directory. The default is BatchService.
	PoolAllocationMode *PoolAllocationMode `json:"poolAllocationMode,omitempty"`

	// PublicNetworkAccess: If not specified, the default value is 'enabled'.
	PublicNetworkAccess *PublicNetworkAccessType `json:"publicNetworkAccess,omitempty"`

	// Tags: The user-specified tags associated with the account.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &BatchAccount_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (account *BatchAccount_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if account == nil {
		return nil, nil
	}
	result := &BatchAccount_SpecARM{}

	// Set property ‘AzureName’:
	result.AzureName = account.AzureName

	// Set property ‘Identity’:
	if account.Identity != nil {
		identityARM, err := (*account.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identityARM.(*BatchAccountIdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	if account.Location != nil {
		location := *account.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if account.AutoStorage != nil ||
		account.Encryption != nil ||
		account.KeyVaultReference != nil ||
		account.PoolAllocationMode != nil ||
		account.PublicNetworkAccess != nil {
		result.Properties = &BatchAccountCreatePropertiesARM{}
	}
	if account.AutoStorage != nil {
		autoStorageARM, err := (*account.AutoStorage).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoStorage := *autoStorageARM.(*AutoStorageBasePropertiesARM)
		result.Properties.AutoStorage = &autoStorage
	}
	if account.Encryption != nil {
		encryptionARM, err := (*account.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := *encryptionARM.(*EncryptionPropertiesARM)
		result.Properties.Encryption = &encryption
	}
	if account.KeyVaultReference != nil {
		keyVaultReferenceARM, err := (*account.KeyVaultReference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultReference := *keyVaultReferenceARM.(*KeyVaultReferenceARM)
		result.Properties.KeyVaultReference = &keyVaultReference
	}
	if account.PoolAllocationMode != nil {
		poolAllocationMode := *account.PoolAllocationMode
		result.Properties.PoolAllocationMode = &poolAllocationMode
	}
	if account.PublicNetworkAccess != nil {
		publicNetworkAccess := *account.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Tags’:
	if account.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range account.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (account *BatchAccount_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccount_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (account *BatchAccount_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccount_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccount_SpecARM, got %T", armInput)
	}

	// Set property ‘AutoStorage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoStorage != nil {
			var autoStorage1 AutoStorageBaseProperties
			err := autoStorage1.PopulateFromARM(owner, *typedInput.Properties.AutoStorage)
			if err != nil {
				return err
			}
			autoStorage := autoStorage1
			account.AutoStorage = &autoStorage
		}
	}

	// Set property ‘AzureName’:
	account.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperties
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			account.Encryption = &encryption
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 BatchAccountIdentity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		account.Identity = &identity
	}

	// Set property ‘KeyVaultReference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyVaultReference != nil {
			var keyVaultReference1 KeyVaultReference
			err := keyVaultReference1.PopulateFromARM(owner, *typedInput.Properties.KeyVaultReference)
			if err != nil {
				return err
			}
			keyVaultReference := keyVaultReference1
			account.KeyVaultReference = &keyVaultReference
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		account.Location = &location
	}

	// Set property ‘Owner’:
	account.Owner = &genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PoolAllocationMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PoolAllocationMode != nil {
			poolAllocationMode := *typedInput.Properties.PoolAllocationMode
			account.PoolAllocationMode = &poolAllocationMode
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			account.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		account.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			account.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &BatchAccount_Spec{}

// ConvertSpecFrom populates our BatchAccount_Spec from the provided source
func (account *BatchAccount_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210101s.BatchAccount_Spec)
	if ok {
		// Populate our instance from source
		return account.AssignPropertiesFromBatchAccount_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210101s.BatchAccount_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = account.AssignPropertiesFromBatchAccount_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our BatchAccount_Spec
func (account *BatchAccount_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210101s.BatchAccount_Spec)
	if ok {
		// Populate destination from our instance
		return account.AssignPropertiesToBatchAccount_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210101s.BatchAccount_Spec{}
	err := account.AssignPropertiesToBatchAccount_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromBatchAccount_Spec populates our BatchAccount_Spec from the provided source BatchAccount_Spec
func (account *BatchAccount_Spec) AssignPropertiesFromBatchAccount_Spec(source *v20210101s.BatchAccount_Spec) error {

	// AutoStorage
	if source.AutoStorage != nil {
		var autoStorage AutoStorageBaseProperties
		err := autoStorage.AssignPropertiesFromAutoStorageBaseProperties(source.AutoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromAutoStorageBaseProperties() to populate field AutoStorage")
		}
		account.AutoStorage = &autoStorage
	} else {
		account.AutoStorage = nil
	}

	// AzureName
	account.AzureName = source.AzureName

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperties
		err := encryption.AssignPropertiesFromEncryptionProperties(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionProperties() to populate field Encryption")
		}
		account.Encryption = &encryption
	} else {
		account.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity BatchAccountIdentity
		err := identity.AssignPropertiesFromBatchAccountIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountIdentity() to populate field Identity")
		}
		account.Identity = &identity
	} else {
		account.Identity = nil
	}

	// KeyVaultReference
	if source.KeyVaultReference != nil {
		var keyVaultReference KeyVaultReference
		err := keyVaultReference.AssignPropertiesFromKeyVaultReference(source.KeyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultReference() to populate field KeyVaultReference")
		}
		account.KeyVaultReference = &keyVaultReference
	} else {
		account.KeyVaultReference = nil
	}

	// Location
	account.Location = genruntime.ClonePointerToString(source.Location)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		account.Owner = &owner
	} else {
		account.Owner = nil
	}

	// PoolAllocationMode
	if source.PoolAllocationMode != nil {
		poolAllocationMode := PoolAllocationMode(*source.PoolAllocationMode)
		account.PoolAllocationMode = &poolAllocationMode
	} else {
		account.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := PublicNetworkAccessType(*source.PublicNetworkAccess)
		account.PublicNetworkAccess = &publicNetworkAccess
	} else {
		account.PublicNetworkAccess = nil
	}

	// Tags
	account.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToBatchAccount_Spec populates the provided destination BatchAccount_Spec from our BatchAccount_Spec
func (account *BatchAccount_Spec) AssignPropertiesToBatchAccount_Spec(destination *v20210101s.BatchAccount_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoStorage
	if account.AutoStorage != nil {
		var autoStorage v20210101s.AutoStorageBaseProperties
		err := account.AutoStorage.AssignPropertiesToAutoStorageBaseProperties(&autoStorage)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToAutoStorageBaseProperties() to populate field AutoStorage")
		}
		destination.AutoStorage = &autoStorage
	} else {
		destination.AutoStorage = nil
	}

	// AzureName
	destination.AzureName = account.AzureName

	// Encryption
	if account.Encryption != nil {
		var encryption v20210101s.EncryptionProperties
		err := account.Encryption.AssignPropertiesToEncryptionProperties(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionProperties() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if account.Identity != nil {
		var identity v20210101s.BatchAccountIdentity
		err := account.Identity.AssignPropertiesToBatchAccountIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToBatchAccountIdentity() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyVaultReference
	if account.KeyVaultReference != nil {
		var keyVaultReference v20210101s.KeyVaultReference
		err := account.KeyVaultReference.AssignPropertiesToKeyVaultReference(&keyVaultReference)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultReference() to populate field KeyVaultReference")
		}
		destination.KeyVaultReference = &keyVaultReference
	} else {
		destination.KeyVaultReference = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(account.Location)

	// OriginalVersion
	destination.OriginalVersion = account.OriginalVersion()

	// Owner
	if account.Owner != nil {
		owner := account.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PoolAllocationMode
	if account.PoolAllocationMode != nil {
		poolAllocationMode := string(*account.PoolAllocationMode)
		destination.PoolAllocationMode = &poolAllocationMode
	} else {
		destination.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if account.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*account.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(account.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (account *BatchAccount_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (account *BatchAccount_Spec) SetAzureName(azureName string) { account.AzureName = azureName }

type AutoStorageBaseProperties struct {
	// +kubebuilder:validation:Required
	// StorageAccountReference: The resource ID of the storage account to be used for auto-storage account.
	StorageAccountReference *genruntime.ResourceReference `armReference:"StorageAccountId" json:"storageAccountReference,omitempty"`
}

var _ genruntime.ARMTransformer = &AutoStorageBaseProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *AutoStorageBaseProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &AutoStorageBasePropertiesARM{}

	// Set property ‘StorageAccountId’:
	if properties.StorageAccountReference != nil {
		storageAccountReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*properties.StorageAccountReference)
		if err != nil {
			return nil, err
		}
		storageAccountReference := storageAccountReferenceARMID
		result.StorageAccountId = &storageAccountReference
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *AutoStorageBaseProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoStorageBasePropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *AutoStorageBaseProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(AutoStorageBasePropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoStorageBasePropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘StorageAccountReference’

	// No error
	return nil
}

// AssignPropertiesFromAutoStorageBaseProperties populates our AutoStorageBaseProperties from the provided source AutoStorageBaseProperties
func (properties *AutoStorageBaseProperties) AssignPropertiesFromAutoStorageBaseProperties(source *v20210101s.AutoStorageBaseProperties) error {

	// StorageAccountReference
	if source.StorageAccountReference != nil {
		storageAccountReference := source.StorageAccountReference.Copy()
		properties.StorageAccountReference = &storageAccountReference
	} else {
		properties.StorageAccountReference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAutoStorageBaseProperties populates the provided destination AutoStorageBaseProperties from our AutoStorageBaseProperties
func (properties *AutoStorageBaseProperties) AssignPropertiesToAutoStorageBaseProperties(destination *v20210101s.AutoStorageBaseProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StorageAccountReference
	if properties.StorageAccountReference != nil {
		storageAccountReference := properties.StorageAccountReference.Copy()
		destination.StorageAccountReference = &storageAccountReference
	} else {
		destination.StorageAccountReference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type AutoStorageBaseProperties_STATUS struct {
	// StorageAccountId: The resource ID of the storage account to be used for auto-storage account.
	StorageAccountId *string `json:"storageAccountId,omitempty"`
}

var _ genruntime.FromARMConverter = &AutoStorageBaseProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *AutoStorageBaseProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoStorageBaseProperties_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *AutoStorageBaseProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoStorageBaseProperties_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoStorageBaseProperties_STATUSARM, got %T", armInput)
	}

	// Set property ‘StorageAccountId’:
	if typedInput.StorageAccountId != nil {
		storageAccountId := *typedInput.StorageAccountId
		properties.StorageAccountId = &storageAccountId
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoStorageBaseProperties_STATUS populates our AutoStorageBaseProperties_STATUS from the provided source AutoStorageBaseProperties_STATUS
func (properties *AutoStorageBaseProperties_STATUS) AssignPropertiesFromAutoStorageBaseProperties_STATUS(source *v20210101s.AutoStorageBaseProperties_STATUS) error {

	// StorageAccountId
	properties.StorageAccountId = genruntime.ClonePointerToString(source.StorageAccountId)

	// No error
	return nil
}

// AssignPropertiesToAutoStorageBaseProperties_STATUS populates the provided destination AutoStorageBaseProperties_STATUS from our AutoStorageBaseProperties_STATUS
func (properties *AutoStorageBaseProperties_STATUS) AssignPropertiesToAutoStorageBaseProperties_STATUS(destination *v20210101s.AutoStorageBaseProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StorageAccountId
	destination.StorageAccountId = genruntime.ClonePointerToString(properties.StorageAccountId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BatchAccountIdentity struct {
	// PrincipalId: The principal id of the Batch account. This property will only be provided for a system assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	// TenantId: The tenant id associated with the Batch account. This property will only be provided for a system assigned
	// identity.
	TenantId *string `json:"tenantId,omitempty"`

	// +kubebuilder:validation:Required
	// Type: The type of identity used for the Batch account.
	Type *BatchAccountIdentity_Type `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &BatchAccountIdentity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (identity *BatchAccountIdentity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if identity == nil {
		return nil, nil
	}
	result := &BatchAccountIdentityARM{}

	// Set property ‘PrincipalId’:
	if identity.PrincipalId != nil {
		principalId := *identity.PrincipalId
		result.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if identity.TenantId != nil {
		tenantId := *identity.TenantId
		result.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if identity.Type != nil {
		typeVar := *identity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *BatchAccountIdentity) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *BatchAccountIdentity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentityARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentity populates our BatchAccountIdentity from the provided source BatchAccountIdentity
func (identity *BatchAccountIdentity) AssignPropertiesFromBatchAccountIdentity(source *v20210101s.BatchAccountIdentity) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := BatchAccountIdentity_Type(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentity populates the provided destination BatchAccountIdentity from our BatchAccountIdentity
func (identity *BatchAccountIdentity) AssignPropertiesToBatchAccountIdentity(destination *v20210101s.BatchAccountIdentity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type BatchAccountIdentity_STATUS struct {
	// PrincipalId: The principal id of the Batch account. This property will only be provided for a system assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	// TenantId: The tenant id associated with the Batch account. This property will only be provided for a system assigned
	// identity.
	TenantId *string `json:"tenantId,omitempty"`

	// Type: The type of identity used for the Batch account.
	Type *BatchAccountIdentity_Type_STATUS `json:"type,omitempty"`

	// UserAssignedIdentities: The list of user identities associated with the Batch account. The user identity dictionary key
	// references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]BatchAccountIdentity_UserAssignedIdentities_STATUS `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &BatchAccountIdentity_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identity *BatchAccountIdentity_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentity_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identity *BatchAccountIdentity_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentity_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentity_STATUSARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identity.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		identity.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		identity.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		identity.UserAssignedIdentities = make(map[string]BatchAccountIdentity_UserAssignedIdentities_STATUS)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 BatchAccountIdentity_UserAssignedIdentities_STATUS
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			identity.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentity_STATUS populates our BatchAccountIdentity_STATUS from the provided source BatchAccountIdentity_STATUS
func (identity *BatchAccountIdentity_STATUS) AssignPropertiesFromBatchAccountIdentity_STATUS(source *v20210101s.BatchAccountIdentity_STATUS) error {

	// PrincipalId
	identity.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	identity.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := BatchAccountIdentity_Type_STATUS(*source.Type)
		identity.Type = &typeVar
	} else {
		identity.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]BatchAccountIdentity_UserAssignedIdentities_STATUS, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity BatchAccountIdentity_UserAssignedIdentities_STATUS
			err := userAssignedIdentity.AssignPropertiesFromBatchAccountIdentity_UserAssignedIdentities_STATUS(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromBatchAccountIdentity_UserAssignedIdentities_STATUS() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		identity.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		identity.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentity_STATUS populates the provided destination BatchAccountIdentity_STATUS from our BatchAccountIdentity_STATUS
func (identity *BatchAccountIdentity_STATUS) AssignPropertiesToBatchAccountIdentity_STATUS(destination *v20210101s.BatchAccountIdentity_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identity.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(identity.TenantId)

	// Type
	if identity.Type != nil {
		typeVar := string(*identity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if identity.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v20210101s.BatchAccountIdentity_UserAssignedIdentities_STATUS, len(identity.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range identity.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v20210101s.BatchAccountIdentity_UserAssignedIdentities_STATUS
			err := userAssignedIdentityValue.AssignPropertiesToBatchAccountIdentity_UserAssignedIdentities_STATUS(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToBatchAccountIdentity_UserAssignedIdentities_STATUS() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionProperties struct {
	// KeySource: Type of the key source.
	KeySource *EncryptionProperties_KeySource `json:"keySource,omitempty"`

	// KeyVaultProperties: Additional details when using Microsoft.KeyVault
	KeyVaultProperties *KeyVaultProperties `json:"keyVaultProperties,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *EncryptionProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &EncryptionPropertiesARM{}

	// Set property ‘KeySource’:
	if properties.KeySource != nil {
		keySource := *properties.KeySource
		result.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if properties.KeyVaultProperties != nil {
		keyVaultPropertiesARM, err := (*properties.KeyVaultProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultProperties := *keyVaultPropertiesARM.(*KeyVaultPropertiesARM)
		result.KeyVaultProperties = &keyVaultProperties
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *EncryptionProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *EncryptionProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionPropertiesARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		properties.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		properties.KeyVaultProperties = &keyVaultProperties
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionProperties populates our EncryptionProperties from the provided source EncryptionProperties
func (properties *EncryptionProperties) AssignPropertiesFromEncryptionProperties(source *v20210101s.EncryptionProperties) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionProperties_KeySource(*source.KeySource)
		properties.KeySource = &keySource
	} else {
		properties.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties
		err := keyVaultProperty.AssignPropertiesFromKeyVaultProperties(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties() to populate field KeyVaultProperties")
		}
		properties.KeyVaultProperties = &keyVaultProperty
	} else {
		properties.KeyVaultProperties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionProperties populates the provided destination EncryptionProperties from our EncryptionProperties
func (properties *EncryptionProperties) AssignPropertiesToEncryptionProperties(destination *v20210101s.EncryptionProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if properties.KeySource != nil {
		keySource := string(*properties.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if properties.KeyVaultProperties != nil {
		var keyVaultProperty v20210101s.KeyVaultProperties
		err := properties.KeyVaultProperties.AssignPropertiesToKeyVaultProperties(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionProperties_STATUS struct {
	// KeySource: Type of the key source.
	KeySource *EncryptionProperties_KeySource_STATUS `json:"keySource,omitempty"`

	// KeyVaultProperties: Additional details when using Microsoft.KeyVault
	KeyVaultProperties *KeyVaultProperties_STATUS `json:"keyVaultProperties,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *EncryptionProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionProperties_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *EncryptionProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionProperties_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionProperties_STATUSARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		properties.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties_STATUS
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		properties.KeyVaultProperties = &keyVaultProperties
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionProperties_STATUS populates our EncryptionProperties_STATUS from the provided source EncryptionProperties_STATUS
func (properties *EncryptionProperties_STATUS) AssignPropertiesFromEncryptionProperties_STATUS(source *v20210101s.EncryptionProperties_STATUS) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionProperties_KeySource_STATUS(*source.KeySource)
		properties.KeySource = &keySource
	} else {
		properties.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties_STATUS
		err := keyVaultProperty.AssignPropertiesFromKeyVaultProperties_STATUS(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties_STATUS() to populate field KeyVaultProperties")
		}
		properties.KeyVaultProperties = &keyVaultProperty
	} else {
		properties.KeyVaultProperties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionProperties_STATUS populates the provided destination EncryptionProperties_STATUS from our EncryptionProperties_STATUS
func (properties *EncryptionProperties_STATUS) AssignPropertiesToEncryptionProperties_STATUS(destination *v20210101s.EncryptionProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if properties.KeySource != nil {
		keySource := string(*properties.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if properties.KeyVaultProperties != nil {
		var keyVaultProperty v20210101s.KeyVaultProperties_STATUS
		err := properties.KeyVaultProperties.AssignPropertiesToKeyVaultProperties_STATUS(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties_STATUS() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultReference struct {
	// +kubebuilder:validation:Required
	// Reference: The resource ID of the Azure key vault associated with the Batch account.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`

	// +kubebuilder:validation:Required
	// Url: The URL of the Azure key vault associated with the Batch account.
	Url *string `json:"url,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultReference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (reference *KeyVaultReference) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if reference == nil {
		return nil, nil
	}
	result := &KeyVaultReferenceARM{}

	// Set property ‘Id’:
	if reference.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*reference.Reference)
		if err != nil {
			return nil, err
		}
		reference1 := referenceARMID
		result.Id = &reference1
	}

	// Set property ‘Url’:
	if reference.Url != nil {
		url := *reference.Url
		result.Url = &url
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultReference) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultReferenceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultReference) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultReferenceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultReferenceARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// Set property ‘Url’:
	if typedInput.Url != nil {
		url := *typedInput.Url
		reference.Url = &url
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultReference populates our KeyVaultReference from the provided source KeyVaultReference
func (reference *KeyVaultReference) AssignPropertiesFromKeyVaultReference(source *v20210101s.KeyVaultReference) error {

	// Reference
	if source.Reference != nil {
		referenceTemp := source.Reference.Copy()
		reference.Reference = &referenceTemp
	} else {
		reference.Reference = nil
	}

	// Url
	reference.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultReference populates the provided destination KeyVaultReference from our KeyVaultReference
func (reference *KeyVaultReference) AssignPropertiesToKeyVaultReference(destination *v20210101s.KeyVaultReference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	if reference.Reference != nil {
		referenceTemp := reference.Reference.Copy()
		destination.Reference = &referenceTemp
	} else {
		destination.Reference = nil
	}

	// Url
	destination.Url = genruntime.ClonePointerToString(reference.Url)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultReference_STATUS struct {
	// Id: The resource ID of the Azure key vault associated with the Batch account.
	Id *string `json:"id,omitempty"`

	// Url: The URL of the Azure key vault associated with the Batch account.
	Url *string `json:"url,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultReference_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (reference *KeyVaultReference_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultReference_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (reference *KeyVaultReference_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultReference_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultReference_STATUSARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		reference.Id = &id
	}

	// Set property ‘Url’:
	if typedInput.Url != nil {
		url := *typedInput.Url
		reference.Url = &url
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultReference_STATUS populates our KeyVaultReference_STATUS from the provided source KeyVaultReference_STATUS
func (reference *KeyVaultReference_STATUS) AssignPropertiesFromKeyVaultReference_STATUS(source *v20210101s.KeyVaultReference_STATUS) error {

	// Id
	reference.Id = genruntime.ClonePointerToString(source.Id)

	// Url
	reference.Url = genruntime.ClonePointerToString(source.Url)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultReference_STATUS populates the provided destination KeyVaultReference_STATUS from our KeyVaultReference_STATUS
func (reference *KeyVaultReference_STATUS) AssignPropertiesToKeyVaultReference_STATUS(destination *v20210101s.KeyVaultReference_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(reference.Id)

	// Url
	destination.Url = genruntime.ClonePointerToString(reference.Url)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"BatchService","UserSubscription"}
type PoolAllocationMode string

const (
	PoolAllocationMode_BatchService     = PoolAllocationMode("BatchService")
	PoolAllocationMode_UserSubscription = PoolAllocationMode("UserSubscription")
)

type PoolAllocationMode_STATUS string

const (
	PoolAllocationMode_BatchService_STATUS     = PoolAllocationMode_STATUS("BatchService")
	PoolAllocationMode_UserSubscription_STATUS = PoolAllocationMode_STATUS("UserSubscription")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type PublicNetworkAccessType string

const (
	PublicNetworkAccessType_Disabled = PublicNetworkAccessType("Disabled")
	PublicNetworkAccessType_Enabled  = PublicNetworkAccessType("Enabled")
)

type PublicNetworkAccessType_STATUS string

const (
	PublicNetworkAccessType_Disabled_STATUS = PublicNetworkAccessType_STATUS("Disabled")
	PublicNetworkAccessType_Enabled_STATUS  = PublicNetworkAccessType_STATUS("Enabled")
)

type BatchAccountIdentity_UserAssignedIdentities_STATUS struct {
	// ClientId: The client id of user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	// PrincipalId: The principal id of user assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &BatchAccountIdentity_UserAssignedIdentities_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (identities *BatchAccountIdentity_UserAssignedIdentities_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentity_UserAssignedIdentities_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (identities *BatchAccountIdentity_UserAssignedIdentities_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentity_UserAssignedIdentities_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentity_UserAssignedIdentities_STATUSARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		identities.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		identities.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentity_UserAssignedIdentities_STATUS populates our BatchAccountIdentity_UserAssignedIdentities_STATUS from the provided source BatchAccountIdentity_UserAssignedIdentities_STATUS
func (identities *BatchAccountIdentity_UserAssignedIdentities_STATUS) AssignPropertiesFromBatchAccountIdentity_UserAssignedIdentities_STATUS(source *v20210101s.BatchAccountIdentity_UserAssignedIdentities_STATUS) error {

	// ClientId
	identities.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	identities.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentity_UserAssignedIdentities_STATUS populates the provided destination BatchAccountIdentity_UserAssignedIdentities_STATUS from our BatchAccountIdentity_UserAssignedIdentities_STATUS
func (identities *BatchAccountIdentity_UserAssignedIdentities_STATUS) AssignPropertiesToBatchAccountIdentity_UserAssignedIdentities_STATUS(destination *v20210101s.BatchAccountIdentity_UserAssignedIdentities_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(identities.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(identities.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Microsoft.Batch","Microsoft.KeyVault"}
type EncryptionProperties_KeySource string

const (
	EncryptionProperties_KeySource_MicrosoftBatch    = EncryptionProperties_KeySource("Microsoft.Batch")
	EncryptionProperties_KeySource_MicrosoftKeyVault = EncryptionProperties_KeySource("Microsoft.KeyVault")
)

type EncryptionProperties_KeySource_STATUS string

const (
	EncryptionProperties_KeySource_MicrosoftBatch_STATUS    = EncryptionProperties_KeySource_STATUS("Microsoft.Batch")
	EncryptionProperties_KeySource_MicrosoftKeyVault_STATUS = EncryptionProperties_KeySource_STATUS("Microsoft.KeyVault")
)

type KeyVaultProperties struct {
	// KeyIdentifier: Full path to the versioned secret. Example
	// https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following
	// prerequisites must be met:
	// The Batch Account has a System Assigned identity
	// The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
	// The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &KeyVaultPropertiesARM{}

	// Set property ‘KeyIdentifier’:
	if properties.KeyIdentifier != nil {
		keyIdentifier := *properties.KeyIdentifier
		result.KeyIdentifier = &keyIdentifier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultPropertiesARM, got %T", armInput)
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *v20210101s.KeyVaultProperties) error {

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *v20210101s.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultProperties_STATUS struct {
	// KeyIdentifier: Full path to the versioned secret. Example
	// https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. To be usable the following
	// prerequisites must be met:
	// The Batch Account has a System Assigned identity
	// The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
	// The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_STATUSARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_STATUSARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_STATUSARM, got %T", armInput)
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties_STATUS populates our KeyVaultProperties_STATUS from the provided source KeyVaultProperties_STATUS
func (properties *KeyVaultProperties_STATUS) AssignPropertiesFromKeyVaultProperties_STATUS(source *v20210101s.KeyVaultProperties_STATUS) error {

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties_STATUS populates the provided destination KeyVaultProperties_STATUS from our KeyVaultProperties_STATUS
func (properties *KeyVaultProperties_STATUS) AssignPropertiesToKeyVaultProperties_STATUS(destination *v20210101s.KeyVaultProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&BatchAccount{}, &BatchAccountList{})
}
