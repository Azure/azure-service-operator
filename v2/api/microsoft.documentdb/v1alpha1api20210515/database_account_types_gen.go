// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources=databaseaccounts,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources={databaseaccounts/status,databaseaccounts/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts
type DatabaseAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccounts_Spec            `json:"spec,omitempty"`
	Status            DatabaseAccountGetResults_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &DatabaseAccount{}

// GetConditions returns the conditions of the resource
func (databaseAccount *DatabaseAccount) GetConditions() conditions.Conditions {
	return databaseAccount.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (databaseAccount *DatabaseAccount) SetConditions(conditions conditions.Conditions) {
	databaseAccount.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-documentdb-azure-com-v1alpha1api20210515-databaseaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=databaseaccounts,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.databaseaccounts.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &DatabaseAccount{}

// Default applies defaults to the DatabaseAccount resource
func (databaseAccount *DatabaseAccount) Default() {
	databaseAccount.defaultImpl()
	var temp interface{} = databaseAccount
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (databaseAccount *DatabaseAccount) defaultAzureName() {
	if databaseAccount.Spec.AzureName == "" {
		databaseAccount.Spec.AzureName = databaseAccount.Name
	}
}

// defaultImpl applies the code generated defaults to the DatabaseAccount resource
func (databaseAccount *DatabaseAccount) defaultImpl() { databaseAccount.defaultAzureName() }

var _ genruntime.KubernetesResource = &DatabaseAccount{}

// AzureName returns the Azure name of the resource
func (databaseAccount *DatabaseAccount) AzureName() string {
	return databaseAccount.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (databaseAccount *DatabaseAccount) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (databaseAccount *DatabaseAccount) GetSpec() genruntime.ConvertibleSpec {
	return &databaseAccount.Spec
}

// GetStatus returns the status of this resource
func (databaseAccount *DatabaseAccount) GetStatus() genruntime.ConvertibleStatus {
	return &databaseAccount.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts"
func (databaseAccount *DatabaseAccount) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts"
}

// NewEmptyStatus returns a new empty (blank) status
func (databaseAccount *DatabaseAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &DatabaseAccountGetResults_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (databaseAccount *DatabaseAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(databaseAccount.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: databaseAccount.Namespace,
		Name:      databaseAccount.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (databaseAccount *DatabaseAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*DatabaseAccountGetResults_Status); ok {
		databaseAccount.Status = *st
		return nil
	}

	// Convert status to required version
	var st DatabaseAccountGetResults_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	databaseAccount.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-documentdb-azure-com-v1alpha1api20210515-databaseaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=databaseaccounts,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.databaseaccounts.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &DatabaseAccount{}

// ValidateCreate validates the creation of the resource
func (databaseAccount *DatabaseAccount) ValidateCreate() error {
	validations := databaseAccount.createValidations()
	var temp interface{} = databaseAccount
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (databaseAccount *DatabaseAccount) ValidateDelete() error {
	validations := databaseAccount.deleteValidations()
	var temp interface{} = databaseAccount
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (databaseAccount *DatabaseAccount) ValidateUpdate(old runtime.Object) error {
	validations := databaseAccount.updateValidations()
	var temp interface{} = databaseAccount
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (databaseAccount *DatabaseAccount) createValidations() []func() error {
	return []func() error{databaseAccount.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (databaseAccount *DatabaseAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (databaseAccount *DatabaseAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return databaseAccount.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (databaseAccount *DatabaseAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&databaseAccount.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromDatabaseAccount populates our DatabaseAccount from the provided source DatabaseAccount
func (databaseAccount *DatabaseAccount) AssignPropertiesFromDatabaseAccount(source *v1alpha1api20210515storage.DatabaseAccount) error {

	// Spec
	var spec DatabaseAccounts_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromDatabaseAccountsSpec()")
	}
	databaseAccount.Spec = spec

	// Status
	var status DatabaseAccountGetResults_Status
	err = status.AssignPropertiesFromDatabaseAccountGetResultsStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromDatabaseAccountGetResultsStatus()")
	}
	databaseAccount.Status = status

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccount populates the provided destination DatabaseAccount from our DatabaseAccount
func (databaseAccount *DatabaseAccount) AssignPropertiesToDatabaseAccount(destination *v1alpha1api20210515storage.DatabaseAccount) error {

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccounts_Spec
	err := databaseAccount.Spec.AssignPropertiesToDatabaseAccountsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToDatabaseAccountsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.DatabaseAccountGetResults_Status
	err = databaseAccount.Status.AssignPropertiesToDatabaseAccountGetResultsStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToDatabaseAccountGetResultsStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (databaseAccount *DatabaseAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: databaseAccount.Spec.OriginalVersion(),
		Kind:    "DatabaseAccount",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts
type DatabaseAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseAccount `json:"items"`
}

//Generated from:
type DatabaseAccountGetResults_Status struct {
	//AnalyticalStorageConfiguration: Analytical storage specific properties.
	AnalyticalStorageConfiguration *AnalyticalStorageConfiguration_Status `json:"analyticalStorageConfiguration,omitempty"`

	//ApiProperties: API specific properties.
	ApiProperties *ApiProperties_Status `json:"apiProperties,omitempty"`

	//BackupPolicy: The object representing the policy for taking backups on an
	//account.
	BackupPolicy *BackupPolicy_Status `json:"backupPolicy,omitempty"`

	//Capabilities: List of Cosmos DB capabilities for the account
	Capabilities []Capability_Status `json:"capabilities,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//ConnectorOffer: The cassandra connector offer type for the Cosmos DB database C*
	//account.
	ConnectorOffer *ConnectorOffer_Status `json:"connectorOffer,omitempty"`

	//ConsistencyPolicy: The consistency policy for the Cosmos DB database account.
	ConsistencyPolicy *ConsistencyPolicy_Status `json:"consistencyPolicy,omitempty"`

	//Cors: The CORS policy for the Cosmos DB database account.
	Cors []CorsPolicy_Status `json:"cors,omitempty"`

	//DatabaseAccountOfferType: The offer type for the Cosmos DB database account.
	//Default value: Standard.
	DatabaseAccountOfferType *DatabaseAccountOfferType_Status `json:"databaseAccountOfferType,omitempty"`

	//DefaultIdentity: The default identity for accessing key vault used in features
	//like customer managed keys. The default identity needs to be explicitly set by
	//the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more.
	DefaultIdentity *string `json:"defaultIdentity,omitempty"`

	//DisableKeyBasedMetadataWriteAccess: Disable write operations on metadata
	//resources (databases, containers, throughput) via account keys
	DisableKeyBasedMetadataWriteAccess *bool `json:"disableKeyBasedMetadataWriteAccess,omitempty"`

	//DocumentEndpoint: The connection endpoint for the Cosmos DB database account.
	DocumentEndpoint *string `json:"documentEndpoint,omitempty"`

	//EnableAnalyticalStorage: Flag to indicate whether to enable storage analytics.
	EnableAnalyticalStorage *bool `json:"enableAnalyticalStorage,omitempty"`

	//EnableAutomaticFailover: Enables automatic failover of the write region in the
	//rare event that the region is unavailable due to an outage. Automatic failover
	//will result in a new write region for the account and is chosen based on the
	//failover priorities configured for the account.
	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty"`

	//EnableCassandraConnector: Enables the cassandra connector on the Cosmos DB C*
	//account
	EnableCassandraConnector *bool `json:"enableCassandraConnector,omitempty"`

	//EnableFreeTier: Flag to indicate whether Free Tier is enabled.
	EnableFreeTier *bool `json:"enableFreeTier,omitempty"`

	//EnableMultipleWriteLocations: Enables the account to write in multiple locations
	EnableMultipleWriteLocations *bool `json:"enableMultipleWriteLocations,omitempty"`

	//FailoverPolicies: An array that contains the regions ordered by their failover
	//priorities.
	FailoverPolicies []FailoverPolicy_Status `json:"failoverPolicies,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id       *string                        `json:"id,omitempty"`
	Identity *ManagedServiceIdentity_Status `json:"identity,omitempty"`

	//IpRules: List of IpRules.
	IpRules []IpAddressOrRange_Status `json:"ipRules,omitempty"`

	//IsVirtualNetworkFilterEnabled: Flag to indicate whether to enable/disable
	//Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty"`

	//KeyVaultKeyUri: The URI of the key vault
	KeyVaultKeyUri *string `json:"keyVaultKeyUri,omitempty"`

	//Kind: Indicates the type of database account. This can only be set at database
	//account creation.
	Kind *DatabaseAccountGetResultsStatusKind `json:"kind,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Locations: An array that contains all of the locations enabled for the Cosmos DB
	//account.
	Locations []Location_Status `json:"locations,omitempty"`

	//Name: The name of the ARM resource.
	Name *string `json:"name,omitempty"`

	//NetworkAclBypass: Indicates what services are allowed to bypass firewall checks.
	NetworkAclBypass *NetworkAclBypass_Status `json:"networkAclBypass,omitempty"`

	//NetworkAclBypassResourceIds: An array that contains the Resource Ids for Network
	//Acl Bypass for the Cosmos DB account.
	NetworkAclBypassResourceIds []string `json:"networkAclBypassResourceIds,omitempty"`

	//PrivateEndpointConnections: List of Private Endpoint Connections configured for
	//the Cosmos DB account.
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`
	ProvisioningState          *string                                                `json:"provisioningState,omitempty"`

	//PublicNetworkAccess: Whether requests from Public Network are allowed
	PublicNetworkAccess *PublicNetworkAccess_Status `json:"publicNetworkAccess,omitempty"`

	//ReadLocations: An array that contains of the read locations enabled for the
	//Cosmos DB account.
	ReadLocations []Location_Status `json:"readLocations,omitempty"`
	Tags          map[string]string `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`

	//VirtualNetworkRules: List of Virtual Network ACL rules configured for the Cosmos
	//DB account.
	VirtualNetworkRules []VirtualNetworkRule_Status `json:"virtualNetworkRules,omitempty"`

	//WriteLocations: An array that contains the write location for the Cosmos DB
	//account.
	WriteLocations []Location_Status `json:"writeLocations,omitempty"`
}

var _ genruntime.ConvertibleStatus = &DatabaseAccountGetResults_Status{}

// ConvertStatusFrom populates our DatabaseAccountGetResults_Status from the provided source
func (databaseAccountGetResultsStatus *DatabaseAccountGetResults_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountGetResults_Status)
	if ok {
		// Populate our instance from source
		return databaseAccountGetResultsStatus.AssignPropertiesFromDatabaseAccountGetResultsStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountGetResults_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = databaseAccountGetResultsStatus.AssignPropertiesFromDatabaseAccountGetResultsStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our DatabaseAccountGetResults_Status
func (databaseAccountGetResultsStatus *DatabaseAccountGetResults_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountGetResults_Status)
	if ok {
		// Populate destination from our instance
		return databaseAccountGetResultsStatus.AssignPropertiesToDatabaseAccountGetResultsStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountGetResults_Status{}
	err := databaseAccountGetResultsStatus.AssignPropertiesToDatabaseAccountGetResultsStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &DatabaseAccountGetResults_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (databaseAccountGetResultsStatus *DatabaseAccountGetResults_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountGetResults_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (databaseAccountGetResultsStatus *DatabaseAccountGetResults_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountGetResults_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountGetResults_StatusARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageConfiguration’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AnalyticalStorageConfiguration != nil {
			var analyticalStorageConfiguration1 AnalyticalStorageConfiguration_Status
			err := analyticalStorageConfiguration1.PopulateFromARM(owner, *typedInput.Properties.AnalyticalStorageConfiguration)
			if err != nil {
				return err
			}
			analyticalStorageConfiguration := analyticalStorageConfiguration1
			databaseAccountGetResultsStatus.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
		}
	}

	// Set property ‘ApiProperties’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ApiProperties != nil {
			var apiProperties1 ApiProperties_Status
			err := apiProperties1.PopulateFromARM(owner, *typedInput.Properties.ApiProperties)
			if err != nil {
				return err
			}
			apiProperties := apiProperties1
			databaseAccountGetResultsStatus.ApiProperties = &apiProperties
		}
	}

	// Set property ‘BackupPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.BackupPolicy != nil {
			var backupPolicy1 BackupPolicy_Status
			err := backupPolicy1.PopulateFromARM(owner, *typedInput.Properties.BackupPolicy)
			if err != nil {
				return err
			}
			backupPolicy := backupPolicy1
			databaseAccountGetResultsStatus.BackupPolicy = &backupPolicy
		}
	}

	// Set property ‘Capabilities’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Capabilities {
			var item1 Capability_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			databaseAccountGetResultsStatus.Capabilities = append(databaseAccountGetResultsStatus.Capabilities, item1)
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ConnectorOffer’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConnectorOffer != nil {
			connectorOffer := *typedInput.Properties.ConnectorOffer
			databaseAccountGetResultsStatus.ConnectorOffer = &connectorOffer
		}
	}

	// Set property ‘ConsistencyPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConsistencyPolicy != nil {
			var consistencyPolicy1 ConsistencyPolicy_Status
			err := consistencyPolicy1.PopulateFromARM(owner, *typedInput.Properties.ConsistencyPolicy)
			if err != nil {
				return err
			}
			consistencyPolicy := consistencyPolicy1
			databaseAccountGetResultsStatus.ConsistencyPolicy = &consistencyPolicy
		}
	}

	// Set property ‘Cors’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Cors {
			var item1 CorsPolicy_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			databaseAccountGetResultsStatus.Cors = append(databaseAccountGetResultsStatus.Cors, item1)
		}
	}

	// Set property ‘DatabaseAccountOfferType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DatabaseAccountOfferType != nil {
			databaseAccountOfferType := *typedInput.Properties.DatabaseAccountOfferType
			databaseAccountGetResultsStatus.DatabaseAccountOfferType = &databaseAccountOfferType
		}
	}

	// Set property ‘DefaultIdentity’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultIdentity != nil {
			defaultIdentity := *typedInput.Properties.DefaultIdentity
			databaseAccountGetResultsStatus.DefaultIdentity = &defaultIdentity
		}
	}

	// Set property ‘DisableKeyBasedMetadataWriteAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DisableKeyBasedMetadataWriteAccess != nil {
			disableKeyBasedMetadataWriteAccess := *typedInput.Properties.DisableKeyBasedMetadataWriteAccess
			databaseAccountGetResultsStatus.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
		}
	}

	// Set property ‘DocumentEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DocumentEndpoint != nil {
			documentEndpoint := *typedInput.Properties.DocumentEndpoint
			databaseAccountGetResultsStatus.DocumentEndpoint = &documentEndpoint
		}
	}

	// Set property ‘EnableAnalyticalStorage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableAnalyticalStorage != nil {
			enableAnalyticalStorage := *typedInput.Properties.EnableAnalyticalStorage
			databaseAccountGetResultsStatus.EnableAnalyticalStorage = &enableAnalyticalStorage
		}
	}

	// Set property ‘EnableAutomaticFailover’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableAutomaticFailover != nil {
			enableAutomaticFailover := *typedInput.Properties.EnableAutomaticFailover
			databaseAccountGetResultsStatus.EnableAutomaticFailover = &enableAutomaticFailover
		}
	}

	// Set property ‘EnableCassandraConnector’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableCassandraConnector != nil {
			enableCassandraConnector := *typedInput.Properties.EnableCassandraConnector
			databaseAccountGetResultsStatus.EnableCassandraConnector = &enableCassandraConnector
		}
	}

	// Set property ‘EnableFreeTier’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableFreeTier != nil {
			enableFreeTier := *typedInput.Properties.EnableFreeTier
			databaseAccountGetResultsStatus.EnableFreeTier = &enableFreeTier
		}
	}

	// Set property ‘EnableMultipleWriteLocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableMultipleWriteLocations != nil {
			enableMultipleWriteLocations := *typedInput.Properties.EnableMultipleWriteLocations
			databaseAccountGetResultsStatus.EnableMultipleWriteLocations = &enableMultipleWriteLocations
		}
	}

	// Set property ‘FailoverPolicies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.FailoverPolicies {
			var item1 FailoverPolicy_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			databaseAccountGetResultsStatus.FailoverPolicies = append(databaseAccountGetResultsStatus.FailoverPolicies, item1)
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		databaseAccountGetResultsStatus.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 ManagedServiceIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		databaseAccountGetResultsStatus.Identity = &identity
	}

	// Set property ‘IpRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.IpRules {
			var item1 IpAddressOrRange_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			databaseAccountGetResultsStatus.IpRules = append(databaseAccountGetResultsStatus.IpRules, item1)
		}
	}

	// Set property ‘IsVirtualNetworkFilterEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.IsVirtualNetworkFilterEnabled != nil {
			isVirtualNetworkFilterEnabled := *typedInput.Properties.IsVirtualNetworkFilterEnabled
			databaseAccountGetResultsStatus.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
		}
	}

	// Set property ‘KeyVaultKeyUri’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyVaultKeyUri != nil {
			keyVaultKeyUri := *typedInput.Properties.KeyVaultKeyUri
			databaseAccountGetResultsStatus.KeyVaultKeyUri = &keyVaultKeyUri
		}
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		databaseAccountGetResultsStatus.Kind = &kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		databaseAccountGetResultsStatus.Location = &location
	}

	// Set property ‘Locations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Locations {
			var item1 Location_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			databaseAccountGetResultsStatus.Locations = append(databaseAccountGetResultsStatus.Locations, item1)
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		databaseAccountGetResultsStatus.Name = &name
	}

	// Set property ‘NetworkAclBypass’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkAclBypass != nil {
			networkAclBypass := *typedInput.Properties.NetworkAclBypass
			databaseAccountGetResultsStatus.NetworkAclBypass = &networkAclBypass
		}
	}

	// Set property ‘NetworkAclBypassResourceIds’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.NetworkAclBypassResourceIds {
			databaseAccountGetResultsStatus.NetworkAclBypassResourceIds = append(databaseAccountGetResultsStatus.NetworkAclBypassResourceIds, item)
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			databaseAccountGetResultsStatus.PrivateEndpointConnections = append(databaseAccountGetResultsStatus.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			databaseAccountGetResultsStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			databaseAccountGetResultsStatus.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘ReadLocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.ReadLocations {
			var item1 Location_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			databaseAccountGetResultsStatus.ReadLocations = append(databaseAccountGetResultsStatus.ReadLocations, item1)
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		databaseAccountGetResultsStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			databaseAccountGetResultsStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		databaseAccountGetResultsStatus.Type = &typeVar
	}

	// Set property ‘VirtualNetworkRules’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.VirtualNetworkRules {
			var item1 VirtualNetworkRule_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			databaseAccountGetResultsStatus.VirtualNetworkRules = append(databaseAccountGetResultsStatus.VirtualNetworkRules, item1)
		}
	}

	// Set property ‘WriteLocations’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.WriteLocations {
			var item1 Location_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			databaseAccountGetResultsStatus.WriteLocations = append(databaseAccountGetResultsStatus.WriteLocations, item1)
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromDatabaseAccountGetResultsStatus populates our DatabaseAccountGetResults_Status from the provided source DatabaseAccountGetResults_Status
func (databaseAccountGetResultsStatus *DatabaseAccountGetResults_Status) AssignPropertiesFromDatabaseAccountGetResultsStatus(source *v1alpha1api20210515storage.DatabaseAccountGetResults_Status) error {

	// AnalyticalStorageConfiguration
	if source.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration AnalyticalStorageConfiguration_Status
		err := analyticalStorageConfiguration.AssignPropertiesFromAnalyticalStorageConfigurationStatus(source.AnalyticalStorageConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating AnalyticalStorageConfiguration from AnalyticalStorageConfiguration, calling AssignPropertiesFromAnalyticalStorageConfigurationStatus()")
		}
		databaseAccountGetResultsStatus.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	} else {
		databaseAccountGetResultsStatus.AnalyticalStorageConfiguration = nil
	}

	// ApiProperties
	if source.ApiProperties != nil {
		var apiProperty ApiProperties_Status
		err := apiProperty.AssignPropertiesFromApiPropertiesStatus(source.ApiProperties)
		if err != nil {
			return errors.Wrap(err, "populating ApiProperties from ApiProperties, calling AssignPropertiesFromApiPropertiesStatus()")
		}
		databaseAccountGetResultsStatus.ApiProperties = &apiProperty
	} else {
		databaseAccountGetResultsStatus.ApiProperties = nil
	}

	// BackupPolicy
	if source.BackupPolicy != nil {
		var backupPolicy BackupPolicy_Status
		err := backupPolicy.AssignPropertiesFromBackupPolicyStatus(source.BackupPolicy)
		if err != nil {
			return errors.Wrap(err, "populating BackupPolicy from BackupPolicy, calling AssignPropertiesFromBackupPolicyStatus()")
		}
		databaseAccountGetResultsStatus.BackupPolicy = &backupPolicy
	} else {
		databaseAccountGetResultsStatus.BackupPolicy = nil
	}

	// Capabilities
	if source.Capabilities != nil {
		capabilityList := make([]Capability_Status, len(source.Capabilities))
		for capabilityIndex, capabilityItem := range source.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability Capability_Status
			err := capability.AssignPropertiesFromCapabilityStatus(&capabilityItem)
			if err != nil {
				return errors.Wrap(err, "populating Capabilities from Capabilities, calling AssignPropertiesFromCapabilityStatus()")
			}
			capabilityList[capabilityIndex] = capability
		}
		databaseAccountGetResultsStatus.Capabilities = capabilityList
	} else {
		databaseAccountGetResultsStatus.Capabilities = nil
	}

	// Conditions
	if source.Conditions != nil {
		conditionList := make([]conditions.Condition, len(source.Conditions))
		for conditionIndex, conditionItem := range source.Conditions {
			// Shadow the loop variable to avoid aliasing
			conditionItem := conditionItem
			conditionList[conditionIndex] = conditionItem.Copy()
		}
		databaseAccountGetResultsStatus.Conditions = conditionList
	} else {
		databaseAccountGetResultsStatus.Conditions = nil
	}

	// ConnectorOffer
	if source.ConnectorOffer != nil {
		connectorOffer := ConnectorOffer_Status(*source.ConnectorOffer)
		databaseAccountGetResultsStatus.ConnectorOffer = &connectorOffer
	} else {
		databaseAccountGetResultsStatus.ConnectorOffer = nil
	}

	// ConsistencyPolicy
	if source.ConsistencyPolicy != nil {
		var consistencyPolicy ConsistencyPolicy_Status
		err := consistencyPolicy.AssignPropertiesFromConsistencyPolicyStatus(source.ConsistencyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ConsistencyPolicy from ConsistencyPolicy, calling AssignPropertiesFromConsistencyPolicyStatus()")
		}
		databaseAccountGetResultsStatus.ConsistencyPolicy = &consistencyPolicy
	} else {
		databaseAccountGetResultsStatus.ConsistencyPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		corList := make([]CorsPolicy_Status, len(source.Cors))
		for corIndex, corItem := range source.Cors {
			// Shadow the loop variable to avoid aliasing
			corItem := corItem
			var cor CorsPolicy_Status
			err := cor.AssignPropertiesFromCorsPolicyStatus(&corItem)
			if err != nil {
				return errors.Wrap(err, "populating Cors from Cors, calling AssignPropertiesFromCorsPolicyStatus()")
			}
			corList[corIndex] = cor
		}
		databaseAccountGetResultsStatus.Cors = corList
	} else {
		databaseAccountGetResultsStatus.Cors = nil
	}

	// DatabaseAccountOfferType
	if source.DatabaseAccountOfferType != nil {
		databaseAccountOfferType := DatabaseAccountOfferType_Status(*source.DatabaseAccountOfferType)
		databaseAccountGetResultsStatus.DatabaseAccountOfferType = &databaseAccountOfferType
	} else {
		databaseAccountGetResultsStatus.DatabaseAccountOfferType = nil
	}

	// DefaultIdentity
	if source.DefaultIdentity != nil {
		defaultIdentity := *source.DefaultIdentity
		databaseAccountGetResultsStatus.DefaultIdentity = &defaultIdentity
	} else {
		databaseAccountGetResultsStatus.DefaultIdentity = nil
	}

	// DisableKeyBasedMetadataWriteAccess
	if source.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *source.DisableKeyBasedMetadataWriteAccess
		databaseAccountGetResultsStatus.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	} else {
		databaseAccountGetResultsStatus.DisableKeyBasedMetadataWriteAccess = nil
	}

	// DocumentEndpoint
	if source.DocumentEndpoint != nil {
		documentEndpoint := *source.DocumentEndpoint
		databaseAccountGetResultsStatus.DocumentEndpoint = &documentEndpoint
	} else {
		databaseAccountGetResultsStatus.DocumentEndpoint = nil
	}

	// EnableAnalyticalStorage
	if source.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *source.EnableAnalyticalStorage
		databaseAccountGetResultsStatus.EnableAnalyticalStorage = &enableAnalyticalStorage
	} else {
		databaseAccountGetResultsStatus.EnableAnalyticalStorage = nil
	}

	// EnableAutomaticFailover
	if source.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *source.EnableAutomaticFailover
		databaseAccountGetResultsStatus.EnableAutomaticFailover = &enableAutomaticFailover
	} else {
		databaseAccountGetResultsStatus.EnableAutomaticFailover = nil
	}

	// EnableCassandraConnector
	if source.EnableCassandraConnector != nil {
		enableCassandraConnector := *source.EnableCassandraConnector
		databaseAccountGetResultsStatus.EnableCassandraConnector = &enableCassandraConnector
	} else {
		databaseAccountGetResultsStatus.EnableCassandraConnector = nil
	}

	// EnableFreeTier
	if source.EnableFreeTier != nil {
		enableFreeTier := *source.EnableFreeTier
		databaseAccountGetResultsStatus.EnableFreeTier = &enableFreeTier
	} else {
		databaseAccountGetResultsStatus.EnableFreeTier = nil
	}

	// EnableMultipleWriteLocations
	if source.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocation := *source.EnableMultipleWriteLocations
		databaseAccountGetResultsStatus.EnableMultipleWriteLocations = &enableMultipleWriteLocation
	} else {
		databaseAccountGetResultsStatus.EnableMultipleWriteLocations = nil
	}

	// FailoverPolicies
	if source.FailoverPolicies != nil {
		failoverPolicyList := make([]FailoverPolicy_Status, len(source.FailoverPolicies))
		for failoverPolicyIndex, failoverPolicyItem := range source.FailoverPolicies {
			// Shadow the loop variable to avoid aliasing
			failoverPolicyItem := failoverPolicyItem
			var failoverPolicy FailoverPolicy_Status
			err := failoverPolicy.AssignPropertiesFromFailoverPolicyStatus(&failoverPolicyItem)
			if err != nil {
				return errors.Wrap(err, "populating FailoverPolicies from FailoverPolicies, calling AssignPropertiesFromFailoverPolicyStatus()")
			}
			failoverPolicyList[failoverPolicyIndex] = failoverPolicy
		}
		databaseAccountGetResultsStatus.FailoverPolicies = failoverPolicyList
	} else {
		databaseAccountGetResultsStatus.FailoverPolicies = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		databaseAccountGetResultsStatus.Id = &id
	} else {
		databaseAccountGetResultsStatus.Id = nil
	}

	// Identity
	if source.Identity != nil {
		var identity ManagedServiceIdentity_Status
		err := identity.AssignPropertiesFromManagedServiceIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromManagedServiceIdentityStatus()")
		}
		databaseAccountGetResultsStatus.Identity = &identity
	} else {
		databaseAccountGetResultsStatus.Identity = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IpAddressOrRange_Status, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IpAddressOrRange_Status
			err := ipRule.AssignPropertiesFromIpAddressOrRangeStatus(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "populating IpRules from IpRules, calling AssignPropertiesFromIpAddressOrRangeStatus()")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		databaseAccountGetResultsStatus.IpRules = ipRuleList
	} else {
		databaseAccountGetResultsStatus.IpRules = nil
	}

	// IsVirtualNetworkFilterEnabled
	if source.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *source.IsVirtualNetworkFilterEnabled
		databaseAccountGetResultsStatus.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	} else {
		databaseAccountGetResultsStatus.IsVirtualNetworkFilterEnabled = nil
	}

	// KeyVaultKeyUri
	if source.KeyVaultKeyUri != nil {
		keyVaultKeyUri := *source.KeyVaultKeyUri
		databaseAccountGetResultsStatus.KeyVaultKeyUri = &keyVaultKeyUri
	} else {
		databaseAccountGetResultsStatus.KeyVaultKeyUri = nil
	}

	// Kind
	if source.Kind != nil {
		kind := DatabaseAccountGetResultsStatusKind(*source.Kind)
		databaseAccountGetResultsStatus.Kind = &kind
	} else {
		databaseAccountGetResultsStatus.Kind = nil
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		databaseAccountGetResultsStatus.Location = &location
	} else {
		databaseAccountGetResultsStatus.Location = nil
	}

	// Locations
	if source.Locations != nil {
		locationList := make([]Location_Status, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location Location_Status
			err := location.AssignPropertiesFromLocationStatus(&locationItem)
			if err != nil {
				return errors.Wrap(err, "populating Locations from Locations, calling AssignPropertiesFromLocationStatus()")
			}
			locationList[locationIndex] = location
		}
		databaseAccountGetResultsStatus.Locations = locationList
	} else {
		databaseAccountGetResultsStatus.Locations = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		databaseAccountGetResultsStatus.Name = &name
	} else {
		databaseAccountGetResultsStatus.Name = nil
	}

	// NetworkAclBypass
	if source.NetworkAclBypass != nil {
		networkAclBypass := NetworkAclBypass_Status(*source.NetworkAclBypass)
		databaseAccountGetResultsStatus.NetworkAclBypass = &networkAclBypass
	} else {
		databaseAccountGetResultsStatus.NetworkAclBypass = nil
	}

	// NetworkAclBypassResourceIds
	databaseAccountGetResultsStatus.NetworkAclBypassResourceIds = genruntime.CloneSliceOfString(source.NetworkAclBypassResourceIds)

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded()")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		databaseAccountGetResultsStatus.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		databaseAccountGetResultsStatus.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		databaseAccountGetResultsStatus.ProvisioningState = &provisioningState
	} else {
		databaseAccountGetResultsStatus.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := PublicNetworkAccess_Status(*source.PublicNetworkAccess)
		databaseAccountGetResultsStatus.PublicNetworkAccess = &publicNetworkAccess
	} else {
		databaseAccountGetResultsStatus.PublicNetworkAccess = nil
	}

	// ReadLocations
	if source.ReadLocations != nil {
		readLocationList := make([]Location_Status, len(source.ReadLocations))
		for readLocationIndex, readLocationItem := range source.ReadLocations {
			// Shadow the loop variable to avoid aliasing
			readLocationItem := readLocationItem
			var readLocation Location_Status
			err := readLocation.AssignPropertiesFromLocationStatus(&readLocationItem)
			if err != nil {
				return errors.Wrap(err, "populating ReadLocations from ReadLocations, calling AssignPropertiesFromLocationStatus()")
			}
			readLocationList[readLocationIndex] = readLocation
		}
		databaseAccountGetResultsStatus.ReadLocations = readLocationList
	} else {
		databaseAccountGetResultsStatus.ReadLocations = nil
	}

	// Tags
	databaseAccountGetResultsStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		databaseAccountGetResultsStatus.Type = &typeVar
	} else {
		databaseAccountGetResultsStatus.Type = nil
	}

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule_Status, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule_Status
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRuleStatus(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "populating VirtualNetworkRules from VirtualNetworkRules, calling AssignPropertiesFromVirtualNetworkRuleStatus()")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		databaseAccountGetResultsStatus.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		databaseAccountGetResultsStatus.VirtualNetworkRules = nil
	}

	// WriteLocations
	if source.WriteLocations != nil {
		writeLocationList := make([]Location_Status, len(source.WriteLocations))
		for writeLocationIndex, writeLocationItem := range source.WriteLocations {
			// Shadow the loop variable to avoid aliasing
			writeLocationItem := writeLocationItem
			var writeLocation Location_Status
			err := writeLocation.AssignPropertiesFromLocationStatus(&writeLocationItem)
			if err != nil {
				return errors.Wrap(err, "populating WriteLocations from WriteLocations, calling AssignPropertiesFromLocationStatus()")
			}
			writeLocationList[writeLocationIndex] = writeLocation
		}
		databaseAccountGetResultsStatus.WriteLocations = writeLocationList
	} else {
		databaseAccountGetResultsStatus.WriteLocations = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountGetResultsStatus populates the provided destination DatabaseAccountGetResults_Status from our DatabaseAccountGetResults_Status
func (databaseAccountGetResultsStatus *DatabaseAccountGetResults_Status) AssignPropertiesToDatabaseAccountGetResultsStatus(destination *v1alpha1api20210515storage.DatabaseAccountGetResults_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageConfiguration
	if databaseAccountGetResultsStatus.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration v1alpha1api20210515storage.AnalyticalStorageConfiguration_Status
		err := (*databaseAccountGetResultsStatus.AnalyticalStorageConfiguration).AssignPropertiesToAnalyticalStorageConfigurationStatus(&analyticalStorageConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating AnalyticalStorageConfiguration from AnalyticalStorageConfiguration, calling AssignPropertiesToAnalyticalStorageConfigurationStatus()")
		}
		destination.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	} else {
		destination.AnalyticalStorageConfiguration = nil
	}

	// ApiProperties
	if databaseAccountGetResultsStatus.ApiProperties != nil {
		var apiProperty v1alpha1api20210515storage.ApiProperties_Status
		err := (*databaseAccountGetResultsStatus.ApiProperties).AssignPropertiesToApiPropertiesStatus(&apiProperty)
		if err != nil {
			return errors.Wrap(err, "populating ApiProperties from ApiProperties, calling AssignPropertiesToApiPropertiesStatus()")
		}
		destination.ApiProperties = &apiProperty
	} else {
		destination.ApiProperties = nil
	}

	// BackupPolicy
	if databaseAccountGetResultsStatus.BackupPolicy != nil {
		var backupPolicy v1alpha1api20210515storage.BackupPolicy_Status
		err := (*databaseAccountGetResultsStatus.BackupPolicy).AssignPropertiesToBackupPolicyStatus(&backupPolicy)
		if err != nil {
			return errors.Wrap(err, "populating BackupPolicy from BackupPolicy, calling AssignPropertiesToBackupPolicyStatus()")
		}
		destination.BackupPolicy = &backupPolicy
	} else {
		destination.BackupPolicy = nil
	}

	// Capabilities
	if databaseAccountGetResultsStatus.Capabilities != nil {
		capabilityList := make([]v1alpha1api20210515storage.Capability_Status, len(databaseAccountGetResultsStatus.Capabilities))
		for capabilityIndex, capabilityItem := range databaseAccountGetResultsStatus.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability v1alpha1api20210515storage.Capability_Status
			err := capabilityItem.AssignPropertiesToCapabilityStatus(&capability)
			if err != nil {
				return errors.Wrap(err, "populating Capabilities from Capabilities, calling AssignPropertiesToCapabilityStatus()")
			}
			capabilityList[capabilityIndex] = capability
		}
		destination.Capabilities = capabilityList
	} else {
		destination.Capabilities = nil
	}

	// Conditions
	if databaseAccountGetResultsStatus.Conditions != nil {
		conditionList := make([]conditions.Condition, len(databaseAccountGetResultsStatus.Conditions))
		for conditionIndex, conditionItem := range databaseAccountGetResultsStatus.Conditions {
			// Shadow the loop variable to avoid aliasing
			conditionItem := conditionItem
			conditionList[conditionIndex] = conditionItem.Copy()
		}
		destination.Conditions = conditionList
	} else {
		destination.Conditions = nil
	}

	// ConnectorOffer
	if databaseAccountGetResultsStatus.ConnectorOffer != nil {
		connectorOffer := string(*databaseAccountGetResultsStatus.ConnectorOffer)
		destination.ConnectorOffer = &connectorOffer
	} else {
		destination.ConnectorOffer = nil
	}

	// ConsistencyPolicy
	if databaseAccountGetResultsStatus.ConsistencyPolicy != nil {
		var consistencyPolicy v1alpha1api20210515storage.ConsistencyPolicy_Status
		err := (*databaseAccountGetResultsStatus.ConsistencyPolicy).AssignPropertiesToConsistencyPolicyStatus(&consistencyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ConsistencyPolicy from ConsistencyPolicy, calling AssignPropertiesToConsistencyPolicyStatus()")
		}
		destination.ConsistencyPolicy = &consistencyPolicy
	} else {
		destination.ConsistencyPolicy = nil
	}

	// Cors
	if databaseAccountGetResultsStatus.Cors != nil {
		corList := make([]v1alpha1api20210515storage.CorsPolicy_Status, len(databaseAccountGetResultsStatus.Cors))
		for corIndex, corItem := range databaseAccountGetResultsStatus.Cors {
			// Shadow the loop variable to avoid aliasing
			corItem := corItem
			var cor v1alpha1api20210515storage.CorsPolicy_Status
			err := corItem.AssignPropertiesToCorsPolicyStatus(&cor)
			if err != nil {
				return errors.Wrap(err, "populating Cors from Cors, calling AssignPropertiesToCorsPolicyStatus()")
			}
			corList[corIndex] = cor
		}
		destination.Cors = corList
	} else {
		destination.Cors = nil
	}

	// DatabaseAccountOfferType
	if databaseAccountGetResultsStatus.DatabaseAccountOfferType != nil {
		databaseAccountOfferType := string(*databaseAccountGetResultsStatus.DatabaseAccountOfferType)
		destination.DatabaseAccountOfferType = &databaseAccountOfferType
	} else {
		destination.DatabaseAccountOfferType = nil
	}

	// DefaultIdentity
	if databaseAccountGetResultsStatus.DefaultIdentity != nil {
		defaultIdentity := *databaseAccountGetResultsStatus.DefaultIdentity
		destination.DefaultIdentity = &defaultIdentity
	} else {
		destination.DefaultIdentity = nil
	}

	// DisableKeyBasedMetadataWriteAccess
	if databaseAccountGetResultsStatus.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *databaseAccountGetResultsStatus.DisableKeyBasedMetadataWriteAccess
		destination.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	} else {
		destination.DisableKeyBasedMetadataWriteAccess = nil
	}

	// DocumentEndpoint
	if databaseAccountGetResultsStatus.DocumentEndpoint != nil {
		documentEndpoint := *databaseAccountGetResultsStatus.DocumentEndpoint
		destination.DocumentEndpoint = &documentEndpoint
	} else {
		destination.DocumentEndpoint = nil
	}

	// EnableAnalyticalStorage
	if databaseAccountGetResultsStatus.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *databaseAccountGetResultsStatus.EnableAnalyticalStorage
		destination.EnableAnalyticalStorage = &enableAnalyticalStorage
	} else {
		destination.EnableAnalyticalStorage = nil
	}

	// EnableAutomaticFailover
	if databaseAccountGetResultsStatus.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *databaseAccountGetResultsStatus.EnableAutomaticFailover
		destination.EnableAutomaticFailover = &enableAutomaticFailover
	} else {
		destination.EnableAutomaticFailover = nil
	}

	// EnableCassandraConnector
	if databaseAccountGetResultsStatus.EnableCassandraConnector != nil {
		enableCassandraConnector := *databaseAccountGetResultsStatus.EnableCassandraConnector
		destination.EnableCassandraConnector = &enableCassandraConnector
	} else {
		destination.EnableCassandraConnector = nil
	}

	// EnableFreeTier
	if databaseAccountGetResultsStatus.EnableFreeTier != nil {
		enableFreeTier := *databaseAccountGetResultsStatus.EnableFreeTier
		destination.EnableFreeTier = &enableFreeTier
	} else {
		destination.EnableFreeTier = nil
	}

	// EnableMultipleWriteLocations
	if databaseAccountGetResultsStatus.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocation := *databaseAccountGetResultsStatus.EnableMultipleWriteLocations
		destination.EnableMultipleWriteLocations = &enableMultipleWriteLocation
	} else {
		destination.EnableMultipleWriteLocations = nil
	}

	// FailoverPolicies
	if databaseAccountGetResultsStatus.FailoverPolicies != nil {
		failoverPolicyList := make([]v1alpha1api20210515storage.FailoverPolicy_Status, len(databaseAccountGetResultsStatus.FailoverPolicies))
		for failoverPolicyIndex, failoverPolicyItem := range databaseAccountGetResultsStatus.FailoverPolicies {
			// Shadow the loop variable to avoid aliasing
			failoverPolicyItem := failoverPolicyItem
			var failoverPolicy v1alpha1api20210515storage.FailoverPolicy_Status
			err := failoverPolicyItem.AssignPropertiesToFailoverPolicyStatus(&failoverPolicy)
			if err != nil {
				return errors.Wrap(err, "populating FailoverPolicies from FailoverPolicies, calling AssignPropertiesToFailoverPolicyStatus()")
			}
			failoverPolicyList[failoverPolicyIndex] = failoverPolicy
		}
		destination.FailoverPolicies = failoverPolicyList
	} else {
		destination.FailoverPolicies = nil
	}

	// Id
	if databaseAccountGetResultsStatus.Id != nil {
		id := *databaseAccountGetResultsStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Identity
	if databaseAccountGetResultsStatus.Identity != nil {
		var identity v1alpha1api20210515storage.ManagedServiceIdentity_Status
		err := (*databaseAccountGetResultsStatus.Identity).AssignPropertiesToManagedServiceIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToManagedServiceIdentityStatus()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IpRules
	if databaseAccountGetResultsStatus.IpRules != nil {
		ipRuleList := make([]v1alpha1api20210515storage.IpAddressOrRange_Status, len(databaseAccountGetResultsStatus.IpRules))
		for ipRuleIndex, ipRuleItem := range databaseAccountGetResultsStatus.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v1alpha1api20210515storage.IpAddressOrRange_Status
			err := ipRuleItem.AssignPropertiesToIpAddressOrRangeStatus(&ipRule)
			if err != nil {
				return errors.Wrap(err, "populating IpRules from IpRules, calling AssignPropertiesToIpAddressOrRangeStatus()")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// IsVirtualNetworkFilterEnabled
	if databaseAccountGetResultsStatus.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *databaseAccountGetResultsStatus.IsVirtualNetworkFilterEnabled
		destination.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	} else {
		destination.IsVirtualNetworkFilterEnabled = nil
	}

	// KeyVaultKeyUri
	if databaseAccountGetResultsStatus.KeyVaultKeyUri != nil {
		keyVaultKeyUri := *databaseAccountGetResultsStatus.KeyVaultKeyUri
		destination.KeyVaultKeyUri = &keyVaultKeyUri
	} else {
		destination.KeyVaultKeyUri = nil
	}

	// Kind
	if databaseAccountGetResultsStatus.Kind != nil {
		kind := string(*databaseAccountGetResultsStatus.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	if databaseAccountGetResultsStatus.Location != nil {
		location := *databaseAccountGetResultsStatus.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Locations
	if databaseAccountGetResultsStatus.Locations != nil {
		locationList := make([]v1alpha1api20210515storage.Location_Status, len(databaseAccountGetResultsStatus.Locations))
		for locationIndex, locationItem := range databaseAccountGetResultsStatus.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v1alpha1api20210515storage.Location_Status
			err := locationItem.AssignPropertiesToLocationStatus(&location)
			if err != nil {
				return errors.Wrap(err, "populating Locations from Locations, calling AssignPropertiesToLocationStatus()")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// Name
	if databaseAccountGetResultsStatus.Name != nil {
		name := *databaseAccountGetResultsStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// NetworkAclBypass
	if databaseAccountGetResultsStatus.NetworkAclBypass != nil {
		networkAclBypass := string(*databaseAccountGetResultsStatus.NetworkAclBypass)
		destination.NetworkAclBypass = &networkAclBypass
	} else {
		destination.NetworkAclBypass = nil
	}

	// NetworkAclBypassResourceIds
	destination.NetworkAclBypassResourceIds = genruntime.CloneSliceOfString(databaseAccountGetResultsStatus.NetworkAclBypassResourceIds)

	// PrivateEndpointConnections
	if databaseAccountGetResultsStatus.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20210515storage.PrivateEndpointConnection_Status_SubResourceEmbedded, len(databaseAccountGetResultsStatus.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range databaseAccountGetResultsStatus.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20210515storage.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded()")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if databaseAccountGetResultsStatus.ProvisioningState != nil {
		provisioningState := *databaseAccountGetResultsStatus.ProvisioningState
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if databaseAccountGetResultsStatus.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*databaseAccountGetResultsStatus.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// ReadLocations
	if databaseAccountGetResultsStatus.ReadLocations != nil {
		readLocationList := make([]v1alpha1api20210515storage.Location_Status, len(databaseAccountGetResultsStatus.ReadLocations))
		for readLocationIndex, readLocationItem := range databaseAccountGetResultsStatus.ReadLocations {
			// Shadow the loop variable to avoid aliasing
			readLocationItem := readLocationItem
			var readLocation v1alpha1api20210515storage.Location_Status
			err := readLocationItem.AssignPropertiesToLocationStatus(&readLocation)
			if err != nil {
				return errors.Wrap(err, "populating ReadLocations from ReadLocations, calling AssignPropertiesToLocationStatus()")
			}
			readLocationList[readLocationIndex] = readLocation
		}
		destination.ReadLocations = readLocationList
	} else {
		destination.ReadLocations = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(databaseAccountGetResultsStatus.Tags)

	// Type
	if databaseAccountGetResultsStatus.Type != nil {
		typeVar := *databaseAccountGetResultsStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// VirtualNetworkRules
	if databaseAccountGetResultsStatus.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v1alpha1api20210515storage.VirtualNetworkRule_Status, len(databaseAccountGetResultsStatus.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range databaseAccountGetResultsStatus.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v1alpha1api20210515storage.VirtualNetworkRule_Status
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRuleStatus(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "populating VirtualNetworkRules from VirtualNetworkRules, calling AssignPropertiesToVirtualNetworkRuleStatus()")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// WriteLocations
	if databaseAccountGetResultsStatus.WriteLocations != nil {
		writeLocationList := make([]v1alpha1api20210515storage.Location_Status, len(databaseAccountGetResultsStatus.WriteLocations))
		for writeLocationIndex, writeLocationItem := range databaseAccountGetResultsStatus.WriteLocations {
			// Shadow the loop variable to avoid aliasing
			writeLocationItem := writeLocationItem
			var writeLocation v1alpha1api20210515storage.Location_Status
			err := writeLocationItem.AssignPropertiesToLocationStatus(&writeLocation)
			if err != nil {
				return errors.Wrap(err, "populating WriteLocations from WriteLocations, calling AssignPropertiesToLocationStatus()")
			}
			writeLocationList[writeLocationIndex] = writeLocation
		}
		destination.WriteLocations = writeLocationList
	} else {
		destination.WriteLocations = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type DatabaseAccounts_Spec struct {
	//AnalyticalStorageConfiguration: Analytical storage specific properties.
	AnalyticalStorageConfiguration *AnalyticalStorageConfiguration `json:"analyticalStorageConfiguration,omitempty"`
	ApiProperties                  *ApiProperties                  `json:"apiProperties,omitempty"`

	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=3
	// +kubebuilder:validation:Pattern="^[a-z0-9]+(-[a-z0-9]+)*"
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//BackupPolicy: The object representing the policy for taking backups on an
	//account.
	BackupPolicy *BackupPolicy `json:"backupPolicy,omitempty"`

	//Capabilities: List of Cosmos DB capabilities for the account
	Capabilities []Capability `json:"capabilities,omitempty"`

	//ConnectorOffer: The cassandra connector offer type for the Cosmos DB database C*
	//account.
	ConnectorOffer *DatabaseAccountCreateUpdatePropertiesConnectorOffer `json:"connectorOffer,omitempty"`

	//ConsistencyPolicy: The consistency policy for the Cosmos DB database account.
	ConsistencyPolicy *ConsistencyPolicy `json:"consistencyPolicy,omitempty"`

	//Cors: The CORS policy for the Cosmos DB database account.
	Cors []CorsPolicy `json:"cors,omitempty"`

	// +kubebuilder:validation:Required
	//DatabaseAccountOfferType: The offer type for the database
	DatabaseAccountOfferType DatabaseAccountCreateUpdatePropertiesDatabaseAccountOfferType `json:"databaseAccountOfferType"`

	//DefaultIdentity: The default identity for accessing key vault used in features
	//like customer managed keys. The default identity needs to be explicitly set by
	//the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more.
	DefaultIdentity *string `json:"defaultIdentity,omitempty"`

	//DisableKeyBasedMetadataWriteAccess: Disable write operations on metadata
	//resources (databases, containers, throughput) via account keys
	DisableKeyBasedMetadataWriteAccess *bool `json:"disableKeyBasedMetadataWriteAccess,omitempty"`

	//EnableAnalyticalStorage: Flag to indicate whether to enable storage analytics.
	EnableAnalyticalStorage *bool `json:"enableAnalyticalStorage,omitempty"`

	//EnableAutomaticFailover: Enables automatic failover of the write region in the
	//rare event that the region is unavailable due to an outage. Automatic failover
	//will result in a new write region for the account and is chosen based on the
	//failover priorities configured for the account.
	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty"`

	//EnableCassandraConnector: Enables the cassandra connector on the Cosmos DB C*
	//account
	EnableCassandraConnector *bool `json:"enableCassandraConnector,omitempty"`

	//EnableFreeTier: Flag to indicate whether Free Tier is enabled.
	EnableFreeTier *bool `json:"enableFreeTier,omitempty"`

	//EnableMultipleWriteLocations: Enables the account to write in multiple locations
	EnableMultipleWriteLocations *bool `json:"enableMultipleWriteLocations,omitempty"`

	//Identity: Identity for the resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	//IpRules: Array of IpAddressOrRange objects.
	IpRules []IpAddressOrRange `json:"ipRules,omitempty"`

	//IsVirtualNetworkFilterEnabled: Flag to indicate whether to enable/disable
	//Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty"`

	//KeyVaultKeyUri: The URI of the key vault
	KeyVaultKeyUri *string `json:"keyVaultKeyUri,omitempty"`

	//Kind: Indicates the type of database account. This can only be set at database
	//account creation.
	Kind *DatabaseAccountsSpecKind `json:"kind,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	//Locations: An array that contains the georeplication locations enabled for the
	//Cosmos DB account.
	Locations []Location `json:"locations"`

	//NetworkAclBypass: Indicates what services are allowed to bypass firewall checks.
	NetworkAclBypass *DatabaseAccountCreateUpdatePropertiesNetworkAclBypass `json:"networkAclBypass,omitempty"`

	//NetworkAclBypassResourceIds: An array that contains the Resource Ids for Network
	//Acl Bypass for the Cosmos DB account.
	NetworkAclBypassResourceIds []string `json:"networkAclBypassResourceIds,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PublicNetworkAccess: Whether requests from Public Network are allowed.
	PublicNetworkAccess *DatabaseAccountCreateUpdatePropertiesPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	//Tags: Tags are a list of key-value pairs that describe the resource. These tags
	//can be used in viewing and grouping this resource (across resource groups). A
	//maximum of 15 tags can be provided for a resource. Each tag must have a key no
	//greater than 128 characters and value no greater than 256 characters. For
	//example, the default experience for a template type is set with
	//"defaultExperience": "Cassandra". Current "defaultExperience" values also
	//include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `json:"tags,omitempty"`

	//VirtualNetworkRules: List of Virtual Network ACL rules configured for the Cosmos
	//DB account.
	VirtualNetworkRules []VirtualNetworkRule `json:"virtualNetworkRules,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccounts_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (databaseAccountsSpec *DatabaseAccounts_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if databaseAccountsSpec == nil {
		return nil, nil
	}
	var result DatabaseAccounts_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = DatabaseAccountsSpecAPIVersion20210515

	// Set property ‘Identity’:
	if databaseAccountsSpec.Identity != nil {
		identityARM, err := (*databaseAccountsSpec.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(ManagedServiceIdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Kind’:
	if databaseAccountsSpec.Kind != nil {
		kind := *databaseAccountsSpec.Kind
		result.Kind = &kind
	}

	// Set property ‘Location’:
	if databaseAccountsSpec.Location != nil {
		location := *databaseAccountsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if databaseAccountsSpec.AnalyticalStorageConfiguration != nil {
		analyticalStorageConfigurationARM, err := (*databaseAccountsSpec.AnalyticalStorageConfiguration).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		analyticalStorageConfiguration := analyticalStorageConfigurationARM.(AnalyticalStorageConfigurationARM)
		result.Properties.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	}
	if databaseAccountsSpec.ApiProperties != nil {
		apiPropertiesARM, err := (*databaseAccountsSpec.ApiProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		apiProperties := apiPropertiesARM.(ApiPropertiesARM)
		result.Properties.ApiProperties = &apiProperties
	}
	if databaseAccountsSpec.BackupPolicy != nil {
		backupPolicyARM, err := (*databaseAccountsSpec.BackupPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		backupPolicy := backupPolicyARM.(BackupPolicyARM)
		result.Properties.BackupPolicy = &backupPolicy
	}
	for _, item := range databaseAccountsSpec.Capabilities {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Capabilities = append(result.Properties.Capabilities, itemARM.(CapabilityARM))
	}
	if databaseAccountsSpec.ConnectorOffer != nil {
		connectorOffer := *databaseAccountsSpec.ConnectorOffer
		result.Properties.ConnectorOffer = &connectorOffer
	}
	if databaseAccountsSpec.ConsistencyPolicy != nil {
		consistencyPolicyARM, err := (*databaseAccountsSpec.ConsistencyPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		consistencyPolicy := consistencyPolicyARM.(ConsistencyPolicyARM)
		result.Properties.ConsistencyPolicy = &consistencyPolicy
	}
	for _, item := range databaseAccountsSpec.Cors {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Cors = append(result.Properties.Cors, itemARM.(CorsPolicyARM))
	}
	result.Properties.DatabaseAccountOfferType = databaseAccountsSpec.DatabaseAccountOfferType
	if databaseAccountsSpec.DefaultIdentity != nil {
		defaultIdentity := *databaseAccountsSpec.DefaultIdentity
		result.Properties.DefaultIdentity = &defaultIdentity
	}
	if databaseAccountsSpec.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *databaseAccountsSpec.DisableKeyBasedMetadataWriteAccess
		result.Properties.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	}
	if databaseAccountsSpec.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *databaseAccountsSpec.EnableAnalyticalStorage
		result.Properties.EnableAnalyticalStorage = &enableAnalyticalStorage
	}
	if databaseAccountsSpec.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *databaseAccountsSpec.EnableAutomaticFailover
		result.Properties.EnableAutomaticFailover = &enableAutomaticFailover
	}
	if databaseAccountsSpec.EnableCassandraConnector != nil {
		enableCassandraConnector := *databaseAccountsSpec.EnableCassandraConnector
		result.Properties.EnableCassandraConnector = &enableCassandraConnector
	}
	if databaseAccountsSpec.EnableFreeTier != nil {
		enableFreeTier := *databaseAccountsSpec.EnableFreeTier
		result.Properties.EnableFreeTier = &enableFreeTier
	}
	if databaseAccountsSpec.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocations := *databaseAccountsSpec.EnableMultipleWriteLocations
		result.Properties.EnableMultipleWriteLocations = &enableMultipleWriteLocations
	}
	for _, item := range databaseAccountsSpec.IpRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.IpRules = append(result.Properties.IpRules, itemARM.(IpAddressOrRangeARM))
	}
	if databaseAccountsSpec.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *databaseAccountsSpec.IsVirtualNetworkFilterEnabled
		result.Properties.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	}
	if databaseAccountsSpec.KeyVaultKeyUri != nil {
		keyVaultKeyUri := *databaseAccountsSpec.KeyVaultKeyUri
		result.Properties.KeyVaultKeyUri = &keyVaultKeyUri
	}
	for _, item := range databaseAccountsSpec.Locations {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Locations = append(result.Properties.Locations, itemARM.(LocationARM))
	}
	if databaseAccountsSpec.NetworkAclBypass != nil {
		networkAclBypass := *databaseAccountsSpec.NetworkAclBypass
		result.Properties.NetworkAclBypass = &networkAclBypass
	}
	for _, item := range databaseAccountsSpec.NetworkAclBypassResourceIds {
		result.Properties.NetworkAclBypassResourceIds = append(result.Properties.NetworkAclBypassResourceIds, item)
	}
	if databaseAccountsSpec.PublicNetworkAccess != nil {
		publicNetworkAccess := *databaseAccountsSpec.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}
	for _, item := range databaseAccountsSpec.VirtualNetworkRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.VirtualNetworkRules = append(result.Properties.VirtualNetworkRules, itemARM.(VirtualNetworkRuleARM))
	}

	// Set property ‘Tags’:
	if databaseAccountsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range databaseAccountsSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = DatabaseAccountsSpecTypeMicrosoftDocumentDBDatabaseAccounts
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (databaseAccountsSpec *DatabaseAccounts_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccounts_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (databaseAccountsSpec *DatabaseAccounts_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccounts_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccounts_SpecARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageConfiguration’:
	// copying flattened property:
	if typedInput.Properties.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration1 AnalyticalStorageConfiguration
		err := analyticalStorageConfiguration1.PopulateFromARM(owner, *typedInput.Properties.AnalyticalStorageConfiguration)
		if err != nil {
			return err
		}
		analyticalStorageConfiguration := analyticalStorageConfiguration1
		databaseAccountsSpec.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	}

	// Set property ‘ApiProperties’:
	// copying flattened property:
	if typedInput.Properties.ApiProperties != nil {
		var apiProperties1 ApiProperties
		err := apiProperties1.PopulateFromARM(owner, *typedInput.Properties.ApiProperties)
		if err != nil {
			return err
		}
		apiProperties := apiProperties1
		databaseAccountsSpec.ApiProperties = &apiProperties
	}

	// Set property ‘AzureName’:
	databaseAccountsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘BackupPolicy’:
	// copying flattened property:
	if typedInput.Properties.BackupPolicy != nil {
		var backupPolicy1 BackupPolicy
		err := backupPolicy1.PopulateFromARM(owner, *typedInput.Properties.BackupPolicy)
		if err != nil {
			return err
		}
		backupPolicy := backupPolicy1
		databaseAccountsSpec.BackupPolicy = &backupPolicy
	}

	// Set property ‘Capabilities’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Capabilities {
		var item1 Capability
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		databaseAccountsSpec.Capabilities = append(databaseAccountsSpec.Capabilities, item1)
	}

	// Set property ‘ConnectorOffer’:
	// copying flattened property:
	if typedInput.Properties.ConnectorOffer != nil {
		connectorOffer := *typedInput.Properties.ConnectorOffer
		databaseAccountsSpec.ConnectorOffer = &connectorOffer
	}

	// Set property ‘ConsistencyPolicy’:
	// copying flattened property:
	if typedInput.Properties.ConsistencyPolicy != nil {
		var consistencyPolicy1 ConsistencyPolicy
		err := consistencyPolicy1.PopulateFromARM(owner, *typedInput.Properties.ConsistencyPolicy)
		if err != nil {
			return err
		}
		consistencyPolicy := consistencyPolicy1
		databaseAccountsSpec.ConsistencyPolicy = &consistencyPolicy
	}

	// Set property ‘Cors’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Cors {
		var item1 CorsPolicy
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		databaseAccountsSpec.Cors = append(databaseAccountsSpec.Cors, item1)
	}

	// Set property ‘DatabaseAccountOfferType’:
	// copying flattened property:
	databaseAccountsSpec.DatabaseAccountOfferType = typedInput.Properties.DatabaseAccountOfferType

	// Set property ‘DefaultIdentity’:
	// copying flattened property:
	if typedInput.Properties.DefaultIdentity != nil {
		defaultIdentity := *typedInput.Properties.DefaultIdentity
		databaseAccountsSpec.DefaultIdentity = &defaultIdentity
	}

	// Set property ‘DisableKeyBasedMetadataWriteAccess’:
	// copying flattened property:
	if typedInput.Properties.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *typedInput.Properties.DisableKeyBasedMetadataWriteAccess
		databaseAccountsSpec.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	}

	// Set property ‘EnableAnalyticalStorage’:
	// copying flattened property:
	if typedInput.Properties.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *typedInput.Properties.EnableAnalyticalStorage
		databaseAccountsSpec.EnableAnalyticalStorage = &enableAnalyticalStorage
	}

	// Set property ‘EnableAutomaticFailover’:
	// copying flattened property:
	if typedInput.Properties.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *typedInput.Properties.EnableAutomaticFailover
		databaseAccountsSpec.EnableAutomaticFailover = &enableAutomaticFailover
	}

	// Set property ‘EnableCassandraConnector’:
	// copying flattened property:
	if typedInput.Properties.EnableCassandraConnector != nil {
		enableCassandraConnector := *typedInput.Properties.EnableCassandraConnector
		databaseAccountsSpec.EnableCassandraConnector = &enableCassandraConnector
	}

	// Set property ‘EnableFreeTier’:
	// copying flattened property:
	if typedInput.Properties.EnableFreeTier != nil {
		enableFreeTier := *typedInput.Properties.EnableFreeTier
		databaseAccountsSpec.EnableFreeTier = &enableFreeTier
	}

	// Set property ‘EnableMultipleWriteLocations’:
	// copying flattened property:
	if typedInput.Properties.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocations := *typedInput.Properties.EnableMultipleWriteLocations
		databaseAccountsSpec.EnableMultipleWriteLocations = &enableMultipleWriteLocations
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 ManagedServiceIdentity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		databaseAccountsSpec.Identity = &identity
	}

	// Set property ‘IpRules’:
	// copying flattened property:
	for _, item := range typedInput.Properties.IpRules {
		var item1 IpAddressOrRange
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		databaseAccountsSpec.IpRules = append(databaseAccountsSpec.IpRules, item1)
	}

	// Set property ‘IsVirtualNetworkFilterEnabled’:
	// copying flattened property:
	if typedInput.Properties.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *typedInput.Properties.IsVirtualNetworkFilterEnabled
		databaseAccountsSpec.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	}

	// Set property ‘KeyVaultKeyUri’:
	// copying flattened property:
	if typedInput.Properties.KeyVaultKeyUri != nil {
		keyVaultKeyUri := *typedInput.Properties.KeyVaultKeyUri
		databaseAccountsSpec.KeyVaultKeyUri = &keyVaultKeyUri
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		databaseAccountsSpec.Kind = &kind
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		databaseAccountsSpec.Location = &location
	}

	// Set property ‘Locations’:
	// copying flattened property:
	for _, item := range typedInput.Properties.Locations {
		var item1 Location
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		databaseAccountsSpec.Locations = append(databaseAccountsSpec.Locations, item1)
	}

	// Set property ‘NetworkAclBypass’:
	// copying flattened property:
	if typedInput.Properties.NetworkAclBypass != nil {
		networkAclBypass := *typedInput.Properties.NetworkAclBypass
		databaseAccountsSpec.NetworkAclBypass = &networkAclBypass
	}

	// Set property ‘NetworkAclBypassResourceIds’:
	// copying flattened property:
	for _, item := range typedInput.Properties.NetworkAclBypassResourceIds {
		databaseAccountsSpec.NetworkAclBypassResourceIds = append(databaseAccountsSpec.NetworkAclBypassResourceIds, item)
	}

	// Set property ‘Owner’:
	databaseAccountsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
		databaseAccountsSpec.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		databaseAccountsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			databaseAccountsSpec.Tags[key] = value
		}
	}

	// Set property ‘VirtualNetworkRules’:
	// copying flattened property:
	for _, item := range typedInput.Properties.VirtualNetworkRules {
		var item1 VirtualNetworkRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		databaseAccountsSpec.VirtualNetworkRules = append(databaseAccountsSpec.VirtualNetworkRules, item1)
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccounts_Spec{}

// ConvertSpecFrom populates our DatabaseAccounts_Spec from the provided source
func (databaseAccountsSpec *DatabaseAccounts_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccounts_Spec)
	if ok {
		// Populate our instance from source
		return databaseAccountsSpec.AssignPropertiesFromDatabaseAccountsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccounts_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = databaseAccountsSpec.AssignPropertiesFromDatabaseAccountsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccounts_Spec
func (databaseAccountsSpec *DatabaseAccounts_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccounts_Spec)
	if ok {
		// Populate destination from our instance
		return databaseAccountsSpec.AssignPropertiesToDatabaseAccountsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccounts_Spec{}
	err := databaseAccountsSpec.AssignPropertiesToDatabaseAccountsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsSpec populates our DatabaseAccounts_Spec from the provided source DatabaseAccounts_Spec
func (databaseAccountsSpec *DatabaseAccounts_Spec) AssignPropertiesFromDatabaseAccountsSpec(source *v1alpha1api20210515storage.DatabaseAccounts_Spec) error {

	// AnalyticalStorageConfiguration
	if source.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration AnalyticalStorageConfiguration
		err := analyticalStorageConfiguration.AssignPropertiesFromAnalyticalStorageConfiguration(source.AnalyticalStorageConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating AnalyticalStorageConfiguration from AnalyticalStorageConfiguration, calling AssignPropertiesFromAnalyticalStorageConfiguration()")
		}
		databaseAccountsSpec.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	} else {
		databaseAccountsSpec.AnalyticalStorageConfiguration = nil
	}

	// ApiProperties
	if source.ApiProperties != nil {
		var apiProperty ApiProperties
		err := apiProperty.AssignPropertiesFromApiProperties(source.ApiProperties)
		if err != nil {
			return errors.Wrap(err, "populating ApiProperties from ApiProperties, calling AssignPropertiesFromApiProperties()")
		}
		databaseAccountsSpec.ApiProperties = &apiProperty
	} else {
		databaseAccountsSpec.ApiProperties = nil
	}

	// AzureName
	databaseAccountsSpec.AzureName = source.AzureName

	// BackupPolicy
	if source.BackupPolicy != nil {
		var backupPolicy BackupPolicy
		err := backupPolicy.AssignPropertiesFromBackupPolicy(source.BackupPolicy)
		if err != nil {
			return errors.Wrap(err, "populating BackupPolicy from BackupPolicy, calling AssignPropertiesFromBackupPolicy()")
		}
		databaseAccountsSpec.BackupPolicy = &backupPolicy
	} else {
		databaseAccountsSpec.BackupPolicy = nil
	}

	// Capabilities
	if source.Capabilities != nil {
		capabilityList := make([]Capability, len(source.Capabilities))
		for capabilityIndex, capabilityItem := range source.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability Capability
			err := capability.AssignPropertiesFromCapability(&capabilityItem)
			if err != nil {
				return errors.Wrap(err, "populating Capabilities from Capabilities, calling AssignPropertiesFromCapability()")
			}
			capabilityList[capabilityIndex] = capability
		}
		databaseAccountsSpec.Capabilities = capabilityList
	} else {
		databaseAccountsSpec.Capabilities = nil
	}

	// ConnectorOffer
	if source.ConnectorOffer != nil {
		connectorOffer := DatabaseAccountCreateUpdatePropertiesConnectorOffer(*source.ConnectorOffer)
		databaseAccountsSpec.ConnectorOffer = &connectorOffer
	} else {
		databaseAccountsSpec.ConnectorOffer = nil
	}

	// ConsistencyPolicy
	if source.ConsistencyPolicy != nil {
		var consistencyPolicy ConsistencyPolicy
		err := consistencyPolicy.AssignPropertiesFromConsistencyPolicy(source.ConsistencyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ConsistencyPolicy from ConsistencyPolicy, calling AssignPropertiesFromConsistencyPolicy()")
		}
		databaseAccountsSpec.ConsistencyPolicy = &consistencyPolicy
	} else {
		databaseAccountsSpec.ConsistencyPolicy = nil
	}

	// Cors
	if source.Cors != nil {
		corList := make([]CorsPolicy, len(source.Cors))
		for corIndex, corItem := range source.Cors {
			// Shadow the loop variable to avoid aliasing
			corItem := corItem
			var cor CorsPolicy
			err := cor.AssignPropertiesFromCorsPolicy(&corItem)
			if err != nil {
				return errors.Wrap(err, "populating Cors from Cors, calling AssignPropertiesFromCorsPolicy()")
			}
			corList[corIndex] = cor
		}
		databaseAccountsSpec.Cors = corList
	} else {
		databaseAccountsSpec.Cors = nil
	}

	// DatabaseAccountOfferType
	if source.DatabaseAccountOfferType != nil {
		databaseAccountsSpec.DatabaseAccountOfferType = DatabaseAccountCreateUpdatePropertiesDatabaseAccountOfferType(*source.DatabaseAccountOfferType)
	} else {
		databaseAccountsSpec.DatabaseAccountOfferType = ""
	}

	// DefaultIdentity
	if source.DefaultIdentity != nil {
		defaultIdentity := *source.DefaultIdentity
		databaseAccountsSpec.DefaultIdentity = &defaultIdentity
	} else {
		databaseAccountsSpec.DefaultIdentity = nil
	}

	// DisableKeyBasedMetadataWriteAccess
	if source.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *source.DisableKeyBasedMetadataWriteAccess
		databaseAccountsSpec.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	} else {
		databaseAccountsSpec.DisableKeyBasedMetadataWriteAccess = nil
	}

	// EnableAnalyticalStorage
	if source.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *source.EnableAnalyticalStorage
		databaseAccountsSpec.EnableAnalyticalStorage = &enableAnalyticalStorage
	} else {
		databaseAccountsSpec.EnableAnalyticalStorage = nil
	}

	// EnableAutomaticFailover
	if source.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *source.EnableAutomaticFailover
		databaseAccountsSpec.EnableAutomaticFailover = &enableAutomaticFailover
	} else {
		databaseAccountsSpec.EnableAutomaticFailover = nil
	}

	// EnableCassandraConnector
	if source.EnableCassandraConnector != nil {
		enableCassandraConnector := *source.EnableCassandraConnector
		databaseAccountsSpec.EnableCassandraConnector = &enableCassandraConnector
	} else {
		databaseAccountsSpec.EnableCassandraConnector = nil
	}

	// EnableFreeTier
	if source.EnableFreeTier != nil {
		enableFreeTier := *source.EnableFreeTier
		databaseAccountsSpec.EnableFreeTier = &enableFreeTier
	} else {
		databaseAccountsSpec.EnableFreeTier = nil
	}

	// EnableMultipleWriteLocations
	if source.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocation := *source.EnableMultipleWriteLocations
		databaseAccountsSpec.EnableMultipleWriteLocations = &enableMultipleWriteLocation
	} else {
		databaseAccountsSpec.EnableMultipleWriteLocations = nil
	}

	// Identity
	if source.Identity != nil {
		var identity ManagedServiceIdentity
		err := identity.AssignPropertiesFromManagedServiceIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromManagedServiceIdentity()")
		}
		databaseAccountsSpec.Identity = &identity
	} else {
		databaseAccountsSpec.Identity = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IpAddressOrRange, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IpAddressOrRange
			err := ipRule.AssignPropertiesFromIpAddressOrRange(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "populating IpRules from IpRules, calling AssignPropertiesFromIpAddressOrRange()")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		databaseAccountsSpec.IpRules = ipRuleList
	} else {
		databaseAccountsSpec.IpRules = nil
	}

	// IsVirtualNetworkFilterEnabled
	if source.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *source.IsVirtualNetworkFilterEnabled
		databaseAccountsSpec.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	} else {
		databaseAccountsSpec.IsVirtualNetworkFilterEnabled = nil
	}

	// KeyVaultKeyUri
	if source.KeyVaultKeyUri != nil {
		keyVaultKeyUri := *source.KeyVaultKeyUri
		databaseAccountsSpec.KeyVaultKeyUri = &keyVaultKeyUri
	} else {
		databaseAccountsSpec.KeyVaultKeyUri = nil
	}

	// Kind
	if source.Kind != nil {
		kind := DatabaseAccountsSpecKind(*source.Kind)
		databaseAccountsSpec.Kind = &kind
	} else {
		databaseAccountsSpec.Kind = nil
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		databaseAccountsSpec.Location = &location
	} else {
		databaseAccountsSpec.Location = nil
	}

	// Locations
	if source.Locations != nil {
		locationList := make([]Location, len(source.Locations))
		for locationIndex, locationItem := range source.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location Location
			err := location.AssignPropertiesFromLocation(&locationItem)
			if err != nil {
				return errors.Wrap(err, "populating Locations from Locations, calling AssignPropertiesFromLocation()")
			}
			locationList[locationIndex] = location
		}
		databaseAccountsSpec.Locations = locationList
	} else {
		databaseAccountsSpec.Locations = nil
	}

	// NetworkAclBypass
	if source.NetworkAclBypass != nil {
		networkAclBypass := DatabaseAccountCreateUpdatePropertiesNetworkAclBypass(*source.NetworkAclBypass)
		databaseAccountsSpec.NetworkAclBypass = &networkAclBypass
	} else {
		databaseAccountsSpec.NetworkAclBypass = nil
	}

	// NetworkAclBypassResourceIds
	databaseAccountsSpec.NetworkAclBypassResourceIds = genruntime.CloneSliceOfString(source.NetworkAclBypassResourceIds)

	// Owner
	databaseAccountsSpec.Owner = source.Owner.Copy()

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := DatabaseAccountCreateUpdatePropertiesPublicNetworkAccess(*source.PublicNetworkAccess)
		databaseAccountsSpec.PublicNetworkAccess = &publicNetworkAccess
	} else {
		databaseAccountsSpec.PublicNetworkAccess = nil
	}

	// Tags
	databaseAccountsSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// VirtualNetworkRules
	if source.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]VirtualNetworkRule, len(source.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range source.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule VirtualNetworkRule
			err := virtualNetworkRule.AssignPropertiesFromVirtualNetworkRule(&virtualNetworkRuleItem)
			if err != nil {
				return errors.Wrap(err, "populating VirtualNetworkRules from VirtualNetworkRules, calling AssignPropertiesFromVirtualNetworkRule()")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		databaseAccountsSpec.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		databaseAccountsSpec.VirtualNetworkRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsSpec populates the provided destination DatabaseAccounts_Spec from our DatabaseAccounts_Spec
func (databaseAccountsSpec *DatabaseAccounts_Spec) AssignPropertiesToDatabaseAccountsSpec(destination *v1alpha1api20210515storage.DatabaseAccounts_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageConfiguration
	if databaseAccountsSpec.AnalyticalStorageConfiguration != nil {
		var analyticalStorageConfiguration v1alpha1api20210515storage.AnalyticalStorageConfiguration
		err := (*databaseAccountsSpec.AnalyticalStorageConfiguration).AssignPropertiesToAnalyticalStorageConfiguration(&analyticalStorageConfiguration)
		if err != nil {
			return errors.Wrap(err, "populating AnalyticalStorageConfiguration from AnalyticalStorageConfiguration, calling AssignPropertiesToAnalyticalStorageConfiguration()")
		}
		destination.AnalyticalStorageConfiguration = &analyticalStorageConfiguration
	} else {
		destination.AnalyticalStorageConfiguration = nil
	}

	// ApiProperties
	if databaseAccountsSpec.ApiProperties != nil {
		var apiProperty v1alpha1api20210515storage.ApiProperties
		err := (*databaseAccountsSpec.ApiProperties).AssignPropertiesToApiProperties(&apiProperty)
		if err != nil {
			return errors.Wrap(err, "populating ApiProperties from ApiProperties, calling AssignPropertiesToApiProperties()")
		}
		destination.ApiProperties = &apiProperty
	} else {
		destination.ApiProperties = nil
	}

	// AzureName
	destination.AzureName = databaseAccountsSpec.AzureName

	// BackupPolicy
	if databaseAccountsSpec.BackupPolicy != nil {
		var backupPolicy v1alpha1api20210515storage.BackupPolicy
		err := (*databaseAccountsSpec.BackupPolicy).AssignPropertiesToBackupPolicy(&backupPolicy)
		if err != nil {
			return errors.Wrap(err, "populating BackupPolicy from BackupPolicy, calling AssignPropertiesToBackupPolicy()")
		}
		destination.BackupPolicy = &backupPolicy
	} else {
		destination.BackupPolicy = nil
	}

	// Capabilities
	if databaseAccountsSpec.Capabilities != nil {
		capabilityList := make([]v1alpha1api20210515storage.Capability, len(databaseAccountsSpec.Capabilities))
		for capabilityIndex, capabilityItem := range databaseAccountsSpec.Capabilities {
			// Shadow the loop variable to avoid aliasing
			capabilityItem := capabilityItem
			var capability v1alpha1api20210515storage.Capability
			err := capabilityItem.AssignPropertiesToCapability(&capability)
			if err != nil {
				return errors.Wrap(err, "populating Capabilities from Capabilities, calling AssignPropertiesToCapability()")
			}
			capabilityList[capabilityIndex] = capability
		}
		destination.Capabilities = capabilityList
	} else {
		destination.Capabilities = nil
	}

	// ConnectorOffer
	if databaseAccountsSpec.ConnectorOffer != nil {
		connectorOffer := string(*databaseAccountsSpec.ConnectorOffer)
		destination.ConnectorOffer = &connectorOffer
	} else {
		destination.ConnectorOffer = nil
	}

	// ConsistencyPolicy
	if databaseAccountsSpec.ConsistencyPolicy != nil {
		var consistencyPolicy v1alpha1api20210515storage.ConsistencyPolicy
		err := (*databaseAccountsSpec.ConsistencyPolicy).AssignPropertiesToConsistencyPolicy(&consistencyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ConsistencyPolicy from ConsistencyPolicy, calling AssignPropertiesToConsistencyPolicy()")
		}
		destination.ConsistencyPolicy = &consistencyPolicy
	} else {
		destination.ConsistencyPolicy = nil
	}

	// Cors
	if databaseAccountsSpec.Cors != nil {
		corList := make([]v1alpha1api20210515storage.CorsPolicy, len(databaseAccountsSpec.Cors))
		for corIndex, corItem := range databaseAccountsSpec.Cors {
			// Shadow the loop variable to avoid aliasing
			corItem := corItem
			var cor v1alpha1api20210515storage.CorsPolicy
			err := corItem.AssignPropertiesToCorsPolicy(&cor)
			if err != nil {
				return errors.Wrap(err, "populating Cors from Cors, calling AssignPropertiesToCorsPolicy()")
			}
			corList[corIndex] = cor
		}
		destination.Cors = corList
	} else {
		destination.Cors = nil
	}

	// DatabaseAccountOfferType
	databaseAccountOfferType := string(databaseAccountsSpec.DatabaseAccountOfferType)
	destination.DatabaseAccountOfferType = &databaseAccountOfferType

	// DefaultIdentity
	if databaseAccountsSpec.DefaultIdentity != nil {
		defaultIdentity := *databaseAccountsSpec.DefaultIdentity
		destination.DefaultIdentity = &defaultIdentity
	} else {
		destination.DefaultIdentity = nil
	}

	// DisableKeyBasedMetadataWriteAccess
	if databaseAccountsSpec.DisableKeyBasedMetadataWriteAccess != nil {
		disableKeyBasedMetadataWriteAccess := *databaseAccountsSpec.DisableKeyBasedMetadataWriteAccess
		destination.DisableKeyBasedMetadataWriteAccess = &disableKeyBasedMetadataWriteAccess
	} else {
		destination.DisableKeyBasedMetadataWriteAccess = nil
	}

	// EnableAnalyticalStorage
	if databaseAccountsSpec.EnableAnalyticalStorage != nil {
		enableAnalyticalStorage := *databaseAccountsSpec.EnableAnalyticalStorage
		destination.EnableAnalyticalStorage = &enableAnalyticalStorage
	} else {
		destination.EnableAnalyticalStorage = nil
	}

	// EnableAutomaticFailover
	if databaseAccountsSpec.EnableAutomaticFailover != nil {
		enableAutomaticFailover := *databaseAccountsSpec.EnableAutomaticFailover
		destination.EnableAutomaticFailover = &enableAutomaticFailover
	} else {
		destination.EnableAutomaticFailover = nil
	}

	// EnableCassandraConnector
	if databaseAccountsSpec.EnableCassandraConnector != nil {
		enableCassandraConnector := *databaseAccountsSpec.EnableCassandraConnector
		destination.EnableCassandraConnector = &enableCassandraConnector
	} else {
		destination.EnableCassandraConnector = nil
	}

	// EnableFreeTier
	if databaseAccountsSpec.EnableFreeTier != nil {
		enableFreeTier := *databaseAccountsSpec.EnableFreeTier
		destination.EnableFreeTier = &enableFreeTier
	} else {
		destination.EnableFreeTier = nil
	}

	// EnableMultipleWriteLocations
	if databaseAccountsSpec.EnableMultipleWriteLocations != nil {
		enableMultipleWriteLocation := *databaseAccountsSpec.EnableMultipleWriteLocations
		destination.EnableMultipleWriteLocations = &enableMultipleWriteLocation
	} else {
		destination.EnableMultipleWriteLocations = nil
	}

	// Identity
	if databaseAccountsSpec.Identity != nil {
		var identity v1alpha1api20210515storage.ManagedServiceIdentity
		err := (*databaseAccountsSpec.Identity).AssignPropertiesToManagedServiceIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToManagedServiceIdentity()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// IpRules
	if databaseAccountsSpec.IpRules != nil {
		ipRuleList := make([]v1alpha1api20210515storage.IpAddressOrRange, len(databaseAccountsSpec.IpRules))
		for ipRuleIndex, ipRuleItem := range databaseAccountsSpec.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v1alpha1api20210515storage.IpAddressOrRange
			err := ipRuleItem.AssignPropertiesToIpAddressOrRange(&ipRule)
			if err != nil {
				return errors.Wrap(err, "populating IpRules from IpRules, calling AssignPropertiesToIpAddressOrRange()")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// IsVirtualNetworkFilterEnabled
	if databaseAccountsSpec.IsVirtualNetworkFilterEnabled != nil {
		isVirtualNetworkFilterEnabled := *databaseAccountsSpec.IsVirtualNetworkFilterEnabled
		destination.IsVirtualNetworkFilterEnabled = &isVirtualNetworkFilterEnabled
	} else {
		destination.IsVirtualNetworkFilterEnabled = nil
	}

	// KeyVaultKeyUri
	if databaseAccountsSpec.KeyVaultKeyUri != nil {
		keyVaultKeyUri := *databaseAccountsSpec.KeyVaultKeyUri
		destination.KeyVaultKeyUri = &keyVaultKeyUri
	} else {
		destination.KeyVaultKeyUri = nil
	}

	// Kind
	if databaseAccountsSpec.Kind != nil {
		kind := string(*databaseAccountsSpec.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Location
	if databaseAccountsSpec.Location != nil {
		location := *databaseAccountsSpec.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Locations
	if databaseAccountsSpec.Locations != nil {
		locationList := make([]v1alpha1api20210515storage.Location, len(databaseAccountsSpec.Locations))
		for locationIndex, locationItem := range databaseAccountsSpec.Locations {
			// Shadow the loop variable to avoid aliasing
			locationItem := locationItem
			var location v1alpha1api20210515storage.Location
			err := locationItem.AssignPropertiesToLocation(&location)
			if err != nil {
				return errors.Wrap(err, "populating Locations from Locations, calling AssignPropertiesToLocation()")
			}
			locationList[locationIndex] = location
		}
		destination.Locations = locationList
	} else {
		destination.Locations = nil
	}

	// NetworkAclBypass
	if databaseAccountsSpec.NetworkAclBypass != nil {
		networkAclBypass := string(*databaseAccountsSpec.NetworkAclBypass)
		destination.NetworkAclBypass = &networkAclBypass
	} else {
		destination.NetworkAclBypass = nil
	}

	// NetworkAclBypassResourceIds
	destination.NetworkAclBypassResourceIds = genruntime.CloneSliceOfString(databaseAccountsSpec.NetworkAclBypassResourceIds)

	// OriginalVersion
	destination.OriginalVersion = databaseAccountsSpec.OriginalVersion()

	// Owner
	destination.Owner = databaseAccountsSpec.Owner.Copy()

	// PublicNetworkAccess
	if databaseAccountsSpec.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*databaseAccountsSpec.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(databaseAccountsSpec.Tags)

	// VirtualNetworkRules
	if databaseAccountsSpec.VirtualNetworkRules != nil {
		virtualNetworkRuleList := make([]v1alpha1api20210515storage.VirtualNetworkRule, len(databaseAccountsSpec.VirtualNetworkRules))
		for virtualNetworkRuleIndex, virtualNetworkRuleItem := range databaseAccountsSpec.VirtualNetworkRules {
			// Shadow the loop variable to avoid aliasing
			virtualNetworkRuleItem := virtualNetworkRuleItem
			var virtualNetworkRule v1alpha1api20210515storage.VirtualNetworkRule
			err := virtualNetworkRuleItem.AssignPropertiesToVirtualNetworkRule(&virtualNetworkRule)
			if err != nil {
				return errors.Wrap(err, "populating VirtualNetworkRules from VirtualNetworkRules, calling AssignPropertiesToVirtualNetworkRule()")
			}
			virtualNetworkRuleList[virtualNetworkRuleIndex] = virtualNetworkRule
		}
		destination.VirtualNetworkRules = virtualNetworkRuleList
	} else {
		destination.VirtualNetworkRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (databaseAccountsSpec *DatabaseAccounts_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (databaseAccountsSpec *DatabaseAccounts_Spec) SetAzureName(azureName string) {
	databaseAccountsSpec.AzureName = azureName
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/AnalyticalStorageConfiguration
type AnalyticalStorageConfiguration struct {
	SchemaType *AnalyticalStorageConfigurationSchemaType `json:"schemaType,omitempty"`
}

var _ genruntime.ARMTransformer = &AnalyticalStorageConfiguration{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (analyticalStorageConfiguration *AnalyticalStorageConfiguration) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if analyticalStorageConfiguration == nil {
		return nil, nil
	}
	var result AnalyticalStorageConfigurationARM

	// Set property ‘SchemaType’:
	if analyticalStorageConfiguration.SchemaType != nil {
		schemaType := *analyticalStorageConfiguration.SchemaType
		result.SchemaType = &schemaType
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (analyticalStorageConfiguration *AnalyticalStorageConfiguration) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AnalyticalStorageConfigurationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (analyticalStorageConfiguration *AnalyticalStorageConfiguration) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AnalyticalStorageConfigurationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AnalyticalStorageConfigurationARM, got %T", armInput)
	}

	// Set property ‘SchemaType’:
	if typedInput.SchemaType != nil {
		schemaType := *typedInput.SchemaType
		analyticalStorageConfiguration.SchemaType = &schemaType
	}

	// No error
	return nil
}

// AssignPropertiesFromAnalyticalStorageConfiguration populates our AnalyticalStorageConfiguration from the provided source AnalyticalStorageConfiguration
func (analyticalStorageConfiguration *AnalyticalStorageConfiguration) AssignPropertiesFromAnalyticalStorageConfiguration(source *v1alpha1api20210515storage.AnalyticalStorageConfiguration) error {

	// SchemaType
	if source.SchemaType != nil {
		schemaType := AnalyticalStorageConfigurationSchemaType(*source.SchemaType)
		analyticalStorageConfiguration.SchemaType = &schemaType
	} else {
		analyticalStorageConfiguration.SchemaType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAnalyticalStorageConfiguration populates the provided destination AnalyticalStorageConfiguration from our AnalyticalStorageConfiguration
func (analyticalStorageConfiguration *AnalyticalStorageConfiguration) AssignPropertiesToAnalyticalStorageConfiguration(destination *v1alpha1api20210515storage.AnalyticalStorageConfiguration) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SchemaType
	if analyticalStorageConfiguration.SchemaType != nil {
		schemaType := string(*analyticalStorageConfiguration.SchemaType)
		destination.SchemaType = &schemaType
	} else {
		destination.SchemaType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type AnalyticalStorageConfiguration_Status struct {
	SchemaType *AnalyticalStorageSchemaType_Status `json:"schemaType,omitempty"`
}

var _ genruntime.FromARMConverter = &AnalyticalStorageConfiguration_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (analyticalStorageConfigurationStatus *AnalyticalStorageConfiguration_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AnalyticalStorageConfiguration_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (analyticalStorageConfigurationStatus *AnalyticalStorageConfiguration_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AnalyticalStorageConfiguration_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AnalyticalStorageConfiguration_StatusARM, got %T", armInput)
	}

	// Set property ‘SchemaType’:
	if typedInput.SchemaType != nil {
		schemaType := *typedInput.SchemaType
		analyticalStorageConfigurationStatus.SchemaType = &schemaType
	}

	// No error
	return nil
}

// AssignPropertiesFromAnalyticalStorageConfigurationStatus populates our AnalyticalStorageConfiguration_Status from the provided source AnalyticalStorageConfiguration_Status
func (analyticalStorageConfigurationStatus *AnalyticalStorageConfiguration_Status) AssignPropertiesFromAnalyticalStorageConfigurationStatus(source *v1alpha1api20210515storage.AnalyticalStorageConfiguration_Status) error {

	// SchemaType
	if source.SchemaType != nil {
		schemaType := AnalyticalStorageSchemaType_Status(*source.SchemaType)
		analyticalStorageConfigurationStatus.SchemaType = &schemaType
	} else {
		analyticalStorageConfigurationStatus.SchemaType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAnalyticalStorageConfigurationStatus populates the provided destination AnalyticalStorageConfiguration_Status from our AnalyticalStorageConfiguration_Status
func (analyticalStorageConfigurationStatus *AnalyticalStorageConfiguration_Status) AssignPropertiesToAnalyticalStorageConfigurationStatus(destination *v1alpha1api20210515storage.AnalyticalStorageConfiguration_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// SchemaType
	if analyticalStorageConfigurationStatus.SchemaType != nil {
		schemaType := string(*analyticalStorageConfigurationStatus.SchemaType)
		destination.SchemaType = &schemaType
	} else {
		destination.SchemaType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/ApiProperties
type ApiProperties struct {
	//ServerVersion: Describes the ServerVersion of an a MongoDB account.
	ServerVersion *ApiPropertiesServerVersion `json:"serverVersion,omitempty"`
}

var _ genruntime.ARMTransformer = &ApiProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (apiProperties *ApiProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if apiProperties == nil {
		return nil, nil
	}
	var result ApiPropertiesARM

	// Set property ‘ServerVersion’:
	if apiProperties.ServerVersion != nil {
		serverVersion := *apiProperties.ServerVersion
		result.ServerVersion = &serverVersion
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (apiProperties *ApiProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (apiProperties *ApiProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiPropertiesARM, got %T", armInput)
	}

	// Set property ‘ServerVersion’:
	if typedInput.ServerVersion != nil {
		serverVersion := *typedInput.ServerVersion
		apiProperties.ServerVersion = &serverVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromApiProperties populates our ApiProperties from the provided source ApiProperties
func (apiProperties *ApiProperties) AssignPropertiesFromApiProperties(source *v1alpha1api20210515storage.ApiProperties) error {

	// ServerVersion
	if source.ServerVersion != nil {
		serverVersion := ApiPropertiesServerVersion(*source.ServerVersion)
		apiProperties.ServerVersion = &serverVersion
	} else {
		apiProperties.ServerVersion = nil
	}

	// No error
	return nil
}

// AssignPropertiesToApiProperties populates the provided destination ApiProperties from our ApiProperties
func (apiProperties *ApiProperties) AssignPropertiesToApiProperties(destination *v1alpha1api20210515storage.ApiProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ServerVersion
	if apiProperties.ServerVersion != nil {
		serverVersion := string(*apiProperties.ServerVersion)
		destination.ServerVersion = &serverVersion
	} else {
		destination.ServerVersion = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type ApiProperties_Status struct {
	//ServerVersion: Describes the ServerVersion of an a MongoDB account.
	ServerVersion *ApiPropertiesStatusServerVersion `json:"serverVersion,omitempty"`
}

var _ genruntime.FromARMConverter = &ApiProperties_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (apiPropertiesStatus *ApiProperties_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ApiProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (apiPropertiesStatus *ApiProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ApiProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ApiProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘ServerVersion’:
	if typedInput.ServerVersion != nil {
		serverVersion := *typedInput.ServerVersion
		apiPropertiesStatus.ServerVersion = &serverVersion
	}

	// No error
	return nil
}

// AssignPropertiesFromApiPropertiesStatus populates our ApiProperties_Status from the provided source ApiProperties_Status
func (apiPropertiesStatus *ApiProperties_Status) AssignPropertiesFromApiPropertiesStatus(source *v1alpha1api20210515storage.ApiProperties_Status) error {

	// ServerVersion
	if source.ServerVersion != nil {
		serverVersion := ApiPropertiesStatusServerVersion(*source.ServerVersion)
		apiPropertiesStatus.ServerVersion = &serverVersion
	} else {
		apiPropertiesStatus.ServerVersion = nil
	}

	// No error
	return nil
}

// AssignPropertiesToApiPropertiesStatus populates the provided destination ApiProperties_Status from our ApiProperties_Status
func (apiPropertiesStatus *ApiProperties_Status) AssignPropertiesToApiPropertiesStatus(destination *v1alpha1api20210515storage.ApiProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ServerVersion
	if apiPropertiesStatus.ServerVersion != nil {
		serverVersion := string(*apiPropertiesStatus.ServerVersion)
		destination.ServerVersion = &serverVersion
	} else {
		destination.ServerVersion = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/BackupPolicy
type BackupPolicy struct {
	//ContinuousModeBackupPolicy: Mutually exclusive with all other properties
	ContinuousModeBackupPolicy *ContinuousModeBackupPolicy `json:"continuousModeBackupPolicy,omitempty"`

	//PeriodicModeBackupPolicy: Mutually exclusive with all other properties
	PeriodicModeBackupPolicy *PeriodicModeBackupPolicy `json:"periodicModeBackupPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &BackupPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (backupPolicy *BackupPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if backupPolicy == nil {
		return nil, nil
	}
	var result BackupPolicyARM

	// Set property ‘ContinuousModeBackupPolicy’:
	if backupPolicy.ContinuousModeBackupPolicy != nil {
		continuousModeBackupPolicyARM, err := (*backupPolicy.ContinuousModeBackupPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		continuousModeBackupPolicy := continuousModeBackupPolicyARM.(ContinuousModeBackupPolicyARM)
		result.ContinuousModeBackupPolicy = &continuousModeBackupPolicy
	}

	// Set property ‘PeriodicModeBackupPolicy’:
	if backupPolicy.PeriodicModeBackupPolicy != nil {
		periodicModeBackupPolicyARM, err := (*backupPolicy.PeriodicModeBackupPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		periodicModeBackupPolicy := periodicModeBackupPolicyARM.(PeriodicModeBackupPolicyARM)
		result.PeriodicModeBackupPolicy = &periodicModeBackupPolicy
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backupPolicy *BackupPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BackupPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backupPolicy *BackupPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BackupPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BackupPolicyARM, got %T", armInput)
	}

	// Set property ‘ContinuousModeBackupPolicy’:
	if typedInput.ContinuousModeBackupPolicy != nil {
		var continuousModeBackupPolicy1 ContinuousModeBackupPolicy
		err := continuousModeBackupPolicy1.PopulateFromARM(owner, *typedInput.ContinuousModeBackupPolicy)
		if err != nil {
			return err
		}
		continuousModeBackupPolicy := continuousModeBackupPolicy1
		backupPolicy.ContinuousModeBackupPolicy = &continuousModeBackupPolicy
	}

	// Set property ‘PeriodicModeBackupPolicy’:
	if typedInput.PeriodicModeBackupPolicy != nil {
		var periodicModeBackupPolicy1 PeriodicModeBackupPolicy
		err := periodicModeBackupPolicy1.PopulateFromARM(owner, *typedInput.PeriodicModeBackupPolicy)
		if err != nil {
			return err
		}
		periodicModeBackupPolicy := periodicModeBackupPolicy1
		backupPolicy.PeriodicModeBackupPolicy = &periodicModeBackupPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromBackupPolicy populates our BackupPolicy from the provided source BackupPolicy
func (backupPolicy *BackupPolicy) AssignPropertiesFromBackupPolicy(source *v1alpha1api20210515storage.BackupPolicy) error {

	// ContinuousModeBackupPolicy
	if source.ContinuousModeBackupPolicy != nil {
		var continuousModeBackupPolicy ContinuousModeBackupPolicy
		err := continuousModeBackupPolicy.AssignPropertiesFromContinuousModeBackupPolicy(source.ContinuousModeBackupPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ContinuousModeBackupPolicy from ContinuousModeBackupPolicy, calling AssignPropertiesFromContinuousModeBackupPolicy()")
		}
		backupPolicy.ContinuousModeBackupPolicy = &continuousModeBackupPolicy
	} else {
		backupPolicy.ContinuousModeBackupPolicy = nil
	}

	// PeriodicModeBackupPolicy
	if source.PeriodicModeBackupPolicy != nil {
		var periodicModeBackupPolicy PeriodicModeBackupPolicy
		err := periodicModeBackupPolicy.AssignPropertiesFromPeriodicModeBackupPolicy(source.PeriodicModeBackupPolicy)
		if err != nil {
			return errors.Wrap(err, "populating PeriodicModeBackupPolicy from PeriodicModeBackupPolicy, calling AssignPropertiesFromPeriodicModeBackupPolicy()")
		}
		backupPolicy.PeriodicModeBackupPolicy = &periodicModeBackupPolicy
	} else {
		backupPolicy.PeriodicModeBackupPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBackupPolicy populates the provided destination BackupPolicy from our BackupPolicy
func (backupPolicy *BackupPolicy) AssignPropertiesToBackupPolicy(destination *v1alpha1api20210515storage.BackupPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ContinuousModeBackupPolicy
	if backupPolicy.ContinuousModeBackupPolicy != nil {
		var continuousModeBackupPolicy v1alpha1api20210515storage.ContinuousModeBackupPolicy
		err := (*backupPolicy.ContinuousModeBackupPolicy).AssignPropertiesToContinuousModeBackupPolicy(&continuousModeBackupPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ContinuousModeBackupPolicy from ContinuousModeBackupPolicy, calling AssignPropertiesToContinuousModeBackupPolicy()")
		}
		destination.ContinuousModeBackupPolicy = &continuousModeBackupPolicy
	} else {
		destination.ContinuousModeBackupPolicy = nil
	}

	// PeriodicModeBackupPolicy
	if backupPolicy.PeriodicModeBackupPolicy != nil {
		var periodicModeBackupPolicy v1alpha1api20210515storage.PeriodicModeBackupPolicy
		err := (*backupPolicy.PeriodicModeBackupPolicy).AssignPropertiesToPeriodicModeBackupPolicy(&periodicModeBackupPolicy)
		if err != nil {
			return errors.Wrap(err, "populating PeriodicModeBackupPolicy from PeriodicModeBackupPolicy, calling AssignPropertiesToPeriodicModeBackupPolicy()")
		}
		destination.PeriodicModeBackupPolicy = &periodicModeBackupPolicy
	} else {
		destination.PeriodicModeBackupPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type BackupPolicy_Status struct {
	// +kubebuilder:validation:Required
	Type BackupPolicyType_Status `json:"type"`
}

var _ genruntime.FromARMConverter = &BackupPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (backupPolicyStatus *BackupPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BackupPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (backupPolicyStatus *BackupPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BackupPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BackupPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘Type’:
	backupPolicyStatus.Type = typedInput.Type

	// No error
	return nil
}

// AssignPropertiesFromBackupPolicyStatus populates our BackupPolicy_Status from the provided source BackupPolicy_Status
func (backupPolicyStatus *BackupPolicy_Status) AssignPropertiesFromBackupPolicyStatus(source *v1alpha1api20210515storage.BackupPolicy_Status) error {

	// Type
	if source.Type != nil {
		backupPolicyStatus.Type = BackupPolicyType_Status(*source.Type)
	} else {
		backupPolicyStatus.Type = ""
	}

	// No error
	return nil
}

// AssignPropertiesToBackupPolicyStatus populates the provided destination BackupPolicy_Status from our BackupPolicy_Status
func (backupPolicyStatus *BackupPolicy_Status) AssignPropertiesToBackupPolicyStatus(destination *v1alpha1api20210515storage.BackupPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	typeVar := string(backupPolicyStatus.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/Capability
type Capability struct {
	//Name: Name of the Cosmos DB capability. For example, "name": "EnableCassandra".
	//Current values also include "EnableTable" and "EnableGremlin".
	Name *string `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Capability{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (capability *Capability) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if capability == nil {
		return nil, nil
	}
	var result CapabilityARM

	// Set property ‘Name’:
	if capability.Name != nil {
		name := *capability.Name
		result.Name = &name
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capability *Capability) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &CapabilityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capability *Capability) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CapabilityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CapabilityARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		capability.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromCapability populates our Capability from the provided source Capability
func (capability *Capability) AssignPropertiesFromCapability(source *v1alpha1api20210515storage.Capability) error {

	// Name
	if source.Name != nil {
		name := *source.Name
		capability.Name = &name
	} else {
		capability.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCapability populates the provided destination Capability from our Capability
func (capability *Capability) AssignPropertiesToCapability(destination *v1alpha1api20210515storage.Capability) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if capability.Name != nil {
		name := *capability.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type Capability_Status struct {
	//Name: Name of the Cosmos DB capability. For example, "name": "EnableCassandra".
	//Current values also include "EnableTable" and "EnableGremlin".
	Name *string `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &Capability_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (capabilityStatus *Capability_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &Capability_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (capabilityStatus *Capability_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Capability_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Capability_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		capabilityStatus.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromCapabilityStatus populates our Capability_Status from the provided source Capability_Status
func (capabilityStatus *Capability_Status) AssignPropertiesFromCapabilityStatus(source *v1alpha1api20210515storage.Capability_Status) error {

	// Name
	if source.Name != nil {
		name := *source.Name
		capabilityStatus.Name = &name
	} else {
		capabilityStatus.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCapabilityStatus populates the provided destination Capability_Status from our Capability_Status
func (capabilityStatus *Capability_Status) AssignPropertiesToCapabilityStatus(destination *v1alpha1api20210515storage.Capability_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if capabilityStatus.Name != nil {
		name := *capabilityStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type ConnectorOffer_Status string

const ConnectorOffer_StatusSmall = ConnectorOffer_Status("Small")

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/ConsistencyPolicy
type ConsistencyPolicy struct {
	// +kubebuilder:validation:Required
	//DefaultConsistencyLevel: The default consistency level and configuration
	//settings of the Cosmos DB account.
	DefaultConsistencyLevel ConsistencyPolicyDefaultConsistencyLevel `json:"defaultConsistencyLevel"`

	// +kubebuilder:validation:Maximum=86400
	// +kubebuilder:validation:Minimum=5
	//MaxIntervalInSeconds: When used with the Bounded Staleness consistency level,
	//this value represents the time amount of staleness (in seconds) tolerated.
	//Accepted range for this value is 5 - 86400. Required when
	//defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int `json:"maxIntervalInSeconds,omitempty"`

	// +kubebuilder:validation:Maximum=2147483647
	// +kubebuilder:validation:Minimum=1
	//MaxStalenessPrefix: When used with the Bounded Staleness consistency level, this
	//value represents the number of stale requests tolerated. Accepted range for this
	//value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to
	//'BoundedStaleness'.
	MaxStalenessPrefix *int `json:"maxStalenessPrefix,omitempty"`
}

var _ genruntime.ARMTransformer = &ConsistencyPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (consistencyPolicy *ConsistencyPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if consistencyPolicy == nil {
		return nil, nil
	}
	var result ConsistencyPolicyARM

	// Set property ‘DefaultConsistencyLevel’:
	result.DefaultConsistencyLevel = consistencyPolicy.DefaultConsistencyLevel

	// Set property ‘MaxIntervalInSeconds’:
	if consistencyPolicy.MaxIntervalInSeconds != nil {
		maxIntervalInSeconds := *consistencyPolicy.MaxIntervalInSeconds
		result.MaxIntervalInSeconds = &maxIntervalInSeconds
	}

	// Set property ‘MaxStalenessPrefix’:
	if consistencyPolicy.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *consistencyPolicy.MaxStalenessPrefix
		result.MaxStalenessPrefix = &maxStalenessPrefix
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (consistencyPolicy *ConsistencyPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConsistencyPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (consistencyPolicy *ConsistencyPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConsistencyPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConsistencyPolicyARM, got %T", armInput)
	}

	// Set property ‘DefaultConsistencyLevel’:
	consistencyPolicy.DefaultConsistencyLevel = typedInput.DefaultConsistencyLevel

	// Set property ‘MaxIntervalInSeconds’:
	if typedInput.MaxIntervalInSeconds != nil {
		maxIntervalInSeconds := *typedInput.MaxIntervalInSeconds
		consistencyPolicy.MaxIntervalInSeconds = &maxIntervalInSeconds
	}

	// Set property ‘MaxStalenessPrefix’:
	if typedInput.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *typedInput.MaxStalenessPrefix
		consistencyPolicy.MaxStalenessPrefix = &maxStalenessPrefix
	}

	// No error
	return nil
}

// AssignPropertiesFromConsistencyPolicy populates our ConsistencyPolicy from the provided source ConsistencyPolicy
func (consistencyPolicy *ConsistencyPolicy) AssignPropertiesFromConsistencyPolicy(source *v1alpha1api20210515storage.ConsistencyPolicy) error {

	// DefaultConsistencyLevel
	if source.DefaultConsistencyLevel != nil {
		consistencyPolicy.DefaultConsistencyLevel = ConsistencyPolicyDefaultConsistencyLevel(*source.DefaultConsistencyLevel)
	} else {
		consistencyPolicy.DefaultConsistencyLevel = ""
	}

	// MaxIntervalInSeconds
	if source.MaxIntervalInSeconds != nil {
		maxIntervalInSecond := *source.MaxIntervalInSeconds
		consistencyPolicy.MaxIntervalInSeconds = &maxIntervalInSecond
	} else {
		consistencyPolicy.MaxIntervalInSeconds = nil
	}

	// MaxStalenessPrefix
	if source.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *source.MaxStalenessPrefix
		consistencyPolicy.MaxStalenessPrefix = &maxStalenessPrefix
	} else {
		consistencyPolicy.MaxStalenessPrefix = nil
	}

	// No error
	return nil
}

// AssignPropertiesToConsistencyPolicy populates the provided destination ConsistencyPolicy from our ConsistencyPolicy
func (consistencyPolicy *ConsistencyPolicy) AssignPropertiesToConsistencyPolicy(destination *v1alpha1api20210515storage.ConsistencyPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultConsistencyLevel
	defaultConsistencyLevel := string(consistencyPolicy.DefaultConsistencyLevel)
	destination.DefaultConsistencyLevel = &defaultConsistencyLevel

	// MaxIntervalInSeconds
	if consistencyPolicy.MaxIntervalInSeconds != nil {
		maxIntervalInSecond := *consistencyPolicy.MaxIntervalInSeconds
		destination.MaxIntervalInSeconds = &maxIntervalInSecond
	} else {
		destination.MaxIntervalInSeconds = nil
	}

	// MaxStalenessPrefix
	if consistencyPolicy.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *consistencyPolicy.MaxStalenessPrefix
		destination.MaxStalenessPrefix = &maxStalenessPrefix
	} else {
		destination.MaxStalenessPrefix = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type ConsistencyPolicy_Status struct {
	// +kubebuilder:validation:Required
	//DefaultConsistencyLevel: The default consistency level and configuration
	//settings of the Cosmos DB account.
	DefaultConsistencyLevel ConsistencyPolicyStatusDefaultConsistencyLevel `json:"defaultConsistencyLevel"`

	//MaxIntervalInSeconds: When used with the Bounded Staleness consistency level,
	//this value represents the time amount of staleness (in seconds) tolerated.
	//Accepted range for this value is 5 - 86400. Required when
	//defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int `json:"maxIntervalInSeconds,omitempty"`

	//MaxStalenessPrefix: When used with the Bounded Staleness consistency level, this
	//value represents the number of stale requests tolerated. Accepted range for this
	//value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to
	//'BoundedStaleness'.
	MaxStalenessPrefix *int `json:"maxStalenessPrefix,omitempty"`
}

var _ genruntime.FromARMConverter = &ConsistencyPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (consistencyPolicyStatus *ConsistencyPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConsistencyPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (consistencyPolicyStatus *ConsistencyPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConsistencyPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConsistencyPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘DefaultConsistencyLevel’:
	consistencyPolicyStatus.DefaultConsistencyLevel = typedInput.DefaultConsistencyLevel

	// Set property ‘MaxIntervalInSeconds’:
	if typedInput.MaxIntervalInSeconds != nil {
		maxIntervalInSeconds := *typedInput.MaxIntervalInSeconds
		consistencyPolicyStatus.MaxIntervalInSeconds = &maxIntervalInSeconds
	}

	// Set property ‘MaxStalenessPrefix’:
	if typedInput.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *typedInput.MaxStalenessPrefix
		consistencyPolicyStatus.MaxStalenessPrefix = &maxStalenessPrefix
	}

	// No error
	return nil
}

// AssignPropertiesFromConsistencyPolicyStatus populates our ConsistencyPolicy_Status from the provided source ConsistencyPolicy_Status
func (consistencyPolicyStatus *ConsistencyPolicy_Status) AssignPropertiesFromConsistencyPolicyStatus(source *v1alpha1api20210515storage.ConsistencyPolicy_Status) error {

	// DefaultConsistencyLevel
	if source.DefaultConsistencyLevel != nil {
		consistencyPolicyStatus.DefaultConsistencyLevel = ConsistencyPolicyStatusDefaultConsistencyLevel(*source.DefaultConsistencyLevel)
	} else {
		consistencyPolicyStatus.DefaultConsistencyLevel = ""
	}

	// MaxIntervalInSeconds
	if source.MaxIntervalInSeconds != nil {
		maxIntervalInSecond := *source.MaxIntervalInSeconds
		consistencyPolicyStatus.MaxIntervalInSeconds = &maxIntervalInSecond
	} else {
		consistencyPolicyStatus.MaxIntervalInSeconds = nil
	}

	// MaxStalenessPrefix
	if source.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *source.MaxStalenessPrefix
		consistencyPolicyStatus.MaxStalenessPrefix = &maxStalenessPrefix
	} else {
		consistencyPolicyStatus.MaxStalenessPrefix = nil
	}

	// No error
	return nil
}

// AssignPropertiesToConsistencyPolicyStatus populates the provided destination ConsistencyPolicy_Status from our ConsistencyPolicy_Status
func (consistencyPolicyStatus *ConsistencyPolicy_Status) AssignPropertiesToConsistencyPolicyStatus(destination *v1alpha1api20210515storage.ConsistencyPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultConsistencyLevel
	defaultConsistencyLevel := string(consistencyPolicyStatus.DefaultConsistencyLevel)
	destination.DefaultConsistencyLevel = &defaultConsistencyLevel

	// MaxIntervalInSeconds
	if consistencyPolicyStatus.MaxIntervalInSeconds != nil {
		maxIntervalInSecond := *consistencyPolicyStatus.MaxIntervalInSeconds
		destination.MaxIntervalInSeconds = &maxIntervalInSecond
	} else {
		destination.MaxIntervalInSeconds = nil
	}

	// MaxStalenessPrefix
	if consistencyPolicyStatus.MaxStalenessPrefix != nil {
		maxStalenessPrefix := *consistencyPolicyStatus.MaxStalenessPrefix
		destination.MaxStalenessPrefix = &maxStalenessPrefix
	} else {
		destination.MaxStalenessPrefix = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/CorsPolicy
type CorsPolicy struct {
	//AllowedHeaders: The request headers that the origin domain may specify on the
	//CORS request.
	AllowedHeaders *string `json:"allowedHeaders,omitempty"`

	//AllowedMethods: The methods (HTTP request verbs) that the origin domain may use
	//for a CORS request.
	AllowedMethods *string `json:"allowedMethods,omitempty"`

	// +kubebuilder:validation:Required
	//AllowedOrigins: The origin domains that are permitted to make a request against
	//the service via CORS.
	AllowedOrigins string `json:"allowedOrigins"`

	//ExposedHeaders: The response headers that may be sent in the response to the
	//CORS request and exposed by the browser to the request issuer.
	ExposedHeaders *string `json:"exposedHeaders,omitempty"`

	// +kubebuilder:validation:Maximum=2147483647
	// +kubebuilder:validation:Minimum=1
	//MaxAgeInSeconds: The maximum amount time that a browser should cache the
	//preflight OPTIONS request.
	MaxAgeInSeconds *int `json:"maxAgeInSeconds,omitempty"`
}

var _ genruntime.ARMTransformer = &CorsPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (corsPolicy *CorsPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if corsPolicy == nil {
		return nil, nil
	}
	var result CorsPolicyARM

	// Set property ‘AllowedHeaders’:
	if corsPolicy.AllowedHeaders != nil {
		allowedHeaders := *corsPolicy.AllowedHeaders
		result.AllowedHeaders = &allowedHeaders
	}

	// Set property ‘AllowedMethods’:
	if corsPolicy.AllowedMethods != nil {
		allowedMethods := *corsPolicy.AllowedMethods
		result.AllowedMethods = &allowedMethods
	}

	// Set property ‘AllowedOrigins’:
	result.AllowedOrigins = corsPolicy.AllowedOrigins

	// Set property ‘ExposedHeaders’:
	if corsPolicy.ExposedHeaders != nil {
		exposedHeaders := *corsPolicy.ExposedHeaders
		result.ExposedHeaders = &exposedHeaders
	}

	// Set property ‘MaxAgeInSeconds’:
	if corsPolicy.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *corsPolicy.MaxAgeInSeconds
		result.MaxAgeInSeconds = &maxAgeInSeconds
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (corsPolicy *CorsPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (corsPolicy *CorsPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsPolicyARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	if typedInput.AllowedHeaders != nil {
		allowedHeaders := *typedInput.AllowedHeaders
		corsPolicy.AllowedHeaders = &allowedHeaders
	}

	// Set property ‘AllowedMethods’:
	if typedInput.AllowedMethods != nil {
		allowedMethods := *typedInput.AllowedMethods
		corsPolicy.AllowedMethods = &allowedMethods
	}

	// Set property ‘AllowedOrigins’:
	corsPolicy.AllowedOrigins = typedInput.AllowedOrigins

	// Set property ‘ExposedHeaders’:
	if typedInput.ExposedHeaders != nil {
		exposedHeaders := *typedInput.ExposedHeaders
		corsPolicy.ExposedHeaders = &exposedHeaders
	}

	// Set property ‘MaxAgeInSeconds’:
	if typedInput.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *typedInput.MaxAgeInSeconds
		corsPolicy.MaxAgeInSeconds = &maxAgeInSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsPolicy populates our CorsPolicy from the provided source CorsPolicy
func (corsPolicy *CorsPolicy) AssignPropertiesFromCorsPolicy(source *v1alpha1api20210515storage.CorsPolicy) error {

	// AllowedHeaders
	if source.AllowedHeaders != nil {
		allowedHeader := *source.AllowedHeaders
		corsPolicy.AllowedHeaders = &allowedHeader
	} else {
		corsPolicy.AllowedHeaders = nil
	}

	// AllowedMethods
	if source.AllowedMethods != nil {
		allowedMethod := *source.AllowedMethods
		corsPolicy.AllowedMethods = &allowedMethod
	} else {
		corsPolicy.AllowedMethods = nil
	}

	// AllowedOrigins
	if source.AllowedOrigins != nil {
		corsPolicy.AllowedOrigins = *source.AllowedOrigins
	} else {
		corsPolicy.AllowedOrigins = ""
	}

	// ExposedHeaders
	if source.ExposedHeaders != nil {
		exposedHeader := *source.ExposedHeaders
		corsPolicy.ExposedHeaders = &exposedHeader
	} else {
		corsPolicy.ExposedHeaders = nil
	}

	// MaxAgeInSeconds
	if source.MaxAgeInSeconds != nil {
		maxAgeInSecond := *source.MaxAgeInSeconds
		corsPolicy.MaxAgeInSeconds = &maxAgeInSecond
	} else {
		corsPolicy.MaxAgeInSeconds = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCorsPolicy populates the provided destination CorsPolicy from our CorsPolicy
func (corsPolicy *CorsPolicy) AssignPropertiesToCorsPolicy(destination *v1alpha1api20210515storage.CorsPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	if corsPolicy.AllowedHeaders != nil {
		allowedHeader := *corsPolicy.AllowedHeaders
		destination.AllowedHeaders = &allowedHeader
	} else {
		destination.AllowedHeaders = nil
	}

	// AllowedMethods
	if corsPolicy.AllowedMethods != nil {
		allowedMethod := *corsPolicy.AllowedMethods
		destination.AllowedMethods = &allowedMethod
	} else {
		destination.AllowedMethods = nil
	}

	// AllowedOrigins
	allowedOrigin := corsPolicy.AllowedOrigins
	destination.AllowedOrigins = &allowedOrigin

	// ExposedHeaders
	if corsPolicy.ExposedHeaders != nil {
		exposedHeader := *corsPolicy.ExposedHeaders
		destination.ExposedHeaders = &exposedHeader
	} else {
		destination.ExposedHeaders = nil
	}

	// MaxAgeInSeconds
	if corsPolicy.MaxAgeInSeconds != nil {
		maxAgeInSecond := *corsPolicy.MaxAgeInSeconds
		destination.MaxAgeInSeconds = &maxAgeInSecond
	} else {
		destination.MaxAgeInSeconds = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type CorsPolicy_Status struct {
	//AllowedHeaders: The request headers that the origin domain may specify on the
	//CORS request.
	AllowedHeaders *string `json:"allowedHeaders,omitempty"`

	//AllowedMethods: The methods (HTTP request verbs) that the origin domain may use
	//for a CORS request.
	AllowedMethods *string `json:"allowedMethods,omitempty"`

	// +kubebuilder:validation:Required
	//AllowedOrigins: The origin domains that are permitted to make a request against
	//the service via CORS.
	AllowedOrigins string `json:"allowedOrigins"`

	//ExposedHeaders: The response headers that may be sent in the response to the
	//CORS request and exposed by the browser to the request issuer.
	ExposedHeaders *string `json:"exposedHeaders,omitempty"`

	//MaxAgeInSeconds: The maximum amount time that a browser should cache the
	//preflight OPTIONS request.
	MaxAgeInSeconds *int `json:"maxAgeInSeconds,omitempty"`
}

var _ genruntime.FromARMConverter = &CorsPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (corsPolicyStatus *CorsPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &CorsPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (corsPolicyStatus *CorsPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CorsPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CorsPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘AllowedHeaders’:
	if typedInput.AllowedHeaders != nil {
		allowedHeaders := *typedInput.AllowedHeaders
		corsPolicyStatus.AllowedHeaders = &allowedHeaders
	}

	// Set property ‘AllowedMethods’:
	if typedInput.AllowedMethods != nil {
		allowedMethods := *typedInput.AllowedMethods
		corsPolicyStatus.AllowedMethods = &allowedMethods
	}

	// Set property ‘AllowedOrigins’:
	corsPolicyStatus.AllowedOrigins = typedInput.AllowedOrigins

	// Set property ‘ExposedHeaders’:
	if typedInput.ExposedHeaders != nil {
		exposedHeaders := *typedInput.ExposedHeaders
		corsPolicyStatus.ExposedHeaders = &exposedHeaders
	}

	// Set property ‘MaxAgeInSeconds’:
	if typedInput.MaxAgeInSeconds != nil {
		maxAgeInSeconds := *typedInput.MaxAgeInSeconds
		corsPolicyStatus.MaxAgeInSeconds = &maxAgeInSeconds
	}

	// No error
	return nil
}

// AssignPropertiesFromCorsPolicyStatus populates our CorsPolicy_Status from the provided source CorsPolicy_Status
func (corsPolicyStatus *CorsPolicy_Status) AssignPropertiesFromCorsPolicyStatus(source *v1alpha1api20210515storage.CorsPolicy_Status) error {

	// AllowedHeaders
	if source.AllowedHeaders != nil {
		allowedHeader := *source.AllowedHeaders
		corsPolicyStatus.AllowedHeaders = &allowedHeader
	} else {
		corsPolicyStatus.AllowedHeaders = nil
	}

	// AllowedMethods
	if source.AllowedMethods != nil {
		allowedMethod := *source.AllowedMethods
		corsPolicyStatus.AllowedMethods = &allowedMethod
	} else {
		corsPolicyStatus.AllowedMethods = nil
	}

	// AllowedOrigins
	if source.AllowedOrigins != nil {
		corsPolicyStatus.AllowedOrigins = *source.AllowedOrigins
	} else {
		corsPolicyStatus.AllowedOrigins = ""
	}

	// ExposedHeaders
	if source.ExposedHeaders != nil {
		exposedHeader := *source.ExposedHeaders
		corsPolicyStatus.ExposedHeaders = &exposedHeader
	} else {
		corsPolicyStatus.ExposedHeaders = nil
	}

	// MaxAgeInSeconds
	if source.MaxAgeInSeconds != nil {
		maxAgeInSecond := *source.MaxAgeInSeconds
		corsPolicyStatus.MaxAgeInSeconds = &maxAgeInSecond
	} else {
		corsPolicyStatus.MaxAgeInSeconds = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCorsPolicyStatus populates the provided destination CorsPolicy_Status from our CorsPolicy_Status
func (corsPolicyStatus *CorsPolicy_Status) AssignPropertiesToCorsPolicyStatus(destination *v1alpha1api20210515storage.CorsPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AllowedHeaders
	if corsPolicyStatus.AllowedHeaders != nil {
		allowedHeader := *corsPolicyStatus.AllowedHeaders
		destination.AllowedHeaders = &allowedHeader
	} else {
		destination.AllowedHeaders = nil
	}

	// AllowedMethods
	if corsPolicyStatus.AllowedMethods != nil {
		allowedMethod := *corsPolicyStatus.AllowedMethods
		destination.AllowedMethods = &allowedMethod
	} else {
		destination.AllowedMethods = nil
	}

	// AllowedOrigins
	allowedOrigin := corsPolicyStatus.AllowedOrigins
	destination.AllowedOrigins = &allowedOrigin

	// ExposedHeaders
	if corsPolicyStatus.ExposedHeaders != nil {
		exposedHeader := *corsPolicyStatus.ExposedHeaders
		destination.ExposedHeaders = &exposedHeader
	} else {
		destination.ExposedHeaders = nil
	}

	// MaxAgeInSeconds
	if corsPolicyStatus.MaxAgeInSeconds != nil {
		maxAgeInSecond := *corsPolicyStatus.MaxAgeInSeconds
		destination.MaxAgeInSeconds = &maxAgeInSecond
	} else {
		destination.MaxAgeInSeconds = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Small"}
type DatabaseAccountCreateUpdatePropertiesConnectorOffer string

const DatabaseAccountCreateUpdatePropertiesConnectorOfferSmall = DatabaseAccountCreateUpdatePropertiesConnectorOffer("Small")

// +kubebuilder:validation:Enum={"Standard"}
type DatabaseAccountCreateUpdatePropertiesDatabaseAccountOfferType string

const DatabaseAccountCreateUpdatePropertiesDatabaseAccountOfferTypeStandard = DatabaseAccountCreateUpdatePropertiesDatabaseAccountOfferType("Standard")

// +kubebuilder:validation:Enum={"AzureServices","None"}
type DatabaseAccountCreateUpdatePropertiesNetworkAclBypass string

const (
	DatabaseAccountCreateUpdatePropertiesNetworkAclBypassAzureServices = DatabaseAccountCreateUpdatePropertiesNetworkAclBypass("AzureServices")
	DatabaseAccountCreateUpdatePropertiesNetworkAclBypassNone          = DatabaseAccountCreateUpdatePropertiesNetworkAclBypass("None")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type DatabaseAccountCreateUpdatePropertiesPublicNetworkAccess string

const (
	DatabaseAccountCreateUpdatePropertiesPublicNetworkAccessDisabled = DatabaseAccountCreateUpdatePropertiesPublicNetworkAccess("Disabled")
	DatabaseAccountCreateUpdatePropertiesPublicNetworkAccessEnabled  = DatabaseAccountCreateUpdatePropertiesPublicNetworkAccess("Enabled")
)

//Generated from:
type DatabaseAccountOfferType_Status string

const DatabaseAccountOfferType_StatusStandard = DatabaseAccountOfferType_Status("Standard")

//Generated from:
type FailoverPolicy_Status struct {
	//FailoverPriority: The failover priority of the region. A failover priority of 0
	//indicates a write region. The maximum value for a failover priority = (total
	//number of regions - 1). Failover priority values must be unique for each of the
	//regions in which the database account exists.
	FailoverPriority *int `json:"failoverPriority,omitempty"`

	//Id: The unique identifier of the region in which the database account replicates
	//to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
	Id *string `json:"id,omitempty"`

	//LocationName: The name of the region in which the database account exists.
	LocationName *string `json:"locationName,omitempty"`
}

var _ genruntime.FromARMConverter = &FailoverPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (failoverPolicyStatus *FailoverPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &FailoverPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (failoverPolicyStatus *FailoverPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FailoverPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FailoverPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘FailoverPriority’:
	if typedInput.FailoverPriority != nil {
		failoverPriority := *typedInput.FailoverPriority
		failoverPolicyStatus.FailoverPriority = &failoverPriority
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		failoverPolicyStatus.Id = &id
	}

	// Set property ‘LocationName’:
	if typedInput.LocationName != nil {
		locationName := *typedInput.LocationName
		failoverPolicyStatus.LocationName = &locationName
	}

	// No error
	return nil
}

// AssignPropertiesFromFailoverPolicyStatus populates our FailoverPolicy_Status from the provided source FailoverPolicy_Status
func (failoverPolicyStatus *FailoverPolicy_Status) AssignPropertiesFromFailoverPolicyStatus(source *v1alpha1api20210515storage.FailoverPolicy_Status) error {

	// FailoverPriority
	if source.FailoverPriority != nil {
		failoverPriority := *source.FailoverPriority
		failoverPolicyStatus.FailoverPriority = &failoverPriority
	} else {
		failoverPolicyStatus.FailoverPriority = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		failoverPolicyStatus.Id = &id
	} else {
		failoverPolicyStatus.Id = nil
	}

	// LocationName
	if source.LocationName != nil {
		locationName := *source.LocationName
		failoverPolicyStatus.LocationName = &locationName
	} else {
		failoverPolicyStatus.LocationName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToFailoverPolicyStatus populates the provided destination FailoverPolicy_Status from our FailoverPolicy_Status
func (failoverPolicyStatus *FailoverPolicy_Status) AssignPropertiesToFailoverPolicyStatus(destination *v1alpha1api20210515storage.FailoverPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FailoverPriority
	if failoverPolicyStatus.FailoverPriority != nil {
		failoverPriority := *failoverPolicyStatus.FailoverPriority
		destination.FailoverPriority = &failoverPriority
	} else {
		destination.FailoverPriority = nil
	}

	// Id
	if failoverPolicyStatus.Id != nil {
		id := *failoverPolicyStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// LocationName
	if failoverPolicyStatus.LocationName != nil {
		locationName := *failoverPolicyStatus.LocationName
		destination.LocationName = &locationName
	} else {
		destination.LocationName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/IpAddressOrRange
type IpAddressOrRange struct {
	//IpAddressOrRange: A single IPv4 address or a single IPv4 address range in CIDR
	//format. Provided IPs must be well-formatted and cannot be contained in one of
	//the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16,
	//since these are not enforceable by the IP address filter. Example of valid
	//inputs: “23.40.210.245” or “23.40.210.0/8”.
	IpAddressOrRange *string `json:"ipAddressOrRange,omitempty"`
}

var _ genruntime.ARMTransformer = &IpAddressOrRange{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ipAddressOrRange *IpAddressOrRange) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ipAddressOrRange == nil {
		return nil, nil
	}
	var result IpAddressOrRangeARM

	// Set property ‘IpAddressOrRange’:
	if ipAddressOrRange.IpAddressOrRange != nil {
		ipAddressOrRange1 := *ipAddressOrRange.IpAddressOrRange
		result.IpAddressOrRange = &ipAddressOrRange1
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipAddressOrRange *IpAddressOrRange) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpAddressOrRangeARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipAddressOrRange *IpAddressOrRange) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpAddressOrRangeARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpAddressOrRangeARM, got %T", armInput)
	}

	// Set property ‘IpAddressOrRange’:
	if typedInput.IpAddressOrRange != nil {
		ipAddressOrRange1 := *typedInput.IpAddressOrRange
		ipAddressOrRange.IpAddressOrRange = &ipAddressOrRange1
	}

	// No error
	return nil
}

// AssignPropertiesFromIpAddressOrRange populates our IpAddressOrRange from the provided source IpAddressOrRange
func (ipAddressOrRange *IpAddressOrRange) AssignPropertiesFromIpAddressOrRange(source *v1alpha1api20210515storage.IpAddressOrRange) error {

	// IpAddressOrRange
	if source.IpAddressOrRange != nil {
		ipAddressOrRangeTemp := *source.IpAddressOrRange
		ipAddressOrRange.IpAddressOrRange = &ipAddressOrRangeTemp
	} else {
		ipAddressOrRange.IpAddressOrRange = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIpAddressOrRange populates the provided destination IpAddressOrRange from our IpAddressOrRange
func (ipAddressOrRange *IpAddressOrRange) AssignPropertiesToIpAddressOrRange(destination *v1alpha1api20210515storage.IpAddressOrRange) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpAddressOrRange
	if ipAddressOrRange.IpAddressOrRange != nil {
		ipAddressOrRangeTemp := *ipAddressOrRange.IpAddressOrRange
		destination.IpAddressOrRange = &ipAddressOrRangeTemp
	} else {
		destination.IpAddressOrRange = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type IpAddressOrRange_Status struct {
	//IpAddressOrRange: A single IPv4 address or a single IPv4 address range in CIDR
	//format. Provided IPs must be well-formatted and cannot be contained in one of
	//the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16,
	//since these are not enforceable by the IP address filter. Example of valid
	//inputs: “23.40.210.245” or “23.40.210.0/8”.
	IpAddressOrRange *string `json:"ipAddressOrRange,omitempty"`
}

var _ genruntime.FromARMConverter = &IpAddressOrRange_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ipAddressOrRangeStatus *IpAddressOrRange_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IpAddressOrRange_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ipAddressOrRangeStatus *IpAddressOrRange_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IpAddressOrRange_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IpAddressOrRange_StatusARM, got %T", armInput)
	}

	// Set property ‘IpAddressOrRange’:
	if typedInput.IpAddressOrRange != nil {
		ipAddressOrRange := *typedInput.IpAddressOrRange
		ipAddressOrRangeStatus.IpAddressOrRange = &ipAddressOrRange
	}

	// No error
	return nil
}

// AssignPropertiesFromIpAddressOrRangeStatus populates our IpAddressOrRange_Status from the provided source IpAddressOrRange_Status
func (ipAddressOrRangeStatus *IpAddressOrRange_Status) AssignPropertiesFromIpAddressOrRangeStatus(source *v1alpha1api20210515storage.IpAddressOrRange_Status) error {

	// IpAddressOrRange
	if source.IpAddressOrRange != nil {
		ipAddressOrRange := *source.IpAddressOrRange
		ipAddressOrRangeStatus.IpAddressOrRange = &ipAddressOrRange
	} else {
		ipAddressOrRangeStatus.IpAddressOrRange = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIpAddressOrRangeStatus populates the provided destination IpAddressOrRange_Status from our IpAddressOrRange_Status
func (ipAddressOrRangeStatus *IpAddressOrRange_Status) AssignPropertiesToIpAddressOrRangeStatus(destination *v1alpha1api20210515storage.IpAddressOrRange_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IpAddressOrRange
	if ipAddressOrRangeStatus.IpAddressOrRange != nil {
		ipAddressOrRange := *ipAddressOrRangeStatus.IpAddressOrRange
		destination.IpAddressOrRange = &ipAddressOrRange
	} else {
		destination.IpAddressOrRange = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/Location
type Location struct {
	// +kubebuilder:validation:Minimum=0
	//FailoverPriority: The failover priority of the region. A failover priority of 0
	//indicates a write region. The maximum value for a failover priority = (total
	//number of regions - 1). Failover priority values must be unique for each of the
	//regions in which the database account exists.
	FailoverPriority *int `json:"failoverPriority,omitempty"`

	//IsZoneRedundant: Flag to indicate whether or not this region is an
	//AvailabilityZone region
	IsZoneRedundant *bool `json:"isZoneRedundant,omitempty"`

	//LocationName: The name of the region.
	LocationName *string `json:"locationName,omitempty"`
}

var _ genruntime.ARMTransformer = &Location{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (location *Location) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if location == nil {
		return nil, nil
	}
	var result LocationARM

	// Set property ‘FailoverPriority’:
	if location.FailoverPriority != nil {
		failoverPriority := *location.FailoverPriority
		result.FailoverPriority = &failoverPriority
	}

	// Set property ‘IsZoneRedundant’:
	if location.IsZoneRedundant != nil {
		isZoneRedundant := *location.IsZoneRedundant
		result.IsZoneRedundant = &isZoneRedundant
	}

	// Set property ‘LocationName’:
	if location.LocationName != nil {
		locationName := *location.LocationName
		result.LocationName = &locationName
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (location *Location) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &LocationARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (location *Location) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(LocationARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected LocationARM, got %T", armInput)
	}

	// Set property ‘FailoverPriority’:
	if typedInput.FailoverPriority != nil {
		failoverPriority := *typedInput.FailoverPriority
		location.FailoverPriority = &failoverPriority
	}

	// Set property ‘IsZoneRedundant’:
	if typedInput.IsZoneRedundant != nil {
		isZoneRedundant := *typedInput.IsZoneRedundant
		location.IsZoneRedundant = &isZoneRedundant
	}

	// Set property ‘LocationName’:
	if typedInput.LocationName != nil {
		locationName := *typedInput.LocationName
		location.LocationName = &locationName
	}

	// No error
	return nil
}

// AssignPropertiesFromLocation populates our Location from the provided source Location
func (location *Location) AssignPropertiesFromLocation(source *v1alpha1api20210515storage.Location) error {

	// FailoverPriority
	if source.FailoverPriority != nil {
		failoverPriority := *source.FailoverPriority
		location.FailoverPriority = &failoverPriority
	} else {
		location.FailoverPriority = nil
	}

	// IsZoneRedundant
	if source.IsZoneRedundant != nil {
		isZoneRedundant := *source.IsZoneRedundant
		location.IsZoneRedundant = &isZoneRedundant
	} else {
		location.IsZoneRedundant = nil
	}

	// LocationName
	if source.LocationName != nil {
		locationName := *source.LocationName
		location.LocationName = &locationName
	} else {
		location.LocationName = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLocation populates the provided destination Location from our Location
func (location *Location) AssignPropertiesToLocation(destination *v1alpha1api20210515storage.Location) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// FailoverPriority
	if location.FailoverPriority != nil {
		failoverPriority := *location.FailoverPriority
		destination.FailoverPriority = &failoverPriority
	} else {
		destination.FailoverPriority = nil
	}

	// IsZoneRedundant
	if location.IsZoneRedundant != nil {
		isZoneRedundant := *location.IsZoneRedundant
		destination.IsZoneRedundant = &isZoneRedundant
	} else {
		destination.IsZoneRedundant = nil
	}

	// LocationName
	if location.LocationName != nil {
		locationName := *location.LocationName
		destination.LocationName = &locationName
	} else {
		destination.LocationName = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type Location_Status struct {
	//DocumentEndpoint: The connection endpoint for the specific region. Example:
	//https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
	DocumentEndpoint *string `json:"documentEndpoint,omitempty"`

	//FailoverPriority: The failover priority of the region. A failover priority of 0
	//indicates a write region. The maximum value for a failover priority = (total
	//number of regions - 1). Failover priority values must be unique for each of the
	//regions in which the database account exists.
	FailoverPriority *int `json:"failoverPriority,omitempty"`

	//Id: The unique identifier of the region within the database account. Example:
	//&lt;accountName&gt;-&lt;locationName&gt;.
	Id *string `json:"id,omitempty"`

	//IsZoneRedundant: Flag to indicate whether or not this region is an
	//AvailabilityZone region
	IsZoneRedundant *bool `json:"isZoneRedundant,omitempty"`

	//LocationName: The name of the region.
	LocationName      *string `json:"locationName,omitempty"`
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

var _ genruntime.FromARMConverter = &Location_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (locationStatus *Location_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &Location_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (locationStatus *Location_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Location_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Location_StatusARM, got %T", armInput)
	}

	// Set property ‘DocumentEndpoint’:
	if typedInput.DocumentEndpoint != nil {
		documentEndpoint := *typedInput.DocumentEndpoint
		locationStatus.DocumentEndpoint = &documentEndpoint
	}

	// Set property ‘FailoverPriority’:
	if typedInput.FailoverPriority != nil {
		failoverPriority := *typedInput.FailoverPriority
		locationStatus.FailoverPriority = &failoverPriority
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		locationStatus.Id = &id
	}

	// Set property ‘IsZoneRedundant’:
	if typedInput.IsZoneRedundant != nil {
		isZoneRedundant := *typedInput.IsZoneRedundant
		locationStatus.IsZoneRedundant = &isZoneRedundant
	}

	// Set property ‘LocationName’:
	if typedInput.LocationName != nil {
		locationName := *typedInput.LocationName
		locationStatus.LocationName = &locationName
	}

	// Set property ‘ProvisioningState’:
	if typedInput.ProvisioningState != nil {
		provisioningState := *typedInput.ProvisioningState
		locationStatus.ProvisioningState = &provisioningState
	}

	// No error
	return nil
}

// AssignPropertiesFromLocationStatus populates our Location_Status from the provided source Location_Status
func (locationStatus *Location_Status) AssignPropertiesFromLocationStatus(source *v1alpha1api20210515storage.Location_Status) error {

	// DocumentEndpoint
	if source.DocumentEndpoint != nil {
		documentEndpoint := *source.DocumentEndpoint
		locationStatus.DocumentEndpoint = &documentEndpoint
	} else {
		locationStatus.DocumentEndpoint = nil
	}

	// FailoverPriority
	if source.FailoverPriority != nil {
		failoverPriority := *source.FailoverPriority
		locationStatus.FailoverPriority = &failoverPriority
	} else {
		locationStatus.FailoverPriority = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		locationStatus.Id = &id
	} else {
		locationStatus.Id = nil
	}

	// IsZoneRedundant
	if source.IsZoneRedundant != nil {
		isZoneRedundant := *source.IsZoneRedundant
		locationStatus.IsZoneRedundant = &isZoneRedundant
	} else {
		locationStatus.IsZoneRedundant = nil
	}

	// LocationName
	if source.LocationName != nil {
		locationName := *source.LocationName
		locationStatus.LocationName = &locationName
	} else {
		locationStatus.LocationName = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		locationStatus.ProvisioningState = &provisioningState
	} else {
		locationStatus.ProvisioningState = nil
	}

	// No error
	return nil
}

// AssignPropertiesToLocationStatus populates the provided destination Location_Status from our Location_Status
func (locationStatus *Location_Status) AssignPropertiesToLocationStatus(destination *v1alpha1api20210515storage.Location_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DocumentEndpoint
	if locationStatus.DocumentEndpoint != nil {
		documentEndpoint := *locationStatus.DocumentEndpoint
		destination.DocumentEndpoint = &documentEndpoint
	} else {
		destination.DocumentEndpoint = nil
	}

	// FailoverPriority
	if locationStatus.FailoverPriority != nil {
		failoverPriority := *locationStatus.FailoverPriority
		destination.FailoverPriority = &failoverPriority
	} else {
		destination.FailoverPriority = nil
	}

	// Id
	if locationStatus.Id != nil {
		id := *locationStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// IsZoneRedundant
	if locationStatus.IsZoneRedundant != nil {
		isZoneRedundant := *locationStatus.IsZoneRedundant
		destination.IsZoneRedundant = &isZoneRedundant
	} else {
		destination.IsZoneRedundant = nil
	}

	// LocationName
	if locationStatus.LocationName != nil {
		locationName := *locationStatus.LocationName
		destination.LocationName = &locationName
	} else {
		destination.LocationName = nil
	}

	// ProvisioningState
	if locationStatus.ProvisioningState != nil {
		provisioningState := *locationStatus.ProvisioningState
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/ManagedServiceIdentity
type ManagedServiceIdentity struct {
	//Type: The type of identity used for the resource. The type
	//'SystemAssigned,UserAssigned' includes both an implicitly created identity and a
	//set of user assigned identities. The type 'None' will remove any identities from
	//the service.
	Type *ManagedServiceIdentityType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedServiceIdentity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (managedServiceIdentity *ManagedServiceIdentity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if managedServiceIdentity == nil {
		return nil, nil
	}
	var result ManagedServiceIdentityARM

	// Set property ‘Type’:
	if managedServiceIdentity.Type != nil {
		typeVar := *managedServiceIdentity.Type
		result.Type = &typeVar
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (managedServiceIdentity *ManagedServiceIdentity) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedServiceIdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (managedServiceIdentity *ManagedServiceIdentity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedServiceIdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedServiceIdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		managedServiceIdentity.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedServiceIdentity populates our ManagedServiceIdentity from the provided source ManagedServiceIdentity
func (managedServiceIdentity *ManagedServiceIdentity) AssignPropertiesFromManagedServiceIdentity(source *v1alpha1api20210515storage.ManagedServiceIdentity) error {

	// Type
	if source.Type != nil {
		typeVar := ManagedServiceIdentityType(*source.Type)
		managedServiceIdentity.Type = &typeVar
	} else {
		managedServiceIdentity.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedServiceIdentity populates the provided destination ManagedServiceIdentity from our ManagedServiceIdentity
func (managedServiceIdentity *ManagedServiceIdentity) AssignPropertiesToManagedServiceIdentity(destination *v1alpha1api20210515storage.ManagedServiceIdentity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	if managedServiceIdentity.Type != nil {
		typeVar := string(*managedServiceIdentity.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type ManagedServiceIdentity_Status struct {
	//PrincipalId: The principal id of the system assigned identity. This property
	//will only be provided for a system assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant id of the system assigned identity. This property will only
	//be provided for a system assigned identity.
	TenantId *string `json:"tenantId,omitempty"`

	//Type: The type of identity used for the resource. The type
	//'SystemAssigned,UserAssigned' includes both an implicitly created identity and a
	//set of user assigned identities. The type 'None' will remove any identities from
	//the service.
	Type *ManagedServiceIdentityStatusType `json:"type,omitempty"`

	//UserAssignedIdentities: The list of user identities associated with resource.
	//The user identity dictionary key references will be ARM resource ids in the
	//form:
	//'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]ManagedServiceIdentity_Status_UserAssignedIdentities `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagedServiceIdentity_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (managedServiceIdentityStatus *ManagedServiceIdentity_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedServiceIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (managedServiceIdentityStatus *ManagedServiceIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedServiceIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedServiceIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		managedServiceIdentityStatus.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		managedServiceIdentityStatus.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		managedServiceIdentityStatus.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		managedServiceIdentityStatus.UserAssignedIdentities = make(map[string]ManagedServiceIdentity_Status_UserAssignedIdentities)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 ManagedServiceIdentity_Status_UserAssignedIdentities
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			managedServiceIdentityStatus.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedServiceIdentityStatus populates our ManagedServiceIdentity_Status from the provided source ManagedServiceIdentity_Status
func (managedServiceIdentityStatus *ManagedServiceIdentity_Status) AssignPropertiesFromManagedServiceIdentityStatus(source *v1alpha1api20210515storage.ManagedServiceIdentity_Status) error {

	// PrincipalId
	if source.PrincipalId != nil {
		principalId := *source.PrincipalId
		managedServiceIdentityStatus.PrincipalId = &principalId
	} else {
		managedServiceIdentityStatus.PrincipalId = nil
	}

	// TenantId
	if source.TenantId != nil {
		tenantId := *source.TenantId
		managedServiceIdentityStatus.TenantId = &tenantId
	} else {
		managedServiceIdentityStatus.TenantId = nil
	}

	// Type
	if source.Type != nil {
		typeVar := ManagedServiceIdentityStatusType(*source.Type)
		managedServiceIdentityStatus.Type = &typeVar
	} else {
		managedServiceIdentityStatus.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]ManagedServiceIdentity_Status_UserAssignedIdentities, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity ManagedServiceIdentity_Status_UserAssignedIdentities
			err := userAssignedIdentity.AssignPropertiesFromManagedServiceIdentityStatusUserAssignedIdentities(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "populating UserAssignedIdentities from UserAssignedIdentities, calling AssignPropertiesFromManagedServiceIdentityStatusUserAssignedIdentities()")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		managedServiceIdentityStatus.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		managedServiceIdentityStatus.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedServiceIdentityStatus populates the provided destination ManagedServiceIdentity_Status from our ManagedServiceIdentity_Status
func (managedServiceIdentityStatus *ManagedServiceIdentity_Status) AssignPropertiesToManagedServiceIdentityStatus(destination *v1alpha1api20210515storage.ManagedServiceIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	if managedServiceIdentityStatus.PrincipalId != nil {
		principalId := *managedServiceIdentityStatus.PrincipalId
		destination.PrincipalId = &principalId
	} else {
		destination.PrincipalId = nil
	}

	// TenantId
	if managedServiceIdentityStatus.TenantId != nil {
		tenantId := *managedServiceIdentityStatus.TenantId
		destination.TenantId = &tenantId
	} else {
		destination.TenantId = nil
	}

	// Type
	if managedServiceIdentityStatus.Type != nil {
		typeVar := string(*managedServiceIdentityStatus.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if managedServiceIdentityStatus.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20210515storage.ManagedServiceIdentity_Status_UserAssignedIdentities, len(managedServiceIdentityStatus.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range managedServiceIdentityStatus.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20210515storage.ManagedServiceIdentity_Status_UserAssignedIdentities
			err := userAssignedIdentityValue.AssignPropertiesToManagedServiceIdentityStatusUserAssignedIdentities(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "populating UserAssignedIdentities from UserAssignedIdentities, calling AssignPropertiesToManagedServiceIdentityStatusUserAssignedIdentities()")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type NetworkAclBypass_Status string

const (
	NetworkAclBypass_StatusAzureServices = NetworkAclBypass_Status("AzureServices")
	NetworkAclBypass_StatusNone          = NetworkAclBypass_Status("None")
)

//Generated from:
type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	//Id: Fully qualified resource ID for the resource. Ex -
	///subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SubResourceEmbedded{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		privateEndpointConnectionStatusSubResourceEmbedded.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(source *v1alpha1api20210515storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		privateEndpointConnectionStatusSubResourceEmbedded.Id = &id
	} else {
		privateEndpointConnectionStatusSubResourceEmbedded.Id = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (privateEndpointConnectionStatusSubResourceEmbedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(destination *v1alpha1api20210515storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if privateEndpointConnectionStatusSubResourceEmbedded.Id != nil {
		id := *privateEndpointConnectionStatusSubResourceEmbedded.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type PublicNetworkAccess_Status string

const (
	PublicNetworkAccess_StatusDisabled = PublicNetworkAccess_Status("Disabled")
	PublicNetworkAccess_StatusEnabled  = PublicNetworkAccess_Status("Enabled")
)

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/VirtualNetworkRule
type VirtualNetworkRule struct {
	//IgnoreMissingVNetServiceEndpoint: Create firewall rule before the virtual
	//network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `json:"ignoreMissingVNetServiceEndpoint,omitempty"`

	//Reference: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

var _ genruntime.ARMTransformer = &VirtualNetworkRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (virtualNetworkRule *VirtualNetworkRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if virtualNetworkRule == nil {
		return nil, nil
	}
	var result VirtualNetworkRuleARM

	// Set property ‘Id’:
	if virtualNetworkRule.Reference != nil {
		referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(*virtualNetworkRule.Reference)
		if err != nil {
			return nil, err
		}
		reference := referenceARMID
		result.Id = &reference
	}

	// Set property ‘IgnoreMissingVNetServiceEndpoint’:
	if virtualNetworkRule.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *virtualNetworkRule.IgnoreMissingVNetServiceEndpoint
		result.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkRule *VirtualNetworkRule) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkRule *VirtualNetworkRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRuleARM, got %T", armInput)
	}

	// Set property ‘IgnoreMissingVNetServiceEndpoint’:
	if typedInput.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *typedInput.IgnoreMissingVNetServiceEndpoint
		virtualNetworkRule.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	}

	// no assignment for property ‘Reference’

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRule populates our VirtualNetworkRule from the provided source VirtualNetworkRule
func (virtualNetworkRule *VirtualNetworkRule) AssignPropertiesFromVirtualNetworkRule(source *v1alpha1api20210515storage.VirtualNetworkRule) error {

	// IgnoreMissingVNetServiceEndpoint
	if source.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *source.IgnoreMissingVNetServiceEndpoint
		virtualNetworkRule.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	} else {
		virtualNetworkRule.IgnoreMissingVNetServiceEndpoint = nil
	}

	// Reference
	if source.Reference != nil {
		reference := source.Reference.Copy()
		virtualNetworkRule.Reference = &reference
	} else {
		virtualNetworkRule.Reference = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRule populates the provided destination VirtualNetworkRule from our VirtualNetworkRule
func (virtualNetworkRule *VirtualNetworkRule) AssignPropertiesToVirtualNetworkRule(destination *v1alpha1api20210515storage.VirtualNetworkRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IgnoreMissingVNetServiceEndpoint
	if virtualNetworkRule.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *virtualNetworkRule.IgnoreMissingVNetServiceEndpoint
		destination.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	} else {
		destination.IgnoreMissingVNetServiceEndpoint = nil
	}

	// Reference
	if virtualNetworkRule.Reference != nil {
		reference := virtualNetworkRule.Reference.Copy()
		destination.Reference = &reference
	} else {
		destination.Reference = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type VirtualNetworkRule_Status struct {
	//Id: Resource ID of a subnet, for example:
	///subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	Id *string `json:"id,omitempty"`

	//IgnoreMissingVNetServiceEndpoint: Create firewall rule before the virtual
	//network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `json:"ignoreMissingVNetServiceEndpoint,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualNetworkRule_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualNetworkRuleStatus *VirtualNetworkRule_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualNetworkRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualNetworkRuleStatus *VirtualNetworkRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualNetworkRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualNetworkRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		virtualNetworkRuleStatus.Id = &id
	}

	// Set property ‘IgnoreMissingVNetServiceEndpoint’:
	if typedInput.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *typedInput.IgnoreMissingVNetServiceEndpoint
		virtualNetworkRuleStatus.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualNetworkRuleStatus populates our VirtualNetworkRule_Status from the provided source VirtualNetworkRule_Status
func (virtualNetworkRuleStatus *VirtualNetworkRule_Status) AssignPropertiesFromVirtualNetworkRuleStatus(source *v1alpha1api20210515storage.VirtualNetworkRule_Status) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		virtualNetworkRuleStatus.Id = &id
	} else {
		virtualNetworkRuleStatus.Id = nil
	}

	// IgnoreMissingVNetServiceEndpoint
	if source.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *source.IgnoreMissingVNetServiceEndpoint
		virtualNetworkRuleStatus.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	} else {
		virtualNetworkRuleStatus.IgnoreMissingVNetServiceEndpoint = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualNetworkRuleStatus populates the provided destination VirtualNetworkRule_Status from our VirtualNetworkRule_Status
func (virtualNetworkRuleStatus *VirtualNetworkRule_Status) AssignPropertiesToVirtualNetworkRuleStatus(destination *v1alpha1api20210515storage.VirtualNetworkRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if virtualNetworkRuleStatus.Id != nil {
		id := *virtualNetworkRuleStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// IgnoreMissingVNetServiceEndpoint
	if virtualNetworkRuleStatus.IgnoreMissingVNetServiceEndpoint != nil {
		ignoreMissingVNetServiceEndpoint := *virtualNetworkRuleStatus.IgnoreMissingVNetServiceEndpoint
		destination.IgnoreMissingVNetServiceEndpoint = &ignoreMissingVNetServiceEndpoint
	} else {
		destination.IgnoreMissingVNetServiceEndpoint = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"FullFidelity","WellDefined"}
type AnalyticalStorageConfigurationSchemaType string

const (
	AnalyticalStorageConfigurationSchemaTypeFullFidelity = AnalyticalStorageConfigurationSchemaType("FullFidelity")
	AnalyticalStorageConfigurationSchemaTypeWellDefined  = AnalyticalStorageConfigurationSchemaType("WellDefined")
)

//Generated from:
type AnalyticalStorageSchemaType_Status string

const (
	AnalyticalStorageSchemaType_StatusFullFidelity = AnalyticalStorageSchemaType_Status("FullFidelity")
	AnalyticalStorageSchemaType_StatusWellDefined  = AnalyticalStorageSchemaType_Status("WellDefined")
)

// +kubebuilder:validation:Enum={"3.2","3.6","4.0"}
type ApiPropertiesServerVersion string

const (
	ApiPropertiesServerVersion32 = ApiPropertiesServerVersion("3.2")
	ApiPropertiesServerVersion36 = ApiPropertiesServerVersion("3.6")
	ApiPropertiesServerVersion40 = ApiPropertiesServerVersion("4.0")
)

type ApiPropertiesStatusServerVersion string

const (
	ApiPropertiesStatusServerVersion32 = ApiPropertiesStatusServerVersion("3.2")
	ApiPropertiesStatusServerVersion36 = ApiPropertiesStatusServerVersion("3.6")
	ApiPropertiesStatusServerVersion40 = ApiPropertiesStatusServerVersion("4.0")
)

//Generated from:
type BackupPolicyType_Status string

const (
	BackupPolicyType_StatusContinuous = BackupPolicyType_Status("Continuous")
	BackupPolicyType_StatusPeriodic   = BackupPolicyType_Status("Periodic")
)

// +kubebuilder:validation:Enum={"BoundedStaleness","ConsistentPrefix","Eventual","Session","Strong"}
type ConsistencyPolicyDefaultConsistencyLevel string

const (
	ConsistencyPolicyDefaultConsistencyLevelBoundedStaleness = ConsistencyPolicyDefaultConsistencyLevel("BoundedStaleness")
	ConsistencyPolicyDefaultConsistencyLevelConsistentPrefix = ConsistencyPolicyDefaultConsistencyLevel("ConsistentPrefix")
	ConsistencyPolicyDefaultConsistencyLevelEventual         = ConsistencyPolicyDefaultConsistencyLevel("Eventual")
	ConsistencyPolicyDefaultConsistencyLevelSession          = ConsistencyPolicyDefaultConsistencyLevel("Session")
	ConsistencyPolicyDefaultConsistencyLevelStrong           = ConsistencyPolicyDefaultConsistencyLevel("Strong")
)

type ConsistencyPolicyStatusDefaultConsistencyLevel string

const (
	ConsistencyPolicyStatusDefaultConsistencyLevelBoundedStaleness = ConsistencyPolicyStatusDefaultConsistencyLevel("BoundedStaleness")
	ConsistencyPolicyStatusDefaultConsistencyLevelConsistentPrefix = ConsistencyPolicyStatusDefaultConsistencyLevel("ConsistentPrefix")
	ConsistencyPolicyStatusDefaultConsistencyLevelEventual         = ConsistencyPolicyStatusDefaultConsistencyLevel("Eventual")
	ConsistencyPolicyStatusDefaultConsistencyLevelSession          = ConsistencyPolicyStatusDefaultConsistencyLevel("Session")
	ConsistencyPolicyStatusDefaultConsistencyLevelStrong           = ConsistencyPolicyStatusDefaultConsistencyLevel("Strong")
)

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/ContinuousModeBackupPolicy
type ContinuousModeBackupPolicy struct {
	// +kubebuilder:validation:Required
	Type ContinuousModeBackupPolicyType `json:"type"`
}

var _ genruntime.ARMTransformer = &ContinuousModeBackupPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (continuousModeBackupPolicy *ContinuousModeBackupPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if continuousModeBackupPolicy == nil {
		return nil, nil
	}
	var result ContinuousModeBackupPolicyARM

	// Set property ‘Type’:
	result.Type = continuousModeBackupPolicy.Type
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (continuousModeBackupPolicy *ContinuousModeBackupPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ContinuousModeBackupPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (continuousModeBackupPolicy *ContinuousModeBackupPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ContinuousModeBackupPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ContinuousModeBackupPolicyARM, got %T", armInput)
	}

	// Set property ‘Type’:
	continuousModeBackupPolicy.Type = typedInput.Type

	// No error
	return nil
}

// AssignPropertiesFromContinuousModeBackupPolicy populates our ContinuousModeBackupPolicy from the provided source ContinuousModeBackupPolicy
func (continuousModeBackupPolicy *ContinuousModeBackupPolicy) AssignPropertiesFromContinuousModeBackupPolicy(source *v1alpha1api20210515storage.ContinuousModeBackupPolicy) error {

	// Type
	if source.Type != nil {
		continuousModeBackupPolicy.Type = ContinuousModeBackupPolicyType(*source.Type)
	} else {
		continuousModeBackupPolicy.Type = ""
	}

	// No error
	return nil
}

// AssignPropertiesToContinuousModeBackupPolicy populates the provided destination ContinuousModeBackupPolicy from our ContinuousModeBackupPolicy
func (continuousModeBackupPolicy *ContinuousModeBackupPolicy) AssignPropertiesToContinuousModeBackupPolicy(destination *v1alpha1api20210515storage.ContinuousModeBackupPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	typeVar := string(continuousModeBackupPolicy.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ManagedServiceIdentity_Status_UserAssignedIdentities struct {
	//ClientId: The client id of user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal id of user assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &ManagedServiceIdentity_Status_UserAssignedIdentities{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (managedServiceIdentityStatusUserAssignedIdentities *ManagedServiceIdentity_Status_UserAssignedIdentities) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedServiceIdentity_Status_UserAssignedIdentitiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (managedServiceIdentityStatusUserAssignedIdentities *ManagedServiceIdentity_Status_UserAssignedIdentities) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedServiceIdentity_Status_UserAssignedIdentitiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedServiceIdentity_Status_UserAssignedIdentitiesARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		managedServiceIdentityStatusUserAssignedIdentities.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		managedServiceIdentityStatusUserAssignedIdentities.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromManagedServiceIdentityStatusUserAssignedIdentities populates our ManagedServiceIdentity_Status_UserAssignedIdentities from the provided source ManagedServiceIdentity_Status_UserAssignedIdentities
func (managedServiceIdentityStatusUserAssignedIdentities *ManagedServiceIdentity_Status_UserAssignedIdentities) AssignPropertiesFromManagedServiceIdentityStatusUserAssignedIdentities(source *v1alpha1api20210515storage.ManagedServiceIdentity_Status_UserAssignedIdentities) error {

	// ClientId
	if source.ClientId != nil {
		clientId := *source.ClientId
		managedServiceIdentityStatusUserAssignedIdentities.ClientId = &clientId
	} else {
		managedServiceIdentityStatusUserAssignedIdentities.ClientId = nil
	}

	// PrincipalId
	if source.PrincipalId != nil {
		principalId := *source.PrincipalId
		managedServiceIdentityStatusUserAssignedIdentities.PrincipalId = &principalId
	} else {
		managedServiceIdentityStatusUserAssignedIdentities.PrincipalId = nil
	}

	// No error
	return nil
}

// AssignPropertiesToManagedServiceIdentityStatusUserAssignedIdentities populates the provided destination ManagedServiceIdentity_Status_UserAssignedIdentities from our ManagedServiceIdentity_Status_UserAssignedIdentities
func (managedServiceIdentityStatusUserAssignedIdentities *ManagedServiceIdentity_Status_UserAssignedIdentities) AssignPropertiesToManagedServiceIdentityStatusUserAssignedIdentities(destination *v1alpha1api20210515storage.ManagedServiceIdentity_Status_UserAssignedIdentities) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	if managedServiceIdentityStatusUserAssignedIdentities.ClientId != nil {
		clientId := *managedServiceIdentityStatusUserAssignedIdentities.ClientId
		destination.ClientId = &clientId
	} else {
		destination.ClientId = nil
	}

	// PrincipalId
	if managedServiceIdentityStatusUserAssignedIdentities.PrincipalId != nil {
		principalId := *managedServiceIdentityStatusUserAssignedIdentities.PrincipalId
		destination.PrincipalId = &principalId
	} else {
		destination.PrincipalId = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/PeriodicModeBackupPolicy
type PeriodicModeBackupPolicy struct {
	//PeriodicModeProperties: Configuration values for periodic mode backup
	PeriodicModeProperties *PeriodicModeProperties `json:"periodicModeProperties,omitempty"`

	// +kubebuilder:validation:Required
	Type PeriodicModeBackupPolicyType `json:"type"`
}

var _ genruntime.ARMTransformer = &PeriodicModeBackupPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (periodicModeBackupPolicy *PeriodicModeBackupPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if periodicModeBackupPolicy == nil {
		return nil, nil
	}
	var result PeriodicModeBackupPolicyARM

	// Set property ‘PeriodicModeProperties’:
	if periodicModeBackupPolicy.PeriodicModeProperties != nil {
		periodicModePropertiesARM, err := (*periodicModeBackupPolicy.PeriodicModeProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		periodicModeProperties := periodicModePropertiesARM.(PeriodicModePropertiesARM)
		result.PeriodicModeProperties = &periodicModeProperties
	}

	// Set property ‘Type’:
	result.Type = periodicModeBackupPolicy.Type
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (periodicModeBackupPolicy *PeriodicModeBackupPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PeriodicModeBackupPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (periodicModeBackupPolicy *PeriodicModeBackupPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PeriodicModeBackupPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PeriodicModeBackupPolicyARM, got %T", armInput)
	}

	// Set property ‘PeriodicModeProperties’:
	if typedInput.PeriodicModeProperties != nil {
		var periodicModeProperties1 PeriodicModeProperties
		err := periodicModeProperties1.PopulateFromARM(owner, *typedInput.PeriodicModeProperties)
		if err != nil {
			return err
		}
		periodicModeProperties := periodicModeProperties1
		periodicModeBackupPolicy.PeriodicModeProperties = &periodicModeProperties
	}

	// Set property ‘Type’:
	periodicModeBackupPolicy.Type = typedInput.Type

	// No error
	return nil
}

// AssignPropertiesFromPeriodicModeBackupPolicy populates our PeriodicModeBackupPolicy from the provided source PeriodicModeBackupPolicy
func (periodicModeBackupPolicy *PeriodicModeBackupPolicy) AssignPropertiesFromPeriodicModeBackupPolicy(source *v1alpha1api20210515storage.PeriodicModeBackupPolicy) error {

	// PeriodicModeProperties
	if source.PeriodicModeProperties != nil {
		var periodicModeProperty PeriodicModeProperties
		err := periodicModeProperty.AssignPropertiesFromPeriodicModeProperties(source.PeriodicModeProperties)
		if err != nil {
			return errors.Wrap(err, "populating PeriodicModeProperties from PeriodicModeProperties, calling AssignPropertiesFromPeriodicModeProperties()")
		}
		periodicModeBackupPolicy.PeriodicModeProperties = &periodicModeProperty
	} else {
		periodicModeBackupPolicy.PeriodicModeProperties = nil
	}

	// Type
	if source.Type != nil {
		periodicModeBackupPolicy.Type = PeriodicModeBackupPolicyType(*source.Type)
	} else {
		periodicModeBackupPolicy.Type = ""
	}

	// No error
	return nil
}

// AssignPropertiesToPeriodicModeBackupPolicy populates the provided destination PeriodicModeBackupPolicy from our PeriodicModeBackupPolicy
func (periodicModeBackupPolicy *PeriodicModeBackupPolicy) AssignPropertiesToPeriodicModeBackupPolicy(destination *v1alpha1api20210515storage.PeriodicModeBackupPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PeriodicModeProperties
	if periodicModeBackupPolicy.PeriodicModeProperties != nil {
		var periodicModeProperty v1alpha1api20210515storage.PeriodicModeProperties
		err := (*periodicModeBackupPolicy.PeriodicModeProperties).AssignPropertiesToPeriodicModeProperties(&periodicModeProperty)
		if err != nil {
			return errors.Wrap(err, "populating PeriodicModeProperties from PeriodicModeProperties, calling AssignPropertiesToPeriodicModeProperties()")
		}
		destination.PeriodicModeProperties = &periodicModeProperty
	} else {
		destination.PeriodicModeProperties = nil
	}

	// Type
	typeVar := string(periodicModeBackupPolicy.Type)
	destination.Type = &typeVar

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Continuous"}
type ContinuousModeBackupPolicyType string

const ContinuousModeBackupPolicyTypeContinuous = ContinuousModeBackupPolicyType("Continuous")

// +kubebuilder:validation:Enum={"Periodic"}
type PeriodicModeBackupPolicyType string

const PeriodicModeBackupPolicyTypePeriodic = PeriodicModeBackupPolicyType("Periodic")

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/PeriodicModeProperties
type PeriodicModeProperties struct {
	// +kubebuilder:validation:Minimum=0
	//BackupIntervalInMinutes: An integer representing the interval in minutes between
	//two backups
	BackupIntervalInMinutes *int `json:"backupIntervalInMinutes,omitempty"`

	// +kubebuilder:validation:Minimum=0
	//BackupRetentionIntervalInHours: An integer representing the time (in hours) that
	//each backup is retained
	BackupRetentionIntervalInHours *int `json:"backupRetentionIntervalInHours,omitempty"`
}

var _ genruntime.ARMTransformer = &PeriodicModeProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (periodicModeProperties *PeriodicModeProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if periodicModeProperties == nil {
		return nil, nil
	}
	var result PeriodicModePropertiesARM

	// Set property ‘BackupIntervalInMinutes’:
	if periodicModeProperties.BackupIntervalInMinutes != nil {
		backupIntervalInMinutes := *periodicModeProperties.BackupIntervalInMinutes
		result.BackupIntervalInMinutes = &backupIntervalInMinutes
	}

	// Set property ‘BackupRetentionIntervalInHours’:
	if periodicModeProperties.BackupRetentionIntervalInHours != nil {
		backupRetentionIntervalInHours := *periodicModeProperties.BackupRetentionIntervalInHours
		result.BackupRetentionIntervalInHours = &backupRetentionIntervalInHours
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (periodicModeProperties *PeriodicModeProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PeriodicModePropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (periodicModeProperties *PeriodicModeProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PeriodicModePropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PeriodicModePropertiesARM, got %T", armInput)
	}

	// Set property ‘BackupIntervalInMinutes’:
	if typedInput.BackupIntervalInMinutes != nil {
		backupIntervalInMinutes := *typedInput.BackupIntervalInMinutes
		periodicModeProperties.BackupIntervalInMinutes = &backupIntervalInMinutes
	}

	// Set property ‘BackupRetentionIntervalInHours’:
	if typedInput.BackupRetentionIntervalInHours != nil {
		backupRetentionIntervalInHours := *typedInput.BackupRetentionIntervalInHours
		periodicModeProperties.BackupRetentionIntervalInHours = &backupRetentionIntervalInHours
	}

	// No error
	return nil
}

// AssignPropertiesFromPeriodicModeProperties populates our PeriodicModeProperties from the provided source PeriodicModeProperties
func (periodicModeProperties *PeriodicModeProperties) AssignPropertiesFromPeriodicModeProperties(source *v1alpha1api20210515storage.PeriodicModeProperties) error {

	// BackupIntervalInMinutes
	if source.BackupIntervalInMinutes != nil {
		backupIntervalInMinute := *source.BackupIntervalInMinutes
		periodicModeProperties.BackupIntervalInMinutes = &backupIntervalInMinute
	} else {
		periodicModeProperties.BackupIntervalInMinutes = nil
	}

	// BackupRetentionIntervalInHours
	if source.BackupRetentionIntervalInHours != nil {
		backupRetentionIntervalInHour := *source.BackupRetentionIntervalInHours
		periodicModeProperties.BackupRetentionIntervalInHours = &backupRetentionIntervalInHour
	} else {
		periodicModeProperties.BackupRetentionIntervalInHours = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPeriodicModeProperties populates the provided destination PeriodicModeProperties from our PeriodicModeProperties
func (periodicModeProperties *PeriodicModeProperties) AssignPropertiesToPeriodicModeProperties(destination *v1alpha1api20210515storage.PeriodicModeProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// BackupIntervalInMinutes
	if periodicModeProperties.BackupIntervalInMinutes != nil {
		backupIntervalInMinute := *periodicModeProperties.BackupIntervalInMinutes
		destination.BackupIntervalInMinutes = &backupIntervalInMinute
	} else {
		destination.BackupIntervalInMinutes = nil
	}

	// BackupRetentionIntervalInHours
	if periodicModeProperties.BackupRetentionIntervalInHours != nil {
		backupRetentionIntervalInHour := *periodicModeProperties.BackupRetentionIntervalInHours
		destination.BackupRetentionIntervalInHours = &backupRetentionIntervalInHour
	} else {
		destination.BackupRetentionIntervalInHours = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&DatabaseAccount{}, &DatabaseAccountList{})
}
