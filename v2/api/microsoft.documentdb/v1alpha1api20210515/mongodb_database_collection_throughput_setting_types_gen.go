// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/controller/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources=mongodbdatabasecollectionthroughputsettings,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources={mongodbdatabasecollectionthroughputsettings/status,mongodbdatabasecollectionthroughputsettings/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_mongodbDatabases_collections_throughputSettings
type MongodbDatabaseCollectionThroughputSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec `json:"spec,omitempty"`
	Status            ThroughputSettingsGetResults_Status                                `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MongodbDatabaseCollectionThroughputSetting{}

// GetConditions returns the conditions of the resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) GetConditions() conditions.Conditions {
	return mongodbDatabaseCollectionThroughputSetting.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) SetConditions(conditions conditions.Conditions) {
	mongodbDatabaseCollectionThroughputSetting.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollectionthroughputsetting,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=mongodbdatabasecollectionthroughputsettings,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.mongodbdatabasecollectionthroughputsettings.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &MongodbDatabaseCollectionThroughputSetting{}

// Default applies defaults to the MongodbDatabaseCollectionThroughputSetting resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) Default() {
	mongodbDatabaseCollectionThroughputSetting.defaultImpl()
	var temp interface{} = mongodbDatabaseCollectionThroughputSetting
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultImpl applies the code generated defaults to the MongodbDatabaseCollectionThroughputSetting resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) defaultImpl() {
}

var _ genruntime.KubernetesResource = &MongodbDatabaseCollectionThroughputSetting{}

// AzureName returns the Azure name of the resource (always "default")
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) AzureName() string {
	return "default"
}

// GetResourceKind returns the kind of the resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) GetSpec() genruntime.ConvertibleSpec {
	return &mongodbDatabaseCollectionThroughputSetting.Spec
}

// GetStatus returns the status of this resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) GetStatus() genruntime.ConvertibleStatus {
	return &mongodbDatabaseCollectionThroughputSetting.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections/throughputSettings"
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections/throughputSettings"
}

// NewEmptyStatus returns a new empty (blank) status
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ThroughputSettingsGetResults_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(mongodbDatabaseCollectionThroughputSetting.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: mongodbDatabaseCollectionThroughputSetting.Namespace,
		Name:      mongodbDatabaseCollectionThroughputSetting.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ThroughputSettingsGetResults_Status); ok {
		mongodbDatabaseCollectionThroughputSetting.Status = *st
		return nil
	}

	// Convert status to required version
	var st ThroughputSettingsGetResults_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	mongodbDatabaseCollectionThroughputSetting.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-documentdb-azure-com-v1alpha1api20210515-mongodbdatabasecollectionthroughputsetting,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=mongodbdatabasecollectionthroughputsettings,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.mongodbdatabasecollectionthroughputsettings.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &MongodbDatabaseCollectionThroughputSetting{}

// ValidateCreate validates the creation of the resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) ValidateCreate() error {
	validations := mongodbDatabaseCollectionThroughputSetting.createValidations()
	var temp interface{} = mongodbDatabaseCollectionThroughputSetting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) ValidateDelete() error {
	validations := mongodbDatabaseCollectionThroughputSetting.deleteValidations()
	var temp interface{} = mongodbDatabaseCollectionThroughputSetting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) ValidateUpdate(old runtime.Object) error {
	validations := mongodbDatabaseCollectionThroughputSetting.updateValidations()
	var temp interface{} = mongodbDatabaseCollectionThroughputSetting
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) createValidations() []func() error {
	return []func() error{mongodbDatabaseCollectionThroughputSetting.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return mongodbDatabaseCollectionThroughputSetting.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&mongodbDatabaseCollectionThroughputSetting.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromMongodbDatabaseCollectionThroughputSetting populates our MongodbDatabaseCollectionThroughputSetting from the provided source MongodbDatabaseCollectionThroughputSetting
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) AssignPropertiesFromMongodbDatabaseCollectionThroughputSetting(source *v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting) error {

	// Spec
	var spec DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec()")
	}
	mongodbDatabaseCollectionThroughputSetting.Spec = spec

	// Status
	var status ThroughputSettingsGetResults_Status
	err = status.AssignPropertiesFromThroughputSettingsGetResultsStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromThroughputSettingsGetResultsStatus()")
	}
	mongodbDatabaseCollectionThroughputSetting.Status = status

	// No error
	return nil
}

// AssignPropertiesToMongodbDatabaseCollectionThroughputSetting populates the provided destination MongodbDatabaseCollectionThroughputSetting from our MongodbDatabaseCollectionThroughputSetting
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) AssignPropertiesToMongodbDatabaseCollectionThroughputSetting(destination *v1alpha1api20210515storage.MongodbDatabaseCollectionThroughputSetting) error {

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec
	err := mongodbDatabaseCollectionThroughputSetting.Spec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.ThroughputSettingsGetResults_Status
	err = mongodbDatabaseCollectionThroughputSetting.Status.AssignPropertiesToThroughputSettingsGetResultsStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToThroughputSettingsGetResultsStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (mongodbDatabaseCollectionThroughputSetting *MongodbDatabaseCollectionThroughputSetting) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: mongodbDatabaseCollectionThroughputSetting.Spec.OriginalVersion(),
		Kind:    "MongodbDatabaseCollectionThroughputSetting",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_mongodbDatabases_collections_throughputSettings
type MongodbDatabaseCollectionThroughputSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbDatabaseCollectionThroughputSetting `json:"items"`
}

type DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec struct {
	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.documentdb.azure.com" json:"owner" kind:"MongodbDatabaseCollection"`

	// +kubebuilder:validation:Required
	//Resource: Cosmos DB resource throughput object. Either throughput is required or
	//autoscaleSettings is required, but not both.
	Resource ThroughputSettingsResource `json:"resource"`

	//Tags: Tags are a list of key-value pairs that describe the resource. These tags
	//can be used in viewing and grouping this resource (across resource groups). A
	//maximum of 15 tags can be provided for a resource. Each tag must have a key no
	//greater than 128 characters and value no greater than 256 characters. For
	//example, the default experience for a template type is set with
	//"defaultExperience": "Cassandra". Current "defaultExperience" values also
	//include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec *DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec == nil {
		return nil, nil
	}
	var result DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = DatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpecAPIVersion20210515

	// Set property ‘Location’:
	if databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Location != nil {
		location := *databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	resourceARM, err := databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Resource.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Resource = resourceARM.(ThroughputSettingsResourceARM)

	// Set property ‘Tags’:
	if databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = DatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpecTypeMicrosoftDocumentDBDatabaseAccountsMongodbDatabasesCollectionsThroughputSettings
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec *DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec *DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_SpecARM, got %T", armInput)
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Location = &location
	}

	// Set property ‘Owner’:
	databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	var resource ThroughputSettingsResource
	err := resource.PopulateFromARM(owner, typedInput.Properties.Resource)
	if err != nil {
		return err
	}
	databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Resource = resource

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec from the provided source
func (databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec *DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec)
	if ok {
		// Populate our instance from source
		return databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec
func (databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec *DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec)
	if ok {
		// Populate destination from our instance
		return databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec{}
	err := databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec populates our DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec from the provided source DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec
func (databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec *DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) AssignPropertiesFromDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec(source *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) error {

	// Location
	if source.Location != nil {
		location := *source.Location
		databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Location = &location
	} else {
		databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Location = nil
	}

	// Owner
	databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Owner = source.Owner.Copy()

	// Resource
	if source.Resource != nil {
		var resource ThroughputSettingsResource
		err := resource.AssignPropertiesFromThroughputSettingsResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromThroughputSettingsResource()")
		}
		databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Resource = resource
	} else {
		databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Resource = ThroughputSettingsResource{}
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Tags = tagMap

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec populates the provided destination DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec from our DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec
func (databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec *DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) AssignPropertiesToDatabaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec(destination *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Location
	if databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Location != nil {
		location := *databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// OriginalVersion
	destination.OriginalVersion = databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.OriginalVersion()

	// Owner
	destination.Owner = databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Owner.Copy()

	// Resource
	var resource v1alpha1api20210515storage.ThroughputSettingsResource
	err := databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Resource.AssignPropertiesToThroughputSettingsResource(&resource)
	if err != nil {
		return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToThroughputSettingsResource()")
	}
	destination.Resource = &resource

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (databaseAccountsMongodbDatabasesCollectionsThroughputSettingsSpec *DatabaseAccountsMongodbDatabasesCollectionsThroughputSettings_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

//Generated from:
type ThroughputSettingsGetResults_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Name: The name of the ARM resource.
	Name     *string                                          `json:"name,omitempty"`
	Resource *ThroughputSettingsGetProperties_Status_Resource `json:"resource,omitempty"`
	Tags     map[string]string                                `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ThroughputSettingsGetResults_Status{}

// ConvertStatusFrom populates our ThroughputSettingsGetResults_Status from the provided source
func (throughputSettingsGetResultsStatus *ThroughputSettingsGetResults_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.ThroughputSettingsGetResults_Status)
	if ok {
		// Populate our instance from source
		return throughputSettingsGetResultsStatus.AssignPropertiesFromThroughputSettingsGetResultsStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.ThroughputSettingsGetResults_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = throughputSettingsGetResultsStatus.AssignPropertiesFromThroughputSettingsGetResultsStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ThroughputSettingsGetResults_Status
func (throughputSettingsGetResultsStatus *ThroughputSettingsGetResults_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.ThroughputSettingsGetResults_Status)
	if ok {
		// Populate destination from our instance
		return throughputSettingsGetResultsStatus.AssignPropertiesToThroughputSettingsGetResultsStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.ThroughputSettingsGetResults_Status{}
	err := throughputSettingsGetResultsStatus.AssignPropertiesToThroughputSettingsGetResultsStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &ThroughputSettingsGetResults_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (throughputSettingsGetResultsStatus *ThroughputSettingsGetResults_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputSettingsGetResults_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (throughputSettingsGetResultsStatus *ThroughputSettingsGetResults_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputSettingsGetResults_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputSettingsGetResults_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		throughputSettingsGetResultsStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		throughputSettingsGetResultsStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		throughputSettingsGetResultsStatus.Name = &name
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 ThroughputSettingsGetProperties_Status_Resource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			throughputSettingsGetResultsStatus.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		throughputSettingsGetResultsStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			throughputSettingsGetResultsStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		throughputSettingsGetResultsStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputSettingsGetResultsStatus populates our ThroughputSettingsGetResults_Status from the provided source ThroughputSettingsGetResults_Status
func (throughputSettingsGetResultsStatus *ThroughputSettingsGetResults_Status) AssignPropertiesFromThroughputSettingsGetResultsStatus(source *v1alpha1api20210515storage.ThroughputSettingsGetResults_Status) error {

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	throughputSettingsGetResultsStatus.Conditions = conditionList

	// Id
	if source.Id != nil {
		id := *source.Id
		throughputSettingsGetResultsStatus.Id = &id
	} else {
		throughputSettingsGetResultsStatus.Id = nil
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		throughputSettingsGetResultsStatus.Location = &location
	} else {
		throughputSettingsGetResultsStatus.Location = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		throughputSettingsGetResultsStatus.Name = &name
	} else {
		throughputSettingsGetResultsStatus.Name = nil
	}

	// Resource
	if source.Resource != nil {
		var resource ThroughputSettingsGetProperties_Status_Resource
		err := resource.AssignPropertiesFromThroughputSettingsGetPropertiesStatusResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromThroughputSettingsGetPropertiesStatusResource()")
		}
		throughputSettingsGetResultsStatus.Resource = &resource
	} else {
		throughputSettingsGetResultsStatus.Resource = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	throughputSettingsGetResultsStatus.Tags = tagMap

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		throughputSettingsGetResultsStatus.Type = &typeVar
	} else {
		throughputSettingsGetResultsStatus.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToThroughputSettingsGetResultsStatus populates the provided destination ThroughputSettingsGetResults_Status from our ThroughputSettingsGetResults_Status
func (throughputSettingsGetResultsStatus *ThroughputSettingsGetResults_Status) AssignPropertiesToThroughputSettingsGetResultsStatus(destination *v1alpha1api20210515storage.ThroughputSettingsGetResults_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	conditionList := make([]conditions.Condition, len(throughputSettingsGetResultsStatus.Conditions))
	for conditionIndex, conditionItem := range throughputSettingsGetResultsStatus.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// Id
	if throughputSettingsGetResultsStatus.Id != nil {
		id := *throughputSettingsGetResultsStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Location
	if throughputSettingsGetResultsStatus.Location != nil {
		location := *throughputSettingsGetResultsStatus.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Name
	if throughputSettingsGetResultsStatus.Name != nil {
		name := *throughputSettingsGetResultsStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Resource
	if throughputSettingsGetResultsStatus.Resource != nil {
		var resource v1alpha1api20210515storage.ThroughputSettingsGetProperties_Status_Resource
		err := (*throughputSettingsGetResultsStatus.Resource).AssignPropertiesToThroughputSettingsGetPropertiesStatusResource(&resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToThroughputSettingsGetPropertiesStatusResource()")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range throughputSettingsGetResultsStatus.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Type
	if throughputSettingsGetResultsStatus.Type != nil {
		typeVar := *throughputSettingsGetResultsStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type ThroughputSettingsGetProperties_Status_Resource struct {
	//AutoscaleSettings: Cosmos DB resource for autoscale settings. Either throughput
	//is required or autoscaleSettings is required, but not both.
	AutoscaleSettings *AutoscaleSettingsResource_Status `json:"autoscaleSettings,omitempty"`

	//Etag: A system generated property representing the resource etag required for
	//optimistic concurrency control.
	Etag *string `json:"_etag,omitempty"`

	//MinimumThroughput: The minimum throughput of the resource
	MinimumThroughput *string `json:"minimumThroughput,omitempty"`

	//OfferReplacePending: The throughput replace is pending
	OfferReplacePending *string `json:"offerReplacePending,omitempty"`

	//Rid: A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty"`

	//Throughput: Value of the Cosmos DB resource throughput. Either throughput is
	//required or autoscaleSettings is required, but not both.
	Throughput *int `json:"throughput,omitempty"`

	//Ts: A system generated property that denotes the last updated timestamp of the
	//resource.
	Ts *float64 `json:"_ts,omitempty"`
}

var _ genruntime.FromARMConverter = &ThroughputSettingsGetProperties_Status_Resource{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (throughputSettingsGetPropertiesStatusResource *ThroughputSettingsGetProperties_Status_Resource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputSettingsGetProperties_Status_ResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (throughputSettingsGetPropertiesStatusResource *ThroughputSettingsGetProperties_Status_Resource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputSettingsGetProperties_Status_ResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputSettingsGetProperties_Status_ResourceARM, got %T", armInput)
	}

	// Set property ‘AutoscaleSettings’:
	if typedInput.AutoscaleSettings != nil {
		var autoscaleSettings1 AutoscaleSettingsResource_Status
		err := autoscaleSettings1.PopulateFromARM(owner, *typedInput.AutoscaleSettings)
		if err != nil {
			return err
		}
		autoscaleSettings := autoscaleSettings1
		throughputSettingsGetPropertiesStatusResource.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		throughputSettingsGetPropertiesStatusResource.Etag = &etag
	}

	// Set property ‘MinimumThroughput’:
	if typedInput.MinimumThroughput != nil {
		minimumThroughput := *typedInput.MinimumThroughput
		throughputSettingsGetPropertiesStatusResource.MinimumThroughput = &minimumThroughput
	}

	// Set property ‘OfferReplacePending’:
	if typedInput.OfferReplacePending != nil {
		offerReplacePending := *typedInput.OfferReplacePending
		throughputSettingsGetPropertiesStatusResource.OfferReplacePending = &offerReplacePending
	}

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		throughputSettingsGetPropertiesStatusResource.Rid = &rid
	}

	// Set property ‘Throughput’:
	if typedInput.Throughput != nil {
		throughput := *typedInput.Throughput
		throughputSettingsGetPropertiesStatusResource.Throughput = &throughput
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		throughputSettingsGetPropertiesStatusResource.Ts = &ts
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputSettingsGetPropertiesStatusResource populates our ThroughputSettingsGetProperties_Status_Resource from the provided source ThroughputSettingsGetProperties_Status_Resource
func (throughputSettingsGetPropertiesStatusResource *ThroughputSettingsGetProperties_Status_Resource) AssignPropertiesFromThroughputSettingsGetPropertiesStatusResource(source *v1alpha1api20210515storage.ThroughputSettingsGetProperties_Status_Resource) error {

	// AutoscaleSettings
	if source.AutoscaleSettings != nil {
		var autoscaleSetting AutoscaleSettingsResource_Status
		err := autoscaleSetting.AssignPropertiesFromAutoscaleSettingsResourceStatus(source.AutoscaleSettings)
		if err != nil {
			return errors.Wrap(err, "populating AutoscaleSettings from AutoscaleSettings, calling AssignPropertiesFromAutoscaleSettingsResourceStatus()")
		}
		throughputSettingsGetPropertiesStatusResource.AutoscaleSettings = &autoscaleSetting
	} else {
		throughputSettingsGetPropertiesStatusResource.AutoscaleSettings = nil
	}

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		throughputSettingsGetPropertiesStatusResource.Etag = &etag
	} else {
		throughputSettingsGetPropertiesStatusResource.Etag = nil
	}

	// MinimumThroughput
	if source.MinimumThroughput != nil {
		minimumThroughput := *source.MinimumThroughput
		throughputSettingsGetPropertiesStatusResource.MinimumThroughput = &minimumThroughput
	} else {
		throughputSettingsGetPropertiesStatusResource.MinimumThroughput = nil
	}

	// OfferReplacePending
	if source.OfferReplacePending != nil {
		offerReplacePending := *source.OfferReplacePending
		throughputSettingsGetPropertiesStatusResource.OfferReplacePending = &offerReplacePending
	} else {
		throughputSettingsGetPropertiesStatusResource.OfferReplacePending = nil
	}

	// Rid
	if source.Rid != nil {
		rid := *source.Rid
		throughputSettingsGetPropertiesStatusResource.Rid = &rid
	} else {
		throughputSettingsGetPropertiesStatusResource.Rid = nil
	}

	// Throughput
	if source.Throughput != nil {
		throughput := *source.Throughput
		throughputSettingsGetPropertiesStatusResource.Throughput = &throughput
	} else {
		throughputSettingsGetPropertiesStatusResource.Throughput = nil
	}

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		throughputSettingsGetPropertiesStatusResource.Ts = &t
	} else {
		throughputSettingsGetPropertiesStatusResource.Ts = nil
	}

	// No error
	return nil
}

// AssignPropertiesToThroughputSettingsGetPropertiesStatusResource populates the provided destination ThroughputSettingsGetProperties_Status_Resource from our ThroughputSettingsGetProperties_Status_Resource
func (throughputSettingsGetPropertiesStatusResource *ThroughputSettingsGetProperties_Status_Resource) AssignPropertiesToThroughputSettingsGetPropertiesStatusResource(destination *v1alpha1api20210515storage.ThroughputSettingsGetProperties_Status_Resource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoscaleSettings
	if throughputSettingsGetPropertiesStatusResource.AutoscaleSettings != nil {
		var autoscaleSetting v1alpha1api20210515storage.AutoscaleSettingsResource_Status
		err := (*throughputSettingsGetPropertiesStatusResource.AutoscaleSettings).AssignPropertiesToAutoscaleSettingsResourceStatus(&autoscaleSetting)
		if err != nil {
			return errors.Wrap(err, "populating AutoscaleSettings from AutoscaleSettings, calling AssignPropertiesToAutoscaleSettingsResourceStatus()")
		}
		destination.AutoscaleSettings = &autoscaleSetting
	} else {
		destination.AutoscaleSettings = nil
	}

	// Etag
	if throughputSettingsGetPropertiesStatusResource.Etag != nil {
		etag := *throughputSettingsGetPropertiesStatusResource.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// MinimumThroughput
	if throughputSettingsGetPropertiesStatusResource.MinimumThroughput != nil {
		minimumThroughput := *throughputSettingsGetPropertiesStatusResource.MinimumThroughput
		destination.MinimumThroughput = &minimumThroughput
	} else {
		destination.MinimumThroughput = nil
	}

	// OfferReplacePending
	if throughputSettingsGetPropertiesStatusResource.OfferReplacePending != nil {
		offerReplacePending := *throughputSettingsGetPropertiesStatusResource.OfferReplacePending
		destination.OfferReplacePending = &offerReplacePending
	} else {
		destination.OfferReplacePending = nil
	}

	// Rid
	if throughputSettingsGetPropertiesStatusResource.Rid != nil {
		rid := *throughputSettingsGetPropertiesStatusResource.Rid
		destination.Rid = &rid
	} else {
		destination.Rid = nil
	}

	// Throughput
	if throughputSettingsGetPropertiesStatusResource.Throughput != nil {
		throughput := *throughputSettingsGetPropertiesStatusResource.Throughput
		destination.Throughput = &throughput
	} else {
		destination.Throughput = nil
	}

	// Ts
	if throughputSettingsGetPropertiesStatusResource.Ts != nil {
		t := *throughputSettingsGetPropertiesStatusResource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/ThroughputSettingsResource
type ThroughputSettingsResource struct {
	//AutoscaleSettings: Cosmos DB provisioned throughput settings object
	AutoscaleSettings *AutoscaleSettingsResource `json:"autoscaleSettings,omitempty"`

	//Throughput: Value of the Cosmos DB resource throughput. Either throughput is
	//required or autoscaleSettings is required, but not both.
	Throughput *int `json:"throughput,omitempty"`
}

var _ genruntime.ARMTransformer = &ThroughputSettingsResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (throughputSettingsResource *ThroughputSettingsResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if throughputSettingsResource == nil {
		return nil, nil
	}
	var result ThroughputSettingsResourceARM

	// Set property ‘AutoscaleSettings’:
	if throughputSettingsResource.AutoscaleSettings != nil {
		autoscaleSettingsARM, err := (*throughputSettingsResource.AutoscaleSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoscaleSettings := autoscaleSettingsARM.(AutoscaleSettingsResourceARM)
		result.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Throughput’:
	if throughputSettingsResource.Throughput != nil {
		throughput := *throughputSettingsResource.Throughput
		result.Throughput = &throughput
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (throughputSettingsResource *ThroughputSettingsResource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputSettingsResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (throughputSettingsResource *ThroughputSettingsResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputSettingsResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputSettingsResourceARM, got %T", armInput)
	}

	// Set property ‘AutoscaleSettings’:
	if typedInput.AutoscaleSettings != nil {
		var autoscaleSettings1 AutoscaleSettingsResource
		err := autoscaleSettings1.PopulateFromARM(owner, *typedInput.AutoscaleSettings)
		if err != nil {
			return err
		}
		autoscaleSettings := autoscaleSettings1
		throughputSettingsResource.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Throughput’:
	if typedInput.Throughput != nil {
		throughput := *typedInput.Throughput
		throughputSettingsResource.Throughput = &throughput
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputSettingsResource populates our ThroughputSettingsResource from the provided source ThroughputSettingsResource
func (throughputSettingsResource *ThroughputSettingsResource) AssignPropertiesFromThroughputSettingsResource(source *v1alpha1api20210515storage.ThroughputSettingsResource) error {

	// AutoscaleSettings
	if source.AutoscaleSettings != nil {
		var autoscaleSetting AutoscaleSettingsResource
		err := autoscaleSetting.AssignPropertiesFromAutoscaleSettingsResource(source.AutoscaleSettings)
		if err != nil {
			return errors.Wrap(err, "populating AutoscaleSettings from AutoscaleSettings, calling AssignPropertiesFromAutoscaleSettingsResource()")
		}
		throughputSettingsResource.AutoscaleSettings = &autoscaleSetting
	} else {
		throughputSettingsResource.AutoscaleSettings = nil
	}

	// Throughput
	if source.Throughput != nil {
		throughput := *source.Throughput
		throughputSettingsResource.Throughput = &throughput
	} else {
		throughputSettingsResource.Throughput = nil
	}

	// No error
	return nil
}

// AssignPropertiesToThroughputSettingsResource populates the provided destination ThroughputSettingsResource from our ThroughputSettingsResource
func (throughputSettingsResource *ThroughputSettingsResource) AssignPropertiesToThroughputSettingsResource(destination *v1alpha1api20210515storage.ThroughputSettingsResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoscaleSettings
	if throughputSettingsResource.AutoscaleSettings != nil {
		var autoscaleSetting v1alpha1api20210515storage.AutoscaleSettingsResource
		err := (*throughputSettingsResource.AutoscaleSettings).AssignPropertiesToAutoscaleSettingsResource(&autoscaleSetting)
		if err != nil {
			return errors.Wrap(err, "populating AutoscaleSettings from AutoscaleSettings, calling AssignPropertiesToAutoscaleSettingsResource()")
		}
		destination.AutoscaleSettings = &autoscaleSetting
	} else {
		destination.AutoscaleSettings = nil
	}

	// Throughput
	if throughputSettingsResource.Throughput != nil {
		throughput := *throughputSettingsResource.Throughput
		destination.Throughput = &throughput
	} else {
		destination.Throughput = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/AutoscaleSettingsResource
type AutoscaleSettingsResource struct {
	//AutoUpgradePolicy: Cosmos DB resource auto-upgrade policy
	AutoUpgradePolicy *AutoUpgradePolicyResource `json:"autoUpgradePolicy,omitempty"`

	// +kubebuilder:validation:Required
	//MaxThroughput: Represents maximum throughput container can scale up to.
	MaxThroughput int `json:"maxThroughput"`
}

var _ genruntime.ARMTransformer = &AutoscaleSettingsResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (autoscaleSettingsResource *AutoscaleSettingsResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if autoscaleSettingsResource == nil {
		return nil, nil
	}
	var result AutoscaleSettingsResourceARM

	// Set property ‘AutoUpgradePolicy’:
	if autoscaleSettingsResource.AutoUpgradePolicy != nil {
		autoUpgradePolicyARM, err := (*autoscaleSettingsResource.AutoUpgradePolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoUpgradePolicy := autoUpgradePolicyARM.(AutoUpgradePolicyResourceARM)
		result.AutoUpgradePolicy = &autoUpgradePolicy
	}

	// Set property ‘MaxThroughput’:
	result.MaxThroughput = autoscaleSettingsResource.MaxThroughput
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (autoscaleSettingsResource *AutoscaleSettingsResource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoscaleSettingsResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (autoscaleSettingsResource *AutoscaleSettingsResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoscaleSettingsResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoscaleSettingsResourceARM, got %T", armInput)
	}

	// Set property ‘AutoUpgradePolicy’:
	if typedInput.AutoUpgradePolicy != nil {
		var autoUpgradePolicy1 AutoUpgradePolicyResource
		err := autoUpgradePolicy1.PopulateFromARM(owner, *typedInput.AutoUpgradePolicy)
		if err != nil {
			return err
		}
		autoUpgradePolicy := autoUpgradePolicy1
		autoscaleSettingsResource.AutoUpgradePolicy = &autoUpgradePolicy
	}

	// Set property ‘MaxThroughput’:
	autoscaleSettingsResource.MaxThroughput = typedInput.MaxThroughput

	// No error
	return nil
}

// AssignPropertiesFromAutoscaleSettingsResource populates our AutoscaleSettingsResource from the provided source AutoscaleSettingsResource
func (autoscaleSettingsResource *AutoscaleSettingsResource) AssignPropertiesFromAutoscaleSettingsResource(source *v1alpha1api20210515storage.AutoscaleSettingsResource) error {

	// AutoUpgradePolicy
	if source.AutoUpgradePolicy != nil {
		var autoUpgradePolicy AutoUpgradePolicyResource
		err := autoUpgradePolicy.AssignPropertiesFromAutoUpgradePolicyResource(source.AutoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "populating AutoUpgradePolicy from AutoUpgradePolicy, calling AssignPropertiesFromAutoUpgradePolicyResource()")
		}
		autoscaleSettingsResource.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		autoscaleSettingsResource.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	if source.MaxThroughput != nil {
		autoscaleSettingsResource.MaxThroughput = *source.MaxThroughput
	} else {
		autoscaleSettingsResource.MaxThroughput = 0
	}

	// No error
	return nil
}

// AssignPropertiesToAutoscaleSettingsResource populates the provided destination AutoscaleSettingsResource from our AutoscaleSettingsResource
func (autoscaleSettingsResource *AutoscaleSettingsResource) AssignPropertiesToAutoscaleSettingsResource(destination *v1alpha1api20210515storage.AutoscaleSettingsResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoUpgradePolicy
	if autoscaleSettingsResource.AutoUpgradePolicy != nil {
		var autoUpgradePolicy v1alpha1api20210515storage.AutoUpgradePolicyResource
		err := (*autoscaleSettingsResource.AutoUpgradePolicy).AssignPropertiesToAutoUpgradePolicyResource(&autoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "populating AutoUpgradePolicy from AutoUpgradePolicy, calling AssignPropertiesToAutoUpgradePolicyResource()")
		}
		destination.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		destination.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	maxThroughput := autoscaleSettingsResource.MaxThroughput
	destination.MaxThroughput = &maxThroughput

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type AutoscaleSettingsResource_Status struct {
	//AutoUpgradePolicy: Cosmos DB resource auto-upgrade policy
	AutoUpgradePolicy *AutoUpgradePolicyResource_Status `json:"autoUpgradePolicy,omitempty"`

	// +kubebuilder:validation:Required
	//MaxThroughput: Represents maximum throughput container can scale up to.
	MaxThroughput int `json:"maxThroughput"`

	//TargetMaxThroughput: Represents target maximum throughput container can scale up
	//to once offer is no longer in pending state.
	TargetMaxThroughput *int `json:"targetMaxThroughput,omitempty"`
}

var _ genruntime.FromARMConverter = &AutoscaleSettingsResource_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (autoscaleSettingsResourceStatus *AutoscaleSettingsResource_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoscaleSettingsResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (autoscaleSettingsResourceStatus *AutoscaleSettingsResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoscaleSettingsResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoscaleSettingsResource_StatusARM, got %T", armInput)
	}

	// Set property ‘AutoUpgradePolicy’:
	if typedInput.AutoUpgradePolicy != nil {
		var autoUpgradePolicy1 AutoUpgradePolicyResource_Status
		err := autoUpgradePolicy1.PopulateFromARM(owner, *typedInput.AutoUpgradePolicy)
		if err != nil {
			return err
		}
		autoUpgradePolicy := autoUpgradePolicy1
		autoscaleSettingsResourceStatus.AutoUpgradePolicy = &autoUpgradePolicy
	}

	// Set property ‘MaxThroughput’:
	autoscaleSettingsResourceStatus.MaxThroughput = typedInput.MaxThroughput

	// Set property ‘TargetMaxThroughput’:
	if typedInput.TargetMaxThroughput != nil {
		targetMaxThroughput := *typedInput.TargetMaxThroughput
		autoscaleSettingsResourceStatus.TargetMaxThroughput = &targetMaxThroughput
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoscaleSettingsResourceStatus populates our AutoscaleSettingsResource_Status from the provided source AutoscaleSettingsResource_Status
func (autoscaleSettingsResourceStatus *AutoscaleSettingsResource_Status) AssignPropertiesFromAutoscaleSettingsResourceStatus(source *v1alpha1api20210515storage.AutoscaleSettingsResource_Status) error {

	// AutoUpgradePolicy
	if source.AutoUpgradePolicy != nil {
		var autoUpgradePolicy AutoUpgradePolicyResource_Status
		err := autoUpgradePolicy.AssignPropertiesFromAutoUpgradePolicyResourceStatus(source.AutoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "populating AutoUpgradePolicy from AutoUpgradePolicy, calling AssignPropertiesFromAutoUpgradePolicyResourceStatus()")
		}
		autoscaleSettingsResourceStatus.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		autoscaleSettingsResourceStatus.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	if source.MaxThroughput != nil {
		autoscaleSettingsResourceStatus.MaxThroughput = *source.MaxThroughput
	} else {
		autoscaleSettingsResourceStatus.MaxThroughput = 0
	}

	// TargetMaxThroughput
	if source.TargetMaxThroughput != nil {
		targetMaxThroughput := *source.TargetMaxThroughput
		autoscaleSettingsResourceStatus.TargetMaxThroughput = &targetMaxThroughput
	} else {
		autoscaleSettingsResourceStatus.TargetMaxThroughput = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAutoscaleSettingsResourceStatus populates the provided destination AutoscaleSettingsResource_Status from our AutoscaleSettingsResource_Status
func (autoscaleSettingsResourceStatus *AutoscaleSettingsResource_Status) AssignPropertiesToAutoscaleSettingsResourceStatus(destination *v1alpha1api20210515storage.AutoscaleSettingsResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoUpgradePolicy
	if autoscaleSettingsResourceStatus.AutoUpgradePolicy != nil {
		var autoUpgradePolicy v1alpha1api20210515storage.AutoUpgradePolicyResource_Status
		err := (*autoscaleSettingsResourceStatus.AutoUpgradePolicy).AssignPropertiesToAutoUpgradePolicyResourceStatus(&autoUpgradePolicy)
		if err != nil {
			return errors.Wrap(err, "populating AutoUpgradePolicy from AutoUpgradePolicy, calling AssignPropertiesToAutoUpgradePolicyResourceStatus()")
		}
		destination.AutoUpgradePolicy = &autoUpgradePolicy
	} else {
		destination.AutoUpgradePolicy = nil
	}

	// MaxThroughput
	maxThroughput := autoscaleSettingsResourceStatus.MaxThroughput
	destination.MaxThroughput = &maxThroughput

	// TargetMaxThroughput
	if autoscaleSettingsResourceStatus.TargetMaxThroughput != nil {
		targetMaxThroughput := *autoscaleSettingsResourceStatus.TargetMaxThroughput
		destination.TargetMaxThroughput = &targetMaxThroughput
	} else {
		destination.TargetMaxThroughput = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/AutoUpgradePolicyResource
type AutoUpgradePolicyResource struct {
	//ThroughputPolicy: Cosmos DB resource throughput policy
	ThroughputPolicy *ThroughputPolicyResource `json:"throughputPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &AutoUpgradePolicyResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (autoUpgradePolicyResource *AutoUpgradePolicyResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if autoUpgradePolicyResource == nil {
		return nil, nil
	}
	var result AutoUpgradePolicyResourceARM

	// Set property ‘ThroughputPolicy’:
	if autoUpgradePolicyResource.ThroughputPolicy != nil {
		throughputPolicyARM, err := (*autoUpgradePolicyResource.ThroughputPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		throughputPolicy := throughputPolicyARM.(ThroughputPolicyResourceARM)
		result.ThroughputPolicy = &throughputPolicy
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (autoUpgradePolicyResource *AutoUpgradePolicyResource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoUpgradePolicyResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (autoUpgradePolicyResource *AutoUpgradePolicyResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoUpgradePolicyResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoUpgradePolicyResourceARM, got %T", armInput)
	}

	// Set property ‘ThroughputPolicy’:
	if typedInput.ThroughputPolicy != nil {
		var throughputPolicy1 ThroughputPolicyResource
		err := throughputPolicy1.PopulateFromARM(owner, *typedInput.ThroughputPolicy)
		if err != nil {
			return err
		}
		throughputPolicy := throughputPolicy1
		autoUpgradePolicyResource.ThroughputPolicy = &throughputPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoUpgradePolicyResource populates our AutoUpgradePolicyResource from the provided source AutoUpgradePolicyResource
func (autoUpgradePolicyResource *AutoUpgradePolicyResource) AssignPropertiesFromAutoUpgradePolicyResource(source *v1alpha1api20210515storage.AutoUpgradePolicyResource) error {

	// ThroughputPolicy
	if source.ThroughputPolicy != nil {
		var throughputPolicy ThroughputPolicyResource
		err := throughputPolicy.AssignPropertiesFromThroughputPolicyResource(source.ThroughputPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ThroughputPolicy from ThroughputPolicy, calling AssignPropertiesFromThroughputPolicyResource()")
		}
		autoUpgradePolicyResource.ThroughputPolicy = &throughputPolicy
	} else {
		autoUpgradePolicyResource.ThroughputPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAutoUpgradePolicyResource populates the provided destination AutoUpgradePolicyResource from our AutoUpgradePolicyResource
func (autoUpgradePolicyResource *AutoUpgradePolicyResource) AssignPropertiesToAutoUpgradePolicyResource(destination *v1alpha1api20210515storage.AutoUpgradePolicyResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ThroughputPolicy
	if autoUpgradePolicyResource.ThroughputPolicy != nil {
		var throughputPolicy v1alpha1api20210515storage.ThroughputPolicyResource
		err := (*autoUpgradePolicyResource.ThroughputPolicy).AssignPropertiesToThroughputPolicyResource(&throughputPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ThroughputPolicy from ThroughputPolicy, calling AssignPropertiesToThroughputPolicyResource()")
		}
		destination.ThroughputPolicy = &throughputPolicy
	} else {
		destination.ThroughputPolicy = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type AutoUpgradePolicyResource_Status struct {
	//ThroughputPolicy: Represents throughput policy which service must adhere to for
	//auto-upgrade
	ThroughputPolicy *ThroughputPolicyResource_Status `json:"throughputPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &AutoUpgradePolicyResource_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (autoUpgradePolicyResourceStatus *AutoUpgradePolicyResource_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoUpgradePolicyResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (autoUpgradePolicyResourceStatus *AutoUpgradePolicyResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoUpgradePolicyResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoUpgradePolicyResource_StatusARM, got %T", armInput)
	}

	// Set property ‘ThroughputPolicy’:
	if typedInput.ThroughputPolicy != nil {
		var throughputPolicy1 ThroughputPolicyResource_Status
		err := throughputPolicy1.PopulateFromARM(owner, *typedInput.ThroughputPolicy)
		if err != nil {
			return err
		}
		throughputPolicy := throughputPolicy1
		autoUpgradePolicyResourceStatus.ThroughputPolicy = &throughputPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoUpgradePolicyResourceStatus populates our AutoUpgradePolicyResource_Status from the provided source AutoUpgradePolicyResource_Status
func (autoUpgradePolicyResourceStatus *AutoUpgradePolicyResource_Status) AssignPropertiesFromAutoUpgradePolicyResourceStatus(source *v1alpha1api20210515storage.AutoUpgradePolicyResource_Status) error {

	// ThroughputPolicy
	if source.ThroughputPolicy != nil {
		var throughputPolicy ThroughputPolicyResource_Status
		err := throughputPolicy.AssignPropertiesFromThroughputPolicyResourceStatus(source.ThroughputPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ThroughputPolicy from ThroughputPolicy, calling AssignPropertiesFromThroughputPolicyResourceStatus()")
		}
		autoUpgradePolicyResourceStatus.ThroughputPolicy = &throughputPolicy
	} else {
		autoUpgradePolicyResourceStatus.ThroughputPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAutoUpgradePolicyResourceStatus populates the provided destination AutoUpgradePolicyResource_Status from our AutoUpgradePolicyResource_Status
func (autoUpgradePolicyResourceStatus *AutoUpgradePolicyResource_Status) AssignPropertiesToAutoUpgradePolicyResourceStatus(destination *v1alpha1api20210515storage.AutoUpgradePolicyResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ThroughputPolicy
	if autoUpgradePolicyResourceStatus.ThroughputPolicy != nil {
		var throughputPolicy v1alpha1api20210515storage.ThroughputPolicyResource_Status
		err := (*autoUpgradePolicyResourceStatus.ThroughputPolicy).AssignPropertiesToThroughputPolicyResourceStatus(&throughputPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ThroughputPolicy from ThroughputPolicy, calling AssignPropertiesToThroughputPolicyResourceStatus()")
		}
		destination.ThroughputPolicy = &throughputPolicy
	} else {
		destination.ThroughputPolicy = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/ThroughputPolicyResource
type ThroughputPolicyResource struct {
	//IncrementPercent: Represents the percentage by which throughput can increase
	//every time throughput policy kicks in.
	IncrementPercent *int `json:"incrementPercent,omitempty"`

	//IsEnabled: Determines whether the ThroughputPolicy is active or not
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

var _ genruntime.ARMTransformer = &ThroughputPolicyResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (throughputPolicyResource *ThroughputPolicyResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if throughputPolicyResource == nil {
		return nil, nil
	}
	var result ThroughputPolicyResourceARM

	// Set property ‘IncrementPercent’:
	if throughputPolicyResource.IncrementPercent != nil {
		incrementPercent := *throughputPolicyResource.IncrementPercent
		result.IncrementPercent = &incrementPercent
	}

	// Set property ‘IsEnabled’:
	if throughputPolicyResource.IsEnabled != nil {
		isEnabled := *throughputPolicyResource.IsEnabled
		result.IsEnabled = &isEnabled
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (throughputPolicyResource *ThroughputPolicyResource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputPolicyResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (throughputPolicyResource *ThroughputPolicyResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputPolicyResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputPolicyResourceARM, got %T", armInput)
	}

	// Set property ‘IncrementPercent’:
	if typedInput.IncrementPercent != nil {
		incrementPercent := *typedInput.IncrementPercent
		throughputPolicyResource.IncrementPercent = &incrementPercent
	}

	// Set property ‘IsEnabled’:
	if typedInput.IsEnabled != nil {
		isEnabled := *typedInput.IsEnabled
		throughputPolicyResource.IsEnabled = &isEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputPolicyResource populates our ThroughputPolicyResource from the provided source ThroughputPolicyResource
func (throughputPolicyResource *ThroughputPolicyResource) AssignPropertiesFromThroughputPolicyResource(source *v1alpha1api20210515storage.ThroughputPolicyResource) error {

	// IncrementPercent
	if source.IncrementPercent != nil {
		incrementPercent := *source.IncrementPercent
		throughputPolicyResource.IncrementPercent = &incrementPercent
	} else {
		throughputPolicyResource.IncrementPercent = nil
	}

	// IsEnabled
	if source.IsEnabled != nil {
		isEnabled := *source.IsEnabled
		throughputPolicyResource.IsEnabled = &isEnabled
	} else {
		throughputPolicyResource.IsEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToThroughputPolicyResource populates the provided destination ThroughputPolicyResource from our ThroughputPolicyResource
func (throughputPolicyResource *ThroughputPolicyResource) AssignPropertiesToThroughputPolicyResource(destination *v1alpha1api20210515storage.ThroughputPolicyResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IncrementPercent
	if throughputPolicyResource.IncrementPercent != nil {
		incrementPercent := *throughputPolicyResource.IncrementPercent
		destination.IncrementPercent = &incrementPercent
	} else {
		destination.IncrementPercent = nil
	}

	// IsEnabled
	if throughputPolicyResource.IsEnabled != nil {
		isEnabled := *throughputPolicyResource.IsEnabled
		destination.IsEnabled = &isEnabled
	} else {
		destination.IsEnabled = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type ThroughputPolicyResource_Status struct {
	//IncrementPercent: Represents the percentage by which throughput can increase
	//every time throughput policy kicks in.
	IncrementPercent *int `json:"incrementPercent,omitempty"`

	//IsEnabled: Determines whether the ThroughputPolicy is active or not
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

var _ genruntime.FromARMConverter = &ThroughputPolicyResource_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (throughputPolicyResourceStatus *ThroughputPolicyResource_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ThroughputPolicyResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (throughputPolicyResourceStatus *ThroughputPolicyResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ThroughputPolicyResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ThroughputPolicyResource_StatusARM, got %T", armInput)
	}

	// Set property ‘IncrementPercent’:
	if typedInput.IncrementPercent != nil {
		incrementPercent := *typedInput.IncrementPercent
		throughputPolicyResourceStatus.IncrementPercent = &incrementPercent
	}

	// Set property ‘IsEnabled’:
	if typedInput.IsEnabled != nil {
		isEnabled := *typedInput.IsEnabled
		throughputPolicyResourceStatus.IsEnabled = &isEnabled
	}

	// No error
	return nil
}

// AssignPropertiesFromThroughputPolicyResourceStatus populates our ThroughputPolicyResource_Status from the provided source ThroughputPolicyResource_Status
func (throughputPolicyResourceStatus *ThroughputPolicyResource_Status) AssignPropertiesFromThroughputPolicyResourceStatus(source *v1alpha1api20210515storage.ThroughputPolicyResource_Status) error {

	// IncrementPercent
	if source.IncrementPercent != nil {
		incrementPercent := *source.IncrementPercent
		throughputPolicyResourceStatus.IncrementPercent = &incrementPercent
	} else {
		throughputPolicyResourceStatus.IncrementPercent = nil
	}

	// IsEnabled
	if source.IsEnabled != nil {
		isEnabled := *source.IsEnabled
		throughputPolicyResourceStatus.IsEnabled = &isEnabled
	} else {
		throughputPolicyResourceStatus.IsEnabled = nil
	}

	// No error
	return nil
}

// AssignPropertiesToThroughputPolicyResourceStatus populates the provided destination ThroughputPolicyResource_Status from our ThroughputPolicyResource_Status
func (throughputPolicyResourceStatus *ThroughputPolicyResource_Status) AssignPropertiesToThroughputPolicyResourceStatus(destination *v1alpha1api20210515storage.ThroughputPolicyResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// IncrementPercent
	if throughputPolicyResourceStatus.IncrementPercent != nil {
		incrementPercent := *throughputPolicyResourceStatus.IncrementPercent
		destination.IncrementPercent = &incrementPercent
	} else {
		destination.IncrementPercent = nil
	}

	// IsEnabled
	if throughputPolicyResourceStatus.IsEnabled != nil {
		isEnabled := *throughputPolicyResourceStatus.IsEnabled
		destination.IsEnabled = &isEnabled
	} else {
		destination.IsEnabled = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&MongodbDatabaseCollectionThroughputSetting{}, &MongodbDatabaseCollectionThroughputSettingList{})
}
