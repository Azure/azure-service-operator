// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlStoredProcedureGetResults_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureGetResults_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureGetResultsStatusARM, SqlStoredProcedureGetResultsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureGetResultsStatusARM runs a test to see if a specific instance of SqlStoredProcedureGetResults_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureGetResultsStatusARM(subject SqlStoredProcedureGetResults_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureGetResults_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureGetResults_StatusARM instances for property testing - lazily instantiated by
//SqlStoredProcedureGetResultsStatusARMGenerator()
var sqlStoredProcedureGetResultsStatusARMGenerator gopter.Gen

// SqlStoredProcedureGetResultsStatusARMGenerator returns a generator of SqlStoredProcedureGetResults_StatusARM instances for property testing.
// We first initialize sqlStoredProcedureGetResultsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlStoredProcedureGetResultsStatusARMGenerator() gopter.Gen {
	if sqlStoredProcedureGetResultsStatusARMGenerator != nil {
		return sqlStoredProcedureGetResultsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureGetResultsStatusARM(generators)
	sqlStoredProcedureGetResultsStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureGetResults_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureGetResultsStatusARM(generators)
	AddRelatedPropertyGeneratorsForSqlStoredProcedureGetResultsStatusARM(generators)
	sqlStoredProcedureGetResultsStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureGetResults_StatusARM{}), generators)

	return sqlStoredProcedureGetResultsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedureGetResultsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedureGetResultsStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedureGetResultsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedureGetResultsStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlStoredProcedureGetPropertiesStatusARMGenerator())
}

func Test_SqlStoredProcedureGetProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureGetProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureGetPropertiesStatusARM, SqlStoredProcedureGetPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureGetPropertiesStatusARM runs a test to see if a specific instance of SqlStoredProcedureGetProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureGetPropertiesStatusARM(subject SqlStoredProcedureGetProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureGetProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureGetProperties_StatusARM instances for property testing - lazily instantiated by
//SqlStoredProcedureGetPropertiesStatusARMGenerator()
var sqlStoredProcedureGetPropertiesStatusARMGenerator gopter.Gen

// SqlStoredProcedureGetPropertiesStatusARMGenerator returns a generator of SqlStoredProcedureGetProperties_StatusARM instances for property testing.
func SqlStoredProcedureGetPropertiesStatusARMGenerator() gopter.Gen {
	if sqlStoredProcedureGetPropertiesStatusARMGenerator != nil {
		return sqlStoredProcedureGetPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlStoredProcedureGetPropertiesStatusARM(generators)
	sqlStoredProcedureGetPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureGetProperties_StatusARM{}), generators)

	return sqlStoredProcedureGetPropertiesStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlStoredProcedureGetPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlStoredProcedureGetPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Resource"] = gen.PtrOf(SqlStoredProcedureGetPropertiesStatusResourceARMGenerator())
}

func Test_SqlStoredProcedureGetProperties_Status_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlStoredProcedureGetProperties_Status_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlStoredProcedureGetPropertiesStatusResourceARM, SqlStoredProcedureGetPropertiesStatusResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlStoredProcedureGetPropertiesStatusResourceARM runs a test to see if a specific instance of SqlStoredProcedureGetProperties_Status_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlStoredProcedureGetPropertiesStatusResourceARM(subject SqlStoredProcedureGetProperties_Status_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlStoredProcedureGetProperties_Status_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlStoredProcedureGetProperties_Status_ResourceARM instances for property testing - lazily instantiated
//by SqlStoredProcedureGetPropertiesStatusResourceARMGenerator()
var sqlStoredProcedureGetPropertiesStatusResourceARMGenerator gopter.Gen

// SqlStoredProcedureGetPropertiesStatusResourceARMGenerator returns a generator of SqlStoredProcedureGetProperties_Status_ResourceARM instances for property testing.
func SqlStoredProcedureGetPropertiesStatusResourceARMGenerator() gopter.Gen {
	if sqlStoredProcedureGetPropertiesStatusResourceARMGenerator != nil {
		return sqlStoredProcedureGetPropertiesStatusResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlStoredProcedureGetPropertiesStatusResourceARM(generators)
	sqlStoredProcedureGetPropertiesStatusResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlStoredProcedureGetProperties_Status_ResourceARM{}), generators)

	return sqlStoredProcedureGetPropertiesStatusResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlStoredProcedureGetPropertiesStatusResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlStoredProcedureGetPropertiesStatusResourceARM(gens map[string]gopter.Gen) {
	gens["Body"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
}
