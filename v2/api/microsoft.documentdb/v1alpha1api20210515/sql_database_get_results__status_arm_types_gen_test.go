// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_SqlDatabaseGetResults_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseGetResults_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseGetResultsStatusARM, SqlDatabaseGetResultsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseGetResultsStatusARM runs a test to see if a specific instance of SqlDatabaseGetResults_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseGetResultsStatusARM(subject SqlDatabaseGetResults_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseGetResults_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseGetResults_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseGetResultsStatusARMGenerator()
var sqlDatabaseGetResultsStatusARMGenerator gopter.Gen

// SqlDatabaseGetResultsStatusARMGenerator returns a generator of SqlDatabaseGetResults_StatusARM instances for property testing.
// We first initialize sqlDatabaseGetResultsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SqlDatabaseGetResultsStatusARMGenerator() gopter.Gen {
	if sqlDatabaseGetResultsStatusARMGenerator != nil {
		return sqlDatabaseGetResultsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseGetResultsStatusARM(generators)
	sqlDatabaseGetResultsStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseGetResults_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseGetResultsStatusARM(generators)
	AddRelatedPropertyGeneratorsForSqlDatabaseGetResultsStatusARM(generators)
	sqlDatabaseGetResultsStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseGetResults_StatusARM{}), generators)

	return sqlDatabaseGetResultsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseGetResultsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseGetResultsStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSqlDatabaseGetResultsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseGetResultsStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SqlDatabaseGetPropertiesStatusARMGenerator())
}

func Test_SqlDatabaseGetProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseGetProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseGetPropertiesStatusARM, SqlDatabaseGetPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseGetPropertiesStatusARM runs a test to see if a specific instance of SqlDatabaseGetProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseGetPropertiesStatusARM(subject SqlDatabaseGetProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseGetProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseGetProperties_StatusARM instances for property testing - lazily instantiated by
//SqlDatabaseGetPropertiesStatusARMGenerator()
var sqlDatabaseGetPropertiesStatusARMGenerator gopter.Gen

// SqlDatabaseGetPropertiesStatusARMGenerator returns a generator of SqlDatabaseGetProperties_StatusARM instances for property testing.
func SqlDatabaseGetPropertiesStatusARMGenerator() gopter.Gen {
	if sqlDatabaseGetPropertiesStatusARMGenerator != nil {
		return sqlDatabaseGetPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForSqlDatabaseGetPropertiesStatusARM(generators)
	sqlDatabaseGetPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseGetProperties_StatusARM{}), generators)

	return sqlDatabaseGetPropertiesStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForSqlDatabaseGetPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSqlDatabaseGetPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Options"] = gen.PtrOf(OptionsResourceStatusARMGenerator())
	gens["Resource"] = gen.PtrOf(SqlDatabaseGetPropertiesStatusResourceARMGenerator())
}

func Test_SqlDatabaseGetProperties_Status_ResourceARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SqlDatabaseGetProperties_Status_ResourceARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSqlDatabaseGetPropertiesStatusResourceARM, SqlDatabaseGetPropertiesStatusResourceARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSqlDatabaseGetPropertiesStatusResourceARM runs a test to see if a specific instance of SqlDatabaseGetProperties_Status_ResourceARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSqlDatabaseGetPropertiesStatusResourceARM(subject SqlDatabaseGetProperties_Status_ResourceARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SqlDatabaseGetProperties_Status_ResourceARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SqlDatabaseGetProperties_Status_ResourceARM instances for property testing - lazily instantiated by
//SqlDatabaseGetPropertiesStatusResourceARMGenerator()
var sqlDatabaseGetPropertiesStatusResourceARMGenerator gopter.Gen

// SqlDatabaseGetPropertiesStatusResourceARMGenerator returns a generator of SqlDatabaseGetProperties_Status_ResourceARM instances for property testing.
func SqlDatabaseGetPropertiesStatusResourceARMGenerator() gopter.Gen {
	if sqlDatabaseGetPropertiesStatusResourceARMGenerator != nil {
		return sqlDatabaseGetPropertiesStatusResourceARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSqlDatabaseGetPropertiesStatusResourceARM(generators)
	sqlDatabaseGetPropertiesStatusResourceARMGenerator = gen.Struct(reflect.TypeOf(SqlDatabaseGetProperties_Status_ResourceARM{}), generators)

	return sqlDatabaseGetPropertiesStatusResourceARMGenerator
}

// AddIndependentPropertyGeneratorsForSqlDatabaseGetPropertiesStatusResourceARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSqlDatabaseGetPropertiesStatusResourceARM(gens map[string]gopter.Gen) {
	gens["Colls"] = gen.PtrOf(gen.AlphaString())
	gens["Etag"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.AlphaString()
	gens["Rid"] = gen.PtrOf(gen.AlphaString())
	gens["Ts"] = gen.PtrOf(gen.Float64())
	gens["Users"] = gen.PtrOf(gen.AlphaString())
}
