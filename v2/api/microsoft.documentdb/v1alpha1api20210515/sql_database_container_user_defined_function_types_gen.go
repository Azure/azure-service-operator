// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources=sqldatabasecontaineruserdefinedfunctions,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources={sqldatabasecontaineruserdefinedfunctions/status,sqldatabasecontaineruserdefinedfunctions/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_sqlDatabases_containers_userDefinedFunctions
type SqlDatabaseContainerUserDefinedFunction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec `json:"spec,omitempty"`
	Status            SqlUserDefinedFunctionGetResults_Status                         `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SqlDatabaseContainerUserDefinedFunction{}

// GetConditions returns the conditions of the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) GetConditions() conditions.Conditions {
	return sqlDatabaseContainerUserDefinedFunction.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) SetConditions(conditions conditions.Conditions) {
	sqlDatabaseContainerUserDefinedFunction.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontaineruserdefinedfunction,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=sqldatabasecontaineruserdefinedfunctions,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.sqldatabasecontaineruserdefinedfunctions.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &SqlDatabaseContainerUserDefinedFunction{}

// Default applies defaults to the SqlDatabaseContainerUserDefinedFunction resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) Default() {
	sqlDatabaseContainerUserDefinedFunction.defaultImpl()
	var temp interface{} = sqlDatabaseContainerUserDefinedFunction
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) defaultAzureName() {
	if sqlDatabaseContainerUserDefinedFunction.Spec.AzureName == "" {
		sqlDatabaseContainerUserDefinedFunction.Spec.AzureName = sqlDatabaseContainerUserDefinedFunction.Name
	}
}

// defaultImpl applies the code generated defaults to the SqlDatabaseContainerUserDefinedFunction resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) defaultImpl() {
	sqlDatabaseContainerUserDefinedFunction.defaultAzureName()
}

var _ genruntime.KubernetesResource = &SqlDatabaseContainerUserDefinedFunction{}

// AzureName returns the Azure name of the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) AzureName() string {
	return sqlDatabaseContainerUserDefinedFunction.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) GetSpec() genruntime.ConvertibleSpec {
	return &sqlDatabaseContainerUserDefinedFunction.Spec
}

// GetStatus returns the status of this resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) GetStatus() genruntime.ConvertibleStatus {
	return &sqlDatabaseContainerUserDefinedFunction.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/userDefinedFunctions"
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/userDefinedFunctions"
}

// NewEmptyStatus returns a new empty (blank) status
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SqlUserDefinedFunctionGetResults_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(sqlDatabaseContainerUserDefinedFunction.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: sqlDatabaseContainerUserDefinedFunction.Namespace,
		Name:      sqlDatabaseContainerUserDefinedFunction.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SqlUserDefinedFunctionGetResults_Status); ok {
		sqlDatabaseContainerUserDefinedFunction.Status = *st
		return nil
	}

	// Convert status to required version
	var st SqlUserDefinedFunctionGetResults_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	sqlDatabaseContainerUserDefinedFunction.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontaineruserdefinedfunction,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=sqldatabasecontaineruserdefinedfunctions,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.sqldatabasecontaineruserdefinedfunctions.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &SqlDatabaseContainerUserDefinedFunction{}

// ValidateCreate validates the creation of the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) ValidateCreate() error {
	validations := sqlDatabaseContainerUserDefinedFunction.createValidations()
	var temp interface{} = sqlDatabaseContainerUserDefinedFunction
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) ValidateDelete() error {
	validations := sqlDatabaseContainerUserDefinedFunction.deleteValidations()
	var temp interface{} = sqlDatabaseContainerUserDefinedFunction
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) ValidateUpdate(old runtime.Object) error {
	validations := sqlDatabaseContainerUserDefinedFunction.updateValidations()
	var temp interface{} = sqlDatabaseContainerUserDefinedFunction
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) createValidations() []func() error {
	return []func() error{sqlDatabaseContainerUserDefinedFunction.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return sqlDatabaseContainerUserDefinedFunction.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&sqlDatabaseContainerUserDefinedFunction.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromSqlDatabaseContainerUserDefinedFunction populates our SqlDatabaseContainerUserDefinedFunction from the provided source SqlDatabaseContainerUserDefinedFunction
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) AssignPropertiesFromSqlDatabaseContainerUserDefinedFunction(source *v1alpha1api20210515storage.SqlDatabaseContainerUserDefinedFunction) error {

	// Spec
	var spec DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec()")
	}
	sqlDatabaseContainerUserDefinedFunction.Spec = spec

	// Status
	var status SqlUserDefinedFunctionGetResults_Status
	err = status.AssignPropertiesFromSqlUserDefinedFunctionGetResultsStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromSqlUserDefinedFunctionGetResultsStatus()")
	}
	sqlDatabaseContainerUserDefinedFunction.Status = status

	// No error
	return nil
}

// AssignPropertiesToSqlDatabaseContainerUserDefinedFunction populates the provided destination SqlDatabaseContainerUserDefinedFunction from our SqlDatabaseContainerUserDefinedFunction
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) AssignPropertiesToSqlDatabaseContainerUserDefinedFunction(destination *v1alpha1api20210515storage.SqlDatabaseContainerUserDefinedFunction) error {

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec
	err := sqlDatabaseContainerUserDefinedFunction.Spec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.SqlUserDefinedFunctionGetResults_Status
	err = sqlDatabaseContainerUserDefinedFunction.Status.AssignPropertiesToSqlUserDefinedFunctionGetResultsStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToSqlUserDefinedFunctionGetResultsStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (sqlDatabaseContainerUserDefinedFunction *SqlDatabaseContainerUserDefinedFunction) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: sqlDatabaseContainerUserDefinedFunction.Spec.OriginalVersion(),
		Kind:    "SqlDatabaseContainerUserDefinedFunction",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_sqlDatabases_containers_userDefinedFunctions
type SqlDatabaseContainerUserDefinedFunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlDatabaseContainerUserDefinedFunction `json:"items"`
}

type DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Options: CreateUpdateOptions are a list of key-value pairs that describe the
	//resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and
	//"Throughput"
	Options *CreateUpdateOptions `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.documentdb.azure.com" json:"owner" kind:"SqlDatabaseContainer"`

	// +kubebuilder:validation:Required
	//Resource: Cosmos DB SQL userDefinedFunction resource object
	Resource SqlUserDefinedFunctionResource `json:"resource"`

	//Tags: Tags are a list of key-value pairs that describe the resource. These tags
	//can be used in viewing and grouping this resource (across resource groups). A
	//maximum of 15 tags can be provided for a resource. Each tag must have a key no
	//greater than 128 characters and value no greater than 256 characters. For
	//example, the default experience for a template type is set with
	//"defaultExperience": "Cassandra". Current "defaultExperience" values also
	//include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec *DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec == nil {
		return nil, nil
	}
	var result DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = DatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpecAPIVersion20210515

	// Set property ‘Location’:
	if databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Location != nil {
		location := *databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Options != nil {
		optionsARM, err := (*databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := optionsARM.(CreateUpdateOptionsARM)
		result.Properties.Options = &options
	}
	resourceARM, err := databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Resource.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Resource = resourceARM.(SqlUserDefinedFunctionResourceARM)

	// Set property ‘Tags’:
	if databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = DatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpecTypeMicrosoftDocumentDBDatabaseAccountsSqlDatabasesContainersUserDefinedFunctions
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec *DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec *DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Location = &location
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties.Options != nil {
		var options1 CreateUpdateOptions
		err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
		if err != nil {
			return err
		}
		options := options1
		databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Options = &options
	}

	// Set property ‘Owner’:
	databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	var resource SqlUserDefinedFunctionResource
	err := resource.PopulateFromARM(owner, typedInput.Properties.Resource)
	if err != nil {
		return err
	}
	databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Resource = resource

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec from the provided source
func (databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec *DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec)
	if ok {
		// Populate our instance from source
		return databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec
func (databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec *DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec)
	if ok {
		// Populate destination from our instance
		return databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec{}
	err := databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec populates our DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec from the provided source DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec
func (databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec *DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec(source *v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) error {

	// AzureName
	databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.AzureName = source.AzureName

	// Location
	if source.Location != nil {
		location := *source.Location
		databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Location = &location
	} else {
		databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Location = nil
	}

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignPropertiesFromCreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromCreateUpdateOptions()")
		}
		databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Options = &option
	} else {
		databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Options = nil
	}

	// Owner
	databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Owner = source.Owner.Copy()

	// Resource
	if source.Resource != nil {
		var resource SqlUserDefinedFunctionResource
		err := resource.AssignPropertiesFromSqlUserDefinedFunctionResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromSqlUserDefinedFunctionResource()")
		}
		databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Resource = resource
	} else {
		databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Resource = SqlUserDefinedFunctionResource{}
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Tags = tagMap

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec populates the provided destination DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec from our DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec
func (databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec *DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) AssignPropertiesToDatabaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec(destination *v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.AzureName

	// Location
	if databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Location != nil {
		location := *databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Options
	if databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Options != nil {
		var option v1alpha1api20210515storage.CreateUpdateOptions
		err := (*databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Options).AssignPropertiesToCreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToCreateUpdateOptions()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.OriginalVersion()

	// Owner
	destination.Owner = databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Owner.Copy()

	// Resource
	var resource v1alpha1api20210515storage.SqlUserDefinedFunctionResource
	err := databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Resource.AssignPropertiesToSqlUserDefinedFunctionResource(&resource)
	if err != nil {
		return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToSqlUserDefinedFunctionResource()")
	}
	destination.Resource = &resource

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec *DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec *DatabaseAccountsSqlDatabasesContainersUserDefinedFunctions_Spec) SetAzureName(azureName string) {
	databaseAccountsSqlDatabasesContainersUserDefinedFunctionsSpec.AzureName = azureName
}

//Generated from:
type SqlUserDefinedFunctionGetResults_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Name: The name of the ARM resource.
	Name     *string                                              `json:"name,omitempty"`
	Resource *SqlUserDefinedFunctionGetProperties_Status_Resource `json:"resource,omitempty"`
	Tags     map[string]string                                    `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SqlUserDefinedFunctionGetResults_Status{}

// ConvertStatusFrom populates our SqlUserDefinedFunctionGetResults_Status from the provided source
func (sqlUserDefinedFunctionGetResultsStatus *SqlUserDefinedFunctionGetResults_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.SqlUserDefinedFunctionGetResults_Status)
	if ok {
		// Populate our instance from source
		return sqlUserDefinedFunctionGetResultsStatus.AssignPropertiesFromSqlUserDefinedFunctionGetResultsStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.SqlUserDefinedFunctionGetResults_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = sqlUserDefinedFunctionGetResultsStatus.AssignPropertiesFromSqlUserDefinedFunctionGetResultsStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SqlUserDefinedFunctionGetResults_Status
func (sqlUserDefinedFunctionGetResultsStatus *SqlUserDefinedFunctionGetResults_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.SqlUserDefinedFunctionGetResults_Status)
	if ok {
		// Populate destination from our instance
		return sqlUserDefinedFunctionGetResultsStatus.AssignPropertiesToSqlUserDefinedFunctionGetResultsStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.SqlUserDefinedFunctionGetResults_Status{}
	err := sqlUserDefinedFunctionGetResultsStatus.AssignPropertiesToSqlUserDefinedFunctionGetResultsStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SqlUserDefinedFunctionGetResults_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlUserDefinedFunctionGetResultsStatus *SqlUserDefinedFunctionGetResults_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlUserDefinedFunctionGetResults_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlUserDefinedFunctionGetResultsStatus *SqlUserDefinedFunctionGetResults_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlUserDefinedFunctionGetResults_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlUserDefinedFunctionGetResults_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		sqlUserDefinedFunctionGetResultsStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		sqlUserDefinedFunctionGetResultsStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sqlUserDefinedFunctionGetResultsStatus.Name = &name
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 SqlUserDefinedFunctionGetProperties_Status_Resource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			sqlUserDefinedFunctionGetResultsStatus.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		sqlUserDefinedFunctionGetResultsStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			sqlUserDefinedFunctionGetResultsStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		sqlUserDefinedFunctionGetResultsStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlUserDefinedFunctionGetResultsStatus populates our SqlUserDefinedFunctionGetResults_Status from the provided source SqlUserDefinedFunctionGetResults_Status
func (sqlUserDefinedFunctionGetResultsStatus *SqlUserDefinedFunctionGetResults_Status) AssignPropertiesFromSqlUserDefinedFunctionGetResultsStatus(source *v1alpha1api20210515storage.SqlUserDefinedFunctionGetResults_Status) error {

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	sqlUserDefinedFunctionGetResultsStatus.Conditions = conditionList

	// Id
	if source.Id != nil {
		id := *source.Id
		sqlUserDefinedFunctionGetResultsStatus.Id = &id
	} else {
		sqlUserDefinedFunctionGetResultsStatus.Id = nil
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		sqlUserDefinedFunctionGetResultsStatus.Location = &location
	} else {
		sqlUserDefinedFunctionGetResultsStatus.Location = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		sqlUserDefinedFunctionGetResultsStatus.Name = &name
	} else {
		sqlUserDefinedFunctionGetResultsStatus.Name = nil
	}

	// Resource
	if source.Resource != nil {
		var resource SqlUserDefinedFunctionGetProperties_Status_Resource
		err := resource.AssignPropertiesFromSqlUserDefinedFunctionGetPropertiesStatusResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromSqlUserDefinedFunctionGetPropertiesStatusResource()")
		}
		sqlUserDefinedFunctionGetResultsStatus.Resource = &resource
	} else {
		sqlUserDefinedFunctionGetResultsStatus.Resource = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	sqlUserDefinedFunctionGetResultsStatus.Tags = tagMap

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		sqlUserDefinedFunctionGetResultsStatus.Type = &typeVar
	} else {
		sqlUserDefinedFunctionGetResultsStatus.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlUserDefinedFunctionGetResultsStatus populates the provided destination SqlUserDefinedFunctionGetResults_Status from our SqlUserDefinedFunctionGetResults_Status
func (sqlUserDefinedFunctionGetResultsStatus *SqlUserDefinedFunctionGetResults_Status) AssignPropertiesToSqlUserDefinedFunctionGetResultsStatus(destination *v1alpha1api20210515storage.SqlUserDefinedFunctionGetResults_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	conditionList := make([]conditions.Condition, len(sqlUserDefinedFunctionGetResultsStatus.Conditions))
	for conditionIndex, conditionItem := range sqlUserDefinedFunctionGetResultsStatus.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// Id
	if sqlUserDefinedFunctionGetResultsStatus.Id != nil {
		id := *sqlUserDefinedFunctionGetResultsStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Location
	if sqlUserDefinedFunctionGetResultsStatus.Location != nil {
		location := *sqlUserDefinedFunctionGetResultsStatus.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Name
	if sqlUserDefinedFunctionGetResultsStatus.Name != nil {
		name := *sqlUserDefinedFunctionGetResultsStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Resource
	if sqlUserDefinedFunctionGetResultsStatus.Resource != nil {
		var resource v1alpha1api20210515storage.SqlUserDefinedFunctionGetProperties_Status_Resource
		err := (*sqlUserDefinedFunctionGetResultsStatus.Resource).AssignPropertiesToSqlUserDefinedFunctionGetPropertiesStatusResource(&resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToSqlUserDefinedFunctionGetPropertiesStatusResource()")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range sqlUserDefinedFunctionGetResultsStatus.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Type
	if sqlUserDefinedFunctionGetResultsStatus.Type != nil {
		typeVar := *sqlUserDefinedFunctionGetResultsStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type SqlUserDefinedFunctionGetProperties_Status_Resource struct {
	//Body: Body of the User Defined Function
	Body *string `json:"body,omitempty"`

	//Etag: A system generated property representing the resource etag required for
	//optimistic concurrency control.
	Etag *string `json:"_etag,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB SQL userDefinedFunction
	Id string `json:"id"`

	//Rid: A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty"`

	//Ts: A system generated property that denotes the last updated timestamp of the
	//resource.
	Ts *float64 `json:"_ts,omitempty"`
}

var _ genruntime.FromARMConverter = &SqlUserDefinedFunctionGetProperties_Status_Resource{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlUserDefinedFunctionGetPropertiesStatusResource *SqlUserDefinedFunctionGetProperties_Status_Resource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlUserDefinedFunctionGetProperties_Status_ResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlUserDefinedFunctionGetPropertiesStatusResource *SqlUserDefinedFunctionGetProperties_Status_Resource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlUserDefinedFunctionGetProperties_Status_ResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlUserDefinedFunctionGetProperties_Status_ResourceARM, got %T", armInput)
	}

	// Set property ‘Body’:
	if typedInput.Body != nil {
		body := *typedInput.Body
		sqlUserDefinedFunctionGetPropertiesStatusResource.Body = &body
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		sqlUserDefinedFunctionGetPropertiesStatusResource.Etag = &etag
	}

	// Set property ‘Id’:
	sqlUserDefinedFunctionGetPropertiesStatusResource.Id = typedInput.Id

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		sqlUserDefinedFunctionGetPropertiesStatusResource.Rid = &rid
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		sqlUserDefinedFunctionGetPropertiesStatusResource.Ts = &ts
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlUserDefinedFunctionGetPropertiesStatusResource populates our SqlUserDefinedFunctionGetProperties_Status_Resource from the provided source SqlUserDefinedFunctionGetProperties_Status_Resource
func (sqlUserDefinedFunctionGetPropertiesStatusResource *SqlUserDefinedFunctionGetProperties_Status_Resource) AssignPropertiesFromSqlUserDefinedFunctionGetPropertiesStatusResource(source *v1alpha1api20210515storage.SqlUserDefinedFunctionGetProperties_Status_Resource) error {

	// Body
	if source.Body != nil {
		body := *source.Body
		sqlUserDefinedFunctionGetPropertiesStatusResource.Body = &body
	} else {
		sqlUserDefinedFunctionGetPropertiesStatusResource.Body = nil
	}

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		sqlUserDefinedFunctionGetPropertiesStatusResource.Etag = &etag
	} else {
		sqlUserDefinedFunctionGetPropertiesStatusResource.Etag = nil
	}

	// Id
	if source.Id != nil {
		sqlUserDefinedFunctionGetPropertiesStatusResource.Id = *source.Id
	} else {
		sqlUserDefinedFunctionGetPropertiesStatusResource.Id = ""
	}

	// Rid
	if source.Rid != nil {
		rid := *source.Rid
		sqlUserDefinedFunctionGetPropertiesStatusResource.Rid = &rid
	} else {
		sqlUserDefinedFunctionGetPropertiesStatusResource.Rid = nil
	}

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		sqlUserDefinedFunctionGetPropertiesStatusResource.Ts = &t
	} else {
		sqlUserDefinedFunctionGetPropertiesStatusResource.Ts = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlUserDefinedFunctionGetPropertiesStatusResource populates the provided destination SqlUserDefinedFunctionGetProperties_Status_Resource from our SqlUserDefinedFunctionGetProperties_Status_Resource
func (sqlUserDefinedFunctionGetPropertiesStatusResource *SqlUserDefinedFunctionGetProperties_Status_Resource) AssignPropertiesToSqlUserDefinedFunctionGetPropertiesStatusResource(destination *v1alpha1api20210515storage.SqlUserDefinedFunctionGetProperties_Status_Resource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Body
	if sqlUserDefinedFunctionGetPropertiesStatusResource.Body != nil {
		body := *sqlUserDefinedFunctionGetPropertiesStatusResource.Body
		destination.Body = &body
	} else {
		destination.Body = nil
	}

	// Etag
	if sqlUserDefinedFunctionGetPropertiesStatusResource.Etag != nil {
		etag := *sqlUserDefinedFunctionGetPropertiesStatusResource.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// Id
	id := sqlUserDefinedFunctionGetPropertiesStatusResource.Id
	destination.Id = &id

	// Rid
	if sqlUserDefinedFunctionGetPropertiesStatusResource.Rid != nil {
		rid := *sqlUserDefinedFunctionGetPropertiesStatusResource.Rid
		destination.Rid = &rid
	} else {
		destination.Rid = nil
	}

	// Ts
	if sqlUserDefinedFunctionGetPropertiesStatusResource.Ts != nil {
		t := *sqlUserDefinedFunctionGetPropertiesStatusResource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/SqlUserDefinedFunctionResource
type SqlUserDefinedFunctionResource struct {
	//Body: Body of the User Defined Function
	Body *string `json:"body,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB SQL userDefinedFunction
	Id string `json:"id"`
}

var _ genruntime.ARMTransformer = &SqlUserDefinedFunctionResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sqlUserDefinedFunctionResource *SqlUserDefinedFunctionResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sqlUserDefinedFunctionResource == nil {
		return nil, nil
	}
	var result SqlUserDefinedFunctionResourceARM

	// Set property ‘Body’:
	if sqlUserDefinedFunctionResource.Body != nil {
		body := *sqlUserDefinedFunctionResource.Body
		result.Body = &body
	}

	// Set property ‘Id’:
	result.Id = sqlUserDefinedFunctionResource.Id
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlUserDefinedFunctionResource *SqlUserDefinedFunctionResource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlUserDefinedFunctionResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlUserDefinedFunctionResource *SqlUserDefinedFunctionResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlUserDefinedFunctionResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlUserDefinedFunctionResourceARM, got %T", armInput)
	}

	// Set property ‘Body’:
	if typedInput.Body != nil {
		body := *typedInput.Body
		sqlUserDefinedFunctionResource.Body = &body
	}

	// Set property ‘Id’:
	sqlUserDefinedFunctionResource.Id = typedInput.Id

	// No error
	return nil
}

// AssignPropertiesFromSqlUserDefinedFunctionResource populates our SqlUserDefinedFunctionResource from the provided source SqlUserDefinedFunctionResource
func (sqlUserDefinedFunctionResource *SqlUserDefinedFunctionResource) AssignPropertiesFromSqlUserDefinedFunctionResource(source *v1alpha1api20210515storage.SqlUserDefinedFunctionResource) error {

	// Body
	if source.Body != nil {
		body := *source.Body
		sqlUserDefinedFunctionResource.Body = &body
	} else {
		sqlUserDefinedFunctionResource.Body = nil
	}

	// Id
	if source.Id != nil {
		sqlUserDefinedFunctionResource.Id = *source.Id
	} else {
		sqlUserDefinedFunctionResource.Id = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSqlUserDefinedFunctionResource populates the provided destination SqlUserDefinedFunctionResource from our SqlUserDefinedFunctionResource
func (sqlUserDefinedFunctionResource *SqlUserDefinedFunctionResource) AssignPropertiesToSqlUserDefinedFunctionResource(destination *v1alpha1api20210515storage.SqlUserDefinedFunctionResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Body
	if sqlUserDefinedFunctionResource.Body != nil {
		body := *sqlUserDefinedFunctionResource.Body
		destination.Body = &body
	} else {
		destination.Body = nil
	}

	// Id
	id := sqlUserDefinedFunctionResource.Id
	destination.Id = &id

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&SqlDatabaseContainerUserDefinedFunction{}, &SqlDatabaseContainerUserDefinedFunctionList{})
}
