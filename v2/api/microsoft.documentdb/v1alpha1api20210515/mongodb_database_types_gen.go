// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources=mongodbdatabases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources={mongodbdatabases/status,mongodbdatabases/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_mongodbDatabases
type MongodbDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsMongodbDatabases_Spec `json:"spec,omitempty"`
	Status            MongoDBDatabaseGetResults_Status      `json:"status,omitempty"`
}

var _ conditions.Conditioner = &MongodbDatabase{}

// GetConditions returns the conditions of the resource
func (mongodbDatabase *MongodbDatabase) GetConditions() conditions.Conditions {
	return mongodbDatabase.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (mongodbDatabase *MongodbDatabase) SetConditions(conditions conditions.Conditions) {
	mongodbDatabase.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-documentdb-azure-com-v1alpha1api20210515-mongodbdatabase,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=mongodbdatabases,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.mongodbdatabases.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &MongodbDatabase{}

// Default applies defaults to the MongodbDatabase resource
func (mongodbDatabase *MongodbDatabase) Default() {
	mongodbDatabase.defaultImpl()
	var temp interface{} = mongodbDatabase
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (mongodbDatabase *MongodbDatabase) defaultAzureName() {
	if mongodbDatabase.Spec.AzureName == "" {
		mongodbDatabase.Spec.AzureName = mongodbDatabase.Name
	}
}

// defaultImpl applies the code generated defaults to the MongodbDatabase resource
func (mongodbDatabase *MongodbDatabase) defaultImpl() { mongodbDatabase.defaultAzureName() }

var _ genruntime.KubernetesResource = &MongodbDatabase{}

// AzureName returns the Azure name of the resource
func (mongodbDatabase *MongodbDatabase) AzureName() string {
	return mongodbDatabase.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (mongodbDatabase *MongodbDatabase) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (mongodbDatabase *MongodbDatabase) GetSpec() genruntime.ConvertibleSpec {
	return &mongodbDatabase.Spec
}

// GetStatus returns the status of this resource
func (mongodbDatabase *MongodbDatabase) GetStatus() genruntime.ConvertibleStatus {
	return &mongodbDatabase.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases"
func (mongodbDatabase *MongodbDatabase) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases"
}

// NewEmptyStatus returns a new empty (blank) status
func (mongodbDatabase *MongodbDatabase) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &MongoDBDatabaseGetResults_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (mongodbDatabase *MongodbDatabase) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(mongodbDatabase.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: mongodbDatabase.Namespace,
		Name:      mongodbDatabase.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (mongodbDatabase *MongodbDatabase) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*MongoDBDatabaseGetResults_Status); ok {
		mongodbDatabase.Status = *st
		return nil
	}

	// Convert status to required version
	var st MongoDBDatabaseGetResults_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	mongodbDatabase.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-documentdb-azure-com-v1alpha1api20210515-mongodbdatabase,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=mongodbdatabases,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.mongodbdatabases.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &MongodbDatabase{}

// ValidateCreate validates the creation of the resource
func (mongodbDatabase *MongodbDatabase) ValidateCreate() error {
	validations := mongodbDatabase.createValidations()
	var temp interface{} = mongodbDatabase
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (mongodbDatabase *MongodbDatabase) ValidateDelete() error {
	validations := mongodbDatabase.deleteValidations()
	var temp interface{} = mongodbDatabase
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (mongodbDatabase *MongodbDatabase) ValidateUpdate(old runtime.Object) error {
	validations := mongodbDatabase.updateValidations()
	var temp interface{} = mongodbDatabase
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (mongodbDatabase *MongodbDatabase) createValidations() []func() error {
	return []func() error{mongodbDatabase.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (mongodbDatabase *MongodbDatabase) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (mongodbDatabase *MongodbDatabase) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return mongodbDatabase.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (mongodbDatabase *MongodbDatabase) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&mongodbDatabase.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromMongodbDatabase populates our MongodbDatabase from the provided source MongodbDatabase
func (mongodbDatabase *MongodbDatabase) AssignPropertiesFromMongodbDatabase(source *v1alpha1api20210515storage.MongodbDatabase) error {

	// Spec
	var spec DatabaseAccountsMongodbDatabases_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromDatabaseAccountsMongodbDatabasesSpec()")
	}
	mongodbDatabase.Spec = spec

	// Status
	var status MongoDBDatabaseGetResults_Status
	err = status.AssignPropertiesFromMongoDBDatabaseGetResultsStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromMongoDBDatabaseGetResultsStatus()")
	}
	mongodbDatabase.Status = status

	// No error
	return nil
}

// AssignPropertiesToMongodbDatabase populates the provided destination MongodbDatabase from our MongodbDatabase
func (mongodbDatabase *MongodbDatabase) AssignPropertiesToMongodbDatabase(destination *v1alpha1api20210515storage.MongodbDatabase) error {

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccountsMongodbDatabases_Spec
	err := mongodbDatabase.Spec.AssignPropertiesToDatabaseAccountsMongodbDatabasesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToDatabaseAccountsMongodbDatabasesSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.MongoDBDatabaseGetResults_Status
	err = mongodbDatabase.Status.AssignPropertiesToMongoDBDatabaseGetResultsStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToMongoDBDatabaseGetResultsStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (mongodbDatabase *MongodbDatabase) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: mongodbDatabase.Spec.OriginalVersion(),
		Kind:    "MongodbDatabase",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_mongodbDatabases
type MongodbDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbDatabase `json:"items"`
}

type DatabaseAccountsMongodbDatabases_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Options: CreateUpdateOptions are a list of key-value pairs that describe the
	//resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and
	//"Throughput"
	Options *CreateUpdateOptions `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.documentdb.azure.com" json:"owner" kind:"DatabaseAccount"`

	// +kubebuilder:validation:Required
	//Resource: Cosmos DB MongoDB database resource object
	Resource MongoDBDatabaseResource `json:"resource"`

	//Tags: Tags are a list of key-value pairs that describe the resource. These tags
	//can be used in viewing and grouping this resource (across resource groups). A
	//maximum of 15 tags can be provided for a resource. Each tag must have a key no
	//greater than 128 characters and value no greater than 256 characters. For
	//example, the default experience for a template type is set with
	//"defaultExperience": "Cassandra". Current "defaultExperience" values also
	//include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsMongodbDatabases_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (databaseAccountsMongodbDatabasesSpec *DatabaseAccountsMongodbDatabases_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if databaseAccountsMongodbDatabasesSpec == nil {
		return nil, nil
	}
	var result DatabaseAccountsMongodbDatabases_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = DatabaseAccountsMongodbDatabasesSpecAPIVersion20210515

	// Set property ‘Location’:
	if databaseAccountsMongodbDatabasesSpec.Location != nil {
		location := *databaseAccountsMongodbDatabasesSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if databaseAccountsMongodbDatabasesSpec.Options != nil {
		optionsARM, err := (*databaseAccountsMongodbDatabasesSpec.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := optionsARM.(CreateUpdateOptionsARM)
		result.Properties.Options = &options
	}
	resourceARM, err := databaseAccountsMongodbDatabasesSpec.Resource.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Resource = resourceARM.(MongoDBDatabaseResourceARM)

	// Set property ‘Tags’:
	if databaseAccountsMongodbDatabasesSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range databaseAccountsMongodbDatabasesSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = DatabaseAccountsMongodbDatabasesSpecTypeMicrosoftDocumentDBDatabaseAccountsMongodbDatabases
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (databaseAccountsMongodbDatabasesSpec *DatabaseAccountsMongodbDatabases_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsMongodbDatabases_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (databaseAccountsMongodbDatabasesSpec *DatabaseAccountsMongodbDatabases_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsMongodbDatabases_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsMongodbDatabases_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	databaseAccountsMongodbDatabasesSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		databaseAccountsMongodbDatabasesSpec.Location = &location
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties.Options != nil {
		var options1 CreateUpdateOptions
		err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
		if err != nil {
			return err
		}
		options := options1
		databaseAccountsMongodbDatabasesSpec.Options = &options
	}

	// Set property ‘Owner’:
	databaseAccountsMongodbDatabasesSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	var resource MongoDBDatabaseResource
	err := resource.PopulateFromARM(owner, typedInput.Properties.Resource)
	if err != nil {
		return err
	}
	databaseAccountsMongodbDatabasesSpec.Resource = resource

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		databaseAccountsMongodbDatabasesSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			databaseAccountsMongodbDatabasesSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsMongodbDatabases_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsMongodbDatabases_Spec from the provided source
func (databaseAccountsMongodbDatabasesSpec *DatabaseAccountsMongodbDatabases_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabases_Spec)
	if ok {
		// Populate our instance from source
		return databaseAccountsMongodbDatabasesSpec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabases_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = databaseAccountsMongodbDatabasesSpec.AssignPropertiesFromDatabaseAccountsMongodbDatabasesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsMongodbDatabases_Spec
func (databaseAccountsMongodbDatabasesSpec *DatabaseAccountsMongodbDatabases_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountsMongodbDatabases_Spec)
	if ok {
		// Populate destination from our instance
		return databaseAccountsMongodbDatabasesSpec.AssignPropertiesToDatabaseAccountsMongodbDatabasesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountsMongodbDatabases_Spec{}
	err := databaseAccountsMongodbDatabasesSpec.AssignPropertiesToDatabaseAccountsMongodbDatabasesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsMongodbDatabasesSpec populates our DatabaseAccountsMongodbDatabases_Spec from the provided source DatabaseAccountsMongodbDatabases_Spec
func (databaseAccountsMongodbDatabasesSpec *DatabaseAccountsMongodbDatabases_Spec) AssignPropertiesFromDatabaseAccountsMongodbDatabasesSpec(source *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabases_Spec) error {

	// AzureName
	databaseAccountsMongodbDatabasesSpec.AzureName = source.AzureName

	// Location
	if source.Location != nil {
		location := *source.Location
		databaseAccountsMongodbDatabasesSpec.Location = &location
	} else {
		databaseAccountsMongodbDatabasesSpec.Location = nil
	}

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignPropertiesFromCreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromCreateUpdateOptions()")
		}
		databaseAccountsMongodbDatabasesSpec.Options = &option
	} else {
		databaseAccountsMongodbDatabasesSpec.Options = nil
	}

	// Owner
	databaseAccountsMongodbDatabasesSpec.Owner = source.Owner.Copy()

	// Resource
	if source.Resource != nil {
		var resource MongoDBDatabaseResource
		err := resource.AssignPropertiesFromMongoDBDatabaseResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromMongoDBDatabaseResource()")
		}
		databaseAccountsMongodbDatabasesSpec.Resource = resource
	} else {
		databaseAccountsMongodbDatabasesSpec.Resource = MongoDBDatabaseResource{}
	}

	// Tags
	databaseAccountsMongodbDatabasesSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsMongodbDatabasesSpec populates the provided destination DatabaseAccountsMongodbDatabases_Spec from our DatabaseAccountsMongodbDatabases_Spec
func (databaseAccountsMongodbDatabasesSpec *DatabaseAccountsMongodbDatabases_Spec) AssignPropertiesToDatabaseAccountsMongodbDatabasesSpec(destination *v1alpha1api20210515storage.DatabaseAccountsMongodbDatabases_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = databaseAccountsMongodbDatabasesSpec.AzureName

	// Location
	if databaseAccountsMongodbDatabasesSpec.Location != nil {
		location := *databaseAccountsMongodbDatabasesSpec.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Options
	if databaseAccountsMongodbDatabasesSpec.Options != nil {
		var option v1alpha1api20210515storage.CreateUpdateOptions
		err := (*databaseAccountsMongodbDatabasesSpec.Options).AssignPropertiesToCreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToCreateUpdateOptions()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = databaseAccountsMongodbDatabasesSpec.OriginalVersion()

	// Owner
	destination.Owner = databaseAccountsMongodbDatabasesSpec.Owner.Copy()

	// Resource
	var resource v1alpha1api20210515storage.MongoDBDatabaseResource
	err := databaseAccountsMongodbDatabasesSpec.Resource.AssignPropertiesToMongoDBDatabaseResource(&resource)
	if err != nil {
		return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToMongoDBDatabaseResource()")
	}
	destination.Resource = &resource

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(databaseAccountsMongodbDatabasesSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (databaseAccountsMongodbDatabasesSpec *DatabaseAccountsMongodbDatabases_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (databaseAccountsMongodbDatabasesSpec *DatabaseAccountsMongodbDatabases_Spec) SetAzureName(azureName string) {
	databaseAccountsMongodbDatabasesSpec.AzureName = azureName
}

//Generated from:
type MongoDBDatabaseGetResults_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Name: The name of the ARM resource.
	Name     *string                                       `json:"name,omitempty"`
	Options  *OptionsResource_Status                       `json:"options,omitempty"`
	Resource *MongoDBDatabaseGetProperties_Status_Resource `json:"resource,omitempty"`
	Tags     map[string]string                             `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &MongoDBDatabaseGetResults_Status{}

// ConvertStatusFrom populates our MongoDBDatabaseGetResults_Status from the provided source
func (mongoDBDatabaseGetResultsStatus *MongoDBDatabaseGetResults_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.MongoDBDatabaseGetResults_Status)
	if ok {
		// Populate our instance from source
		return mongoDBDatabaseGetResultsStatus.AssignPropertiesFromMongoDBDatabaseGetResultsStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.MongoDBDatabaseGetResults_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = mongoDBDatabaseGetResultsStatus.AssignPropertiesFromMongoDBDatabaseGetResultsStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our MongoDBDatabaseGetResults_Status
func (mongoDBDatabaseGetResultsStatus *MongoDBDatabaseGetResults_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.MongoDBDatabaseGetResults_Status)
	if ok {
		// Populate destination from our instance
		return mongoDBDatabaseGetResultsStatus.AssignPropertiesToMongoDBDatabaseGetResultsStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.MongoDBDatabaseGetResults_Status{}
	err := mongoDBDatabaseGetResultsStatus.AssignPropertiesToMongoDBDatabaseGetResultsStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &MongoDBDatabaseGetResults_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoDBDatabaseGetResultsStatus *MongoDBDatabaseGetResults_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBDatabaseGetResults_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoDBDatabaseGetResultsStatus *MongoDBDatabaseGetResults_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBDatabaseGetResults_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBDatabaseGetResults_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		mongoDBDatabaseGetResultsStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		mongoDBDatabaseGetResultsStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		mongoDBDatabaseGetResultsStatus.Name = &name
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Options != nil {
			var options1 OptionsResource_Status
			err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
			if err != nil {
				return err
			}
			options := options1
			mongoDBDatabaseGetResultsStatus.Options = &options
		}
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 MongoDBDatabaseGetProperties_Status_Resource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			mongoDBDatabaseGetResultsStatus.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		mongoDBDatabaseGetResultsStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			mongoDBDatabaseGetResultsStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		mongoDBDatabaseGetResultsStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBDatabaseGetResultsStatus populates our MongoDBDatabaseGetResults_Status from the provided source MongoDBDatabaseGetResults_Status
func (mongoDBDatabaseGetResultsStatus *MongoDBDatabaseGetResults_Status) AssignPropertiesFromMongoDBDatabaseGetResultsStatus(source *v1alpha1api20210515storage.MongoDBDatabaseGetResults_Status) error {

	// Conditions
	if source.Conditions != nil {
		conditionList := make([]conditions.Condition, len(source.Conditions))
		for conditionIndex, conditionItem := range source.Conditions {
			// Shadow the loop variable to avoid aliasing
			conditionItem := conditionItem
			conditionList[conditionIndex] = conditionItem.Copy()
		}
		mongoDBDatabaseGetResultsStatus.Conditions = conditionList
	} else {
		mongoDBDatabaseGetResultsStatus.Conditions = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		mongoDBDatabaseGetResultsStatus.Id = &id
	} else {
		mongoDBDatabaseGetResultsStatus.Id = nil
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		mongoDBDatabaseGetResultsStatus.Location = &location
	} else {
		mongoDBDatabaseGetResultsStatus.Location = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		mongoDBDatabaseGetResultsStatus.Name = &name
	} else {
		mongoDBDatabaseGetResultsStatus.Name = nil
	}

	// Options
	if source.Options != nil {
		var option OptionsResource_Status
		err := option.AssignPropertiesFromOptionsResourceStatus(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromOptionsResourceStatus()")
		}
		mongoDBDatabaseGetResultsStatus.Options = &option
	} else {
		mongoDBDatabaseGetResultsStatus.Options = nil
	}

	// Resource
	if source.Resource != nil {
		var resource MongoDBDatabaseGetProperties_Status_Resource
		err := resource.AssignPropertiesFromMongoDBDatabaseGetPropertiesStatusResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromMongoDBDatabaseGetPropertiesStatusResource()")
		}
		mongoDBDatabaseGetResultsStatus.Resource = &resource
	} else {
		mongoDBDatabaseGetResultsStatus.Resource = nil
	}

	// Tags
	mongoDBDatabaseGetResultsStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		mongoDBDatabaseGetResultsStatus.Type = &typeVar
	} else {
		mongoDBDatabaseGetResultsStatus.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoDBDatabaseGetResultsStatus populates the provided destination MongoDBDatabaseGetResults_Status from our MongoDBDatabaseGetResults_Status
func (mongoDBDatabaseGetResultsStatus *MongoDBDatabaseGetResults_Status) AssignPropertiesToMongoDBDatabaseGetResultsStatus(destination *v1alpha1api20210515storage.MongoDBDatabaseGetResults_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	if mongoDBDatabaseGetResultsStatus.Conditions != nil {
		conditionList := make([]conditions.Condition, len(mongoDBDatabaseGetResultsStatus.Conditions))
		for conditionIndex, conditionItem := range mongoDBDatabaseGetResultsStatus.Conditions {
			// Shadow the loop variable to avoid aliasing
			conditionItem := conditionItem
			conditionList[conditionIndex] = conditionItem.Copy()
		}
		destination.Conditions = conditionList
	} else {
		destination.Conditions = nil
	}

	// Id
	if mongoDBDatabaseGetResultsStatus.Id != nil {
		id := *mongoDBDatabaseGetResultsStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Location
	if mongoDBDatabaseGetResultsStatus.Location != nil {
		location := *mongoDBDatabaseGetResultsStatus.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Name
	if mongoDBDatabaseGetResultsStatus.Name != nil {
		name := *mongoDBDatabaseGetResultsStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Options
	if mongoDBDatabaseGetResultsStatus.Options != nil {
		var option v1alpha1api20210515storage.OptionsResource_Status
		err := (*mongoDBDatabaseGetResultsStatus.Options).AssignPropertiesToOptionsResourceStatus(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToOptionsResourceStatus()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Resource
	if mongoDBDatabaseGetResultsStatus.Resource != nil {
		var resource v1alpha1api20210515storage.MongoDBDatabaseGetProperties_Status_Resource
		err := (*mongoDBDatabaseGetResultsStatus.Resource).AssignPropertiesToMongoDBDatabaseGetPropertiesStatusResource(&resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToMongoDBDatabaseGetPropertiesStatusResource()")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(mongoDBDatabaseGetResultsStatus.Tags)

	// Type
	if mongoDBDatabaseGetResultsStatus.Type != nil {
		typeVar := *mongoDBDatabaseGetResultsStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/CreateUpdateOptions
type CreateUpdateOptions struct {
	AutoscaleSettings *AutoscaleSettings `json:"autoscaleSettings,omitempty"`

	//Throughput: Request Units per second. For example, "throughput": 10000.
	Throughput *int `json:"throughput,omitempty"`
}

var _ genruntime.ARMTransformer = &CreateUpdateOptions{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (createUpdateOptions *CreateUpdateOptions) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if createUpdateOptions == nil {
		return nil, nil
	}
	var result CreateUpdateOptionsARM

	// Set property ‘AutoscaleSettings’:
	if createUpdateOptions.AutoscaleSettings != nil {
		autoscaleSettingsARM, err := (*createUpdateOptions.AutoscaleSettings).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoscaleSettings := autoscaleSettingsARM.(AutoscaleSettingsARM)
		result.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Throughput’:
	if createUpdateOptions.Throughput != nil {
		throughput := *createUpdateOptions.Throughput
		result.Throughput = &throughput
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (createUpdateOptions *CreateUpdateOptions) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &CreateUpdateOptionsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (createUpdateOptions *CreateUpdateOptions) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CreateUpdateOptionsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CreateUpdateOptionsARM, got %T", armInput)
	}

	// Set property ‘AutoscaleSettings’:
	if typedInput.AutoscaleSettings != nil {
		var autoscaleSettings1 AutoscaleSettings
		err := autoscaleSettings1.PopulateFromARM(owner, *typedInput.AutoscaleSettings)
		if err != nil {
			return err
		}
		autoscaleSettings := autoscaleSettings1
		createUpdateOptions.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Throughput’:
	if typedInput.Throughput != nil {
		throughput := *typedInput.Throughput
		createUpdateOptions.Throughput = &throughput
	}

	// No error
	return nil
}

// AssignPropertiesFromCreateUpdateOptions populates our CreateUpdateOptions from the provided source CreateUpdateOptions
func (createUpdateOptions *CreateUpdateOptions) AssignPropertiesFromCreateUpdateOptions(source *v1alpha1api20210515storage.CreateUpdateOptions) error {

	// AutoscaleSettings
	if source.AutoscaleSettings != nil {
		var autoscaleSetting AutoscaleSettings
		err := autoscaleSetting.AssignPropertiesFromAutoscaleSettings(source.AutoscaleSettings)
		if err != nil {
			return errors.Wrap(err, "populating AutoscaleSettings from AutoscaleSettings, calling AssignPropertiesFromAutoscaleSettings()")
		}
		createUpdateOptions.AutoscaleSettings = &autoscaleSetting
	} else {
		createUpdateOptions.AutoscaleSettings = nil
	}

	// Throughput
	if source.Throughput != nil {
		throughput := *source.Throughput
		createUpdateOptions.Throughput = &throughput
	} else {
		createUpdateOptions.Throughput = nil
	}

	// No error
	return nil
}

// AssignPropertiesToCreateUpdateOptions populates the provided destination CreateUpdateOptions from our CreateUpdateOptions
func (createUpdateOptions *CreateUpdateOptions) AssignPropertiesToCreateUpdateOptions(destination *v1alpha1api20210515storage.CreateUpdateOptions) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoscaleSettings
	if createUpdateOptions.AutoscaleSettings != nil {
		var autoscaleSetting v1alpha1api20210515storage.AutoscaleSettings
		err := (*createUpdateOptions.AutoscaleSettings).AssignPropertiesToAutoscaleSettings(&autoscaleSetting)
		if err != nil {
			return errors.Wrap(err, "populating AutoscaleSettings from AutoscaleSettings, calling AssignPropertiesToAutoscaleSettings()")
		}
		destination.AutoscaleSettings = &autoscaleSetting
	} else {
		destination.AutoscaleSettings = nil
	}

	// Throughput
	if createUpdateOptions.Throughput != nil {
		throughput := *createUpdateOptions.Throughput
		destination.Throughput = &throughput
	} else {
		destination.Throughput = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type MongoDBDatabaseGetProperties_Status_Resource struct {
	//Etag: A system generated property representing the resource etag required for
	//optimistic concurrency control.
	Etag *string `json:"_etag,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB MongoDB database
	Id string `json:"id"`

	//Rid: A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty"`

	//Ts: A system generated property that denotes the last updated timestamp of the
	//resource.
	Ts *float64 `json:"_ts,omitempty"`
}

var _ genruntime.FromARMConverter = &MongoDBDatabaseGetProperties_Status_Resource{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoDBDatabaseGetPropertiesStatusResource *MongoDBDatabaseGetProperties_Status_Resource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBDatabaseGetProperties_Status_ResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoDBDatabaseGetPropertiesStatusResource *MongoDBDatabaseGetProperties_Status_Resource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBDatabaseGetProperties_Status_ResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBDatabaseGetProperties_Status_ResourceARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		mongoDBDatabaseGetPropertiesStatusResource.Etag = &etag
	}

	// Set property ‘Id’:
	mongoDBDatabaseGetPropertiesStatusResource.Id = typedInput.Id

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		mongoDBDatabaseGetPropertiesStatusResource.Rid = &rid
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		mongoDBDatabaseGetPropertiesStatusResource.Ts = &ts
	}

	// No error
	return nil
}

// AssignPropertiesFromMongoDBDatabaseGetPropertiesStatusResource populates our MongoDBDatabaseGetProperties_Status_Resource from the provided source MongoDBDatabaseGetProperties_Status_Resource
func (mongoDBDatabaseGetPropertiesStatusResource *MongoDBDatabaseGetProperties_Status_Resource) AssignPropertiesFromMongoDBDatabaseGetPropertiesStatusResource(source *v1alpha1api20210515storage.MongoDBDatabaseGetProperties_Status_Resource) error {

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		mongoDBDatabaseGetPropertiesStatusResource.Etag = &etag
	} else {
		mongoDBDatabaseGetPropertiesStatusResource.Etag = nil
	}

	// Id
	if source.Id != nil {
		mongoDBDatabaseGetPropertiesStatusResource.Id = *source.Id
	} else {
		mongoDBDatabaseGetPropertiesStatusResource.Id = ""
	}

	// Rid
	if source.Rid != nil {
		rid := *source.Rid
		mongoDBDatabaseGetPropertiesStatusResource.Rid = &rid
	} else {
		mongoDBDatabaseGetPropertiesStatusResource.Rid = nil
	}

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		mongoDBDatabaseGetPropertiesStatusResource.Ts = &t
	} else {
		mongoDBDatabaseGetPropertiesStatusResource.Ts = nil
	}

	// No error
	return nil
}

// AssignPropertiesToMongoDBDatabaseGetPropertiesStatusResource populates the provided destination MongoDBDatabaseGetProperties_Status_Resource from our MongoDBDatabaseGetProperties_Status_Resource
func (mongoDBDatabaseGetPropertiesStatusResource *MongoDBDatabaseGetProperties_Status_Resource) AssignPropertiesToMongoDBDatabaseGetPropertiesStatusResource(destination *v1alpha1api20210515storage.MongoDBDatabaseGetProperties_Status_Resource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	if mongoDBDatabaseGetPropertiesStatusResource.Etag != nil {
		etag := *mongoDBDatabaseGetPropertiesStatusResource.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// Id
	id := mongoDBDatabaseGetPropertiesStatusResource.Id
	destination.Id = &id

	// Rid
	if mongoDBDatabaseGetPropertiesStatusResource.Rid != nil {
		rid := *mongoDBDatabaseGetPropertiesStatusResource.Rid
		destination.Rid = &rid
	} else {
		destination.Rid = nil
	}

	// Ts
	if mongoDBDatabaseGetPropertiesStatusResource.Ts != nil {
		t := *mongoDBDatabaseGetPropertiesStatusResource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/MongoDBDatabaseResource
type MongoDBDatabaseResource struct {
	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB MongoDB database
	Id string `json:"id"`
}

var _ genruntime.ARMTransformer = &MongoDBDatabaseResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (mongoDBDatabaseResource *MongoDBDatabaseResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if mongoDBDatabaseResource == nil {
		return nil, nil
	}
	var result MongoDBDatabaseResourceARM

	// Set property ‘Id’:
	result.Id = mongoDBDatabaseResource.Id
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (mongoDBDatabaseResource *MongoDBDatabaseResource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &MongoDBDatabaseResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (mongoDBDatabaseResource *MongoDBDatabaseResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(MongoDBDatabaseResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected MongoDBDatabaseResourceARM, got %T", armInput)
	}

	// Set property ‘Id’:
	mongoDBDatabaseResource.Id = typedInput.Id

	// No error
	return nil
}

// AssignPropertiesFromMongoDBDatabaseResource populates our MongoDBDatabaseResource from the provided source MongoDBDatabaseResource
func (mongoDBDatabaseResource *MongoDBDatabaseResource) AssignPropertiesFromMongoDBDatabaseResource(source *v1alpha1api20210515storage.MongoDBDatabaseResource) error {

	// Id
	if source.Id != nil {
		mongoDBDatabaseResource.Id = *source.Id
	} else {
		mongoDBDatabaseResource.Id = ""
	}

	// No error
	return nil
}

// AssignPropertiesToMongoDBDatabaseResource populates the provided destination MongoDBDatabaseResource from our MongoDBDatabaseResource
func (mongoDBDatabaseResource *MongoDBDatabaseResource) AssignPropertiesToMongoDBDatabaseResource(destination *v1alpha1api20210515storage.MongoDBDatabaseResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	id := mongoDBDatabaseResource.Id
	destination.Id = &id

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type OptionsResource_Status struct {
	//AutoscaleSettings: Specifies the Autoscale settings.
	AutoscaleSettings *AutoscaleSettings_Status `json:"autoscaleSettings,omitempty"`

	//Throughput: Value of the Cosmos DB resource throughput or autoscaleSettings. Use
	//the ThroughputSetting resource when retrieving offer details.
	Throughput *int `json:"throughput,omitempty"`
}

var _ genruntime.FromARMConverter = &OptionsResource_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (optionsResourceStatus *OptionsResource_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &OptionsResource_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (optionsResourceStatus *OptionsResource_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(OptionsResource_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected OptionsResource_StatusARM, got %T", armInput)
	}

	// Set property ‘AutoscaleSettings’:
	if typedInput.AutoscaleSettings != nil {
		var autoscaleSettings1 AutoscaleSettings_Status
		err := autoscaleSettings1.PopulateFromARM(owner, *typedInput.AutoscaleSettings)
		if err != nil {
			return err
		}
		autoscaleSettings := autoscaleSettings1
		optionsResourceStatus.AutoscaleSettings = &autoscaleSettings
	}

	// Set property ‘Throughput’:
	if typedInput.Throughput != nil {
		throughput := *typedInput.Throughput
		optionsResourceStatus.Throughput = &throughput
	}

	// No error
	return nil
}

// AssignPropertiesFromOptionsResourceStatus populates our OptionsResource_Status from the provided source OptionsResource_Status
func (optionsResourceStatus *OptionsResource_Status) AssignPropertiesFromOptionsResourceStatus(source *v1alpha1api20210515storage.OptionsResource_Status) error {

	// AutoscaleSettings
	if source.AutoscaleSettings != nil {
		var autoscaleSetting AutoscaleSettings_Status
		err := autoscaleSetting.AssignPropertiesFromAutoscaleSettingsStatus(source.AutoscaleSettings)
		if err != nil {
			return errors.Wrap(err, "populating AutoscaleSettings from AutoscaleSettings, calling AssignPropertiesFromAutoscaleSettingsStatus()")
		}
		optionsResourceStatus.AutoscaleSettings = &autoscaleSetting
	} else {
		optionsResourceStatus.AutoscaleSettings = nil
	}

	// Throughput
	if source.Throughput != nil {
		throughput := *source.Throughput
		optionsResourceStatus.Throughput = &throughput
	} else {
		optionsResourceStatus.Throughput = nil
	}

	// No error
	return nil
}

// AssignPropertiesToOptionsResourceStatus populates the provided destination OptionsResource_Status from our OptionsResource_Status
func (optionsResourceStatus *OptionsResource_Status) AssignPropertiesToOptionsResourceStatus(destination *v1alpha1api20210515storage.OptionsResource_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoscaleSettings
	if optionsResourceStatus.AutoscaleSettings != nil {
		var autoscaleSetting v1alpha1api20210515storage.AutoscaleSettings_Status
		err := (*optionsResourceStatus.AutoscaleSettings).AssignPropertiesToAutoscaleSettingsStatus(&autoscaleSetting)
		if err != nil {
			return errors.Wrap(err, "populating AutoscaleSettings from AutoscaleSettings, calling AssignPropertiesToAutoscaleSettingsStatus()")
		}
		destination.AutoscaleSettings = &autoscaleSetting
	} else {
		destination.AutoscaleSettings = nil
	}

	// Throughput
	if optionsResourceStatus.Throughput != nil {
		throughput := *optionsResourceStatus.Throughput
		destination.Throughput = &throughput
	} else {
		destination.Throughput = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/AutoscaleSettings
type AutoscaleSettings struct {
	//MaxThroughput: Represents maximum throughput, the resource can scale up to.
	MaxThroughput *int `json:"maxThroughput,omitempty"`
}

var _ genruntime.ARMTransformer = &AutoscaleSettings{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (autoscaleSettings *AutoscaleSettings) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if autoscaleSettings == nil {
		return nil, nil
	}
	var result AutoscaleSettingsARM

	// Set property ‘MaxThroughput’:
	if autoscaleSettings.MaxThroughput != nil {
		maxThroughput := *autoscaleSettings.MaxThroughput
		result.MaxThroughput = &maxThroughput
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (autoscaleSettings *AutoscaleSettings) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoscaleSettingsARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (autoscaleSettings *AutoscaleSettings) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoscaleSettingsARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoscaleSettingsARM, got %T", armInput)
	}

	// Set property ‘MaxThroughput’:
	if typedInput.MaxThroughput != nil {
		maxThroughput := *typedInput.MaxThroughput
		autoscaleSettings.MaxThroughput = &maxThroughput
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoscaleSettings populates our AutoscaleSettings from the provided source AutoscaleSettings
func (autoscaleSettings *AutoscaleSettings) AssignPropertiesFromAutoscaleSettings(source *v1alpha1api20210515storage.AutoscaleSettings) error {

	// MaxThroughput
	if source.MaxThroughput != nil {
		maxThroughput := *source.MaxThroughput
		autoscaleSettings.MaxThroughput = &maxThroughput
	} else {
		autoscaleSettings.MaxThroughput = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAutoscaleSettings populates the provided destination AutoscaleSettings from our AutoscaleSettings
func (autoscaleSettings *AutoscaleSettings) AssignPropertiesToAutoscaleSettings(destination *v1alpha1api20210515storage.AutoscaleSettings) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxThroughput
	if autoscaleSettings.MaxThroughput != nil {
		maxThroughput := *autoscaleSettings.MaxThroughput
		destination.MaxThroughput = &maxThroughput
	} else {
		destination.MaxThroughput = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type AutoscaleSettings_Status struct {
	//MaxThroughput: Represents maximum throughput, the resource can scale up to.
	MaxThroughput *int `json:"maxThroughput,omitempty"`
}

var _ genruntime.FromARMConverter = &AutoscaleSettings_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (autoscaleSettingsStatus *AutoscaleSettings_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoscaleSettings_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (autoscaleSettingsStatus *AutoscaleSettings_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoscaleSettings_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoscaleSettings_StatusARM, got %T", armInput)
	}

	// Set property ‘MaxThroughput’:
	if typedInput.MaxThroughput != nil {
		maxThroughput := *typedInput.MaxThroughput
		autoscaleSettingsStatus.MaxThroughput = &maxThroughput
	}

	// No error
	return nil
}

// AssignPropertiesFromAutoscaleSettingsStatus populates our AutoscaleSettings_Status from the provided source AutoscaleSettings_Status
func (autoscaleSettingsStatus *AutoscaleSettings_Status) AssignPropertiesFromAutoscaleSettingsStatus(source *v1alpha1api20210515storage.AutoscaleSettings_Status) error {

	// MaxThroughput
	if source.MaxThroughput != nil {
		maxThroughput := *source.MaxThroughput
		autoscaleSettingsStatus.MaxThroughput = &maxThroughput
	} else {
		autoscaleSettingsStatus.MaxThroughput = nil
	}

	// No error
	return nil
}

// AssignPropertiesToAutoscaleSettingsStatus populates the provided destination AutoscaleSettings_Status from our AutoscaleSettings_Status
func (autoscaleSettingsStatus *AutoscaleSettings_Status) AssignPropertiesToAutoscaleSettingsStatus(destination *v1alpha1api20210515storage.AutoscaleSettings_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MaxThroughput
	if autoscaleSettingsStatus.MaxThroughput != nil {
		maxThroughput := *autoscaleSettingsStatus.MaxThroughput
		destination.MaxThroughput = &maxThroughput
	} else {
		destination.MaxThroughput = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&MongodbDatabase{}, &MongodbDatabaseList{})
}
