// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources=sqldatabasecontainerstoredprocedures,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources={sqldatabasecontainerstoredprocedures/status,sqldatabasecontainerstoredprocedures/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_sqlDatabases_containers_storedProcedures
type SqlDatabaseContainerStoredProcedure struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec `json:"spec,omitempty"`
	Status            SqlStoredProcedureGetResults_Status                         `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SqlDatabaseContainerStoredProcedure{}

// GetConditions returns the conditions of the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) GetConditions() conditions.Conditions {
	return sqlDatabaseContainerStoredProcedure.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) SetConditions(conditions conditions.Conditions) {
	sqlDatabaseContainerStoredProcedure.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontainerstoredprocedure,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=sqldatabasecontainerstoredprocedures,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.sqldatabasecontainerstoredprocedures.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &SqlDatabaseContainerStoredProcedure{}

// Default applies defaults to the SqlDatabaseContainerStoredProcedure resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) Default() {
	sqlDatabaseContainerStoredProcedure.defaultImpl()
	var temp interface{} = sqlDatabaseContainerStoredProcedure
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) defaultAzureName() {
	if sqlDatabaseContainerStoredProcedure.Spec.AzureName == "" {
		sqlDatabaseContainerStoredProcedure.Spec.AzureName = sqlDatabaseContainerStoredProcedure.Name
	}
}

// defaultImpl applies the code generated defaults to the SqlDatabaseContainerStoredProcedure resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) defaultImpl() {
	sqlDatabaseContainerStoredProcedure.defaultAzureName()
}

var _ genruntime.KubernetesResource = &SqlDatabaseContainerStoredProcedure{}

// AzureName returns the Azure name of the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) AzureName() string {
	return sqlDatabaseContainerStoredProcedure.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) GetSpec() genruntime.ConvertibleSpec {
	return &sqlDatabaseContainerStoredProcedure.Spec
}

// GetStatus returns the status of this resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) GetStatus() genruntime.ConvertibleStatus {
	return &sqlDatabaseContainerStoredProcedure.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/storedProcedures"
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/storedProcedures"
}

// NewEmptyStatus returns a new empty (blank) status
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SqlStoredProcedureGetResults_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(sqlDatabaseContainerStoredProcedure.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: sqlDatabaseContainerStoredProcedure.Namespace,
		Name:      sqlDatabaseContainerStoredProcedure.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SqlStoredProcedureGetResults_Status); ok {
		sqlDatabaseContainerStoredProcedure.Status = *st
		return nil
	}

	// Convert status to required version
	var st SqlStoredProcedureGetResults_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	sqlDatabaseContainerStoredProcedure.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontainerstoredprocedure,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=sqldatabasecontainerstoredprocedures,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.sqldatabasecontainerstoredprocedures.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &SqlDatabaseContainerStoredProcedure{}

// ValidateCreate validates the creation of the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) ValidateCreate() error {
	validations := sqlDatabaseContainerStoredProcedure.createValidations()
	var temp interface{} = sqlDatabaseContainerStoredProcedure
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) ValidateDelete() error {
	validations := sqlDatabaseContainerStoredProcedure.deleteValidations()
	var temp interface{} = sqlDatabaseContainerStoredProcedure
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) ValidateUpdate(old runtime.Object) error {
	validations := sqlDatabaseContainerStoredProcedure.updateValidations()
	var temp interface{} = sqlDatabaseContainerStoredProcedure
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) createValidations() []func() error {
	return []func() error{sqlDatabaseContainerStoredProcedure.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return sqlDatabaseContainerStoredProcedure.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&sqlDatabaseContainerStoredProcedure.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromSqlDatabaseContainerStoredProcedure populates our SqlDatabaseContainerStoredProcedure from the provided source SqlDatabaseContainerStoredProcedure
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) AssignPropertiesFromSqlDatabaseContainerStoredProcedure(source *v1alpha1api20210515storage.SqlDatabaseContainerStoredProcedure) error {

	// Spec
	var spec DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec()")
	}
	sqlDatabaseContainerStoredProcedure.Spec = spec

	// Status
	var status SqlStoredProcedureGetResults_Status
	err = status.AssignPropertiesFromSqlStoredProcedureGetResultsStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromSqlStoredProcedureGetResultsStatus()")
	}
	sqlDatabaseContainerStoredProcedure.Status = status

	// No error
	return nil
}

// AssignPropertiesToSqlDatabaseContainerStoredProcedure populates the provided destination SqlDatabaseContainerStoredProcedure from our SqlDatabaseContainerStoredProcedure
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) AssignPropertiesToSqlDatabaseContainerStoredProcedure(destination *v1alpha1api20210515storage.SqlDatabaseContainerStoredProcedure) error {

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec
	err := sqlDatabaseContainerStoredProcedure.Spec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.SqlStoredProcedureGetResults_Status
	err = sqlDatabaseContainerStoredProcedure.Status.AssignPropertiesToSqlStoredProcedureGetResultsStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToSqlStoredProcedureGetResultsStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (sqlDatabaseContainerStoredProcedure *SqlDatabaseContainerStoredProcedure) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: sqlDatabaseContainerStoredProcedure.Spec.OriginalVersion(),
		Kind:    "SqlDatabaseContainerStoredProcedure",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_sqlDatabases_containers_storedProcedures
type SqlDatabaseContainerStoredProcedureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlDatabaseContainerStoredProcedure `json:"items"`
}

type DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Options: CreateUpdateOptions are a list of key-value pairs that describe the
	//resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and
	//"Throughput"
	Options *CreateUpdateOptions `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.documentdb.azure.com" json:"owner" kind:"SqlDatabaseContainer"`

	// +kubebuilder:validation:Required
	//Resource: Cosmos DB SQL storedProcedure resource object
	Resource SqlStoredProcedureResource `json:"resource"`

	//Tags: Tags are a list of key-value pairs that describe the resource. These tags
	//can be used in viewing and grouping this resource (across resource groups). A
	//maximum of 15 tags can be provided for a resource. Each tag must have a key no
	//greater than 128 characters and value no greater than 256 characters. For
	//example, the default experience for a template type is set with
	//"defaultExperience": "Cassandra". Current "defaultExperience" values also
	//include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (databaseAccountsSqlDatabasesContainersStoredProceduresSpec *DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if databaseAccountsSqlDatabasesContainersStoredProceduresSpec == nil {
		return nil, nil
	}
	var result DatabaseAccountsSqlDatabasesContainersStoredProcedures_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = DatabaseAccountsSqlDatabasesContainersStoredProceduresSpecAPIVersion20210515

	// Set property ‘Location’:
	if databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Location != nil {
		location := *databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Options != nil {
		optionsARM, err := (*databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := optionsARM.(CreateUpdateOptionsARM)
		result.Properties.Options = &options
	}
	resourceARM, err := databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Resource.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Resource = resourceARM.(SqlStoredProcedureResourceARM)

	// Set property ‘Tags’:
	if databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = DatabaseAccountsSqlDatabasesContainersStoredProceduresSpecTypeMicrosoftDocumentDBDatabaseAccountsSqlDatabasesContainersStoredProcedures
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (databaseAccountsSqlDatabasesContainersStoredProceduresSpec *DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsSqlDatabasesContainersStoredProcedures_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (databaseAccountsSqlDatabasesContainersStoredProceduresSpec *DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsSqlDatabasesContainersStoredProcedures_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsSqlDatabasesContainersStoredProcedures_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	databaseAccountsSqlDatabasesContainersStoredProceduresSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Location = &location
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties.Options != nil {
		var options1 CreateUpdateOptions
		err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
		if err != nil {
			return err
		}
		options := options1
		databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Options = &options
	}

	// Set property ‘Owner’:
	databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	var resource SqlStoredProcedureResource
	err := resource.PopulateFromARM(owner, typedInput.Properties.Resource)
	if err != nil {
		return err
	}
	databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Resource = resource

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec from the provided source
func (databaseAccountsSqlDatabasesContainersStoredProceduresSpec *DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec)
	if ok {
		// Populate our instance from source
		return databaseAccountsSqlDatabasesContainersStoredProceduresSpec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = databaseAccountsSqlDatabasesContainersStoredProceduresSpec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec
func (databaseAccountsSqlDatabasesContainersStoredProceduresSpec *DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec)
	if ok {
		// Populate destination from our instance
		return databaseAccountsSqlDatabasesContainersStoredProceduresSpec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec{}
	err := databaseAccountsSqlDatabasesContainersStoredProceduresSpec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec populates our DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec from the provided source DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec
func (databaseAccountsSqlDatabasesContainersStoredProceduresSpec *DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec(source *v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) error {

	// AzureName
	databaseAccountsSqlDatabasesContainersStoredProceduresSpec.AzureName = source.AzureName

	// Location
	if source.Location != nil {
		location := *source.Location
		databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Location = &location
	} else {
		databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Location = nil
	}

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignPropertiesFromCreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromCreateUpdateOptions()")
		}
		databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Options = &option
	} else {
		databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Options = nil
	}

	// Owner
	databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Owner = source.Owner.Copy()

	// Resource
	if source.Resource != nil {
		var resource SqlStoredProcedureResource
		err := resource.AssignPropertiesFromSqlStoredProcedureResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromSqlStoredProcedureResource()")
		}
		databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Resource = resource
	} else {
		databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Resource = SqlStoredProcedureResource{}
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Tags = tagMap

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec populates the provided destination DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec from our DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec
func (databaseAccountsSqlDatabasesContainersStoredProceduresSpec *DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) AssignPropertiesToDatabaseAccountsSqlDatabasesContainersStoredProceduresSpec(destination *v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = databaseAccountsSqlDatabasesContainersStoredProceduresSpec.AzureName

	// Location
	if databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Location != nil {
		location := *databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Options
	if databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Options != nil {
		var option v1alpha1api20210515storage.CreateUpdateOptions
		err := (*databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Options).AssignPropertiesToCreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToCreateUpdateOptions()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = databaseAccountsSqlDatabasesContainersStoredProceduresSpec.OriginalVersion()

	// Owner
	destination.Owner = databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Owner.Copy()

	// Resource
	var resource v1alpha1api20210515storage.SqlStoredProcedureResource
	err := databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Resource.AssignPropertiesToSqlStoredProcedureResource(&resource)
	if err != nil {
		return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToSqlStoredProcedureResource()")
	}
	destination.Resource = &resource

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range databaseAccountsSqlDatabasesContainersStoredProceduresSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (databaseAccountsSqlDatabasesContainersStoredProceduresSpec *DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (databaseAccountsSqlDatabasesContainersStoredProceduresSpec *DatabaseAccountsSqlDatabasesContainersStoredProcedures_Spec) SetAzureName(azureName string) {
	databaseAccountsSqlDatabasesContainersStoredProceduresSpec.AzureName = azureName
}

//Generated from:
type SqlStoredProcedureGetResults_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Name: The name of the ARM resource.
	Name     *string                                          `json:"name,omitempty"`
	Resource *SqlStoredProcedureGetProperties_Status_Resource `json:"resource,omitempty"`
	Tags     map[string]string                                `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SqlStoredProcedureGetResults_Status{}

// ConvertStatusFrom populates our SqlStoredProcedureGetResults_Status from the provided source
func (sqlStoredProcedureGetResultsStatus *SqlStoredProcedureGetResults_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.SqlStoredProcedureGetResults_Status)
	if ok {
		// Populate our instance from source
		return sqlStoredProcedureGetResultsStatus.AssignPropertiesFromSqlStoredProcedureGetResultsStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.SqlStoredProcedureGetResults_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = sqlStoredProcedureGetResultsStatus.AssignPropertiesFromSqlStoredProcedureGetResultsStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SqlStoredProcedureGetResults_Status
func (sqlStoredProcedureGetResultsStatus *SqlStoredProcedureGetResults_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.SqlStoredProcedureGetResults_Status)
	if ok {
		// Populate destination from our instance
		return sqlStoredProcedureGetResultsStatus.AssignPropertiesToSqlStoredProcedureGetResultsStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.SqlStoredProcedureGetResults_Status{}
	err := sqlStoredProcedureGetResultsStatus.AssignPropertiesToSqlStoredProcedureGetResultsStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SqlStoredProcedureGetResults_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlStoredProcedureGetResultsStatus *SqlStoredProcedureGetResults_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlStoredProcedureGetResults_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlStoredProcedureGetResultsStatus *SqlStoredProcedureGetResults_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlStoredProcedureGetResults_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlStoredProcedureGetResults_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		sqlStoredProcedureGetResultsStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		sqlStoredProcedureGetResultsStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sqlStoredProcedureGetResultsStatus.Name = &name
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 SqlStoredProcedureGetProperties_Status_Resource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			sqlStoredProcedureGetResultsStatus.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		sqlStoredProcedureGetResultsStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			sqlStoredProcedureGetResultsStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		sqlStoredProcedureGetResultsStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlStoredProcedureGetResultsStatus populates our SqlStoredProcedureGetResults_Status from the provided source SqlStoredProcedureGetResults_Status
func (sqlStoredProcedureGetResultsStatus *SqlStoredProcedureGetResults_Status) AssignPropertiesFromSqlStoredProcedureGetResultsStatus(source *v1alpha1api20210515storage.SqlStoredProcedureGetResults_Status) error {

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	sqlStoredProcedureGetResultsStatus.Conditions = conditionList

	// Id
	if source.Id != nil {
		id := *source.Id
		sqlStoredProcedureGetResultsStatus.Id = &id
	} else {
		sqlStoredProcedureGetResultsStatus.Id = nil
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		sqlStoredProcedureGetResultsStatus.Location = &location
	} else {
		sqlStoredProcedureGetResultsStatus.Location = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		sqlStoredProcedureGetResultsStatus.Name = &name
	} else {
		sqlStoredProcedureGetResultsStatus.Name = nil
	}

	// Resource
	if source.Resource != nil {
		var resource SqlStoredProcedureGetProperties_Status_Resource
		err := resource.AssignPropertiesFromSqlStoredProcedureGetPropertiesStatusResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromSqlStoredProcedureGetPropertiesStatusResource()")
		}
		sqlStoredProcedureGetResultsStatus.Resource = &resource
	} else {
		sqlStoredProcedureGetResultsStatus.Resource = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	sqlStoredProcedureGetResultsStatus.Tags = tagMap

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		sqlStoredProcedureGetResultsStatus.Type = &typeVar
	} else {
		sqlStoredProcedureGetResultsStatus.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlStoredProcedureGetResultsStatus populates the provided destination SqlStoredProcedureGetResults_Status from our SqlStoredProcedureGetResults_Status
func (sqlStoredProcedureGetResultsStatus *SqlStoredProcedureGetResults_Status) AssignPropertiesToSqlStoredProcedureGetResultsStatus(destination *v1alpha1api20210515storage.SqlStoredProcedureGetResults_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	conditionList := make([]conditions.Condition, len(sqlStoredProcedureGetResultsStatus.Conditions))
	for conditionIndex, conditionItem := range sqlStoredProcedureGetResultsStatus.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// Id
	if sqlStoredProcedureGetResultsStatus.Id != nil {
		id := *sqlStoredProcedureGetResultsStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Location
	if sqlStoredProcedureGetResultsStatus.Location != nil {
		location := *sqlStoredProcedureGetResultsStatus.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// Name
	if sqlStoredProcedureGetResultsStatus.Name != nil {
		name := *sqlStoredProcedureGetResultsStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Resource
	if sqlStoredProcedureGetResultsStatus.Resource != nil {
		var resource v1alpha1api20210515storage.SqlStoredProcedureGetProperties_Status_Resource
		err := (*sqlStoredProcedureGetResultsStatus.Resource).AssignPropertiesToSqlStoredProcedureGetPropertiesStatusResource(&resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToSqlStoredProcedureGetPropertiesStatusResource()")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range sqlStoredProcedureGetResultsStatus.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Type
	if sqlStoredProcedureGetResultsStatus.Type != nil {
		typeVar := *sqlStoredProcedureGetResultsStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type SqlStoredProcedureGetProperties_Status_Resource struct {
	//Body: Body of the Stored Procedure
	Body *string `json:"body,omitempty"`

	//Etag: A system generated property representing the resource etag required for
	//optimistic concurrency control.
	Etag *string `json:"_etag,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB SQL storedProcedure
	Id string `json:"id"`

	//Rid: A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty"`

	//Ts: A system generated property that denotes the last updated timestamp of the
	//resource.
	Ts *float64 `json:"_ts,omitempty"`
}

var _ genruntime.FromARMConverter = &SqlStoredProcedureGetProperties_Status_Resource{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlStoredProcedureGetPropertiesStatusResource *SqlStoredProcedureGetProperties_Status_Resource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlStoredProcedureGetProperties_Status_ResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlStoredProcedureGetPropertiesStatusResource *SqlStoredProcedureGetProperties_Status_Resource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlStoredProcedureGetProperties_Status_ResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlStoredProcedureGetProperties_Status_ResourceARM, got %T", armInput)
	}

	// Set property ‘Body’:
	if typedInput.Body != nil {
		body := *typedInput.Body
		sqlStoredProcedureGetPropertiesStatusResource.Body = &body
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		sqlStoredProcedureGetPropertiesStatusResource.Etag = &etag
	}

	// Set property ‘Id’:
	sqlStoredProcedureGetPropertiesStatusResource.Id = typedInput.Id

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		sqlStoredProcedureGetPropertiesStatusResource.Rid = &rid
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		sqlStoredProcedureGetPropertiesStatusResource.Ts = &ts
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlStoredProcedureGetPropertiesStatusResource populates our SqlStoredProcedureGetProperties_Status_Resource from the provided source SqlStoredProcedureGetProperties_Status_Resource
func (sqlStoredProcedureGetPropertiesStatusResource *SqlStoredProcedureGetProperties_Status_Resource) AssignPropertiesFromSqlStoredProcedureGetPropertiesStatusResource(source *v1alpha1api20210515storage.SqlStoredProcedureGetProperties_Status_Resource) error {

	// Body
	if source.Body != nil {
		body := *source.Body
		sqlStoredProcedureGetPropertiesStatusResource.Body = &body
	} else {
		sqlStoredProcedureGetPropertiesStatusResource.Body = nil
	}

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		sqlStoredProcedureGetPropertiesStatusResource.Etag = &etag
	} else {
		sqlStoredProcedureGetPropertiesStatusResource.Etag = nil
	}

	// Id
	if source.Id != nil {
		sqlStoredProcedureGetPropertiesStatusResource.Id = *source.Id
	} else {
		sqlStoredProcedureGetPropertiesStatusResource.Id = ""
	}

	// Rid
	if source.Rid != nil {
		rid := *source.Rid
		sqlStoredProcedureGetPropertiesStatusResource.Rid = &rid
	} else {
		sqlStoredProcedureGetPropertiesStatusResource.Rid = nil
	}

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		sqlStoredProcedureGetPropertiesStatusResource.Ts = &t
	} else {
		sqlStoredProcedureGetPropertiesStatusResource.Ts = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlStoredProcedureGetPropertiesStatusResource populates the provided destination SqlStoredProcedureGetProperties_Status_Resource from our SqlStoredProcedureGetProperties_Status_Resource
func (sqlStoredProcedureGetPropertiesStatusResource *SqlStoredProcedureGetProperties_Status_Resource) AssignPropertiesToSqlStoredProcedureGetPropertiesStatusResource(destination *v1alpha1api20210515storage.SqlStoredProcedureGetProperties_Status_Resource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Body
	if sqlStoredProcedureGetPropertiesStatusResource.Body != nil {
		body := *sqlStoredProcedureGetPropertiesStatusResource.Body
		destination.Body = &body
	} else {
		destination.Body = nil
	}

	// Etag
	if sqlStoredProcedureGetPropertiesStatusResource.Etag != nil {
		etag := *sqlStoredProcedureGetPropertiesStatusResource.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// Id
	id := sqlStoredProcedureGetPropertiesStatusResource.Id
	destination.Id = &id

	// Rid
	if sqlStoredProcedureGetPropertiesStatusResource.Rid != nil {
		rid := *sqlStoredProcedureGetPropertiesStatusResource.Rid
		destination.Rid = &rid
	} else {
		destination.Rid = nil
	}

	// Ts
	if sqlStoredProcedureGetPropertiesStatusResource.Ts != nil {
		t := *sqlStoredProcedureGetPropertiesStatusResource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/SqlStoredProcedureResource
type SqlStoredProcedureResource struct {
	//Body: Body of the Stored Procedure
	Body *string `json:"body,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB SQL storedProcedure
	Id string `json:"id"`
}

var _ genruntime.ARMTransformer = &SqlStoredProcedureResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sqlStoredProcedureResource *SqlStoredProcedureResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sqlStoredProcedureResource == nil {
		return nil, nil
	}
	var result SqlStoredProcedureResourceARM

	// Set property ‘Body’:
	if sqlStoredProcedureResource.Body != nil {
		body := *sqlStoredProcedureResource.Body
		result.Body = &body
	}

	// Set property ‘Id’:
	result.Id = sqlStoredProcedureResource.Id
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlStoredProcedureResource *SqlStoredProcedureResource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlStoredProcedureResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlStoredProcedureResource *SqlStoredProcedureResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlStoredProcedureResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlStoredProcedureResourceARM, got %T", armInput)
	}

	// Set property ‘Body’:
	if typedInput.Body != nil {
		body := *typedInput.Body
		sqlStoredProcedureResource.Body = &body
	}

	// Set property ‘Id’:
	sqlStoredProcedureResource.Id = typedInput.Id

	// No error
	return nil
}

// AssignPropertiesFromSqlStoredProcedureResource populates our SqlStoredProcedureResource from the provided source SqlStoredProcedureResource
func (sqlStoredProcedureResource *SqlStoredProcedureResource) AssignPropertiesFromSqlStoredProcedureResource(source *v1alpha1api20210515storage.SqlStoredProcedureResource) error {

	// Body
	if source.Body != nil {
		body := *source.Body
		sqlStoredProcedureResource.Body = &body
	} else {
		sqlStoredProcedureResource.Body = nil
	}

	// Id
	if source.Id != nil {
		sqlStoredProcedureResource.Id = *source.Id
	} else {
		sqlStoredProcedureResource.Id = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSqlStoredProcedureResource populates the provided destination SqlStoredProcedureResource from our SqlStoredProcedureResource
func (sqlStoredProcedureResource *SqlStoredProcedureResource) AssignPropertiesToSqlStoredProcedureResource(destination *v1alpha1api20210515storage.SqlStoredProcedureResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Body
	if sqlStoredProcedureResource.Body != nil {
		body := *sqlStoredProcedureResource.Body
		destination.Body = &body
	} else {
		destination.Body = nil
	}

	// Id
	id := sqlStoredProcedureResource.Id
	destination.Id = &id

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&SqlDatabaseContainerStoredProcedure{}, &SqlDatabaseContainerStoredProcedureList{})
}
