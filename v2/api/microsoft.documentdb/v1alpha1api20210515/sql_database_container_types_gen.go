// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210515

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.documentdb/v1alpha1api20210515storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources=sqldatabasecontainers,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.documentdb.azure.com,resources={sqldatabasecontainers/status,sqldatabasecontainers/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_sqlDatabases_containers
type SqlDatabaseContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseAccountsSqlDatabasesContainers_Spec `json:"spec,omitempty"`
	Status            SqlContainerGetResults_Status               `json:"status,omitempty"`
}

var _ conditions.Conditioner = &SqlDatabaseContainer{}

// GetConditions returns the conditions of the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) GetConditions() conditions.Conditions {
	return sqlDatabaseContainer.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (sqlDatabaseContainer *SqlDatabaseContainer) SetConditions(conditions conditions.Conditions) {
	sqlDatabaseContainer.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontainer,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=sqldatabasecontainers,verbs=create;update,versions=v1alpha1api20210515,name=default.v1alpha1api20210515.sqldatabasecontainers.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &SqlDatabaseContainer{}

// Default applies defaults to the SqlDatabaseContainer resource
func (sqlDatabaseContainer *SqlDatabaseContainer) Default() {
	sqlDatabaseContainer.defaultImpl()
	var temp interface{} = sqlDatabaseContainer
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (sqlDatabaseContainer *SqlDatabaseContainer) defaultAzureName() {
	if sqlDatabaseContainer.Spec.AzureName == "" {
		sqlDatabaseContainer.Spec.AzureName = sqlDatabaseContainer.Name
	}
}

// defaultImpl applies the code generated defaults to the SqlDatabaseContainer resource
func (sqlDatabaseContainer *SqlDatabaseContainer) defaultImpl() {
	sqlDatabaseContainer.defaultAzureName()
}

var _ genruntime.KubernetesResource = &SqlDatabaseContainer{}

// AzureName returns the Azure name of the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) AzureName() string {
	return sqlDatabaseContainer.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (sqlDatabaseContainer *SqlDatabaseContainer) GetSpec() genruntime.ConvertibleSpec {
	return &sqlDatabaseContainer.Spec
}

// GetStatus returns the status of this resource
func (sqlDatabaseContainer *SqlDatabaseContainer) GetStatus() genruntime.ConvertibleStatus {
	return &sqlDatabaseContainer.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
func (sqlDatabaseContainer *SqlDatabaseContainer) GetType() string {
	return "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers"
}

// NewEmptyStatus returns a new empty (blank) status
func (sqlDatabaseContainer *SqlDatabaseContainer) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &SqlContainerGetResults_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (sqlDatabaseContainer *SqlDatabaseContainer) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(sqlDatabaseContainer.Spec)
	return &genruntime.ResourceReference{
		Group:     group,
		Kind:      kind,
		Namespace: sqlDatabaseContainer.Namespace,
		Name:      sqlDatabaseContainer.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (sqlDatabaseContainer *SqlDatabaseContainer) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*SqlContainerGetResults_Status); ok {
		sqlDatabaseContainer.Status = *st
		return nil
	}

	// Convert status to required version
	var st SqlContainerGetResults_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	sqlDatabaseContainer.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-documentdb-azure-com-v1alpha1api20210515-sqldatabasecontainer,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.documentdb.azure.com,resources=sqldatabasecontainers,verbs=create;update,versions=v1alpha1api20210515,name=validate.v1alpha1api20210515.sqldatabasecontainers.microsoft.documentdb.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &SqlDatabaseContainer{}

// ValidateCreate validates the creation of the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) ValidateCreate() error {
	validations := sqlDatabaseContainer.createValidations()
	var temp interface{} = sqlDatabaseContainer
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) ValidateDelete() error {
	validations := sqlDatabaseContainer.deleteValidations()
	var temp interface{} = sqlDatabaseContainer
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) ValidateUpdate(old runtime.Object) error {
	validations := sqlDatabaseContainer.updateValidations()
	var temp interface{} = sqlDatabaseContainer
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) createValidations() []func() error {
	return []func() error{sqlDatabaseContainer.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return sqlDatabaseContainer.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (sqlDatabaseContainer *SqlDatabaseContainer) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&sqlDatabaseContainer.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromSqlDatabaseContainer populates our SqlDatabaseContainer from the provided source SqlDatabaseContainer
func (sqlDatabaseContainer *SqlDatabaseContainer) AssignPropertiesFromSqlDatabaseContainer(source *v1alpha1api20210515storage.SqlDatabaseContainer) error {

	// Spec
	var spec DatabaseAccountsSqlDatabasesContainers_Spec
	err := spec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec()")
	}
	sqlDatabaseContainer.Spec = spec

	// Status
	var status SqlContainerGetResults_Status
	err = status.AssignPropertiesFromSqlContainerGetResultsStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromSqlContainerGetResultsStatus()")
	}
	sqlDatabaseContainer.Status = status

	// No error
	return nil
}

// AssignPropertiesToSqlDatabaseContainer populates the provided destination SqlDatabaseContainer from our SqlDatabaseContainer
func (sqlDatabaseContainer *SqlDatabaseContainer) AssignPropertiesToSqlDatabaseContainer(destination *v1alpha1api20210515storage.SqlDatabaseContainer) error {

	// Spec
	var spec v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainers_Spec
	err := sqlDatabaseContainer.Spec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210515storage.SqlContainerGetResults_Status
	err = sqlDatabaseContainer.Status.AssignPropertiesToSqlContainerGetResultsStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToSqlContainerGetResultsStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (sqlDatabaseContainer *SqlDatabaseContainer) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: sqlDatabaseContainer.Spec.OriginalVersion(),
		Kind:    "SqlDatabaseContainer",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/resourceDefinitions/databaseAccounts_sqlDatabases_containers
type SqlDatabaseContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqlDatabaseContainer `json:"items"`
}

type DatabaseAccountsSqlDatabasesContainers_Spec struct {
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Options: CreateUpdateOptions are a list of key-value pairs that describe the
	//resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and
	//"Throughput"
	Options *CreateUpdateOptions `json:"options,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.documentdb.azure.com" json:"owner" kind:"SqlDatabase"`

	// +kubebuilder:validation:Required
	//Resource: Cosmos DB SQL container resource object
	Resource SqlContainerResource `json:"resource"`

	//Tags: Tags are a list of key-value pairs that describe the resource. These tags
	//can be used in viewing and grouping this resource (across resource groups). A
	//maximum of 15 tags can be provided for a resource. Each tag must have a key no
	//greater than 128 characters and value no greater than 256 characters. For
	//example, the default experience for a template type is set with
	//"defaultExperience": "Cassandra". Current "defaultExperience" values also
	//include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &DatabaseAccountsSqlDatabasesContainers_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (databaseAccountsSqlDatabasesContainersSpec *DatabaseAccountsSqlDatabasesContainers_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if databaseAccountsSqlDatabasesContainersSpec == nil {
		return nil, nil
	}
	var result DatabaseAccountsSqlDatabasesContainers_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = DatabaseAccountsSqlDatabasesContainersSpecAPIVersion20210515

	// Set property ‘Location’:
	if databaseAccountsSqlDatabasesContainersSpec.Location != nil {
		location := *databaseAccountsSqlDatabasesContainersSpec.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if databaseAccountsSqlDatabasesContainersSpec.Options != nil {
		optionsARM, err := (*databaseAccountsSqlDatabasesContainersSpec.Options).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		options := optionsARM.(CreateUpdateOptionsARM)
		result.Properties.Options = &options
	}
	resourceARM, err := databaseAccountsSqlDatabasesContainersSpec.Resource.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Properties.Resource = resourceARM.(SqlContainerResourceARM)

	// Set property ‘Tags’:
	if databaseAccountsSqlDatabasesContainersSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range databaseAccountsSqlDatabasesContainersSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = DatabaseAccountsSqlDatabasesContainersSpecTypeMicrosoftDocumentDBDatabaseAccountsSqlDatabasesContainers
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (databaseAccountsSqlDatabasesContainersSpec *DatabaseAccountsSqlDatabasesContainers_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &DatabaseAccountsSqlDatabasesContainers_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (databaseAccountsSqlDatabasesContainersSpec *DatabaseAccountsSqlDatabasesContainers_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(DatabaseAccountsSqlDatabasesContainers_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected DatabaseAccountsSqlDatabasesContainers_SpecARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	databaseAccountsSqlDatabasesContainersSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		databaseAccountsSqlDatabasesContainersSpec.Location = &location
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties.Options != nil {
		var options1 CreateUpdateOptions
		err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
		if err != nil {
			return err
		}
		options := options1
		databaseAccountsSqlDatabasesContainersSpec.Options = &options
	}

	// Set property ‘Owner’:
	databaseAccountsSqlDatabasesContainersSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Resource’:
	// copying flattened property:
	var resource SqlContainerResource
	err := resource.PopulateFromARM(owner, typedInput.Properties.Resource)
	if err != nil {
		return err
	}
	databaseAccountsSqlDatabasesContainersSpec.Resource = resource

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		databaseAccountsSqlDatabasesContainersSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			databaseAccountsSqlDatabasesContainersSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &DatabaseAccountsSqlDatabasesContainers_Spec{}

// ConvertSpecFrom populates our DatabaseAccountsSqlDatabasesContainers_Spec from the provided source
func (databaseAccountsSqlDatabasesContainersSpec *DatabaseAccountsSqlDatabasesContainers_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainers_Spec)
	if ok {
		// Populate our instance from source
		return databaseAccountsSqlDatabasesContainersSpec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainers_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = databaseAccountsSqlDatabasesContainersSpec.AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our DatabaseAccountsSqlDatabasesContainers_Spec
func (databaseAccountsSqlDatabasesContainersSpec *DatabaseAccountsSqlDatabasesContainers_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainers_Spec)
	if ok {
		// Populate destination from our instance
		return databaseAccountsSqlDatabasesContainersSpec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainers_Spec{}
	err := databaseAccountsSqlDatabasesContainersSpec.AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec populates our DatabaseAccountsSqlDatabasesContainers_Spec from the provided source DatabaseAccountsSqlDatabasesContainers_Spec
func (databaseAccountsSqlDatabasesContainersSpec *DatabaseAccountsSqlDatabasesContainers_Spec) AssignPropertiesFromDatabaseAccountsSqlDatabasesContainersSpec(source *v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainers_Spec) error {

	// AzureName
	databaseAccountsSqlDatabasesContainersSpec.AzureName = source.AzureName

	// Location
	databaseAccountsSqlDatabasesContainersSpec.Location = genruntime.ClonePointerToString(source.Location)

	// Options
	if source.Options != nil {
		var option CreateUpdateOptions
		err := option.AssignPropertiesFromCreateUpdateOptions(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromCreateUpdateOptions()")
		}
		databaseAccountsSqlDatabasesContainersSpec.Options = &option
	} else {
		databaseAccountsSqlDatabasesContainersSpec.Options = nil
	}

	// Owner
	databaseAccountsSqlDatabasesContainersSpec.Owner = source.Owner.Copy()

	// Resource
	if source.Resource != nil {
		var resource SqlContainerResource
		err := resource.AssignPropertiesFromSqlContainerResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromSqlContainerResource()")
		}
		databaseAccountsSqlDatabasesContainersSpec.Resource = resource
	} else {
		databaseAccountsSqlDatabasesContainersSpec.Resource = SqlContainerResource{}
	}

	// Tags
	databaseAccountsSqlDatabasesContainersSpec.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec populates the provided destination DatabaseAccountsSqlDatabasesContainers_Spec from our DatabaseAccountsSqlDatabasesContainers_Spec
func (databaseAccountsSqlDatabasesContainersSpec *DatabaseAccountsSqlDatabasesContainers_Spec) AssignPropertiesToDatabaseAccountsSqlDatabasesContainersSpec(destination *v1alpha1api20210515storage.DatabaseAccountsSqlDatabasesContainers_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = databaseAccountsSqlDatabasesContainersSpec.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(databaseAccountsSqlDatabasesContainersSpec.Location)

	// Options
	if databaseAccountsSqlDatabasesContainersSpec.Options != nil {
		var option v1alpha1api20210515storage.CreateUpdateOptions
		err := (*databaseAccountsSqlDatabasesContainersSpec.Options).AssignPropertiesToCreateUpdateOptions(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToCreateUpdateOptions()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// OriginalVersion
	destination.OriginalVersion = databaseAccountsSqlDatabasesContainersSpec.OriginalVersion()

	// Owner
	destination.Owner = databaseAccountsSqlDatabasesContainersSpec.Owner.Copy()

	// Resource
	var resource v1alpha1api20210515storage.SqlContainerResource
	err := databaseAccountsSqlDatabasesContainersSpec.Resource.AssignPropertiesToSqlContainerResource(&resource)
	if err != nil {
		return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToSqlContainerResource()")
	}
	destination.Resource = &resource

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(databaseAccountsSqlDatabasesContainersSpec.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (databaseAccountsSqlDatabasesContainersSpec *DatabaseAccountsSqlDatabasesContainers_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (databaseAccountsSqlDatabasesContainersSpec *DatabaseAccountsSqlDatabasesContainers_Spec) SetAzureName(azureName string) {
	databaseAccountsSqlDatabasesContainersSpec.AzureName = azureName
}

//Generated from:
type SqlContainerGetResults_Status struct {
	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//Id: The unique resource identifier of the ARM resource.
	Id *string `json:"id,omitempty"`

	//Location: The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	//Name: The name of the ARM resource.
	Name     *string                                    `json:"name,omitempty"`
	Options  *OptionsResource_Status                    `json:"options,omitempty"`
	Resource *SqlContainerGetProperties_Status_Resource `json:"resource,omitempty"`
	Tags     map[string]string                          `json:"tags,omitempty"`

	//Type: The type of Azure resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &SqlContainerGetResults_Status{}

// ConvertStatusFrom populates our SqlContainerGetResults_Status from the provided source
func (sqlContainerGetResultsStatus *SqlContainerGetResults_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210515storage.SqlContainerGetResults_Status)
	if ok {
		// Populate our instance from source
		return sqlContainerGetResultsStatus.AssignPropertiesFromSqlContainerGetResultsStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210515storage.SqlContainerGetResults_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = sqlContainerGetResultsStatus.AssignPropertiesFromSqlContainerGetResultsStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our SqlContainerGetResults_Status
func (sqlContainerGetResultsStatus *SqlContainerGetResults_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210515storage.SqlContainerGetResults_Status)
	if ok {
		// Populate destination from our instance
		return sqlContainerGetResultsStatus.AssignPropertiesToSqlContainerGetResultsStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210515storage.SqlContainerGetResults_Status{}
	err := sqlContainerGetResultsStatus.AssignPropertiesToSqlContainerGetResultsStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &SqlContainerGetResults_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlContainerGetResultsStatus *SqlContainerGetResults_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlContainerGetResults_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlContainerGetResultsStatus *SqlContainerGetResults_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlContainerGetResults_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlContainerGetResults_StatusARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		sqlContainerGetResultsStatus.Id = &id
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		sqlContainerGetResultsStatus.Location = &location
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sqlContainerGetResultsStatus.Name = &name
	}

	// Set property ‘Options’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Options != nil {
			var options1 OptionsResource_Status
			err := options1.PopulateFromARM(owner, *typedInput.Properties.Options)
			if err != nil {
				return err
			}
			options := options1
			sqlContainerGetResultsStatus.Options = &options
		}
	}

	// Set property ‘Resource’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Resource != nil {
			var resource1 SqlContainerGetProperties_Status_Resource
			err := resource1.PopulateFromARM(owner, *typedInput.Properties.Resource)
			if err != nil {
				return err
			}
			resource := resource1
			sqlContainerGetResultsStatus.Resource = &resource
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		sqlContainerGetResultsStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			sqlContainerGetResultsStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		sqlContainerGetResultsStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlContainerGetResultsStatus populates our SqlContainerGetResults_Status from the provided source SqlContainerGetResults_Status
func (sqlContainerGetResultsStatus *SqlContainerGetResults_Status) AssignPropertiesFromSqlContainerGetResultsStatus(source *v1alpha1api20210515storage.SqlContainerGetResults_Status) error {

	// Conditions
	sqlContainerGetResultsStatus.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	sqlContainerGetResultsStatus.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	sqlContainerGetResultsStatus.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	sqlContainerGetResultsStatus.Name = genruntime.ClonePointerToString(source.Name)

	// Options
	if source.Options != nil {
		var option OptionsResource_Status
		err := option.AssignPropertiesFromOptionsResourceStatus(source.Options)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesFromOptionsResourceStatus()")
		}
		sqlContainerGetResultsStatus.Options = &option
	} else {
		sqlContainerGetResultsStatus.Options = nil
	}

	// Resource
	if source.Resource != nil {
		var resource SqlContainerGetProperties_Status_Resource
		err := resource.AssignPropertiesFromSqlContainerGetPropertiesStatusResource(source.Resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesFromSqlContainerGetPropertiesStatusResource()")
		}
		sqlContainerGetResultsStatus.Resource = &resource
	} else {
		sqlContainerGetResultsStatus.Resource = nil
	}

	// Tags
	sqlContainerGetResultsStatus.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	sqlContainerGetResultsStatus.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignPropertiesToSqlContainerGetResultsStatus populates the provided destination SqlContainerGetResults_Status from our SqlContainerGetResults_Status
func (sqlContainerGetResultsStatus *SqlContainerGetResults_Status) AssignPropertiesToSqlContainerGetResultsStatus(destination *v1alpha1api20210515storage.SqlContainerGetResults_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(sqlContainerGetResultsStatus.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(sqlContainerGetResultsStatus.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(sqlContainerGetResultsStatus.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(sqlContainerGetResultsStatus.Name)

	// Options
	if sqlContainerGetResultsStatus.Options != nil {
		var option v1alpha1api20210515storage.OptionsResource_Status
		err := (*sqlContainerGetResultsStatus.Options).AssignPropertiesToOptionsResourceStatus(&option)
		if err != nil {
			return errors.Wrap(err, "populating Options from Options, calling AssignPropertiesToOptionsResourceStatus()")
		}
		destination.Options = &option
	} else {
		destination.Options = nil
	}

	// Resource
	if sqlContainerGetResultsStatus.Resource != nil {
		var resource v1alpha1api20210515storage.SqlContainerGetProperties_Status_Resource
		err := (*sqlContainerGetResultsStatus.Resource).AssignPropertiesToSqlContainerGetPropertiesStatusResource(&resource)
		if err != nil {
			return errors.Wrap(err, "populating Resource from Resource, calling AssignPropertiesToSqlContainerGetPropertiesStatusResource()")
		}
		destination.Resource = &resource
	} else {
		destination.Resource = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(sqlContainerGetResultsStatus.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(sqlContainerGetResultsStatus.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SqlContainerGetProperties_Status_Resource struct {
	//AnalyticalStorageTtl: Analytical TTL.
	AnalyticalStorageTtl *int `json:"analyticalStorageTtl,omitempty"`

	//ConflictResolutionPolicy: The conflict resolution policy for the container.
	ConflictResolutionPolicy *ConflictResolutionPolicy_Status `json:"conflictResolutionPolicy,omitempty"`

	//DefaultTtl: Default time to live
	DefaultTtl *int `json:"defaultTtl,omitempty"`

	//Etag: A system generated property representing the resource etag required for
	//optimistic concurrency control.
	Etag *string `json:"_etag,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB SQL container
	Id string `json:"id"`

	//IndexingPolicy: The configuration of the indexing policy. By default, the
	//indexing is automatic for all document paths within the container
	IndexingPolicy *IndexingPolicy_Status `json:"indexingPolicy,omitempty"`

	//PartitionKey: The configuration of the partition key to be used for partitioning
	//data into multiple partitions
	PartitionKey *ContainerPartitionKey_Status `json:"partitionKey,omitempty"`

	//Rid: A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty"`

	//Ts: A system generated property that denotes the last updated timestamp of the
	//resource.
	Ts *float64 `json:"_ts,omitempty"`

	//UniqueKeyPolicy: The unique key policy configuration for specifying uniqueness
	//constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy *UniqueKeyPolicy_Status `json:"uniqueKeyPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &SqlContainerGetProperties_Status_Resource{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlContainerGetPropertiesStatusResource *SqlContainerGetProperties_Status_Resource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlContainerGetProperties_Status_ResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlContainerGetPropertiesStatusResource *SqlContainerGetProperties_Status_Resource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlContainerGetProperties_Status_ResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlContainerGetProperties_Status_ResourceARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		sqlContainerGetPropertiesStatusResource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘ConflictResolutionPolicy’:
	if typedInput.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy1 ConflictResolutionPolicy_Status
		err := conflictResolutionPolicy1.PopulateFromARM(owner, *typedInput.ConflictResolutionPolicy)
		if err != nil {
			return err
		}
		conflictResolutionPolicy := conflictResolutionPolicy1
		sqlContainerGetPropertiesStatusResource.ConflictResolutionPolicy = &conflictResolutionPolicy
	}

	// Set property ‘DefaultTtl’:
	if typedInput.DefaultTtl != nil {
		defaultTtl := *typedInput.DefaultTtl
		sqlContainerGetPropertiesStatusResource.DefaultTtl = &defaultTtl
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		sqlContainerGetPropertiesStatusResource.Etag = &etag
	}

	// Set property ‘Id’:
	sqlContainerGetPropertiesStatusResource.Id = typedInput.Id

	// Set property ‘IndexingPolicy’:
	if typedInput.IndexingPolicy != nil {
		var indexingPolicy1 IndexingPolicy_Status
		err := indexingPolicy1.PopulateFromARM(owner, *typedInput.IndexingPolicy)
		if err != nil {
			return err
		}
		indexingPolicy := indexingPolicy1
		sqlContainerGetPropertiesStatusResource.IndexingPolicy = &indexingPolicy
	}

	// Set property ‘PartitionKey’:
	if typedInput.PartitionKey != nil {
		var partitionKey1 ContainerPartitionKey_Status
		err := partitionKey1.PopulateFromARM(owner, *typedInput.PartitionKey)
		if err != nil {
			return err
		}
		partitionKey := partitionKey1
		sqlContainerGetPropertiesStatusResource.PartitionKey = &partitionKey
	}

	// Set property ‘Rid’:
	if typedInput.Rid != nil {
		rid := *typedInput.Rid
		sqlContainerGetPropertiesStatusResource.Rid = &rid
	}

	// Set property ‘Ts’:
	if typedInput.Ts != nil {
		ts := *typedInput.Ts
		sqlContainerGetPropertiesStatusResource.Ts = &ts
	}

	// Set property ‘UniqueKeyPolicy’:
	if typedInput.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy1 UniqueKeyPolicy_Status
		err := uniqueKeyPolicy1.PopulateFromARM(owner, *typedInput.UniqueKeyPolicy)
		if err != nil {
			return err
		}
		uniqueKeyPolicy := uniqueKeyPolicy1
		sqlContainerGetPropertiesStatusResource.UniqueKeyPolicy = &uniqueKeyPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlContainerGetPropertiesStatusResource populates our SqlContainerGetProperties_Status_Resource from the provided source SqlContainerGetProperties_Status_Resource
func (sqlContainerGetPropertiesStatusResource *SqlContainerGetProperties_Status_Resource) AssignPropertiesFromSqlContainerGetPropertiesStatusResource(source *v1alpha1api20210515storage.SqlContainerGetProperties_Status_Resource) error {

	// AnalyticalStorageTtl
	sqlContainerGetPropertiesStatusResource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if source.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy ConflictResolutionPolicy_Status
		err := conflictResolutionPolicy.AssignPropertiesFromConflictResolutionPolicyStatus(source.ConflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ConflictResolutionPolicy from ConflictResolutionPolicy, calling AssignPropertiesFromConflictResolutionPolicyStatus()")
		}
		sqlContainerGetPropertiesStatusResource.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		sqlContainerGetPropertiesStatusResource.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	sqlContainerGetPropertiesStatusResource.DefaultTtl = genruntime.ClonePointerToInt(source.DefaultTtl)

	// Etag
	sqlContainerGetPropertiesStatusResource.Etag = genruntime.ClonePointerToString(source.Etag)

	// Id
	sqlContainerGetPropertiesStatusResource.Id = genruntime.GetOptionalStringValue(source.Id)

	// IndexingPolicy
	if source.IndexingPolicy != nil {
		var indexingPolicy IndexingPolicy_Status
		err := indexingPolicy.AssignPropertiesFromIndexingPolicyStatus(source.IndexingPolicy)
		if err != nil {
			return errors.Wrap(err, "populating IndexingPolicy from IndexingPolicy, calling AssignPropertiesFromIndexingPolicyStatus()")
		}
		sqlContainerGetPropertiesStatusResource.IndexingPolicy = &indexingPolicy
	} else {
		sqlContainerGetPropertiesStatusResource.IndexingPolicy = nil
	}

	// PartitionKey
	if source.PartitionKey != nil {
		var partitionKey ContainerPartitionKey_Status
		err := partitionKey.AssignPropertiesFromContainerPartitionKeyStatus(source.PartitionKey)
		if err != nil {
			return errors.Wrap(err, "populating PartitionKey from PartitionKey, calling AssignPropertiesFromContainerPartitionKeyStatus()")
		}
		sqlContainerGetPropertiesStatusResource.PartitionKey = &partitionKey
	} else {
		sqlContainerGetPropertiesStatusResource.PartitionKey = nil
	}

	// Rid
	sqlContainerGetPropertiesStatusResource.Rid = genruntime.ClonePointerToString(source.Rid)

	// Ts
	if source.Ts != nil {
		t := *source.Ts
		sqlContainerGetPropertiesStatusResource.Ts = &t
	} else {
		sqlContainerGetPropertiesStatusResource.Ts = nil
	}

	// UniqueKeyPolicy
	if source.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy UniqueKeyPolicy_Status
		err := uniqueKeyPolicy.AssignPropertiesFromUniqueKeyPolicyStatus(source.UniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating UniqueKeyPolicy from UniqueKeyPolicy, calling AssignPropertiesFromUniqueKeyPolicyStatus()")
		}
		sqlContainerGetPropertiesStatusResource.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		sqlContainerGetPropertiesStatusResource.UniqueKeyPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlContainerGetPropertiesStatusResource populates the provided destination SqlContainerGetProperties_Status_Resource from our SqlContainerGetProperties_Status_Resource
func (sqlContainerGetPropertiesStatusResource *SqlContainerGetProperties_Status_Resource) AssignPropertiesToSqlContainerGetPropertiesStatusResource(destination *v1alpha1api20210515storage.SqlContainerGetProperties_Status_Resource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(sqlContainerGetPropertiesStatusResource.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if sqlContainerGetPropertiesStatusResource.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy v1alpha1api20210515storage.ConflictResolutionPolicy_Status
		err := (*sqlContainerGetPropertiesStatusResource.ConflictResolutionPolicy).AssignPropertiesToConflictResolutionPolicyStatus(&conflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ConflictResolutionPolicy from ConflictResolutionPolicy, calling AssignPropertiesToConflictResolutionPolicyStatus()")
		}
		destination.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		destination.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	destination.DefaultTtl = genruntime.ClonePointerToInt(sqlContainerGetPropertiesStatusResource.DefaultTtl)

	// Etag
	destination.Etag = genruntime.ClonePointerToString(sqlContainerGetPropertiesStatusResource.Etag)

	// Id
	id := sqlContainerGetPropertiesStatusResource.Id
	destination.Id = &id

	// IndexingPolicy
	if sqlContainerGetPropertiesStatusResource.IndexingPolicy != nil {
		var indexingPolicy v1alpha1api20210515storage.IndexingPolicy_Status
		err := (*sqlContainerGetPropertiesStatusResource.IndexingPolicy).AssignPropertiesToIndexingPolicyStatus(&indexingPolicy)
		if err != nil {
			return errors.Wrap(err, "populating IndexingPolicy from IndexingPolicy, calling AssignPropertiesToIndexingPolicyStatus()")
		}
		destination.IndexingPolicy = &indexingPolicy
	} else {
		destination.IndexingPolicy = nil
	}

	// PartitionKey
	if sqlContainerGetPropertiesStatusResource.PartitionKey != nil {
		var partitionKey v1alpha1api20210515storage.ContainerPartitionKey_Status
		err := (*sqlContainerGetPropertiesStatusResource.PartitionKey).AssignPropertiesToContainerPartitionKeyStatus(&partitionKey)
		if err != nil {
			return errors.Wrap(err, "populating PartitionKey from PartitionKey, calling AssignPropertiesToContainerPartitionKeyStatus()")
		}
		destination.PartitionKey = &partitionKey
	} else {
		destination.PartitionKey = nil
	}

	// Rid
	destination.Rid = genruntime.ClonePointerToString(sqlContainerGetPropertiesStatusResource.Rid)

	// Ts
	if sqlContainerGetPropertiesStatusResource.Ts != nil {
		t := *sqlContainerGetPropertiesStatusResource.Ts
		destination.Ts = &t
	} else {
		destination.Ts = nil
	}

	// UniqueKeyPolicy
	if sqlContainerGetPropertiesStatusResource.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy v1alpha1api20210515storage.UniqueKeyPolicy_Status
		err := (*sqlContainerGetPropertiesStatusResource.UniqueKeyPolicy).AssignPropertiesToUniqueKeyPolicyStatus(&uniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating UniqueKeyPolicy from UniqueKeyPolicy, calling AssignPropertiesToUniqueKeyPolicyStatus()")
		}
		destination.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		destination.UniqueKeyPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/SqlContainerResource
type SqlContainerResource struct {
	//AnalyticalStorageTtl: Analytical TTL.
	AnalyticalStorageTtl *int `json:"analyticalStorageTtl,omitempty"`

	//ConflictResolutionPolicy: The conflict resolution policy for the container.
	ConflictResolutionPolicy *ConflictResolutionPolicy `json:"conflictResolutionPolicy,omitempty"`

	//DefaultTtl: Default time to live
	DefaultTtl *int `json:"defaultTtl,omitempty"`

	// +kubebuilder:validation:Required
	//Id: Name of the Cosmos DB SQL container
	Id string `json:"id"`

	//IndexingPolicy: Cosmos DB indexing policy
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

	//PartitionKey: The configuration of the partition key to be used for partitioning
	//data into multiple partitions
	PartitionKey *ContainerPartitionKey `json:"partitionKey,omitempty"`

	//UniqueKeyPolicy: The unique key policy configuration for specifying uniqueness
	//constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy *UniqueKeyPolicy `json:"uniqueKeyPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &SqlContainerResource{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sqlContainerResource *SqlContainerResource) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sqlContainerResource == nil {
		return nil, nil
	}
	var result SqlContainerResourceARM

	// Set property ‘AnalyticalStorageTtl’:
	if sqlContainerResource.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *sqlContainerResource.AnalyticalStorageTtl
		result.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘ConflictResolutionPolicy’:
	if sqlContainerResource.ConflictResolutionPolicy != nil {
		conflictResolutionPolicyARM, err := (*sqlContainerResource.ConflictResolutionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		conflictResolutionPolicy := conflictResolutionPolicyARM.(ConflictResolutionPolicyARM)
		result.ConflictResolutionPolicy = &conflictResolutionPolicy
	}

	// Set property ‘DefaultTtl’:
	if sqlContainerResource.DefaultTtl != nil {
		defaultTtl := *sqlContainerResource.DefaultTtl
		result.DefaultTtl = &defaultTtl
	}

	// Set property ‘Id’:
	result.Id = sqlContainerResource.Id

	// Set property ‘IndexingPolicy’:
	if sqlContainerResource.IndexingPolicy != nil {
		indexingPolicyARM, err := (*sqlContainerResource.IndexingPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		indexingPolicy := indexingPolicyARM.(IndexingPolicyARM)
		result.IndexingPolicy = &indexingPolicy
	}

	// Set property ‘PartitionKey’:
	if sqlContainerResource.PartitionKey != nil {
		partitionKeyARM, err := (*sqlContainerResource.PartitionKey).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		partitionKey := partitionKeyARM.(ContainerPartitionKeyARM)
		result.PartitionKey = &partitionKey
	}

	// Set property ‘UniqueKeyPolicy’:
	if sqlContainerResource.UniqueKeyPolicy != nil {
		uniqueKeyPolicyARM, err := (*sqlContainerResource.UniqueKeyPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		uniqueKeyPolicy := uniqueKeyPolicyARM.(UniqueKeyPolicyARM)
		result.UniqueKeyPolicy = &uniqueKeyPolicy
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sqlContainerResource *SqlContainerResource) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SqlContainerResourceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sqlContainerResource *SqlContainerResource) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SqlContainerResourceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SqlContainerResourceARM, got %T", armInput)
	}

	// Set property ‘AnalyticalStorageTtl’:
	if typedInput.AnalyticalStorageTtl != nil {
		analyticalStorageTtl := *typedInput.AnalyticalStorageTtl
		sqlContainerResource.AnalyticalStorageTtl = &analyticalStorageTtl
	}

	// Set property ‘ConflictResolutionPolicy’:
	if typedInput.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy1 ConflictResolutionPolicy
		err := conflictResolutionPolicy1.PopulateFromARM(owner, *typedInput.ConflictResolutionPolicy)
		if err != nil {
			return err
		}
		conflictResolutionPolicy := conflictResolutionPolicy1
		sqlContainerResource.ConflictResolutionPolicy = &conflictResolutionPolicy
	}

	// Set property ‘DefaultTtl’:
	if typedInput.DefaultTtl != nil {
		defaultTtl := *typedInput.DefaultTtl
		sqlContainerResource.DefaultTtl = &defaultTtl
	}

	// Set property ‘Id’:
	sqlContainerResource.Id = typedInput.Id

	// Set property ‘IndexingPolicy’:
	if typedInput.IndexingPolicy != nil {
		var indexingPolicy1 IndexingPolicy
		err := indexingPolicy1.PopulateFromARM(owner, *typedInput.IndexingPolicy)
		if err != nil {
			return err
		}
		indexingPolicy := indexingPolicy1
		sqlContainerResource.IndexingPolicy = &indexingPolicy
	}

	// Set property ‘PartitionKey’:
	if typedInput.PartitionKey != nil {
		var partitionKey1 ContainerPartitionKey
		err := partitionKey1.PopulateFromARM(owner, *typedInput.PartitionKey)
		if err != nil {
			return err
		}
		partitionKey := partitionKey1
		sqlContainerResource.PartitionKey = &partitionKey
	}

	// Set property ‘UniqueKeyPolicy’:
	if typedInput.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy1 UniqueKeyPolicy
		err := uniqueKeyPolicy1.PopulateFromARM(owner, *typedInput.UniqueKeyPolicy)
		if err != nil {
			return err
		}
		uniqueKeyPolicy := uniqueKeyPolicy1
		sqlContainerResource.UniqueKeyPolicy = &uniqueKeyPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromSqlContainerResource populates our SqlContainerResource from the provided source SqlContainerResource
func (sqlContainerResource *SqlContainerResource) AssignPropertiesFromSqlContainerResource(source *v1alpha1api20210515storage.SqlContainerResource) error {

	// AnalyticalStorageTtl
	sqlContainerResource.AnalyticalStorageTtl = genruntime.ClonePointerToInt(source.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if source.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy ConflictResolutionPolicy
		err := conflictResolutionPolicy.AssignPropertiesFromConflictResolutionPolicy(source.ConflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ConflictResolutionPolicy from ConflictResolutionPolicy, calling AssignPropertiesFromConflictResolutionPolicy()")
		}
		sqlContainerResource.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		sqlContainerResource.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	sqlContainerResource.DefaultTtl = genruntime.ClonePointerToInt(source.DefaultTtl)

	// Id
	sqlContainerResource.Id = genruntime.GetOptionalStringValue(source.Id)

	// IndexingPolicy
	if source.IndexingPolicy != nil {
		var indexingPolicy IndexingPolicy
		err := indexingPolicy.AssignPropertiesFromIndexingPolicy(source.IndexingPolicy)
		if err != nil {
			return errors.Wrap(err, "populating IndexingPolicy from IndexingPolicy, calling AssignPropertiesFromIndexingPolicy()")
		}
		sqlContainerResource.IndexingPolicy = &indexingPolicy
	} else {
		sqlContainerResource.IndexingPolicy = nil
	}

	// PartitionKey
	if source.PartitionKey != nil {
		var partitionKey ContainerPartitionKey
		err := partitionKey.AssignPropertiesFromContainerPartitionKey(source.PartitionKey)
		if err != nil {
			return errors.Wrap(err, "populating PartitionKey from PartitionKey, calling AssignPropertiesFromContainerPartitionKey()")
		}
		sqlContainerResource.PartitionKey = &partitionKey
	} else {
		sqlContainerResource.PartitionKey = nil
	}

	// UniqueKeyPolicy
	if source.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy UniqueKeyPolicy
		err := uniqueKeyPolicy.AssignPropertiesFromUniqueKeyPolicy(source.UniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating UniqueKeyPolicy from UniqueKeyPolicy, calling AssignPropertiesFromUniqueKeyPolicy()")
		}
		sqlContainerResource.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		sqlContainerResource.UniqueKeyPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSqlContainerResource populates the provided destination SqlContainerResource from our SqlContainerResource
func (sqlContainerResource *SqlContainerResource) AssignPropertiesToSqlContainerResource(destination *v1alpha1api20210515storage.SqlContainerResource) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AnalyticalStorageTtl
	destination.AnalyticalStorageTtl = genruntime.ClonePointerToInt(sqlContainerResource.AnalyticalStorageTtl)

	// ConflictResolutionPolicy
	if sqlContainerResource.ConflictResolutionPolicy != nil {
		var conflictResolutionPolicy v1alpha1api20210515storage.ConflictResolutionPolicy
		err := (*sqlContainerResource.ConflictResolutionPolicy).AssignPropertiesToConflictResolutionPolicy(&conflictResolutionPolicy)
		if err != nil {
			return errors.Wrap(err, "populating ConflictResolutionPolicy from ConflictResolutionPolicy, calling AssignPropertiesToConflictResolutionPolicy()")
		}
		destination.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		destination.ConflictResolutionPolicy = nil
	}

	// DefaultTtl
	destination.DefaultTtl = genruntime.ClonePointerToInt(sqlContainerResource.DefaultTtl)

	// Id
	id := sqlContainerResource.Id
	destination.Id = &id

	// IndexingPolicy
	if sqlContainerResource.IndexingPolicy != nil {
		var indexingPolicy v1alpha1api20210515storage.IndexingPolicy
		err := (*sqlContainerResource.IndexingPolicy).AssignPropertiesToIndexingPolicy(&indexingPolicy)
		if err != nil {
			return errors.Wrap(err, "populating IndexingPolicy from IndexingPolicy, calling AssignPropertiesToIndexingPolicy()")
		}
		destination.IndexingPolicy = &indexingPolicy
	} else {
		destination.IndexingPolicy = nil
	}

	// PartitionKey
	if sqlContainerResource.PartitionKey != nil {
		var partitionKey v1alpha1api20210515storage.ContainerPartitionKey
		err := (*sqlContainerResource.PartitionKey).AssignPropertiesToContainerPartitionKey(&partitionKey)
		if err != nil {
			return errors.Wrap(err, "populating PartitionKey from PartitionKey, calling AssignPropertiesToContainerPartitionKey()")
		}
		destination.PartitionKey = &partitionKey
	} else {
		destination.PartitionKey = nil
	}

	// UniqueKeyPolicy
	if sqlContainerResource.UniqueKeyPolicy != nil {
		var uniqueKeyPolicy v1alpha1api20210515storage.UniqueKeyPolicy
		err := (*sqlContainerResource.UniqueKeyPolicy).AssignPropertiesToUniqueKeyPolicy(&uniqueKeyPolicy)
		if err != nil {
			return errors.Wrap(err, "populating UniqueKeyPolicy from UniqueKeyPolicy, calling AssignPropertiesToUniqueKeyPolicy()")
		}
		destination.UniqueKeyPolicy = &uniqueKeyPolicy
	} else {
		destination.UniqueKeyPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/ConflictResolutionPolicy
type ConflictResolutionPolicy struct {
	//ConflictResolutionPath: The conflict resolution path in the case of
	//LastWriterWins mode.
	ConflictResolutionPath *string `json:"conflictResolutionPath,omitempty"`

	//ConflictResolutionProcedure: The procedure to resolve conflicts in the case of
	//custom mode.
	ConflictResolutionProcedure *string `json:"conflictResolutionProcedure,omitempty"`

	//Mode: Indicates the conflict resolution mode.
	Mode *ConflictResolutionPolicyMode `json:"mode,omitempty"`
}

var _ genruntime.ARMTransformer = &ConflictResolutionPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (conflictResolutionPolicy *ConflictResolutionPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if conflictResolutionPolicy == nil {
		return nil, nil
	}
	var result ConflictResolutionPolicyARM

	// Set property ‘ConflictResolutionPath’:
	if conflictResolutionPolicy.ConflictResolutionPath != nil {
		conflictResolutionPath := *conflictResolutionPolicy.ConflictResolutionPath
		result.ConflictResolutionPath = &conflictResolutionPath
	}

	// Set property ‘ConflictResolutionProcedure’:
	if conflictResolutionPolicy.ConflictResolutionProcedure != nil {
		conflictResolutionProcedure := *conflictResolutionPolicy.ConflictResolutionProcedure
		result.ConflictResolutionProcedure = &conflictResolutionProcedure
	}

	// Set property ‘Mode’:
	if conflictResolutionPolicy.Mode != nil {
		mode := *conflictResolutionPolicy.Mode
		result.Mode = &mode
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (conflictResolutionPolicy *ConflictResolutionPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConflictResolutionPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (conflictResolutionPolicy *ConflictResolutionPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConflictResolutionPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConflictResolutionPolicyARM, got %T", armInput)
	}

	// Set property ‘ConflictResolutionPath’:
	if typedInput.ConflictResolutionPath != nil {
		conflictResolutionPath := *typedInput.ConflictResolutionPath
		conflictResolutionPolicy.ConflictResolutionPath = &conflictResolutionPath
	}

	// Set property ‘ConflictResolutionProcedure’:
	if typedInput.ConflictResolutionProcedure != nil {
		conflictResolutionProcedure := *typedInput.ConflictResolutionProcedure
		conflictResolutionPolicy.ConflictResolutionProcedure = &conflictResolutionProcedure
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		conflictResolutionPolicy.Mode = &mode
	}

	// No error
	return nil
}

// AssignPropertiesFromConflictResolutionPolicy populates our ConflictResolutionPolicy from the provided source ConflictResolutionPolicy
func (conflictResolutionPolicy *ConflictResolutionPolicy) AssignPropertiesFromConflictResolutionPolicy(source *v1alpha1api20210515storage.ConflictResolutionPolicy) error {

	// ConflictResolutionPath
	conflictResolutionPolicy.ConflictResolutionPath = genruntime.ClonePointerToString(source.ConflictResolutionPath)

	// ConflictResolutionProcedure
	conflictResolutionPolicy.ConflictResolutionProcedure = genruntime.ClonePointerToString(source.ConflictResolutionProcedure)

	// Mode
	if source.Mode != nil {
		mode := ConflictResolutionPolicyMode(*source.Mode)
		conflictResolutionPolicy.Mode = &mode
	} else {
		conflictResolutionPolicy.Mode = nil
	}

	// No error
	return nil
}

// AssignPropertiesToConflictResolutionPolicy populates the provided destination ConflictResolutionPolicy from our ConflictResolutionPolicy
func (conflictResolutionPolicy *ConflictResolutionPolicy) AssignPropertiesToConflictResolutionPolicy(destination *v1alpha1api20210515storage.ConflictResolutionPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConflictResolutionPath
	destination.ConflictResolutionPath = genruntime.ClonePointerToString(conflictResolutionPolicy.ConflictResolutionPath)

	// ConflictResolutionProcedure
	destination.ConflictResolutionProcedure = genruntime.ClonePointerToString(conflictResolutionPolicy.ConflictResolutionProcedure)

	// Mode
	if conflictResolutionPolicy.Mode != nil {
		mode := string(*conflictResolutionPolicy.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type ConflictResolutionPolicy_Status struct {
	//ConflictResolutionPath: The conflict resolution path in the case of
	//LastWriterWins mode.
	ConflictResolutionPath *string `json:"conflictResolutionPath,omitempty"`

	//ConflictResolutionProcedure: The procedure to resolve conflicts in the case of
	//custom mode.
	ConflictResolutionProcedure *string `json:"conflictResolutionProcedure,omitempty"`

	//Mode: Indicates the conflict resolution mode.
	Mode *ConflictResolutionPolicyStatusMode `json:"mode,omitempty"`
}

var _ genruntime.FromARMConverter = &ConflictResolutionPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (conflictResolutionPolicyStatus *ConflictResolutionPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ConflictResolutionPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (conflictResolutionPolicyStatus *ConflictResolutionPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ConflictResolutionPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ConflictResolutionPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘ConflictResolutionPath’:
	if typedInput.ConflictResolutionPath != nil {
		conflictResolutionPath := *typedInput.ConflictResolutionPath
		conflictResolutionPolicyStatus.ConflictResolutionPath = &conflictResolutionPath
	}

	// Set property ‘ConflictResolutionProcedure’:
	if typedInput.ConflictResolutionProcedure != nil {
		conflictResolutionProcedure := *typedInput.ConflictResolutionProcedure
		conflictResolutionPolicyStatus.ConflictResolutionProcedure = &conflictResolutionProcedure
	}

	// Set property ‘Mode’:
	if typedInput.Mode != nil {
		mode := *typedInput.Mode
		conflictResolutionPolicyStatus.Mode = &mode
	}

	// No error
	return nil
}

// AssignPropertiesFromConflictResolutionPolicyStatus populates our ConflictResolutionPolicy_Status from the provided source ConflictResolutionPolicy_Status
func (conflictResolutionPolicyStatus *ConflictResolutionPolicy_Status) AssignPropertiesFromConflictResolutionPolicyStatus(source *v1alpha1api20210515storage.ConflictResolutionPolicy_Status) error {

	// ConflictResolutionPath
	conflictResolutionPolicyStatus.ConflictResolutionPath = genruntime.ClonePointerToString(source.ConflictResolutionPath)

	// ConflictResolutionProcedure
	conflictResolutionPolicyStatus.ConflictResolutionProcedure = genruntime.ClonePointerToString(source.ConflictResolutionProcedure)

	// Mode
	if source.Mode != nil {
		mode := ConflictResolutionPolicyStatusMode(*source.Mode)
		conflictResolutionPolicyStatus.Mode = &mode
	} else {
		conflictResolutionPolicyStatus.Mode = nil
	}

	// No error
	return nil
}

// AssignPropertiesToConflictResolutionPolicyStatus populates the provided destination ConflictResolutionPolicy_Status from our ConflictResolutionPolicy_Status
func (conflictResolutionPolicyStatus *ConflictResolutionPolicy_Status) AssignPropertiesToConflictResolutionPolicyStatus(destination *v1alpha1api20210515storage.ConflictResolutionPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConflictResolutionPath
	destination.ConflictResolutionPath = genruntime.ClonePointerToString(conflictResolutionPolicyStatus.ConflictResolutionPath)

	// ConflictResolutionProcedure
	destination.ConflictResolutionProcedure = genruntime.ClonePointerToString(conflictResolutionPolicyStatus.ConflictResolutionProcedure)

	// Mode
	if conflictResolutionPolicyStatus.Mode != nil {
		mode := string(*conflictResolutionPolicyStatus.Mode)
		destination.Mode = &mode
	} else {
		destination.Mode = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/ContainerPartitionKey
type ContainerPartitionKey struct {
	//Kind: Indicates the kind of algorithm used for partitioning. For MultiHash,
	//multiple partition keys (upto three maximum) are supported for container create.
	Kind *ContainerPartitionKeyKind `json:"kind,omitempty"`

	//Paths: List of paths using which data within the container can be partitioned
	Paths []string `json:"paths,omitempty"`

	// +kubebuilder:validation:Maximum=2
	// +kubebuilder:validation:Minimum=1
	//Version: Indicates the version of the partition key definition
	Version *int `json:"version,omitempty"`
}

var _ genruntime.ARMTransformer = &ContainerPartitionKey{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (containerPartitionKey *ContainerPartitionKey) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if containerPartitionKey == nil {
		return nil, nil
	}
	var result ContainerPartitionKeyARM

	// Set property ‘Kind’:
	if containerPartitionKey.Kind != nil {
		kind := *containerPartitionKey.Kind
		result.Kind = &kind
	}

	// Set property ‘Paths’:
	for _, item := range containerPartitionKey.Paths {
		result.Paths = append(result.Paths, item)
	}

	// Set property ‘Version’:
	if containerPartitionKey.Version != nil {
		version := *containerPartitionKey.Version
		result.Version = &version
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (containerPartitionKey *ContainerPartitionKey) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ContainerPartitionKeyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (containerPartitionKey *ContainerPartitionKey) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ContainerPartitionKeyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ContainerPartitionKeyARM, got %T", armInput)
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		containerPartitionKey.Kind = &kind
	}

	// Set property ‘Paths’:
	for _, item := range typedInput.Paths {
		containerPartitionKey.Paths = append(containerPartitionKey.Paths, item)
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		version := *typedInput.Version
		containerPartitionKey.Version = &version
	}

	// No error
	return nil
}

// AssignPropertiesFromContainerPartitionKey populates our ContainerPartitionKey from the provided source ContainerPartitionKey
func (containerPartitionKey *ContainerPartitionKey) AssignPropertiesFromContainerPartitionKey(source *v1alpha1api20210515storage.ContainerPartitionKey) error {

	// Kind
	if source.Kind != nil {
		kind := ContainerPartitionKeyKind(*source.Kind)
		containerPartitionKey.Kind = &kind
	} else {
		containerPartitionKey.Kind = nil
	}

	// Paths
	containerPartitionKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// Version
	if source.Version != nil {
		version := *source.Version
		containerPartitionKey.Version = &version
	} else {
		containerPartitionKey.Version = nil
	}

	// No error
	return nil
}

// AssignPropertiesToContainerPartitionKey populates the provided destination ContainerPartitionKey from our ContainerPartitionKey
func (containerPartitionKey *ContainerPartitionKey) AssignPropertiesToContainerPartitionKey(destination *v1alpha1api20210515storage.ContainerPartitionKey) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Kind
	if containerPartitionKey.Kind != nil {
		kind := string(*containerPartitionKey.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(containerPartitionKey.Paths)

	// Version
	if containerPartitionKey.Version != nil {
		version := *containerPartitionKey.Version
		destination.Version = &version
	} else {
		destination.Version = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type ContainerPartitionKey_Status struct {
	//Kind: Indicates the kind of algorithm used for partitioning. For MultiHash,
	//multiple partition keys (upto three maximum) are supported for container create
	Kind *ContainerPartitionKeyStatusKind `json:"kind,omitempty"`

	//Paths: List of paths using which data within the container can be partitioned
	Paths []string `json:"paths,omitempty"`

	//SystemKey: Indicates if the container is using a system generated partition key
	SystemKey *bool `json:"systemKey,omitempty"`

	//Version: Indicates the version of the partition key definition
	Version *int `json:"version,omitempty"`
}

var _ genruntime.FromARMConverter = &ContainerPartitionKey_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (containerPartitionKeyStatus *ContainerPartitionKey_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ContainerPartitionKey_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (containerPartitionKeyStatus *ContainerPartitionKey_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ContainerPartitionKey_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ContainerPartitionKey_StatusARM, got %T", armInput)
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		containerPartitionKeyStatus.Kind = &kind
	}

	// Set property ‘Paths’:
	for _, item := range typedInput.Paths {
		containerPartitionKeyStatus.Paths = append(containerPartitionKeyStatus.Paths, item)
	}

	// Set property ‘SystemKey’:
	if typedInput.SystemKey != nil {
		systemKey := *typedInput.SystemKey
		containerPartitionKeyStatus.SystemKey = &systemKey
	}

	// Set property ‘Version’:
	if typedInput.Version != nil {
		version := *typedInput.Version
		containerPartitionKeyStatus.Version = &version
	}

	// No error
	return nil
}

// AssignPropertiesFromContainerPartitionKeyStatus populates our ContainerPartitionKey_Status from the provided source ContainerPartitionKey_Status
func (containerPartitionKeyStatus *ContainerPartitionKey_Status) AssignPropertiesFromContainerPartitionKeyStatus(source *v1alpha1api20210515storage.ContainerPartitionKey_Status) error {

	// Kind
	if source.Kind != nil {
		kind := ContainerPartitionKeyStatusKind(*source.Kind)
		containerPartitionKeyStatus.Kind = &kind
	} else {
		containerPartitionKeyStatus.Kind = nil
	}

	// Paths
	containerPartitionKeyStatus.Paths = genruntime.CloneSliceOfString(source.Paths)

	// SystemKey
	if source.SystemKey != nil {
		systemKey := *source.SystemKey
		containerPartitionKeyStatus.SystemKey = &systemKey
	} else {
		containerPartitionKeyStatus.SystemKey = nil
	}

	// Version
	containerPartitionKeyStatus.Version = genruntime.ClonePointerToInt(source.Version)

	// No error
	return nil
}

// AssignPropertiesToContainerPartitionKeyStatus populates the provided destination ContainerPartitionKey_Status from our ContainerPartitionKey_Status
func (containerPartitionKeyStatus *ContainerPartitionKey_Status) AssignPropertiesToContainerPartitionKeyStatus(destination *v1alpha1api20210515storage.ContainerPartitionKey_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Kind
	if containerPartitionKeyStatus.Kind != nil {
		kind := string(*containerPartitionKeyStatus.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(containerPartitionKeyStatus.Paths)

	// SystemKey
	if containerPartitionKeyStatus.SystemKey != nil {
		systemKey := *containerPartitionKeyStatus.SystemKey
		destination.SystemKey = &systemKey
	} else {
		destination.SystemKey = nil
	}

	// Version
	destination.Version = genruntime.ClonePointerToInt(containerPartitionKeyStatus.Version)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/IndexingPolicy
type IndexingPolicy struct {
	//Automatic: Indicates if the indexing policy is automatic
	Automatic *bool `json:"automatic,omitempty"`

	//CompositeIndexes: List of composite path list
	CompositeIndexes [][]CompositePath `json:"compositeIndexes,omitempty"`

	//ExcludedPaths: List of paths to exclude from indexing
	ExcludedPaths []ExcludedPath `json:"excludedPaths,omitempty"`

	//IncludedPaths: List of paths to include in the indexing
	IncludedPaths []IncludedPath `json:"includedPaths,omitempty"`

	//IndexingMode: Indicates the indexing mode.
	IndexingMode *IndexingPolicyIndexingMode `json:"indexingMode,omitempty"`

	//SpatialIndexes: List of spatial specifics
	SpatialIndexes []SpatialSpec `json:"spatialIndexes,omitempty"`
}

var _ genruntime.ARMTransformer = &IndexingPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (indexingPolicy *IndexingPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if indexingPolicy == nil {
		return nil, nil
	}
	var result IndexingPolicyARM

	// Set property ‘Automatic’:
	if indexingPolicy.Automatic != nil {
		automatic := *indexingPolicy.Automatic
		result.Automatic = &automatic
	}

	// Set property ‘CompositeIndexes’:
	for _, item := range indexingPolicy.CompositeIndexes {
		var itemTemp []CompositePathARM
		for _, item1 := range item {
			item1ARM, err := item1.ConvertToARM(resolved)
			if err != nil {
				return nil, err
			}
			itemTemp = append(itemTemp, item1ARM.(CompositePathARM))
		}
		result.CompositeIndexes = append(result.CompositeIndexes, itemTemp)
	}

	// Set property ‘ExcludedPaths’:
	for _, item := range indexingPolicy.ExcludedPaths {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.ExcludedPaths = append(result.ExcludedPaths, itemARM.(ExcludedPathARM))
	}

	// Set property ‘IncludedPaths’:
	for _, item := range indexingPolicy.IncludedPaths {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.IncludedPaths = append(result.IncludedPaths, itemARM.(IncludedPathARM))
	}

	// Set property ‘IndexingMode’:
	if indexingPolicy.IndexingMode != nil {
		indexingMode := *indexingPolicy.IndexingMode
		result.IndexingMode = &indexingMode
	}

	// Set property ‘SpatialIndexes’:
	for _, item := range indexingPolicy.SpatialIndexes {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.SpatialIndexes = append(result.SpatialIndexes, itemARM.(SpatialSpecARM))
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (indexingPolicy *IndexingPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IndexingPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (indexingPolicy *IndexingPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IndexingPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IndexingPolicyARM, got %T", armInput)
	}

	// Set property ‘Automatic’:
	if typedInput.Automatic != nil {
		automatic := *typedInput.Automatic
		indexingPolicy.Automatic = &automatic
	}

	// Set property ‘CompositeIndexes’:
	for _, item := range typedInput.CompositeIndexes {
		var itemTemp []CompositePath
		for _, item1 := range item {
			var item2 CompositePath
			err := item2.PopulateFromARM(owner, item1)
			if err != nil {
				return err
			}
			itemTemp = append(itemTemp, item2)
		}
		indexingPolicy.CompositeIndexes = append(indexingPolicy.CompositeIndexes, itemTemp)
	}

	// Set property ‘ExcludedPaths’:
	for _, item := range typedInput.ExcludedPaths {
		var item1 ExcludedPath
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		indexingPolicy.ExcludedPaths = append(indexingPolicy.ExcludedPaths, item1)
	}

	// Set property ‘IncludedPaths’:
	for _, item := range typedInput.IncludedPaths {
		var item1 IncludedPath
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		indexingPolicy.IncludedPaths = append(indexingPolicy.IncludedPaths, item1)
	}

	// Set property ‘IndexingMode’:
	if typedInput.IndexingMode != nil {
		indexingMode := *typedInput.IndexingMode
		indexingPolicy.IndexingMode = &indexingMode
	}

	// Set property ‘SpatialIndexes’:
	for _, item := range typedInput.SpatialIndexes {
		var item1 SpatialSpec
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		indexingPolicy.SpatialIndexes = append(indexingPolicy.SpatialIndexes, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromIndexingPolicy populates our IndexingPolicy from the provided source IndexingPolicy
func (indexingPolicy *IndexingPolicy) AssignPropertiesFromIndexingPolicy(source *v1alpha1api20210515storage.IndexingPolicy) error {

	// Automatic
	if source.Automatic != nil {
		automatic := *source.Automatic
		indexingPolicy.Automatic = &automatic
	} else {
		indexingPolicy.Automatic = nil
	}

	// CompositeIndexes
	if source.CompositeIndexes != nil {
		compositeIndexList := make([][]CompositePath, len(source.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range source.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]CompositePath, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal CompositePath
					err := compositeIndexLocal.AssignPropertiesFromCompositePath(&compositeIndexItem1)
					if err != nil {
						return errors.Wrap(err, "populating CompositeIndexes from CompositeIndexes, calling AssignPropertiesFromCompositePath()")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		indexingPolicy.CompositeIndexes = compositeIndexList
	} else {
		indexingPolicy.CompositeIndexes = nil
	}

	// ExcludedPaths
	if source.ExcludedPaths != nil {
		excludedPathList := make([]ExcludedPath, len(source.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range source.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath ExcludedPath
			err := excludedPath.AssignPropertiesFromExcludedPath(&excludedPathItem)
			if err != nil {
				return errors.Wrap(err, "populating ExcludedPaths from ExcludedPaths, calling AssignPropertiesFromExcludedPath()")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		indexingPolicy.ExcludedPaths = excludedPathList
	} else {
		indexingPolicy.ExcludedPaths = nil
	}

	// IncludedPaths
	if source.IncludedPaths != nil {
		includedPathList := make([]IncludedPath, len(source.IncludedPaths))
		for includedPathIndex, includedPathItem := range source.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath IncludedPath
			err := includedPath.AssignPropertiesFromIncludedPath(&includedPathItem)
			if err != nil {
				return errors.Wrap(err, "populating IncludedPaths from IncludedPaths, calling AssignPropertiesFromIncludedPath()")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		indexingPolicy.IncludedPaths = includedPathList
	} else {
		indexingPolicy.IncludedPaths = nil
	}

	// IndexingMode
	if source.IndexingMode != nil {
		indexingMode := IndexingPolicyIndexingMode(*source.IndexingMode)
		indexingPolicy.IndexingMode = &indexingMode
	} else {
		indexingPolicy.IndexingMode = nil
	}

	// SpatialIndexes
	if source.SpatialIndexes != nil {
		spatialIndexList := make([]SpatialSpec, len(source.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range source.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal SpatialSpec
			err := spatialIndexLocal.AssignPropertiesFromSpatialSpec(&spatialIndexItem)
			if err != nil {
				return errors.Wrap(err, "populating SpatialIndexes from SpatialIndexes, calling AssignPropertiesFromSpatialSpec()")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		indexingPolicy.SpatialIndexes = spatialIndexList
	} else {
		indexingPolicy.SpatialIndexes = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIndexingPolicy populates the provided destination IndexingPolicy from our IndexingPolicy
func (indexingPolicy *IndexingPolicy) AssignPropertiesToIndexingPolicy(destination *v1alpha1api20210515storage.IndexingPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Automatic
	if indexingPolicy.Automatic != nil {
		automatic := *indexingPolicy.Automatic
		destination.Automatic = &automatic
	} else {
		destination.Automatic = nil
	}

	// CompositeIndexes
	if indexingPolicy.CompositeIndexes != nil {
		compositeIndexList := make([][]v1alpha1api20210515storage.CompositePath, len(indexingPolicy.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range indexingPolicy.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]v1alpha1api20210515storage.CompositePath, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal v1alpha1api20210515storage.CompositePath
					err := compositeIndexItem1.AssignPropertiesToCompositePath(&compositeIndexLocal)
					if err != nil {
						return errors.Wrap(err, "populating CompositeIndexes from CompositeIndexes, calling AssignPropertiesToCompositePath()")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		destination.CompositeIndexes = compositeIndexList
	} else {
		destination.CompositeIndexes = nil
	}

	// ExcludedPaths
	if indexingPolicy.ExcludedPaths != nil {
		excludedPathList := make([]v1alpha1api20210515storage.ExcludedPath, len(indexingPolicy.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range indexingPolicy.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath v1alpha1api20210515storage.ExcludedPath
			err := excludedPathItem.AssignPropertiesToExcludedPath(&excludedPath)
			if err != nil {
				return errors.Wrap(err, "populating ExcludedPaths from ExcludedPaths, calling AssignPropertiesToExcludedPath()")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		destination.ExcludedPaths = excludedPathList
	} else {
		destination.ExcludedPaths = nil
	}

	// IncludedPaths
	if indexingPolicy.IncludedPaths != nil {
		includedPathList := make([]v1alpha1api20210515storage.IncludedPath, len(indexingPolicy.IncludedPaths))
		for includedPathIndex, includedPathItem := range indexingPolicy.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath v1alpha1api20210515storage.IncludedPath
			err := includedPathItem.AssignPropertiesToIncludedPath(&includedPath)
			if err != nil {
				return errors.Wrap(err, "populating IncludedPaths from IncludedPaths, calling AssignPropertiesToIncludedPath()")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		destination.IncludedPaths = includedPathList
	} else {
		destination.IncludedPaths = nil
	}

	// IndexingMode
	if indexingPolicy.IndexingMode != nil {
		indexingMode := string(*indexingPolicy.IndexingMode)
		destination.IndexingMode = &indexingMode
	} else {
		destination.IndexingMode = nil
	}

	// SpatialIndexes
	if indexingPolicy.SpatialIndexes != nil {
		spatialIndexList := make([]v1alpha1api20210515storage.SpatialSpec, len(indexingPolicy.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range indexingPolicy.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal v1alpha1api20210515storage.SpatialSpec
			err := spatialIndexItem.AssignPropertiesToSpatialSpec(&spatialIndexLocal)
			if err != nil {
				return errors.Wrap(err, "populating SpatialIndexes from SpatialIndexes, calling AssignPropertiesToSpatialSpec()")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		destination.SpatialIndexes = spatialIndexList
	} else {
		destination.SpatialIndexes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type IndexingPolicy_Status struct {
	//Automatic: Indicates if the indexing policy is automatic
	Automatic *bool `json:"automatic,omitempty"`

	//CompositeIndexes: List of composite path list
	CompositeIndexes [][]CompositePath_Status `json:"compositeIndexes,omitempty"`

	//ExcludedPaths: List of paths to exclude from indexing
	ExcludedPaths []ExcludedPath_Status `json:"excludedPaths,omitempty"`

	//IncludedPaths: List of paths to include in the indexing
	IncludedPaths []IncludedPath_Status `json:"includedPaths,omitempty"`

	//IndexingMode: Indicates the indexing mode.
	IndexingMode *IndexingPolicyStatusIndexingMode `json:"indexingMode,omitempty"`

	//SpatialIndexes: List of spatial specifics
	SpatialIndexes []SpatialSpec_Status `json:"spatialIndexes,omitempty"`
}

var _ genruntime.FromARMConverter = &IndexingPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (indexingPolicyStatus *IndexingPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IndexingPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (indexingPolicyStatus *IndexingPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IndexingPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IndexingPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘Automatic’:
	if typedInput.Automatic != nil {
		automatic := *typedInput.Automatic
		indexingPolicyStatus.Automatic = &automatic
	}

	// Set property ‘CompositeIndexes’:
	for _, item := range typedInput.CompositeIndexes {
		var itemTemp []CompositePath_Status
		for _, item1 := range item {
			var item2 CompositePath_Status
			err := item2.PopulateFromARM(owner, item1)
			if err != nil {
				return err
			}
			itemTemp = append(itemTemp, item2)
		}
		indexingPolicyStatus.CompositeIndexes = append(indexingPolicyStatus.CompositeIndexes, itemTemp)
	}

	// Set property ‘ExcludedPaths’:
	for _, item := range typedInput.ExcludedPaths {
		var item1 ExcludedPath_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		indexingPolicyStatus.ExcludedPaths = append(indexingPolicyStatus.ExcludedPaths, item1)
	}

	// Set property ‘IncludedPaths’:
	for _, item := range typedInput.IncludedPaths {
		var item1 IncludedPath_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		indexingPolicyStatus.IncludedPaths = append(indexingPolicyStatus.IncludedPaths, item1)
	}

	// Set property ‘IndexingMode’:
	if typedInput.IndexingMode != nil {
		indexingMode := *typedInput.IndexingMode
		indexingPolicyStatus.IndexingMode = &indexingMode
	}

	// Set property ‘SpatialIndexes’:
	for _, item := range typedInput.SpatialIndexes {
		var item1 SpatialSpec_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		indexingPolicyStatus.SpatialIndexes = append(indexingPolicyStatus.SpatialIndexes, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromIndexingPolicyStatus populates our IndexingPolicy_Status from the provided source IndexingPolicy_Status
func (indexingPolicyStatus *IndexingPolicy_Status) AssignPropertiesFromIndexingPolicyStatus(source *v1alpha1api20210515storage.IndexingPolicy_Status) error {

	// Automatic
	if source.Automatic != nil {
		automatic := *source.Automatic
		indexingPolicyStatus.Automatic = &automatic
	} else {
		indexingPolicyStatus.Automatic = nil
	}

	// CompositeIndexes
	if source.CompositeIndexes != nil {
		compositeIndexList := make([][]CompositePath_Status, len(source.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range source.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]CompositePath_Status, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal CompositePath_Status
					err := compositeIndexLocal.AssignPropertiesFromCompositePathStatus(&compositeIndexItem1)
					if err != nil {
						return errors.Wrap(err, "populating CompositeIndexes from CompositeIndexes, calling AssignPropertiesFromCompositePathStatus()")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		indexingPolicyStatus.CompositeIndexes = compositeIndexList
	} else {
		indexingPolicyStatus.CompositeIndexes = nil
	}

	// ExcludedPaths
	if source.ExcludedPaths != nil {
		excludedPathList := make([]ExcludedPath_Status, len(source.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range source.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath ExcludedPath_Status
			err := excludedPath.AssignPropertiesFromExcludedPathStatus(&excludedPathItem)
			if err != nil {
				return errors.Wrap(err, "populating ExcludedPaths from ExcludedPaths, calling AssignPropertiesFromExcludedPathStatus()")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		indexingPolicyStatus.ExcludedPaths = excludedPathList
	} else {
		indexingPolicyStatus.ExcludedPaths = nil
	}

	// IncludedPaths
	if source.IncludedPaths != nil {
		includedPathList := make([]IncludedPath_Status, len(source.IncludedPaths))
		for includedPathIndex, includedPathItem := range source.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath IncludedPath_Status
			err := includedPath.AssignPropertiesFromIncludedPathStatus(&includedPathItem)
			if err != nil {
				return errors.Wrap(err, "populating IncludedPaths from IncludedPaths, calling AssignPropertiesFromIncludedPathStatus()")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		indexingPolicyStatus.IncludedPaths = includedPathList
	} else {
		indexingPolicyStatus.IncludedPaths = nil
	}

	// IndexingMode
	if source.IndexingMode != nil {
		indexingMode := IndexingPolicyStatusIndexingMode(*source.IndexingMode)
		indexingPolicyStatus.IndexingMode = &indexingMode
	} else {
		indexingPolicyStatus.IndexingMode = nil
	}

	// SpatialIndexes
	if source.SpatialIndexes != nil {
		spatialIndexList := make([]SpatialSpec_Status, len(source.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range source.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal SpatialSpec_Status
			err := spatialIndexLocal.AssignPropertiesFromSpatialSpecStatus(&spatialIndexItem)
			if err != nil {
				return errors.Wrap(err, "populating SpatialIndexes from SpatialIndexes, calling AssignPropertiesFromSpatialSpecStatus()")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		indexingPolicyStatus.SpatialIndexes = spatialIndexList
	} else {
		indexingPolicyStatus.SpatialIndexes = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIndexingPolicyStatus populates the provided destination IndexingPolicy_Status from our IndexingPolicy_Status
func (indexingPolicyStatus *IndexingPolicy_Status) AssignPropertiesToIndexingPolicyStatus(destination *v1alpha1api20210515storage.IndexingPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Automatic
	if indexingPolicyStatus.Automatic != nil {
		automatic := *indexingPolicyStatus.Automatic
		destination.Automatic = &automatic
	} else {
		destination.Automatic = nil
	}

	// CompositeIndexes
	if indexingPolicyStatus.CompositeIndexes != nil {
		compositeIndexList := make([][]v1alpha1api20210515storage.CompositePath_Status, len(indexingPolicyStatus.CompositeIndexes))
		for compositeIndex, compositeIndexItem := range indexingPolicyStatus.CompositeIndexes {
			// Shadow the loop variable to avoid aliasing
			compositeIndexItem := compositeIndexItem
			if compositeIndexItem != nil {
				compositeIndexList1 := make([]v1alpha1api20210515storage.CompositePath_Status, len(compositeIndexItem))
				for compositeIndex1, compositeIndexItem1 := range compositeIndexItem {
					// Shadow the loop variable to avoid aliasing
					compositeIndexItem1 := compositeIndexItem1
					var compositeIndexLocal v1alpha1api20210515storage.CompositePath_Status
					err := compositeIndexItem1.AssignPropertiesToCompositePathStatus(&compositeIndexLocal)
					if err != nil {
						return errors.Wrap(err, "populating CompositeIndexes from CompositeIndexes, calling AssignPropertiesToCompositePathStatus()")
					}
					compositeIndexList1[compositeIndex1] = compositeIndexLocal
				}
				compositeIndexList[compositeIndex] = compositeIndexList1
			} else {
				compositeIndexList[compositeIndex] = nil
			}
		}
		destination.CompositeIndexes = compositeIndexList
	} else {
		destination.CompositeIndexes = nil
	}

	// ExcludedPaths
	if indexingPolicyStatus.ExcludedPaths != nil {
		excludedPathList := make([]v1alpha1api20210515storage.ExcludedPath_Status, len(indexingPolicyStatus.ExcludedPaths))
		for excludedPathIndex, excludedPathItem := range indexingPolicyStatus.ExcludedPaths {
			// Shadow the loop variable to avoid aliasing
			excludedPathItem := excludedPathItem
			var excludedPath v1alpha1api20210515storage.ExcludedPath_Status
			err := excludedPathItem.AssignPropertiesToExcludedPathStatus(&excludedPath)
			if err != nil {
				return errors.Wrap(err, "populating ExcludedPaths from ExcludedPaths, calling AssignPropertiesToExcludedPathStatus()")
			}
			excludedPathList[excludedPathIndex] = excludedPath
		}
		destination.ExcludedPaths = excludedPathList
	} else {
		destination.ExcludedPaths = nil
	}

	// IncludedPaths
	if indexingPolicyStatus.IncludedPaths != nil {
		includedPathList := make([]v1alpha1api20210515storage.IncludedPath_Status, len(indexingPolicyStatus.IncludedPaths))
		for includedPathIndex, includedPathItem := range indexingPolicyStatus.IncludedPaths {
			// Shadow the loop variable to avoid aliasing
			includedPathItem := includedPathItem
			var includedPath v1alpha1api20210515storage.IncludedPath_Status
			err := includedPathItem.AssignPropertiesToIncludedPathStatus(&includedPath)
			if err != nil {
				return errors.Wrap(err, "populating IncludedPaths from IncludedPaths, calling AssignPropertiesToIncludedPathStatus()")
			}
			includedPathList[includedPathIndex] = includedPath
		}
		destination.IncludedPaths = includedPathList
	} else {
		destination.IncludedPaths = nil
	}

	// IndexingMode
	if indexingPolicyStatus.IndexingMode != nil {
		indexingMode := string(*indexingPolicyStatus.IndexingMode)
		destination.IndexingMode = &indexingMode
	} else {
		destination.IndexingMode = nil
	}

	// SpatialIndexes
	if indexingPolicyStatus.SpatialIndexes != nil {
		spatialIndexList := make([]v1alpha1api20210515storage.SpatialSpec_Status, len(indexingPolicyStatus.SpatialIndexes))
		for spatialIndex, spatialIndexItem := range indexingPolicyStatus.SpatialIndexes {
			// Shadow the loop variable to avoid aliasing
			spatialIndexItem := spatialIndexItem
			var spatialIndexLocal v1alpha1api20210515storage.SpatialSpec_Status
			err := spatialIndexItem.AssignPropertiesToSpatialSpecStatus(&spatialIndexLocal)
			if err != nil {
				return errors.Wrap(err, "populating SpatialIndexes from SpatialIndexes, calling AssignPropertiesToSpatialSpecStatus()")
			}
			spatialIndexList[spatialIndex] = spatialIndexLocal
		}
		destination.SpatialIndexes = spatialIndexList
	} else {
		destination.SpatialIndexes = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/UniqueKeyPolicy
type UniqueKeyPolicy struct {
	//UniqueKeys: List of unique keys on that enforces uniqueness constraint on
	//documents in the collection in the Azure Cosmos DB service.
	UniqueKeys []UniqueKey `json:"uniqueKeys,omitempty"`
}

var _ genruntime.ARMTransformer = &UniqueKeyPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (uniqueKeyPolicy *UniqueKeyPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if uniqueKeyPolicy == nil {
		return nil, nil
	}
	var result UniqueKeyPolicyARM

	// Set property ‘UniqueKeys’:
	for _, item := range uniqueKeyPolicy.UniqueKeys {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.UniqueKeys = append(result.UniqueKeys, itemARM.(UniqueKeyARM))
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (uniqueKeyPolicy *UniqueKeyPolicy) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &UniqueKeyPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (uniqueKeyPolicy *UniqueKeyPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UniqueKeyPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UniqueKeyPolicyARM, got %T", armInput)
	}

	// Set property ‘UniqueKeys’:
	for _, item := range typedInput.UniqueKeys {
		var item1 UniqueKey
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		uniqueKeyPolicy.UniqueKeys = append(uniqueKeyPolicy.UniqueKeys, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromUniqueKeyPolicy populates our UniqueKeyPolicy from the provided source UniqueKeyPolicy
func (uniqueKeyPolicy *UniqueKeyPolicy) AssignPropertiesFromUniqueKeyPolicy(source *v1alpha1api20210515storage.UniqueKeyPolicy) error {

	// UniqueKeys
	if source.UniqueKeys != nil {
		uniqueKeyList := make([]UniqueKey, len(source.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range source.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey UniqueKey
			err := uniqueKey.AssignPropertiesFromUniqueKey(&uniqueKeyItem)
			if err != nil {
				return errors.Wrap(err, "populating UniqueKeys from UniqueKeys, calling AssignPropertiesFromUniqueKey()")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		uniqueKeyPolicy.UniqueKeys = uniqueKeyList
	} else {
		uniqueKeyPolicy.UniqueKeys = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUniqueKeyPolicy populates the provided destination UniqueKeyPolicy from our UniqueKeyPolicy
func (uniqueKeyPolicy *UniqueKeyPolicy) AssignPropertiesToUniqueKeyPolicy(destination *v1alpha1api20210515storage.UniqueKeyPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UniqueKeys
	if uniqueKeyPolicy.UniqueKeys != nil {
		uniqueKeyList := make([]v1alpha1api20210515storage.UniqueKey, len(uniqueKeyPolicy.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range uniqueKeyPolicy.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey v1alpha1api20210515storage.UniqueKey
			err := uniqueKeyItem.AssignPropertiesToUniqueKey(&uniqueKey)
			if err != nil {
				return errors.Wrap(err, "populating UniqueKeys from UniqueKeys, calling AssignPropertiesToUniqueKey()")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		destination.UniqueKeys = uniqueKeyList
	} else {
		destination.UniqueKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type UniqueKeyPolicy_Status struct {
	//UniqueKeys: List of unique keys on that enforces uniqueness constraint on
	//documents in the collection in the Azure Cosmos DB service.
	UniqueKeys []UniqueKey_Status `json:"uniqueKeys,omitempty"`
}

var _ genruntime.FromARMConverter = &UniqueKeyPolicy_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (uniqueKeyPolicyStatus *UniqueKeyPolicy_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &UniqueKeyPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (uniqueKeyPolicyStatus *UniqueKeyPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UniqueKeyPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UniqueKeyPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘UniqueKeys’:
	for _, item := range typedInput.UniqueKeys {
		var item1 UniqueKey_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		uniqueKeyPolicyStatus.UniqueKeys = append(uniqueKeyPolicyStatus.UniqueKeys, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromUniqueKeyPolicyStatus populates our UniqueKeyPolicy_Status from the provided source UniqueKeyPolicy_Status
func (uniqueKeyPolicyStatus *UniqueKeyPolicy_Status) AssignPropertiesFromUniqueKeyPolicyStatus(source *v1alpha1api20210515storage.UniqueKeyPolicy_Status) error {

	// UniqueKeys
	if source.UniqueKeys != nil {
		uniqueKeyList := make([]UniqueKey_Status, len(source.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range source.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey UniqueKey_Status
			err := uniqueKey.AssignPropertiesFromUniqueKeyStatus(&uniqueKeyItem)
			if err != nil {
				return errors.Wrap(err, "populating UniqueKeys from UniqueKeys, calling AssignPropertiesFromUniqueKeyStatus()")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		uniqueKeyPolicyStatus.UniqueKeys = uniqueKeyList
	} else {
		uniqueKeyPolicyStatus.UniqueKeys = nil
	}

	// No error
	return nil
}

// AssignPropertiesToUniqueKeyPolicyStatus populates the provided destination UniqueKeyPolicy_Status from our UniqueKeyPolicy_Status
func (uniqueKeyPolicyStatus *UniqueKeyPolicy_Status) AssignPropertiesToUniqueKeyPolicyStatus(destination *v1alpha1api20210515storage.UniqueKeyPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// UniqueKeys
	if uniqueKeyPolicyStatus.UniqueKeys != nil {
		uniqueKeyList := make([]v1alpha1api20210515storage.UniqueKey_Status, len(uniqueKeyPolicyStatus.UniqueKeys))
		for uniqueKeyIndex, uniqueKeyItem := range uniqueKeyPolicyStatus.UniqueKeys {
			// Shadow the loop variable to avoid aliasing
			uniqueKeyItem := uniqueKeyItem
			var uniqueKey v1alpha1api20210515storage.UniqueKey_Status
			err := uniqueKeyItem.AssignPropertiesToUniqueKeyStatus(&uniqueKey)
			if err != nil {
				return errors.Wrap(err, "populating UniqueKeys from UniqueKeys, calling AssignPropertiesToUniqueKeyStatus()")
			}
			uniqueKeyList[uniqueKeyIndex] = uniqueKey
		}
		destination.UniqueKeys = uniqueKeyList
	} else {
		destination.UniqueKeys = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/CompositePath
type CompositePath struct {
	//Order: Sort order for composite paths.
	Order *CompositePathOrder `json:"order,omitempty"`

	//Path: The path for which the indexing behavior applies to. Index paths typically
	//start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`
}

var _ genruntime.ARMTransformer = &CompositePath{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (compositePath *CompositePath) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if compositePath == nil {
		return nil, nil
	}
	var result CompositePathARM

	// Set property ‘Order’:
	if compositePath.Order != nil {
		order := *compositePath.Order
		result.Order = &order
	}

	// Set property ‘Path’:
	if compositePath.Path != nil {
		path := *compositePath.Path
		result.Path = &path
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (compositePath *CompositePath) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &CompositePathARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (compositePath *CompositePath) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CompositePathARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CompositePathARM, got %T", armInput)
	}

	// Set property ‘Order’:
	if typedInput.Order != nil {
		order := *typedInput.Order
		compositePath.Order = &order
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		compositePath.Path = &path
	}

	// No error
	return nil
}

// AssignPropertiesFromCompositePath populates our CompositePath from the provided source CompositePath
func (compositePath *CompositePath) AssignPropertiesFromCompositePath(source *v1alpha1api20210515storage.CompositePath) error {

	// Order
	if source.Order != nil {
		order := CompositePathOrder(*source.Order)
		compositePath.Order = &order
	} else {
		compositePath.Order = nil
	}

	// Path
	compositePath.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignPropertiesToCompositePath populates the provided destination CompositePath from our CompositePath
func (compositePath *CompositePath) AssignPropertiesToCompositePath(destination *v1alpha1api20210515storage.CompositePath) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Order
	if compositePath.Order != nil {
		order := string(*compositePath.Order)
		destination.Order = &order
	} else {
		destination.Order = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(compositePath.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type CompositePath_Status struct {
	//Order: Sort order for composite paths.
	Order *CompositePathStatusOrder `json:"order,omitempty"`

	//Path: The path for which the indexing behavior applies to. Index paths typically
	//start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`
}

var _ genruntime.FromARMConverter = &CompositePath_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (compositePathStatus *CompositePath_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &CompositePath_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (compositePathStatus *CompositePath_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(CompositePath_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected CompositePath_StatusARM, got %T", armInput)
	}

	// Set property ‘Order’:
	if typedInput.Order != nil {
		order := *typedInput.Order
		compositePathStatus.Order = &order
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		compositePathStatus.Path = &path
	}

	// No error
	return nil
}

// AssignPropertiesFromCompositePathStatus populates our CompositePath_Status from the provided source CompositePath_Status
func (compositePathStatus *CompositePath_Status) AssignPropertiesFromCompositePathStatus(source *v1alpha1api20210515storage.CompositePath_Status) error {

	// Order
	if source.Order != nil {
		order := CompositePathStatusOrder(*source.Order)
		compositePathStatus.Order = &order
	} else {
		compositePathStatus.Order = nil
	}

	// Path
	compositePathStatus.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignPropertiesToCompositePathStatus populates the provided destination CompositePath_Status from our CompositePath_Status
func (compositePathStatus *CompositePath_Status) AssignPropertiesToCompositePathStatus(destination *v1alpha1api20210515storage.CompositePath_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Order
	if compositePathStatus.Order != nil {
		order := string(*compositePathStatus.Order)
		destination.Order = &order
	} else {
		destination.Order = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(compositePathStatus.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/ExcludedPath
type ExcludedPath struct {
	//Path: The path for which the indexing behavior applies to. Index paths typically
	//start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`
}

var _ genruntime.ARMTransformer = &ExcludedPath{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (excludedPath *ExcludedPath) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if excludedPath == nil {
		return nil, nil
	}
	var result ExcludedPathARM

	// Set property ‘Path’:
	if excludedPath.Path != nil {
		path := *excludedPath.Path
		result.Path = &path
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (excludedPath *ExcludedPath) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExcludedPathARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (excludedPath *ExcludedPath) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExcludedPathARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExcludedPathARM, got %T", armInput)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		excludedPath.Path = &path
	}

	// No error
	return nil
}

// AssignPropertiesFromExcludedPath populates our ExcludedPath from the provided source ExcludedPath
func (excludedPath *ExcludedPath) AssignPropertiesFromExcludedPath(source *v1alpha1api20210515storage.ExcludedPath) error {

	// Path
	excludedPath.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignPropertiesToExcludedPath populates the provided destination ExcludedPath from our ExcludedPath
func (excludedPath *ExcludedPath) AssignPropertiesToExcludedPath(destination *v1alpha1api20210515storage.ExcludedPath) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Path
	destination.Path = genruntime.ClonePointerToString(excludedPath.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type ExcludedPath_Status struct {
	//Path: The path for which the indexing behavior applies to. Index paths typically
	//start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`
}

var _ genruntime.FromARMConverter = &ExcludedPath_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (excludedPathStatus *ExcludedPath_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExcludedPath_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (excludedPathStatus *ExcludedPath_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExcludedPath_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExcludedPath_StatusARM, got %T", armInput)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		excludedPathStatus.Path = &path
	}

	// No error
	return nil
}

// AssignPropertiesFromExcludedPathStatus populates our ExcludedPath_Status from the provided source ExcludedPath_Status
func (excludedPathStatus *ExcludedPath_Status) AssignPropertiesFromExcludedPathStatus(source *v1alpha1api20210515storage.ExcludedPath_Status) error {

	// Path
	excludedPathStatus.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignPropertiesToExcludedPathStatus populates the provided destination ExcludedPath_Status from our ExcludedPath_Status
func (excludedPathStatus *ExcludedPath_Status) AssignPropertiesToExcludedPathStatus(destination *v1alpha1api20210515storage.ExcludedPath_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Path
	destination.Path = genruntime.ClonePointerToString(excludedPathStatus.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/IncludedPath
type IncludedPath struct {
	//Indexes: List of indexes for this path
	Indexes []Indexes `json:"indexes,omitempty"`

	//Path: The path for which the indexing behavior applies to. Index paths typically
	//start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`
}

var _ genruntime.ARMTransformer = &IncludedPath{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (includedPath *IncludedPath) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if includedPath == nil {
		return nil, nil
	}
	var result IncludedPathARM

	// Set property ‘Indexes’:
	for _, item := range includedPath.Indexes {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Indexes = append(result.Indexes, itemARM.(IndexesARM))
	}

	// Set property ‘Path’:
	if includedPath.Path != nil {
		path := *includedPath.Path
		result.Path = &path
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (includedPath *IncludedPath) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IncludedPathARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (includedPath *IncludedPath) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IncludedPathARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IncludedPathARM, got %T", armInput)
	}

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 Indexes
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		includedPath.Indexes = append(includedPath.Indexes, item1)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		includedPath.Path = &path
	}

	// No error
	return nil
}

// AssignPropertiesFromIncludedPath populates our IncludedPath from the provided source IncludedPath
func (includedPath *IncludedPath) AssignPropertiesFromIncludedPath(source *v1alpha1api20210515storage.IncludedPath) error {

	// Indexes
	if source.Indexes != nil {
		indexList := make([]Indexes, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal Indexes
			err := indexLocal.AssignPropertiesFromIndexes(&indexItem)
			if err != nil {
				return errors.Wrap(err, "populating Indexes from Indexes, calling AssignPropertiesFromIndexes()")
			}
			indexList[index] = indexLocal
		}
		includedPath.Indexes = indexList
	} else {
		includedPath.Indexes = nil
	}

	// Path
	includedPath.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignPropertiesToIncludedPath populates the provided destination IncludedPath from our IncludedPath
func (includedPath *IncludedPath) AssignPropertiesToIncludedPath(destination *v1alpha1api20210515storage.IncludedPath) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Indexes
	if includedPath.Indexes != nil {
		indexList := make([]v1alpha1api20210515storage.Indexes, len(includedPath.Indexes))
		for index, indexItem := range includedPath.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v1alpha1api20210515storage.Indexes
			err := indexItem.AssignPropertiesToIndexes(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "populating Indexes from Indexes, calling AssignPropertiesToIndexes()")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(includedPath.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type IncludedPath_Status struct {
	//Indexes: List of indexes for this path
	Indexes []Indexes_Status `json:"indexes,omitempty"`

	//Path: The path for which the indexing behavior applies to. Index paths typically
	//start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`
}

var _ genruntime.FromARMConverter = &IncludedPath_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (includedPathStatus *IncludedPath_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IncludedPath_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (includedPathStatus *IncludedPath_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IncludedPath_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IncludedPath_StatusARM, got %T", armInput)
	}

	// Set property ‘Indexes’:
	for _, item := range typedInput.Indexes {
		var item1 Indexes_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		includedPathStatus.Indexes = append(includedPathStatus.Indexes, item1)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		includedPathStatus.Path = &path
	}

	// No error
	return nil
}

// AssignPropertiesFromIncludedPathStatus populates our IncludedPath_Status from the provided source IncludedPath_Status
func (includedPathStatus *IncludedPath_Status) AssignPropertiesFromIncludedPathStatus(source *v1alpha1api20210515storage.IncludedPath_Status) error {

	// Indexes
	if source.Indexes != nil {
		indexList := make([]Indexes_Status, len(source.Indexes))
		for index, indexItem := range source.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal Indexes_Status
			err := indexLocal.AssignPropertiesFromIndexesStatus(&indexItem)
			if err != nil {
				return errors.Wrap(err, "populating Indexes from Indexes, calling AssignPropertiesFromIndexesStatus()")
			}
			indexList[index] = indexLocal
		}
		includedPathStatus.Indexes = indexList
	} else {
		includedPathStatus.Indexes = nil
	}

	// Path
	includedPathStatus.Path = genruntime.ClonePointerToString(source.Path)

	// No error
	return nil
}

// AssignPropertiesToIncludedPathStatus populates the provided destination IncludedPath_Status from our IncludedPath_Status
func (includedPathStatus *IncludedPath_Status) AssignPropertiesToIncludedPathStatus(destination *v1alpha1api20210515storage.IncludedPath_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Indexes
	if includedPathStatus.Indexes != nil {
		indexList := make([]v1alpha1api20210515storage.Indexes_Status, len(includedPathStatus.Indexes))
		for index, indexItem := range includedPathStatus.Indexes {
			// Shadow the loop variable to avoid aliasing
			indexItem := indexItem
			var indexLocal v1alpha1api20210515storage.Indexes_Status
			err := indexItem.AssignPropertiesToIndexesStatus(&indexLocal)
			if err != nil {
				return errors.Wrap(err, "populating Indexes from Indexes, calling AssignPropertiesToIndexesStatus()")
			}
			indexList[index] = indexLocal
		}
		destination.Indexes = indexList
	} else {
		destination.Indexes = nil
	}

	// Path
	destination.Path = genruntime.ClonePointerToString(includedPathStatus.Path)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/SpatialSpec
type SpatialSpec struct {
	//Path: The path for which the indexing behavior applies to. Index paths typically
	//start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`

	//Types: List of path's spatial type
	Types []SpatialSpecTypes `json:"types,omitempty"`
}

var _ genruntime.ARMTransformer = &SpatialSpec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (spatialSpec *SpatialSpec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if spatialSpec == nil {
		return nil, nil
	}
	var result SpatialSpecARM

	// Set property ‘Path’:
	if spatialSpec.Path != nil {
		path := *spatialSpec.Path
		result.Path = &path
	}

	// Set property ‘Types’:
	for _, item := range spatialSpec.Types {
		result.Types = append(result.Types, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spatialSpec *SpatialSpec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SpatialSpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spatialSpec *SpatialSpec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SpatialSpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SpatialSpecARM, got %T", armInput)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		spatialSpec.Path = &path
	}

	// Set property ‘Types’:
	for _, item := range typedInput.Types {
		spatialSpec.Types = append(spatialSpec.Types, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromSpatialSpec populates our SpatialSpec from the provided source SpatialSpec
func (spatialSpec *SpatialSpec) AssignPropertiesFromSpatialSpec(source *v1alpha1api20210515storage.SpatialSpec) error {

	// Path
	spatialSpec.Path = genruntime.ClonePointerToString(source.Path)

	// Types
	if source.Types != nil {
		typeList := make([]SpatialSpecTypes, len(source.Types))
		for typeIndex, typeItem := range source.Types {
			// Shadow the loop variable to avoid aliasing
			typeItem := typeItem
			typeList[typeIndex] = SpatialSpecTypes(typeItem)
		}
		spatialSpec.Types = typeList
	} else {
		spatialSpec.Types = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSpatialSpec populates the provided destination SpatialSpec from our SpatialSpec
func (spatialSpec *SpatialSpec) AssignPropertiesToSpatialSpec(destination *v1alpha1api20210515storage.SpatialSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Path
	destination.Path = genruntime.ClonePointerToString(spatialSpec.Path)

	// Types
	if spatialSpec.Types != nil {
		typeList := make([]string, len(spatialSpec.Types))
		for typeIndex, typeItem := range spatialSpec.Types {
			// Shadow the loop variable to avoid aliasing
			typeItem := typeItem
			typeList[typeIndex] = string(typeItem)
		}
		destination.Types = typeList
	} else {
		destination.Types = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type SpatialSpec_Status struct {
	//Path: The path for which the indexing behavior applies to. Index paths typically
	//start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`

	//Types: List of path's spatial type
	Types []SpatialType_Status `json:"types,omitempty"`
}

var _ genruntime.FromARMConverter = &SpatialSpec_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (spatialSpecStatus *SpatialSpec_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &SpatialSpec_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (spatialSpecStatus *SpatialSpec_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SpatialSpec_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SpatialSpec_StatusARM, got %T", armInput)
	}

	// Set property ‘Path’:
	if typedInput.Path != nil {
		path := *typedInput.Path
		spatialSpecStatus.Path = &path
	}

	// Set property ‘Types’:
	for _, item := range typedInput.Types {
		spatialSpecStatus.Types = append(spatialSpecStatus.Types, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromSpatialSpecStatus populates our SpatialSpec_Status from the provided source SpatialSpec_Status
func (spatialSpecStatus *SpatialSpec_Status) AssignPropertiesFromSpatialSpecStatus(source *v1alpha1api20210515storage.SpatialSpec_Status) error {

	// Path
	spatialSpecStatus.Path = genruntime.ClonePointerToString(source.Path)

	// Types
	if source.Types != nil {
		typeList := make([]SpatialType_Status, len(source.Types))
		for typeIndex, typeItem := range source.Types {
			// Shadow the loop variable to avoid aliasing
			typeItem := typeItem
			typeList[typeIndex] = SpatialType_Status(typeItem)
		}
		spatialSpecStatus.Types = typeList
	} else {
		spatialSpecStatus.Types = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSpatialSpecStatus populates the provided destination SpatialSpec_Status from our SpatialSpec_Status
func (spatialSpecStatus *SpatialSpec_Status) AssignPropertiesToSpatialSpecStatus(destination *v1alpha1api20210515storage.SpatialSpec_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Path
	destination.Path = genruntime.ClonePointerToString(spatialSpecStatus.Path)

	// Types
	if spatialSpecStatus.Types != nil {
		typeList := make([]string, len(spatialSpecStatus.Types))
		for typeIndex, typeItem := range spatialSpecStatus.Types {
			// Shadow the loop variable to avoid aliasing
			typeItem := typeItem
			typeList[typeIndex] = string(typeItem)
		}
		destination.Types = typeList
	} else {
		destination.Types = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/UniqueKey
type UniqueKey struct {
	//Paths: List of paths must be unique for each document in the Azure Cosmos DB
	//service
	Paths []string `json:"paths,omitempty"`
}

var _ genruntime.ARMTransformer = &UniqueKey{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (uniqueKey *UniqueKey) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if uniqueKey == nil {
		return nil, nil
	}
	var result UniqueKeyARM

	// Set property ‘Paths’:
	for _, item := range uniqueKey.Paths {
		result.Paths = append(result.Paths, item)
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (uniqueKey *UniqueKey) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &UniqueKeyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (uniqueKey *UniqueKey) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UniqueKeyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UniqueKeyARM, got %T", armInput)
	}

	// Set property ‘Paths’:
	for _, item := range typedInput.Paths {
		uniqueKey.Paths = append(uniqueKey.Paths, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromUniqueKey populates our UniqueKey from the provided source UniqueKey
func (uniqueKey *UniqueKey) AssignPropertiesFromUniqueKey(source *v1alpha1api20210515storage.UniqueKey) error {

	// Paths
	uniqueKey.Paths = genruntime.CloneSliceOfString(source.Paths)

	// No error
	return nil
}

// AssignPropertiesToUniqueKey populates the provided destination UniqueKey from our UniqueKey
func (uniqueKey *UniqueKey) AssignPropertiesToUniqueKey(destination *v1alpha1api20210515storage.UniqueKey) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(uniqueKey.Paths)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type UniqueKey_Status struct {
	//Paths: List of paths must be unique for each document in the Azure Cosmos DB
	//service
	Paths []string `json:"paths,omitempty"`
}

var _ genruntime.FromARMConverter = &UniqueKey_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (uniqueKeyStatus *UniqueKey_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &UniqueKey_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (uniqueKeyStatus *UniqueKey_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UniqueKey_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UniqueKey_StatusARM, got %T", armInput)
	}

	// Set property ‘Paths’:
	for _, item := range typedInput.Paths {
		uniqueKeyStatus.Paths = append(uniqueKeyStatus.Paths, item)
	}

	// No error
	return nil
}

// AssignPropertiesFromUniqueKeyStatus populates our UniqueKey_Status from the provided source UniqueKey_Status
func (uniqueKeyStatus *UniqueKey_Status) AssignPropertiesFromUniqueKeyStatus(source *v1alpha1api20210515storage.UniqueKey_Status) error {

	// Paths
	uniqueKeyStatus.Paths = genruntime.CloneSliceOfString(source.Paths)

	// No error
	return nil
}

// AssignPropertiesToUniqueKeyStatus populates the provided destination UniqueKey_Status from our UniqueKey_Status
func (uniqueKeyStatus *UniqueKey_Status) AssignPropertiesToUniqueKeyStatus(destination *v1alpha1api20210515storage.UniqueKey_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Paths
	destination.Paths = genruntime.CloneSliceOfString(uniqueKeyStatus.Paths)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-05-15/Microsoft.DocumentDB.json#/definitions/Indexes
type Indexes struct {
	//DataType: The datatype for which the indexing behavior is applied to.
	DataType *IndexesDataType `json:"dataType,omitempty"`

	//Kind: Indicates the type of index.
	Kind *IndexesKind `json:"kind,omitempty"`

	//Precision: The precision of the index. -1 is maximum precision.
	Precision *int `json:"precision,omitempty"`
}

var _ genruntime.ARMTransformer = &Indexes{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (indexes *Indexes) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if indexes == nil {
		return nil, nil
	}
	var result IndexesARM

	// Set property ‘DataType’:
	if indexes.DataType != nil {
		dataType := *indexes.DataType
		result.DataType = &dataType
	}

	// Set property ‘Kind’:
	if indexes.Kind != nil {
		kind := *indexes.Kind
		result.Kind = &kind
	}

	// Set property ‘Precision’:
	if indexes.Precision != nil {
		precision := *indexes.Precision
		result.Precision = &precision
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (indexes *Indexes) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &IndexesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (indexes *Indexes) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IndexesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IndexesARM, got %T", armInput)
	}

	// Set property ‘DataType’:
	if typedInput.DataType != nil {
		dataType := *typedInput.DataType
		indexes.DataType = &dataType
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		indexes.Kind = &kind
	}

	// Set property ‘Precision’:
	if typedInput.Precision != nil {
		precision := *typedInput.Precision
		indexes.Precision = &precision
	}

	// No error
	return nil
}

// AssignPropertiesFromIndexes populates our Indexes from the provided source Indexes
func (indexes *Indexes) AssignPropertiesFromIndexes(source *v1alpha1api20210515storage.Indexes) error {

	// DataType
	if source.DataType != nil {
		dataType := IndexesDataType(*source.DataType)
		indexes.DataType = &dataType
	} else {
		indexes.DataType = nil
	}

	// Kind
	if source.Kind != nil {
		kind := IndexesKind(*source.Kind)
		indexes.Kind = &kind
	} else {
		indexes.Kind = nil
	}

	// Precision
	indexes.Precision = genruntime.ClonePointerToInt(source.Precision)

	// No error
	return nil
}

// AssignPropertiesToIndexes populates the provided destination Indexes from our Indexes
func (indexes *Indexes) AssignPropertiesToIndexes(destination *v1alpha1api20210515storage.Indexes) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataType
	if indexes.DataType != nil {
		dataType := string(*indexes.DataType)
		destination.DataType = &dataType
	} else {
		destination.DataType = nil
	}

	// Kind
	if indexes.Kind != nil {
		kind := string(*indexes.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Precision
	destination.Precision = genruntime.ClonePointerToInt(indexes.Precision)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from:
type Indexes_Status struct {
	//DataType: The datatype for which the indexing behavior is applied to.
	DataType *IndexesStatusDataType `json:"dataType,omitempty"`

	//Kind: Indicates the type of index.
	Kind *IndexesStatusKind `json:"kind,omitempty"`

	//Precision: The precision of the index. -1 is maximum precision.
	Precision *int `json:"precision,omitempty"`
}

var _ genruntime.FromARMConverter = &Indexes_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (indexesStatus *Indexes_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &Indexes_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (indexesStatus *Indexes_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Indexes_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Indexes_StatusARM, got %T", armInput)
	}

	// Set property ‘DataType’:
	if typedInput.DataType != nil {
		dataType := *typedInput.DataType
		indexesStatus.DataType = &dataType
	}

	// Set property ‘Kind’:
	if typedInput.Kind != nil {
		kind := *typedInput.Kind
		indexesStatus.Kind = &kind
	}

	// Set property ‘Precision’:
	if typedInput.Precision != nil {
		precision := *typedInput.Precision
		indexesStatus.Precision = &precision
	}

	// No error
	return nil
}

// AssignPropertiesFromIndexesStatus populates our Indexes_Status from the provided source Indexes_Status
func (indexesStatus *Indexes_Status) AssignPropertiesFromIndexesStatus(source *v1alpha1api20210515storage.Indexes_Status) error {

	// DataType
	if source.DataType != nil {
		dataType := IndexesStatusDataType(*source.DataType)
		indexesStatus.DataType = &dataType
	} else {
		indexesStatus.DataType = nil
	}

	// Kind
	if source.Kind != nil {
		kind := IndexesStatusKind(*source.Kind)
		indexesStatus.Kind = &kind
	} else {
		indexesStatus.Kind = nil
	}

	// Precision
	indexesStatus.Precision = genruntime.ClonePointerToInt(source.Precision)

	// No error
	return nil
}

// AssignPropertiesToIndexesStatus populates the provided destination Indexes_Status from our Indexes_Status
func (indexesStatus *Indexes_Status) AssignPropertiesToIndexesStatus(destination *v1alpha1api20210515storage.Indexes_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataType
	if indexesStatus.DataType != nil {
		dataType := string(*indexesStatus.DataType)
		destination.DataType = &dataType
	} else {
		destination.DataType = nil
	}

	// Kind
	if indexesStatus.Kind != nil {
		kind := string(*indexesStatus.Kind)
		destination.Kind = &kind
	} else {
		destination.Kind = nil
	}

	// Precision
	destination.Precision = genruntime.ClonePointerToInt(indexesStatus.Precision)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&SqlDatabaseContainer{}, &SqlDatabaseContainerList{})
}
