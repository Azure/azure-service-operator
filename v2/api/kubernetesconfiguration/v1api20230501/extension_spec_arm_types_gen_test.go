// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Extension_Properties_AksAssignedIdentity_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Extension_Properties_AksAssignedIdentity_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtension_Properties_AksAssignedIdentity_Spec_ARM, Extension_Properties_AksAssignedIdentity_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtension_Properties_AksAssignedIdentity_Spec_ARM runs a test to see if a specific instance of Extension_Properties_AksAssignedIdentity_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtension_Properties_AksAssignedIdentity_Spec_ARM(subject Extension_Properties_AksAssignedIdentity_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Extension_Properties_AksAssignedIdentity_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Extension_Properties_AksAssignedIdentity_Spec_ARM instances for property testing - lazily instantiated
// by Extension_Properties_AksAssignedIdentity_Spec_ARMGenerator()
var extension_Properties_AksAssignedIdentity_Spec_ARMGenerator gopter.Gen

// Extension_Properties_AksAssignedIdentity_Spec_ARMGenerator returns a generator of Extension_Properties_AksAssignedIdentity_Spec_ARM instances for property testing.
func Extension_Properties_AksAssignedIdentity_Spec_ARMGenerator() gopter.Gen {
	if extension_Properties_AksAssignedIdentity_Spec_ARMGenerator != nil {
		return extension_Properties_AksAssignedIdentity_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtension_Properties_AksAssignedIdentity_Spec_ARM(generators)
	extension_Properties_AksAssignedIdentity_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Extension_Properties_AksAssignedIdentity_Spec_ARM{}), generators)

	return extension_Properties_AksAssignedIdentity_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExtension_Properties_AksAssignedIdentity_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtension_Properties_AksAssignedIdentity_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(Extension_Properties_AksAssignedIdentity_Type_Spec_SystemAssigned, Extension_Properties_AksAssignedIdentity_Type_Spec_UserAssigned))
}

func Test_Extension_Properties_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Extension_Properties_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtension_Properties_Spec_ARM, Extension_Properties_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtension_Properties_Spec_ARM runs a test to see if a specific instance of Extension_Properties_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtension_Properties_Spec_ARM(subject Extension_Properties_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Extension_Properties_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Extension_Properties_Spec_ARM instances for property testing - lazily instantiated by
// Extension_Properties_Spec_ARMGenerator()
var extension_Properties_Spec_ARMGenerator gopter.Gen

// Extension_Properties_Spec_ARMGenerator returns a generator of Extension_Properties_Spec_ARM instances for property testing.
// We first initialize extension_Properties_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Extension_Properties_Spec_ARMGenerator() gopter.Gen {
	if extension_Properties_Spec_ARMGenerator != nil {
		return extension_Properties_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtension_Properties_Spec_ARM(generators)
	extension_Properties_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Extension_Properties_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtension_Properties_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForExtension_Properties_Spec_ARM(generators)
	extension_Properties_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Extension_Properties_Spec_ARM{}), generators)

	return extension_Properties_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExtension_Properties_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtension_Properties_Spec_ARM(gens map[string]gopter.Gen) {
	gens["AutoUpgradeMinorVersion"] = gen.PtrOf(gen.Bool())
	gens["ConfigurationProtectedSettings"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["ConfigurationSettings"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["ExtensionType"] = gen.PtrOf(gen.AlphaString())
	gens["ReleaseTrain"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForExtension_Properties_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForExtension_Properties_Spec_ARM(gens map[string]gopter.Gen) {
	gens["AksAssignedIdentity"] = gen.PtrOf(Extension_Properties_AksAssignedIdentity_Spec_ARMGenerator())
	gens["Scope"] = gen.PtrOf(Scope_ARMGenerator())
}

func Test_Extension_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Extension_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForExtension_Spec_ARM, Extension_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForExtension_Spec_ARM runs a test to see if a specific instance of Extension_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForExtension_Spec_ARM(subject Extension_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Extension_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Extension_Spec_ARM instances for property testing - lazily instantiated by Extension_Spec_ARMGenerator()
var extension_Spec_ARMGenerator gopter.Gen

// Extension_Spec_ARMGenerator returns a generator of Extension_Spec_ARM instances for property testing.
// We first initialize extension_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Extension_Spec_ARMGenerator() gopter.Gen {
	if extension_Spec_ARMGenerator != nil {
		return extension_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtension_Spec_ARM(generators)
	extension_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Extension_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForExtension_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForExtension_Spec_ARM(generators)
	extension_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Extension_Spec_ARM{}), generators)

	return extension_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForExtension_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForExtension_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForExtension_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForExtension_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(Identity_ARMGenerator())
	gens["Plan"] = gen.PtrOf(Plan_ARMGenerator())
	gens["Properties"] = gen.PtrOf(Extension_Properties_Spec_ARMGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_ARMGenerator())
}

func Test_Identity_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Identity_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIdentity_ARM, Identity_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIdentity_ARM runs a test to see if a specific instance of Identity_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIdentity_ARM(subject Identity_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Identity_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Identity_ARM instances for property testing - lazily instantiated by Identity_ARMGenerator()
var identity_ARMGenerator gopter.Gen

// Identity_ARMGenerator returns a generator of Identity_ARM instances for property testing.
func Identity_ARMGenerator() gopter.Gen {
	if identity_ARMGenerator != nil {
		return identity_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIdentity_ARM(generators)
	identity_ARMGenerator = gen.Struct(reflect.TypeOf(Identity_ARM{}), generators)

	return identity_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIdentity_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIdentity_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(Identity_Type_SystemAssigned))
}

func Test_Plan_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Plan_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPlan_ARM, Plan_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPlan_ARM runs a test to see if a specific instance of Plan_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPlan_ARM(subject Plan_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Plan_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Plan_ARM instances for property testing - lazily instantiated by Plan_ARMGenerator()
var plan_ARMGenerator gopter.Gen

// Plan_ARMGenerator returns a generator of Plan_ARM instances for property testing.
func Plan_ARMGenerator() gopter.Gen {
	if plan_ARMGenerator != nil {
		return plan_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPlan_ARM(generators)
	plan_ARMGenerator = gen.Struct(reflect.TypeOf(Plan_ARM{}), generators)

	return plan_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPlan_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPlan_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Product"] = gen.PtrOf(gen.AlphaString())
	gens["PromotionCode"] = gen.PtrOf(gen.AlphaString())
	gens["Publisher"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScopeCluster_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScopeCluster_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScopeCluster_ARM, ScopeCluster_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScopeCluster_ARM runs a test to see if a specific instance of ScopeCluster_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScopeCluster_ARM(subject ScopeCluster_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScopeCluster_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScopeCluster_ARM instances for property testing - lazily instantiated by ScopeCluster_ARMGenerator()
var scopeCluster_ARMGenerator gopter.Gen

// ScopeCluster_ARMGenerator returns a generator of ScopeCluster_ARM instances for property testing.
func ScopeCluster_ARMGenerator() gopter.Gen {
	if scopeCluster_ARMGenerator != nil {
		return scopeCluster_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScopeCluster_ARM(generators)
	scopeCluster_ARMGenerator = gen.Struct(reflect.TypeOf(ScopeCluster_ARM{}), generators)

	return scopeCluster_ARMGenerator
}

// AddIndependentPropertyGeneratorsForScopeCluster_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScopeCluster_ARM(gens map[string]gopter.Gen) {
	gens["ReleaseNamespace"] = gen.PtrOf(gen.AlphaString())
}

func Test_ScopeNamespace_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ScopeNamespace_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScopeNamespace_ARM, ScopeNamespace_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScopeNamespace_ARM runs a test to see if a specific instance of ScopeNamespace_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScopeNamespace_ARM(subject ScopeNamespace_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ScopeNamespace_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ScopeNamespace_ARM instances for property testing - lazily instantiated by ScopeNamespace_ARMGenerator()
var scopeNamespace_ARMGenerator gopter.Gen

// ScopeNamespace_ARMGenerator returns a generator of ScopeNamespace_ARM instances for property testing.
func ScopeNamespace_ARMGenerator() gopter.Gen {
	if scopeNamespace_ARMGenerator != nil {
		return scopeNamespace_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForScopeNamespace_ARM(generators)
	scopeNamespace_ARMGenerator = gen.Struct(reflect.TypeOf(ScopeNamespace_ARM{}), generators)

	return scopeNamespace_ARMGenerator
}

// AddIndependentPropertyGeneratorsForScopeNamespace_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForScopeNamespace_ARM(gens map[string]gopter.Gen) {
	gens["TargetNamespace"] = gen.PtrOf(gen.AlphaString())
}

func Test_Scope_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Scope_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForScope_ARM, Scope_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForScope_ARM runs a test to see if a specific instance of Scope_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForScope_ARM(subject Scope_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Scope_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Scope_ARM instances for property testing - lazily instantiated by Scope_ARMGenerator()
var scope_ARMGenerator gopter.Gen

// Scope_ARMGenerator returns a generator of Scope_ARM instances for property testing.
func Scope_ARMGenerator() gopter.Gen {
	if scope_ARMGenerator != nil {
		return scope_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForScope_ARM(generators)
	scope_ARMGenerator = gen.Struct(reflect.TypeOf(Scope_ARM{}), generators)

	return scope_ARMGenerator
}

// AddRelatedPropertyGeneratorsForScope_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForScope_ARM(gens map[string]gopter.Gen) {
	gens["Cluster"] = gen.PtrOf(ScopeCluster_ARMGenerator())
	gens["Namespace"] = gen.PtrOf(ScopeNamespace_ARMGenerator())
}

func Test_SystemData_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_ARM, SystemData_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_ARM runs a test to see if a specific instance of SystemData_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_ARM(subject SystemData_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_ARM instances for property testing - lazily instantiated by SystemData_ARMGenerator()
var systemData_ARMGenerator gopter.Gen

// SystemData_ARMGenerator returns a generator of SystemData_ARM instances for property testing.
func SystemData_ARMGenerator() gopter.Gen {
	if systemData_ARMGenerator != nil {
		return systemData_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_ARM(generators)
	systemData_ARMGenerator = gen.Struct(reflect.TypeOf(SystemData_ARM{}), generators)

	return systemData_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_ARM(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_Application,
		SystemData_CreatedByType_Key,
		SystemData_CreatedByType_ManagedIdentity,
		SystemData_CreatedByType_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_Application,
		SystemData_LastModifiedByType_Key,
		SystemData_LastModifiedByType_ManagedIdentity,
		SystemData_LastModifiedByType_User))
}
