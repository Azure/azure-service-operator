// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230501

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_AzureBlobDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureBlobDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureBlobDefinition_STATUS_ARM, AzureBlobDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureBlobDefinition_STATUS_ARM runs a test to see if a specific instance of AzureBlobDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureBlobDefinition_STATUS_ARM(subject AzureBlobDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureBlobDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureBlobDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// AzureBlobDefinition_STATUS_ARMGenerator()
var azureBlobDefinition_STATUS_ARMGenerator gopter.Gen

// AzureBlobDefinition_STATUS_ARMGenerator returns a generator of AzureBlobDefinition_STATUS_ARM instances for property testing.
// We first initialize azureBlobDefinition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func AzureBlobDefinition_STATUS_ARMGenerator() gopter.Gen {
	if azureBlobDefinition_STATUS_ARMGenerator != nil {
		return azureBlobDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureBlobDefinition_STATUS_ARM(generators)
	azureBlobDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureBlobDefinition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureBlobDefinition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForAzureBlobDefinition_STATUS_ARM(generators)
	azureBlobDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureBlobDefinition_STATUS_ARM{}), generators)

	return azureBlobDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureBlobDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureBlobDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ContainerName"] = gen.PtrOf(gen.AlphaString())
	gens["LocalAuthRef"] = gen.PtrOf(gen.AlphaString())
	gens["SyncIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["TimeoutInSeconds"] = gen.PtrOf(gen.Int())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForAzureBlobDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForAzureBlobDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ManagedIdentity"] = gen.PtrOf(ManagedIdentityDefinition_STATUS_ARMGenerator())
	gens["ServicePrincipal"] = gen.PtrOf(ServicePrincipalDefinition_STATUS_ARMGenerator())
}

func Test_BucketDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BucketDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBucketDefinition_STATUS_ARM, BucketDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBucketDefinition_STATUS_ARM runs a test to see if a specific instance of BucketDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBucketDefinition_STATUS_ARM(subject BucketDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BucketDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BucketDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// BucketDefinition_STATUS_ARMGenerator()
var bucketDefinition_STATUS_ARMGenerator gopter.Gen

// BucketDefinition_STATUS_ARMGenerator returns a generator of BucketDefinition_STATUS_ARM instances for property testing.
func BucketDefinition_STATUS_ARMGenerator() gopter.Gen {
	if bucketDefinition_STATUS_ARMGenerator != nil {
		return bucketDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBucketDefinition_STATUS_ARM(generators)
	bucketDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BucketDefinition_STATUS_ARM{}), generators)

	return bucketDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBucketDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBucketDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BucketName"] = gen.PtrOf(gen.AlphaString())
	gens["Insecure"] = gen.PtrOf(gen.Bool())
	gens["LocalAuthRef"] = gen.PtrOf(gen.AlphaString())
	gens["SyncIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["TimeoutInSeconds"] = gen.PtrOf(gen.Int())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

func Test_FluxConfiguration_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FluxConfiguration_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFluxConfiguration_Properties_STATUS_ARM, FluxConfiguration_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFluxConfiguration_Properties_STATUS_ARM runs a test to see if a specific instance of FluxConfiguration_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFluxConfiguration_Properties_STATUS_ARM(subject FluxConfiguration_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FluxConfiguration_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FluxConfiguration_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// FluxConfiguration_Properties_STATUS_ARMGenerator()
var fluxConfiguration_Properties_STATUS_ARMGenerator gopter.Gen

// FluxConfiguration_Properties_STATUS_ARMGenerator returns a generator of FluxConfiguration_Properties_STATUS_ARM instances for property testing.
// We first initialize fluxConfiguration_Properties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FluxConfiguration_Properties_STATUS_ARMGenerator() gopter.Gen {
	if fluxConfiguration_Properties_STATUS_ARMGenerator != nil {
		return fluxConfiguration_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFluxConfiguration_Properties_STATUS_ARM(generators)
	fluxConfiguration_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FluxConfiguration_Properties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFluxConfiguration_Properties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFluxConfiguration_Properties_STATUS_ARM(generators)
	fluxConfiguration_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FluxConfiguration_Properties_STATUS_ARM{}), generators)

	return fluxConfiguration_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFluxConfiguration_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFluxConfiguration_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComplianceState"] = gen.PtrOf(gen.OneConstOf(
		FluxComplianceStateDefinition_STATUS_ARM_Compliant,
		FluxComplianceStateDefinition_STATUS_ARM_NonCompliant,
		FluxComplianceStateDefinition_STATUS_ARM_Pending,
		FluxComplianceStateDefinition_STATUS_ARM_Suspended,
		FluxComplianceStateDefinition_STATUS_ARM_Unknown))
	gens["ConfigurationProtectedSettings"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["ErrorMessage"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ProvisioningStateDefinition_STATUS_ARM_Canceled,
		ProvisioningStateDefinition_STATUS_ARM_Creating,
		ProvisioningStateDefinition_STATUS_ARM_Deleting,
		ProvisioningStateDefinition_STATUS_ARM_Failed,
		ProvisioningStateDefinition_STATUS_ARM_Succeeded,
		ProvisioningStateDefinition_STATUS_ARM_Updating))
	gens["ReconciliationWaitDuration"] = gen.PtrOf(gen.AlphaString())
	gens["RepositoryPublicKey"] = gen.PtrOf(gen.AlphaString())
	gens["Scope"] = gen.PtrOf(gen.OneConstOf(ScopeDefinition_STATUS_ARM_Cluster, ScopeDefinition_STATUS_ARM_Namespace))
	gens["SourceKind"] = gen.PtrOf(gen.OneConstOf(SourceKindDefinition_STATUS_ARM_AzureBlob, SourceKindDefinition_STATUS_ARM_Bucket, SourceKindDefinition_STATUS_ARM_GitRepository))
	gens["SourceSyncedCommitId"] = gen.PtrOf(gen.AlphaString())
	gens["SourceUpdatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["StatusUpdatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["Suspend"] = gen.PtrOf(gen.Bool())
	gens["WaitForReconciliation"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForFluxConfiguration_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFluxConfiguration_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AzureBlob"] = gen.PtrOf(AzureBlobDefinition_STATUS_ARMGenerator())
	gens["Bucket"] = gen.PtrOf(BucketDefinition_STATUS_ARMGenerator())
	gens["GitRepository"] = gen.PtrOf(GitRepositoryDefinition_STATUS_ARMGenerator())
	gens["Kustomizations"] = gen.MapOf(
		gen.AlphaString(),
		KustomizationDefinition_STATUS_ARMGenerator())
	gens["Statuses"] = gen.SliceOf(ObjectStatusDefinition_STATUS_ARMGenerator())
}

func Test_FluxConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FluxConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFluxConfiguration_STATUS_ARM, FluxConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFluxConfiguration_STATUS_ARM runs a test to see if a specific instance of FluxConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFluxConfiguration_STATUS_ARM(subject FluxConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FluxConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FluxConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// FluxConfiguration_STATUS_ARMGenerator()
var fluxConfiguration_STATUS_ARMGenerator gopter.Gen

// FluxConfiguration_STATUS_ARMGenerator returns a generator of FluxConfiguration_STATUS_ARM instances for property testing.
// We first initialize fluxConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FluxConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if fluxConfiguration_STATUS_ARMGenerator != nil {
		return fluxConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFluxConfiguration_STATUS_ARM(generators)
	fluxConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FluxConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFluxConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFluxConfiguration_STATUS_ARM(generators)
	fluxConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FluxConfiguration_STATUS_ARM{}), generators)

	return fluxConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFluxConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFluxConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFluxConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFluxConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FluxConfiguration_Properties_STATUS_ARMGenerator())
}

func Test_GitRepositoryDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitRepositoryDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitRepositoryDefinition_STATUS_ARM, GitRepositoryDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitRepositoryDefinition_STATUS_ARM runs a test to see if a specific instance of GitRepositoryDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGitRepositoryDefinition_STATUS_ARM(subject GitRepositoryDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitRepositoryDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitRepositoryDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// GitRepositoryDefinition_STATUS_ARMGenerator()
var gitRepositoryDefinition_STATUS_ARMGenerator gopter.Gen

// GitRepositoryDefinition_STATUS_ARMGenerator returns a generator of GitRepositoryDefinition_STATUS_ARM instances for property testing.
// We first initialize gitRepositoryDefinition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func GitRepositoryDefinition_STATUS_ARMGenerator() gopter.Gen {
	if gitRepositoryDefinition_STATUS_ARMGenerator != nil {
		return gitRepositoryDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitRepositoryDefinition_STATUS_ARM(generators)
	gitRepositoryDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(GitRepositoryDefinition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitRepositoryDefinition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForGitRepositoryDefinition_STATUS_ARM(generators)
	gitRepositoryDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(GitRepositoryDefinition_STATUS_ARM{}), generators)

	return gitRepositoryDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForGitRepositoryDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitRepositoryDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HttpsUser"] = gen.PtrOf(gen.AlphaString())
	gens["LocalAuthRef"] = gen.PtrOf(gen.AlphaString())
	gens["SshKnownHosts"] = gen.PtrOf(gen.AlphaString())
	gens["SyncIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["TimeoutInSeconds"] = gen.PtrOf(gen.Int())
	gens["Url"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForGitRepositoryDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForGitRepositoryDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RepositoryRef"] = gen.PtrOf(RepositoryRefDefinition_STATUS_ARMGenerator())
}

func Test_HelmReleasePropertiesDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HelmReleasePropertiesDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHelmReleasePropertiesDefinition_STATUS_ARM, HelmReleasePropertiesDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHelmReleasePropertiesDefinition_STATUS_ARM runs a test to see if a specific instance of HelmReleasePropertiesDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHelmReleasePropertiesDefinition_STATUS_ARM(subject HelmReleasePropertiesDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HelmReleasePropertiesDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HelmReleasePropertiesDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// HelmReleasePropertiesDefinition_STATUS_ARMGenerator()
var helmReleasePropertiesDefinition_STATUS_ARMGenerator gopter.Gen

// HelmReleasePropertiesDefinition_STATUS_ARMGenerator returns a generator of HelmReleasePropertiesDefinition_STATUS_ARM instances for property testing.
// We first initialize helmReleasePropertiesDefinition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func HelmReleasePropertiesDefinition_STATUS_ARMGenerator() gopter.Gen {
	if helmReleasePropertiesDefinition_STATUS_ARMGenerator != nil {
		return helmReleasePropertiesDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHelmReleasePropertiesDefinition_STATUS_ARM(generators)
	helmReleasePropertiesDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HelmReleasePropertiesDefinition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHelmReleasePropertiesDefinition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForHelmReleasePropertiesDefinition_STATUS_ARM(generators)
	helmReleasePropertiesDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HelmReleasePropertiesDefinition_STATUS_ARM{}), generators)

	return helmReleasePropertiesDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHelmReleasePropertiesDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHelmReleasePropertiesDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["FailureCount"] = gen.PtrOf(gen.Int())
	gens["InstallFailureCount"] = gen.PtrOf(gen.Int())
	gens["LastRevisionApplied"] = gen.PtrOf(gen.Int())
	gens["UpgradeFailureCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForHelmReleasePropertiesDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForHelmReleasePropertiesDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HelmChartRef"] = gen.PtrOf(ObjectReferenceDefinition_STATUS_ARMGenerator())
}

func Test_KustomizationDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of KustomizationDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForKustomizationDefinition_STATUS_ARM, KustomizationDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForKustomizationDefinition_STATUS_ARM runs a test to see if a specific instance of KustomizationDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForKustomizationDefinition_STATUS_ARM(subject KustomizationDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual KustomizationDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of KustomizationDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// KustomizationDefinition_STATUS_ARMGenerator()
var kustomizationDefinition_STATUS_ARMGenerator gopter.Gen

// KustomizationDefinition_STATUS_ARMGenerator returns a generator of KustomizationDefinition_STATUS_ARM instances for property testing.
// We first initialize kustomizationDefinition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func KustomizationDefinition_STATUS_ARMGenerator() gopter.Gen {
	if kustomizationDefinition_STATUS_ARMGenerator != nil {
		return kustomizationDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKustomizationDefinition_STATUS_ARM(generators)
	kustomizationDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(KustomizationDefinition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForKustomizationDefinition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForKustomizationDefinition_STATUS_ARM(generators)
	kustomizationDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(KustomizationDefinition_STATUS_ARM{}), generators)

	return kustomizationDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForKustomizationDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForKustomizationDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DependsOn"] = gen.SliceOf(gen.AlphaString())
	gens["Force"] = gen.PtrOf(gen.Bool())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Prune"] = gen.PtrOf(gen.Bool())
	gens["RetryIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["SyncIntervalInSeconds"] = gen.PtrOf(gen.Int())
	gens["TimeoutInSeconds"] = gen.PtrOf(gen.Int())
	gens["Wait"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForKustomizationDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForKustomizationDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PostBuild"] = gen.PtrOf(PostBuildDefinition_STATUS_ARMGenerator())
}

func Test_ManagedIdentityDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedIdentityDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedIdentityDefinition_STATUS_ARM, ManagedIdentityDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedIdentityDefinition_STATUS_ARM runs a test to see if a specific instance of ManagedIdentityDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedIdentityDefinition_STATUS_ARM(subject ManagedIdentityDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedIdentityDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedIdentityDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedIdentityDefinition_STATUS_ARMGenerator()
var managedIdentityDefinition_STATUS_ARMGenerator gopter.Gen

// ManagedIdentityDefinition_STATUS_ARMGenerator returns a generator of ManagedIdentityDefinition_STATUS_ARM instances for property testing.
func ManagedIdentityDefinition_STATUS_ARMGenerator() gopter.Gen {
	if managedIdentityDefinition_STATUS_ARMGenerator != nil {
		return managedIdentityDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedIdentityDefinition_STATUS_ARM(generators)
	managedIdentityDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedIdentityDefinition_STATUS_ARM{}), generators)

	return managedIdentityDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedIdentityDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedIdentityDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ObjectReferenceDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ObjectReferenceDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForObjectReferenceDefinition_STATUS_ARM, ObjectReferenceDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForObjectReferenceDefinition_STATUS_ARM runs a test to see if a specific instance of ObjectReferenceDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForObjectReferenceDefinition_STATUS_ARM(subject ObjectReferenceDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ObjectReferenceDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ObjectReferenceDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// ObjectReferenceDefinition_STATUS_ARMGenerator()
var objectReferenceDefinition_STATUS_ARMGenerator gopter.Gen

// ObjectReferenceDefinition_STATUS_ARMGenerator returns a generator of ObjectReferenceDefinition_STATUS_ARM instances for property testing.
func ObjectReferenceDefinition_STATUS_ARMGenerator() gopter.Gen {
	if objectReferenceDefinition_STATUS_ARMGenerator != nil {
		return objectReferenceDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForObjectReferenceDefinition_STATUS_ARM(generators)
	objectReferenceDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ObjectReferenceDefinition_STATUS_ARM{}), generators)

	return objectReferenceDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForObjectReferenceDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForObjectReferenceDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
}

func Test_ObjectStatusConditionDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ObjectStatusConditionDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForObjectStatusConditionDefinition_STATUS_ARM, ObjectStatusConditionDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForObjectStatusConditionDefinition_STATUS_ARM runs a test to see if a specific instance of ObjectStatusConditionDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForObjectStatusConditionDefinition_STATUS_ARM(subject ObjectStatusConditionDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ObjectStatusConditionDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ObjectStatusConditionDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// ObjectStatusConditionDefinition_STATUS_ARMGenerator()
var objectStatusConditionDefinition_STATUS_ARMGenerator gopter.Gen

// ObjectStatusConditionDefinition_STATUS_ARMGenerator returns a generator of ObjectStatusConditionDefinition_STATUS_ARM instances for property testing.
func ObjectStatusConditionDefinition_STATUS_ARMGenerator() gopter.Gen {
	if objectStatusConditionDefinition_STATUS_ARMGenerator != nil {
		return objectStatusConditionDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForObjectStatusConditionDefinition_STATUS_ARM(generators)
	objectStatusConditionDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ObjectStatusConditionDefinition_STATUS_ARM{}), generators)

	return objectStatusConditionDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForObjectStatusConditionDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForObjectStatusConditionDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LastTransitionTime"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Reason"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_ObjectStatusDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ObjectStatusDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForObjectStatusDefinition_STATUS_ARM, ObjectStatusDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForObjectStatusDefinition_STATUS_ARM runs a test to see if a specific instance of ObjectStatusDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForObjectStatusDefinition_STATUS_ARM(subject ObjectStatusDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ObjectStatusDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ObjectStatusDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// ObjectStatusDefinition_STATUS_ARMGenerator()
var objectStatusDefinition_STATUS_ARMGenerator gopter.Gen

// ObjectStatusDefinition_STATUS_ARMGenerator returns a generator of ObjectStatusDefinition_STATUS_ARM instances for property testing.
// We first initialize objectStatusDefinition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ObjectStatusDefinition_STATUS_ARMGenerator() gopter.Gen {
	if objectStatusDefinition_STATUS_ARMGenerator != nil {
		return objectStatusDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForObjectStatusDefinition_STATUS_ARM(generators)
	objectStatusDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ObjectStatusDefinition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForObjectStatusDefinition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForObjectStatusDefinition_STATUS_ARM(generators)
	objectStatusDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ObjectStatusDefinition_STATUS_ARM{}), generators)

	return objectStatusDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForObjectStatusDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForObjectStatusDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ComplianceState"] = gen.PtrOf(gen.OneConstOf(
		FluxComplianceStateDefinition_STATUS_ARM_Compliant,
		FluxComplianceStateDefinition_STATUS_ARM_NonCompliant,
		FluxComplianceStateDefinition_STATUS_ARM_Pending,
		FluxComplianceStateDefinition_STATUS_ARM_Suspended,
		FluxComplianceStateDefinition_STATUS_ARM_Unknown))
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Namespace"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForObjectStatusDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForObjectStatusDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AppliedBy"] = gen.PtrOf(ObjectReferenceDefinition_STATUS_ARMGenerator())
	gens["HelmReleaseProperties"] = gen.PtrOf(HelmReleasePropertiesDefinition_STATUS_ARMGenerator())
	gens["StatusConditions"] = gen.SliceOf(ObjectStatusConditionDefinition_STATUS_ARMGenerator())
}

func Test_PostBuildDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of PostBuildDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPostBuildDefinition_STATUS_ARM, PostBuildDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPostBuildDefinition_STATUS_ARM runs a test to see if a specific instance of PostBuildDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPostBuildDefinition_STATUS_ARM(subject PostBuildDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual PostBuildDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of PostBuildDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// PostBuildDefinition_STATUS_ARMGenerator()
var postBuildDefinition_STATUS_ARMGenerator gopter.Gen

// PostBuildDefinition_STATUS_ARMGenerator returns a generator of PostBuildDefinition_STATUS_ARM instances for property testing.
// We first initialize postBuildDefinition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func PostBuildDefinition_STATUS_ARMGenerator() gopter.Gen {
	if postBuildDefinition_STATUS_ARMGenerator != nil {
		return postBuildDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPostBuildDefinition_STATUS_ARM(generators)
	postBuildDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PostBuildDefinition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPostBuildDefinition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForPostBuildDefinition_STATUS_ARM(generators)
	postBuildDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(PostBuildDefinition_STATUS_ARM{}), generators)

	return postBuildDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPostBuildDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPostBuildDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Substitute"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForPostBuildDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForPostBuildDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["SubstituteFrom"] = gen.SliceOf(SubstituteFromDefinition_STATUS_ARMGenerator())
}

func Test_RepositoryRefDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RepositoryRefDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRepositoryRefDefinition_STATUS_ARM, RepositoryRefDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRepositoryRefDefinition_STATUS_ARM runs a test to see if a specific instance of RepositoryRefDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRepositoryRefDefinition_STATUS_ARM(subject RepositoryRefDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RepositoryRefDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RepositoryRefDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// RepositoryRefDefinition_STATUS_ARMGenerator()
var repositoryRefDefinition_STATUS_ARMGenerator gopter.Gen

// RepositoryRefDefinition_STATUS_ARMGenerator returns a generator of RepositoryRefDefinition_STATUS_ARM instances for property testing.
func RepositoryRefDefinition_STATUS_ARMGenerator() gopter.Gen {
	if repositoryRefDefinition_STATUS_ARMGenerator != nil {
		return repositoryRefDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRepositoryRefDefinition_STATUS_ARM(generators)
	repositoryRefDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RepositoryRefDefinition_STATUS_ARM{}), generators)

	return repositoryRefDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRepositoryRefDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRepositoryRefDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Branch"] = gen.PtrOf(gen.AlphaString())
	gens["Commit"] = gen.PtrOf(gen.AlphaString())
	gens["Semver"] = gen.PtrOf(gen.AlphaString())
	gens["Tag"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServicePrincipalDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServicePrincipalDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServicePrincipalDefinition_STATUS_ARM, ServicePrincipalDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServicePrincipalDefinition_STATUS_ARM runs a test to see if a specific instance of ServicePrincipalDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServicePrincipalDefinition_STATUS_ARM(subject ServicePrincipalDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServicePrincipalDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServicePrincipalDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// ServicePrincipalDefinition_STATUS_ARMGenerator()
var servicePrincipalDefinition_STATUS_ARMGenerator gopter.Gen

// ServicePrincipalDefinition_STATUS_ARMGenerator returns a generator of ServicePrincipalDefinition_STATUS_ARM instances for property testing.
func ServicePrincipalDefinition_STATUS_ARMGenerator() gopter.Gen {
	if servicePrincipalDefinition_STATUS_ARMGenerator != nil {
		return servicePrincipalDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServicePrincipalDefinition_STATUS_ARM(generators)
	servicePrincipalDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServicePrincipalDefinition_STATUS_ARM{}), generators)

	return servicePrincipalDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServicePrincipalDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServicePrincipalDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientCertificateSendChain"] = gen.PtrOf(gen.Bool())
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

func Test_SubstituteFromDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubstituteFromDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubstituteFromDefinition_STATUS_ARM, SubstituteFromDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubstituteFromDefinition_STATUS_ARM runs a test to see if a specific instance of SubstituteFromDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubstituteFromDefinition_STATUS_ARM(subject SubstituteFromDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubstituteFromDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubstituteFromDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// SubstituteFromDefinition_STATUS_ARMGenerator()
var substituteFromDefinition_STATUS_ARMGenerator gopter.Gen

// SubstituteFromDefinition_STATUS_ARMGenerator returns a generator of SubstituteFromDefinition_STATUS_ARM instances for property testing.
func SubstituteFromDefinition_STATUS_ARMGenerator() gopter.Gen {
	if substituteFromDefinition_STATUS_ARMGenerator != nil {
		return substituteFromDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubstituteFromDefinition_STATUS_ARM(generators)
	substituteFromDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SubstituteFromDefinition_STATUS_ARM{}), generators)

	return substituteFromDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSubstituteFromDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubstituteFromDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Optional"] = gen.PtrOf(gen.Bool())
}
