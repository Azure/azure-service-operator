// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211001

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ContainerGroup_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroup_STATUS_ARM, ContainerGroup_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroup_STATUS_ARM runs a test to see if a specific instance of ContainerGroup_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroup_STATUS_ARM(subject ContainerGroup_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerGroup_STATUS_ARMGenerator()
var containerGroup_STATUS_ARMGenerator gopter.Gen

// ContainerGroup_STATUS_ARMGenerator returns a generator of ContainerGroup_STATUS_ARM instances for property testing.
// We first initialize containerGroup_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroup_STATUS_ARMGenerator() gopter.Gen {
	if containerGroup_STATUS_ARMGenerator != nil {
		return containerGroup_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_STATUS_ARM(generators)
	containerGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroup_STATUS_ARM(generators)
	containerGroup_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_ARM{}), generators)

	return containerGroup_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroup_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerGroup_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroup_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ContainerGroupIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(ContainerGroup_Properties_STATUS_ARMGenerator())
}

func Test_ContainerGroup_Properties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_Properties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroup_Properties_STATUS_ARM, ContainerGroup_Properties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroup_Properties_STATUS_ARM runs a test to see if a specific instance of ContainerGroup_Properties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroup_Properties_STATUS_ARM(subject ContainerGroup_Properties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_Properties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_Properties_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerGroup_Properties_STATUS_ARMGenerator()
var containerGroup_Properties_STATUS_ARMGenerator gopter.Gen

// ContainerGroup_Properties_STATUS_ARMGenerator returns a generator of ContainerGroup_Properties_STATUS_ARM instances for property testing.
// We first initialize containerGroup_Properties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroup_Properties_STATUS_ARMGenerator() gopter.Gen {
	if containerGroup_Properties_STATUS_ARMGenerator != nil {
		return containerGroup_Properties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_Properties_STATUS_ARM(generators)
	containerGroup_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_Properties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_Properties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroup_Properties_STATUS_ARM(generators)
	containerGroup_Properties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_Properties_STATUS_ARM{}), generators)

	return containerGroup_Properties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroup_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroup_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(ContainerGroup_Properties_OsType_STATUS_Linux, ContainerGroup_Properties_OsType_STATUS_Windows))
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RestartPolicy"] = gen.PtrOf(gen.OneConstOf(ContainerGroup_Properties_RestartPolicy_STATUS_Always, ContainerGroup_Properties_RestartPolicy_STATUS_Never, ContainerGroup_Properties_RestartPolicy_STATUS_OnFailure))
	gens["Sku"] = gen.PtrOf(gen.OneConstOf(ContainerGroupSku_STATUS_Dedicated, ContainerGroupSku_STATUS_Standard))
}

// AddRelatedPropertyGeneratorsForContainerGroup_Properties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroup_Properties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Containers"] = gen.SliceOf(Container_STATUS_ARMGenerator())
	gens["Diagnostics"] = gen.PtrOf(ContainerGroupDiagnostics_STATUS_ARMGenerator())
	gens["DnsConfig"] = gen.PtrOf(DnsConfiguration_STATUS_ARMGenerator())
	gens["EncryptionProperties"] = gen.PtrOf(EncryptionProperties_STATUS_ARMGenerator())
	gens["ImageRegistryCredentials"] = gen.SliceOf(ImageRegistryCredential_STATUS_ARMGenerator())
	gens["InitContainers"] = gen.SliceOf(InitContainerDefinition_STATUS_ARMGenerator())
	gens["InstanceView"] = gen.PtrOf(ContainerGroup_Properties_InstanceView_STATUS_ARMGenerator())
	gens["IpAddress"] = gen.PtrOf(IpAddress_STATUS_ARMGenerator())
	gens["SubnetIds"] = gen.SliceOf(ContainerGroupSubnetId_STATUS_ARMGenerator())
	gens["Volumes"] = gen.SliceOf(Volume_STATUS_ARMGenerator())
}

func Test_ContainerGroupIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupIdentity_STATUS_ARM, ContainerGroupIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupIdentity_STATUS_ARM runs a test to see if a specific instance of ContainerGroupIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupIdentity_STATUS_ARM(subject ContainerGroupIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerGroupIdentity_STATUS_ARMGenerator()
var containerGroupIdentity_STATUS_ARMGenerator gopter.Gen

// ContainerGroupIdentity_STATUS_ARMGenerator returns a generator of ContainerGroupIdentity_STATUS_ARM instances for property testing.
// We first initialize containerGroupIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupIdentity_STATUS_ARMGenerator() gopter.Gen {
	if containerGroupIdentity_STATUS_ARMGenerator != nil {
		return containerGroupIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUS_ARM(generators)
	containerGroupIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupIdentity_STATUS_ARM(generators)
	containerGroupIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_STATUS_ARM{}), generators)

	return containerGroupIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ContainerGroupIdentity_Type_STATUS_None,
		ContainerGroupIdentity_Type_STATUS_SystemAssigned,
		ContainerGroupIdentity_Type_STATUS_SystemAssignedUserAssigned,
		ContainerGroupIdentity_Type_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForContainerGroupIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator())
}

func Test_Container_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Container_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainer_STATUS_ARM, Container_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainer_STATUS_ARM runs a test to see if a specific instance of Container_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainer_STATUS_ARM(subject Container_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Container_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Container_STATUS_ARM instances for property testing - lazily instantiated by
// Container_STATUS_ARMGenerator()
var container_STATUS_ARMGenerator gopter.Gen

// Container_STATUS_ARMGenerator returns a generator of Container_STATUS_ARM instances for property testing.
// We first initialize container_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Container_STATUS_ARMGenerator() gopter.Gen {
	if container_STATUS_ARMGenerator != nil {
		return container_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainer_STATUS_ARM(generators)
	container_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Container_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainer_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainer_STATUS_ARM(generators)
	container_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Container_STATUS_ARM{}), generators)

	return container_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainer_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainer_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainer_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainer_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ContainerProperties_STATUS_ARMGenerator())
}

func Test_ContainerGroup_Properties_InstanceView_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_Properties_InstanceView_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroup_Properties_InstanceView_STATUS_ARM, ContainerGroup_Properties_InstanceView_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroup_Properties_InstanceView_STATUS_ARM runs a test to see if a specific instance of ContainerGroup_Properties_InstanceView_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroup_Properties_InstanceView_STATUS_ARM(subject ContainerGroup_Properties_InstanceView_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_Properties_InstanceView_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_Properties_InstanceView_STATUS_ARM instances for property testing - lazily instantiated
// by ContainerGroup_Properties_InstanceView_STATUS_ARMGenerator()
var containerGroup_Properties_InstanceView_STATUS_ARMGenerator gopter.Gen

// ContainerGroup_Properties_InstanceView_STATUS_ARMGenerator returns a generator of ContainerGroup_Properties_InstanceView_STATUS_ARM instances for property testing.
// We first initialize containerGroup_Properties_InstanceView_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroup_Properties_InstanceView_STATUS_ARMGenerator() gopter.Gen {
	if containerGroup_Properties_InstanceView_STATUS_ARMGenerator != nil {
		return containerGroup_Properties_InstanceView_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_Properties_InstanceView_STATUS_ARM(generators)
	containerGroup_Properties_InstanceView_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_Properties_InstanceView_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_Properties_InstanceView_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroup_Properties_InstanceView_STATUS_ARM(generators)
	containerGroup_Properties_InstanceView_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_Properties_InstanceView_STATUS_ARM{}), generators)

	return containerGroup_Properties_InstanceView_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroup_Properties_InstanceView_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroup_Properties_InstanceView_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerGroup_Properties_InstanceView_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroup_Properties_InstanceView_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Events"] = gen.SliceOf(Event_STATUS_ARMGenerator())
}

func Test_ContainerGroupDiagnostics_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupDiagnostics_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupDiagnostics_STATUS_ARM, ContainerGroupDiagnostics_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupDiagnostics_STATUS_ARM runs a test to see if a specific instance of ContainerGroupDiagnostics_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupDiagnostics_STATUS_ARM(subject ContainerGroupDiagnostics_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupDiagnostics_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupDiagnostics_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerGroupDiagnostics_STATUS_ARMGenerator()
var containerGroupDiagnostics_STATUS_ARMGenerator gopter.Gen

// ContainerGroupDiagnostics_STATUS_ARMGenerator returns a generator of ContainerGroupDiagnostics_STATUS_ARM instances for property testing.
func ContainerGroupDiagnostics_STATUS_ARMGenerator() gopter.Gen {
	if containerGroupDiagnostics_STATUS_ARMGenerator != nil {
		return containerGroupDiagnostics_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerGroupDiagnostics_STATUS_ARM(generators)
	containerGroupDiagnostics_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupDiagnostics_STATUS_ARM{}), generators)

	return containerGroupDiagnostics_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForContainerGroupDiagnostics_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupDiagnostics_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LogAnalytics"] = gen.PtrOf(LogAnalytics_STATUS_ARMGenerator())
}

func Test_ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM, ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM runs a test to see if a specific instance of ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM(subject ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing - lazily
// instantiated by ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator()
var containerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator gopter.Gen

// ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator returns a generator of ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM instances for property testing.
func ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator() gopter.Gen {
	if containerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator != nil {
		return containerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM(generators)
	containerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM{}), generators)

	return containerGroupIdentity_UserAssignedIdentities_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupIdentity_UserAssignedIdentities_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerGroupSubnetId_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupSubnetId_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupSubnetId_STATUS_ARM, ContainerGroupSubnetId_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupSubnetId_STATUS_ARM runs a test to see if a specific instance of ContainerGroupSubnetId_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupSubnetId_STATUS_ARM(subject ContainerGroupSubnetId_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupSubnetId_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupSubnetId_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerGroupSubnetId_STATUS_ARMGenerator()
var containerGroupSubnetId_STATUS_ARMGenerator gopter.Gen

// ContainerGroupSubnetId_STATUS_ARMGenerator returns a generator of ContainerGroupSubnetId_STATUS_ARM instances for property testing.
func ContainerGroupSubnetId_STATUS_ARMGenerator() gopter.Gen {
	if containerGroupSubnetId_STATUS_ARMGenerator != nil {
		return containerGroupSubnetId_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSubnetId_STATUS_ARM(generators)
	containerGroupSubnetId_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupSubnetId_STATUS_ARM{}), generators)

	return containerGroupSubnetId_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupSubnetId_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupSubnetId_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_DnsConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsConfiguration_STATUS_ARM, DnsConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsConfiguration_STATUS_ARM runs a test to see if a specific instance of DnsConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsConfiguration_STATUS_ARM(subject DnsConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// DnsConfiguration_STATUS_ARMGenerator()
var dnsConfiguration_STATUS_ARMGenerator gopter.Gen

// DnsConfiguration_STATUS_ARMGenerator returns a generator of DnsConfiguration_STATUS_ARM instances for property testing.
func DnsConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if dnsConfiguration_STATUS_ARMGenerator != nil {
		return dnsConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsConfiguration_STATUS_ARM(generators)
	dnsConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(DnsConfiguration_STATUS_ARM{}), generators)

	return dnsConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForDnsConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["NameServers"] = gen.SliceOf(gen.AlphaString())
	gens["Options"] = gen.PtrOf(gen.AlphaString())
	gens["SearchDomains"] = gen.PtrOf(gen.AlphaString())
}

func Test_EncryptionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionProperties_STATUS_ARM, EncryptionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionProperties_STATUS_ARM runs a test to see if a specific instance of EncryptionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionProperties_STATUS_ARM(subject EncryptionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionProperties_STATUS_ARM instances for property testing - lazily instantiated by
// EncryptionProperties_STATUS_ARMGenerator()
var encryptionProperties_STATUS_ARMGenerator gopter.Gen

// EncryptionProperties_STATUS_ARMGenerator returns a generator of EncryptionProperties_STATUS_ARM instances for property testing.
func EncryptionProperties_STATUS_ARMGenerator() gopter.Gen {
	if encryptionProperties_STATUS_ARMGenerator != nil {
		return encryptionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionProperties_STATUS_ARM(generators)
	encryptionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperties_STATUS_ARM{}), generators)

	return encryptionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["KeyName"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVersion"] = gen.PtrOf(gen.AlphaString())
	gens["VaultBaseUrl"] = gen.PtrOf(gen.AlphaString())
}

func Test_ImageRegistryCredential_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageRegistryCredential_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageRegistryCredential_STATUS_ARM, ImageRegistryCredential_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageRegistryCredential_STATUS_ARM runs a test to see if a specific instance of ImageRegistryCredential_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageRegistryCredential_STATUS_ARM(subject ImageRegistryCredential_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageRegistryCredential_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageRegistryCredential_STATUS_ARM instances for property testing - lazily instantiated by
// ImageRegistryCredential_STATUS_ARMGenerator()
var imageRegistryCredential_STATUS_ARMGenerator gopter.Gen

// ImageRegistryCredential_STATUS_ARMGenerator returns a generator of ImageRegistryCredential_STATUS_ARM instances for property testing.
func ImageRegistryCredential_STATUS_ARMGenerator() gopter.Gen {
	if imageRegistryCredential_STATUS_ARMGenerator != nil {
		return imageRegistryCredential_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageRegistryCredential_STATUS_ARM(generators)
	imageRegistryCredential_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ImageRegistryCredential_STATUS_ARM{}), generators)

	return imageRegistryCredential_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForImageRegistryCredential_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageRegistryCredential_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(gen.AlphaString())
	gens["IdentityUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Server"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerDefinition_STATUS_ARM, InitContainerDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerDefinition_STATUS_ARM runs a test to see if a specific instance of InitContainerDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerDefinition_STATUS_ARM(subject InitContainerDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// InitContainerDefinition_STATUS_ARMGenerator()
var initContainerDefinition_STATUS_ARMGenerator gopter.Gen

// InitContainerDefinition_STATUS_ARMGenerator returns a generator of InitContainerDefinition_STATUS_ARM instances for property testing.
// We first initialize initContainerDefinition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerDefinition_STATUS_ARMGenerator() gopter.Gen {
	if initContainerDefinition_STATUS_ARMGenerator != nil {
		return initContainerDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerDefinition_STATUS_ARM(generators)
	initContainerDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InitContainerDefinition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerDefinition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerDefinition_STATUS_ARM(generators)
	initContainerDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InitContainerDefinition_STATUS_ARM{}), generators)

	return initContainerDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInitContainerDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(InitContainerPropertiesDefinition_STATUS_ARMGenerator())
}

func Test_IpAddress_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpAddress_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpAddress_STATUS_ARM, IpAddress_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpAddress_STATUS_ARM runs a test to see if a specific instance of IpAddress_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpAddress_STATUS_ARM(subject IpAddress_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpAddress_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpAddress_STATUS_ARM instances for property testing - lazily instantiated by
// IpAddress_STATUS_ARMGenerator()
var ipAddress_STATUS_ARMGenerator gopter.Gen

// IpAddress_STATUS_ARMGenerator returns a generator of IpAddress_STATUS_ARM instances for property testing.
// We first initialize ipAddress_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IpAddress_STATUS_ARMGenerator() gopter.Gen {
	if ipAddress_STATUS_ARMGenerator != nil {
		return ipAddress_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddress_STATUS_ARM(generators)
	ipAddress_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IpAddress_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddress_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForIpAddress_STATUS_ARM(generators)
	ipAddress_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(IpAddress_STATUS_ARM{}), generators)

	return ipAddress_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForIpAddress_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpAddress_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DnsNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["DnsNameLabelReusePolicy"] = gen.PtrOf(gen.OneConstOf(
		IpAddress_DnsNameLabelReusePolicy_STATUS_Noreuse,
		IpAddress_DnsNameLabelReusePolicy_STATUS_ResourceGroupReuse,
		IpAddress_DnsNameLabelReusePolicy_STATUS_SubscriptionReuse,
		IpAddress_DnsNameLabelReusePolicy_STATUS_TenantReuse,
		IpAddress_DnsNameLabelReusePolicy_STATUS_Unsecure))
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["Ip"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(IpAddress_Type_STATUS_Private, IpAddress_Type_STATUS_Public))
}

// AddRelatedPropertyGeneratorsForIpAddress_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIpAddress_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Ports"] = gen.SliceOf(Port_STATUS_ARMGenerator())
}

func Test_Volume_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Volume_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVolume_STATUS_ARM, Volume_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVolume_STATUS_ARM runs a test to see if a specific instance of Volume_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVolume_STATUS_ARM(subject Volume_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Volume_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Volume_STATUS_ARM instances for property testing - lazily instantiated by Volume_STATUS_ARMGenerator()
var volume_STATUS_ARMGenerator gopter.Gen

// Volume_STATUS_ARMGenerator returns a generator of Volume_STATUS_ARM instances for property testing.
// We first initialize volume_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Volume_STATUS_ARMGenerator() gopter.Gen {
	if volume_STATUS_ARMGenerator != nil {
		return volume_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolume_STATUS_ARM(generators)
	volume_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Volume_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolume_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForVolume_STATUS_ARM(generators)
	volume_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Volume_STATUS_ARM{}), generators)

	return volume_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVolume_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVolume_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVolume_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVolume_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AzureFile"] = gen.PtrOf(AzureFileVolume_STATUS_ARMGenerator())
	gens["GitRepo"] = gen.PtrOf(GitRepoVolume_STATUS_ARMGenerator())
}

func Test_AzureFileVolume_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureFileVolume_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureFileVolume_STATUS_ARM, AzureFileVolume_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureFileVolume_STATUS_ARM runs a test to see if a specific instance of AzureFileVolume_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureFileVolume_STATUS_ARM(subject AzureFileVolume_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureFileVolume_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureFileVolume_STATUS_ARM instances for property testing - lazily instantiated by
// AzureFileVolume_STATUS_ARMGenerator()
var azureFileVolume_STATUS_ARMGenerator gopter.Gen

// AzureFileVolume_STATUS_ARMGenerator returns a generator of AzureFileVolume_STATUS_ARM instances for property testing.
func AzureFileVolume_STATUS_ARMGenerator() gopter.Gen {
	if azureFileVolume_STATUS_ARMGenerator != nil {
		return azureFileVolume_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureFileVolume_STATUS_ARM(generators)
	azureFileVolume_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(AzureFileVolume_STATUS_ARM{}), generators)

	return azureFileVolume_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureFileVolume_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureFileVolume_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ReadOnly"] = gen.PtrOf(gen.Bool())
	gens["ShareName"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProperties_STATUS_ARM, ContainerProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProperties_STATUS_ARM runs a test to see if a specific instance of ContainerProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProperties_STATUS_ARM(subject ContainerProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerProperties_STATUS_ARMGenerator()
var containerProperties_STATUS_ARMGenerator gopter.Gen

// ContainerProperties_STATUS_ARMGenerator returns a generator of ContainerProperties_STATUS_ARM instances for property testing.
// We first initialize containerProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProperties_STATUS_ARMGenerator() gopter.Gen {
	if containerProperties_STATUS_ARMGenerator != nil {
		return containerProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_STATUS_ARM(generators)
	containerProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerProperties_STATUS_ARM(generators)
	containerProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUS_ARM{}), generators)

	return containerProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
	gens["Image"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EnvironmentVariables"] = gen.SliceOf(EnvironmentVariable_STATUS_ARMGenerator())
	gens["InstanceView"] = gen.PtrOf(ContainerProperties_InstanceView_STATUS_ARMGenerator())
	gens["LivenessProbe"] = gen.PtrOf(ContainerProbe_STATUS_ARMGenerator())
	gens["Ports"] = gen.SliceOf(ContainerPort_STATUS_ARMGenerator())
	gens["ReadinessProbe"] = gen.PtrOf(ContainerProbe_STATUS_ARMGenerator())
	gens["Resources"] = gen.PtrOf(ResourceRequirements_STATUS_ARMGenerator())
	gens["VolumeMounts"] = gen.SliceOf(VolumeMount_STATUS_ARMGenerator())
}

func Test_Event_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Event_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEvent_STATUS_ARM, Event_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEvent_STATUS_ARM runs a test to see if a specific instance of Event_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEvent_STATUS_ARM(subject Event_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Event_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Event_STATUS_ARM instances for property testing - lazily instantiated by Event_STATUS_ARMGenerator()
var event_STATUS_ARMGenerator gopter.Gen

// Event_STATUS_ARMGenerator returns a generator of Event_STATUS_ARM instances for property testing.
func Event_STATUS_ARMGenerator() gopter.Gen {
	if event_STATUS_ARMGenerator != nil {
		return event_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEvent_STATUS_ARM(generators)
	event_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Event_STATUS_ARM{}), generators)

	return event_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEvent_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEvent_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["FirstTimestamp"] = gen.PtrOf(gen.AlphaString())
	gens["LastTimestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_GitRepoVolume_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitRepoVolume_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitRepoVolume_STATUS_ARM, GitRepoVolume_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitRepoVolume_STATUS_ARM runs a test to see if a specific instance of GitRepoVolume_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGitRepoVolume_STATUS_ARM(subject GitRepoVolume_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitRepoVolume_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitRepoVolume_STATUS_ARM instances for property testing - lazily instantiated by
// GitRepoVolume_STATUS_ARMGenerator()
var gitRepoVolume_STATUS_ARMGenerator gopter.Gen

// GitRepoVolume_STATUS_ARMGenerator returns a generator of GitRepoVolume_STATUS_ARM instances for property testing.
func GitRepoVolume_STATUS_ARMGenerator() gopter.Gen {
	if gitRepoVolume_STATUS_ARMGenerator != nil {
		return gitRepoVolume_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitRepoVolume_STATUS_ARM(generators)
	gitRepoVolume_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(GitRepoVolume_STATUS_ARM{}), generators)

	return gitRepoVolume_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForGitRepoVolume_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitRepoVolume_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Directory"] = gen.PtrOf(gen.AlphaString())
	gens["Repository"] = gen.PtrOf(gen.AlphaString())
	gens["Revision"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerPropertiesDefinition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerPropertiesDefinition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerPropertiesDefinition_STATUS_ARM, InitContainerPropertiesDefinition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerPropertiesDefinition_STATUS_ARM runs a test to see if a specific instance of InitContainerPropertiesDefinition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerPropertiesDefinition_STATUS_ARM(subject InitContainerPropertiesDefinition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerPropertiesDefinition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerPropertiesDefinition_STATUS_ARM instances for property testing - lazily instantiated by
// InitContainerPropertiesDefinition_STATUS_ARMGenerator()
var initContainerPropertiesDefinition_STATUS_ARMGenerator gopter.Gen

// InitContainerPropertiesDefinition_STATUS_ARMGenerator returns a generator of InitContainerPropertiesDefinition_STATUS_ARM instances for property testing.
// We first initialize initContainerPropertiesDefinition_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerPropertiesDefinition_STATUS_ARMGenerator() gopter.Gen {
	if initContainerPropertiesDefinition_STATUS_ARMGenerator != nil {
		return initContainerPropertiesDefinition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_ARM(generators)
	initContainerPropertiesDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_ARM(generators)
	initContainerPropertiesDefinition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUS_ARM{}), generators)

	return initContainerPropertiesDefinition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
	gens["Image"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EnvironmentVariables"] = gen.SliceOf(EnvironmentVariable_STATUS_ARMGenerator())
	gens["InstanceView"] = gen.PtrOf(InitContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator())
	gens["VolumeMounts"] = gen.SliceOf(VolumeMount_STATUS_ARMGenerator())
}

func Test_LogAnalytics_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LogAnalytics_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLogAnalytics_STATUS_ARM, LogAnalytics_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLogAnalytics_STATUS_ARM runs a test to see if a specific instance of LogAnalytics_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLogAnalytics_STATUS_ARM(subject LogAnalytics_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LogAnalytics_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LogAnalytics_STATUS_ARM instances for property testing - lazily instantiated by
// LogAnalytics_STATUS_ARMGenerator()
var logAnalytics_STATUS_ARMGenerator gopter.Gen

// LogAnalytics_STATUS_ARMGenerator returns a generator of LogAnalytics_STATUS_ARM instances for property testing.
func LogAnalytics_STATUS_ARMGenerator() gopter.Gen {
	if logAnalytics_STATUS_ARMGenerator != nil {
		return logAnalytics_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogAnalytics_STATUS_ARM(generators)
	logAnalytics_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LogAnalytics_STATUS_ARM{}), generators)

	return logAnalytics_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLogAnalytics_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLogAnalytics_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["LogType"] = gen.PtrOf(gen.OneConstOf(LogAnalytics_LogType_STATUS_ContainerInsights, LogAnalytics_LogType_STATUS_ContainerInstanceLogs))
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceKey"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_Port_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Port_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPort_STATUS_ARM, Port_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPort_STATUS_ARM runs a test to see if a specific instance of Port_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPort_STATUS_ARM(subject Port_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Port_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Port_STATUS_ARM instances for property testing - lazily instantiated by Port_STATUS_ARMGenerator()
var port_STATUS_ARMGenerator gopter.Gen

// Port_STATUS_ARMGenerator returns a generator of Port_STATUS_ARM instances for property testing.
func Port_STATUS_ARMGenerator() gopter.Gen {
	if port_STATUS_ARMGenerator != nil {
		return port_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPort_STATUS_ARM(generators)
	port_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Port_STATUS_ARM{}), generators)

	return port_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForPort_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPort_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(Port_Protocol_STATUS_TCP, Port_Protocol_STATUS_UDP))
}

func Test_ContainerPort_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerPort_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPort_STATUS_ARM, ContainerPort_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPort_STATUS_ARM runs a test to see if a specific instance of ContainerPort_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPort_STATUS_ARM(subject ContainerPort_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerPort_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerPort_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerPort_STATUS_ARMGenerator()
var containerPort_STATUS_ARMGenerator gopter.Gen

// ContainerPort_STATUS_ARMGenerator returns a generator of ContainerPort_STATUS_ARM instances for property testing.
func ContainerPort_STATUS_ARMGenerator() gopter.Gen {
	if containerPort_STATUS_ARMGenerator != nil {
		return containerPort_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPort_STATUS_ARM(generators)
	containerPort_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerPort_STATUS_ARM{}), generators)

	return containerPort_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPort_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPort_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(ContainerPort_Protocol_STATUS_TCP, ContainerPort_Protocol_STATUS_UDP))
}

func Test_ContainerProbe_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProbe_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProbe_STATUS_ARM, ContainerProbe_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProbe_STATUS_ARM runs a test to see if a specific instance of ContainerProbe_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProbe_STATUS_ARM(subject ContainerProbe_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProbe_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProbe_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerProbe_STATUS_ARMGenerator()
var containerProbe_STATUS_ARMGenerator gopter.Gen

// ContainerProbe_STATUS_ARMGenerator returns a generator of ContainerProbe_STATUS_ARM instances for property testing.
// We first initialize containerProbe_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProbe_STATUS_ARMGenerator() gopter.Gen {
	if containerProbe_STATUS_ARMGenerator != nil {
		return containerProbe_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProbe_STATUS_ARM(generators)
	containerProbe_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerProbe_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProbe_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerProbe_STATUS_ARM(generators)
	containerProbe_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerProbe_STATUS_ARM{}), generators)

	return containerProbe_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProbe_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProbe_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["FailureThreshold"] = gen.PtrOf(gen.Int())
	gens["InitialDelaySeconds"] = gen.PtrOf(gen.Int())
	gens["PeriodSeconds"] = gen.PtrOf(gen.Int())
	gens["SuccessThreshold"] = gen.PtrOf(gen.Int())
	gens["TimeoutSeconds"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForContainerProbe_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProbe_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Exec"] = gen.PtrOf(ContainerExec_STATUS_ARMGenerator())
	gens["HttpGet"] = gen.PtrOf(ContainerHttpGet_STATUS_ARMGenerator())
}

func Test_ContainerProperties_InstanceView_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_InstanceView_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProperties_InstanceView_STATUS_ARM, ContainerProperties_InstanceView_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProperties_InstanceView_STATUS_ARM runs a test to see if a specific instance of ContainerProperties_InstanceView_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProperties_InstanceView_STATUS_ARM(subject ContainerProperties_InstanceView_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_InstanceView_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_InstanceView_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerProperties_InstanceView_STATUS_ARMGenerator()
var containerProperties_InstanceView_STATUS_ARMGenerator gopter.Gen

// ContainerProperties_InstanceView_STATUS_ARMGenerator returns a generator of ContainerProperties_InstanceView_STATUS_ARM instances for property testing.
// We first initialize containerProperties_InstanceView_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProperties_InstanceView_STATUS_ARMGenerator() gopter.Gen {
	if containerProperties_InstanceView_STATUS_ARMGenerator != nil {
		return containerProperties_InstanceView_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_InstanceView_STATUS_ARM(generators)
	containerProperties_InstanceView_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_InstanceView_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_InstanceView_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerProperties_InstanceView_STATUS_ARM(generators)
	containerProperties_InstanceView_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_InstanceView_STATUS_ARM{}), generators)

	return containerProperties_InstanceView_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProperties_InstanceView_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProperties_InstanceView_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RestartCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForContainerProperties_InstanceView_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProperties_InstanceView_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CurrentState"] = gen.PtrOf(ContainerState_STATUS_ARMGenerator())
	gens["Events"] = gen.SliceOf(Event_STATUS_ARMGenerator())
	gens["PreviousState"] = gen.PtrOf(ContainerState_STATUS_ARMGenerator())
}

func Test_EnvironmentVariable_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EnvironmentVariable_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEnvironmentVariable_STATUS_ARM, EnvironmentVariable_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEnvironmentVariable_STATUS_ARM runs a test to see if a specific instance of EnvironmentVariable_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEnvironmentVariable_STATUS_ARM(subject EnvironmentVariable_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EnvironmentVariable_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EnvironmentVariable_STATUS_ARM instances for property testing - lazily instantiated by
// EnvironmentVariable_STATUS_ARMGenerator()
var environmentVariable_STATUS_ARMGenerator gopter.Gen

// EnvironmentVariable_STATUS_ARMGenerator returns a generator of EnvironmentVariable_STATUS_ARM instances for property testing.
func EnvironmentVariable_STATUS_ARMGenerator() gopter.Gen {
	if environmentVariable_STATUS_ARMGenerator != nil {
		return environmentVariable_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEnvironmentVariable_STATUS_ARM(generators)
	environmentVariable_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(EnvironmentVariable_STATUS_ARM{}), generators)

	return environmentVariable_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForEnvironmentVariable_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEnvironmentVariable_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["SecureValue"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerPropertiesDefinition_InstanceView_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerPropertiesDefinition_InstanceView_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM, InitContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM runs a test to see if a specific instance of InitContainerPropertiesDefinition_InstanceView_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM(subject InitContainerPropertiesDefinition_InstanceView_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerPropertiesDefinition_InstanceView_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerPropertiesDefinition_InstanceView_STATUS_ARM instances for property testing - lazily
// instantiated by InitContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator()
var initContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator gopter.Gen

// InitContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator returns a generator of InitContainerPropertiesDefinition_InstanceView_STATUS_ARM instances for property testing.
// We first initialize initContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator() gopter.Gen {
	if initContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator != nil {
		return initContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM(generators)
	initContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_InstanceView_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM(generators)
	initContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_InstanceView_STATUS_ARM{}), generators)

	return initContainerPropertiesDefinition_InstanceView_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RestartCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_InstanceView_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CurrentState"] = gen.PtrOf(ContainerState_STATUS_ARMGenerator())
	gens["Events"] = gen.SliceOf(Event_STATUS_ARMGenerator())
	gens["PreviousState"] = gen.PtrOf(ContainerState_STATUS_ARMGenerator())
}

func Test_ResourceRequirements_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceRequirements_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceRequirements_STATUS_ARM, ResourceRequirements_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceRequirements_STATUS_ARM runs a test to see if a specific instance of ResourceRequirements_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceRequirements_STATUS_ARM(subject ResourceRequirements_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceRequirements_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceRequirements_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceRequirements_STATUS_ARMGenerator()
var resourceRequirements_STATUS_ARMGenerator gopter.Gen

// ResourceRequirements_STATUS_ARMGenerator returns a generator of ResourceRequirements_STATUS_ARM instances for property testing.
func ResourceRequirements_STATUS_ARMGenerator() gopter.Gen {
	if resourceRequirements_STATUS_ARMGenerator != nil {
		return resourceRequirements_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceRequirements_STATUS_ARM(generators)
	resourceRequirements_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequirements_STATUS_ARM{}), generators)

	return resourceRequirements_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForResourceRequirements_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceRequirements_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Limits"] = gen.PtrOf(ResourceLimits_STATUS_ARMGenerator())
	gens["Requests"] = gen.PtrOf(ResourceRequests_STATUS_ARMGenerator())
}

func Test_VolumeMount_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VolumeMount_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVolumeMount_STATUS_ARM, VolumeMount_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVolumeMount_STATUS_ARM runs a test to see if a specific instance of VolumeMount_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVolumeMount_STATUS_ARM(subject VolumeMount_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VolumeMount_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VolumeMount_STATUS_ARM instances for property testing - lazily instantiated by
// VolumeMount_STATUS_ARMGenerator()
var volumeMount_STATUS_ARMGenerator gopter.Gen

// VolumeMount_STATUS_ARMGenerator returns a generator of VolumeMount_STATUS_ARM instances for property testing.
func VolumeMount_STATUS_ARMGenerator() gopter.Gen {
	if volumeMount_STATUS_ARMGenerator != nil {
		return volumeMount_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolumeMount_STATUS_ARM(generators)
	volumeMount_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VolumeMount_STATUS_ARM{}), generators)

	return volumeMount_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVolumeMount_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVolumeMount_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MountPath"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ReadOnly"] = gen.PtrOf(gen.Bool())
}

func Test_ContainerExec_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerExec_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerExec_STATUS_ARM, ContainerExec_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerExec_STATUS_ARM runs a test to see if a specific instance of ContainerExec_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerExec_STATUS_ARM(subject ContainerExec_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerExec_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerExec_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerExec_STATUS_ARMGenerator()
var containerExec_STATUS_ARMGenerator gopter.Gen

// ContainerExec_STATUS_ARMGenerator returns a generator of ContainerExec_STATUS_ARM instances for property testing.
func ContainerExec_STATUS_ARMGenerator() gopter.Gen {
	if containerExec_STATUS_ARMGenerator != nil {
		return containerExec_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerExec_STATUS_ARM(generators)
	containerExec_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerExec_STATUS_ARM{}), generators)

	return containerExec_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerExec_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerExec_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
}

func Test_ContainerHttpGet_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerHttpGet_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerHttpGet_STATUS_ARM, ContainerHttpGet_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerHttpGet_STATUS_ARM runs a test to see if a specific instance of ContainerHttpGet_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerHttpGet_STATUS_ARM(subject ContainerHttpGet_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerHttpGet_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerHttpGet_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerHttpGet_STATUS_ARMGenerator()
var containerHttpGet_STATUS_ARMGenerator gopter.Gen

// ContainerHttpGet_STATUS_ARMGenerator returns a generator of ContainerHttpGet_STATUS_ARM instances for property testing.
// We first initialize containerHttpGet_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerHttpGet_STATUS_ARMGenerator() gopter.Gen {
	if containerHttpGet_STATUS_ARMGenerator != nil {
		return containerHttpGet_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerHttpGet_STATUS_ARM(generators)
	containerHttpGet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerHttpGet_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerHttpGet_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForContainerHttpGet_STATUS_ARM(generators)
	containerHttpGet_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerHttpGet_STATUS_ARM{}), generators)

	return containerHttpGet_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerHttpGet_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerHttpGet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Scheme"] = gen.PtrOf(gen.OneConstOf(ContainerHttpGet_Scheme_STATUS_Http, ContainerHttpGet_Scheme_STATUS_Https))
}

// AddRelatedPropertyGeneratorsForContainerHttpGet_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerHttpGet_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HttpHeaders"] = gen.SliceOf(HttpHeader_STATUS_ARMGenerator())
}

func Test_ContainerState_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerState_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerState_STATUS_ARM, ContainerState_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerState_STATUS_ARM runs a test to see if a specific instance of ContainerState_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerState_STATUS_ARM(subject ContainerState_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerState_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerState_STATUS_ARM instances for property testing - lazily instantiated by
// ContainerState_STATUS_ARMGenerator()
var containerState_STATUS_ARMGenerator gopter.Gen

// ContainerState_STATUS_ARMGenerator returns a generator of ContainerState_STATUS_ARM instances for property testing.
func ContainerState_STATUS_ARMGenerator() gopter.Gen {
	if containerState_STATUS_ARMGenerator != nil {
		return containerState_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerState_STATUS_ARM(generators)
	containerState_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ContainerState_STATUS_ARM{}), generators)

	return containerState_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerState_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerState_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["DetailStatus"] = gen.PtrOf(gen.AlphaString())
	gens["ExitCode"] = gen.PtrOf(gen.Int())
	gens["FinishTime"] = gen.PtrOf(gen.AlphaString())
	gens["StartTime"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceLimits_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLimits_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLimits_STATUS_ARM, ResourceLimits_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLimits_STATUS_ARM runs a test to see if a specific instance of ResourceLimits_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLimits_STATUS_ARM(subject ResourceLimits_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLimits_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLimits_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceLimits_STATUS_ARMGenerator()
var resourceLimits_STATUS_ARMGenerator gopter.Gen

// ResourceLimits_STATUS_ARMGenerator returns a generator of ResourceLimits_STATUS_ARM instances for property testing.
// We first initialize resourceLimits_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceLimits_STATUS_ARMGenerator() gopter.Gen {
	if resourceLimits_STATUS_ARMGenerator != nil {
		return resourceLimits_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLimits_STATUS_ARM(generators)
	resourceLimits_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceLimits_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLimits_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForResourceLimits_STATUS_ARM(generators)
	resourceLimits_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceLimits_STATUS_ARM{}), generators)

	return resourceLimits_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceLimits_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceLimits_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Cpu"] = gen.PtrOf(gen.Float64())
	gens["MemoryInGB"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForResourceLimits_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceLimits_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Gpu"] = gen.PtrOf(GpuResource_STATUS_ARMGenerator())
}

func Test_ResourceRequests_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceRequests_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceRequests_STATUS_ARM, ResourceRequests_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceRequests_STATUS_ARM runs a test to see if a specific instance of ResourceRequests_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceRequests_STATUS_ARM(subject ResourceRequests_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceRequests_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceRequests_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceRequests_STATUS_ARMGenerator()
var resourceRequests_STATUS_ARMGenerator gopter.Gen

// ResourceRequests_STATUS_ARMGenerator returns a generator of ResourceRequests_STATUS_ARM instances for property testing.
// We first initialize resourceRequests_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceRequests_STATUS_ARMGenerator() gopter.Gen {
	if resourceRequests_STATUS_ARMGenerator != nil {
		return resourceRequests_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceRequests_STATUS_ARM(generators)
	resourceRequests_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequests_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceRequests_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForResourceRequests_STATUS_ARM(generators)
	resourceRequests_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequests_STATUS_ARM{}), generators)

	return resourceRequests_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceRequests_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceRequests_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Cpu"] = gen.PtrOf(gen.Float64())
	gens["MemoryInGB"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForResourceRequests_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceRequests_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Gpu"] = gen.PtrOf(GpuResource_STATUS_ARMGenerator())
}

func Test_GpuResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GpuResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGpuResource_STATUS_ARM, GpuResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGpuResource_STATUS_ARM runs a test to see if a specific instance of GpuResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGpuResource_STATUS_ARM(subject GpuResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GpuResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GpuResource_STATUS_ARM instances for property testing - lazily instantiated by
// GpuResource_STATUS_ARMGenerator()
var gpuResource_STATUS_ARMGenerator gopter.Gen

// GpuResource_STATUS_ARMGenerator returns a generator of GpuResource_STATUS_ARM instances for property testing.
func GpuResource_STATUS_ARMGenerator() gopter.Gen {
	if gpuResource_STATUS_ARMGenerator != nil {
		return gpuResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGpuResource_STATUS_ARM(generators)
	gpuResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(GpuResource_STATUS_ARM{}), generators)

	return gpuResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForGpuResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGpuResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Sku"] = gen.PtrOf(gen.OneConstOf(GpuResource_Sku_STATUS_K80, GpuResource_Sku_STATUS_P100, GpuResource_Sku_STATUS_V100))
}

func Test_HttpHeader_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpHeader_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpHeader_STATUS_ARM, HttpHeader_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpHeader_STATUS_ARM runs a test to see if a specific instance of HttpHeader_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpHeader_STATUS_ARM(subject HttpHeader_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpHeader_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpHeader_STATUS_ARM instances for property testing - lazily instantiated by
// HttpHeader_STATUS_ARMGenerator()
var httpHeader_STATUS_ARMGenerator gopter.Gen

// HttpHeader_STATUS_ARMGenerator returns a generator of HttpHeader_STATUS_ARM instances for property testing.
func HttpHeader_STATUS_ARMGenerator() gopter.Gen {
	if httpHeader_STATUS_ARMGenerator != nil {
		return httpHeader_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpHeader_STATUS_ARM(generators)
	httpHeader_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HttpHeader_STATUS_ARM{}), generators)

	return httpHeader_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpHeader_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpHeader_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
