// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211001

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ContainerGroup_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupSTATUSARM, ContainerGroupSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupSTATUSARM runs a test to see if a specific instance of ContainerGroup_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupSTATUSARM(subject ContainerGroup_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_STATUSARM instances for property testing - lazily instantiated by
// ContainerGroupSTATUSARMGenerator()
var containerGroupSTATUSARMGenerator gopter.Gen

// ContainerGroupSTATUSARMGenerator returns a generator of ContainerGroup_STATUSARM instances for property testing.
// We first initialize containerGroupSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupSTATUSARMGenerator() gopter.Gen {
	if containerGroupSTATUSARMGenerator != nil {
		return containerGroupSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSTATUSARM(generators)
	containerGroupSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupSTATUSARM(generators)
	containerGroupSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUSARM{}), generators)

	return containerGroupSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerGroupSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupSTATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ContainerGroupIdentitySTATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(ContainerGroupSTATUSPropertiesARMGenerator())
}

func Test_ContainerGroup_STATUS_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_STATUS_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupSTATUSPropertiesARM, ContainerGroupSTATUSPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupSTATUSPropertiesARM runs a test to see if a specific instance of ContainerGroup_STATUS_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupSTATUSPropertiesARM(subject ContainerGroup_STATUS_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_STATUS_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_STATUS_PropertiesARM instances for property testing - lazily instantiated by
// ContainerGroupSTATUSPropertiesARMGenerator()
var containerGroupSTATUSPropertiesARMGenerator gopter.Gen

// ContainerGroupSTATUSPropertiesARMGenerator returns a generator of ContainerGroup_STATUS_PropertiesARM instances for property testing.
// We first initialize containerGroupSTATUSPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupSTATUSPropertiesARMGenerator() gopter.Gen {
	if containerGroupSTATUSPropertiesARMGenerator != nil {
		return containerGroupSTATUSPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSTATUSPropertiesARM(generators)
	containerGroupSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSTATUSPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupSTATUSPropertiesARM(generators)
	containerGroupSTATUSPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_PropertiesARM{}), generators)

	return containerGroupSTATUSPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupSTATUSPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(ContainerGroupSTATUSPropertiesOsType_Linux, ContainerGroupSTATUSPropertiesOsType_Windows))
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RestartPolicy"] = gen.PtrOf(gen.OneConstOf(ContainerGroupSTATUSPropertiesRestartPolicy_Always, ContainerGroupSTATUSPropertiesRestartPolicy_Never, ContainerGroupSTATUSPropertiesRestartPolicy_OnFailure))
	gens["Sku"] = gen.PtrOf(gen.OneConstOf(ContainerGroupSku_STATUS_Dedicated, ContainerGroupSku_STATUS_Standard))
}

// AddRelatedPropertyGeneratorsForContainerGroupSTATUSPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupSTATUSPropertiesARM(gens map[string]gopter.Gen) {
	gens["Containers"] = gen.SliceOf(ContainerSTATUSARMGenerator())
	gens["Diagnostics"] = gen.PtrOf(ContainerGroupDiagnosticsSTATUSARMGenerator())
	gens["DnsConfig"] = gen.PtrOf(DnsConfigurationSTATUSARMGenerator())
	gens["EncryptionProperties"] = gen.PtrOf(EncryptionPropertiesSTATUSARMGenerator())
	gens["ImageRegistryCredentials"] = gen.SliceOf(ImageRegistryCredentialSTATUSARMGenerator())
	gens["InitContainers"] = gen.SliceOf(InitContainerDefinitionSTATUSARMGenerator())
	gens["InstanceView"] = gen.PtrOf(ContainerGroupSTATUSPropertiesInstanceViewARMGenerator())
	gens["IpAddress"] = gen.PtrOf(IpAddressSTATUSARMGenerator())
	gens["SubnetIds"] = gen.SliceOf(ContainerGroupSubnetIdSTATUSARMGenerator())
	gens["Volumes"] = gen.SliceOf(VolumeSTATUSARMGenerator())
}

func Test_ContainerGroupIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupIdentitySTATUSARM, ContainerGroupIdentitySTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupIdentitySTATUSARM runs a test to see if a specific instance of ContainerGroupIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupIdentitySTATUSARM(subject ContainerGroupIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupIdentity_STATUSARM instances for property testing - lazily instantiated by
// ContainerGroupIdentitySTATUSARMGenerator()
var containerGroupIdentitySTATUSARMGenerator gopter.Gen

// ContainerGroupIdentitySTATUSARMGenerator returns a generator of ContainerGroupIdentity_STATUSARM instances for property testing.
// We first initialize containerGroupIdentitySTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupIdentitySTATUSARMGenerator() gopter.Gen {
	if containerGroupIdentitySTATUSARMGenerator != nil {
		return containerGroupIdentitySTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentitySTATUSARM(generators)
	containerGroupIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentitySTATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupIdentitySTATUSARM(generators)
	containerGroupIdentitySTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_STATUSARM{}), generators)

	return containerGroupIdentitySTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupIdentitySTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ContainerGroupIdentitySTATUSType_None,
		ContainerGroupIdentitySTATUSType_SystemAssigned,
		ContainerGroupIdentitySTATUSType_SystemAssignedUserAssigned,
		ContainerGroupIdentitySTATUSType_UserAssigned))
}

// AddRelatedPropertyGeneratorsForContainerGroupIdentitySTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupIdentitySTATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ContainerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator())
}

func Test_Container_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Container_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerSTATUSARM, ContainerSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerSTATUSARM runs a test to see if a specific instance of Container_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerSTATUSARM(subject Container_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Container_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Container_STATUSARM instances for property testing - lazily instantiated by ContainerSTATUSARMGenerator()
var containerSTATUSARMGenerator gopter.Gen

// ContainerSTATUSARMGenerator returns a generator of Container_STATUSARM instances for property testing.
// We first initialize containerSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerSTATUSARMGenerator() gopter.Gen {
	if containerSTATUSARMGenerator != nil {
		return containerSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerSTATUSARM(generators)
	containerSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Container_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerSTATUSARM(generators)
	containerSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Container_STATUSARM{}), generators)

	return containerSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ContainerPropertiesSTATUSARMGenerator())
}

func Test_ContainerGroup_STATUS_Properties_InstanceViewARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_STATUS_Properties_InstanceViewARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupSTATUSPropertiesInstanceViewARM, ContainerGroupSTATUSPropertiesInstanceViewARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupSTATUSPropertiesInstanceViewARM runs a test to see if a specific instance of ContainerGroup_STATUS_Properties_InstanceViewARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupSTATUSPropertiesInstanceViewARM(subject ContainerGroup_STATUS_Properties_InstanceViewARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_STATUS_Properties_InstanceViewARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_STATUS_Properties_InstanceViewARM instances for property testing - lazily instantiated by
// ContainerGroupSTATUSPropertiesInstanceViewARMGenerator()
var containerGroupSTATUSPropertiesInstanceViewARMGenerator gopter.Gen

// ContainerGroupSTATUSPropertiesInstanceViewARMGenerator returns a generator of ContainerGroup_STATUS_Properties_InstanceViewARM instances for property testing.
// We first initialize containerGroupSTATUSPropertiesInstanceViewARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupSTATUSPropertiesInstanceViewARMGenerator() gopter.Gen {
	if containerGroupSTATUSPropertiesInstanceViewARMGenerator != nil {
		return containerGroupSTATUSPropertiesInstanceViewARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSTATUSPropertiesInstanceViewARM(generators)
	containerGroupSTATUSPropertiesInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_Properties_InstanceViewARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSTATUSPropertiesInstanceViewARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupSTATUSPropertiesInstanceViewARM(generators)
	containerGroupSTATUSPropertiesInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_Properties_InstanceViewARM{}), generators)

	return containerGroupSTATUSPropertiesInstanceViewARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupSTATUSPropertiesInstanceViewARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupSTATUSPropertiesInstanceViewARM(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerGroupSTATUSPropertiesInstanceViewARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupSTATUSPropertiesInstanceViewARM(gens map[string]gopter.Gen) {
	gens["Events"] = gen.SliceOf(EventSTATUSARMGenerator())
}

func Test_ContainerGroupDiagnostics_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupDiagnostics_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupDiagnosticsSTATUSARM, ContainerGroupDiagnosticsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupDiagnosticsSTATUSARM runs a test to see if a specific instance of ContainerGroupDiagnostics_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupDiagnosticsSTATUSARM(subject ContainerGroupDiagnostics_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupDiagnostics_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupDiagnostics_STATUSARM instances for property testing - lazily instantiated by
// ContainerGroupDiagnosticsSTATUSARMGenerator()
var containerGroupDiagnosticsSTATUSARMGenerator gopter.Gen

// ContainerGroupDiagnosticsSTATUSARMGenerator returns a generator of ContainerGroupDiagnostics_STATUSARM instances for property testing.
func ContainerGroupDiagnosticsSTATUSARMGenerator() gopter.Gen {
	if containerGroupDiagnosticsSTATUSARMGenerator != nil {
		return containerGroupDiagnosticsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerGroupDiagnosticsSTATUSARM(generators)
	containerGroupDiagnosticsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupDiagnostics_STATUSARM{}), generators)

	return containerGroupDiagnosticsSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForContainerGroupDiagnosticsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupDiagnosticsSTATUSARM(gens map[string]gopter.Gen) {
	gens["LogAnalytics"] = gen.PtrOf(LogAnalyticsSTATUSARMGenerator())
}

func Test_ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupIdentitySTATUSUserAssignedIdentitiesARM, ContainerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupIdentitySTATUSUserAssignedIdentitiesARM runs a test to see if a specific instance of ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupIdentitySTATUSUserAssignedIdentitiesARM(subject ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing - lazily
// instantiated by ContainerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator()
var containerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator gopter.Gen

// ContainerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator returns a generator of ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing.
func ContainerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator() gopter.Gen {
	if containerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator != nil {
		return containerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentitySTATUSUserAssignedIdentitiesARM(generators)
	containerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM{}), generators)

	return containerGroupIdentitySTATUSUserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupIdentitySTATUSUserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupIdentitySTATUSUserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerGroupSubnetId_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupSubnetId_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupSubnetIdSTATUSARM, ContainerGroupSubnetIdSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupSubnetIdSTATUSARM runs a test to see if a specific instance of ContainerGroupSubnetId_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupSubnetIdSTATUSARM(subject ContainerGroupSubnetId_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupSubnetId_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupSubnetId_STATUSARM instances for property testing - lazily instantiated by
// ContainerGroupSubnetIdSTATUSARMGenerator()
var containerGroupSubnetIdSTATUSARMGenerator gopter.Gen

// ContainerGroupSubnetIdSTATUSARMGenerator returns a generator of ContainerGroupSubnetId_STATUSARM instances for property testing.
func ContainerGroupSubnetIdSTATUSARMGenerator() gopter.Gen {
	if containerGroupSubnetIdSTATUSARMGenerator != nil {
		return containerGroupSubnetIdSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSubnetIdSTATUSARM(generators)
	containerGroupSubnetIdSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupSubnetId_STATUSARM{}), generators)

	return containerGroupSubnetIdSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupSubnetIdSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupSubnetIdSTATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_DnsConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsConfigurationSTATUSARM, DnsConfigurationSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsConfigurationSTATUSARM runs a test to see if a specific instance of DnsConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsConfigurationSTATUSARM(subject DnsConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsConfiguration_STATUSARM instances for property testing - lazily instantiated by
// DnsConfigurationSTATUSARMGenerator()
var dnsConfigurationSTATUSARMGenerator gopter.Gen

// DnsConfigurationSTATUSARMGenerator returns a generator of DnsConfiguration_STATUSARM instances for property testing.
func DnsConfigurationSTATUSARMGenerator() gopter.Gen {
	if dnsConfigurationSTATUSARMGenerator != nil {
		return dnsConfigurationSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsConfigurationSTATUSARM(generators)
	dnsConfigurationSTATUSARMGenerator = gen.Struct(reflect.TypeOf(DnsConfiguration_STATUSARM{}), generators)

	return dnsConfigurationSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDnsConfigurationSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsConfigurationSTATUSARM(gens map[string]gopter.Gen) {
	gens["NameServers"] = gen.SliceOf(gen.AlphaString())
	gens["Options"] = gen.PtrOf(gen.AlphaString())
	gens["SearchDomains"] = gen.PtrOf(gen.AlphaString())
}

func Test_EncryptionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionPropertiesSTATUSARM, EncryptionPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionPropertiesSTATUSARM runs a test to see if a specific instance of EncryptionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionPropertiesSTATUSARM(subject EncryptionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionProperties_STATUSARM instances for property testing - lazily instantiated by
// EncryptionPropertiesSTATUSARMGenerator()
var encryptionPropertiesSTATUSARMGenerator gopter.Gen

// EncryptionPropertiesSTATUSARMGenerator returns a generator of EncryptionProperties_STATUSARM instances for property testing.
func EncryptionPropertiesSTATUSARMGenerator() gopter.Gen {
	if encryptionPropertiesSTATUSARMGenerator != nil {
		return encryptionPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionPropertiesSTATUSARM(generators)
	encryptionPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperties_STATUSARM{}), generators)

	return encryptionPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["KeyName"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVersion"] = gen.PtrOf(gen.AlphaString())
	gens["VaultBaseUrl"] = gen.PtrOf(gen.AlphaString())
}

func Test_ImageRegistryCredential_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageRegistryCredential_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageRegistryCredentialSTATUSARM, ImageRegistryCredentialSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageRegistryCredentialSTATUSARM runs a test to see if a specific instance of ImageRegistryCredential_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageRegistryCredentialSTATUSARM(subject ImageRegistryCredential_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageRegistryCredential_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageRegistryCredential_STATUSARM instances for property testing - lazily instantiated by
// ImageRegistryCredentialSTATUSARMGenerator()
var imageRegistryCredentialSTATUSARMGenerator gopter.Gen

// ImageRegistryCredentialSTATUSARMGenerator returns a generator of ImageRegistryCredential_STATUSARM instances for property testing.
func ImageRegistryCredentialSTATUSARMGenerator() gopter.Gen {
	if imageRegistryCredentialSTATUSARMGenerator != nil {
		return imageRegistryCredentialSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageRegistryCredentialSTATUSARM(generators)
	imageRegistryCredentialSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageRegistryCredential_STATUSARM{}), generators)

	return imageRegistryCredentialSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForImageRegistryCredentialSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageRegistryCredentialSTATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(gen.AlphaString())
	gens["IdentityUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Server"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerDefinition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerDefinition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerDefinitionSTATUSARM, InitContainerDefinitionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerDefinitionSTATUSARM runs a test to see if a specific instance of InitContainerDefinition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerDefinitionSTATUSARM(subject InitContainerDefinition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerDefinition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerDefinition_STATUSARM instances for property testing - lazily instantiated by
// InitContainerDefinitionSTATUSARMGenerator()
var initContainerDefinitionSTATUSARMGenerator gopter.Gen

// InitContainerDefinitionSTATUSARMGenerator returns a generator of InitContainerDefinition_STATUSARM instances for property testing.
// We first initialize initContainerDefinitionSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerDefinitionSTATUSARMGenerator() gopter.Gen {
	if initContainerDefinitionSTATUSARMGenerator != nil {
		return initContainerDefinitionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerDefinitionSTATUSARM(generators)
	initContainerDefinitionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(InitContainerDefinition_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerDefinitionSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerDefinitionSTATUSARM(generators)
	initContainerDefinitionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(InitContainerDefinition_STATUSARM{}), generators)

	return initContainerDefinitionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerDefinitionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerDefinitionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInitContainerDefinitionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerDefinitionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(InitContainerPropertiesDefinitionSTATUSARMGenerator())
}

func Test_IpAddress_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpAddress_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpAddressSTATUSARM, IpAddressSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpAddressSTATUSARM runs a test to see if a specific instance of IpAddress_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpAddressSTATUSARM(subject IpAddress_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpAddress_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpAddress_STATUSARM instances for property testing - lazily instantiated by IpAddressSTATUSARMGenerator()
var ipAddressSTATUSARMGenerator gopter.Gen

// IpAddressSTATUSARMGenerator returns a generator of IpAddress_STATUSARM instances for property testing.
// We first initialize ipAddressSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IpAddressSTATUSARMGenerator() gopter.Gen {
	if ipAddressSTATUSARMGenerator != nil {
		return ipAddressSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddressSTATUSARM(generators)
	ipAddressSTATUSARMGenerator = gen.Struct(reflect.TypeOf(IpAddress_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddressSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForIpAddressSTATUSARM(generators)
	ipAddressSTATUSARMGenerator = gen.Struct(reflect.TypeOf(IpAddress_STATUSARM{}), generators)

	return ipAddressSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIpAddressSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpAddressSTATUSARM(gens map[string]gopter.Gen) {
	gens["DnsNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["DnsNameLabelReusePolicy"] = gen.PtrOf(gen.OneConstOf(
		IpAddressSTATUSDnsNameLabelReusePolicy_Noreuse,
		IpAddressSTATUSDnsNameLabelReusePolicy_ResourceGroupReuse,
		IpAddressSTATUSDnsNameLabelReusePolicy_SubscriptionReuse,
		IpAddressSTATUSDnsNameLabelReusePolicy_TenantReuse,
		IpAddressSTATUSDnsNameLabelReusePolicy_Unsecure))
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["Ip"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(IpAddressSTATUSType_Private, IpAddressSTATUSType_Public))
}

// AddRelatedPropertyGeneratorsForIpAddressSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIpAddressSTATUSARM(gens map[string]gopter.Gen) {
	gens["Ports"] = gen.SliceOf(PortSTATUSARMGenerator())
}

func Test_Volume_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Volume_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVolumeSTATUSARM, VolumeSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVolumeSTATUSARM runs a test to see if a specific instance of Volume_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVolumeSTATUSARM(subject Volume_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Volume_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Volume_STATUSARM instances for property testing - lazily instantiated by VolumeSTATUSARMGenerator()
var volumeSTATUSARMGenerator gopter.Gen

// VolumeSTATUSARMGenerator returns a generator of Volume_STATUSARM instances for property testing.
// We first initialize volumeSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VolumeSTATUSARMGenerator() gopter.Gen {
	if volumeSTATUSARMGenerator != nil {
		return volumeSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolumeSTATUSARM(generators)
	volumeSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Volume_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolumeSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForVolumeSTATUSARM(generators)
	volumeSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Volume_STATUSARM{}), generators)

	return volumeSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVolumeSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVolumeSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVolumeSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVolumeSTATUSARM(gens map[string]gopter.Gen) {
	gens["AzureFile"] = gen.PtrOf(AzureFileVolumeSTATUSARMGenerator())
	gens["GitRepo"] = gen.PtrOf(GitRepoVolumeSTATUSARMGenerator())
}

func Test_AzureFileVolume_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureFileVolume_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureFileVolumeSTATUSARM, AzureFileVolumeSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureFileVolumeSTATUSARM runs a test to see if a specific instance of AzureFileVolume_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureFileVolumeSTATUSARM(subject AzureFileVolume_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureFileVolume_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureFileVolume_STATUSARM instances for property testing - lazily instantiated by
// AzureFileVolumeSTATUSARMGenerator()
var azureFileVolumeSTATUSARMGenerator gopter.Gen

// AzureFileVolumeSTATUSARMGenerator returns a generator of AzureFileVolume_STATUSARM instances for property testing.
func AzureFileVolumeSTATUSARMGenerator() gopter.Gen {
	if azureFileVolumeSTATUSARMGenerator != nil {
		return azureFileVolumeSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureFileVolumeSTATUSARM(generators)
	azureFileVolumeSTATUSARMGenerator = gen.Struct(reflect.TypeOf(AzureFileVolume_STATUSARM{}), generators)

	return azureFileVolumeSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureFileVolumeSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureFileVolumeSTATUSARM(gens map[string]gopter.Gen) {
	gens["ReadOnly"] = gen.PtrOf(gen.Bool())
	gens["ShareName"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPropertiesSTATUSARM, ContainerPropertiesSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPropertiesSTATUSARM runs a test to see if a specific instance of ContainerProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPropertiesSTATUSARM(subject ContainerProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_STATUSARM instances for property testing - lazily instantiated by
// ContainerPropertiesSTATUSARMGenerator()
var containerPropertiesSTATUSARMGenerator gopter.Gen

// ContainerPropertiesSTATUSARMGenerator returns a generator of ContainerProperties_STATUSARM instances for property testing.
// We first initialize containerPropertiesSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerPropertiesSTATUSARMGenerator() gopter.Gen {
	if containerPropertiesSTATUSARMGenerator != nil {
		return containerPropertiesSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesSTATUSARM(generators)
	containerPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerPropertiesSTATUSARM(generators)
	containerPropertiesSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUSARM{}), generators)

	return containerPropertiesSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPropertiesSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
	gens["Image"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerPropertiesSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerPropertiesSTATUSARM(gens map[string]gopter.Gen) {
	gens["EnvironmentVariables"] = gen.SliceOf(EnvironmentVariableSTATUSARMGenerator())
	gens["InstanceView"] = gen.PtrOf(ContainerPropertiesSTATUSInstanceViewARMGenerator())
	gens["LivenessProbe"] = gen.PtrOf(ContainerProbeSTATUSARMGenerator())
	gens["Ports"] = gen.SliceOf(ContainerPortSTATUSARMGenerator())
	gens["ReadinessProbe"] = gen.PtrOf(ContainerProbeSTATUSARMGenerator())
	gens["Resources"] = gen.PtrOf(ResourceRequirementsSTATUSARMGenerator())
	gens["VolumeMounts"] = gen.SliceOf(VolumeMountSTATUSARMGenerator())
}

func Test_Event_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Event_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventSTATUSARM, EventSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventSTATUSARM runs a test to see if a specific instance of Event_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventSTATUSARM(subject Event_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Event_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Event_STATUSARM instances for property testing - lazily instantiated by EventSTATUSARMGenerator()
var eventSTATUSARMGenerator gopter.Gen

// EventSTATUSARMGenerator returns a generator of Event_STATUSARM instances for property testing.
func EventSTATUSARMGenerator() gopter.Gen {
	if eventSTATUSARMGenerator != nil {
		return eventSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventSTATUSARM(generators)
	eventSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Event_STATUSARM{}), generators)

	return eventSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEventSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventSTATUSARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["FirstTimestamp"] = gen.PtrOf(gen.AlphaString())
	gens["LastTimestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_GitRepoVolume_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitRepoVolume_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitRepoVolumeSTATUSARM, GitRepoVolumeSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitRepoVolumeSTATUSARM runs a test to see if a specific instance of GitRepoVolume_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGitRepoVolumeSTATUSARM(subject GitRepoVolume_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitRepoVolume_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitRepoVolume_STATUSARM instances for property testing - lazily instantiated by
// GitRepoVolumeSTATUSARMGenerator()
var gitRepoVolumeSTATUSARMGenerator gopter.Gen

// GitRepoVolumeSTATUSARMGenerator returns a generator of GitRepoVolume_STATUSARM instances for property testing.
func GitRepoVolumeSTATUSARMGenerator() gopter.Gen {
	if gitRepoVolumeSTATUSARMGenerator != nil {
		return gitRepoVolumeSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitRepoVolumeSTATUSARM(generators)
	gitRepoVolumeSTATUSARMGenerator = gen.Struct(reflect.TypeOf(GitRepoVolume_STATUSARM{}), generators)

	return gitRepoVolumeSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForGitRepoVolumeSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitRepoVolumeSTATUSARM(gens map[string]gopter.Gen) {
	gens["Directory"] = gen.PtrOf(gen.AlphaString())
	gens["Repository"] = gen.PtrOf(gen.AlphaString())
	gens["Revision"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerPropertiesDefinition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerPropertiesDefinition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerPropertiesDefinitionSTATUSARM, InitContainerPropertiesDefinitionSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerPropertiesDefinitionSTATUSARM runs a test to see if a specific instance of InitContainerPropertiesDefinition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerPropertiesDefinitionSTATUSARM(subject InitContainerPropertiesDefinition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerPropertiesDefinition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerPropertiesDefinition_STATUSARM instances for property testing - lazily instantiated by
// InitContainerPropertiesDefinitionSTATUSARMGenerator()
var initContainerPropertiesDefinitionSTATUSARMGenerator gopter.Gen

// InitContainerPropertiesDefinitionSTATUSARMGenerator returns a generator of InitContainerPropertiesDefinition_STATUSARM instances for property testing.
// We first initialize initContainerPropertiesDefinitionSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerPropertiesDefinitionSTATUSARMGenerator() gopter.Gen {
	if initContainerPropertiesDefinitionSTATUSARMGenerator != nil {
		return initContainerPropertiesDefinitionSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSARM(generators)
	initContainerPropertiesDefinitionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSARM(generators)
	initContainerPropertiesDefinitionSTATUSARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUSARM{}), generators)

	return initContainerPropertiesDefinitionSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
	gens["Image"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSARM(gens map[string]gopter.Gen) {
	gens["EnvironmentVariables"] = gen.SliceOf(EnvironmentVariableSTATUSARMGenerator())
	gens["InstanceView"] = gen.PtrOf(InitContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator())
	gens["VolumeMounts"] = gen.SliceOf(VolumeMountSTATUSARMGenerator())
}

func Test_LogAnalytics_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LogAnalytics_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLogAnalyticsSTATUSARM, LogAnalyticsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLogAnalyticsSTATUSARM runs a test to see if a specific instance of LogAnalytics_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLogAnalyticsSTATUSARM(subject LogAnalytics_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LogAnalytics_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LogAnalytics_STATUSARM instances for property testing - lazily instantiated by
// LogAnalyticsSTATUSARMGenerator()
var logAnalyticsSTATUSARMGenerator gopter.Gen

// LogAnalyticsSTATUSARMGenerator returns a generator of LogAnalytics_STATUSARM instances for property testing.
func LogAnalyticsSTATUSARMGenerator() gopter.Gen {
	if logAnalyticsSTATUSARMGenerator != nil {
		return logAnalyticsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogAnalyticsSTATUSARM(generators)
	logAnalyticsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(LogAnalytics_STATUSARM{}), generators)

	return logAnalyticsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForLogAnalyticsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLogAnalyticsSTATUSARM(gens map[string]gopter.Gen) {
	gens["LogType"] = gen.PtrOf(gen.OneConstOf(LogAnalyticsSTATUSLogType_ContainerInsights, LogAnalyticsSTATUSLogType_ContainerInstanceLogs))
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceKey"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_Port_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Port_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPortSTATUSARM, PortSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPortSTATUSARM runs a test to see if a specific instance of Port_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPortSTATUSARM(subject Port_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Port_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Port_STATUSARM instances for property testing - lazily instantiated by PortSTATUSARMGenerator()
var portSTATUSARMGenerator gopter.Gen

// PortSTATUSARMGenerator returns a generator of Port_STATUSARM instances for property testing.
func PortSTATUSARMGenerator() gopter.Gen {
	if portSTATUSARMGenerator != nil {
		return portSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPortSTATUSARM(generators)
	portSTATUSARMGenerator = gen.Struct(reflect.TypeOf(Port_STATUSARM{}), generators)

	return portSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPortSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPortSTATUSARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(PortSTATUSProtocol_TCP, PortSTATUSProtocol_UDP))
}

func Test_ContainerPort_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerPort_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPortSTATUSARM, ContainerPortSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPortSTATUSARM runs a test to see if a specific instance of ContainerPort_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPortSTATUSARM(subject ContainerPort_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerPort_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerPort_STATUSARM instances for property testing - lazily instantiated by
// ContainerPortSTATUSARMGenerator()
var containerPortSTATUSARMGenerator gopter.Gen

// ContainerPortSTATUSARMGenerator returns a generator of ContainerPort_STATUSARM instances for property testing.
func ContainerPortSTATUSARMGenerator() gopter.Gen {
	if containerPortSTATUSARMGenerator != nil {
		return containerPortSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPortSTATUSARM(generators)
	containerPortSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerPort_STATUSARM{}), generators)

	return containerPortSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPortSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPortSTATUSARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(ContainerPortSTATUSProtocol_TCP, ContainerPortSTATUSProtocol_UDP))
}

func Test_ContainerProbe_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProbe_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProbeSTATUSARM, ContainerProbeSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProbeSTATUSARM runs a test to see if a specific instance of ContainerProbe_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProbeSTATUSARM(subject ContainerProbe_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProbe_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProbe_STATUSARM instances for property testing - lazily instantiated by
// ContainerProbeSTATUSARMGenerator()
var containerProbeSTATUSARMGenerator gopter.Gen

// ContainerProbeSTATUSARMGenerator returns a generator of ContainerProbe_STATUSARM instances for property testing.
// We first initialize containerProbeSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProbeSTATUSARMGenerator() gopter.Gen {
	if containerProbeSTATUSARMGenerator != nil {
		return containerProbeSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProbeSTATUSARM(generators)
	containerProbeSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerProbe_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProbeSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerProbeSTATUSARM(generators)
	containerProbeSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerProbe_STATUSARM{}), generators)

	return containerProbeSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProbeSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProbeSTATUSARM(gens map[string]gopter.Gen) {
	gens["FailureThreshold"] = gen.PtrOf(gen.Int())
	gens["InitialDelaySeconds"] = gen.PtrOf(gen.Int())
	gens["PeriodSeconds"] = gen.PtrOf(gen.Int())
	gens["SuccessThreshold"] = gen.PtrOf(gen.Int())
	gens["TimeoutSeconds"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForContainerProbeSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProbeSTATUSARM(gens map[string]gopter.Gen) {
	gens["Exec"] = gen.PtrOf(ContainerExecSTATUSARMGenerator())
	gens["HttpGet"] = gen.PtrOf(ContainerHttpGetSTATUSARMGenerator())
}

func Test_ContainerProperties_STATUS_InstanceViewARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_STATUS_InstanceViewARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPropertiesSTATUSInstanceViewARM, ContainerPropertiesSTATUSInstanceViewARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPropertiesSTATUSInstanceViewARM runs a test to see if a specific instance of ContainerProperties_STATUS_InstanceViewARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPropertiesSTATUSInstanceViewARM(subject ContainerProperties_STATUS_InstanceViewARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_STATUS_InstanceViewARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_STATUS_InstanceViewARM instances for property testing - lazily instantiated by
// ContainerPropertiesSTATUSInstanceViewARMGenerator()
var containerPropertiesSTATUSInstanceViewARMGenerator gopter.Gen

// ContainerPropertiesSTATUSInstanceViewARMGenerator returns a generator of ContainerProperties_STATUS_InstanceViewARM instances for property testing.
// We first initialize containerPropertiesSTATUSInstanceViewARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerPropertiesSTATUSInstanceViewARMGenerator() gopter.Gen {
	if containerPropertiesSTATUSInstanceViewARMGenerator != nil {
		return containerPropertiesSTATUSInstanceViewARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesSTATUSInstanceViewARM(generators)
	containerPropertiesSTATUSInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUS_InstanceViewARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesSTATUSInstanceViewARM(generators)
	AddRelatedPropertyGeneratorsForContainerPropertiesSTATUSInstanceViewARM(generators)
	containerPropertiesSTATUSInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUS_InstanceViewARM{}), generators)

	return containerPropertiesSTATUSInstanceViewARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPropertiesSTATUSInstanceViewARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPropertiesSTATUSInstanceViewARM(gens map[string]gopter.Gen) {
	gens["RestartCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForContainerPropertiesSTATUSInstanceViewARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerPropertiesSTATUSInstanceViewARM(gens map[string]gopter.Gen) {
	gens["CurrentState"] = gen.PtrOf(ContainerStateSTATUSARMGenerator())
	gens["Events"] = gen.SliceOf(EventSTATUSARMGenerator())
	gens["PreviousState"] = gen.PtrOf(ContainerStateSTATUSARMGenerator())
}

func Test_EnvironmentVariable_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EnvironmentVariable_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEnvironmentVariableSTATUSARM, EnvironmentVariableSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEnvironmentVariableSTATUSARM runs a test to see if a specific instance of EnvironmentVariable_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEnvironmentVariableSTATUSARM(subject EnvironmentVariable_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EnvironmentVariable_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EnvironmentVariable_STATUSARM instances for property testing - lazily instantiated by
// EnvironmentVariableSTATUSARMGenerator()
var environmentVariableSTATUSARMGenerator gopter.Gen

// EnvironmentVariableSTATUSARMGenerator returns a generator of EnvironmentVariable_STATUSARM instances for property testing.
func EnvironmentVariableSTATUSARMGenerator() gopter.Gen {
	if environmentVariableSTATUSARMGenerator != nil {
		return environmentVariableSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEnvironmentVariableSTATUSARM(generators)
	environmentVariableSTATUSARMGenerator = gen.Struct(reflect.TypeOf(EnvironmentVariable_STATUSARM{}), generators)

	return environmentVariableSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEnvironmentVariableSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEnvironmentVariableSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["SecureValue"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerPropertiesDefinition_STATUS_InstanceViewARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerPropertiesDefinition_STATUS_InstanceViewARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerPropertiesDefinitionSTATUSInstanceViewARM, InitContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerPropertiesDefinitionSTATUSInstanceViewARM runs a test to see if a specific instance of InitContainerPropertiesDefinition_STATUS_InstanceViewARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerPropertiesDefinitionSTATUSInstanceViewARM(subject InitContainerPropertiesDefinition_STATUS_InstanceViewARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerPropertiesDefinition_STATUS_InstanceViewARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerPropertiesDefinition_STATUS_InstanceViewARM instances for property testing - lazily
// instantiated by InitContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator()
var initContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator gopter.Gen

// InitContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator returns a generator of InitContainerPropertiesDefinition_STATUS_InstanceViewARM instances for property testing.
// We first initialize initContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator() gopter.Gen {
	if initContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator != nil {
		return initContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSInstanceViewARM(generators)
	initContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUS_InstanceViewARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSInstanceViewARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSInstanceViewARM(generators)
	initContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUS_InstanceViewARM{}), generators)

	return initContainerPropertiesDefinitionSTATUSInstanceViewARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSInstanceViewARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSInstanceViewARM(gens map[string]gopter.Gen) {
	gens["RestartCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSInstanceViewARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionSTATUSInstanceViewARM(gens map[string]gopter.Gen) {
	gens["CurrentState"] = gen.PtrOf(ContainerStateSTATUSARMGenerator())
	gens["Events"] = gen.SliceOf(EventSTATUSARMGenerator())
	gens["PreviousState"] = gen.PtrOf(ContainerStateSTATUSARMGenerator())
}

func Test_ResourceRequirements_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceRequirements_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceRequirementsSTATUSARM, ResourceRequirementsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceRequirementsSTATUSARM runs a test to see if a specific instance of ResourceRequirements_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceRequirementsSTATUSARM(subject ResourceRequirements_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceRequirements_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceRequirements_STATUSARM instances for property testing - lazily instantiated by
// ResourceRequirementsSTATUSARMGenerator()
var resourceRequirementsSTATUSARMGenerator gopter.Gen

// ResourceRequirementsSTATUSARMGenerator returns a generator of ResourceRequirements_STATUSARM instances for property testing.
func ResourceRequirementsSTATUSARMGenerator() gopter.Gen {
	if resourceRequirementsSTATUSARMGenerator != nil {
		return resourceRequirementsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceRequirementsSTATUSARM(generators)
	resourceRequirementsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequirements_STATUSARM{}), generators)

	return resourceRequirementsSTATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForResourceRequirementsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceRequirementsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Limits"] = gen.PtrOf(ResourceLimitsSTATUSARMGenerator())
	gens["Requests"] = gen.PtrOf(ResourceRequestsSTATUSARMGenerator())
}

func Test_VolumeMount_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VolumeMount_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVolumeMountSTATUSARM, VolumeMountSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVolumeMountSTATUSARM runs a test to see if a specific instance of VolumeMount_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVolumeMountSTATUSARM(subject VolumeMount_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VolumeMount_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VolumeMount_STATUSARM instances for property testing - lazily instantiated by
// VolumeMountSTATUSARMGenerator()
var volumeMountSTATUSARMGenerator gopter.Gen

// VolumeMountSTATUSARMGenerator returns a generator of VolumeMount_STATUSARM instances for property testing.
func VolumeMountSTATUSARMGenerator() gopter.Gen {
	if volumeMountSTATUSARMGenerator != nil {
		return volumeMountSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolumeMountSTATUSARM(generators)
	volumeMountSTATUSARMGenerator = gen.Struct(reflect.TypeOf(VolumeMount_STATUSARM{}), generators)

	return volumeMountSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVolumeMountSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVolumeMountSTATUSARM(gens map[string]gopter.Gen) {
	gens["MountPath"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ReadOnly"] = gen.PtrOf(gen.Bool())
}

func Test_ContainerExec_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerExec_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerExecSTATUSARM, ContainerExecSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerExecSTATUSARM runs a test to see if a specific instance of ContainerExec_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerExecSTATUSARM(subject ContainerExec_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerExec_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerExec_STATUSARM instances for property testing - lazily instantiated by
// ContainerExecSTATUSARMGenerator()
var containerExecSTATUSARMGenerator gopter.Gen

// ContainerExecSTATUSARMGenerator returns a generator of ContainerExec_STATUSARM instances for property testing.
func ContainerExecSTATUSARMGenerator() gopter.Gen {
	if containerExecSTATUSARMGenerator != nil {
		return containerExecSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerExecSTATUSARM(generators)
	containerExecSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerExec_STATUSARM{}), generators)

	return containerExecSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerExecSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerExecSTATUSARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
}

func Test_ContainerHttpGet_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerHttpGet_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerHttpGetSTATUSARM, ContainerHttpGetSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerHttpGetSTATUSARM runs a test to see if a specific instance of ContainerHttpGet_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerHttpGetSTATUSARM(subject ContainerHttpGet_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerHttpGet_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerHttpGet_STATUSARM instances for property testing - lazily instantiated by
// ContainerHttpGetSTATUSARMGenerator()
var containerHttpGetSTATUSARMGenerator gopter.Gen

// ContainerHttpGetSTATUSARMGenerator returns a generator of ContainerHttpGet_STATUSARM instances for property testing.
// We first initialize containerHttpGetSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerHttpGetSTATUSARMGenerator() gopter.Gen {
	if containerHttpGetSTATUSARMGenerator != nil {
		return containerHttpGetSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerHttpGetSTATUSARM(generators)
	containerHttpGetSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerHttpGet_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerHttpGetSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerHttpGetSTATUSARM(generators)
	containerHttpGetSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerHttpGet_STATUSARM{}), generators)

	return containerHttpGetSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerHttpGetSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerHttpGetSTATUSARM(gens map[string]gopter.Gen) {
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Scheme"] = gen.PtrOf(gen.OneConstOf(ContainerHttpGetSTATUSScheme_Http, ContainerHttpGetSTATUSScheme_Https))
}

// AddRelatedPropertyGeneratorsForContainerHttpGetSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerHttpGetSTATUSARM(gens map[string]gopter.Gen) {
	gens["HttpHeaders"] = gen.SliceOf(HttpHeaderSTATUSARMGenerator())
}

func Test_ContainerState_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerState_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerStateSTATUSARM, ContainerStateSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerStateSTATUSARM runs a test to see if a specific instance of ContainerState_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerStateSTATUSARM(subject ContainerState_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerState_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerState_STATUSARM instances for property testing - lazily instantiated by
// ContainerStateSTATUSARMGenerator()
var containerStateSTATUSARMGenerator gopter.Gen

// ContainerStateSTATUSARMGenerator returns a generator of ContainerState_STATUSARM instances for property testing.
func ContainerStateSTATUSARMGenerator() gopter.Gen {
	if containerStateSTATUSARMGenerator != nil {
		return containerStateSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerStateSTATUSARM(generators)
	containerStateSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerState_STATUSARM{}), generators)

	return containerStateSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerStateSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerStateSTATUSARM(gens map[string]gopter.Gen) {
	gens["DetailStatus"] = gen.PtrOf(gen.AlphaString())
	gens["ExitCode"] = gen.PtrOf(gen.Int())
	gens["FinishTime"] = gen.PtrOf(gen.AlphaString())
	gens["StartTime"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceLimits_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLimits_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLimitsSTATUSARM, ResourceLimitsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLimitsSTATUSARM runs a test to see if a specific instance of ResourceLimits_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLimitsSTATUSARM(subject ResourceLimits_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLimits_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLimits_STATUSARM instances for property testing - lazily instantiated by
// ResourceLimitsSTATUSARMGenerator()
var resourceLimitsSTATUSARMGenerator gopter.Gen

// ResourceLimitsSTATUSARMGenerator returns a generator of ResourceLimits_STATUSARM instances for property testing.
// We first initialize resourceLimitsSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceLimitsSTATUSARMGenerator() gopter.Gen {
	if resourceLimitsSTATUSARMGenerator != nil {
		return resourceLimitsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLimitsSTATUSARM(generators)
	resourceLimitsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceLimits_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLimitsSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForResourceLimitsSTATUSARM(generators)
	resourceLimitsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceLimits_STATUSARM{}), generators)

	return resourceLimitsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceLimitsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceLimitsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Cpu"] = gen.PtrOf(gen.Float64())
	gens["MemoryInGB"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForResourceLimitsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceLimitsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Gpu"] = gen.PtrOf(GpuResourceSTATUSARMGenerator())
}

func Test_ResourceRequests_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceRequests_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceRequestsSTATUSARM, ResourceRequestsSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceRequestsSTATUSARM runs a test to see if a specific instance of ResourceRequests_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceRequestsSTATUSARM(subject ResourceRequests_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceRequests_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceRequests_STATUSARM instances for property testing - lazily instantiated by
// ResourceRequestsSTATUSARMGenerator()
var resourceRequestsSTATUSARMGenerator gopter.Gen

// ResourceRequestsSTATUSARMGenerator returns a generator of ResourceRequests_STATUSARM instances for property testing.
// We first initialize resourceRequestsSTATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceRequestsSTATUSARMGenerator() gopter.Gen {
	if resourceRequestsSTATUSARMGenerator != nil {
		return resourceRequestsSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceRequestsSTATUSARM(generators)
	resourceRequestsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequests_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceRequestsSTATUSARM(generators)
	AddRelatedPropertyGeneratorsForResourceRequestsSTATUSARM(generators)
	resourceRequestsSTATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequests_STATUSARM{}), generators)

	return resourceRequestsSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceRequestsSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceRequestsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Cpu"] = gen.PtrOf(gen.Float64())
	gens["MemoryInGB"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForResourceRequestsSTATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceRequestsSTATUSARM(gens map[string]gopter.Gen) {
	gens["Gpu"] = gen.PtrOf(GpuResourceSTATUSARMGenerator())
}

func Test_GpuResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GpuResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGpuResourceSTATUSARM, GpuResourceSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGpuResourceSTATUSARM runs a test to see if a specific instance of GpuResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGpuResourceSTATUSARM(subject GpuResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GpuResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GpuResource_STATUSARM instances for property testing - lazily instantiated by
// GpuResourceSTATUSARMGenerator()
var gpuResourceSTATUSARMGenerator gopter.Gen

// GpuResourceSTATUSARMGenerator returns a generator of GpuResource_STATUSARM instances for property testing.
func GpuResourceSTATUSARMGenerator() gopter.Gen {
	if gpuResourceSTATUSARMGenerator != nil {
		return gpuResourceSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGpuResourceSTATUSARM(generators)
	gpuResourceSTATUSARMGenerator = gen.Struct(reflect.TypeOf(GpuResource_STATUSARM{}), generators)

	return gpuResourceSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForGpuResourceSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGpuResourceSTATUSARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Sku"] = gen.PtrOf(gen.OneConstOf(GpuResourceSTATUSSku_K80, GpuResourceSTATUSSku_P100, GpuResourceSTATUSSku_V100))
}

func Test_HttpHeader_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpHeader_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpHeaderSTATUSARM, HttpHeaderSTATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpHeaderSTATUSARM runs a test to see if a specific instance of HttpHeader_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpHeaderSTATUSARM(subject HttpHeader_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpHeader_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpHeader_STATUSARM instances for property testing - lazily instantiated by
// HttpHeaderSTATUSARMGenerator()
var httpHeaderSTATUSARMGenerator gopter.Gen

// HttpHeaderSTATUSARMGenerator returns a generator of HttpHeader_STATUSARM instances for property testing.
func HttpHeaderSTATUSARMGenerator() gopter.Gen {
	if httpHeaderSTATUSARMGenerator != nil {
		return httpHeaderSTATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpHeaderSTATUSARM(generators)
	httpHeaderSTATUSARMGenerator = gen.Struct(reflect.TypeOf(HttpHeader_STATUSARM{}), generators)

	return httpHeaderSTATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpHeaderSTATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpHeaderSTATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
