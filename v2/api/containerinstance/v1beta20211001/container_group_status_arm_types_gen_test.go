// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211001

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ContainerGroup_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroup_STATUSARM, ContainerGroup_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroup_STATUSARM runs a test to see if a specific instance of ContainerGroup_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroup_STATUSARM(subject ContainerGroup_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_STATUSARM instances for property testing - lazily instantiated by
// ContainerGroup_STATUSARMGenerator()
var containerGroup_STATUSARMGenerator gopter.Gen

// ContainerGroup_STATUSARMGenerator returns a generator of ContainerGroup_STATUSARM instances for property testing.
// We first initialize containerGroup_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroup_STATUSARMGenerator() gopter.Gen {
	if containerGroup_STATUSARMGenerator != nil {
		return containerGroup_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_STATUSARM(generators)
	containerGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroup_STATUSARM(generators)
	containerGroup_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUSARM{}), generators)

	return containerGroup_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroup_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerGroup_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroup_STATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ContainerGroupIdentity_STATUSARMGenerator())
	gens["Properties"] = gen.PtrOf(ContainerGroup_STATUS_PropertiesARMGenerator())
}

func Test_ContainerGroup_STATUS_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_STATUS_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroup_STATUS_PropertiesARM, ContainerGroup_STATUS_PropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroup_STATUS_PropertiesARM runs a test to see if a specific instance of ContainerGroup_STATUS_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroup_STATUS_PropertiesARM(subject ContainerGroup_STATUS_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_STATUS_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_STATUS_PropertiesARM instances for property testing - lazily instantiated by
// ContainerGroup_STATUS_PropertiesARMGenerator()
var containerGroup_STATUS_PropertiesARMGenerator gopter.Gen

// ContainerGroup_STATUS_PropertiesARMGenerator returns a generator of ContainerGroup_STATUS_PropertiesARM instances for property testing.
// We first initialize containerGroup_STATUS_PropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroup_STATUS_PropertiesARMGenerator() gopter.Gen {
	if containerGroup_STATUS_PropertiesARMGenerator != nil {
		return containerGroup_STATUS_PropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_STATUS_PropertiesARM(generators)
	containerGroup_STATUS_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_STATUS_PropertiesARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroup_STATUS_PropertiesARM(generators)
	containerGroup_STATUS_PropertiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_PropertiesARM{}), generators)

	return containerGroup_STATUS_PropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroup_STATUS_PropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroup_STATUS_PropertiesARM(gens map[string]gopter.Gen) {
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(ContainerGroup_STATUS_Properties_OsType_Linux, ContainerGroup_STATUS_Properties_OsType_Windows))
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RestartPolicy"] = gen.PtrOf(gen.OneConstOf(ContainerGroup_STATUS_Properties_RestartPolicy_Always, ContainerGroup_STATUS_Properties_RestartPolicy_Never, ContainerGroup_STATUS_Properties_RestartPolicy_OnFailure))
	gens["Sku"] = gen.PtrOf(gen.OneConstOf(ContainerGroupSku_STATUS_Dedicated, ContainerGroupSku_STATUS_Standard))
}

// AddRelatedPropertyGeneratorsForContainerGroup_STATUS_PropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroup_STATUS_PropertiesARM(gens map[string]gopter.Gen) {
	gens["Containers"] = gen.SliceOf(Container_STATUSARMGenerator())
	gens["Diagnostics"] = gen.PtrOf(ContainerGroupDiagnostics_STATUSARMGenerator())
	gens["DnsConfig"] = gen.PtrOf(DnsConfiguration_STATUSARMGenerator())
	gens["EncryptionProperties"] = gen.PtrOf(EncryptionProperties_STATUSARMGenerator())
	gens["ImageRegistryCredentials"] = gen.SliceOf(ImageRegistryCredential_STATUSARMGenerator())
	gens["InitContainers"] = gen.SliceOf(InitContainerDefinition_STATUSARMGenerator())
	gens["InstanceView"] = gen.PtrOf(ContainerGroup_STATUS_Properties_InstanceViewARMGenerator())
	gens["IpAddress"] = gen.PtrOf(IpAddress_STATUSARMGenerator())
	gens["SubnetIds"] = gen.SliceOf(ContainerGroupSubnetId_STATUSARMGenerator())
	gens["Volumes"] = gen.SliceOf(Volume_STATUSARMGenerator())
}

func Test_ContainerGroupIdentity_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupIdentity_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupIdentity_STATUSARM, ContainerGroupIdentity_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupIdentity_STATUSARM runs a test to see if a specific instance of ContainerGroupIdentity_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupIdentity_STATUSARM(subject ContainerGroupIdentity_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupIdentity_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupIdentity_STATUSARM instances for property testing - lazily instantiated by
// ContainerGroupIdentity_STATUSARMGenerator()
var containerGroupIdentity_STATUSARMGenerator gopter.Gen

// ContainerGroupIdentity_STATUSARMGenerator returns a generator of ContainerGroupIdentity_STATUSARM instances for property testing.
// We first initialize containerGroupIdentity_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupIdentity_STATUSARMGenerator() gopter.Gen {
	if containerGroupIdentity_STATUSARMGenerator != nil {
		return containerGroupIdentity_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUSARM(generators)
	containerGroupIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupIdentity_STATUSARM(generators)
	containerGroupIdentity_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_STATUSARM{}), generators)

	return containerGroupIdentity_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ContainerGroupIdentity_STATUS_Type_None,
		ContainerGroupIdentity_STATUS_Type_SystemAssigned,
		ContainerGroupIdentity_STATUS_Type_SystemAssignedUserAssigned,
		ContainerGroupIdentity_STATUS_Type_UserAssigned))
}

// AddRelatedPropertyGeneratorsForContainerGroupIdentity_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupIdentity_STATUSARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator())
}

func Test_Container_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Container_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainer_STATUSARM, Container_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainer_STATUSARM runs a test to see if a specific instance of Container_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainer_STATUSARM(subject Container_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Container_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Container_STATUSARM instances for property testing - lazily instantiated by
// Container_STATUSARMGenerator()
var container_STATUSARMGenerator gopter.Gen

// Container_STATUSARMGenerator returns a generator of Container_STATUSARM instances for property testing.
// We first initialize container_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Container_STATUSARMGenerator() gopter.Gen {
	if container_STATUSARMGenerator != nil {
		return container_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainer_STATUSARM(generators)
	container_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Container_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainer_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainer_STATUSARM(generators)
	container_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Container_STATUSARM{}), generators)

	return container_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainer_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainer_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainer_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainer_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ContainerProperties_STATUSARMGenerator())
}

func Test_ContainerGroup_STATUS_Properties_InstanceViewARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_STATUS_Properties_InstanceViewARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroup_STATUS_Properties_InstanceViewARM, ContainerGroup_STATUS_Properties_InstanceViewARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroup_STATUS_Properties_InstanceViewARM runs a test to see if a specific instance of ContainerGroup_STATUS_Properties_InstanceViewARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroup_STATUS_Properties_InstanceViewARM(subject ContainerGroup_STATUS_Properties_InstanceViewARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_STATUS_Properties_InstanceViewARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_STATUS_Properties_InstanceViewARM instances for property testing - lazily instantiated by
// ContainerGroup_STATUS_Properties_InstanceViewARMGenerator()
var containerGroup_STATUS_Properties_InstanceViewARMGenerator gopter.Gen

// ContainerGroup_STATUS_Properties_InstanceViewARMGenerator returns a generator of ContainerGroup_STATUS_Properties_InstanceViewARM instances for property testing.
// We first initialize containerGroup_STATUS_Properties_InstanceViewARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroup_STATUS_Properties_InstanceViewARMGenerator() gopter.Gen {
	if containerGroup_STATUS_Properties_InstanceViewARMGenerator != nil {
		return containerGroup_STATUS_Properties_InstanceViewARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_STATUS_Properties_InstanceViewARM(generators)
	containerGroup_STATUS_Properties_InstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_Properties_InstanceViewARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroup_STATUS_Properties_InstanceViewARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroup_STATUS_Properties_InstanceViewARM(generators)
	containerGroup_STATUS_Properties_InstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_STATUS_Properties_InstanceViewARM{}), generators)

	return containerGroup_STATUS_Properties_InstanceViewARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroup_STATUS_Properties_InstanceViewARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroup_STATUS_Properties_InstanceViewARM(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerGroup_STATUS_Properties_InstanceViewARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroup_STATUS_Properties_InstanceViewARM(gens map[string]gopter.Gen) {
	gens["Events"] = gen.SliceOf(Event_STATUSARMGenerator())
}

func Test_ContainerGroupDiagnostics_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupDiagnostics_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupDiagnostics_STATUSARM, ContainerGroupDiagnostics_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupDiagnostics_STATUSARM runs a test to see if a specific instance of ContainerGroupDiagnostics_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupDiagnostics_STATUSARM(subject ContainerGroupDiagnostics_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupDiagnostics_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupDiagnostics_STATUSARM instances for property testing - lazily instantiated by
// ContainerGroupDiagnostics_STATUSARMGenerator()
var containerGroupDiagnostics_STATUSARMGenerator gopter.Gen

// ContainerGroupDiagnostics_STATUSARMGenerator returns a generator of ContainerGroupDiagnostics_STATUSARM instances for property testing.
func ContainerGroupDiagnostics_STATUSARMGenerator() gopter.Gen {
	if containerGroupDiagnostics_STATUSARMGenerator != nil {
		return containerGroupDiagnostics_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerGroupDiagnostics_STATUSARM(generators)
	containerGroupDiagnostics_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupDiagnostics_STATUSARM{}), generators)

	return containerGroupDiagnostics_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForContainerGroupDiagnostics_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupDiagnostics_STATUSARM(gens map[string]gopter.Gen) {
	gens["LogAnalytics"] = gen.PtrOf(LogAnalytics_STATUSARMGenerator())
}

func Test_ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM, ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM runs a test to see if a specific instance of ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM(subject ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing - lazily
// instantiated by ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator()
var containerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator gopter.Gen

// ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator returns a generator of ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM instances for property testing.
func ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator() gopter.Gen {
	if containerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator != nil {
		return containerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM(generators)
	containerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM{}), generators)

	return containerGroupIdentity_STATUS_UserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupIdentity_STATUS_UserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerGroupSubnetId_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupSubnetId_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupSubnetId_STATUSARM, ContainerGroupSubnetId_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupSubnetId_STATUSARM runs a test to see if a specific instance of ContainerGroupSubnetId_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupSubnetId_STATUSARM(subject ContainerGroupSubnetId_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupSubnetId_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupSubnetId_STATUSARM instances for property testing - lazily instantiated by
// ContainerGroupSubnetId_STATUSARMGenerator()
var containerGroupSubnetId_STATUSARMGenerator gopter.Gen

// ContainerGroupSubnetId_STATUSARMGenerator returns a generator of ContainerGroupSubnetId_STATUSARM instances for property testing.
func ContainerGroupSubnetId_STATUSARMGenerator() gopter.Gen {
	if containerGroupSubnetId_STATUSARMGenerator != nil {
		return containerGroupSubnetId_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSubnetId_STATUSARM(generators)
	containerGroupSubnetId_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupSubnetId_STATUSARM{}), generators)

	return containerGroupSubnetId_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupSubnetId_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupSubnetId_STATUSARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_DnsConfiguration_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsConfiguration_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsConfiguration_STATUSARM, DnsConfiguration_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsConfiguration_STATUSARM runs a test to see if a specific instance of DnsConfiguration_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsConfiguration_STATUSARM(subject DnsConfiguration_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsConfiguration_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsConfiguration_STATUSARM instances for property testing - lazily instantiated by
// DnsConfiguration_STATUSARMGenerator()
var dnsConfiguration_STATUSARMGenerator gopter.Gen

// DnsConfiguration_STATUSARMGenerator returns a generator of DnsConfiguration_STATUSARM instances for property testing.
func DnsConfiguration_STATUSARMGenerator() gopter.Gen {
	if dnsConfiguration_STATUSARMGenerator != nil {
		return dnsConfiguration_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsConfiguration_STATUSARM(generators)
	dnsConfiguration_STATUSARMGenerator = gen.Struct(reflect.TypeOf(DnsConfiguration_STATUSARM{}), generators)

	return dnsConfiguration_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForDnsConfiguration_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsConfiguration_STATUSARM(gens map[string]gopter.Gen) {
	gens["NameServers"] = gen.SliceOf(gen.AlphaString())
	gens["Options"] = gen.PtrOf(gen.AlphaString())
	gens["SearchDomains"] = gen.PtrOf(gen.AlphaString())
}

func Test_EncryptionProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionProperties_STATUSARM, EncryptionProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionProperties_STATUSARM runs a test to see if a specific instance of EncryptionProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionProperties_STATUSARM(subject EncryptionProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionProperties_STATUSARM instances for property testing - lazily instantiated by
// EncryptionProperties_STATUSARMGenerator()
var encryptionProperties_STATUSARMGenerator gopter.Gen

// EncryptionProperties_STATUSARMGenerator returns a generator of EncryptionProperties_STATUSARM instances for property testing.
func EncryptionProperties_STATUSARMGenerator() gopter.Gen {
	if encryptionProperties_STATUSARMGenerator != nil {
		return encryptionProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionProperties_STATUSARM(generators)
	encryptionProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperties_STATUSARM{}), generators)

	return encryptionProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["KeyName"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVersion"] = gen.PtrOf(gen.AlphaString())
	gens["VaultBaseUrl"] = gen.PtrOf(gen.AlphaString())
}

func Test_ImageRegistryCredential_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageRegistryCredential_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageRegistryCredential_STATUSARM, ImageRegistryCredential_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageRegistryCredential_STATUSARM runs a test to see if a specific instance of ImageRegistryCredential_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageRegistryCredential_STATUSARM(subject ImageRegistryCredential_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageRegistryCredential_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageRegistryCredential_STATUSARM instances for property testing - lazily instantiated by
// ImageRegistryCredential_STATUSARMGenerator()
var imageRegistryCredential_STATUSARMGenerator gopter.Gen

// ImageRegistryCredential_STATUSARMGenerator returns a generator of ImageRegistryCredential_STATUSARM instances for property testing.
func ImageRegistryCredential_STATUSARMGenerator() gopter.Gen {
	if imageRegistryCredential_STATUSARMGenerator != nil {
		return imageRegistryCredential_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageRegistryCredential_STATUSARM(generators)
	imageRegistryCredential_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ImageRegistryCredential_STATUSARM{}), generators)

	return imageRegistryCredential_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForImageRegistryCredential_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageRegistryCredential_STATUSARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(gen.AlphaString())
	gens["IdentityUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Server"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerDefinition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerDefinition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerDefinition_STATUSARM, InitContainerDefinition_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerDefinition_STATUSARM runs a test to see if a specific instance of InitContainerDefinition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerDefinition_STATUSARM(subject InitContainerDefinition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerDefinition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerDefinition_STATUSARM instances for property testing - lazily instantiated by
// InitContainerDefinition_STATUSARMGenerator()
var initContainerDefinition_STATUSARMGenerator gopter.Gen

// InitContainerDefinition_STATUSARMGenerator returns a generator of InitContainerDefinition_STATUSARM instances for property testing.
// We first initialize initContainerDefinition_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerDefinition_STATUSARMGenerator() gopter.Gen {
	if initContainerDefinition_STATUSARMGenerator != nil {
		return initContainerDefinition_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerDefinition_STATUSARM(generators)
	initContainerDefinition_STATUSARMGenerator = gen.Struct(reflect.TypeOf(InitContainerDefinition_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerDefinition_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerDefinition_STATUSARM(generators)
	initContainerDefinition_STATUSARMGenerator = gen.Struct(reflect.TypeOf(InitContainerDefinition_STATUSARM{}), generators)

	return initContainerDefinition_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerDefinition_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerDefinition_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInitContainerDefinition_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerDefinition_STATUSARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(InitContainerPropertiesDefinition_STATUSARMGenerator())
}

func Test_IpAddress_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpAddress_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpAddress_STATUSARM, IpAddress_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpAddress_STATUSARM runs a test to see if a specific instance of IpAddress_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpAddress_STATUSARM(subject IpAddress_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpAddress_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpAddress_STATUSARM instances for property testing - lazily instantiated by
// IpAddress_STATUSARMGenerator()
var ipAddress_STATUSARMGenerator gopter.Gen

// IpAddress_STATUSARMGenerator returns a generator of IpAddress_STATUSARM instances for property testing.
// We first initialize ipAddress_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IpAddress_STATUSARMGenerator() gopter.Gen {
	if ipAddress_STATUSARMGenerator != nil {
		return ipAddress_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddress_STATUSARM(generators)
	ipAddress_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IpAddress_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddress_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForIpAddress_STATUSARM(generators)
	ipAddress_STATUSARMGenerator = gen.Struct(reflect.TypeOf(IpAddress_STATUSARM{}), generators)

	return ipAddress_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForIpAddress_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpAddress_STATUSARM(gens map[string]gopter.Gen) {
	gens["DnsNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["DnsNameLabelReusePolicy"] = gen.PtrOf(gen.OneConstOf(
		IpAddress_STATUS_DnsNameLabelReusePolicy_Noreuse,
		IpAddress_STATUS_DnsNameLabelReusePolicy_ResourceGroupReuse,
		IpAddress_STATUS_DnsNameLabelReusePolicy_SubscriptionReuse,
		IpAddress_STATUS_DnsNameLabelReusePolicy_TenantReuse,
		IpAddress_STATUS_DnsNameLabelReusePolicy_Unsecure))
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["Ip"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(IpAddress_STATUS_Type_Private, IpAddress_STATUS_Type_Public))
}

// AddRelatedPropertyGeneratorsForIpAddress_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIpAddress_STATUSARM(gens map[string]gopter.Gen) {
	gens["Ports"] = gen.SliceOf(Port_STATUSARMGenerator())
}

func Test_Volume_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Volume_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVolume_STATUSARM, Volume_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVolume_STATUSARM runs a test to see if a specific instance of Volume_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVolume_STATUSARM(subject Volume_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Volume_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Volume_STATUSARM instances for property testing - lazily instantiated by Volume_STATUSARMGenerator()
var volume_STATUSARMGenerator gopter.Gen

// Volume_STATUSARMGenerator returns a generator of Volume_STATUSARM instances for property testing.
// We first initialize volume_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Volume_STATUSARMGenerator() gopter.Gen {
	if volume_STATUSARMGenerator != nil {
		return volume_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolume_STATUSARM(generators)
	volume_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Volume_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolume_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForVolume_STATUSARM(generators)
	volume_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Volume_STATUSARM{}), generators)

	return volume_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVolume_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVolume_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVolume_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVolume_STATUSARM(gens map[string]gopter.Gen) {
	gens["AzureFile"] = gen.PtrOf(AzureFileVolume_STATUSARMGenerator())
	gens["GitRepo"] = gen.PtrOf(GitRepoVolume_STATUSARMGenerator())
}

func Test_AzureFileVolume_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureFileVolume_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureFileVolume_STATUSARM, AzureFileVolume_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureFileVolume_STATUSARM runs a test to see if a specific instance of AzureFileVolume_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureFileVolume_STATUSARM(subject AzureFileVolume_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureFileVolume_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureFileVolume_STATUSARM instances for property testing - lazily instantiated by
// AzureFileVolume_STATUSARMGenerator()
var azureFileVolume_STATUSARMGenerator gopter.Gen

// AzureFileVolume_STATUSARMGenerator returns a generator of AzureFileVolume_STATUSARM instances for property testing.
func AzureFileVolume_STATUSARMGenerator() gopter.Gen {
	if azureFileVolume_STATUSARMGenerator != nil {
		return azureFileVolume_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureFileVolume_STATUSARM(generators)
	azureFileVolume_STATUSARMGenerator = gen.Struct(reflect.TypeOf(AzureFileVolume_STATUSARM{}), generators)

	return azureFileVolume_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureFileVolume_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureFileVolume_STATUSARM(gens map[string]gopter.Gen) {
	gens["ReadOnly"] = gen.PtrOf(gen.Bool())
	gens["ShareName"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerProperties_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProperties_STATUSARM, ContainerProperties_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProperties_STATUSARM runs a test to see if a specific instance of ContainerProperties_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProperties_STATUSARM(subject ContainerProperties_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_STATUSARM instances for property testing - lazily instantiated by
// ContainerProperties_STATUSARMGenerator()
var containerProperties_STATUSARMGenerator gopter.Gen

// ContainerProperties_STATUSARMGenerator returns a generator of ContainerProperties_STATUSARM instances for property testing.
// We first initialize containerProperties_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProperties_STATUSARMGenerator() gopter.Gen {
	if containerProperties_STATUSARMGenerator != nil {
		return containerProperties_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_STATUSARM(generators)
	containerProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerProperties_STATUSARM(generators)
	containerProperties_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUSARM{}), generators)

	return containerProperties_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProperties_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
	gens["Image"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerProperties_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProperties_STATUSARM(gens map[string]gopter.Gen) {
	gens["EnvironmentVariables"] = gen.SliceOf(EnvironmentVariable_STATUSARMGenerator())
	gens["InstanceView"] = gen.PtrOf(ContainerProperties_STATUS_InstanceViewARMGenerator())
	gens["LivenessProbe"] = gen.PtrOf(ContainerProbe_STATUSARMGenerator())
	gens["Ports"] = gen.SliceOf(ContainerPort_STATUSARMGenerator())
	gens["ReadinessProbe"] = gen.PtrOf(ContainerProbe_STATUSARMGenerator())
	gens["Resources"] = gen.PtrOf(ResourceRequirements_STATUSARMGenerator())
	gens["VolumeMounts"] = gen.SliceOf(VolumeMount_STATUSARMGenerator())
}

func Test_Event_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Event_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEvent_STATUSARM, Event_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEvent_STATUSARM runs a test to see if a specific instance of Event_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEvent_STATUSARM(subject Event_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Event_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Event_STATUSARM instances for property testing - lazily instantiated by Event_STATUSARMGenerator()
var event_STATUSARMGenerator gopter.Gen

// Event_STATUSARMGenerator returns a generator of Event_STATUSARM instances for property testing.
func Event_STATUSARMGenerator() gopter.Gen {
	if event_STATUSARMGenerator != nil {
		return event_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEvent_STATUSARM(generators)
	event_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Event_STATUSARM{}), generators)

	return event_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEvent_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEvent_STATUSARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["FirstTimestamp"] = gen.PtrOf(gen.AlphaString())
	gens["LastTimestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_GitRepoVolume_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitRepoVolume_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitRepoVolume_STATUSARM, GitRepoVolume_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitRepoVolume_STATUSARM runs a test to see if a specific instance of GitRepoVolume_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGitRepoVolume_STATUSARM(subject GitRepoVolume_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitRepoVolume_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitRepoVolume_STATUSARM instances for property testing - lazily instantiated by
// GitRepoVolume_STATUSARMGenerator()
var gitRepoVolume_STATUSARMGenerator gopter.Gen

// GitRepoVolume_STATUSARMGenerator returns a generator of GitRepoVolume_STATUSARM instances for property testing.
func GitRepoVolume_STATUSARMGenerator() gopter.Gen {
	if gitRepoVolume_STATUSARMGenerator != nil {
		return gitRepoVolume_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitRepoVolume_STATUSARM(generators)
	gitRepoVolume_STATUSARMGenerator = gen.Struct(reflect.TypeOf(GitRepoVolume_STATUSARM{}), generators)

	return gitRepoVolume_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForGitRepoVolume_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitRepoVolume_STATUSARM(gens map[string]gopter.Gen) {
	gens["Directory"] = gen.PtrOf(gen.AlphaString())
	gens["Repository"] = gen.PtrOf(gen.AlphaString())
	gens["Revision"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerPropertiesDefinition_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerPropertiesDefinition_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerPropertiesDefinition_STATUSARM, InitContainerPropertiesDefinition_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerPropertiesDefinition_STATUSARM runs a test to see if a specific instance of InitContainerPropertiesDefinition_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerPropertiesDefinition_STATUSARM(subject InitContainerPropertiesDefinition_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerPropertiesDefinition_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerPropertiesDefinition_STATUSARM instances for property testing - lazily instantiated by
// InitContainerPropertiesDefinition_STATUSARMGenerator()
var initContainerPropertiesDefinition_STATUSARMGenerator gopter.Gen

// InitContainerPropertiesDefinition_STATUSARMGenerator returns a generator of InitContainerPropertiesDefinition_STATUSARM instances for property testing.
// We first initialize initContainerPropertiesDefinition_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerPropertiesDefinition_STATUSARMGenerator() gopter.Gen {
	if initContainerPropertiesDefinition_STATUSARMGenerator != nil {
		return initContainerPropertiesDefinition_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUSARM(generators)
	initContainerPropertiesDefinition_STATUSARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_STATUSARM(generators)
	initContainerPropertiesDefinition_STATUSARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUSARM{}), generators)

	return initContainerPropertiesDefinition_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUSARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
	gens["Image"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_STATUSARM(gens map[string]gopter.Gen) {
	gens["EnvironmentVariables"] = gen.SliceOf(EnvironmentVariable_STATUSARMGenerator())
	gens["InstanceView"] = gen.PtrOf(InitContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator())
	gens["VolumeMounts"] = gen.SliceOf(VolumeMount_STATUSARMGenerator())
}

func Test_LogAnalytics_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LogAnalytics_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLogAnalytics_STATUSARM, LogAnalytics_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLogAnalytics_STATUSARM runs a test to see if a specific instance of LogAnalytics_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLogAnalytics_STATUSARM(subject LogAnalytics_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LogAnalytics_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LogAnalytics_STATUSARM instances for property testing - lazily instantiated by
// LogAnalytics_STATUSARMGenerator()
var logAnalytics_STATUSARMGenerator gopter.Gen

// LogAnalytics_STATUSARMGenerator returns a generator of LogAnalytics_STATUSARM instances for property testing.
func LogAnalytics_STATUSARMGenerator() gopter.Gen {
	if logAnalytics_STATUSARMGenerator != nil {
		return logAnalytics_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogAnalytics_STATUSARM(generators)
	logAnalytics_STATUSARMGenerator = gen.Struct(reflect.TypeOf(LogAnalytics_STATUSARM{}), generators)

	return logAnalytics_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForLogAnalytics_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLogAnalytics_STATUSARM(gens map[string]gopter.Gen) {
	gens["LogType"] = gen.PtrOf(gen.OneConstOf(LogAnalytics_STATUS_LogType_ContainerInsights, LogAnalytics_STATUS_LogType_ContainerInstanceLogs))
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceKey"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_Port_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Port_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPort_STATUSARM, Port_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPort_STATUSARM runs a test to see if a specific instance of Port_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPort_STATUSARM(subject Port_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Port_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Port_STATUSARM instances for property testing - lazily instantiated by Port_STATUSARMGenerator()
var port_STATUSARMGenerator gopter.Gen

// Port_STATUSARMGenerator returns a generator of Port_STATUSARM instances for property testing.
func Port_STATUSARMGenerator() gopter.Gen {
	if port_STATUSARMGenerator != nil {
		return port_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPort_STATUSARM(generators)
	port_STATUSARMGenerator = gen.Struct(reflect.TypeOf(Port_STATUSARM{}), generators)

	return port_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForPort_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPort_STATUSARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(Port_STATUS_Protocol_TCP, Port_STATUS_Protocol_UDP))
}

func Test_ContainerPort_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerPort_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPort_STATUSARM, ContainerPort_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPort_STATUSARM runs a test to see if a specific instance of ContainerPort_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPort_STATUSARM(subject ContainerPort_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerPort_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerPort_STATUSARM instances for property testing - lazily instantiated by
// ContainerPort_STATUSARMGenerator()
var containerPort_STATUSARMGenerator gopter.Gen

// ContainerPort_STATUSARMGenerator returns a generator of ContainerPort_STATUSARM instances for property testing.
func ContainerPort_STATUSARMGenerator() gopter.Gen {
	if containerPort_STATUSARMGenerator != nil {
		return containerPort_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPort_STATUSARM(generators)
	containerPort_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerPort_STATUSARM{}), generators)

	return containerPort_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPort_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPort_STATUSARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(ContainerPort_STATUS_Protocol_TCP, ContainerPort_STATUS_Protocol_UDP))
}

func Test_ContainerProbe_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProbe_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProbe_STATUSARM, ContainerProbe_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProbe_STATUSARM runs a test to see if a specific instance of ContainerProbe_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProbe_STATUSARM(subject ContainerProbe_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProbe_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProbe_STATUSARM instances for property testing - lazily instantiated by
// ContainerProbe_STATUSARMGenerator()
var containerProbe_STATUSARMGenerator gopter.Gen

// ContainerProbe_STATUSARMGenerator returns a generator of ContainerProbe_STATUSARM instances for property testing.
// We first initialize containerProbe_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProbe_STATUSARMGenerator() gopter.Gen {
	if containerProbe_STATUSARMGenerator != nil {
		return containerProbe_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProbe_STATUSARM(generators)
	containerProbe_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerProbe_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProbe_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerProbe_STATUSARM(generators)
	containerProbe_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerProbe_STATUSARM{}), generators)

	return containerProbe_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProbe_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProbe_STATUSARM(gens map[string]gopter.Gen) {
	gens["FailureThreshold"] = gen.PtrOf(gen.Int())
	gens["InitialDelaySeconds"] = gen.PtrOf(gen.Int())
	gens["PeriodSeconds"] = gen.PtrOf(gen.Int())
	gens["SuccessThreshold"] = gen.PtrOf(gen.Int())
	gens["TimeoutSeconds"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForContainerProbe_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProbe_STATUSARM(gens map[string]gopter.Gen) {
	gens["Exec"] = gen.PtrOf(ContainerExec_STATUSARMGenerator())
	gens["HttpGet"] = gen.PtrOf(ContainerHttpGet_STATUSARMGenerator())
}

func Test_ContainerProperties_STATUS_InstanceViewARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_STATUS_InstanceViewARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProperties_STATUS_InstanceViewARM, ContainerProperties_STATUS_InstanceViewARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProperties_STATUS_InstanceViewARM runs a test to see if a specific instance of ContainerProperties_STATUS_InstanceViewARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProperties_STATUS_InstanceViewARM(subject ContainerProperties_STATUS_InstanceViewARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_STATUS_InstanceViewARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_STATUS_InstanceViewARM instances for property testing - lazily instantiated by
// ContainerProperties_STATUS_InstanceViewARMGenerator()
var containerProperties_STATUS_InstanceViewARMGenerator gopter.Gen

// ContainerProperties_STATUS_InstanceViewARMGenerator returns a generator of ContainerProperties_STATUS_InstanceViewARM instances for property testing.
// We first initialize containerProperties_STATUS_InstanceViewARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProperties_STATUS_InstanceViewARMGenerator() gopter.Gen {
	if containerProperties_STATUS_InstanceViewARMGenerator != nil {
		return containerProperties_STATUS_InstanceViewARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_STATUS_InstanceViewARM(generators)
	containerProperties_STATUS_InstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUS_InstanceViewARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProperties_STATUS_InstanceViewARM(generators)
	AddRelatedPropertyGeneratorsForContainerProperties_STATUS_InstanceViewARM(generators)
	containerProperties_STATUS_InstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_STATUS_InstanceViewARM{}), generators)

	return containerProperties_STATUS_InstanceViewARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProperties_STATUS_InstanceViewARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProperties_STATUS_InstanceViewARM(gens map[string]gopter.Gen) {
	gens["RestartCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForContainerProperties_STATUS_InstanceViewARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProperties_STATUS_InstanceViewARM(gens map[string]gopter.Gen) {
	gens["CurrentState"] = gen.PtrOf(ContainerState_STATUSARMGenerator())
	gens["Events"] = gen.SliceOf(Event_STATUSARMGenerator())
	gens["PreviousState"] = gen.PtrOf(ContainerState_STATUSARMGenerator())
}

func Test_EnvironmentVariable_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EnvironmentVariable_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEnvironmentVariable_STATUSARM, EnvironmentVariable_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEnvironmentVariable_STATUSARM runs a test to see if a specific instance of EnvironmentVariable_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEnvironmentVariable_STATUSARM(subject EnvironmentVariable_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EnvironmentVariable_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EnvironmentVariable_STATUSARM instances for property testing - lazily instantiated by
// EnvironmentVariable_STATUSARMGenerator()
var environmentVariable_STATUSARMGenerator gopter.Gen

// EnvironmentVariable_STATUSARMGenerator returns a generator of EnvironmentVariable_STATUSARM instances for property testing.
func EnvironmentVariable_STATUSARMGenerator() gopter.Gen {
	if environmentVariable_STATUSARMGenerator != nil {
		return environmentVariable_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEnvironmentVariable_STATUSARM(generators)
	environmentVariable_STATUSARMGenerator = gen.Struct(reflect.TypeOf(EnvironmentVariable_STATUSARM{}), generators)

	return environmentVariable_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForEnvironmentVariable_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEnvironmentVariable_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["SecureValue"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerPropertiesDefinition_STATUS_InstanceViewARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerPropertiesDefinition_STATUS_InstanceViewARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerPropertiesDefinition_STATUS_InstanceViewARM, InitContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerPropertiesDefinition_STATUS_InstanceViewARM runs a test to see if a specific instance of InitContainerPropertiesDefinition_STATUS_InstanceViewARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerPropertiesDefinition_STATUS_InstanceViewARM(subject InitContainerPropertiesDefinition_STATUS_InstanceViewARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerPropertiesDefinition_STATUS_InstanceViewARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerPropertiesDefinition_STATUS_InstanceViewARM instances for property testing - lazily
// instantiated by InitContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator()
var initContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator gopter.Gen

// InitContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator returns a generator of InitContainerPropertiesDefinition_STATUS_InstanceViewARM instances for property testing.
// We first initialize initContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator() gopter.Gen {
	if initContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator != nil {
		return initContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_InstanceViewARM(generators)
	initContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUS_InstanceViewARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_InstanceViewARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_InstanceViewARM(generators)
	initContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_STATUS_InstanceViewARM{}), generators)

	return initContainerPropertiesDefinition_STATUS_InstanceViewARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_InstanceViewARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_InstanceViewARM(gens map[string]gopter.Gen) {
	gens["RestartCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_InstanceViewARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinition_STATUS_InstanceViewARM(gens map[string]gopter.Gen) {
	gens["CurrentState"] = gen.PtrOf(ContainerState_STATUSARMGenerator())
	gens["Events"] = gen.SliceOf(Event_STATUSARMGenerator())
	gens["PreviousState"] = gen.PtrOf(ContainerState_STATUSARMGenerator())
}

func Test_ResourceRequirements_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceRequirements_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceRequirements_STATUSARM, ResourceRequirements_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceRequirements_STATUSARM runs a test to see if a specific instance of ResourceRequirements_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceRequirements_STATUSARM(subject ResourceRequirements_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceRequirements_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceRequirements_STATUSARM instances for property testing - lazily instantiated by
// ResourceRequirements_STATUSARMGenerator()
var resourceRequirements_STATUSARMGenerator gopter.Gen

// ResourceRequirements_STATUSARMGenerator returns a generator of ResourceRequirements_STATUSARM instances for property testing.
func ResourceRequirements_STATUSARMGenerator() gopter.Gen {
	if resourceRequirements_STATUSARMGenerator != nil {
		return resourceRequirements_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceRequirements_STATUSARM(generators)
	resourceRequirements_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequirements_STATUSARM{}), generators)

	return resourceRequirements_STATUSARMGenerator
}

// AddRelatedPropertyGeneratorsForResourceRequirements_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceRequirements_STATUSARM(gens map[string]gopter.Gen) {
	gens["Limits"] = gen.PtrOf(ResourceLimits_STATUSARMGenerator())
	gens["Requests"] = gen.PtrOf(ResourceRequests_STATUSARMGenerator())
}

func Test_VolumeMount_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VolumeMount_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVolumeMount_STATUSARM, VolumeMount_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVolumeMount_STATUSARM runs a test to see if a specific instance of VolumeMount_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVolumeMount_STATUSARM(subject VolumeMount_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VolumeMount_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VolumeMount_STATUSARM instances for property testing - lazily instantiated by
// VolumeMount_STATUSARMGenerator()
var volumeMount_STATUSARMGenerator gopter.Gen

// VolumeMount_STATUSARMGenerator returns a generator of VolumeMount_STATUSARM instances for property testing.
func VolumeMount_STATUSARMGenerator() gopter.Gen {
	if volumeMount_STATUSARMGenerator != nil {
		return volumeMount_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolumeMount_STATUSARM(generators)
	volumeMount_STATUSARMGenerator = gen.Struct(reflect.TypeOf(VolumeMount_STATUSARM{}), generators)

	return volumeMount_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForVolumeMount_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVolumeMount_STATUSARM(gens map[string]gopter.Gen) {
	gens["MountPath"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ReadOnly"] = gen.PtrOf(gen.Bool())
}

func Test_ContainerExec_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerExec_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerExec_STATUSARM, ContainerExec_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerExec_STATUSARM runs a test to see if a specific instance of ContainerExec_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerExec_STATUSARM(subject ContainerExec_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerExec_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerExec_STATUSARM instances for property testing - lazily instantiated by
// ContainerExec_STATUSARMGenerator()
var containerExec_STATUSARMGenerator gopter.Gen

// ContainerExec_STATUSARMGenerator returns a generator of ContainerExec_STATUSARM instances for property testing.
func ContainerExec_STATUSARMGenerator() gopter.Gen {
	if containerExec_STATUSARMGenerator != nil {
		return containerExec_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerExec_STATUSARM(generators)
	containerExec_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerExec_STATUSARM{}), generators)

	return containerExec_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerExec_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerExec_STATUSARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
}

func Test_ContainerHttpGet_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerHttpGet_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerHttpGet_STATUSARM, ContainerHttpGet_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerHttpGet_STATUSARM runs a test to see if a specific instance of ContainerHttpGet_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerHttpGet_STATUSARM(subject ContainerHttpGet_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerHttpGet_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerHttpGet_STATUSARM instances for property testing - lazily instantiated by
// ContainerHttpGet_STATUSARMGenerator()
var containerHttpGet_STATUSARMGenerator gopter.Gen

// ContainerHttpGet_STATUSARMGenerator returns a generator of ContainerHttpGet_STATUSARM instances for property testing.
// We first initialize containerHttpGet_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerHttpGet_STATUSARMGenerator() gopter.Gen {
	if containerHttpGet_STATUSARMGenerator != nil {
		return containerHttpGet_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerHttpGet_STATUSARM(generators)
	containerHttpGet_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerHttpGet_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerHttpGet_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForContainerHttpGet_STATUSARM(generators)
	containerHttpGet_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerHttpGet_STATUSARM{}), generators)

	return containerHttpGet_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerHttpGet_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerHttpGet_STATUSARM(gens map[string]gopter.Gen) {
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Scheme"] = gen.PtrOf(gen.OneConstOf(ContainerHttpGet_STATUS_Scheme_Http, ContainerHttpGet_STATUS_Scheme_Https))
}

// AddRelatedPropertyGeneratorsForContainerHttpGet_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerHttpGet_STATUSARM(gens map[string]gopter.Gen) {
	gens["HttpHeaders"] = gen.SliceOf(HttpHeader_STATUSARMGenerator())
}

func Test_ContainerState_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerState_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerState_STATUSARM, ContainerState_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerState_STATUSARM runs a test to see if a specific instance of ContainerState_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerState_STATUSARM(subject ContainerState_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerState_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerState_STATUSARM instances for property testing - lazily instantiated by
// ContainerState_STATUSARMGenerator()
var containerState_STATUSARMGenerator gopter.Gen

// ContainerState_STATUSARMGenerator returns a generator of ContainerState_STATUSARM instances for property testing.
func ContainerState_STATUSARMGenerator() gopter.Gen {
	if containerState_STATUSARMGenerator != nil {
		return containerState_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerState_STATUSARM(generators)
	containerState_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ContainerState_STATUSARM{}), generators)

	return containerState_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerState_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerState_STATUSARM(gens map[string]gopter.Gen) {
	gens["DetailStatus"] = gen.PtrOf(gen.AlphaString())
	gens["ExitCode"] = gen.PtrOf(gen.Int())
	gens["FinishTime"] = gen.PtrOf(gen.AlphaString())
	gens["StartTime"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceLimits_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLimits_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLimits_STATUSARM, ResourceLimits_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLimits_STATUSARM runs a test to see if a specific instance of ResourceLimits_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLimits_STATUSARM(subject ResourceLimits_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLimits_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLimits_STATUSARM instances for property testing - lazily instantiated by
// ResourceLimits_STATUSARMGenerator()
var resourceLimits_STATUSARMGenerator gopter.Gen

// ResourceLimits_STATUSARMGenerator returns a generator of ResourceLimits_STATUSARM instances for property testing.
// We first initialize resourceLimits_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceLimits_STATUSARMGenerator() gopter.Gen {
	if resourceLimits_STATUSARMGenerator != nil {
		return resourceLimits_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLimits_STATUSARM(generators)
	resourceLimits_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceLimits_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLimits_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForResourceLimits_STATUSARM(generators)
	resourceLimits_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceLimits_STATUSARM{}), generators)

	return resourceLimits_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceLimits_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceLimits_STATUSARM(gens map[string]gopter.Gen) {
	gens["Cpu"] = gen.PtrOf(gen.Float64())
	gens["MemoryInGB"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForResourceLimits_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceLimits_STATUSARM(gens map[string]gopter.Gen) {
	gens["Gpu"] = gen.PtrOf(GpuResource_STATUSARMGenerator())
}

func Test_ResourceRequests_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceRequests_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceRequests_STATUSARM, ResourceRequests_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceRequests_STATUSARM runs a test to see if a specific instance of ResourceRequests_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceRequests_STATUSARM(subject ResourceRequests_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceRequests_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceRequests_STATUSARM instances for property testing - lazily instantiated by
// ResourceRequests_STATUSARMGenerator()
var resourceRequests_STATUSARMGenerator gopter.Gen

// ResourceRequests_STATUSARMGenerator returns a generator of ResourceRequests_STATUSARM instances for property testing.
// We first initialize resourceRequests_STATUSARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceRequests_STATUSARMGenerator() gopter.Gen {
	if resourceRequests_STATUSARMGenerator != nil {
		return resourceRequests_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceRequests_STATUSARM(generators)
	resourceRequests_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequests_STATUSARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceRequests_STATUSARM(generators)
	AddRelatedPropertyGeneratorsForResourceRequests_STATUSARM(generators)
	resourceRequests_STATUSARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequests_STATUSARM{}), generators)

	return resourceRequests_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceRequests_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceRequests_STATUSARM(gens map[string]gopter.Gen) {
	gens["Cpu"] = gen.PtrOf(gen.Float64())
	gens["MemoryInGB"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForResourceRequests_STATUSARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceRequests_STATUSARM(gens map[string]gopter.Gen) {
	gens["Gpu"] = gen.PtrOf(GpuResource_STATUSARMGenerator())
}

func Test_GpuResource_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GpuResource_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGpuResource_STATUSARM, GpuResource_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGpuResource_STATUSARM runs a test to see if a specific instance of GpuResource_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGpuResource_STATUSARM(subject GpuResource_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GpuResource_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GpuResource_STATUSARM instances for property testing - lazily instantiated by
// GpuResource_STATUSARMGenerator()
var gpuResource_STATUSARMGenerator gopter.Gen

// GpuResource_STATUSARMGenerator returns a generator of GpuResource_STATUSARM instances for property testing.
func GpuResource_STATUSARMGenerator() gopter.Gen {
	if gpuResource_STATUSARMGenerator != nil {
		return gpuResource_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGpuResource_STATUSARM(generators)
	gpuResource_STATUSARMGenerator = gen.Struct(reflect.TypeOf(GpuResource_STATUSARM{}), generators)

	return gpuResource_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForGpuResource_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGpuResource_STATUSARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Sku"] = gen.PtrOf(gen.OneConstOf(GpuResource_STATUS_Sku_K80, GpuResource_STATUS_Sku_P100, GpuResource_STATUS_Sku_V100))
}

func Test_HttpHeader_STATUSARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpHeader_STATUSARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpHeader_STATUSARM, HttpHeader_STATUSARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpHeader_STATUSARM runs a test to see if a specific instance of HttpHeader_STATUSARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpHeader_STATUSARM(subject HttpHeader_STATUSARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpHeader_STATUSARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpHeader_STATUSARM instances for property testing - lazily instantiated by
// HttpHeader_STATUSARMGenerator()
var httpHeader_STATUSARMGenerator gopter.Gen

// HttpHeader_STATUSARMGenerator returns a generator of HttpHeader_STATUSARM instances for property testing.
func HttpHeader_STATUSARMGenerator() gopter.Gen {
	if httpHeader_STATUSARMGenerator != nil {
		return httpHeader_STATUSARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpHeader_STATUSARM(generators)
	httpHeader_STATUSARMGenerator = gen.Struct(reflect.TypeOf(HttpHeader_STATUSARM{}), generators)

	return httpHeader_STATUSARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpHeader_STATUSARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpHeader_STATUSARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
