// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211001

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ContainerGroup_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupStatusARM, ContainerGroupStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupStatusARM runs a test to see if a specific instance of ContainerGroup_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupStatusARM(subject ContainerGroup_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_StatusARM instances for property testing - lazily instantiated by
// ContainerGroupStatusARMGenerator()
var containerGroupStatusARMGenerator gopter.Gen

// ContainerGroupStatusARMGenerator returns a generator of ContainerGroup_StatusARM instances for property testing.
// We first initialize containerGroupStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupStatusARMGenerator() gopter.Gen {
	if containerGroupStatusARMGenerator != nil {
		return containerGroupStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupStatusARM(generators)
	containerGroupStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupStatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupStatusARM(generators)
	containerGroupStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_StatusARM{}), generators)

	return containerGroupStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Zones"] = gen.SliceOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerGroupStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupStatusARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ContainerGroupIdentityStatusARMGenerator())
	gens["Properties"] = gen.PtrOf(ContainerGroupStatusPropertiesARMGenerator())
}

func Test_ContainerGroupIdentity_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupIdentity_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupIdentityStatusARM, ContainerGroupIdentityStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupIdentityStatusARM runs a test to see if a specific instance of ContainerGroupIdentity_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupIdentityStatusARM(subject ContainerGroupIdentity_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupIdentity_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupIdentity_StatusARM instances for property testing - lazily instantiated by
// ContainerGroupIdentityStatusARMGenerator()
var containerGroupIdentityStatusARMGenerator gopter.Gen

// ContainerGroupIdentityStatusARMGenerator returns a generator of ContainerGroupIdentity_StatusARM instances for property testing.
// We first initialize containerGroupIdentityStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupIdentityStatusARMGenerator() gopter.Gen {
	if containerGroupIdentityStatusARMGenerator != nil {
		return containerGroupIdentityStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentityStatusARM(generators)
	containerGroupIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentityStatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupIdentityStatusARM(generators)
	containerGroupIdentityStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_StatusARM{}), generators)

	return containerGroupIdentityStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupIdentityStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ContainerGroupIdentityStatusTypeNone,
		ContainerGroupIdentityStatusTypeSystemAssigned,
		ContainerGroupIdentityStatusTypeSystemAssignedUserAssigned,
		ContainerGroupIdentityStatusTypeUserAssigned))
}

// AddRelatedPropertyGeneratorsForContainerGroupIdentityStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupIdentityStatusARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), ContainerGroupIdentityStatusUserAssignedIdentitiesARMGenerator())
}

func Test_ContainerGroup_Status_PropertiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_Status_PropertiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupStatusPropertiesARM, ContainerGroupStatusPropertiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupStatusPropertiesARM runs a test to see if a specific instance of ContainerGroup_Status_PropertiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupStatusPropertiesARM(subject ContainerGroup_Status_PropertiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_Status_PropertiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_Status_PropertiesARM instances for property testing - lazily instantiated by
// ContainerGroupStatusPropertiesARMGenerator()
var containerGroupStatusPropertiesARMGenerator gopter.Gen

// ContainerGroupStatusPropertiesARMGenerator returns a generator of ContainerGroup_Status_PropertiesARM instances for property testing.
// We first initialize containerGroupStatusPropertiesARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupStatusPropertiesARMGenerator() gopter.Gen {
	if containerGroupStatusPropertiesARMGenerator != nil {
		return containerGroupStatusPropertiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupStatusPropertiesARM(generators)
	containerGroupStatusPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_Status_PropertiesARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupStatusPropertiesARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupStatusPropertiesARM(generators)
	containerGroupStatusPropertiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_Status_PropertiesARM{}), generators)

	return containerGroupStatusPropertiesARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupStatusPropertiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupStatusPropertiesARM(gens map[string]gopter.Gen) {
	gens["OsType"] = gen.PtrOf(gen.OneConstOf(ContainerGroupStatusPropertiesOsTypeLinux, ContainerGroupStatusPropertiesOsTypeWindows))
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["RestartPolicy"] = gen.PtrOf(gen.OneConstOf(ContainerGroupStatusPropertiesRestartPolicyAlways, ContainerGroupStatusPropertiesRestartPolicyNever, ContainerGroupStatusPropertiesRestartPolicyOnFailure))
	gens["Sku"] = gen.PtrOf(gen.OneConstOf(ContainerGroupSku_StatusDedicated, ContainerGroupSku_StatusStandard))
}

// AddRelatedPropertyGeneratorsForContainerGroupStatusPropertiesARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupStatusPropertiesARM(gens map[string]gopter.Gen) {
	gens["Containers"] = gen.SliceOf(ContainerStatusARMGenerator())
	gens["Diagnostics"] = gen.PtrOf(ContainerGroupDiagnosticsStatusARMGenerator())
	gens["DnsConfig"] = gen.PtrOf(DnsConfigurationStatusARMGenerator())
	gens["EncryptionProperties"] = gen.PtrOf(EncryptionPropertiesStatusARMGenerator())
	gens["ImageRegistryCredentials"] = gen.SliceOf(ImageRegistryCredentialStatusARMGenerator())
	gens["InitContainers"] = gen.SliceOf(InitContainerDefinitionStatusARMGenerator())
	gens["InstanceView"] = gen.PtrOf(ContainerGroupStatusPropertiesInstanceViewARMGenerator())
	gens["IpAddress"] = gen.PtrOf(IpAddressStatusARMGenerator())
	gens["SubnetIds"] = gen.SliceOf(ContainerGroupSubnetIdStatusARMGenerator())
	gens["Volumes"] = gen.SliceOf(VolumeStatusARMGenerator())
}

func Test_ContainerGroupDiagnostics_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupDiagnostics_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupDiagnosticsStatusARM, ContainerGroupDiagnosticsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupDiagnosticsStatusARM runs a test to see if a specific instance of ContainerGroupDiagnostics_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupDiagnosticsStatusARM(subject ContainerGroupDiagnostics_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupDiagnostics_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupDiagnostics_StatusARM instances for property testing - lazily instantiated by
// ContainerGroupDiagnosticsStatusARMGenerator()
var containerGroupDiagnosticsStatusARMGenerator gopter.Gen

// ContainerGroupDiagnosticsStatusARMGenerator returns a generator of ContainerGroupDiagnostics_StatusARM instances for property testing.
func ContainerGroupDiagnosticsStatusARMGenerator() gopter.Gen {
	if containerGroupDiagnosticsStatusARMGenerator != nil {
		return containerGroupDiagnosticsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForContainerGroupDiagnosticsStatusARM(generators)
	containerGroupDiagnosticsStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupDiagnostics_StatusARM{}), generators)

	return containerGroupDiagnosticsStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForContainerGroupDiagnosticsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupDiagnosticsStatusARM(gens map[string]gopter.Gen) {
	gens["LogAnalytics"] = gen.PtrOf(LogAnalyticsStatusARMGenerator())
}

func Test_ContainerGroupIdentity_Status_UserAssignedIdentitiesARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupIdentity_Status_UserAssignedIdentitiesARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupIdentityStatusUserAssignedIdentitiesARM, ContainerGroupIdentityStatusUserAssignedIdentitiesARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupIdentityStatusUserAssignedIdentitiesARM runs a test to see if a specific instance of ContainerGroupIdentity_Status_UserAssignedIdentitiesARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupIdentityStatusUserAssignedIdentitiesARM(subject ContainerGroupIdentity_Status_UserAssignedIdentitiesARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupIdentity_Status_UserAssignedIdentitiesARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupIdentity_Status_UserAssignedIdentitiesARM instances for property testing - lazily
// instantiated by ContainerGroupIdentityStatusUserAssignedIdentitiesARMGenerator()
var containerGroupIdentityStatusUserAssignedIdentitiesARMGenerator gopter.Gen

// ContainerGroupIdentityStatusUserAssignedIdentitiesARMGenerator returns a generator of ContainerGroupIdentity_Status_UserAssignedIdentitiesARM instances for property testing.
func ContainerGroupIdentityStatusUserAssignedIdentitiesARMGenerator() gopter.Gen {
	if containerGroupIdentityStatusUserAssignedIdentitiesARMGenerator != nil {
		return containerGroupIdentityStatusUserAssignedIdentitiesARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupIdentityStatusUserAssignedIdentitiesARM(generators)
	containerGroupIdentityStatusUserAssignedIdentitiesARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupIdentity_Status_UserAssignedIdentitiesARM{}), generators)

	return containerGroupIdentityStatusUserAssignedIdentitiesARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupIdentityStatusUserAssignedIdentitiesARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupIdentityStatusUserAssignedIdentitiesARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerGroupSubnetId_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroupSubnetId_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupSubnetIdStatusARM, ContainerGroupSubnetIdStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupSubnetIdStatusARM runs a test to see if a specific instance of ContainerGroupSubnetId_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupSubnetIdStatusARM(subject ContainerGroupSubnetId_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroupSubnetId_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroupSubnetId_StatusARM instances for property testing - lazily instantiated by
// ContainerGroupSubnetIdStatusARMGenerator()
var containerGroupSubnetIdStatusARMGenerator gopter.Gen

// ContainerGroupSubnetIdStatusARMGenerator returns a generator of ContainerGroupSubnetId_StatusARM instances for property testing.
func ContainerGroupSubnetIdStatusARMGenerator() gopter.Gen {
	if containerGroupSubnetIdStatusARMGenerator != nil {
		return containerGroupSubnetIdStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupSubnetIdStatusARM(generators)
	containerGroupSubnetIdStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroupSubnetId_StatusARM{}), generators)

	return containerGroupSubnetIdStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupSubnetIdStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupSubnetIdStatusARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerGroup_Status_Properties_InstanceViewARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerGroup_Status_Properties_InstanceViewARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerGroupStatusPropertiesInstanceViewARM, ContainerGroupStatusPropertiesInstanceViewARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerGroupStatusPropertiesInstanceViewARM runs a test to see if a specific instance of ContainerGroup_Status_Properties_InstanceViewARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerGroupStatusPropertiesInstanceViewARM(subject ContainerGroup_Status_Properties_InstanceViewARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerGroup_Status_Properties_InstanceViewARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerGroup_Status_Properties_InstanceViewARM instances for property testing - lazily instantiated by
// ContainerGroupStatusPropertiesInstanceViewARMGenerator()
var containerGroupStatusPropertiesInstanceViewARMGenerator gopter.Gen

// ContainerGroupStatusPropertiesInstanceViewARMGenerator returns a generator of ContainerGroup_Status_Properties_InstanceViewARM instances for property testing.
// We first initialize containerGroupStatusPropertiesInstanceViewARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerGroupStatusPropertiesInstanceViewARMGenerator() gopter.Gen {
	if containerGroupStatusPropertiesInstanceViewARMGenerator != nil {
		return containerGroupStatusPropertiesInstanceViewARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupStatusPropertiesInstanceViewARM(generators)
	containerGroupStatusPropertiesInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_Status_Properties_InstanceViewARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerGroupStatusPropertiesInstanceViewARM(generators)
	AddRelatedPropertyGeneratorsForContainerGroupStatusPropertiesInstanceViewARM(generators)
	containerGroupStatusPropertiesInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerGroup_Status_Properties_InstanceViewARM{}), generators)

	return containerGroupStatusPropertiesInstanceViewARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerGroupStatusPropertiesInstanceViewARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerGroupStatusPropertiesInstanceViewARM(gens map[string]gopter.Gen) {
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerGroupStatusPropertiesInstanceViewARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerGroupStatusPropertiesInstanceViewARM(gens map[string]gopter.Gen) {
	gens["Events"] = gen.SliceOf(EventStatusARMGenerator())
}

func Test_Container_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Container_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerStatusARM, ContainerStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerStatusARM runs a test to see if a specific instance of Container_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerStatusARM(subject Container_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Container_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Container_StatusARM instances for property testing - lazily instantiated by ContainerStatusARMGenerator()
var containerStatusARMGenerator gopter.Gen

// ContainerStatusARMGenerator returns a generator of Container_StatusARM instances for property testing.
// We first initialize containerStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerStatusARMGenerator() gopter.Gen {
	if containerStatusARMGenerator != nil {
		return containerStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerStatusARM(generators)
	containerStatusARMGenerator = gen.Struct(reflect.TypeOf(Container_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerStatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerStatusARM(generators)
	containerStatusARMGenerator = gen.Struct(reflect.TypeOf(Container_StatusARM{}), generators)

	return containerStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ContainerPropertiesStatusARMGenerator())
}

func Test_DnsConfiguration_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DnsConfiguration_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDnsConfigurationStatusARM, DnsConfigurationStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDnsConfigurationStatusARM runs a test to see if a specific instance of DnsConfiguration_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForDnsConfigurationStatusARM(subject DnsConfiguration_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DnsConfiguration_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DnsConfiguration_StatusARM instances for property testing - lazily instantiated by
// DnsConfigurationStatusARMGenerator()
var dnsConfigurationStatusARMGenerator gopter.Gen

// DnsConfigurationStatusARMGenerator returns a generator of DnsConfiguration_StatusARM instances for property testing.
func DnsConfigurationStatusARMGenerator() gopter.Gen {
	if dnsConfigurationStatusARMGenerator != nil {
		return dnsConfigurationStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDnsConfigurationStatusARM(generators)
	dnsConfigurationStatusARMGenerator = gen.Struct(reflect.TypeOf(DnsConfiguration_StatusARM{}), generators)

	return dnsConfigurationStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForDnsConfigurationStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDnsConfigurationStatusARM(gens map[string]gopter.Gen) {
	gens["NameServers"] = gen.SliceOf(gen.AlphaString())
	gens["Options"] = gen.PtrOf(gen.AlphaString())
	gens["SearchDomains"] = gen.PtrOf(gen.AlphaString())
}

func Test_EncryptionProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EncryptionProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEncryptionPropertiesStatusARM, EncryptionPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEncryptionPropertiesStatusARM runs a test to see if a specific instance of EncryptionProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEncryptionPropertiesStatusARM(subject EncryptionProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EncryptionProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EncryptionProperties_StatusARM instances for property testing - lazily instantiated by
// EncryptionPropertiesStatusARMGenerator()
var encryptionPropertiesStatusARMGenerator gopter.Gen

// EncryptionPropertiesStatusARMGenerator returns a generator of EncryptionProperties_StatusARM instances for property testing.
func EncryptionPropertiesStatusARMGenerator() gopter.Gen {
	if encryptionPropertiesStatusARMGenerator != nil {
		return encryptionPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEncryptionPropertiesStatusARM(generators)
	encryptionPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(EncryptionProperties_StatusARM{}), generators)

	return encryptionPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForEncryptionPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEncryptionPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["KeyName"] = gen.PtrOf(gen.AlphaString())
	gens["KeyVersion"] = gen.PtrOf(gen.AlphaString())
	gens["VaultBaseUrl"] = gen.PtrOf(gen.AlphaString())
}

func Test_ImageRegistryCredential_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ImageRegistryCredential_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForImageRegistryCredentialStatusARM, ImageRegistryCredentialStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForImageRegistryCredentialStatusARM runs a test to see if a specific instance of ImageRegistryCredential_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForImageRegistryCredentialStatusARM(subject ImageRegistryCredential_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ImageRegistryCredential_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ImageRegistryCredential_StatusARM instances for property testing - lazily instantiated by
// ImageRegistryCredentialStatusARMGenerator()
var imageRegistryCredentialStatusARMGenerator gopter.Gen

// ImageRegistryCredentialStatusARMGenerator returns a generator of ImageRegistryCredential_StatusARM instances for property testing.
func ImageRegistryCredentialStatusARMGenerator() gopter.Gen {
	if imageRegistryCredentialStatusARMGenerator != nil {
		return imageRegistryCredentialStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForImageRegistryCredentialStatusARM(generators)
	imageRegistryCredentialStatusARMGenerator = gen.Struct(reflect.TypeOf(ImageRegistryCredential_StatusARM{}), generators)

	return imageRegistryCredentialStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForImageRegistryCredentialStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForImageRegistryCredentialStatusARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(gen.AlphaString())
	gens["IdentityUrl"] = gen.PtrOf(gen.AlphaString())
	gens["Password"] = gen.PtrOf(gen.AlphaString())
	gens["Server"] = gen.PtrOf(gen.AlphaString())
	gens["Username"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerDefinition_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerDefinition_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerDefinitionStatusARM, InitContainerDefinitionStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerDefinitionStatusARM runs a test to see if a specific instance of InitContainerDefinition_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerDefinitionStatusARM(subject InitContainerDefinition_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerDefinition_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerDefinition_StatusARM instances for property testing - lazily instantiated by
// InitContainerDefinitionStatusARMGenerator()
var initContainerDefinitionStatusARMGenerator gopter.Gen

// InitContainerDefinitionStatusARMGenerator returns a generator of InitContainerDefinition_StatusARM instances for property testing.
// We first initialize initContainerDefinitionStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerDefinitionStatusARMGenerator() gopter.Gen {
	if initContainerDefinitionStatusARMGenerator != nil {
		return initContainerDefinitionStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerDefinitionStatusARM(generators)
	initContainerDefinitionStatusARMGenerator = gen.Struct(reflect.TypeOf(InitContainerDefinition_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerDefinitionStatusARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerDefinitionStatusARM(generators)
	initContainerDefinitionStatusARMGenerator = gen.Struct(reflect.TypeOf(InitContainerDefinition_StatusARM{}), generators)

	return initContainerDefinitionStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerDefinitionStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerDefinitionStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInitContainerDefinitionStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerDefinitionStatusARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(InitContainerPropertiesDefinitionStatusARMGenerator())
}

func Test_IpAddress_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of IpAddress_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForIpAddressStatusARM, IpAddressStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForIpAddressStatusARM runs a test to see if a specific instance of IpAddress_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForIpAddressStatusARM(subject IpAddress_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual IpAddress_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of IpAddress_StatusARM instances for property testing - lazily instantiated by IpAddressStatusARMGenerator()
var ipAddressStatusARMGenerator gopter.Gen

// IpAddressStatusARMGenerator returns a generator of IpAddress_StatusARM instances for property testing.
// We first initialize ipAddressStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func IpAddressStatusARMGenerator() gopter.Gen {
	if ipAddressStatusARMGenerator != nil {
		return ipAddressStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddressStatusARM(generators)
	ipAddressStatusARMGenerator = gen.Struct(reflect.TypeOf(IpAddress_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForIpAddressStatusARM(generators)
	AddRelatedPropertyGeneratorsForIpAddressStatusARM(generators)
	ipAddressStatusARMGenerator = gen.Struct(reflect.TypeOf(IpAddress_StatusARM{}), generators)

	return ipAddressStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForIpAddressStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForIpAddressStatusARM(gens map[string]gopter.Gen) {
	gens["DnsNameLabel"] = gen.PtrOf(gen.AlphaString())
	gens["DnsNameLabelReusePolicy"] = gen.PtrOf(gen.OneConstOf(
		IpAddressStatusDnsNameLabelReusePolicyNoreuse,
		IpAddressStatusDnsNameLabelReusePolicyResourceGroupReuse,
		IpAddressStatusDnsNameLabelReusePolicySubscriptionReuse,
		IpAddressStatusDnsNameLabelReusePolicyTenantReuse,
		IpAddressStatusDnsNameLabelReusePolicyUnsecure))
	gens["Fqdn"] = gen.PtrOf(gen.AlphaString())
	gens["Ip"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(IpAddressStatusTypePrivate, IpAddressStatusTypePublic))
}

// AddRelatedPropertyGeneratorsForIpAddressStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForIpAddressStatusARM(gens map[string]gopter.Gen) {
	gens["Ports"] = gen.SliceOf(PortStatusARMGenerator())
}

func Test_Volume_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Volume_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVolumeStatusARM, VolumeStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVolumeStatusARM runs a test to see if a specific instance of Volume_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVolumeStatusARM(subject Volume_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Volume_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Volume_StatusARM instances for property testing - lazily instantiated by VolumeStatusARMGenerator()
var volumeStatusARMGenerator gopter.Gen

// VolumeStatusARMGenerator returns a generator of Volume_StatusARM instances for property testing.
// We first initialize volumeStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func VolumeStatusARMGenerator() gopter.Gen {
	if volumeStatusARMGenerator != nil {
		return volumeStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolumeStatusARM(generators)
	volumeStatusARMGenerator = gen.Struct(reflect.TypeOf(Volume_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolumeStatusARM(generators)
	AddRelatedPropertyGeneratorsForVolumeStatusARM(generators)
	volumeStatusARMGenerator = gen.Struct(reflect.TypeOf(Volume_StatusARM{}), generators)

	return volumeStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVolumeStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVolumeStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Secret"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForVolumeStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForVolumeStatusARM(gens map[string]gopter.Gen) {
	gens["AzureFile"] = gen.PtrOf(AzureFileVolumeStatusARMGenerator())
	gens["GitRepo"] = gen.PtrOf(GitRepoVolumeStatusARMGenerator())
}

func Test_AzureFileVolume_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of AzureFileVolume_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForAzureFileVolumeStatusARM, AzureFileVolumeStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForAzureFileVolumeStatusARM runs a test to see if a specific instance of AzureFileVolume_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForAzureFileVolumeStatusARM(subject AzureFileVolume_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual AzureFileVolume_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of AzureFileVolume_StatusARM instances for property testing - lazily instantiated by
// AzureFileVolumeStatusARMGenerator()
var azureFileVolumeStatusARMGenerator gopter.Gen

// AzureFileVolumeStatusARMGenerator returns a generator of AzureFileVolume_StatusARM instances for property testing.
func AzureFileVolumeStatusARMGenerator() gopter.Gen {
	if azureFileVolumeStatusARMGenerator != nil {
		return azureFileVolumeStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForAzureFileVolumeStatusARM(generators)
	azureFileVolumeStatusARMGenerator = gen.Struct(reflect.TypeOf(AzureFileVolume_StatusARM{}), generators)

	return azureFileVolumeStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForAzureFileVolumeStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForAzureFileVolumeStatusARM(gens map[string]gopter.Gen) {
	gens["ReadOnly"] = gen.PtrOf(gen.Bool())
	gens["ShareName"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountName"] = gen.PtrOf(gen.AlphaString())
}

func Test_ContainerProperties_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPropertiesStatusARM, ContainerPropertiesStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPropertiesStatusARM runs a test to see if a specific instance of ContainerProperties_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPropertiesStatusARM(subject ContainerProperties_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_StatusARM instances for property testing - lazily instantiated by
// ContainerPropertiesStatusARMGenerator()
var containerPropertiesStatusARMGenerator gopter.Gen

// ContainerPropertiesStatusARMGenerator returns a generator of ContainerProperties_StatusARM instances for property testing.
// We first initialize containerPropertiesStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerPropertiesStatusARMGenerator() gopter.Gen {
	if containerPropertiesStatusARMGenerator != nil {
		return containerPropertiesStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesStatusARM(generators)
	containerPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesStatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerPropertiesStatusARM(generators)
	containerPropertiesStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_StatusARM{}), generators)

	return containerPropertiesStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPropertiesStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
	gens["Image"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForContainerPropertiesStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerPropertiesStatusARM(gens map[string]gopter.Gen) {
	gens["EnvironmentVariables"] = gen.SliceOf(EnvironmentVariableStatusARMGenerator())
	gens["InstanceView"] = gen.PtrOf(ContainerPropertiesStatusInstanceViewARMGenerator())
	gens["LivenessProbe"] = gen.PtrOf(ContainerProbeStatusARMGenerator())
	gens["Ports"] = gen.SliceOf(ContainerPortStatusARMGenerator())
	gens["ReadinessProbe"] = gen.PtrOf(ContainerProbeStatusARMGenerator())
	gens["Resources"] = gen.PtrOf(ResourceRequirementsStatusARMGenerator())
	gens["VolumeMounts"] = gen.SliceOf(VolumeMountStatusARMGenerator())
}

func Test_Event_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Event_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEventStatusARM, EventStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEventStatusARM runs a test to see if a specific instance of Event_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEventStatusARM(subject Event_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Event_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Event_StatusARM instances for property testing - lazily instantiated by EventStatusARMGenerator()
var eventStatusARMGenerator gopter.Gen

// EventStatusARMGenerator returns a generator of Event_StatusARM instances for property testing.
func EventStatusARMGenerator() gopter.Gen {
	if eventStatusARMGenerator != nil {
		return eventStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEventStatusARM(generators)
	eventStatusARMGenerator = gen.Struct(reflect.TypeOf(Event_StatusARM{}), generators)

	return eventStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForEventStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEventStatusARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["FirstTimestamp"] = gen.PtrOf(gen.AlphaString())
	gens["LastTimestamp"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_GitRepoVolume_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GitRepoVolume_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGitRepoVolumeStatusARM, GitRepoVolumeStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGitRepoVolumeStatusARM runs a test to see if a specific instance of GitRepoVolume_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGitRepoVolumeStatusARM(subject GitRepoVolume_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GitRepoVolume_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GitRepoVolume_StatusARM instances for property testing - lazily instantiated by
// GitRepoVolumeStatusARMGenerator()
var gitRepoVolumeStatusARMGenerator gopter.Gen

// GitRepoVolumeStatusARMGenerator returns a generator of GitRepoVolume_StatusARM instances for property testing.
func GitRepoVolumeStatusARMGenerator() gopter.Gen {
	if gitRepoVolumeStatusARMGenerator != nil {
		return gitRepoVolumeStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGitRepoVolumeStatusARM(generators)
	gitRepoVolumeStatusARMGenerator = gen.Struct(reflect.TypeOf(GitRepoVolume_StatusARM{}), generators)

	return gitRepoVolumeStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForGitRepoVolumeStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGitRepoVolumeStatusARM(gens map[string]gopter.Gen) {
	gens["Directory"] = gen.PtrOf(gen.AlphaString())
	gens["Repository"] = gen.PtrOf(gen.AlphaString())
	gens["Revision"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerPropertiesDefinition_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerPropertiesDefinition_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerPropertiesDefinitionStatusARM, InitContainerPropertiesDefinitionStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerPropertiesDefinitionStatusARM runs a test to see if a specific instance of InitContainerPropertiesDefinition_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerPropertiesDefinitionStatusARM(subject InitContainerPropertiesDefinition_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerPropertiesDefinition_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerPropertiesDefinition_StatusARM instances for property testing - lazily instantiated by
// InitContainerPropertiesDefinitionStatusARMGenerator()
var initContainerPropertiesDefinitionStatusARMGenerator gopter.Gen

// InitContainerPropertiesDefinitionStatusARMGenerator returns a generator of InitContainerPropertiesDefinition_StatusARM instances for property testing.
// We first initialize initContainerPropertiesDefinitionStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerPropertiesDefinitionStatusARMGenerator() gopter.Gen {
	if initContainerPropertiesDefinitionStatusARMGenerator != nil {
		return initContainerPropertiesDefinitionStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionStatusARM(generators)
	initContainerPropertiesDefinitionStatusARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionStatusARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionStatusARM(generators)
	initContainerPropertiesDefinitionStatusARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_StatusARM{}), generators)

	return initContainerPropertiesDefinitionStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionStatusARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
	gens["Image"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionStatusARM(gens map[string]gopter.Gen) {
	gens["EnvironmentVariables"] = gen.SliceOf(EnvironmentVariableStatusARMGenerator())
	gens["InstanceView"] = gen.PtrOf(InitContainerPropertiesDefinitionStatusInstanceViewARMGenerator())
	gens["VolumeMounts"] = gen.SliceOf(VolumeMountStatusARMGenerator())
}

func Test_LogAnalytics_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LogAnalytics_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLogAnalyticsStatusARM, LogAnalyticsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLogAnalyticsStatusARM runs a test to see if a specific instance of LogAnalytics_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLogAnalyticsStatusARM(subject LogAnalytics_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LogAnalytics_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LogAnalytics_StatusARM instances for property testing - lazily instantiated by
// LogAnalyticsStatusARMGenerator()
var logAnalyticsStatusARMGenerator gopter.Gen

// LogAnalyticsStatusARMGenerator returns a generator of LogAnalytics_StatusARM instances for property testing.
func LogAnalyticsStatusARMGenerator() gopter.Gen {
	if logAnalyticsStatusARMGenerator != nil {
		return logAnalyticsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLogAnalyticsStatusARM(generators)
	logAnalyticsStatusARMGenerator = gen.Struct(reflect.TypeOf(LogAnalytics_StatusARM{}), generators)

	return logAnalyticsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForLogAnalyticsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLogAnalyticsStatusARM(gens map[string]gopter.Gen) {
	gens["LogType"] = gen.PtrOf(gen.OneConstOf(LogAnalyticsStatusLogTypeContainerInsights, LogAnalyticsStatusLogTypeContainerInstanceLogs))
	gens["Metadata"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["WorkspaceId"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceKey"] = gen.PtrOf(gen.AlphaString())
	gens["WorkspaceResourceId"] = gen.PtrOf(gen.AlphaString())
}

func Test_Port_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Port_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForPortStatusARM, PortStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForPortStatusARM runs a test to see if a specific instance of Port_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForPortStatusARM(subject Port_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Port_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Port_StatusARM instances for property testing - lazily instantiated by PortStatusARMGenerator()
var portStatusARMGenerator gopter.Gen

// PortStatusARMGenerator returns a generator of Port_StatusARM instances for property testing.
func PortStatusARMGenerator() gopter.Gen {
	if portStatusARMGenerator != nil {
		return portStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForPortStatusARM(generators)
	portStatusARMGenerator = gen.Struct(reflect.TypeOf(Port_StatusARM{}), generators)

	return portStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForPortStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForPortStatusARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(PortStatusProtocolTCP, PortStatusProtocolUDP))
}

func Test_ContainerPort_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerPort_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPortStatusARM, ContainerPortStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPortStatusARM runs a test to see if a specific instance of ContainerPort_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPortStatusARM(subject ContainerPort_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerPort_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerPort_StatusARM instances for property testing - lazily instantiated by
// ContainerPortStatusARMGenerator()
var containerPortStatusARMGenerator gopter.Gen

// ContainerPortStatusARMGenerator returns a generator of ContainerPort_StatusARM instances for property testing.
func ContainerPortStatusARMGenerator() gopter.Gen {
	if containerPortStatusARMGenerator != nil {
		return containerPortStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPortStatusARM(generators)
	containerPortStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerPort_StatusARM{}), generators)

	return containerPortStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPortStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPortStatusARM(gens map[string]gopter.Gen) {
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Protocol"] = gen.PtrOf(gen.OneConstOf(ContainerPortStatusProtocolTCP, ContainerPortStatusProtocolUDP))
}

func Test_ContainerProbe_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProbe_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerProbeStatusARM, ContainerProbeStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerProbeStatusARM runs a test to see if a specific instance of ContainerProbe_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerProbeStatusARM(subject ContainerProbe_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProbe_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProbe_StatusARM instances for property testing - lazily instantiated by
// ContainerProbeStatusARMGenerator()
var containerProbeStatusARMGenerator gopter.Gen

// ContainerProbeStatusARMGenerator returns a generator of ContainerProbe_StatusARM instances for property testing.
// We first initialize containerProbeStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerProbeStatusARMGenerator() gopter.Gen {
	if containerProbeStatusARMGenerator != nil {
		return containerProbeStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProbeStatusARM(generators)
	containerProbeStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerProbe_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerProbeStatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerProbeStatusARM(generators)
	containerProbeStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerProbe_StatusARM{}), generators)

	return containerProbeStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerProbeStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerProbeStatusARM(gens map[string]gopter.Gen) {
	gens["FailureThreshold"] = gen.PtrOf(gen.Int())
	gens["InitialDelaySeconds"] = gen.PtrOf(gen.Int())
	gens["PeriodSeconds"] = gen.PtrOf(gen.Int())
	gens["SuccessThreshold"] = gen.PtrOf(gen.Int())
	gens["TimeoutSeconds"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForContainerProbeStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerProbeStatusARM(gens map[string]gopter.Gen) {
	gens["Exec"] = gen.PtrOf(ContainerExecStatusARMGenerator())
	gens["HttpGet"] = gen.PtrOf(ContainerHttpGetStatusARMGenerator())
}

func Test_ContainerProperties_Status_InstanceViewARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerProperties_Status_InstanceViewARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerPropertiesStatusInstanceViewARM, ContainerPropertiesStatusInstanceViewARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerPropertiesStatusInstanceViewARM runs a test to see if a specific instance of ContainerProperties_Status_InstanceViewARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerPropertiesStatusInstanceViewARM(subject ContainerProperties_Status_InstanceViewARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerProperties_Status_InstanceViewARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerProperties_Status_InstanceViewARM instances for property testing - lazily instantiated by
// ContainerPropertiesStatusInstanceViewARMGenerator()
var containerPropertiesStatusInstanceViewARMGenerator gopter.Gen

// ContainerPropertiesStatusInstanceViewARMGenerator returns a generator of ContainerProperties_Status_InstanceViewARM instances for property testing.
// We first initialize containerPropertiesStatusInstanceViewARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerPropertiesStatusInstanceViewARMGenerator() gopter.Gen {
	if containerPropertiesStatusInstanceViewARMGenerator != nil {
		return containerPropertiesStatusInstanceViewARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesStatusInstanceViewARM(generators)
	containerPropertiesStatusInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_Status_InstanceViewARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerPropertiesStatusInstanceViewARM(generators)
	AddRelatedPropertyGeneratorsForContainerPropertiesStatusInstanceViewARM(generators)
	containerPropertiesStatusInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(ContainerProperties_Status_InstanceViewARM{}), generators)

	return containerPropertiesStatusInstanceViewARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerPropertiesStatusInstanceViewARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerPropertiesStatusInstanceViewARM(gens map[string]gopter.Gen) {
	gens["RestartCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForContainerPropertiesStatusInstanceViewARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerPropertiesStatusInstanceViewARM(gens map[string]gopter.Gen) {
	gens["CurrentState"] = gen.PtrOf(ContainerStateStatusARMGenerator())
	gens["Events"] = gen.SliceOf(EventStatusARMGenerator())
	gens["PreviousState"] = gen.PtrOf(ContainerStateStatusARMGenerator())
}

func Test_EnvironmentVariable_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of EnvironmentVariable_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForEnvironmentVariableStatusARM, EnvironmentVariableStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForEnvironmentVariableStatusARM runs a test to see if a specific instance of EnvironmentVariable_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForEnvironmentVariableStatusARM(subject EnvironmentVariable_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual EnvironmentVariable_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of EnvironmentVariable_StatusARM instances for property testing - lazily instantiated by
// EnvironmentVariableStatusARMGenerator()
var environmentVariableStatusARMGenerator gopter.Gen

// EnvironmentVariableStatusARMGenerator returns a generator of EnvironmentVariable_StatusARM instances for property testing.
func EnvironmentVariableStatusARMGenerator() gopter.Gen {
	if environmentVariableStatusARMGenerator != nil {
		return environmentVariableStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForEnvironmentVariableStatusARM(generators)
	environmentVariableStatusARMGenerator = gen.Struct(reflect.TypeOf(EnvironmentVariable_StatusARM{}), generators)

	return environmentVariableStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForEnvironmentVariableStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForEnvironmentVariableStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["SecureValue"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_InitContainerPropertiesDefinition_Status_InstanceViewARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of InitContainerPropertiesDefinition_Status_InstanceViewARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForInitContainerPropertiesDefinitionStatusInstanceViewARM, InitContainerPropertiesDefinitionStatusInstanceViewARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForInitContainerPropertiesDefinitionStatusInstanceViewARM runs a test to see if a specific instance of InitContainerPropertiesDefinition_Status_InstanceViewARM round trips to JSON and back losslessly
func RunJSONSerializationTestForInitContainerPropertiesDefinitionStatusInstanceViewARM(subject InitContainerPropertiesDefinition_Status_InstanceViewARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual InitContainerPropertiesDefinition_Status_InstanceViewARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of InitContainerPropertiesDefinition_Status_InstanceViewARM instances for property testing - lazily
// instantiated by InitContainerPropertiesDefinitionStatusInstanceViewARMGenerator()
var initContainerPropertiesDefinitionStatusInstanceViewARMGenerator gopter.Gen

// InitContainerPropertiesDefinitionStatusInstanceViewARMGenerator returns a generator of InitContainerPropertiesDefinition_Status_InstanceViewARM instances for property testing.
// We first initialize initContainerPropertiesDefinitionStatusInstanceViewARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func InitContainerPropertiesDefinitionStatusInstanceViewARMGenerator() gopter.Gen {
	if initContainerPropertiesDefinitionStatusInstanceViewARMGenerator != nil {
		return initContainerPropertiesDefinitionStatusInstanceViewARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionStatusInstanceViewARM(generators)
	initContainerPropertiesDefinitionStatusInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_Status_InstanceViewARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionStatusInstanceViewARM(generators)
	AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionStatusInstanceViewARM(generators)
	initContainerPropertiesDefinitionStatusInstanceViewARMGenerator = gen.Struct(reflect.TypeOf(InitContainerPropertiesDefinition_Status_InstanceViewARM{}), generators)

	return initContainerPropertiesDefinitionStatusInstanceViewARMGenerator
}

// AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionStatusInstanceViewARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForInitContainerPropertiesDefinitionStatusInstanceViewARM(gens map[string]gopter.Gen) {
	gens["RestartCount"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionStatusInstanceViewARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForInitContainerPropertiesDefinitionStatusInstanceViewARM(gens map[string]gopter.Gen) {
	gens["CurrentState"] = gen.PtrOf(ContainerStateStatusARMGenerator())
	gens["Events"] = gen.SliceOf(EventStatusARMGenerator())
	gens["PreviousState"] = gen.PtrOf(ContainerStateStatusARMGenerator())
}

func Test_ResourceRequirements_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceRequirements_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceRequirementsStatusARM, ResourceRequirementsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceRequirementsStatusARM runs a test to see if a specific instance of ResourceRequirements_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceRequirementsStatusARM(subject ResourceRequirements_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceRequirements_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceRequirements_StatusARM instances for property testing - lazily instantiated by
// ResourceRequirementsStatusARMGenerator()
var resourceRequirementsStatusARMGenerator gopter.Gen

// ResourceRequirementsStatusARMGenerator returns a generator of ResourceRequirements_StatusARM instances for property testing.
func ResourceRequirementsStatusARMGenerator() gopter.Gen {
	if resourceRequirementsStatusARMGenerator != nil {
		return resourceRequirementsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForResourceRequirementsStatusARM(generators)
	resourceRequirementsStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequirements_StatusARM{}), generators)

	return resourceRequirementsStatusARMGenerator
}

// AddRelatedPropertyGeneratorsForResourceRequirementsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceRequirementsStatusARM(gens map[string]gopter.Gen) {
	gens["Limits"] = gen.PtrOf(ResourceLimitsStatusARMGenerator())
	gens["Requests"] = gen.PtrOf(ResourceRequestsStatusARMGenerator())
}

func Test_VolumeMount_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VolumeMount_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVolumeMountStatusARM, VolumeMountStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVolumeMountStatusARM runs a test to see if a specific instance of VolumeMount_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVolumeMountStatusARM(subject VolumeMount_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VolumeMount_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VolumeMount_StatusARM instances for property testing - lazily instantiated by
// VolumeMountStatusARMGenerator()
var volumeMountStatusARMGenerator gopter.Gen

// VolumeMountStatusARMGenerator returns a generator of VolumeMount_StatusARM instances for property testing.
func VolumeMountStatusARMGenerator() gopter.Gen {
	if volumeMountStatusARMGenerator != nil {
		return volumeMountStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVolumeMountStatusARM(generators)
	volumeMountStatusARMGenerator = gen.Struct(reflect.TypeOf(VolumeMount_StatusARM{}), generators)

	return volumeMountStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForVolumeMountStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVolumeMountStatusARM(gens map[string]gopter.Gen) {
	gens["MountPath"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ReadOnly"] = gen.PtrOf(gen.Bool())
}

func Test_ContainerExec_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerExec_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerExecStatusARM, ContainerExecStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerExecStatusARM runs a test to see if a specific instance of ContainerExec_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerExecStatusARM(subject ContainerExec_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerExec_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerExec_StatusARM instances for property testing - lazily instantiated by
// ContainerExecStatusARMGenerator()
var containerExecStatusARMGenerator gopter.Gen

// ContainerExecStatusARMGenerator returns a generator of ContainerExec_StatusARM instances for property testing.
func ContainerExecStatusARMGenerator() gopter.Gen {
	if containerExecStatusARMGenerator != nil {
		return containerExecStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerExecStatusARM(generators)
	containerExecStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerExec_StatusARM{}), generators)

	return containerExecStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerExecStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerExecStatusARM(gens map[string]gopter.Gen) {
	gens["Command"] = gen.SliceOf(gen.AlphaString())
}

func Test_ContainerHttpGet_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerHttpGet_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerHttpGetStatusARM, ContainerHttpGetStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerHttpGetStatusARM runs a test to see if a specific instance of ContainerHttpGet_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerHttpGetStatusARM(subject ContainerHttpGet_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerHttpGet_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerHttpGet_StatusARM instances for property testing - lazily instantiated by
// ContainerHttpGetStatusARMGenerator()
var containerHttpGetStatusARMGenerator gopter.Gen

// ContainerHttpGetStatusARMGenerator returns a generator of ContainerHttpGet_StatusARM instances for property testing.
// We first initialize containerHttpGetStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ContainerHttpGetStatusARMGenerator() gopter.Gen {
	if containerHttpGetStatusARMGenerator != nil {
		return containerHttpGetStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerHttpGetStatusARM(generators)
	containerHttpGetStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerHttpGet_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerHttpGetStatusARM(generators)
	AddRelatedPropertyGeneratorsForContainerHttpGetStatusARM(generators)
	containerHttpGetStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerHttpGet_StatusARM{}), generators)

	return containerHttpGetStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerHttpGetStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerHttpGetStatusARM(gens map[string]gopter.Gen) {
	gens["Path"] = gen.PtrOf(gen.AlphaString())
	gens["Port"] = gen.PtrOf(gen.Int())
	gens["Scheme"] = gen.PtrOf(gen.OneConstOf(ContainerHttpGetStatusSchemeHttp, ContainerHttpGetStatusSchemeHttps))
}

// AddRelatedPropertyGeneratorsForContainerHttpGetStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForContainerHttpGetStatusARM(gens map[string]gopter.Gen) {
	gens["HttpHeaders"] = gen.SliceOf(HttpHeaderStatusARMGenerator())
}

func Test_ContainerState_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ContainerState_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForContainerStateStatusARM, ContainerStateStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForContainerStateStatusARM runs a test to see if a specific instance of ContainerState_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForContainerStateStatusARM(subject ContainerState_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ContainerState_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ContainerState_StatusARM instances for property testing - lazily instantiated by
// ContainerStateStatusARMGenerator()
var containerStateStatusARMGenerator gopter.Gen

// ContainerStateStatusARMGenerator returns a generator of ContainerState_StatusARM instances for property testing.
func ContainerStateStatusARMGenerator() gopter.Gen {
	if containerStateStatusARMGenerator != nil {
		return containerStateStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForContainerStateStatusARM(generators)
	containerStateStatusARMGenerator = gen.Struct(reflect.TypeOf(ContainerState_StatusARM{}), generators)

	return containerStateStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForContainerStateStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForContainerStateStatusARM(gens map[string]gopter.Gen) {
	gens["DetailStatus"] = gen.PtrOf(gen.AlphaString())
	gens["ExitCode"] = gen.PtrOf(gen.Int())
	gens["FinishTime"] = gen.PtrOf(gen.AlphaString())
	gens["StartTime"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
}

func Test_ResourceLimits_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceLimits_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceLimitsStatusARM, ResourceLimitsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceLimitsStatusARM runs a test to see if a specific instance of ResourceLimits_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceLimitsStatusARM(subject ResourceLimits_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceLimits_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceLimits_StatusARM instances for property testing - lazily instantiated by
// ResourceLimitsStatusARMGenerator()
var resourceLimitsStatusARMGenerator gopter.Gen

// ResourceLimitsStatusARMGenerator returns a generator of ResourceLimits_StatusARM instances for property testing.
// We first initialize resourceLimitsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceLimitsStatusARMGenerator() gopter.Gen {
	if resourceLimitsStatusARMGenerator != nil {
		return resourceLimitsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLimitsStatusARM(generators)
	resourceLimitsStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceLimits_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceLimitsStatusARM(generators)
	AddRelatedPropertyGeneratorsForResourceLimitsStatusARM(generators)
	resourceLimitsStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceLimits_StatusARM{}), generators)

	return resourceLimitsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceLimitsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceLimitsStatusARM(gens map[string]gopter.Gen) {
	gens["Cpu"] = gen.PtrOf(gen.Float64())
	gens["MemoryInGB"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForResourceLimitsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceLimitsStatusARM(gens map[string]gopter.Gen) {
	gens["Gpu"] = gen.PtrOf(GpuResourceStatusARMGenerator())
}

func Test_ResourceRequests_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceRequests_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceRequestsStatusARM, ResourceRequestsStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceRequestsStatusARM runs a test to see if a specific instance of ResourceRequests_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceRequestsStatusARM(subject ResourceRequests_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceRequests_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceRequests_StatusARM instances for property testing - lazily instantiated by
// ResourceRequestsStatusARMGenerator()
var resourceRequestsStatusARMGenerator gopter.Gen

// ResourceRequestsStatusARMGenerator returns a generator of ResourceRequests_StatusARM instances for property testing.
// We first initialize resourceRequestsStatusARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceRequestsStatusARMGenerator() gopter.Gen {
	if resourceRequestsStatusARMGenerator != nil {
		return resourceRequestsStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceRequestsStatusARM(generators)
	resourceRequestsStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequests_StatusARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceRequestsStatusARM(generators)
	AddRelatedPropertyGeneratorsForResourceRequestsStatusARM(generators)
	resourceRequestsStatusARMGenerator = gen.Struct(reflect.TypeOf(ResourceRequests_StatusARM{}), generators)

	return resourceRequestsStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceRequestsStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceRequestsStatusARM(gens map[string]gopter.Gen) {
	gens["Cpu"] = gen.PtrOf(gen.Float64())
	gens["MemoryInGB"] = gen.PtrOf(gen.Float64())
}

// AddRelatedPropertyGeneratorsForResourceRequestsStatusARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceRequestsStatusARM(gens map[string]gopter.Gen) {
	gens["Gpu"] = gen.PtrOf(GpuResourceStatusARMGenerator())
}

func Test_GpuResource_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of GpuResource_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForGpuResourceStatusARM, GpuResourceStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForGpuResourceStatusARM runs a test to see if a specific instance of GpuResource_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForGpuResourceStatusARM(subject GpuResource_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual GpuResource_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of GpuResource_StatusARM instances for property testing - lazily instantiated by
// GpuResourceStatusARMGenerator()
var gpuResourceStatusARMGenerator gopter.Gen

// GpuResourceStatusARMGenerator returns a generator of GpuResource_StatusARM instances for property testing.
func GpuResourceStatusARMGenerator() gopter.Gen {
	if gpuResourceStatusARMGenerator != nil {
		return gpuResourceStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForGpuResourceStatusARM(generators)
	gpuResourceStatusARMGenerator = gen.Struct(reflect.TypeOf(GpuResource_StatusARM{}), generators)

	return gpuResourceStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForGpuResourceStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForGpuResourceStatusARM(gens map[string]gopter.Gen) {
	gens["Count"] = gen.PtrOf(gen.Int())
	gens["Sku"] = gen.PtrOf(gen.OneConstOf(GpuResourceStatusSkuK80, GpuResourceStatusSkuP100, GpuResourceStatusSkuV100))
}

func Test_HttpHeader_StatusARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HttpHeader_StatusARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHttpHeaderStatusARM, HttpHeaderStatusARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHttpHeaderStatusARM runs a test to see if a specific instance of HttpHeader_StatusARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHttpHeaderStatusARM(subject HttpHeader_StatusARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HttpHeader_StatusARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HttpHeader_StatusARM instances for property testing - lazily instantiated by
// HttpHeaderStatusARMGenerator()
var httpHeaderStatusARMGenerator gopter.Gen

// HttpHeaderStatusARMGenerator returns a generator of HttpHeader_StatusARM instances for property testing.
func HttpHeaderStatusARMGenerator() gopter.Gen {
	if httpHeaderStatusARMGenerator != nil {
		return httpHeaderStatusARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHttpHeaderStatusARM(generators)
	httpHeaderStatusARMGenerator = gen.Struct(reflect.TypeOf(HttpHeader_StatusARM{}), generators)

	return httpHeaderStatusARMGenerator
}

// AddIndependentPropertyGeneratorsForHttpHeaderStatusARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHttpHeaderStatusARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
