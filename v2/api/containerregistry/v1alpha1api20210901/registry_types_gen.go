// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210901

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/containerregistry/v1alpha1api20210901storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/resourceDefinitions/registries
type Registry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Registries_Spec `json:"spec,omitempty"`
	Status            Registry_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Registry{}

// GetConditions returns the conditions of the resource
func (registry *Registry) GetConditions() conditions.Conditions {
	return registry.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (registry *Registry) SetConditions(conditions conditions.Conditions) {
	registry.Status.Conditions = conditions
}

var _ conversion.Convertible = &Registry{}

// ConvertFrom populates our Registry from the provided hub Registry
func (registry *Registry) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v1alpha1api20210901storage.Registry)
	if !ok {
		return fmt.Errorf("expected storage:containerregistry/v1alpha1api20210901storage/Registry but received %T instead", hub)
	}

	return registry.AssignPropertiesFromRegistry(source)
}

// ConvertTo populates the provided hub Registry from our Registry
func (registry *Registry) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v1alpha1api20210901storage.Registry)
	if !ok {
		return fmt.Errorf("expected storage:containerregistry/v1alpha1api20210901storage/Registry but received %T instead", hub)
	}

	return registry.AssignPropertiesToRegistry(destination)
}

// +kubebuilder:webhook:path=/mutate-containerregistry-azure-com-v1alpha1api20210901-registry,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerregistry.azure.com,resources=registries,verbs=create;update,versions=v1alpha1api20210901,name=default.v1alpha1api20210901.registries.containerregistry.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &Registry{}

// Default applies defaults to the Registry resource
func (registry *Registry) Default() {
	registry.defaultImpl()
	var temp interface{} = registry
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (registry *Registry) defaultAzureName() {
	if registry.Spec.AzureName == "" {
		registry.Spec.AzureName = registry.Name
	}
}

// defaultImpl applies the code generated defaults to the Registry resource
func (registry *Registry) defaultImpl() { registry.defaultAzureName() }

var _ genruntime.KubernetesResource = &Registry{}

// AzureName returns the Azure name of the resource
func (registry *Registry) AzureName() string {
	return registry.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-09-01"
func (registry Registry) GetAPIVersion() string {
	return "2021-09-01"
}

// GetResourceKind returns the kind of the resource
func (registry *Registry) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (registry *Registry) GetSpec() genruntime.ConvertibleSpec {
	return &registry.Spec
}

// GetStatus returns the status of this resource
func (registry *Registry) GetStatus() genruntime.ConvertibleStatus {
	return &registry.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerRegistry/registries"
func (registry *Registry) GetType() string {
	return "Microsoft.ContainerRegistry/registries"
}

// NewEmptyStatus returns a new empty (blank) status
func (registry *Registry) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Registry_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (registry *Registry) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(registry.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  registry.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (registry *Registry) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Registry_Status); ok {
		registry.Status = *st
		return nil
	}

	// Convert status to required version
	var st Registry_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	registry.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-containerregistry-azure-com-v1alpha1api20210901-registry,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerregistry.azure.com,resources=registries,verbs=create;update,versions=v1alpha1api20210901,name=validate.v1alpha1api20210901.registries.containerregistry.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &Registry{}

// ValidateCreate validates the creation of the resource
func (registry *Registry) ValidateCreate() error {
	validations := registry.createValidations()
	var temp interface{} = registry
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (registry *Registry) ValidateDelete() error {
	validations := registry.deleteValidations()
	var temp interface{} = registry
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (registry *Registry) ValidateUpdate(old runtime.Object) error {
	validations := registry.updateValidations()
	var temp interface{} = registry
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (registry *Registry) createValidations() []func() error {
	return []func() error{registry.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (registry *Registry) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (registry *Registry) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return registry.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (registry *Registry) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&registry.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromRegistry populates our Registry from the provided source Registry
func (registry *Registry) AssignPropertiesFromRegistry(source *v1alpha1api20210901storage.Registry) error {

	// ObjectMeta
	registry.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Registries_Spec
	err := spec.AssignPropertiesFromRegistriesSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRegistriesSpec() to populate field Spec")
	}
	registry.Spec = spec

	// Status
	var status Registry_Status
	err = status.AssignPropertiesFromRegistryStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesFromRegistryStatus() to populate field Status")
	}
	registry.Status = status

	// No error
	return nil
}

// AssignPropertiesToRegistry populates the provided destination Registry from our Registry
func (registry *Registry) AssignPropertiesToRegistry(destination *v1alpha1api20210901storage.Registry) error {

	// ObjectMeta
	destination.ObjectMeta = *registry.ObjectMeta.DeepCopy()

	// Spec
	var spec v1alpha1api20210901storage.Registries_Spec
	err := registry.Spec.AssignPropertiesToRegistriesSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRegistriesSpec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210901storage.Registry_Status
	err = registry.Status.AssignPropertiesToRegistryStatus(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToRegistryStatus() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (registry *Registry) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: registry.Spec.OriginalVersion(),
		Kind:    "Registry",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/resourceDefinitions/registries
type RegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Registry `json:"items"`
}

// +kubebuilder:validation:Enum={"2021-09-01"}
type RegistriesSpecAPIVersion string

const RegistriesSpecAPIVersion20210901 = RegistriesSpecAPIVersion("2021-09-01")

type Registries_Spec struct {
	//AdminUserEnabled: The value that indicates whether the admin user is enabled.
	AdminUserEnabled *bool `json:"adminUserEnabled,omitempty"`

	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=5
	// +kubebuilder:validation:Pattern="^[a-zA-Z0-9]*$"
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//DataEndpointEnabled: Enable a single data endpoint per region for serving data.
	DataEndpointEnabled *bool               `json:"dataEndpointEnabled,omitempty"`
	Encryption          *EncryptionProperty `json:"encryption,omitempty"`

	//Identity: Managed identity for the resource.
	Identity *IdentityProperties `json:"identity,omitempty"`

	//Location: The location of the resource. This cannot be changed after the
	//resource is created.
	Location string `json:"location,omitempty"`

	//NetworkRuleBypassOptions: Whether to allow trusted Azure services to access a
	//network restricted registry.
	NetworkRuleBypassOptions *RegistryPropertiesNetworkRuleBypassOptions `json:"networkRuleBypassOptions,omitempty"`

	//NetworkRuleSet: The network rule set for a container registry.
	NetworkRuleSet *NetworkRuleSet `json:"networkRuleSet,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//Policies: The policies for a container registry.
	Policies *Policies `json:"policies,omitempty"`

	//PublicNetworkAccess: Whether or not public network access is allowed for the
	//container registry.
	PublicNetworkAccess *RegistryPropertiesPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// +kubebuilder:validation:Required
	//Sku: The SKU of a container registry.
	Sku Sku `json:"sku"`

	//Tags: Name-value pairs to add to the resource
	Tags map[string]string `json:"tags,omitempty"`

	//ZoneRedundancy: Whether or not zone redundancy is enabled for this container
	//registry.
	ZoneRedundancy *RegistryPropertiesZoneRedundancy `json:"zoneRedundancy,omitempty"`
}

var _ genruntime.ARMTransformer = &Registries_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (registries *Registries_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if registries == nil {
		return nil, nil
	}
	var result Registries_SpecARM

	// Set property ‘Identity’:
	if registries.Identity != nil {
		identityARM, err := (*registries.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(IdentityPropertiesARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	result.Location = registries.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if registries.AdminUserEnabled != nil {
		adminUserEnabled := *registries.AdminUserEnabled
		result.Properties.AdminUserEnabled = &adminUserEnabled
	}
	if registries.DataEndpointEnabled != nil {
		dataEndpointEnabled := *registries.DataEndpointEnabled
		result.Properties.DataEndpointEnabled = &dataEndpointEnabled
	}
	if registries.Encryption != nil {
		encryptionARM, err := (*registries.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(EncryptionPropertyARM)
		result.Properties.Encryption = &encryption
	}
	if registries.NetworkRuleBypassOptions != nil {
		networkRuleBypassOptions := *registries.NetworkRuleBypassOptions
		result.Properties.NetworkRuleBypassOptions = &networkRuleBypassOptions
	}
	if registries.NetworkRuleSet != nil {
		networkRuleSetARM, err := (*registries.NetworkRuleSet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkRuleSet := networkRuleSetARM.(NetworkRuleSetARM)
		result.Properties.NetworkRuleSet = &networkRuleSet
	}
	if registries.Policies != nil {
		policiesARM, err := (*registries.Policies).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		policies := policiesARM.(PoliciesARM)
		result.Properties.Policies = &policies
	}
	if registries.PublicNetworkAccess != nil {
		publicNetworkAccess := *registries.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}
	if registries.ZoneRedundancy != nil {
		zoneRedundancy := *registries.ZoneRedundancy
		result.Properties.ZoneRedundancy = &zoneRedundancy
	}

	// Set property ‘Sku’:
	skuARM, err := registries.Sku.ConvertToARM(resolved)
	if err != nil {
		return nil, err
	}
	result.Sku = skuARM.(SkuARM)

	// Set property ‘Tags’:
	if registries.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range registries.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (registries *Registries_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Registries_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (registries *Registries_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Registries_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Registries_SpecARM, got %T", armInput)
	}

	// Set property ‘AdminUserEnabled’:
	// copying flattened property:
	if typedInput.Properties.AdminUserEnabled != nil {
		adminUserEnabled := *typedInput.Properties.AdminUserEnabled
		registries.AdminUserEnabled = &adminUserEnabled
	}

	// Set property ‘AzureName’:
	registries.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DataEndpointEnabled’:
	// copying flattened property:
	if typedInput.Properties.DataEndpointEnabled != nil {
		dataEndpointEnabled := *typedInput.Properties.DataEndpointEnabled
		registries.DataEndpointEnabled = &dataEndpointEnabled
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties.Encryption != nil {
		var encryption1 EncryptionProperty
		err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
		if err != nil {
			return err
		}
		encryption := encryption1
		registries.Encryption = &encryption
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 IdentityProperties
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		registries.Identity = &identity
	}

	// Set property ‘Location’:
	registries.Location = typedInput.Location

	// Set property ‘NetworkRuleBypassOptions’:
	// copying flattened property:
	if typedInput.Properties.NetworkRuleBypassOptions != nil {
		networkRuleBypassOptions := *typedInput.Properties.NetworkRuleBypassOptions
		registries.NetworkRuleBypassOptions = &networkRuleBypassOptions
	}

	// Set property ‘NetworkRuleSet’:
	// copying flattened property:
	if typedInput.Properties.NetworkRuleSet != nil {
		var networkRuleSet1 NetworkRuleSet
		err := networkRuleSet1.PopulateFromARM(owner, *typedInput.Properties.NetworkRuleSet)
		if err != nil {
			return err
		}
		networkRuleSet := networkRuleSet1
		registries.NetworkRuleSet = &networkRuleSet
	}

	// Set property ‘Owner’:
	registries.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘Policies’:
	// copying flattened property:
	if typedInput.Properties.Policies != nil {
		var policies1 Policies
		err := policies1.PopulateFromARM(owner, *typedInput.Properties.Policies)
		if err != nil {
			return err
		}
		policies := policies1
		registries.Policies = &policies
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
		registries.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Sku’:
	var sku Sku
	err := sku.PopulateFromARM(owner, typedInput.Sku)
	if err != nil {
		return err
	}
	registries.Sku = sku

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		registries.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			registries.Tags[key] = value
		}
	}

	// Set property ‘ZoneRedundancy’:
	// copying flattened property:
	if typedInput.Properties.ZoneRedundancy != nil {
		zoneRedundancy := *typedInput.Properties.ZoneRedundancy
		registries.ZoneRedundancy = &zoneRedundancy
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Registries_Spec{}

// ConvertSpecFrom populates our Registries_Spec from the provided source
func (registries *Registries_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210901storage.Registries_Spec)
	if ok {
		// Populate our instance from source
		return registries.AssignPropertiesFromRegistriesSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210901storage.Registries_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = registries.AssignPropertiesFromRegistriesSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Registries_Spec
func (registries *Registries_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210901storage.Registries_Spec)
	if ok {
		// Populate destination from our instance
		return registries.AssignPropertiesToRegistriesSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210901storage.Registries_Spec{}
	err := registries.AssignPropertiesToRegistriesSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromRegistriesSpec populates our Registries_Spec from the provided source Registries_Spec
func (registries *Registries_Spec) AssignPropertiesFromRegistriesSpec(source *v1alpha1api20210901storage.Registries_Spec) error {

	// AdminUserEnabled
	if source.AdminUserEnabled != nil {
		adminUserEnabled := *source.AdminUserEnabled
		registries.AdminUserEnabled = &adminUserEnabled
	} else {
		registries.AdminUserEnabled = nil
	}

	// AzureName
	registries.AzureName = source.AzureName

	// DataEndpointEnabled
	if source.DataEndpointEnabled != nil {
		dataEndpointEnabled := *source.DataEndpointEnabled
		registries.DataEndpointEnabled = &dataEndpointEnabled
	} else {
		registries.DataEndpointEnabled = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperty
		err := encryption.AssignPropertiesFromEncryptionProperty(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionProperty() to populate field Encryption")
		}
		registries.Encryption = &encryption
	} else {
		registries.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity IdentityProperties
		err := identity.AssignPropertiesFromIdentityProperties(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentityProperties() to populate field Identity")
		}
		registries.Identity = &identity
	} else {
		registries.Identity = nil
	}

	// Location
	registries.Location = genruntime.GetOptionalStringValue(source.Location)

	// NetworkRuleBypassOptions
	if source.NetworkRuleBypassOptions != nil {
		networkRuleBypassOption := RegistryPropertiesNetworkRuleBypassOptions(*source.NetworkRuleBypassOptions)
		registries.NetworkRuleBypassOptions = &networkRuleBypassOption
	} else {
		registries.NetworkRuleBypassOptions = nil
	}

	// NetworkRuleSet
	if source.NetworkRuleSet != nil {
		var networkRuleSet NetworkRuleSet
		err := networkRuleSet.AssignPropertiesFromNetworkRuleSet(source.NetworkRuleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSet() to populate field NetworkRuleSet")
		}
		registries.NetworkRuleSet = &networkRuleSet
	} else {
		registries.NetworkRuleSet = nil
	}

	// Owner
	registries.Owner = source.Owner.Copy()

	// Policies
	if source.Policies != nil {
		var policy Policies
		err := policy.AssignPropertiesFromPolicies(source.Policies)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPolicies() to populate field Policies")
		}
		registries.Policies = &policy
	} else {
		registries.Policies = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := RegistryPropertiesPublicNetworkAccess(*source.PublicNetworkAccess)
		registries.PublicNetworkAccess = &publicNetworkAccess
	} else {
		registries.PublicNetworkAccess = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignPropertiesFromSku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSku() to populate field Sku")
		}
		registries.Sku = sku
	} else {
		registries.Sku = Sku{}
	}

	// Tags
	registries.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// ZoneRedundancy
	if source.ZoneRedundancy != nil {
		zoneRedundancy := RegistryPropertiesZoneRedundancy(*source.ZoneRedundancy)
		registries.ZoneRedundancy = &zoneRedundancy
	} else {
		registries.ZoneRedundancy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRegistriesSpec populates the provided destination Registries_Spec from our Registries_Spec
func (registries *Registries_Spec) AssignPropertiesToRegistriesSpec(destination *v1alpha1api20210901storage.Registries_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdminUserEnabled
	if registries.AdminUserEnabled != nil {
		adminUserEnabled := *registries.AdminUserEnabled
		destination.AdminUserEnabled = &adminUserEnabled
	} else {
		destination.AdminUserEnabled = nil
	}

	// AzureName
	destination.AzureName = registries.AzureName

	// DataEndpointEnabled
	if registries.DataEndpointEnabled != nil {
		dataEndpointEnabled := *registries.DataEndpointEnabled
		destination.DataEndpointEnabled = &dataEndpointEnabled
	} else {
		destination.DataEndpointEnabled = nil
	}

	// Encryption
	if registries.Encryption != nil {
		var encryption v1alpha1api20210901storage.EncryptionProperty
		err := registries.Encryption.AssignPropertiesToEncryptionProperty(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionProperty() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if registries.Identity != nil {
		var identity v1alpha1api20210901storage.IdentityProperties
		err := registries.Identity.AssignPropertiesToIdentityProperties(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentityProperties() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Location
	location := registries.Location
	destination.Location = &location

	// NetworkRuleBypassOptions
	if registries.NetworkRuleBypassOptions != nil {
		networkRuleBypassOption := string(*registries.NetworkRuleBypassOptions)
		destination.NetworkRuleBypassOptions = &networkRuleBypassOption
	} else {
		destination.NetworkRuleBypassOptions = nil
	}

	// NetworkRuleSet
	if registries.NetworkRuleSet != nil {
		var networkRuleSet v1alpha1api20210901storage.NetworkRuleSet
		err := registries.NetworkRuleSet.AssignPropertiesToNetworkRuleSet(&networkRuleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSet() to populate field NetworkRuleSet")
		}
		destination.NetworkRuleSet = &networkRuleSet
	} else {
		destination.NetworkRuleSet = nil
	}

	// OriginalVersion
	destination.OriginalVersion = registries.OriginalVersion()

	// Owner
	destination.Owner = registries.Owner.Copy()

	// Policies
	if registries.Policies != nil {
		var policy v1alpha1api20210901storage.Policies
		err := registries.Policies.AssignPropertiesToPolicies(&policy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPolicies() to populate field Policies")
		}
		destination.Policies = &policy
	} else {
		destination.Policies = nil
	}

	// PublicNetworkAccess
	if registries.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*registries.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Sku
	var sku v1alpha1api20210901storage.Sku
	err := registries.Sku.AssignPropertiesToSku(&sku)
	if err != nil {
		return errors.Wrap(err, "calling AssignPropertiesToSku() to populate field Sku")
	}
	destination.Sku = &sku

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(registries.Tags)

	// ZoneRedundancy
	if registries.ZoneRedundancy != nil {
		zoneRedundancy := string(*registries.ZoneRedundancy)
		destination.ZoneRedundancy = &zoneRedundancy
	} else {
		destination.ZoneRedundancy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (registries *Registries_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (registries *Registries_Spec) SetAzureName(azureName string) { registries.AzureName = azureName }

type Registry_Status struct {
	//AdminUserEnabled: The value that indicates whether the admin user is enabled.
	AdminUserEnabled *bool `json:"adminUserEnabled,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//CreationDate: The creation date of the container registry in ISO8601 format.
	CreationDate *string `json:"creationDate,omitempty"`

	//DataEndpointEnabled: Enable a single data endpoint per region for serving data.
	DataEndpointEnabled *bool `json:"dataEndpointEnabled,omitempty"`

	//DataEndpointHostNames: List of host names that will serve data when
	//dataEndpointEnabled is true.
	DataEndpointHostNames []string `json:"dataEndpointHostNames,omitempty"`

	//Encryption: The encryption settings of container registry.
	Encryption *EncryptionProperty_Status `json:"encryption,omitempty"`

	//Id: The resource ID.
	Id *string `json:"id,omitempty"`

	//Identity: The identity of the container registry.
	Identity *IdentityProperties_Status `json:"identity,omitempty"`

	//Location: The location of the resource. This cannot be changed after the
	//resource is created.
	Location *string `json:"location,omitempty"`

	//LoginServer: The URL that can be used to log into the container registry.
	LoginServer *string `json:"loginServer,omitempty"`

	//Name: The name of the resource.
	Name *string `json:"name,omitempty"`

	//NetworkRuleBypassOptions: Whether to allow trusted Azure services to access a
	//network restricted registry.
	NetworkRuleBypassOptions *RegistryPropertiesStatusNetworkRuleBypassOptions `json:"networkRuleBypassOptions,omitempty"`

	//NetworkRuleSet: The network rule set for a container registry.
	NetworkRuleSet *NetworkRuleSet_Status `json:"networkRuleSet,omitempty"`

	//Policies: The policies for a container registry.
	Policies *Policies_Status `json:"policies,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connections for a container
	//registry.
	PrivateEndpointConnections []PrivateEndpointConnection_Status_SubResourceEmbedded `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: The provisioning state of the container registry at the time
	//the operation was called.
	ProvisioningState *RegistryPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//PublicNetworkAccess: Whether or not public network access is allowed for the
	//container registry.
	PublicNetworkAccess *RegistryPropertiesStatusPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	//Sku: The SKU of the container registry.
	Sku *Sku_Status `json:"sku,omitempty"`

	//Status: The status of the container registry at the time the operation was
	//called.
	Status *Status_Status `json:"status,omitempty"`

	//SystemData: Metadata pertaining to creation and last modification of the
	//resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`

	//Tags: The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: The type of the resource.
	Type *string `json:"type,omitempty"`

	//ZoneRedundancy: Whether or not zone redundancy is enabled for this container
	//registry
	ZoneRedundancy *RegistryPropertiesStatusZoneRedundancy `json:"zoneRedundancy,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Registry_Status{}

// ConvertStatusFrom populates our Registry_Status from the provided source
func (registry *Registry_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210901storage.Registry_Status)
	if ok {
		// Populate our instance from source
		return registry.AssignPropertiesFromRegistryStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210901storage.Registry_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = registry.AssignPropertiesFromRegistryStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Registry_Status
func (registry *Registry_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210901storage.Registry_Status)
	if ok {
		// Populate destination from our instance
		return registry.AssignPropertiesToRegistryStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210901storage.Registry_Status{}
	err := registry.AssignPropertiesToRegistryStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Registry_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (registry *Registry_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Registry_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (registry *Registry_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Registry_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Registry_StatusARM, got %T", armInput)
	}

	// Set property ‘AdminUserEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdminUserEnabled != nil {
			adminUserEnabled := *typedInput.Properties.AdminUserEnabled
			registry.AdminUserEnabled = &adminUserEnabled
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreationDate’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationDate != nil {
			creationDate := *typedInput.Properties.CreationDate
			registry.CreationDate = &creationDate
		}
	}

	// Set property ‘DataEndpointEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataEndpointEnabled != nil {
			dataEndpointEnabled := *typedInput.Properties.DataEndpointEnabled
			registry.DataEndpointEnabled = &dataEndpointEnabled
		}
	}

	// Set property ‘DataEndpointHostNames’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DataEndpointHostNames {
			registry.DataEndpointHostNames = append(registry.DataEndpointHostNames, item)
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperty_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			registry.Encryption = &encryption
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		registry.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 IdentityProperties_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		registry.Identity = &identity
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		registry.Location = &location
	}

	// Set property ‘LoginServer’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LoginServer != nil {
			loginServer := *typedInput.Properties.LoginServer
			registry.LoginServer = &loginServer
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		registry.Name = &name
	}

	// Set property ‘NetworkRuleBypassOptions’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkRuleBypassOptions != nil {
			networkRuleBypassOptions := *typedInput.Properties.NetworkRuleBypassOptions
			registry.NetworkRuleBypassOptions = &networkRuleBypassOptions
		}
	}

	// Set property ‘NetworkRuleSet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkRuleSet != nil {
			var networkRuleSet1 NetworkRuleSet_Status
			err := networkRuleSet1.PopulateFromARM(owner, *typedInput.Properties.NetworkRuleSet)
			if err != nil {
				return err
			}
			networkRuleSet := networkRuleSet1
			registry.NetworkRuleSet = &networkRuleSet
		}
	}

	// Set property ‘Policies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Policies != nil {
			var policies1 Policies_Status
			err := policies1.PopulateFromARM(owner, *typedInput.Properties.Policies)
			if err != nil {
				return err
			}
			policies := policies1
			registry.Policies = &policies
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status_SubResourceEmbedded
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			registry.PrivateEndpointConnections = append(registry.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			registry.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			registry.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_Status
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		registry.Sku = &sku
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			var status1 Status_Status
			err := status1.PopulateFromARM(owner, *typedInput.Properties.Status)
			if err != nil {
				return err
			}
			status := status1
			registry.Status = &status
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		registry.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		registry.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			registry.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		registry.Type = &typeVar
	}

	// Set property ‘ZoneRedundancy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundancy != nil {
			zoneRedundancy := *typedInput.Properties.ZoneRedundancy
			registry.ZoneRedundancy = &zoneRedundancy
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromRegistryStatus populates our Registry_Status from the provided source Registry_Status
func (registry *Registry_Status) AssignPropertiesFromRegistryStatus(source *v1alpha1api20210901storage.Registry_Status) error {

	// AdminUserEnabled
	if source.AdminUserEnabled != nil {
		adminUserEnabled := *source.AdminUserEnabled
		registry.AdminUserEnabled = &adminUserEnabled
	} else {
		registry.AdminUserEnabled = nil
	}

	// Conditions
	registry.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreationDate
	registry.CreationDate = genruntime.ClonePointerToString(source.CreationDate)

	// DataEndpointEnabled
	if source.DataEndpointEnabled != nil {
		dataEndpointEnabled := *source.DataEndpointEnabled
		registry.DataEndpointEnabled = &dataEndpointEnabled
	} else {
		registry.DataEndpointEnabled = nil
	}

	// DataEndpointHostNames
	registry.DataEndpointHostNames = genruntime.CloneSliceOfString(source.DataEndpointHostNames)

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperty_Status
		err := encryption.AssignPropertiesFromEncryptionPropertyStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromEncryptionPropertyStatus() to populate field Encryption")
		}
		registry.Encryption = &encryption
	} else {
		registry.Encryption = nil
	}

	// Id
	registry.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity IdentityProperties_Status
		err := identity.AssignPropertiesFromIdentityPropertiesStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromIdentityPropertiesStatus() to populate field Identity")
		}
		registry.Identity = &identity
	} else {
		registry.Identity = nil
	}

	// Location
	registry.Location = genruntime.ClonePointerToString(source.Location)

	// LoginServer
	registry.LoginServer = genruntime.ClonePointerToString(source.LoginServer)

	// Name
	registry.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkRuleBypassOptions
	if source.NetworkRuleBypassOptions != nil {
		networkRuleBypassOption := RegistryPropertiesStatusNetworkRuleBypassOptions(*source.NetworkRuleBypassOptions)
		registry.NetworkRuleBypassOptions = &networkRuleBypassOption
	} else {
		registry.NetworkRuleBypassOptions = nil
	}

	// NetworkRuleSet
	if source.NetworkRuleSet != nil {
		var networkRuleSet NetworkRuleSet_Status
		err := networkRuleSet.AssignPropertiesFromNetworkRuleSetStatus(source.NetworkRuleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromNetworkRuleSetStatus() to populate field NetworkRuleSet")
		}
		registry.NetworkRuleSet = &networkRuleSet
	} else {
		registry.NetworkRuleSet = nil
	}

	// Policies
	if source.Policies != nil {
		var policy Policies_Status
		err := policy.AssignPropertiesFromPoliciesStatus(source.Policies)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromPoliciesStatus() to populate field Policies")
		}
		registry.Policies = &policy
	} else {
		registry.Policies = nil
	}

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_Status_SubResourceEmbedded, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		registry.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		registry.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := RegistryPropertiesStatusProvisioningState(*source.ProvisioningState)
		registry.ProvisioningState = &provisioningState
	} else {
		registry.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := RegistryPropertiesStatusPublicNetworkAccess(*source.PublicNetworkAccess)
		registry.PublicNetworkAccess = &publicNetworkAccess
	} else {
		registry.PublicNetworkAccess = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_Status
		err := sku.AssignPropertiesFromSkuStatus(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSkuStatus() to populate field Sku")
		}
		registry.Sku = &sku
	} else {
		registry.Sku = nil
	}

	// Status
	if source.Status != nil {
		var status Status_Status
		err := status.AssignPropertiesFromStatusStatus(source.Status)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromStatusStatus() to populate field Status")
		}
		registry.Status = &status
	} else {
		registry.Status = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		registry.SystemData = &systemDatum
	} else {
		registry.SystemData = nil
	}

	// Tags
	registry.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	registry.Type = genruntime.ClonePointerToString(source.Type)

	// ZoneRedundancy
	if source.ZoneRedundancy != nil {
		zoneRedundancy := RegistryPropertiesStatusZoneRedundancy(*source.ZoneRedundancy)
		registry.ZoneRedundancy = &zoneRedundancy
	} else {
		registry.ZoneRedundancy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRegistryStatus populates the provided destination Registry_Status from our Registry_Status
func (registry *Registry_Status) AssignPropertiesToRegistryStatus(destination *v1alpha1api20210901storage.Registry_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdminUserEnabled
	if registry.AdminUserEnabled != nil {
		adminUserEnabled := *registry.AdminUserEnabled
		destination.AdminUserEnabled = &adminUserEnabled
	} else {
		destination.AdminUserEnabled = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(registry.Conditions)

	// CreationDate
	destination.CreationDate = genruntime.ClonePointerToString(registry.CreationDate)

	// DataEndpointEnabled
	if registry.DataEndpointEnabled != nil {
		dataEndpointEnabled := *registry.DataEndpointEnabled
		destination.DataEndpointEnabled = &dataEndpointEnabled
	} else {
		destination.DataEndpointEnabled = nil
	}

	// DataEndpointHostNames
	destination.DataEndpointHostNames = genruntime.CloneSliceOfString(registry.DataEndpointHostNames)

	// Encryption
	if registry.Encryption != nil {
		var encryption v1alpha1api20210901storage.EncryptionProperty_Status
		err := registry.Encryption.AssignPropertiesToEncryptionPropertyStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToEncryptionPropertyStatus() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(registry.Id)

	// Identity
	if registry.Identity != nil {
		var identity v1alpha1api20210901storage.IdentityProperties_Status
		err := registry.Identity.AssignPropertiesToIdentityPropertiesStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToIdentityPropertiesStatus() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(registry.Location)

	// LoginServer
	destination.LoginServer = genruntime.ClonePointerToString(registry.LoginServer)

	// Name
	destination.Name = genruntime.ClonePointerToString(registry.Name)

	// NetworkRuleBypassOptions
	if registry.NetworkRuleBypassOptions != nil {
		networkRuleBypassOption := string(*registry.NetworkRuleBypassOptions)
		destination.NetworkRuleBypassOptions = &networkRuleBypassOption
	} else {
		destination.NetworkRuleBypassOptions = nil
	}

	// NetworkRuleSet
	if registry.NetworkRuleSet != nil {
		var networkRuleSet v1alpha1api20210901storage.NetworkRuleSet_Status
		err := registry.NetworkRuleSet.AssignPropertiesToNetworkRuleSetStatus(&networkRuleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToNetworkRuleSetStatus() to populate field NetworkRuleSet")
		}
		destination.NetworkRuleSet = &networkRuleSet
	} else {
		destination.NetworkRuleSet = nil
	}

	// Policies
	if registry.Policies != nil {
		var policy v1alpha1api20210901storage.Policies_Status
		err := registry.Policies.AssignPropertiesToPoliciesStatus(&policy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToPoliciesStatus() to populate field Policies")
		}
		destination.Policies = &policy
	} else {
		destination.Policies = nil
	}

	// PrivateEndpointConnections
	if registry.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v1alpha1api20210901storage.PrivateEndpointConnection_Status_SubResourceEmbedded, len(registry.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range registry.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v1alpha1api20210901storage.PrivateEndpointConnection_Status_SubResourceEmbedded
			err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if registry.ProvisioningState != nil {
		provisioningState := string(*registry.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if registry.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*registry.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Sku
	if registry.Sku != nil {
		var sku v1alpha1api20210901storage.Sku_Status
		err := registry.Sku.AssignPropertiesToSkuStatus(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSkuStatus() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Status
	if registry.Status != nil {
		var status v1alpha1api20210901storage.Status_Status
		err := registry.Status.AssignPropertiesToStatusStatus(&status)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToStatusStatus() to populate field Status")
		}
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// SystemData
	if registry.SystemData != nil {
		var systemDatum v1alpha1api20210901storage.SystemData_Status
		err := registry.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(registry.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(registry.Type)

	// ZoneRedundancy
	if registry.ZoneRedundancy != nil {
		zoneRedundancy := string(*registry.ZoneRedundancy)
		destination.ZoneRedundancy = &zoneRedundancy
	} else {
		destination.ZoneRedundancy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/EncryptionProperty
type EncryptionProperty struct {
	KeyVaultProperties *KeyVaultProperties `json:"keyVaultProperties,omitempty"`

	//Status: Indicates whether or not the encryption is enabled for container
	//registry.
	Status *EncryptionPropertyStatus `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionProperty{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (property *EncryptionProperty) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if property == nil {
		return nil, nil
	}
	var result EncryptionPropertyARM

	// Set property ‘KeyVaultProperties’:
	if property.KeyVaultProperties != nil {
		keyVaultPropertiesARM, err := (*property.KeyVaultProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultProperties := keyVaultPropertiesARM.(KeyVaultPropertiesARM)
		result.KeyVaultProperties = &keyVaultProperties
	}

	// Set property ‘Status’:
	if property.Status != nil {
		status := *property.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *EncryptionProperty) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionPropertyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *EncryptionProperty) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionPropertyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionPropertyARM, got %T", armInput)
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		property.KeyVaultProperties = &keyVaultProperties
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		property.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionProperty populates our EncryptionProperty from the provided source EncryptionProperty
func (property *EncryptionProperty) AssignPropertiesFromEncryptionProperty(source *v1alpha1api20210901storage.EncryptionProperty) error {

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties
		err := keyVaultProperty.AssignPropertiesFromKeyVaultProperties(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultProperties() to populate field KeyVaultProperties")
		}
		property.KeyVaultProperties = &keyVaultProperty
	} else {
		property.KeyVaultProperties = nil
	}

	// Status
	if source.Status != nil {
		status := EncryptionPropertyStatus(*source.Status)
		property.Status = &status
	} else {
		property.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionProperty populates the provided destination EncryptionProperty from our EncryptionProperty
func (property *EncryptionProperty) AssignPropertiesToEncryptionProperty(destination *v1alpha1api20210901storage.EncryptionProperty) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyVaultProperties
	if property.KeyVaultProperties != nil {
		var keyVaultProperty v1alpha1api20210901storage.KeyVaultProperties
		err := property.KeyVaultProperties.AssignPropertiesToKeyVaultProperties(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultProperties() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Status
	if property.Status != nil {
		status := string(*property.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionProperty_Status struct {
	//KeyVaultProperties: Key vault properties.
	KeyVaultProperties *KeyVaultProperties_Status `json:"keyVaultProperties,omitempty"`

	//Status: Indicates whether or not the encryption is enabled for container
	//registry.
	Status *EncryptionPropertyStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionProperty_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *EncryptionProperty_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionProperty_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *EncryptionProperty_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionProperty_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionProperty_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties_Status
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		property.KeyVaultProperties = &keyVaultProperties
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		property.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionPropertyStatus populates our EncryptionProperty_Status from the provided source EncryptionProperty_Status
func (property *EncryptionProperty_Status) AssignPropertiesFromEncryptionPropertyStatus(source *v1alpha1api20210901storage.EncryptionProperty_Status) error {

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties_Status
		err := keyVaultProperty.AssignPropertiesFromKeyVaultPropertiesStatus(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
		}
		property.KeyVaultProperties = &keyVaultProperty
	} else {
		property.KeyVaultProperties = nil
	}

	// Status
	if source.Status != nil {
		status := EncryptionPropertyStatusStatus(*source.Status)
		property.Status = &status
	} else {
		property.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionPropertyStatus populates the provided destination EncryptionProperty_Status from our EncryptionProperty_Status
func (property *EncryptionProperty_Status) AssignPropertiesToEncryptionPropertyStatus(destination *v1alpha1api20210901storage.EncryptionProperty_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyVaultProperties
	if property.KeyVaultProperties != nil {
		var keyVaultProperty v1alpha1api20210901storage.KeyVaultProperties_Status
		err := property.KeyVaultProperties.AssignPropertiesToKeyVaultPropertiesStatus(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToKeyVaultPropertiesStatus() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Status
	if property.Status != nil {
		status := string(*property.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/IdentityProperties
type IdentityProperties struct {
	//PrincipalId: The principal ID of resource identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant ID of resource.
	TenantId *string `json:"tenantId,omitempty"`

	//Type: The identity type.
	Type *IdentityPropertiesType `json:"type,omitempty"`

	//UserAssignedIdentities: The list of user identities associated with the
	//resource. The user identity
	//dictionary key references will be ARM resource ids in the form:
	//'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
	//providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserIdentityProperties `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.ARMTransformer = &IdentityProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *IdentityProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result IdentityPropertiesARM

	// Set property ‘PrincipalId’:
	if properties.PrincipalId != nil {
		principalId := *properties.PrincipalId
		result.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if properties.TenantId != nil {
		tenantId := *properties.TenantId
		result.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if properties.Type != nil {
		typeVar := *properties.Type
		result.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if properties.UserAssignedIdentities != nil {
		result.UserAssignedIdentities = make(map[string]UserIdentityPropertiesARM)
		for key, value := range properties.UserAssignedIdentities {
			valueARM, err := value.ConvertToARM(resolved)
			if err != nil {
				return nil, err
			}
			result.UserAssignedIdentities[key] = valueARM.(UserIdentityPropertiesARM)
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *IdentityProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *IdentityProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityPropertiesARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		properties.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		properties.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		properties.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		properties.UserAssignedIdentities = make(map[string]UserIdentityProperties)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserIdentityProperties
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			properties.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentityProperties populates our IdentityProperties from the provided source IdentityProperties
func (properties *IdentityProperties) AssignPropertiesFromIdentityProperties(source *v1alpha1api20210901storage.IdentityProperties) error {

	// PrincipalId
	properties.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	properties.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := IdentityPropertiesType(*source.Type)
		properties.Type = &typeVar
	} else {
		properties.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserIdentityProperties, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserIdentityProperties
			err := userAssignedIdentity.AssignPropertiesFromUserIdentityProperties(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUserIdentityProperties() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		properties.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		properties.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentityProperties populates the provided destination IdentityProperties from our IdentityProperties
func (properties *IdentityProperties) AssignPropertiesToIdentityProperties(destination *v1alpha1api20210901storage.IdentityProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(properties.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(properties.TenantId)

	// Type
	if properties.Type != nil {
		typeVar := string(*properties.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if properties.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20210901storage.UserIdentityProperties, len(properties.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range properties.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20210901storage.UserIdentityProperties
			err := userAssignedIdentityValue.AssignPropertiesToUserIdentityProperties(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUserIdentityProperties() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IdentityProperties_Status struct {
	//PrincipalId: The principal ID of resource identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant ID of resource.
	TenantId *string `json:"tenantId,omitempty"`

	//Type: The identity type.
	Type *IdentityPropertiesStatusType `json:"type,omitempty"`

	//UserAssignedIdentities: The list of user identities associated with the
	//resource. The user identity
	//dictionary key references will be ARM resource ids in the form:
	//'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
	//providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserIdentityProperties_Status `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &IdentityProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *IdentityProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *IdentityProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		properties.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		properties.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		properties.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		properties.UserAssignedIdentities = make(map[string]UserIdentityProperties_Status)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserIdentityProperties_Status
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			properties.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromIdentityPropertiesStatus populates our IdentityProperties_Status from the provided source IdentityProperties_Status
func (properties *IdentityProperties_Status) AssignPropertiesFromIdentityPropertiesStatus(source *v1alpha1api20210901storage.IdentityProperties_Status) error {

	// PrincipalId
	properties.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	properties.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := IdentityPropertiesStatusType(*source.Type)
		properties.Type = &typeVar
	} else {
		properties.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserIdentityProperties_Status, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserIdentityProperties_Status
			err := userAssignedIdentity.AssignPropertiesFromUserIdentityPropertiesStatus(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromUserIdentityPropertiesStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		properties.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		properties.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignPropertiesToIdentityPropertiesStatus populates the provided destination IdentityProperties_Status from our IdentityProperties_Status
func (properties *IdentityProperties_Status) AssignPropertiesToIdentityPropertiesStatus(destination *v1alpha1api20210901storage.IdentityProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(properties.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(properties.TenantId)

	// Type
	if properties.Type != nil {
		typeVar := string(*properties.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if properties.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v1alpha1api20210901storage.UserIdentityProperties_Status, len(properties.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range properties.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v1alpha1api20210901storage.UserIdentityProperties_Status
			err := userAssignedIdentityValue.AssignPropertiesToUserIdentityPropertiesStatus(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToUserIdentityPropertiesStatus() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/NetworkRuleSet
type NetworkRuleSet struct {
	// +kubebuilder:validation:Required
	//DefaultAction: The default action of allow or deny when no other rules match.
	DefaultAction NetworkRuleSetDefaultAction `json:"defaultAction"`

	//IpRules: The IP ACL rules.
	IpRules []IPRule `json:"ipRules,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkRuleSet{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ruleSet *NetworkRuleSet) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ruleSet == nil {
		return nil, nil
	}
	var result NetworkRuleSetARM

	// Set property ‘DefaultAction’:
	result.DefaultAction = ruleSet.DefaultAction

	// Set property ‘IpRules’:
	for _, item := range ruleSet.IpRules {
		itemARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.IpRules = append(result.IpRules, itemARM.(IPRuleARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSetARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSetARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSetARM, got %T", armInput)
	}

	// Set property ‘DefaultAction’:
	ruleSet.DefaultAction = typedInput.DefaultAction

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSet populates our NetworkRuleSet from the provided source NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignPropertiesFromNetworkRuleSet(source *v1alpha1api20210901storage.NetworkRuleSet) error {

	// DefaultAction
	if source.DefaultAction != nil {
		ruleSet.DefaultAction = NetworkRuleSetDefaultAction(*source.DefaultAction)
	} else {
		ruleSet.DefaultAction = ""
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule
			err := ipRule.AssignPropertiesFromIPRule(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSet populates the provided destination NetworkRuleSet from our NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignPropertiesToNetworkRuleSet(destination *v1alpha1api20210901storage.NetworkRuleSet) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultAction
	defaultAction := string(ruleSet.DefaultAction)
	destination.DefaultAction = &defaultAction

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v1alpha1api20210901storage.IPRule, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v1alpha1api20210901storage.IPRule
			err := ipRuleItem.AssignPropertiesToIPRule(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkRuleSet_Status struct {
	// +kubebuilder:validation:Required
	//DefaultAction: The default action of allow or deny when no other rules match.
	DefaultAction NetworkRuleSetStatusDefaultAction `json:"defaultAction"`

	//IpRules: The IP ACL rules.
	IpRules []IPRule_Status `json:"ipRules,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkRuleSet_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSet_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSet_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSet_StatusARM, got %T", armInput)
	}

	// Set property ‘DefaultAction’:
	ruleSet.DefaultAction = typedInput.DefaultAction

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule_Status
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// No error
	return nil
}

// AssignPropertiesFromNetworkRuleSetStatus populates our NetworkRuleSet_Status from the provided source NetworkRuleSet_Status
func (ruleSet *NetworkRuleSet_Status) AssignPropertiesFromNetworkRuleSetStatus(source *v1alpha1api20210901storage.NetworkRuleSet_Status) error {

	// DefaultAction
	if source.DefaultAction != nil {
		ruleSet.DefaultAction = NetworkRuleSetStatusDefaultAction(*source.DefaultAction)
	} else {
		ruleSet.DefaultAction = ""
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule_Status, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule_Status
			err := ipRule.AssignPropertiesFromIPRuleStatus(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesFromIPRuleStatus() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// No error
	return nil
}

// AssignPropertiesToNetworkRuleSetStatus populates the provided destination NetworkRuleSet_Status from our NetworkRuleSet_Status
func (ruleSet *NetworkRuleSet_Status) AssignPropertiesToNetworkRuleSetStatus(destination *v1alpha1api20210901storage.NetworkRuleSet_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultAction
	defaultAction := string(ruleSet.DefaultAction)
	destination.DefaultAction = &defaultAction

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v1alpha1api20210901storage.IPRule_Status, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v1alpha1api20210901storage.IPRule_Status
			err := ipRuleItem.AssignPropertiesToIPRuleStatus(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignPropertiesToIPRuleStatus() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/Policies
type Policies struct {
	//ExportPolicy: The export policy for a container registry.
	ExportPolicy *ExportPolicy `json:"exportPolicy,omitempty"`

	//QuarantinePolicy: The quarantine policy for a container registry.
	QuarantinePolicy *QuarantinePolicy `json:"quarantinePolicy,omitempty"`

	//RetentionPolicy: The retention policy for a container registry.
	RetentionPolicy *RetentionPolicy `json:"retentionPolicy,omitempty"`

	//TrustPolicy: The content trust policy for a container registry.
	TrustPolicy *TrustPolicy `json:"trustPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &Policies{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policies *Policies) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policies == nil {
		return nil, nil
	}
	var result PoliciesARM

	// Set property ‘ExportPolicy’:
	if policies.ExportPolicy != nil {
		exportPolicyARM, err := (*policies.ExportPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		exportPolicy := exportPolicyARM.(ExportPolicyARM)
		result.ExportPolicy = &exportPolicy
	}

	// Set property ‘QuarantinePolicy’:
	if policies.QuarantinePolicy != nil {
		quarantinePolicyARM, err := (*policies.QuarantinePolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		quarantinePolicy := quarantinePolicyARM.(QuarantinePolicyARM)
		result.QuarantinePolicy = &quarantinePolicy
	}

	// Set property ‘RetentionPolicy’:
	if policies.RetentionPolicy != nil {
		retentionPolicyARM, err := (*policies.RetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		retentionPolicy := retentionPolicyARM.(RetentionPolicyARM)
		result.RetentionPolicy = &retentionPolicy
	}

	// Set property ‘TrustPolicy’:
	if policies.TrustPolicy != nil {
		trustPolicyARM, err := (*policies.TrustPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		trustPolicy := trustPolicyARM.(TrustPolicyARM)
		result.TrustPolicy = &trustPolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policies *Policies) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PoliciesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policies *Policies) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PoliciesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PoliciesARM, got %T", armInput)
	}

	// Set property ‘ExportPolicy’:
	if typedInput.ExportPolicy != nil {
		var exportPolicy1 ExportPolicy
		err := exportPolicy1.PopulateFromARM(owner, *typedInput.ExportPolicy)
		if err != nil {
			return err
		}
		exportPolicy := exportPolicy1
		policies.ExportPolicy = &exportPolicy
	}

	// Set property ‘QuarantinePolicy’:
	if typedInput.QuarantinePolicy != nil {
		var quarantinePolicy1 QuarantinePolicy
		err := quarantinePolicy1.PopulateFromARM(owner, *typedInput.QuarantinePolicy)
		if err != nil {
			return err
		}
		quarantinePolicy := quarantinePolicy1
		policies.QuarantinePolicy = &quarantinePolicy
	}

	// Set property ‘RetentionPolicy’:
	if typedInput.RetentionPolicy != nil {
		var retentionPolicy1 RetentionPolicy
		err := retentionPolicy1.PopulateFromARM(owner, *typedInput.RetentionPolicy)
		if err != nil {
			return err
		}
		retentionPolicy := retentionPolicy1
		policies.RetentionPolicy = &retentionPolicy
	}

	// Set property ‘TrustPolicy’:
	if typedInput.TrustPolicy != nil {
		var trustPolicy1 TrustPolicy
		err := trustPolicy1.PopulateFromARM(owner, *typedInput.TrustPolicy)
		if err != nil {
			return err
		}
		trustPolicy := trustPolicy1
		policies.TrustPolicy = &trustPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromPolicies populates our Policies from the provided source Policies
func (policies *Policies) AssignPropertiesFromPolicies(source *v1alpha1api20210901storage.Policies) error {

	// ExportPolicy
	if source.ExportPolicy != nil {
		var exportPolicy ExportPolicy
		err := exportPolicy.AssignPropertiesFromExportPolicy(source.ExportPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExportPolicy() to populate field ExportPolicy")
		}
		policies.ExportPolicy = &exportPolicy
	} else {
		policies.ExportPolicy = nil
	}

	// QuarantinePolicy
	if source.QuarantinePolicy != nil {
		var quarantinePolicy QuarantinePolicy
		err := quarantinePolicy.AssignPropertiesFromQuarantinePolicy(source.QuarantinePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromQuarantinePolicy() to populate field QuarantinePolicy")
		}
		policies.QuarantinePolicy = &quarantinePolicy
	} else {
		policies.QuarantinePolicy = nil
	}

	// RetentionPolicy
	if source.RetentionPolicy != nil {
		var retentionPolicy RetentionPolicy
		err := retentionPolicy.AssignPropertiesFromRetentionPolicy(source.RetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRetentionPolicy() to populate field RetentionPolicy")
		}
		policies.RetentionPolicy = &retentionPolicy
	} else {
		policies.RetentionPolicy = nil
	}

	// TrustPolicy
	if source.TrustPolicy != nil {
		var trustPolicy TrustPolicy
		err := trustPolicy.AssignPropertiesFromTrustPolicy(source.TrustPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromTrustPolicy() to populate field TrustPolicy")
		}
		policies.TrustPolicy = &trustPolicy
	} else {
		policies.TrustPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPolicies populates the provided destination Policies from our Policies
func (policies *Policies) AssignPropertiesToPolicies(destination *v1alpha1api20210901storage.Policies) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExportPolicy
	if policies.ExportPolicy != nil {
		var exportPolicy v1alpha1api20210901storage.ExportPolicy
		err := policies.ExportPolicy.AssignPropertiesToExportPolicy(&exportPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExportPolicy() to populate field ExportPolicy")
		}
		destination.ExportPolicy = &exportPolicy
	} else {
		destination.ExportPolicy = nil
	}

	// QuarantinePolicy
	if policies.QuarantinePolicy != nil {
		var quarantinePolicy v1alpha1api20210901storage.QuarantinePolicy
		err := policies.QuarantinePolicy.AssignPropertiesToQuarantinePolicy(&quarantinePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToQuarantinePolicy() to populate field QuarantinePolicy")
		}
		destination.QuarantinePolicy = &quarantinePolicy
	} else {
		destination.QuarantinePolicy = nil
	}

	// RetentionPolicy
	if policies.RetentionPolicy != nil {
		var retentionPolicy v1alpha1api20210901storage.RetentionPolicy
		err := policies.RetentionPolicy.AssignPropertiesToRetentionPolicy(&retentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRetentionPolicy() to populate field RetentionPolicy")
		}
		destination.RetentionPolicy = &retentionPolicy
	} else {
		destination.RetentionPolicy = nil
	}

	// TrustPolicy
	if policies.TrustPolicy != nil {
		var trustPolicy v1alpha1api20210901storage.TrustPolicy
		err := policies.TrustPolicy.AssignPropertiesToTrustPolicy(&trustPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToTrustPolicy() to populate field TrustPolicy")
		}
		destination.TrustPolicy = &trustPolicy
	} else {
		destination.TrustPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Policies_Status struct {
	//ExportPolicy: The export policy for a container registry.
	ExportPolicy *ExportPolicy_Status `json:"exportPolicy,omitempty"`

	//QuarantinePolicy: The quarantine policy for a container registry.
	QuarantinePolicy *QuarantinePolicy_Status `json:"quarantinePolicy,omitempty"`

	//RetentionPolicy: The retention policy for a container registry.
	RetentionPolicy *RetentionPolicy_Status `json:"retentionPolicy,omitempty"`

	//TrustPolicy: The content trust policy for a container registry.
	TrustPolicy *TrustPolicy_Status `json:"trustPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &Policies_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policies *Policies_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Policies_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policies *Policies_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Policies_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Policies_StatusARM, got %T", armInput)
	}

	// Set property ‘ExportPolicy’:
	if typedInput.ExportPolicy != nil {
		var exportPolicy1 ExportPolicy_Status
		err := exportPolicy1.PopulateFromARM(owner, *typedInput.ExportPolicy)
		if err != nil {
			return err
		}
		exportPolicy := exportPolicy1
		policies.ExportPolicy = &exportPolicy
	}

	// Set property ‘QuarantinePolicy’:
	if typedInput.QuarantinePolicy != nil {
		var quarantinePolicy1 QuarantinePolicy_Status
		err := quarantinePolicy1.PopulateFromARM(owner, *typedInput.QuarantinePolicy)
		if err != nil {
			return err
		}
		quarantinePolicy := quarantinePolicy1
		policies.QuarantinePolicy = &quarantinePolicy
	}

	// Set property ‘RetentionPolicy’:
	if typedInput.RetentionPolicy != nil {
		var retentionPolicy1 RetentionPolicy_Status
		err := retentionPolicy1.PopulateFromARM(owner, *typedInput.RetentionPolicy)
		if err != nil {
			return err
		}
		retentionPolicy := retentionPolicy1
		policies.RetentionPolicy = &retentionPolicy
	}

	// Set property ‘TrustPolicy’:
	if typedInput.TrustPolicy != nil {
		var trustPolicy1 TrustPolicy_Status
		err := trustPolicy1.PopulateFromARM(owner, *typedInput.TrustPolicy)
		if err != nil {
			return err
		}
		trustPolicy := trustPolicy1
		policies.TrustPolicy = &trustPolicy
	}

	// No error
	return nil
}

// AssignPropertiesFromPoliciesStatus populates our Policies_Status from the provided source Policies_Status
func (policies *Policies_Status) AssignPropertiesFromPoliciesStatus(source *v1alpha1api20210901storage.Policies_Status) error {

	// ExportPolicy
	if source.ExportPolicy != nil {
		var exportPolicy ExportPolicy_Status
		err := exportPolicy.AssignPropertiesFromExportPolicyStatus(source.ExportPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromExportPolicyStatus() to populate field ExportPolicy")
		}
		policies.ExportPolicy = &exportPolicy
	} else {
		policies.ExportPolicy = nil
	}

	// QuarantinePolicy
	if source.QuarantinePolicy != nil {
		var quarantinePolicy QuarantinePolicy_Status
		err := quarantinePolicy.AssignPropertiesFromQuarantinePolicyStatus(source.QuarantinePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromQuarantinePolicyStatus() to populate field QuarantinePolicy")
		}
		policies.QuarantinePolicy = &quarantinePolicy
	} else {
		policies.QuarantinePolicy = nil
	}

	// RetentionPolicy
	if source.RetentionPolicy != nil {
		var retentionPolicy RetentionPolicy_Status
		err := retentionPolicy.AssignPropertiesFromRetentionPolicyStatus(source.RetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromRetentionPolicyStatus() to populate field RetentionPolicy")
		}
		policies.RetentionPolicy = &retentionPolicy
	} else {
		policies.RetentionPolicy = nil
	}

	// TrustPolicy
	if source.TrustPolicy != nil {
		var trustPolicy TrustPolicy_Status
		err := trustPolicy.AssignPropertiesFromTrustPolicyStatus(source.TrustPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromTrustPolicyStatus() to populate field TrustPolicy")
		}
		policies.TrustPolicy = &trustPolicy
	} else {
		policies.TrustPolicy = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPoliciesStatus populates the provided destination Policies_Status from our Policies_Status
func (policies *Policies_Status) AssignPropertiesToPoliciesStatus(destination *v1alpha1api20210901storage.Policies_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExportPolicy
	if policies.ExportPolicy != nil {
		var exportPolicy v1alpha1api20210901storage.ExportPolicy_Status
		err := policies.ExportPolicy.AssignPropertiesToExportPolicyStatus(&exportPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToExportPolicyStatus() to populate field ExportPolicy")
		}
		destination.ExportPolicy = &exportPolicy
	} else {
		destination.ExportPolicy = nil
	}

	// QuarantinePolicy
	if policies.QuarantinePolicy != nil {
		var quarantinePolicy v1alpha1api20210901storage.QuarantinePolicy_Status
		err := policies.QuarantinePolicy.AssignPropertiesToQuarantinePolicyStatus(&quarantinePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToQuarantinePolicyStatus() to populate field QuarantinePolicy")
		}
		destination.QuarantinePolicy = &quarantinePolicy
	} else {
		destination.QuarantinePolicy = nil
	}

	// RetentionPolicy
	if policies.RetentionPolicy != nil {
		var retentionPolicy v1alpha1api20210901storage.RetentionPolicy_Status
		err := policies.RetentionPolicy.AssignPropertiesToRetentionPolicyStatus(&retentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToRetentionPolicyStatus() to populate field RetentionPolicy")
		}
		destination.RetentionPolicy = &retentionPolicy
	} else {
		destination.RetentionPolicy = nil
	}

	// TrustPolicy
	if policies.TrustPolicy != nil {
		var trustPolicy v1alpha1api20210901storage.TrustPolicy_Status
		err := policies.TrustPolicy.AssignPropertiesToTrustPolicyStatus(&trustPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToTrustPolicyStatus() to populate field TrustPolicy")
		}
		destination.TrustPolicy = &trustPolicy
	} else {
		destination.TrustPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type PrivateEndpointConnection_Status_SubResourceEmbedded struct {
	//Id: The resource ID.
	Id *string `json:"id,omitempty"`

	//SystemData: Metadata pertaining to creation and last modification of the
	//resource.
	SystemData *SystemData_Status `json:"systemData,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status_SubResourceEmbedded{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_Status_SubResourceEmbeddedARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_Status_SubResourceEmbeddedARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_Status_SubResourceEmbeddedARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		embedded.Id = &id
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_Status
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		embedded.SystemData = &systemData
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded populates our PrivateEndpointConnection_Status_SubResourceEmbedded from the provided source PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesFromPrivateEndpointConnectionStatusSubResourceEmbedded(source *v1alpha1api20210901storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {

	// Id
	embedded.Id = genruntime.ClonePointerToString(source.Id)

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_Status
		err := systemDatum.AssignPropertiesFromSystemDataStatus(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesFromSystemDataStatus() to populate field SystemData")
		}
		embedded.SystemData = &systemDatum
	} else {
		embedded.SystemData = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded populates the provided destination PrivateEndpointConnection_Status_SubResourceEmbedded from our PrivateEndpointConnection_Status_SubResourceEmbedded
func (embedded *PrivateEndpointConnection_Status_SubResourceEmbedded) AssignPropertiesToPrivateEndpointConnectionStatusSubResourceEmbedded(destination *v1alpha1api20210901storage.PrivateEndpointConnection_Status_SubResourceEmbedded) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(embedded.Id)

	// SystemData
	if embedded.SystemData != nil {
		var systemDatum v1alpha1api20210901storage.SystemData_Status
		err := embedded.SystemData.AssignPropertiesToSystemDataStatus(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignPropertiesToSystemDataStatus() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RegistryPropertiesStatusNetworkRuleBypassOptions string

const (
	RegistryPropertiesStatusNetworkRuleBypassOptionsAzureServices = RegistryPropertiesStatusNetworkRuleBypassOptions("AzureServices")
	RegistryPropertiesStatusNetworkRuleBypassOptionsNone          = RegistryPropertiesStatusNetworkRuleBypassOptions("None")
)

type RegistryPropertiesStatusProvisioningState string

const (
	RegistryPropertiesStatusProvisioningStateCanceled  = RegistryPropertiesStatusProvisioningState("Canceled")
	RegistryPropertiesStatusProvisioningStateCreating  = RegistryPropertiesStatusProvisioningState("Creating")
	RegistryPropertiesStatusProvisioningStateDeleting  = RegistryPropertiesStatusProvisioningState("Deleting")
	RegistryPropertiesStatusProvisioningStateFailed    = RegistryPropertiesStatusProvisioningState("Failed")
	RegistryPropertiesStatusProvisioningStateSucceeded = RegistryPropertiesStatusProvisioningState("Succeeded")
	RegistryPropertiesStatusProvisioningStateUpdating  = RegistryPropertiesStatusProvisioningState("Updating")
)

type RegistryPropertiesStatusPublicNetworkAccess string

const (
	RegistryPropertiesStatusPublicNetworkAccessDisabled = RegistryPropertiesStatusPublicNetworkAccess("Disabled")
	RegistryPropertiesStatusPublicNetworkAccessEnabled  = RegistryPropertiesStatusPublicNetworkAccess("Enabled")
)

type RegistryPropertiesStatusZoneRedundancy string

const (
	RegistryPropertiesStatusZoneRedundancyDisabled = RegistryPropertiesStatusZoneRedundancy("Disabled")
	RegistryPropertiesStatusZoneRedundancyEnabled  = RegistryPropertiesStatusZoneRedundancy("Enabled")
)

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/Sku
type Sku struct {
	// +kubebuilder:validation:Required
	//Name: The SKU name of the container registry. Required for registry creation.
	Name SkuName `json:"name"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	var result SkuARM

	// Set property ‘Name’:
	result.Name = sku.Name
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SkuARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SkuARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SkuARM, got %T", armInput)
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// No error
	return nil
}

// AssignPropertiesFromSku populates our Sku from the provided source Sku
func (sku *Sku) AssignPropertiesFromSku(source *v1alpha1api20210901storage.Sku) error {

	// Name
	if source.Name != nil {
		sku.Name = SkuName(*source.Name)
	} else {
		sku.Name = ""
	}

	// No error
	return nil
}

// AssignPropertiesToSku populates the provided destination Sku from our Sku
func (sku *Sku) AssignPropertiesToSku(destination *v1alpha1api20210901storage.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := string(sku.Name)
	destination.Name = &name

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Sku_Status struct {
	// +kubebuilder:validation:Required
	//Name: The SKU name of the container registry. Required for registry creation.
	Name SkuStatusName `json:"name"`

	//Tier: The SKU tier based on the SKU name.
	Tier *SkuStatusTier `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_StatusARM, got %T", armInput)
	}

	// Set property ‘Name’:
	sku.Name = typedInput.Name

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignPropertiesFromSkuStatus populates our Sku_Status from the provided source Sku_Status
func (sku *Sku_Status) AssignPropertiesFromSkuStatus(source *v1alpha1api20210901storage.Sku_Status) error {

	// Name
	if source.Name != nil {
		sku.Name = SkuStatusName(*source.Name)
	} else {
		sku.Name = ""
	}

	// Tier
	if source.Tier != nil {
		tier := SkuStatusTier(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSkuStatus populates the provided destination Sku_Status from our Sku_Status
func (sku *Sku_Status) AssignPropertiesToSkuStatus(destination *v1alpha1api20210901storage.Sku_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	name := string(sku.Name)
	destination.Name = &name

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type Status_Status struct {
	//DisplayStatus: The short label for the status.
	DisplayStatus *string `json:"displayStatus,omitempty"`

	//Message: The detailed message for the status, including alerts and error
	//messages.
	Message *string `json:"message,omitempty"`

	//Timestamp: The timestamp when the status was changed to the current value.
	Timestamp *string `json:"timestamp,omitempty"`
}

var _ genruntime.FromARMConverter = &Status_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (status *Status_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Status_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (status *Status_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Status_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Status_StatusARM, got %T", armInput)
	}

	// Set property ‘DisplayStatus’:
	if typedInput.DisplayStatus != nil {
		displayStatus := *typedInput.DisplayStatus
		status.DisplayStatus = &displayStatus
	}

	// Set property ‘Message’:
	if typedInput.Message != nil {
		message := *typedInput.Message
		status.Message = &message
	}

	// Set property ‘Timestamp’:
	if typedInput.Timestamp != nil {
		timestamp := *typedInput.Timestamp
		status.Timestamp = &timestamp
	}

	// No error
	return nil
}

// AssignPropertiesFromStatusStatus populates our Status_Status from the provided source Status_Status
func (status *Status_Status) AssignPropertiesFromStatusStatus(source *v1alpha1api20210901storage.Status_Status) error {

	// DisplayStatus
	status.DisplayStatus = genruntime.ClonePointerToString(source.DisplayStatus)

	// Message
	status.Message = genruntime.ClonePointerToString(source.Message)

	// Timestamp
	status.Timestamp = genruntime.ClonePointerToString(source.Timestamp)

	// No error
	return nil
}

// AssignPropertiesToStatusStatus populates the provided destination Status_Status from our Status_Status
func (status *Status_Status) AssignPropertiesToStatusStatus(destination *v1alpha1api20210901storage.Status_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DisplayStatus
	destination.DisplayStatus = genruntime.ClonePointerToString(status.DisplayStatus)

	// Message
	destination.Message = genruntime.ClonePointerToString(status.Message)

	// Timestamp
	destination.Timestamp = genruntime.ClonePointerToString(status.Timestamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_Status struct {
	//CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	//CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	//CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemDataStatusCreatedByType `json:"createdByType,omitempty"`

	//LastModifiedAt: The timestamp of resource modification (UTC).
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	//LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	//LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemDataStatusLastModifiedByType `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_StatusARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignPropertiesFromSystemDataStatus populates our SystemData_Status from the provided source SystemData_Status
func (data *SystemData_Status) AssignPropertiesFromSystemDataStatus(source *v1alpha1api20210901storage.SystemData_Status) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemDataStatusCreatedByType(*source.CreatedByType)
		data.CreatedByType = &createdByType
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemDataStatusLastModifiedByType(*source.LastModifiedByType)
		data.LastModifiedByType = &lastModifiedByType
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignPropertiesToSystemDataStatus populates the provided destination SystemData_Status from our SystemData_Status
func (data *SystemData_Status) AssignPropertiesToSystemDataStatus(destination *v1alpha1api20210901storage.SystemData_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type EncryptionPropertyStatusStatus string

const (
	EncryptionPropertyStatusStatusDisabled = EncryptionPropertyStatusStatus("disabled")
	EncryptionPropertyStatusStatusEnabled  = EncryptionPropertyStatusStatus("enabled")
)

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/ExportPolicy
type ExportPolicy struct {
	//Status: The value that indicates whether the policy is enabled or not.
	Status *ExportPolicyStatus `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &ExportPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *ExportPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result ExportPolicyARM

	// Set property ‘Status’:
	if policy.Status != nil {
		status := *policy.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ExportPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExportPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ExportPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExportPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExportPolicyARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromExportPolicy populates our ExportPolicy from the provided source ExportPolicy
func (policy *ExportPolicy) AssignPropertiesFromExportPolicy(source *v1alpha1api20210901storage.ExportPolicy) error {

	// Status
	if source.Status != nil {
		status := ExportPolicyStatus(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExportPolicy populates the provided destination ExportPolicy from our ExportPolicy
func (policy *ExportPolicy) AssignPropertiesToExportPolicy(destination *v1alpha1api20210901storage.ExportPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ExportPolicy_Status struct {
	//Status: The value that indicates whether the policy is enabled or not.
	Status *ExportPolicyStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &ExportPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ExportPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExportPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ExportPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExportPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExportPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromExportPolicyStatus populates our ExportPolicy_Status from the provided source ExportPolicy_Status
func (policy *ExportPolicy_Status) AssignPropertiesFromExportPolicyStatus(source *v1alpha1api20210901storage.ExportPolicy_Status) error {

	// Status
	if source.Status != nil {
		status := ExportPolicyStatusStatus(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToExportPolicyStatus populates the provided destination ExportPolicy_Status from our ExportPolicy_Status
func (policy *ExportPolicy_Status) AssignPropertiesToExportPolicyStatus(destination *v1alpha1api20210901storage.ExportPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/IPRule
type IPRule struct {
	//Action: The action of IP ACL rule.
	Action *IPRuleAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value string `json:"value"`
}

var _ genruntime.ARMTransformer = &IPRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *IPRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	var result IPRuleARM

	// Set property ‘Action’:
	if rule.Action != nil {
		action := *rule.Action
		result.Action = &action
	}

	// Set property ‘Value’:
	result.Value = rule.Value
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRuleARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRuleARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRuleARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	rule.Value = typedInput.Value

	// No error
	return nil
}

// AssignPropertiesFromIPRule populates our IPRule from the provided source IPRule
func (rule *IPRule) AssignPropertiesFromIPRule(source *v1alpha1api20210901storage.IPRule) error {

	// Action
	if source.Action != nil {
		action := IPRuleAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.GetOptionalStringValue(source.Value)

	// No error
	return nil
}

// AssignPropertiesToIPRule populates the provided destination IPRule from our IPRule
func (rule *IPRule) AssignPropertiesToIPRule(destination *v1alpha1api20210901storage.IPRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	value := rule.Value
	destination.Value = &value

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type IPRule_Status struct {
	//Action: The action of IP ACL rule.
	Action *IPRuleStatusAction `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	//Value: Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
	Value string `json:"value"`
}

var _ genruntime.FromARMConverter = &IPRule_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRule_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRule_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRule_StatusARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	rule.Value = typedInput.Value

	// No error
	return nil
}

// AssignPropertiesFromIPRuleStatus populates our IPRule_Status from the provided source IPRule_Status
func (rule *IPRule_Status) AssignPropertiesFromIPRuleStatus(source *v1alpha1api20210901storage.IPRule_Status) error {

	// Action
	if source.Action != nil {
		action := IPRuleStatusAction(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.GetOptionalStringValue(source.Value)

	// No error
	return nil
}

// AssignPropertiesToIPRuleStatus populates the provided destination IPRule_Status from our IPRule_Status
func (rule *IPRule_Status) AssignPropertiesToIPRuleStatus(destination *v1alpha1api20210901storage.IPRule_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	value := rule.Value
	destination.Value = &value

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/KeyVaultProperties
type KeyVaultProperties struct {
	//Identity: The client id of the identity which will be used to access key vault.
	Identity *string `json:"identity,omitempty"`

	//KeyIdentifier: Key vault uri to access the encryption key.
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result KeyVaultPropertiesARM

	// Set property ‘Identity’:
	if properties.Identity != nil {
		identity := *properties.Identity
		result.Identity = &identity
	}

	// Set property ‘KeyIdentifier’:
	if properties.KeyIdentifier != nil {
		keyIdentifier := *properties.KeyIdentifier
		result.KeyIdentifier = &keyIdentifier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultPropertiesARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		identity := *typedInput.Identity
		properties.Identity = &identity
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *v1alpha1api20210901storage.KeyVaultProperties) error {

	// Identity
	properties.Identity = genruntime.ClonePointerToString(source.Identity)

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (properties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *v1alpha1api20210901storage.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	destination.Identity = genruntime.ClonePointerToString(properties.Identity)

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type KeyVaultProperties_Status struct {
	//Identity: The client id of the identity which will be used to access key vault.
	Identity *string `json:"identity,omitempty"`

	//KeyIdentifier: Key vault uri to access the encryption key.
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`

	//KeyRotationEnabled: Auto key rotation status for a CMK enabled registry.
	KeyRotationEnabled *bool `json:"keyRotationEnabled,omitempty"`

	//LastKeyRotationTimestamp: Timestamp of the last successful key rotation.
	LastKeyRotationTimestamp *string `json:"lastKeyRotationTimestamp,omitempty"`

	//VersionedKeyIdentifier: The fully qualified key identifier that includes the
	//version of the key that is actually used for encryption.
	VersionedKeyIdentifier *string `json:"versionedKeyIdentifier,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		identity := *typedInput.Identity
		properties.Identity = &identity
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// Set property ‘KeyRotationEnabled’:
	if typedInput.KeyRotationEnabled != nil {
		keyRotationEnabled := *typedInput.KeyRotationEnabled
		properties.KeyRotationEnabled = &keyRotationEnabled
	}

	// Set property ‘LastKeyRotationTimestamp’:
	if typedInput.LastKeyRotationTimestamp != nil {
		lastKeyRotationTimestamp := *typedInput.LastKeyRotationTimestamp
		properties.LastKeyRotationTimestamp = &lastKeyRotationTimestamp
	}

	// Set property ‘VersionedKeyIdentifier’:
	if typedInput.VersionedKeyIdentifier != nil {
		versionedKeyIdentifier := *typedInput.VersionedKeyIdentifier
		properties.VersionedKeyIdentifier = &versionedKeyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesStatus populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultPropertiesStatus(source *v1alpha1api20210901storage.KeyVaultProperties_Status) error {

	// Identity
	properties.Identity = genruntime.ClonePointerToString(source.Identity)

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// KeyRotationEnabled
	if source.KeyRotationEnabled != nil {
		keyRotationEnabled := *source.KeyRotationEnabled
		properties.KeyRotationEnabled = &keyRotationEnabled
	} else {
		properties.KeyRotationEnabled = nil
	}

	// LastKeyRotationTimestamp
	properties.LastKeyRotationTimestamp = genruntime.ClonePointerToString(source.LastKeyRotationTimestamp)

	// VersionedKeyIdentifier
	properties.VersionedKeyIdentifier = genruntime.ClonePointerToString(source.VersionedKeyIdentifier)

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesStatus populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (properties *KeyVaultProperties_Status) AssignPropertiesToKeyVaultPropertiesStatus(destination *v1alpha1api20210901storage.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	destination.Identity = genruntime.ClonePointerToString(properties.Identity)

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// KeyRotationEnabled
	if properties.KeyRotationEnabled != nil {
		keyRotationEnabled := *properties.KeyRotationEnabled
		destination.KeyRotationEnabled = &keyRotationEnabled
	} else {
		destination.KeyRotationEnabled = nil
	}

	// LastKeyRotationTimestamp
	destination.LastKeyRotationTimestamp = genruntime.ClonePointerToString(properties.LastKeyRotationTimestamp)

	// VersionedKeyIdentifier
	destination.VersionedKeyIdentifier = genruntime.ClonePointerToString(properties.VersionedKeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type NetworkRuleSetStatusDefaultAction string

const (
	NetworkRuleSetStatusDefaultActionAllow = NetworkRuleSetStatusDefaultAction("Allow")
	NetworkRuleSetStatusDefaultActionDeny  = NetworkRuleSetStatusDefaultAction("Deny")
)

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/QuarantinePolicy
type QuarantinePolicy struct {
	//Status: The value that indicates whether the policy is enabled or not.
	Status *QuarantinePolicyStatus `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &QuarantinePolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *QuarantinePolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result QuarantinePolicyARM

	// Set property ‘Status’:
	if policy.Status != nil {
		status := *policy.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *QuarantinePolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &QuarantinePolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *QuarantinePolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(QuarantinePolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected QuarantinePolicyARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromQuarantinePolicy populates our QuarantinePolicy from the provided source QuarantinePolicy
func (policy *QuarantinePolicy) AssignPropertiesFromQuarantinePolicy(source *v1alpha1api20210901storage.QuarantinePolicy) error {

	// Status
	if source.Status != nil {
		status := QuarantinePolicyStatus(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToQuarantinePolicy populates the provided destination QuarantinePolicy from our QuarantinePolicy
func (policy *QuarantinePolicy) AssignPropertiesToQuarantinePolicy(destination *v1alpha1api20210901storage.QuarantinePolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type QuarantinePolicy_Status struct {
	//Status: The value that indicates whether the policy is enabled or not.
	Status *QuarantinePolicyStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &QuarantinePolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *QuarantinePolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &QuarantinePolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *QuarantinePolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(QuarantinePolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected QuarantinePolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromQuarantinePolicyStatus populates our QuarantinePolicy_Status from the provided source QuarantinePolicy_Status
func (policy *QuarantinePolicy_Status) AssignPropertiesFromQuarantinePolicyStatus(source *v1alpha1api20210901storage.QuarantinePolicy_Status) error {

	// Status
	if source.Status != nil {
		status := QuarantinePolicyStatusStatus(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToQuarantinePolicyStatus populates the provided destination QuarantinePolicy_Status from our QuarantinePolicy_Status
func (policy *QuarantinePolicy_Status) AssignPropertiesToQuarantinePolicyStatus(destination *v1alpha1api20210901storage.QuarantinePolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/RetentionPolicy
type RetentionPolicy struct {
	//Days: The number of days to retain an untagged manifest after which it gets
	//purged.
	Days *int `json:"days,omitempty"`

	//Status: The value that indicates whether the policy is enabled or not.
	Status *RetentionPolicyStatus `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &RetentionPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *RetentionPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result RetentionPolicyARM

	// Set property ‘Days’:
	if policy.Days != nil {
		days := *policy.Days
		result.Days = &days
	}

	// Set property ‘Status’:
	if policy.Status != nil {
		status := *policy.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *RetentionPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetentionPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *RetentionPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetentionPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetentionPolicyARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromRetentionPolicy populates our RetentionPolicy from the provided source RetentionPolicy
func (policy *RetentionPolicy) AssignPropertiesFromRetentionPolicy(source *v1alpha1api20210901storage.RetentionPolicy) error {

	// Days
	policy.Days = genruntime.ClonePointerToInt(source.Days)

	// Status
	if source.Status != nil {
		status := RetentionPolicyStatus(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRetentionPolicy populates the provided destination RetentionPolicy from our RetentionPolicy
func (policy *RetentionPolicy) AssignPropertiesToRetentionPolicy(destination *v1alpha1api20210901storage.RetentionPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(policy.Days)

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type RetentionPolicy_Status struct {
	//Days: The number of days to retain an untagged manifest after which it gets
	//purged.
	Days *int `json:"days,omitempty"`

	//LastUpdatedTime: The timestamp when the policy was last updated.
	LastUpdatedTime *string `json:"lastUpdatedTime,omitempty"`

	//Status: The value that indicates whether the policy is enabled or not.
	Status *RetentionPolicyStatusStatus `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &RetentionPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *RetentionPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetentionPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *RetentionPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetentionPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetentionPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘LastUpdatedTime’:
	if typedInput.LastUpdatedTime != nil {
		lastUpdatedTime := *typedInput.LastUpdatedTime
		policy.LastUpdatedTime = &lastUpdatedTime
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignPropertiesFromRetentionPolicyStatus populates our RetentionPolicy_Status from the provided source RetentionPolicy_Status
func (policy *RetentionPolicy_Status) AssignPropertiesFromRetentionPolicyStatus(source *v1alpha1api20210901storage.RetentionPolicy_Status) error {

	// Days
	policy.Days = genruntime.ClonePointerToInt(source.Days)

	// LastUpdatedTime
	policy.LastUpdatedTime = genruntime.ClonePointerToString(source.LastUpdatedTime)

	// Status
	if source.Status != nil {
		status := RetentionPolicyStatusStatus(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignPropertiesToRetentionPolicyStatus populates the provided destination RetentionPolicy_Status from our RetentionPolicy_Status
func (policy *RetentionPolicy_Status) AssignPropertiesToRetentionPolicyStatus(destination *v1alpha1api20210901storage.RetentionPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(policy.Days)

	// LastUpdatedTime
	destination.LastUpdatedTime = genruntime.ClonePointerToString(policy.LastUpdatedTime)

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/TrustPolicy
type TrustPolicy struct {
	//Status: The value that indicates whether the policy is enabled or not.
	Status *TrustPolicyStatus `json:"status,omitempty"`

	//Type: The type of trust policy.
	Type *TrustPolicyType `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &TrustPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *TrustPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	var result TrustPolicyARM

	// Set property ‘Status’:
	if policy.Status != nil {
		status := *policy.Status
		result.Status = &status
	}

	// Set property ‘Type’:
	if policy.Type != nil {
		typeVar := *policy.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *TrustPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TrustPolicyARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *TrustPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TrustPolicyARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TrustPolicyARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		policy.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromTrustPolicy populates our TrustPolicy from the provided source TrustPolicy
func (policy *TrustPolicy) AssignPropertiesFromTrustPolicy(source *v1alpha1api20210901storage.TrustPolicy) error {

	// Status
	if source.Status != nil {
		status := TrustPolicyStatus(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// Type
	if source.Type != nil {
		typeVar := TrustPolicyType(*source.Type)
		policy.Type = &typeVar
	} else {
		policy.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToTrustPolicy populates the provided destination TrustPolicy from our TrustPolicy
func (policy *TrustPolicy) AssignPropertiesToTrustPolicy(destination *v1alpha1api20210901storage.TrustPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Type
	if policy.Type != nil {
		typeVar := string(*policy.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type TrustPolicy_Status struct {
	//Status: The value that indicates whether the policy is enabled or not.
	Status *TrustPolicyStatusStatus `json:"status,omitempty"`

	//Type: The type of trust policy.
	Type *TrustPolicyStatusType `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &TrustPolicy_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *TrustPolicy_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TrustPolicy_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *TrustPolicy_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TrustPolicy_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TrustPolicy_StatusARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		policy.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromTrustPolicyStatus populates our TrustPolicy_Status from the provided source TrustPolicy_Status
func (policy *TrustPolicy_Status) AssignPropertiesFromTrustPolicyStatus(source *v1alpha1api20210901storage.TrustPolicy_Status) error {

	// Status
	if source.Status != nil {
		status := TrustPolicyStatusStatus(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// Type
	if source.Type != nil {
		typeVar := TrustPolicyStatusType(*source.Type)
		policy.Type = &typeVar
	} else {
		policy.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToTrustPolicyStatus populates the provided destination TrustPolicy_Status from our TrustPolicy_Status
func (policy *TrustPolicy_Status) AssignPropertiesToTrustPolicyStatus(destination *v1alpha1api20210901storage.TrustPolicy_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Type
	if policy.Type != nil {
		typeVar := string(*policy.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-09-01/Microsoft.ContainerRegistry.json#/definitions/UserIdentityProperties
type UserIdentityProperties struct {
	//ClientId: The client id of user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal id of user assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.ARMTransformer = &UserIdentityProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *UserIdentityProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	var result UserIdentityPropertiesARM

	// Set property ‘ClientId’:
	if properties.ClientId != nil {
		clientId := *properties.ClientId
		result.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if properties.PrincipalId != nil {
		principalId := *properties.PrincipalId
		result.PrincipalId = &principalId
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *UserIdentityProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserIdentityPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *UserIdentityProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserIdentityPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserIdentityPropertiesARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		properties.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		properties.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserIdentityProperties populates our UserIdentityProperties from the provided source UserIdentityProperties
func (properties *UserIdentityProperties) AssignPropertiesFromUserIdentityProperties(source *v1alpha1api20210901storage.UserIdentityProperties) error {

	// ClientId
	properties.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	properties.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToUserIdentityProperties populates the provided destination UserIdentityProperties from our UserIdentityProperties
func (properties *UserIdentityProperties) AssignPropertiesToUserIdentityProperties(destination *v1alpha1api20210901storage.UserIdentityProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(properties.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(properties.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type UserIdentityProperties_Status struct {
	//ClientId: The client id of user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal id of user assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserIdentityProperties_Status{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *UserIdentityProperties_Status) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserIdentityProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *UserIdentityProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserIdentityProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserIdentityProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		properties.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		properties.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromUserIdentityPropertiesStatus populates our UserIdentityProperties_Status from the provided source UserIdentityProperties_Status
func (properties *UserIdentityProperties_Status) AssignPropertiesFromUserIdentityPropertiesStatus(source *v1alpha1api20210901storage.UserIdentityProperties_Status) error {

	// ClientId
	properties.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	properties.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignPropertiesToUserIdentityPropertiesStatus populates the provided destination UserIdentityProperties_Status from our UserIdentityProperties_Status
func (properties *UserIdentityProperties_Status) AssignPropertiesToUserIdentityPropertiesStatus(destination *v1alpha1api20210901storage.UserIdentityProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(properties.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(properties.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ExportPolicyStatusStatus string

const (
	ExportPolicyStatusStatusDisabled = ExportPolicyStatusStatus("disabled")
	ExportPolicyStatusStatusEnabled  = ExportPolicyStatusStatus("enabled")
)

type IPRuleStatusAction string

const IPRuleStatusActionAllow = IPRuleStatusAction("Allow")

type QuarantinePolicyStatusStatus string

const (
	QuarantinePolicyStatusStatusDisabled = QuarantinePolicyStatusStatus("disabled")
	QuarantinePolicyStatusStatusEnabled  = QuarantinePolicyStatusStatus("enabled")
)

type RetentionPolicyStatusStatus string

const (
	RetentionPolicyStatusStatusDisabled = RetentionPolicyStatusStatus("disabled")
	RetentionPolicyStatusStatusEnabled  = RetentionPolicyStatusStatus("enabled")
)

type TrustPolicyStatusStatus string

const (
	TrustPolicyStatusStatusDisabled = TrustPolicyStatusStatus("disabled")
	TrustPolicyStatusStatusEnabled  = TrustPolicyStatusStatus("enabled")
)

type TrustPolicyStatusType string

const TrustPolicyStatusTypeNotary = TrustPolicyStatusType("Notary")

func init() {
	SchemeBuilder.Register(&Registry{}, &RegistryList{})
}
