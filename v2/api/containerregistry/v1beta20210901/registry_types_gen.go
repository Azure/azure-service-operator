// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20210901

import (
	"fmt"
	v20210901s "github.com/Azure/azure-service-operator/v2/api/containerregistry/v1beta20210901storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Deprecated version of Registry. Use v1api20210901.Registry instead
type Registry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Registry_Spec   `json:"spec,omitempty"`
	Status            Registry_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Registry{}

// GetConditions returns the conditions of the resource
func (registry *Registry) GetConditions() conditions.Conditions {
	return registry.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (registry *Registry) SetConditions(conditions conditions.Conditions) {
	registry.Status.Conditions = conditions
}

var _ conversion.Convertible = &Registry{}

// ConvertFrom populates our Registry from the provided hub Registry
func (registry *Registry) ConvertFrom(hub conversion.Hub) error {
	// intermediate variable for conversion
	var source v20210901s.Registry

	err := source.ConvertFrom(hub)
	if err != nil {
		return errors.Wrap(err, "converting from hub to source")
	}

	err = registry.AssignProperties_From_Registry(&source)
	if err != nil {
		return errors.Wrap(err, "converting from source to registry")
	}

	return nil
}

// ConvertTo populates the provided hub Registry from our Registry
func (registry *Registry) ConvertTo(hub conversion.Hub) error {
	// intermediate variable for conversion
	var destination v20210901s.Registry
	err := registry.AssignProperties_To_Registry(&destination)
	if err != nil {
		return errors.Wrap(err, "converting to destination from registry")
	}
	err = destination.ConvertTo(hub)
	if err != nil {
		return errors.Wrap(err, "converting from destination to hub")
	}

	return nil
}

// +kubebuilder:webhook:path=/mutate-containerregistry-azure-com-v1beta20210901-registry,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerregistry.azure.com,resources=registries,verbs=create;update,versions=v1beta20210901,name=default.v1beta20210901.registries.containerregistry.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Registry{}

// Default applies defaults to the Registry resource
func (registry *Registry) Default() {
	registry.defaultImpl()
	var temp any = registry
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (registry *Registry) defaultAzureName() {
	if registry.Spec.AzureName == "" {
		registry.Spec.AzureName = registry.Name
	}
}

// defaultImpl applies the code generated defaults to the Registry resource
func (registry *Registry) defaultImpl() { registry.defaultAzureName() }

var _ genruntime.KubernetesResource = &Registry{}

// AzureName returns the Azure name of the resource
func (registry *Registry) AzureName() string {
	return registry.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-09-01"
func (registry Registry) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (registry *Registry) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (registry *Registry) GetSpec() genruntime.ConvertibleSpec {
	return &registry.Spec
}

// GetStatus returns the status of this resource
func (registry *Registry) GetStatus() genruntime.ConvertibleStatus {
	return &registry.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerRegistry/registries"
func (registry *Registry) GetType() string {
	return "Microsoft.ContainerRegistry/registries"
}

// NewEmptyStatus returns a new empty (blank) status
func (registry *Registry) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Registry_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (registry *Registry) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(registry.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  registry.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (registry *Registry) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Registry_STATUS); ok {
		registry.Status = *st
		return nil
	}

	// Convert status to required version
	var st Registry_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	registry.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-containerregistry-azure-com-v1beta20210901-registry,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerregistry.azure.com,resources=registries,verbs=create;update,versions=v1beta20210901,name=validate.v1beta20210901.registries.containerregistry.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Registry{}

// ValidateCreate validates the creation of the resource
func (registry *Registry) ValidateCreate() error {
	validations := registry.createValidations()
	var temp any = registry
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (registry *Registry) ValidateDelete() error {
	validations := registry.deleteValidations()
	var temp any = registry
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (registry *Registry) ValidateUpdate(old runtime.Object) error {
	validations := registry.updateValidations()
	var temp any = registry
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (registry *Registry) createValidations() []func() error {
	return []func() error{registry.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (registry *Registry) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (registry *Registry) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return registry.validateResourceReferences()
		},
		registry.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (registry *Registry) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&registry.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (registry *Registry) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Registry)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, registry)
}

// AssignProperties_From_Registry populates our Registry from the provided source Registry
func (registry *Registry) AssignProperties_From_Registry(source *v20210901s.Registry) error {

	// ObjectMeta
	registry.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Registry_Spec
	err := spec.AssignProperties_From_Registry_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Registry_Spec() to populate field Spec")
	}
	registry.Spec = spec

	// Status
	var status Registry_STATUS
	err = status.AssignProperties_From_Registry_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Registry_STATUS() to populate field Status")
	}
	registry.Status = status

	// No error
	return nil
}

// AssignProperties_To_Registry populates the provided destination Registry from our Registry
func (registry *Registry) AssignProperties_To_Registry(destination *v20210901s.Registry) error {

	// ObjectMeta
	destination.ObjectMeta = *registry.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210901s.Registry_Spec
	err := registry.Spec.AssignProperties_To_Registry_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Registry_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210901s.Registry_STATUS
	err = registry.Status.AssignProperties_To_Registry_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Registry_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (registry *Registry) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: registry.Spec.OriginalVersion(),
		Kind:    "Registry",
	}
}

// +kubebuilder:object:root=true
// Deprecated version of Registry. Use v1api20210901.Registry instead
type RegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Registry `json:"items"`
}

// Deprecated version of APIVersion. Use v1api20210901.APIVersion instead
// +kubebuilder:validation:Enum={"2021-09-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2021-09-01")

type Registry_Spec struct {
	AdminUserEnabled *bool `json:"adminUserEnabled,omitempty"`

	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=5
	// +kubebuilder:validation:Pattern="^[a-zA-Z0-9]*$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName           string              `json:"azureName,omitempty"`
	DataEndpointEnabled *bool               `json:"dataEndpointEnabled,omitempty"`
	Encryption          *EncryptionProperty `json:"encryption,omitempty"`
	Identity            *IdentityProperties `json:"identity,omitempty"`

	// +kubebuilder:validation:Required
	Location                 *string                                      `json:"location,omitempty"`
	NetworkRuleBypassOptions *RegistryProperties_NetworkRuleBypassOptions `json:"networkRuleBypassOptions,omitempty"`
	NetworkRuleSet           *NetworkRuleSet                              `json:"networkRuleSet,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner               *genruntime.KnownResourceReference      `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	Policies            *Policies                               `json:"policies,omitempty"`
	PublicNetworkAccess *RegistryProperties_PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// +kubebuilder:validation:Required
	Sku            *Sku                               `json:"sku,omitempty"`
	Tags           map[string]string                  `json:"tags,omitempty"`
	ZoneRedundancy *RegistryProperties_ZoneRedundancy `json:"zoneRedundancy,omitempty"`
}

var _ genruntime.ARMTransformer = &Registry_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (registry *Registry_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if registry == nil {
		return nil, nil
	}
	result := &Registry_Spec_ARM{}

	// Set property ‘Identity’:
	if registry.Identity != nil {
		identity_ARM, err := (*registry.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := *identity_ARM.(*IdentityProperties_ARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	if registry.Location != nil {
		location := *registry.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if registry.AdminUserEnabled != nil ||
		registry.DataEndpointEnabled != nil ||
		registry.Encryption != nil ||
		registry.NetworkRuleBypassOptions != nil ||
		registry.NetworkRuleSet != nil ||
		registry.Policies != nil ||
		registry.PublicNetworkAccess != nil ||
		registry.ZoneRedundancy != nil {
		result.Properties = &RegistryProperties_ARM{}
	}
	if registry.AdminUserEnabled != nil {
		adminUserEnabled := *registry.AdminUserEnabled
		result.Properties.AdminUserEnabled = &adminUserEnabled
	}
	if registry.DataEndpointEnabled != nil {
		dataEndpointEnabled := *registry.DataEndpointEnabled
		result.Properties.DataEndpointEnabled = &dataEndpointEnabled
	}
	if registry.Encryption != nil {
		encryption_ARM, err := (*registry.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := *encryption_ARM.(*EncryptionProperty_ARM)
		result.Properties.Encryption = &encryption
	}
	if registry.NetworkRuleBypassOptions != nil {
		networkRuleBypassOptions := *registry.NetworkRuleBypassOptions
		result.Properties.NetworkRuleBypassOptions = &networkRuleBypassOptions
	}
	if registry.NetworkRuleSet != nil {
		networkRuleSet_ARM, err := (*registry.NetworkRuleSet).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		networkRuleSet := *networkRuleSet_ARM.(*NetworkRuleSet_ARM)
		result.Properties.NetworkRuleSet = &networkRuleSet
	}
	if registry.Policies != nil {
		policies_ARM, err := (*registry.Policies).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		policies := *policies_ARM.(*Policies_ARM)
		result.Properties.Policies = &policies
	}
	if registry.PublicNetworkAccess != nil {
		publicNetworkAccess := *registry.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}
	if registry.ZoneRedundancy != nil {
		zoneRedundancy := *registry.ZoneRedundancy
		result.Properties.ZoneRedundancy = &zoneRedundancy
	}

	// Set property ‘Sku’:
	if registry.Sku != nil {
		sku_ARM, err := (*registry.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *sku_ARM.(*Sku_ARM)
		result.Sku = &sku
	}

	// Set property ‘Tags’:
	if registry.Tags != nil {
		result.Tags = make(map[string]string, len(registry.Tags))
		for key, value := range registry.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (registry *Registry_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Registry_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (registry *Registry_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Registry_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Registry_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AdminUserEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdminUserEnabled != nil {
			adminUserEnabled := *typedInput.Properties.AdminUserEnabled
			registry.AdminUserEnabled = &adminUserEnabled
		}
	}

	// Set property ‘AzureName’:
	registry.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DataEndpointEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataEndpointEnabled != nil {
			dataEndpointEnabled := *typedInput.Properties.DataEndpointEnabled
			registry.DataEndpointEnabled = &dataEndpointEnabled
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperty
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			registry.Encryption = &encryption
		}
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 IdentityProperties
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		registry.Identity = &identity
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		registry.Location = &location
	}

	// Set property ‘NetworkRuleBypassOptions’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkRuleBypassOptions != nil {
			networkRuleBypassOptions := *typedInput.Properties.NetworkRuleBypassOptions
			registry.NetworkRuleBypassOptions = &networkRuleBypassOptions
		}
	}

	// Set property ‘NetworkRuleSet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkRuleSet != nil {
			var networkRuleSet1 NetworkRuleSet
			err := networkRuleSet1.PopulateFromARM(owner, *typedInput.Properties.NetworkRuleSet)
			if err != nil {
				return err
			}
			networkRuleSet := networkRuleSet1
			registry.NetworkRuleSet = &networkRuleSet
		}
	}

	// Set property ‘Owner’:
	registry.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘Policies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Policies != nil {
			var policies1 Policies
			err := policies1.PopulateFromARM(owner, *typedInput.Properties.Policies)
			if err != nil {
				return err
			}
			policies := policies1
			registry.Policies = &policies
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			registry.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		registry.Sku = &sku
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		registry.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			registry.Tags[key] = value
		}
	}

	// Set property ‘ZoneRedundancy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundancy != nil {
			zoneRedundancy := *typedInput.Properties.ZoneRedundancy
			registry.ZoneRedundancy = &zoneRedundancy
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Registry_Spec{}

// ConvertSpecFrom populates our Registry_Spec from the provided source
func (registry *Registry_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210901s.Registry_Spec)
	if ok {
		// Populate our instance from source
		return registry.AssignProperties_From_Registry_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210901s.Registry_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = registry.AssignProperties_From_Registry_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Registry_Spec
func (registry *Registry_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210901s.Registry_Spec)
	if ok {
		// Populate destination from our instance
		return registry.AssignProperties_To_Registry_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210901s.Registry_Spec{}
	err := registry.AssignProperties_To_Registry_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Registry_Spec populates our Registry_Spec from the provided source Registry_Spec
func (registry *Registry_Spec) AssignProperties_From_Registry_Spec(source *v20210901s.Registry_Spec) error {

	// AdminUserEnabled
	if source.AdminUserEnabled != nil {
		adminUserEnabled := *source.AdminUserEnabled
		registry.AdminUserEnabled = &adminUserEnabled
	} else {
		registry.AdminUserEnabled = nil
	}

	// AzureName
	registry.AzureName = source.AzureName

	// DataEndpointEnabled
	if source.DataEndpointEnabled != nil {
		dataEndpointEnabled := *source.DataEndpointEnabled
		registry.DataEndpointEnabled = &dataEndpointEnabled
	} else {
		registry.DataEndpointEnabled = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperty
		err := encryption.AssignProperties_From_EncryptionProperty(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EncryptionProperty() to populate field Encryption")
		}
		registry.Encryption = &encryption
	} else {
		registry.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity IdentityProperties
		err := identity.AssignProperties_From_IdentityProperties(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_IdentityProperties() to populate field Identity")
		}
		registry.Identity = &identity
	} else {
		registry.Identity = nil
	}

	// Location
	registry.Location = genruntime.ClonePointerToString(source.Location)

	// NetworkRuleBypassOptions
	if source.NetworkRuleBypassOptions != nil {
		networkRuleBypassOption := RegistryProperties_NetworkRuleBypassOptions(*source.NetworkRuleBypassOptions)
		registry.NetworkRuleBypassOptions = &networkRuleBypassOption
	} else {
		registry.NetworkRuleBypassOptions = nil
	}

	// NetworkRuleSet
	if source.NetworkRuleSet != nil {
		var networkRuleSet NetworkRuleSet
		err := networkRuleSet.AssignProperties_From_NetworkRuleSet(source.NetworkRuleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NetworkRuleSet() to populate field NetworkRuleSet")
		}
		registry.NetworkRuleSet = &networkRuleSet
	} else {
		registry.NetworkRuleSet = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		registry.Owner = &owner
	} else {
		registry.Owner = nil
	}

	// Policies
	if source.Policies != nil {
		var policy Policies
		err := policy.AssignProperties_From_Policies(source.Policies)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Policies() to populate field Policies")
		}
		registry.Policies = &policy
	} else {
		registry.Policies = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := RegistryProperties_PublicNetworkAccess(*source.PublicNetworkAccess)
		registry.PublicNetworkAccess = &publicNetworkAccess
	} else {
		registry.PublicNetworkAccess = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignProperties_From_Sku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku() to populate field Sku")
		}
		registry.Sku = &sku
	} else {
		registry.Sku = nil
	}

	// Tags
	registry.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// ZoneRedundancy
	if source.ZoneRedundancy != nil {
		zoneRedundancy := RegistryProperties_ZoneRedundancy(*source.ZoneRedundancy)
		registry.ZoneRedundancy = &zoneRedundancy
	} else {
		registry.ZoneRedundancy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Registry_Spec populates the provided destination Registry_Spec from our Registry_Spec
func (registry *Registry_Spec) AssignProperties_To_Registry_Spec(destination *v20210901s.Registry_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdminUserEnabled
	if registry.AdminUserEnabled != nil {
		adminUserEnabled := *registry.AdminUserEnabled
		destination.AdminUserEnabled = &adminUserEnabled
	} else {
		destination.AdminUserEnabled = nil
	}

	// AzureName
	destination.AzureName = registry.AzureName

	// DataEndpointEnabled
	if registry.DataEndpointEnabled != nil {
		dataEndpointEnabled := *registry.DataEndpointEnabled
		destination.DataEndpointEnabled = &dataEndpointEnabled
	} else {
		destination.DataEndpointEnabled = nil
	}

	// Encryption
	if registry.Encryption != nil {
		var encryption v20210901s.EncryptionProperty
		err := registry.Encryption.AssignProperties_To_EncryptionProperty(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EncryptionProperty() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if registry.Identity != nil {
		var identity v20210901s.IdentityProperties
		err := registry.Identity.AssignProperties_To_IdentityProperties(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_IdentityProperties() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(registry.Location)

	// NetworkRuleBypassOptions
	if registry.NetworkRuleBypassOptions != nil {
		networkRuleBypassOption := string(*registry.NetworkRuleBypassOptions)
		destination.NetworkRuleBypassOptions = &networkRuleBypassOption
	} else {
		destination.NetworkRuleBypassOptions = nil
	}

	// NetworkRuleSet
	if registry.NetworkRuleSet != nil {
		var networkRuleSet v20210901s.NetworkRuleSet
		err := registry.NetworkRuleSet.AssignProperties_To_NetworkRuleSet(&networkRuleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NetworkRuleSet() to populate field NetworkRuleSet")
		}
		destination.NetworkRuleSet = &networkRuleSet
	} else {
		destination.NetworkRuleSet = nil
	}

	// OriginalVersion
	destination.OriginalVersion = registry.OriginalVersion()

	// Owner
	if registry.Owner != nil {
		owner := registry.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Policies
	if registry.Policies != nil {
		var policy v20210901s.Policies
		err := registry.Policies.AssignProperties_To_Policies(&policy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Policies() to populate field Policies")
		}
		destination.Policies = &policy
	} else {
		destination.Policies = nil
	}

	// PublicNetworkAccess
	if registry.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*registry.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Sku
	if registry.Sku != nil {
		var sku v20210901s.Sku
		err := registry.Sku.AssignProperties_To_Sku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(registry.Tags)

	// ZoneRedundancy
	if registry.ZoneRedundancy != nil {
		zoneRedundancy := string(*registry.ZoneRedundancy)
		destination.ZoneRedundancy = &zoneRedundancy
	} else {
		destination.ZoneRedundancy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (registry *Registry_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (registry *Registry_Spec) SetAzureName(azureName string) { registry.AzureName = azureName }

// Deprecated version of Registry_STATUS. Use v1api20210901.Registry_STATUS instead
type Registry_STATUS struct {
	AdminUserEnabled *bool `json:"adminUserEnabled,omitempty"`

	// Conditions: The observed state of the resource
	Conditions                 []conditions.Condition                              `json:"conditions,omitempty"`
	CreationDate               *string                                             `json:"creationDate,omitempty"`
	DataEndpointEnabled        *bool                                               `json:"dataEndpointEnabled,omitempty"`
	DataEndpointHostNames      []string                                            `json:"dataEndpointHostNames,omitempty"`
	Encryption                 *EncryptionProperty_STATUS                          `json:"encryption,omitempty"`
	Id                         *string                                             `json:"id,omitempty"`
	Identity                   *IdentityProperties_STATUS                          `json:"identity,omitempty"`
	Location                   *string                                             `json:"location,omitempty"`
	LoginServer                *string                                             `json:"loginServer,omitempty"`
	Name                       *string                                             `json:"name,omitempty"`
	NetworkRuleBypassOptions   *RegistryProperties_NetworkRuleBypassOptions_STATUS `json:"networkRuleBypassOptions,omitempty"`
	NetworkRuleSet             *NetworkRuleSet_STATUS                              `json:"networkRuleSet,omitempty"`
	Policies                   *Policies_STATUS                                    `json:"policies,omitempty"`
	PrivateEndpointConnections []PrivateEndpointConnection_STATUS                  `json:"privateEndpointConnections,omitempty"`
	ProvisioningState          *RegistryProperties_ProvisioningState_STATUS        `json:"provisioningState,omitempty"`
	PublicNetworkAccess        *RegistryProperties_PublicNetworkAccess_STATUS      `json:"publicNetworkAccess,omitempty"`
	Sku                        *Sku_STATUS                                         `json:"sku,omitempty"`
	Status                     *Status_STATUS                                      `json:"status,omitempty"`
	SystemData                 *SystemData_STATUS                                  `json:"systemData,omitempty"`
	Tags                       map[string]string                                   `json:"tags,omitempty"`
	Type                       *string                                             `json:"type,omitempty"`
	ZoneRedundancy             *RegistryProperties_ZoneRedundancy_STATUS           `json:"zoneRedundancy,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Registry_STATUS{}

// ConvertStatusFrom populates our Registry_STATUS from the provided source
func (registry *Registry_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210901s.Registry_STATUS)
	if ok {
		// Populate our instance from source
		return registry.AssignProperties_From_Registry_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210901s.Registry_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = registry.AssignProperties_From_Registry_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Registry_STATUS
func (registry *Registry_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210901s.Registry_STATUS)
	if ok {
		// Populate destination from our instance
		return registry.AssignProperties_To_Registry_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210901s.Registry_STATUS{}
	err := registry.AssignProperties_To_Registry_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Registry_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (registry *Registry_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Registry_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (registry *Registry_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Registry_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Registry_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘AdminUserEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AdminUserEnabled != nil {
			adminUserEnabled := *typedInput.Properties.AdminUserEnabled
			registry.AdminUserEnabled = &adminUserEnabled
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreationDate’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationDate != nil {
			creationDate := *typedInput.Properties.CreationDate
			registry.CreationDate = &creationDate
		}
	}

	// Set property ‘DataEndpointEnabled’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DataEndpointEnabled != nil {
			dataEndpointEnabled := *typedInput.Properties.DataEndpointEnabled
			registry.DataEndpointEnabled = &dataEndpointEnabled
		}
	}

	// Set property ‘DataEndpointHostNames’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DataEndpointHostNames {
			registry.DataEndpointHostNames = append(registry.DataEndpointHostNames, item)
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperty_STATUS
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			registry.Encryption = &encryption
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		registry.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 IdentityProperties_STATUS
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		registry.Identity = &identity
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		registry.Location = &location
	}

	// Set property ‘LoginServer’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LoginServer != nil {
			loginServer := *typedInput.Properties.LoginServer
			registry.LoginServer = &loginServer
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		registry.Name = &name
	}

	// Set property ‘NetworkRuleBypassOptions’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkRuleBypassOptions != nil {
			networkRuleBypassOptions := *typedInput.Properties.NetworkRuleBypassOptions
			registry.NetworkRuleBypassOptions = &networkRuleBypassOptions
		}
	}

	// Set property ‘NetworkRuleSet’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.NetworkRuleSet != nil {
			var networkRuleSet1 NetworkRuleSet_STATUS
			err := networkRuleSet1.PopulateFromARM(owner, *typedInput.Properties.NetworkRuleSet)
			if err != nil {
				return err
			}
			networkRuleSet := networkRuleSet1
			registry.NetworkRuleSet = &networkRuleSet
		}
	}

	// Set property ‘Policies’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Policies != nil {
			var policies1 Policies_STATUS
			err := policies1.PopulateFromARM(owner, *typedInput.Properties.Policies)
			if err != nil {
				return err
			}
			policies := policies1
			registry.Policies = &policies
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			registry.PrivateEndpointConnections = append(registry.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			registry.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			registry.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		registry.Sku = &sku
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			var status1 Status_STATUS
			err := status1.PopulateFromARM(owner, *typedInput.Properties.Status)
			if err != nil {
				return err
			}
			status := status1
			registry.Status = &status
		}
	}

	// Set property ‘SystemData’:
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		registry.SystemData = &systemData
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		registry.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			registry.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		registry.Type = &typeVar
	}

	// Set property ‘ZoneRedundancy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundancy != nil {
			zoneRedundancy := *typedInput.Properties.ZoneRedundancy
			registry.ZoneRedundancy = &zoneRedundancy
		}
	}

	// No error
	return nil
}

// AssignProperties_From_Registry_STATUS populates our Registry_STATUS from the provided source Registry_STATUS
func (registry *Registry_STATUS) AssignProperties_From_Registry_STATUS(source *v20210901s.Registry_STATUS) error {

	// AdminUserEnabled
	if source.AdminUserEnabled != nil {
		adminUserEnabled := *source.AdminUserEnabled
		registry.AdminUserEnabled = &adminUserEnabled
	} else {
		registry.AdminUserEnabled = nil
	}

	// Conditions
	registry.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreationDate
	registry.CreationDate = genruntime.ClonePointerToString(source.CreationDate)

	// DataEndpointEnabled
	if source.DataEndpointEnabled != nil {
		dataEndpointEnabled := *source.DataEndpointEnabled
		registry.DataEndpointEnabled = &dataEndpointEnabled
	} else {
		registry.DataEndpointEnabled = nil
	}

	// DataEndpointHostNames
	registry.DataEndpointHostNames = genruntime.CloneSliceOfString(source.DataEndpointHostNames)

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperty_STATUS
		err := encryption.AssignProperties_From_EncryptionProperty_STATUS(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_EncryptionProperty_STATUS() to populate field Encryption")
		}
		registry.Encryption = &encryption
	} else {
		registry.Encryption = nil
	}

	// Id
	registry.Id = genruntime.ClonePointerToString(source.Id)

	// Identity
	if source.Identity != nil {
		var identity IdentityProperties_STATUS
		err := identity.AssignProperties_From_IdentityProperties_STATUS(source.Identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_IdentityProperties_STATUS() to populate field Identity")
		}
		registry.Identity = &identity
	} else {
		registry.Identity = nil
	}

	// Location
	registry.Location = genruntime.ClonePointerToString(source.Location)

	// LoginServer
	registry.LoginServer = genruntime.ClonePointerToString(source.LoginServer)

	// Name
	registry.Name = genruntime.ClonePointerToString(source.Name)

	// NetworkRuleBypassOptions
	if source.NetworkRuleBypassOptions != nil {
		networkRuleBypassOption := RegistryProperties_NetworkRuleBypassOptions_STATUS(*source.NetworkRuleBypassOptions)
		registry.NetworkRuleBypassOptions = &networkRuleBypassOption
	} else {
		registry.NetworkRuleBypassOptions = nil
	}

	// NetworkRuleSet
	if source.NetworkRuleSet != nil {
		var networkRuleSet NetworkRuleSet_STATUS
		err := networkRuleSet.AssignProperties_From_NetworkRuleSet_STATUS(source.NetworkRuleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_NetworkRuleSet_STATUS() to populate field NetworkRuleSet")
		}
		registry.NetworkRuleSet = &networkRuleSet
	} else {
		registry.NetworkRuleSet = nil
	}

	// Policies
	if source.Policies != nil {
		var policy Policies_STATUS
		err := policy.AssignProperties_From_Policies_STATUS(source.Policies)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Policies_STATUS() to populate field Policies")
		}
		registry.Policies = &policy
	} else {
		registry.Policies = nil
	}

	// PrivateEndpointConnections
	if source.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]PrivateEndpointConnection_STATUS, len(source.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection PrivateEndpointConnection_STATUS
			err := privateEndpointConnection.AssignProperties_From_PrivateEndpointConnection_STATUS(&privateEndpointConnectionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_PrivateEndpointConnection_STATUS() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		registry.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		registry.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := RegistryProperties_ProvisioningState_STATUS(*source.ProvisioningState)
		registry.ProvisioningState = &provisioningState
	} else {
		registry.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := RegistryProperties_PublicNetworkAccess_STATUS(*source.PublicNetworkAccess)
		registry.PublicNetworkAccess = &publicNetworkAccess
	} else {
		registry.PublicNetworkAccess = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
		err := sku.AssignProperties_From_Sku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku_STATUS() to populate field Sku")
		}
		registry.Sku = &sku
	} else {
		registry.Sku = nil
	}

	// Status
	if source.Status != nil {
		var status Status_STATUS
		err := status.AssignProperties_From_Status_STATUS(source.Status)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Status_STATUS() to populate field Status")
		}
		registry.Status = &status
	} else {
		registry.Status = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		registry.SystemData = &systemDatum
	} else {
		registry.SystemData = nil
	}

	// Tags
	registry.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	registry.Type = genruntime.ClonePointerToString(source.Type)

	// ZoneRedundancy
	if source.ZoneRedundancy != nil {
		zoneRedundancy := RegistryProperties_ZoneRedundancy_STATUS(*source.ZoneRedundancy)
		registry.ZoneRedundancy = &zoneRedundancy
	} else {
		registry.ZoneRedundancy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Registry_STATUS populates the provided destination Registry_STATUS from our Registry_STATUS
func (registry *Registry_STATUS) AssignProperties_To_Registry_STATUS(destination *v20210901s.Registry_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AdminUserEnabled
	if registry.AdminUserEnabled != nil {
		adminUserEnabled := *registry.AdminUserEnabled
		destination.AdminUserEnabled = &adminUserEnabled
	} else {
		destination.AdminUserEnabled = nil
	}

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(registry.Conditions)

	// CreationDate
	destination.CreationDate = genruntime.ClonePointerToString(registry.CreationDate)

	// DataEndpointEnabled
	if registry.DataEndpointEnabled != nil {
		dataEndpointEnabled := *registry.DataEndpointEnabled
		destination.DataEndpointEnabled = &dataEndpointEnabled
	} else {
		destination.DataEndpointEnabled = nil
	}

	// DataEndpointHostNames
	destination.DataEndpointHostNames = genruntime.CloneSliceOfString(registry.DataEndpointHostNames)

	// Encryption
	if registry.Encryption != nil {
		var encryption v20210901s.EncryptionProperty_STATUS
		err := registry.Encryption.AssignProperties_To_EncryptionProperty_STATUS(&encryption)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_EncryptionProperty_STATUS() to populate field Encryption")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(registry.Id)

	// Identity
	if registry.Identity != nil {
		var identity v20210901s.IdentityProperties_STATUS
		err := registry.Identity.AssignProperties_To_IdentityProperties_STATUS(&identity)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_IdentityProperties_STATUS() to populate field Identity")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// Location
	destination.Location = genruntime.ClonePointerToString(registry.Location)

	// LoginServer
	destination.LoginServer = genruntime.ClonePointerToString(registry.LoginServer)

	// Name
	destination.Name = genruntime.ClonePointerToString(registry.Name)

	// NetworkRuleBypassOptions
	if registry.NetworkRuleBypassOptions != nil {
		networkRuleBypassOption := string(*registry.NetworkRuleBypassOptions)
		destination.NetworkRuleBypassOptions = &networkRuleBypassOption
	} else {
		destination.NetworkRuleBypassOptions = nil
	}

	// NetworkRuleSet
	if registry.NetworkRuleSet != nil {
		var networkRuleSet v20210901s.NetworkRuleSet_STATUS
		err := registry.NetworkRuleSet.AssignProperties_To_NetworkRuleSet_STATUS(&networkRuleSet)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_NetworkRuleSet_STATUS() to populate field NetworkRuleSet")
		}
		destination.NetworkRuleSet = &networkRuleSet
	} else {
		destination.NetworkRuleSet = nil
	}

	// Policies
	if registry.Policies != nil {
		var policy v20210901s.Policies_STATUS
		err := registry.Policies.AssignProperties_To_Policies_STATUS(&policy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Policies_STATUS() to populate field Policies")
		}
		destination.Policies = &policy
	} else {
		destination.Policies = nil
	}

	// PrivateEndpointConnections
	if registry.PrivateEndpointConnections != nil {
		privateEndpointConnectionList := make([]v20210901s.PrivateEndpointConnection_STATUS, len(registry.PrivateEndpointConnections))
		for privateEndpointConnectionIndex, privateEndpointConnectionItem := range registry.PrivateEndpointConnections {
			// Shadow the loop variable to avoid aliasing
			privateEndpointConnectionItem := privateEndpointConnectionItem
			var privateEndpointConnection v20210901s.PrivateEndpointConnection_STATUS
			err := privateEndpointConnectionItem.AssignProperties_To_PrivateEndpointConnection_STATUS(&privateEndpointConnection)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_PrivateEndpointConnection_STATUS() to populate field PrivateEndpointConnections")
			}
			privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
		}
		destination.PrivateEndpointConnections = privateEndpointConnectionList
	} else {
		destination.PrivateEndpointConnections = nil
	}

	// ProvisioningState
	if registry.ProvisioningState != nil {
		provisioningState := string(*registry.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if registry.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*registry.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Sku
	if registry.Sku != nil {
		var sku v20210901s.Sku_STATUS
		err := registry.Sku.AssignProperties_To_Sku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku_STATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// Status
	if registry.Status != nil {
		var status v20210901s.Status_STATUS
		err := registry.Status.AssignProperties_To_Status_STATUS(&status)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Status_STATUS() to populate field Status")
		}
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// SystemData
	if registry.SystemData != nil {
		var systemDatum v20210901s.SystemData_STATUS
		err := registry.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(registry.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(registry.Type)

	// ZoneRedundancy
	if registry.ZoneRedundancy != nil {
		zoneRedundancy := string(*registry.ZoneRedundancy)
		destination.ZoneRedundancy = &zoneRedundancy
	} else {
		destination.ZoneRedundancy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionProperty. Use v1api20210901.EncryptionProperty instead
type EncryptionProperty struct {
	KeyVaultProperties *KeyVaultProperties        `json:"keyVaultProperties,omitempty"`
	Status             *EncryptionProperty_Status `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionProperty{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (property *EncryptionProperty) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if property == nil {
		return nil, nil
	}
	result := &EncryptionProperty_ARM{}

	// Set property ‘KeyVaultProperties’:
	if property.KeyVaultProperties != nil {
		keyVaultProperties_ARM, err := (*property.KeyVaultProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultProperties := *keyVaultProperties_ARM.(*KeyVaultProperties_ARM)
		result.KeyVaultProperties = &keyVaultProperties
	}

	// Set property ‘Status’:
	if property.Status != nil {
		status := *property.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *EncryptionProperty) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionProperty_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *EncryptionProperty) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionProperty_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionProperty_ARM, got %T", armInput)
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		property.KeyVaultProperties = &keyVaultProperties
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		property.Status = &status
	}

	// No error
	return nil
}

// AssignProperties_From_EncryptionProperty populates our EncryptionProperty from the provided source EncryptionProperty
func (property *EncryptionProperty) AssignProperties_From_EncryptionProperty(source *v20210901s.EncryptionProperty) error {

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties
		err := keyVaultProperty.AssignProperties_From_KeyVaultProperties(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_KeyVaultProperties() to populate field KeyVaultProperties")
		}
		property.KeyVaultProperties = &keyVaultProperty
	} else {
		property.KeyVaultProperties = nil
	}

	// Status
	if source.Status != nil {
		status := EncryptionProperty_Status(*source.Status)
		property.Status = &status
	} else {
		property.Status = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EncryptionProperty populates the provided destination EncryptionProperty from our EncryptionProperty
func (property *EncryptionProperty) AssignProperties_To_EncryptionProperty(destination *v20210901s.EncryptionProperty) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyVaultProperties
	if property.KeyVaultProperties != nil {
		var keyVaultProperty v20210901s.KeyVaultProperties
		err := property.KeyVaultProperties.AssignProperties_To_KeyVaultProperties(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_KeyVaultProperties() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Status
	if property.Status != nil {
		status := string(*property.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionProperty_STATUS. Use v1api20210901.EncryptionProperty_STATUS instead
type EncryptionProperty_STATUS struct {
	KeyVaultProperties *KeyVaultProperties_STATUS        `json:"keyVaultProperties,omitempty"`
	Status             *EncryptionProperty_Status_STATUS `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionProperty_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (property *EncryptionProperty_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionProperty_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (property *EncryptionProperty_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionProperty_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionProperty_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties_STATUS
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		property.KeyVaultProperties = &keyVaultProperties
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		property.Status = &status
	}

	// No error
	return nil
}

// AssignProperties_From_EncryptionProperty_STATUS populates our EncryptionProperty_STATUS from the provided source EncryptionProperty_STATUS
func (property *EncryptionProperty_STATUS) AssignProperties_From_EncryptionProperty_STATUS(source *v20210901s.EncryptionProperty_STATUS) error {

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties_STATUS
		err := keyVaultProperty.AssignProperties_From_KeyVaultProperties_STATUS(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_KeyVaultProperties_STATUS() to populate field KeyVaultProperties")
		}
		property.KeyVaultProperties = &keyVaultProperty
	} else {
		property.KeyVaultProperties = nil
	}

	// Status
	if source.Status != nil {
		status := EncryptionProperty_Status_STATUS(*source.Status)
		property.Status = &status
	} else {
		property.Status = nil
	}

	// No error
	return nil
}

// AssignProperties_To_EncryptionProperty_STATUS populates the provided destination EncryptionProperty_STATUS from our EncryptionProperty_STATUS
func (property *EncryptionProperty_STATUS) AssignProperties_To_EncryptionProperty_STATUS(destination *v20210901s.EncryptionProperty_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyVaultProperties
	if property.KeyVaultProperties != nil {
		var keyVaultProperty v20210901s.KeyVaultProperties_STATUS
		err := property.KeyVaultProperties.AssignProperties_To_KeyVaultProperties_STATUS(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_KeyVaultProperties_STATUS() to populate field KeyVaultProperties")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Status
	if property.Status != nil {
		status := string(*property.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IdentityProperties. Use v1api20210901.IdentityProperties instead
type IdentityProperties struct {
	PrincipalId            *string                       `json:"principalId,omitempty"`
	TenantId               *string                       `json:"tenantId,omitempty"`
	Type                   *IdentityProperties_Type      `json:"type,omitempty"`
	UserAssignedIdentities []UserAssignedIdentityDetails `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.ARMTransformer = &IdentityProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *IdentityProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &IdentityProperties_ARM{}

	// Set property ‘PrincipalId’:
	if properties.PrincipalId != nil {
		principalId := *properties.PrincipalId
		result.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if properties.TenantId != nil {
		tenantId := *properties.TenantId
		result.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if properties.Type != nil {
		typeVar := *properties.Type
		result.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	result.UserAssignedIdentities = make(map[string]UserAssignedIdentityDetails_ARM, len(properties.UserAssignedIdentities))
	for _, ident := range properties.UserAssignedIdentities {
		identARMID, err := resolved.ResolvedReferences.Lookup(ident.Reference)
		if err != nil {
			return nil, err
		}
		key := identARMID
		result.UserAssignedIdentities[key] = UserAssignedIdentityDetails_ARM{}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *IdentityProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityProperties_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *IdentityProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityProperties_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityProperties_ARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		properties.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		properties.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		properties.Type = &typeVar
	}

	// no assignment for property ‘UserAssignedIdentities’

	// No error
	return nil
}

// AssignProperties_From_IdentityProperties populates our IdentityProperties from the provided source IdentityProperties
func (properties *IdentityProperties) AssignProperties_From_IdentityProperties(source *v20210901s.IdentityProperties) error {

	// PrincipalId
	properties.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	properties.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := IdentityProperties_Type(*source.Type)
		properties.Type = &typeVar
	} else {
		properties.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityList := make([]UserAssignedIdentityDetails, len(source.UserAssignedIdentities))
		for userAssignedIdentityIndex, userAssignedIdentityItem := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityItem := userAssignedIdentityItem
			var userAssignedIdentity UserAssignedIdentityDetails
			err := userAssignedIdentity.AssignProperties_From_UserAssignedIdentityDetails(&userAssignedIdentityItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_UserAssignedIdentityDetails() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityList[userAssignedIdentityIndex] = userAssignedIdentity
		}
		properties.UserAssignedIdentities = userAssignedIdentityList
	} else {
		properties.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignProperties_To_IdentityProperties populates the provided destination IdentityProperties from our IdentityProperties
func (properties *IdentityProperties) AssignProperties_To_IdentityProperties(destination *v20210901s.IdentityProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(properties.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(properties.TenantId)

	// Type
	if properties.Type != nil {
		typeVar := string(*properties.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if properties.UserAssignedIdentities != nil {
		userAssignedIdentityList := make([]v20210901s.UserAssignedIdentityDetails, len(properties.UserAssignedIdentities))
		for userAssignedIdentityIndex, userAssignedIdentityItem := range properties.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityItem := userAssignedIdentityItem
			var userAssignedIdentity v20210901s.UserAssignedIdentityDetails
			err := userAssignedIdentityItem.AssignProperties_To_UserAssignedIdentityDetails(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_UserAssignedIdentityDetails() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityList[userAssignedIdentityIndex] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityList
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IdentityProperties_STATUS. Use v1api20210901.IdentityProperties_STATUS instead
type IdentityProperties_STATUS struct {
	PrincipalId            *string                                  `json:"principalId,omitempty"`
	TenantId               *string                                  `json:"tenantId,omitempty"`
	Type                   *IdentityProperties_Type_STATUS          `json:"type,omitempty"`
	UserAssignedIdentities map[string]UserIdentityProperties_STATUS `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &IdentityProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *IdentityProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IdentityProperties_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *IdentityProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IdentityProperties_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IdentityProperties_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		properties.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		properties.TenantId = &tenantId
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		properties.Type = &typeVar
	}

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		properties.UserAssignedIdentities = make(map[string]UserIdentityProperties_STATUS, len(typedInput.UserAssignedIdentities))
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 UserIdentityProperties_STATUS
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			properties.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignProperties_From_IdentityProperties_STATUS populates our IdentityProperties_STATUS from the provided source IdentityProperties_STATUS
func (properties *IdentityProperties_STATUS) AssignProperties_From_IdentityProperties_STATUS(source *v20210901s.IdentityProperties_STATUS) error {

	// PrincipalId
	properties.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// TenantId
	properties.TenantId = genruntime.ClonePointerToString(source.TenantId)

	// Type
	if source.Type != nil {
		typeVar := IdentityProperties_Type_STATUS(*source.Type)
		properties.Type = &typeVar
	} else {
		properties.Type = nil
	}

	// UserAssignedIdentities
	if source.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]UserIdentityProperties_STATUS, len(source.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity UserIdentityProperties_STATUS
			err := userAssignedIdentity.AssignProperties_From_UserIdentityProperties_STATUS(&userAssignedIdentityValue)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_UserIdentityProperties_STATUS() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		properties.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		properties.UserAssignedIdentities = nil
	}

	// No error
	return nil
}

// AssignProperties_To_IdentityProperties_STATUS populates the provided destination IdentityProperties_STATUS from our IdentityProperties_STATUS
func (properties *IdentityProperties_STATUS) AssignProperties_To_IdentityProperties_STATUS(destination *v20210901s.IdentityProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(properties.PrincipalId)

	// TenantId
	destination.TenantId = genruntime.ClonePointerToString(properties.TenantId)

	// Type
	if properties.Type != nil {
		typeVar := string(*properties.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// UserAssignedIdentities
	if properties.UserAssignedIdentities != nil {
		userAssignedIdentityMap := make(map[string]v20210901s.UserIdentityProperties_STATUS, len(properties.UserAssignedIdentities))
		for userAssignedIdentityKey, userAssignedIdentityValue := range properties.UserAssignedIdentities {
			// Shadow the loop variable to avoid aliasing
			userAssignedIdentityValue := userAssignedIdentityValue
			var userAssignedIdentity v20210901s.UserIdentityProperties_STATUS
			err := userAssignedIdentityValue.AssignProperties_To_UserIdentityProperties_STATUS(&userAssignedIdentity)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_UserIdentityProperties_STATUS() to populate field UserAssignedIdentities")
			}
			userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
		}
		destination.UserAssignedIdentities = userAssignedIdentityMap
	} else {
		destination.UserAssignedIdentities = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NetworkRuleSet. Use v1api20210901.NetworkRuleSet instead
type NetworkRuleSet struct {
	// +kubebuilder:validation:Required
	DefaultAction *NetworkRuleSet_DefaultAction `json:"defaultAction,omitempty"`
	IpRules       []IPRule                      `json:"ipRules,omitempty"`
}

var _ genruntime.ARMTransformer = &NetworkRuleSet{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (ruleSet *NetworkRuleSet) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if ruleSet == nil {
		return nil, nil
	}
	result := &NetworkRuleSet_ARM{}

	// Set property ‘DefaultAction’:
	if ruleSet.DefaultAction != nil {
		defaultAction := *ruleSet.DefaultAction
		result.DefaultAction = &defaultAction
	}

	// Set property ‘IpRules’:
	for _, item := range ruleSet.IpRules {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.IpRules = append(result.IpRules, *item_ARM.(*IPRule_ARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSet_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSet_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSet_ARM, got %T", armInput)
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		ruleSet.DefaultAction = &defaultAction
	}

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_NetworkRuleSet populates our NetworkRuleSet from the provided source NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignProperties_From_NetworkRuleSet(source *v20210901s.NetworkRuleSet) error {

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := NetworkRuleSet_DefaultAction(*source.DefaultAction)
		ruleSet.DefaultAction = &defaultAction
	} else {
		ruleSet.DefaultAction = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule
			err := ipRule.AssignProperties_From_IPRule(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_IPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NetworkRuleSet populates the provided destination NetworkRuleSet from our NetworkRuleSet
func (ruleSet *NetworkRuleSet) AssignProperties_To_NetworkRuleSet(destination *v20210901s.NetworkRuleSet) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultAction
	if ruleSet.DefaultAction != nil {
		defaultAction := string(*ruleSet.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v20210901s.IPRule, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v20210901s.IPRule
			err := ipRuleItem.AssignProperties_To_IPRule(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_IPRule() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NetworkRuleSet_STATUS. Use v1api20210901.NetworkRuleSet_STATUS instead
type NetworkRuleSet_STATUS struct {
	DefaultAction *NetworkRuleSet_DefaultAction_STATUS `json:"defaultAction,omitempty"`
	IpRules       []IPRule_STATUS                      `json:"ipRules,omitempty"`
}

var _ genruntime.FromARMConverter = &NetworkRuleSet_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (ruleSet *NetworkRuleSet_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &NetworkRuleSet_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (ruleSet *NetworkRuleSet_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(NetworkRuleSet_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected NetworkRuleSet_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘DefaultAction’:
	if typedInput.DefaultAction != nil {
		defaultAction := *typedInput.DefaultAction
		ruleSet.DefaultAction = &defaultAction
	}

	// Set property ‘IpRules’:
	for _, item := range typedInput.IpRules {
		var item1 IPRule_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		ruleSet.IpRules = append(ruleSet.IpRules, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_NetworkRuleSet_STATUS populates our NetworkRuleSet_STATUS from the provided source NetworkRuleSet_STATUS
func (ruleSet *NetworkRuleSet_STATUS) AssignProperties_From_NetworkRuleSet_STATUS(source *v20210901s.NetworkRuleSet_STATUS) error {

	// DefaultAction
	if source.DefaultAction != nil {
		defaultAction := NetworkRuleSet_DefaultAction_STATUS(*source.DefaultAction)
		ruleSet.DefaultAction = &defaultAction
	} else {
		ruleSet.DefaultAction = nil
	}

	// IpRules
	if source.IpRules != nil {
		ipRuleList := make([]IPRule_STATUS, len(source.IpRules))
		for ipRuleIndex, ipRuleItem := range source.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule IPRule_STATUS
			err := ipRule.AssignProperties_From_IPRule_STATUS(&ipRuleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_IPRule_STATUS() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		ruleSet.IpRules = ipRuleList
	} else {
		ruleSet.IpRules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_NetworkRuleSet_STATUS populates the provided destination NetworkRuleSet_STATUS from our NetworkRuleSet_STATUS
func (ruleSet *NetworkRuleSet_STATUS) AssignProperties_To_NetworkRuleSet_STATUS(destination *v20210901s.NetworkRuleSet_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DefaultAction
	if ruleSet.DefaultAction != nil {
		defaultAction := string(*ruleSet.DefaultAction)
		destination.DefaultAction = &defaultAction
	} else {
		destination.DefaultAction = nil
	}

	// IpRules
	if ruleSet.IpRules != nil {
		ipRuleList := make([]v20210901s.IPRule_STATUS, len(ruleSet.IpRules))
		for ipRuleIndex, ipRuleItem := range ruleSet.IpRules {
			// Shadow the loop variable to avoid aliasing
			ipRuleItem := ipRuleItem
			var ipRule v20210901s.IPRule_STATUS
			err := ipRuleItem.AssignProperties_To_IPRule_STATUS(&ipRule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_IPRule_STATUS() to populate field IpRules")
			}
			ipRuleList[ipRuleIndex] = ipRule
		}
		destination.IpRules = ipRuleList
	} else {
		destination.IpRules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Policies. Use v1api20210901.Policies instead
type Policies struct {
	ExportPolicy     *ExportPolicy     `json:"exportPolicy,omitempty"`
	QuarantinePolicy *QuarantinePolicy `json:"quarantinePolicy,omitempty"`
	RetentionPolicy  *RetentionPolicy  `json:"retentionPolicy,omitempty"`
	TrustPolicy      *TrustPolicy      `json:"trustPolicy,omitempty"`
}

var _ genruntime.ARMTransformer = &Policies{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policies *Policies) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policies == nil {
		return nil, nil
	}
	result := &Policies_ARM{}

	// Set property ‘ExportPolicy’:
	if policies.ExportPolicy != nil {
		exportPolicy_ARM, err := (*policies.ExportPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		exportPolicy := *exportPolicy_ARM.(*ExportPolicy_ARM)
		result.ExportPolicy = &exportPolicy
	}

	// Set property ‘QuarantinePolicy’:
	if policies.QuarantinePolicy != nil {
		quarantinePolicy_ARM, err := (*policies.QuarantinePolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		quarantinePolicy := *quarantinePolicy_ARM.(*QuarantinePolicy_ARM)
		result.QuarantinePolicy = &quarantinePolicy
	}

	// Set property ‘RetentionPolicy’:
	if policies.RetentionPolicy != nil {
		retentionPolicy_ARM, err := (*policies.RetentionPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		retentionPolicy := *retentionPolicy_ARM.(*RetentionPolicy_ARM)
		result.RetentionPolicy = &retentionPolicy
	}

	// Set property ‘TrustPolicy’:
	if policies.TrustPolicy != nil {
		trustPolicy_ARM, err := (*policies.TrustPolicy).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		trustPolicy := *trustPolicy_ARM.(*TrustPolicy_ARM)
		result.TrustPolicy = &trustPolicy
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policies *Policies) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Policies_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policies *Policies) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Policies_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Policies_ARM, got %T", armInput)
	}

	// Set property ‘ExportPolicy’:
	if typedInput.ExportPolicy != nil {
		var exportPolicy1 ExportPolicy
		err := exportPolicy1.PopulateFromARM(owner, *typedInput.ExportPolicy)
		if err != nil {
			return err
		}
		exportPolicy := exportPolicy1
		policies.ExportPolicy = &exportPolicy
	}

	// Set property ‘QuarantinePolicy’:
	if typedInput.QuarantinePolicy != nil {
		var quarantinePolicy1 QuarantinePolicy
		err := quarantinePolicy1.PopulateFromARM(owner, *typedInput.QuarantinePolicy)
		if err != nil {
			return err
		}
		quarantinePolicy := quarantinePolicy1
		policies.QuarantinePolicy = &quarantinePolicy
	}

	// Set property ‘RetentionPolicy’:
	if typedInput.RetentionPolicy != nil {
		var retentionPolicy1 RetentionPolicy
		err := retentionPolicy1.PopulateFromARM(owner, *typedInput.RetentionPolicy)
		if err != nil {
			return err
		}
		retentionPolicy := retentionPolicy1
		policies.RetentionPolicy = &retentionPolicy
	}

	// Set property ‘TrustPolicy’:
	if typedInput.TrustPolicy != nil {
		var trustPolicy1 TrustPolicy
		err := trustPolicy1.PopulateFromARM(owner, *typedInput.TrustPolicy)
		if err != nil {
			return err
		}
		trustPolicy := trustPolicy1
		policies.TrustPolicy = &trustPolicy
	}

	// No error
	return nil
}

// AssignProperties_From_Policies populates our Policies from the provided source Policies
func (policies *Policies) AssignProperties_From_Policies(source *v20210901s.Policies) error {

	// ExportPolicy
	if source.ExportPolicy != nil {
		var exportPolicy ExportPolicy
		err := exportPolicy.AssignProperties_From_ExportPolicy(source.ExportPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ExportPolicy() to populate field ExportPolicy")
		}
		policies.ExportPolicy = &exportPolicy
	} else {
		policies.ExportPolicy = nil
	}

	// QuarantinePolicy
	if source.QuarantinePolicy != nil {
		var quarantinePolicy QuarantinePolicy
		err := quarantinePolicy.AssignProperties_From_QuarantinePolicy(source.QuarantinePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_QuarantinePolicy() to populate field QuarantinePolicy")
		}
		policies.QuarantinePolicy = &quarantinePolicy
	} else {
		policies.QuarantinePolicy = nil
	}

	// RetentionPolicy
	if source.RetentionPolicy != nil {
		var retentionPolicy RetentionPolicy
		err := retentionPolicy.AssignProperties_From_RetentionPolicy(source.RetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RetentionPolicy() to populate field RetentionPolicy")
		}
		policies.RetentionPolicy = &retentionPolicy
	} else {
		policies.RetentionPolicy = nil
	}

	// TrustPolicy
	if source.TrustPolicy != nil {
		var trustPolicy TrustPolicy
		err := trustPolicy.AssignProperties_From_TrustPolicy(source.TrustPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_TrustPolicy() to populate field TrustPolicy")
		}
		policies.TrustPolicy = &trustPolicy
	} else {
		policies.TrustPolicy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Policies populates the provided destination Policies from our Policies
func (policies *Policies) AssignProperties_To_Policies(destination *v20210901s.Policies) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExportPolicy
	if policies.ExportPolicy != nil {
		var exportPolicy v20210901s.ExportPolicy
		err := policies.ExportPolicy.AssignProperties_To_ExportPolicy(&exportPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ExportPolicy() to populate field ExportPolicy")
		}
		destination.ExportPolicy = &exportPolicy
	} else {
		destination.ExportPolicy = nil
	}

	// QuarantinePolicy
	if policies.QuarantinePolicy != nil {
		var quarantinePolicy v20210901s.QuarantinePolicy
		err := policies.QuarantinePolicy.AssignProperties_To_QuarantinePolicy(&quarantinePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_QuarantinePolicy() to populate field QuarantinePolicy")
		}
		destination.QuarantinePolicy = &quarantinePolicy
	} else {
		destination.QuarantinePolicy = nil
	}

	// RetentionPolicy
	if policies.RetentionPolicy != nil {
		var retentionPolicy v20210901s.RetentionPolicy
		err := policies.RetentionPolicy.AssignProperties_To_RetentionPolicy(&retentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RetentionPolicy() to populate field RetentionPolicy")
		}
		destination.RetentionPolicy = &retentionPolicy
	} else {
		destination.RetentionPolicy = nil
	}

	// TrustPolicy
	if policies.TrustPolicy != nil {
		var trustPolicy v20210901s.TrustPolicy
		err := policies.TrustPolicy.AssignProperties_To_TrustPolicy(&trustPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_TrustPolicy() to populate field TrustPolicy")
		}
		destination.TrustPolicy = &trustPolicy
	} else {
		destination.TrustPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Policies_STATUS. Use v1api20210901.Policies_STATUS instead
type Policies_STATUS struct {
	ExportPolicy     *ExportPolicy_STATUS     `json:"exportPolicy,omitempty"`
	QuarantinePolicy *QuarantinePolicy_STATUS `json:"quarantinePolicy,omitempty"`
	RetentionPolicy  *RetentionPolicy_STATUS  `json:"retentionPolicy,omitempty"`
	TrustPolicy      *TrustPolicy_STATUS      `json:"trustPolicy,omitempty"`
}

var _ genruntime.FromARMConverter = &Policies_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policies *Policies_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Policies_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policies *Policies_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Policies_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Policies_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘ExportPolicy’:
	if typedInput.ExportPolicy != nil {
		var exportPolicy1 ExportPolicy_STATUS
		err := exportPolicy1.PopulateFromARM(owner, *typedInput.ExportPolicy)
		if err != nil {
			return err
		}
		exportPolicy := exportPolicy1
		policies.ExportPolicy = &exportPolicy
	}

	// Set property ‘QuarantinePolicy’:
	if typedInput.QuarantinePolicy != nil {
		var quarantinePolicy1 QuarantinePolicy_STATUS
		err := quarantinePolicy1.PopulateFromARM(owner, *typedInput.QuarantinePolicy)
		if err != nil {
			return err
		}
		quarantinePolicy := quarantinePolicy1
		policies.QuarantinePolicy = &quarantinePolicy
	}

	// Set property ‘RetentionPolicy’:
	if typedInput.RetentionPolicy != nil {
		var retentionPolicy1 RetentionPolicy_STATUS
		err := retentionPolicy1.PopulateFromARM(owner, *typedInput.RetentionPolicy)
		if err != nil {
			return err
		}
		retentionPolicy := retentionPolicy1
		policies.RetentionPolicy = &retentionPolicy
	}

	// Set property ‘TrustPolicy’:
	if typedInput.TrustPolicy != nil {
		var trustPolicy1 TrustPolicy_STATUS
		err := trustPolicy1.PopulateFromARM(owner, *typedInput.TrustPolicy)
		if err != nil {
			return err
		}
		trustPolicy := trustPolicy1
		policies.TrustPolicy = &trustPolicy
	}

	// No error
	return nil
}

// AssignProperties_From_Policies_STATUS populates our Policies_STATUS from the provided source Policies_STATUS
func (policies *Policies_STATUS) AssignProperties_From_Policies_STATUS(source *v20210901s.Policies_STATUS) error {

	// ExportPolicy
	if source.ExportPolicy != nil {
		var exportPolicy ExportPolicy_STATUS
		err := exportPolicy.AssignProperties_From_ExportPolicy_STATUS(source.ExportPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_ExportPolicy_STATUS() to populate field ExportPolicy")
		}
		policies.ExportPolicy = &exportPolicy
	} else {
		policies.ExportPolicy = nil
	}

	// QuarantinePolicy
	if source.QuarantinePolicy != nil {
		var quarantinePolicy QuarantinePolicy_STATUS
		err := quarantinePolicy.AssignProperties_From_QuarantinePolicy_STATUS(source.QuarantinePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_QuarantinePolicy_STATUS() to populate field QuarantinePolicy")
		}
		policies.QuarantinePolicy = &quarantinePolicy
	} else {
		policies.QuarantinePolicy = nil
	}

	// RetentionPolicy
	if source.RetentionPolicy != nil {
		var retentionPolicy RetentionPolicy_STATUS
		err := retentionPolicy.AssignProperties_From_RetentionPolicy_STATUS(source.RetentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RetentionPolicy_STATUS() to populate field RetentionPolicy")
		}
		policies.RetentionPolicy = &retentionPolicy
	} else {
		policies.RetentionPolicy = nil
	}

	// TrustPolicy
	if source.TrustPolicy != nil {
		var trustPolicy TrustPolicy_STATUS
		err := trustPolicy.AssignProperties_From_TrustPolicy_STATUS(source.TrustPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_TrustPolicy_STATUS() to populate field TrustPolicy")
		}
		policies.TrustPolicy = &trustPolicy
	} else {
		policies.TrustPolicy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Policies_STATUS populates the provided destination Policies_STATUS from our Policies_STATUS
func (policies *Policies_STATUS) AssignProperties_To_Policies_STATUS(destination *v20210901s.Policies_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ExportPolicy
	if policies.ExportPolicy != nil {
		var exportPolicy v20210901s.ExportPolicy_STATUS
		err := policies.ExportPolicy.AssignProperties_To_ExportPolicy_STATUS(&exportPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_ExportPolicy_STATUS() to populate field ExportPolicy")
		}
		destination.ExportPolicy = &exportPolicy
	} else {
		destination.ExportPolicy = nil
	}

	// QuarantinePolicy
	if policies.QuarantinePolicy != nil {
		var quarantinePolicy v20210901s.QuarantinePolicy_STATUS
		err := policies.QuarantinePolicy.AssignProperties_To_QuarantinePolicy_STATUS(&quarantinePolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_QuarantinePolicy_STATUS() to populate field QuarantinePolicy")
		}
		destination.QuarantinePolicy = &quarantinePolicy
	} else {
		destination.QuarantinePolicy = nil
	}

	// RetentionPolicy
	if policies.RetentionPolicy != nil {
		var retentionPolicy v20210901s.RetentionPolicy_STATUS
		err := policies.RetentionPolicy.AssignProperties_To_RetentionPolicy_STATUS(&retentionPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RetentionPolicy_STATUS() to populate field RetentionPolicy")
		}
		destination.RetentionPolicy = &retentionPolicy
	} else {
		destination.RetentionPolicy = nil
	}

	// TrustPolicy
	if policies.TrustPolicy != nil {
		var trustPolicy v20210901s.TrustPolicy_STATUS
		err := policies.TrustPolicy.AssignProperties_To_TrustPolicy_STATUS(&trustPolicy)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_TrustPolicy_STATUS() to populate field TrustPolicy")
		}
		destination.TrustPolicy = &trustPolicy
	} else {
		destination.TrustPolicy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of PrivateEndpointConnection_STATUS. Use v1api20210901.PrivateEndpointConnection_STATUS instead
type PrivateEndpointConnection_STATUS struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (connection *PrivateEndpointConnection_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (connection *PrivateEndpointConnection_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		connection.Id = &id
	}

	// No error
	return nil
}

// AssignProperties_From_PrivateEndpointConnection_STATUS populates our PrivateEndpointConnection_STATUS from the provided source PrivateEndpointConnection_STATUS
func (connection *PrivateEndpointConnection_STATUS) AssignProperties_From_PrivateEndpointConnection_STATUS(source *v20210901s.PrivateEndpointConnection_STATUS) error {

	// Id
	connection.Id = genruntime.ClonePointerToString(source.Id)

	// No error
	return nil
}

// AssignProperties_To_PrivateEndpointConnection_STATUS populates the provided destination PrivateEndpointConnection_STATUS from our PrivateEndpointConnection_STATUS
func (connection *PrivateEndpointConnection_STATUS) AssignProperties_To_PrivateEndpointConnection_STATUS(destination *v20210901s.PrivateEndpointConnection_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	destination.Id = genruntime.ClonePointerToString(connection.Id)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RegistryProperties_NetworkRuleBypassOptions. Use
// v1api20210901.RegistryProperties_NetworkRuleBypassOptions instead
// +kubebuilder:validation:Enum={"AzureServices","None"}
type RegistryProperties_NetworkRuleBypassOptions string

const (
	RegistryProperties_NetworkRuleBypassOptions_AzureServices = RegistryProperties_NetworkRuleBypassOptions("AzureServices")
	RegistryProperties_NetworkRuleBypassOptions_None          = RegistryProperties_NetworkRuleBypassOptions("None")
)

// Deprecated version of RegistryProperties_NetworkRuleBypassOptions_STATUS. Use
// v1api20210901.RegistryProperties_NetworkRuleBypassOptions_STATUS instead
type RegistryProperties_NetworkRuleBypassOptions_STATUS string

const (
	RegistryProperties_NetworkRuleBypassOptions_STATUS_AzureServices = RegistryProperties_NetworkRuleBypassOptions_STATUS("AzureServices")
	RegistryProperties_NetworkRuleBypassOptions_STATUS_None          = RegistryProperties_NetworkRuleBypassOptions_STATUS("None")
)

// Deprecated version of RegistryProperties_ProvisioningState_STATUS. Use
// v1api20210901.RegistryProperties_ProvisioningState_STATUS instead
type RegistryProperties_ProvisioningState_STATUS string

const (
	RegistryProperties_ProvisioningState_STATUS_Canceled  = RegistryProperties_ProvisioningState_STATUS("Canceled")
	RegistryProperties_ProvisioningState_STATUS_Creating  = RegistryProperties_ProvisioningState_STATUS("Creating")
	RegistryProperties_ProvisioningState_STATUS_Deleting  = RegistryProperties_ProvisioningState_STATUS("Deleting")
	RegistryProperties_ProvisioningState_STATUS_Failed    = RegistryProperties_ProvisioningState_STATUS("Failed")
	RegistryProperties_ProvisioningState_STATUS_Succeeded = RegistryProperties_ProvisioningState_STATUS("Succeeded")
	RegistryProperties_ProvisioningState_STATUS_Updating  = RegistryProperties_ProvisioningState_STATUS("Updating")
)

// Deprecated version of RegistryProperties_PublicNetworkAccess. Use v1api20210901.RegistryProperties_PublicNetworkAccess
// instead
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type RegistryProperties_PublicNetworkAccess string

const (
	RegistryProperties_PublicNetworkAccess_Disabled = RegistryProperties_PublicNetworkAccess("Disabled")
	RegistryProperties_PublicNetworkAccess_Enabled  = RegistryProperties_PublicNetworkAccess("Enabled")
)

// Deprecated version of RegistryProperties_PublicNetworkAccess_STATUS. Use
// v1api20210901.RegistryProperties_PublicNetworkAccess_STATUS instead
type RegistryProperties_PublicNetworkAccess_STATUS string

const (
	RegistryProperties_PublicNetworkAccess_STATUS_Disabled = RegistryProperties_PublicNetworkAccess_STATUS("Disabled")
	RegistryProperties_PublicNetworkAccess_STATUS_Enabled  = RegistryProperties_PublicNetworkAccess_STATUS("Enabled")
)

// Deprecated version of RegistryProperties_ZoneRedundancy. Use v1api20210901.RegistryProperties_ZoneRedundancy instead
// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type RegistryProperties_ZoneRedundancy string

const (
	RegistryProperties_ZoneRedundancy_Disabled = RegistryProperties_ZoneRedundancy("Disabled")
	RegistryProperties_ZoneRedundancy_Enabled  = RegistryProperties_ZoneRedundancy("Enabled")
)

// Deprecated version of RegistryProperties_ZoneRedundancy_STATUS. Use
// v1api20210901.RegistryProperties_ZoneRedundancy_STATUS instead
type RegistryProperties_ZoneRedundancy_STATUS string

const (
	RegistryProperties_ZoneRedundancy_STATUS_Disabled = RegistryProperties_ZoneRedundancy_STATUS("Disabled")
	RegistryProperties_ZoneRedundancy_STATUS_Enabled  = RegistryProperties_ZoneRedundancy_STATUS("Enabled")
)

// Deprecated version of Sku. Use v1api20210901.Sku instead
type Sku struct {
	// +kubebuilder:validation:Required
	Name *Sku_Name `json:"name,omitempty"`
}

var _ genruntime.ARMTransformer = &Sku{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (sku *Sku) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if sku == nil {
		return nil, nil
	}
	result := &Sku_ARM{}

	// Set property ‘Name’:
	if sku.Name != nil {
		name := *sku.Name
		result.Name = &name
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// No error
	return nil
}

// AssignProperties_From_Sku populates our Sku from the provided source Sku
func (sku *Sku) AssignProperties_From_Sku(source *v20210901s.Sku) error {

	// Name
	if source.Name != nil {
		name := Sku_Name(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Sku populates the provided destination Sku from our Sku
func (sku *Sku) AssignProperties_To_Sku(destination *v20210901s.Sku) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Sku_STATUS. Use v1api20210901.Sku_STATUS instead
type Sku_STATUS struct {
	Name *Sku_Name_STATUS `json:"name,omitempty"`
	Tier *Sku_Tier_STATUS `json:"tier,omitempty"`
}

var _ genruntime.FromARMConverter = &Sku_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (sku *Sku_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Sku_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (sku *Sku_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Sku_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Sku_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		sku.Name = &name
	}

	// Set property ‘Tier’:
	if typedInput.Tier != nil {
		tier := *typedInput.Tier
		sku.Tier = &tier
	}

	// No error
	return nil
}

// AssignProperties_From_Sku_STATUS populates our Sku_STATUS from the provided source Sku_STATUS
func (sku *Sku_STATUS) AssignProperties_From_Sku_STATUS(source *v20210901s.Sku_STATUS) error {

	// Name
	if source.Name != nil {
		name := Sku_Name_STATUS(*source.Name)
		sku.Name = &name
	} else {
		sku.Name = nil
	}

	// Tier
	if source.Tier != nil {
		tier := Sku_Tier_STATUS(*source.Tier)
		sku.Tier = &tier
	} else {
		sku.Tier = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Sku_STATUS populates the provided destination Sku_STATUS from our Sku_STATUS
func (sku *Sku_STATUS) AssignProperties_To_Sku_STATUS(destination *v20210901s.Sku_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Name
	if sku.Name != nil {
		name := string(*sku.Name)
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Tier
	if sku.Tier != nil {
		tier := string(*sku.Tier)
		destination.Tier = &tier
	} else {
		destination.Tier = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of Status_STATUS. Use v1api20210901.Status_STATUS instead
type Status_STATUS struct {
	DisplayStatus *string `json:"displayStatus,omitempty"`
	Message       *string `json:"message,omitempty"`
	Timestamp     *string `json:"timestamp,omitempty"`
}

var _ genruntime.FromARMConverter = &Status_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (status *Status_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Status_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (status *Status_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Status_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Status_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘DisplayStatus’:
	if typedInput.DisplayStatus != nil {
		displayStatus := *typedInput.DisplayStatus
		status.DisplayStatus = &displayStatus
	}

	// Set property ‘Message’:
	if typedInput.Message != nil {
		message := *typedInput.Message
		status.Message = &message
	}

	// Set property ‘Timestamp’:
	if typedInput.Timestamp != nil {
		timestamp := *typedInput.Timestamp
		status.Timestamp = &timestamp
	}

	// No error
	return nil
}

// AssignProperties_From_Status_STATUS populates our Status_STATUS from the provided source Status_STATUS
func (status *Status_STATUS) AssignProperties_From_Status_STATUS(source *v20210901s.Status_STATUS) error {

	// DisplayStatus
	status.DisplayStatus = genruntime.ClonePointerToString(source.DisplayStatus)

	// Message
	status.Message = genruntime.ClonePointerToString(source.Message)

	// Timestamp
	status.Timestamp = genruntime.ClonePointerToString(source.Timestamp)

	// No error
	return nil
}

// AssignProperties_To_Status_STATUS populates the provided destination Status_STATUS from our Status_STATUS
func (status *Status_STATUS) AssignProperties_To_Status_STATUS(destination *v20210901s.Status_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DisplayStatus
	destination.DisplayStatus = genruntime.ClonePointerToString(status.DisplayStatus)

	// Message
	destination.Message = genruntime.ClonePointerToString(status.Message)

	// Timestamp
	destination.Timestamp = genruntime.ClonePointerToString(status.Timestamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of SystemData_STATUS. Use v1api20210901.SystemData_STATUS instead
type SystemData_STATUS struct {
	CreatedAt          *string                               `json:"createdAt,omitempty"`
	CreatedBy          *string                               `json:"createdBy,omitempty"`
	CreatedByType      *SystemData_CreatedByType_STATUS      `json:"createdByType,omitempty"`
	LastModifiedAt     *string                               `json:"lastModifiedAt,omitempty"`
	LastModifiedBy     *string                               `json:"lastModifiedBy,omitempty"`
	LastModifiedByType *SystemData_LastModifiedByType_STATUS `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SystemData_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SystemData_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SystemData_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘CreatedAt’:
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property ‘CreatedBy’:
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property ‘CreatedByType’:
	if typedInput.CreatedByType != nil {
		createdByType := *typedInput.CreatedByType
		data.CreatedByType = &createdByType
	}

	// Set property ‘LastModifiedAt’:
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property ‘LastModifiedBy’:
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property ‘LastModifiedByType’:
	if typedInput.LastModifiedByType != nil {
		lastModifiedByType := *typedInput.LastModifiedByType
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignProperties_From_SystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_From_SystemData_STATUS(source *v20210901s.SystemData_STATUS) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := SystemData_CreatedByType_STATUS(*source.CreatedByType)
		data.CreatedByType = &createdByType
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := SystemData_LastModifiedByType_STATUS(*source.LastModifiedByType)
		data.LastModifiedByType = &lastModifiedByType
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_To_SystemData_STATUS(destination *v20210901s.SystemData_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of EncryptionProperty_Status. Use v1api20210901.EncryptionProperty_Status instead
// +kubebuilder:validation:Enum={"disabled","enabled"}
type EncryptionProperty_Status string

const (
	EncryptionProperty_Status_Disabled = EncryptionProperty_Status("disabled")
	EncryptionProperty_Status_Enabled  = EncryptionProperty_Status("enabled")
)

// Deprecated version of EncryptionProperty_Status_STATUS. Use v1api20210901.EncryptionProperty_Status_STATUS instead
type EncryptionProperty_Status_STATUS string

const (
	EncryptionProperty_Status_STATUS_Disabled = EncryptionProperty_Status_STATUS("disabled")
	EncryptionProperty_Status_STATUS_Enabled  = EncryptionProperty_Status_STATUS("enabled")
)

// Deprecated version of ExportPolicy. Use v1api20210901.ExportPolicy instead
type ExportPolicy struct {
	Status *ExportPolicy_Status `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &ExportPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *ExportPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &ExportPolicy_ARM{}

	// Set property ‘Status’:
	if policy.Status != nil {
		status := *policy.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ExportPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExportPolicy_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ExportPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExportPolicy_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExportPolicy_ARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignProperties_From_ExportPolicy populates our ExportPolicy from the provided source ExportPolicy
func (policy *ExportPolicy) AssignProperties_From_ExportPolicy(source *v20210901s.ExportPolicy) error {

	// Status
	if source.Status != nil {
		status := ExportPolicy_Status(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ExportPolicy populates the provided destination ExportPolicy from our ExportPolicy
func (policy *ExportPolicy) AssignProperties_To_ExportPolicy(destination *v20210901s.ExportPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ExportPolicy_STATUS. Use v1api20210901.ExportPolicy_STATUS instead
type ExportPolicy_STATUS struct {
	Status *ExportPolicy_Status_STATUS `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &ExportPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *ExportPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ExportPolicy_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *ExportPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ExportPolicy_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ExportPolicy_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignProperties_From_ExportPolicy_STATUS populates our ExportPolicy_STATUS from the provided source ExportPolicy_STATUS
func (policy *ExportPolicy_STATUS) AssignProperties_From_ExportPolicy_STATUS(source *v20210901s.ExportPolicy_STATUS) error {

	// Status
	if source.Status != nil {
		status := ExportPolicy_Status_STATUS(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignProperties_To_ExportPolicy_STATUS populates the provided destination ExportPolicy_STATUS from our ExportPolicy_STATUS
func (policy *ExportPolicy_STATUS) AssignProperties_To_ExportPolicy_STATUS(destination *v20210901s.ExportPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IPRule. Use v1api20210901.IPRule instead
type IPRule struct {
	Action *IPRule_Action `json:"action,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &IPRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *IPRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &IPRule_ARM{}

	// Set property ‘Action’:
	if rule.Action != nil {
		action := *rule.Action
		result.Action = &action
	}

	// Set property ‘Value’:
	if rule.Value != nil {
		value := *rule.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRule_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRule_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRule_ARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		rule.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_IPRule populates our IPRule from the provided source IPRule
func (rule *IPRule) AssignProperties_From_IPRule(source *v20210901s.IPRule) error {

	// Action
	if source.Action != nil {
		action := IPRule_Action(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_IPRule populates the provided destination IPRule from our IPRule
func (rule *IPRule) AssignProperties_To_IPRule(destination *v20210901s.IPRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToString(rule.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of IPRule_STATUS. Use v1api20210901.IPRule_STATUS instead
type IPRule_STATUS struct {
	Action *IPRule_Action_STATUS `json:"action,omitempty"`
	Value  *string               `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &IPRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *IPRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &IPRule_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *IPRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(IPRule_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected IPRule_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Action’:
	if typedInput.Action != nil {
		action := *typedInput.Action
		rule.Action = &action
	}

	// Set property ‘Value’:
	if typedInput.Value != nil {
		value := *typedInput.Value
		rule.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_IPRule_STATUS populates our IPRule_STATUS from the provided source IPRule_STATUS
func (rule *IPRule_STATUS) AssignProperties_From_IPRule_STATUS(source *v20210901s.IPRule_STATUS) error {

	// Action
	if source.Action != nil {
		action := IPRule_Action_STATUS(*source.Action)
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// Value
	rule.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_IPRule_STATUS populates the provided destination IPRule_STATUS from our IPRule_STATUS
func (rule *IPRule_STATUS) AssignProperties_To_IPRule_STATUS(destination *v20210901s.IPRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		action := string(*rule.Action)
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// Value
	destination.Value = genruntime.ClonePointerToString(rule.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyVaultProperties. Use v1api20210901.KeyVaultProperties instead
type KeyVaultProperties struct {
	Identity      *string `json:"identity,omitempty"`
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (properties *KeyVaultProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if properties == nil {
		return nil, nil
	}
	result := &KeyVaultProperties_ARM{}

	// Set property ‘Identity’:
	if properties.Identity != nil {
		identity := *properties.Identity
		result.Identity = &identity
	}

	// Set property ‘KeyIdentifier’:
	if properties.KeyIdentifier != nil {
		keyIdentifier := *properties.KeyIdentifier
		result.KeyIdentifier = &keyIdentifier
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_ARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		identity := *typedInput.Identity
		properties.Identity = &identity
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignProperties_From_KeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (properties *KeyVaultProperties) AssignProperties_From_KeyVaultProperties(source *v20210901s.KeyVaultProperties) error {

	// Identity
	properties.Identity = genruntime.ClonePointerToString(source.Identity)

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// No error
	return nil
}

// AssignProperties_To_KeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (properties *KeyVaultProperties) AssignProperties_To_KeyVaultProperties(destination *v20210901s.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	destination.Identity = genruntime.ClonePointerToString(properties.Identity)

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of KeyVaultProperties_STATUS. Use v1api20210901.KeyVaultProperties_STATUS instead
type KeyVaultProperties_STATUS struct {
	Identity                 *string `json:"identity,omitempty"`
	KeyIdentifier            *string `json:"keyIdentifier,omitempty"`
	KeyRotationEnabled       *bool   `json:"keyRotationEnabled,omitempty"`
	LastKeyRotationTimestamp *string `json:"lastKeyRotationTimestamp,omitempty"`
	VersionedKeyIdentifier   *string `json:"versionedKeyIdentifier,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *KeyVaultProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *KeyVaultProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		identity := *typedInput.Identity
		properties.Identity = &identity
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		properties.KeyIdentifier = &keyIdentifier
	}

	// Set property ‘KeyRotationEnabled’:
	if typedInput.KeyRotationEnabled != nil {
		keyRotationEnabled := *typedInput.KeyRotationEnabled
		properties.KeyRotationEnabled = &keyRotationEnabled
	}

	// Set property ‘LastKeyRotationTimestamp’:
	if typedInput.LastKeyRotationTimestamp != nil {
		lastKeyRotationTimestamp := *typedInput.LastKeyRotationTimestamp
		properties.LastKeyRotationTimestamp = &lastKeyRotationTimestamp
	}

	// Set property ‘VersionedKeyIdentifier’:
	if typedInput.VersionedKeyIdentifier != nil {
		versionedKeyIdentifier := *typedInput.VersionedKeyIdentifier
		properties.VersionedKeyIdentifier = &versionedKeyIdentifier
	}

	// No error
	return nil
}

// AssignProperties_From_KeyVaultProperties_STATUS populates our KeyVaultProperties_STATUS from the provided source KeyVaultProperties_STATUS
func (properties *KeyVaultProperties_STATUS) AssignProperties_From_KeyVaultProperties_STATUS(source *v20210901s.KeyVaultProperties_STATUS) error {

	// Identity
	properties.Identity = genruntime.ClonePointerToString(source.Identity)

	// KeyIdentifier
	properties.KeyIdentifier = genruntime.ClonePointerToString(source.KeyIdentifier)

	// KeyRotationEnabled
	if source.KeyRotationEnabled != nil {
		keyRotationEnabled := *source.KeyRotationEnabled
		properties.KeyRotationEnabled = &keyRotationEnabled
	} else {
		properties.KeyRotationEnabled = nil
	}

	// LastKeyRotationTimestamp
	properties.LastKeyRotationTimestamp = genruntime.ClonePointerToString(source.LastKeyRotationTimestamp)

	// VersionedKeyIdentifier
	properties.VersionedKeyIdentifier = genruntime.ClonePointerToString(source.VersionedKeyIdentifier)

	// No error
	return nil
}

// AssignProperties_To_KeyVaultProperties_STATUS populates the provided destination KeyVaultProperties_STATUS from our KeyVaultProperties_STATUS
func (properties *KeyVaultProperties_STATUS) AssignProperties_To_KeyVaultProperties_STATUS(destination *v20210901s.KeyVaultProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Identity
	destination.Identity = genruntime.ClonePointerToString(properties.Identity)

	// KeyIdentifier
	destination.KeyIdentifier = genruntime.ClonePointerToString(properties.KeyIdentifier)

	// KeyRotationEnabled
	if properties.KeyRotationEnabled != nil {
		keyRotationEnabled := *properties.KeyRotationEnabled
		destination.KeyRotationEnabled = &keyRotationEnabled
	} else {
		destination.KeyRotationEnabled = nil
	}

	// LastKeyRotationTimestamp
	destination.LastKeyRotationTimestamp = genruntime.ClonePointerToString(properties.LastKeyRotationTimestamp)

	// VersionedKeyIdentifier
	destination.VersionedKeyIdentifier = genruntime.ClonePointerToString(properties.VersionedKeyIdentifier)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of NetworkRuleSet_DefaultAction. Use v1api20210901.NetworkRuleSet_DefaultAction instead
// +kubebuilder:validation:Enum={"Allow","Deny"}
type NetworkRuleSet_DefaultAction string

const (
	NetworkRuleSet_DefaultAction_Allow = NetworkRuleSet_DefaultAction("Allow")
	NetworkRuleSet_DefaultAction_Deny  = NetworkRuleSet_DefaultAction("Deny")
)

// Deprecated version of NetworkRuleSet_DefaultAction_STATUS. Use v1api20210901.NetworkRuleSet_DefaultAction_STATUS instead
type NetworkRuleSet_DefaultAction_STATUS string

const (
	NetworkRuleSet_DefaultAction_STATUS_Allow = NetworkRuleSet_DefaultAction_STATUS("Allow")
	NetworkRuleSet_DefaultAction_STATUS_Deny  = NetworkRuleSet_DefaultAction_STATUS("Deny")
)

// Deprecated version of QuarantinePolicy. Use v1api20210901.QuarantinePolicy instead
type QuarantinePolicy struct {
	Status *QuarantinePolicy_Status `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &QuarantinePolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *QuarantinePolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &QuarantinePolicy_ARM{}

	// Set property ‘Status’:
	if policy.Status != nil {
		status := *policy.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *QuarantinePolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &QuarantinePolicy_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *QuarantinePolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(QuarantinePolicy_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected QuarantinePolicy_ARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignProperties_From_QuarantinePolicy populates our QuarantinePolicy from the provided source QuarantinePolicy
func (policy *QuarantinePolicy) AssignProperties_From_QuarantinePolicy(source *v20210901s.QuarantinePolicy) error {

	// Status
	if source.Status != nil {
		status := QuarantinePolicy_Status(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignProperties_To_QuarantinePolicy populates the provided destination QuarantinePolicy from our QuarantinePolicy
func (policy *QuarantinePolicy) AssignProperties_To_QuarantinePolicy(destination *v20210901s.QuarantinePolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of QuarantinePolicy_STATUS. Use v1api20210901.QuarantinePolicy_STATUS instead
type QuarantinePolicy_STATUS struct {
	Status *QuarantinePolicy_Status_STATUS `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &QuarantinePolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *QuarantinePolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &QuarantinePolicy_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *QuarantinePolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(QuarantinePolicy_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected QuarantinePolicy_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignProperties_From_QuarantinePolicy_STATUS populates our QuarantinePolicy_STATUS from the provided source QuarantinePolicy_STATUS
func (policy *QuarantinePolicy_STATUS) AssignProperties_From_QuarantinePolicy_STATUS(source *v20210901s.QuarantinePolicy_STATUS) error {

	// Status
	if source.Status != nil {
		status := QuarantinePolicy_Status_STATUS(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignProperties_To_QuarantinePolicy_STATUS populates the provided destination QuarantinePolicy_STATUS from our QuarantinePolicy_STATUS
func (policy *QuarantinePolicy_STATUS) AssignProperties_To_QuarantinePolicy_STATUS(destination *v20210901s.QuarantinePolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RetentionPolicy. Use v1api20210901.RetentionPolicy instead
type RetentionPolicy struct {
	Days   *int                    `json:"days,omitempty"`
	Status *RetentionPolicy_Status `json:"status,omitempty"`
}

var _ genruntime.ARMTransformer = &RetentionPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *RetentionPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &RetentionPolicy_ARM{}

	// Set property ‘Days’:
	if policy.Days != nil {
		days := *policy.Days
		result.Days = &days
	}

	// Set property ‘Status’:
	if policy.Status != nil {
		status := *policy.Status
		result.Status = &status
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *RetentionPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetentionPolicy_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *RetentionPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetentionPolicy_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetentionPolicy_ARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignProperties_From_RetentionPolicy populates our RetentionPolicy from the provided source RetentionPolicy
func (policy *RetentionPolicy) AssignProperties_From_RetentionPolicy(source *v20210901s.RetentionPolicy) error {

	// Days
	policy.Days = genruntime.ClonePointerToInt(source.Days)

	// Status
	if source.Status != nil {
		status := RetentionPolicy_Status(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RetentionPolicy populates the provided destination RetentionPolicy from our RetentionPolicy
func (policy *RetentionPolicy) AssignProperties_To_RetentionPolicy(destination *v20210901s.RetentionPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(policy.Days)

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of RetentionPolicy_STATUS. Use v1api20210901.RetentionPolicy_STATUS instead
type RetentionPolicy_STATUS struct {
	Days            *int                           `json:"days,omitempty"`
	LastUpdatedTime *string                        `json:"lastUpdatedTime,omitempty"`
	Status          *RetentionPolicy_Status_STATUS `json:"status,omitempty"`
}

var _ genruntime.FromARMConverter = &RetentionPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *RetentionPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RetentionPolicy_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *RetentionPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RetentionPolicy_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RetentionPolicy_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Days’:
	if typedInput.Days != nil {
		days := *typedInput.Days
		policy.Days = &days
	}

	// Set property ‘LastUpdatedTime’:
	if typedInput.LastUpdatedTime != nil {
		lastUpdatedTime := *typedInput.LastUpdatedTime
		policy.LastUpdatedTime = &lastUpdatedTime
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// No error
	return nil
}

// AssignProperties_From_RetentionPolicy_STATUS populates our RetentionPolicy_STATUS from the provided source RetentionPolicy_STATUS
func (policy *RetentionPolicy_STATUS) AssignProperties_From_RetentionPolicy_STATUS(source *v20210901s.RetentionPolicy_STATUS) error {

	// Days
	policy.Days = genruntime.ClonePointerToInt(source.Days)

	// LastUpdatedTime
	policy.LastUpdatedTime = genruntime.ClonePointerToString(source.LastUpdatedTime)

	// Status
	if source.Status != nil {
		status := RetentionPolicy_Status_STATUS(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RetentionPolicy_STATUS populates the provided destination RetentionPolicy_STATUS from our RetentionPolicy_STATUS
func (policy *RetentionPolicy_STATUS) AssignProperties_To_RetentionPolicy_STATUS(destination *v20210901s.RetentionPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Days
	destination.Days = genruntime.ClonePointerToInt(policy.Days)

	// LastUpdatedTime
	destination.LastUpdatedTime = genruntime.ClonePointerToString(policy.LastUpdatedTime)

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of TrustPolicy. Use v1api20210901.TrustPolicy instead
type TrustPolicy struct {
	Status *TrustPolicy_Status `json:"status,omitempty"`
	Type   *TrustPolicy_Type   `json:"type,omitempty"`
}

var _ genruntime.ARMTransformer = &TrustPolicy{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (policy *TrustPolicy) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if policy == nil {
		return nil, nil
	}
	result := &TrustPolicy_ARM{}

	// Set property ‘Status’:
	if policy.Status != nil {
		status := *policy.Status
		result.Status = &status
	}

	// Set property ‘Type’:
	if policy.Type != nil {
		typeVar := *policy.Type
		result.Type = &typeVar
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *TrustPolicy) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TrustPolicy_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *TrustPolicy) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TrustPolicy_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TrustPolicy_ARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		policy.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_TrustPolicy populates our TrustPolicy from the provided source TrustPolicy
func (policy *TrustPolicy) AssignProperties_From_TrustPolicy(source *v20210901s.TrustPolicy) error {

	// Status
	if source.Status != nil {
		status := TrustPolicy_Status(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// Type
	if source.Type != nil {
		typeVar := TrustPolicy_Type(*source.Type)
		policy.Type = &typeVar
	} else {
		policy.Type = nil
	}

	// No error
	return nil
}

// AssignProperties_To_TrustPolicy populates the provided destination TrustPolicy from our TrustPolicy
func (policy *TrustPolicy) AssignProperties_To_TrustPolicy(destination *v20210901s.TrustPolicy) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Type
	if policy.Type != nil {
		typeVar := string(*policy.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of TrustPolicy_STATUS. Use v1api20210901.TrustPolicy_STATUS instead
type TrustPolicy_STATUS struct {
	Status *TrustPolicy_Status_STATUS `json:"status,omitempty"`
	Type   *TrustPolicy_Type_STATUS   `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &TrustPolicy_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (policy *TrustPolicy_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &TrustPolicy_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (policy *TrustPolicy_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(TrustPolicy_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected TrustPolicy_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Status’:
	if typedInput.Status != nil {
		status := *typedInput.Status
		policy.Status = &status
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		policy.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_TrustPolicy_STATUS populates our TrustPolicy_STATUS from the provided source TrustPolicy_STATUS
func (policy *TrustPolicy_STATUS) AssignProperties_From_TrustPolicy_STATUS(source *v20210901s.TrustPolicy_STATUS) error {

	// Status
	if source.Status != nil {
		status := TrustPolicy_Status_STATUS(*source.Status)
		policy.Status = &status
	} else {
		policy.Status = nil
	}

	// Type
	if source.Type != nil {
		typeVar := TrustPolicy_Type_STATUS(*source.Type)
		policy.Type = &typeVar
	} else {
		policy.Type = nil
	}

	// No error
	return nil
}

// AssignProperties_To_TrustPolicy_STATUS populates the provided destination TrustPolicy_STATUS from our TrustPolicy_STATUS
func (policy *TrustPolicy_STATUS) AssignProperties_To_TrustPolicy_STATUS(destination *v20210901s.TrustPolicy_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Status
	if policy.Status != nil {
		status := string(*policy.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// Type
	if policy.Type != nil {
		typeVar := string(*policy.Type)
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UserAssignedIdentityDetails. Use v1api20210901.UserAssignedIdentityDetails instead
type UserAssignedIdentityDetails struct {
	Reference genruntime.ResourceReference `armReference:"Reference" json:"reference,omitempty"`
}

// AssignProperties_From_UserAssignedIdentityDetails populates our UserAssignedIdentityDetails from the provided source UserAssignedIdentityDetails
func (details *UserAssignedIdentityDetails) AssignProperties_From_UserAssignedIdentityDetails(source *v20210901s.UserAssignedIdentityDetails) error {

	// Reference
	details.Reference = source.Reference.Copy()

	// No error
	return nil
}

// AssignProperties_To_UserAssignedIdentityDetails populates the provided destination UserAssignedIdentityDetails from our UserAssignedIdentityDetails
func (details *UserAssignedIdentityDetails) AssignProperties_To_UserAssignedIdentityDetails(destination *v20210901s.UserAssignedIdentityDetails) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	destination.Reference = details.Reference.Copy()

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of UserIdentityProperties_STATUS. Use v1api20210901.UserIdentityProperties_STATUS instead
type UserIdentityProperties_STATUS struct {
	ClientId    *string `json:"clientId,omitempty"`
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &UserIdentityProperties_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (properties *UserIdentityProperties_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &UserIdentityProperties_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (properties *UserIdentityProperties_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(UserIdentityProperties_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected UserIdentityProperties_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		properties.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		properties.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignProperties_From_UserIdentityProperties_STATUS populates our UserIdentityProperties_STATUS from the provided source UserIdentityProperties_STATUS
func (properties *UserIdentityProperties_STATUS) AssignProperties_From_UserIdentityProperties_STATUS(source *v20210901s.UserIdentityProperties_STATUS) error {

	// ClientId
	properties.ClientId = genruntime.ClonePointerToString(source.ClientId)

	// PrincipalId
	properties.PrincipalId = genruntime.ClonePointerToString(source.PrincipalId)

	// No error
	return nil
}

// AssignProperties_To_UserIdentityProperties_STATUS populates the provided destination UserIdentityProperties_STATUS from our UserIdentityProperties_STATUS
func (properties *UserIdentityProperties_STATUS) AssignProperties_To_UserIdentityProperties_STATUS(destination *v20210901s.UserIdentityProperties_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	destination.ClientId = genruntime.ClonePointerToString(properties.ClientId)

	// PrincipalId
	destination.PrincipalId = genruntime.ClonePointerToString(properties.PrincipalId)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Deprecated version of ExportPolicy_Status. Use v1api20210901.ExportPolicy_Status instead
// +kubebuilder:validation:Enum={"disabled","enabled"}
type ExportPolicy_Status string

const (
	ExportPolicy_Status_Disabled = ExportPolicy_Status("disabled")
	ExportPolicy_Status_Enabled  = ExportPolicy_Status("enabled")
)

// Deprecated version of ExportPolicy_Status_STATUS. Use v1api20210901.ExportPolicy_Status_STATUS instead
type ExportPolicy_Status_STATUS string

const (
	ExportPolicy_Status_STATUS_Disabled = ExportPolicy_Status_STATUS("disabled")
	ExportPolicy_Status_STATUS_Enabled  = ExportPolicy_Status_STATUS("enabled")
)

// Deprecated version of IPRule_Action. Use v1api20210901.IPRule_Action instead
// +kubebuilder:validation:Enum={"Allow"}
type IPRule_Action string

const IPRule_Action_Allow = IPRule_Action("Allow")

// Deprecated version of IPRule_Action_STATUS. Use v1api20210901.IPRule_Action_STATUS instead
type IPRule_Action_STATUS string

const IPRule_Action_STATUS_Allow = IPRule_Action_STATUS("Allow")

// Deprecated version of QuarantinePolicy_Status. Use v1api20210901.QuarantinePolicy_Status instead
// +kubebuilder:validation:Enum={"disabled","enabled"}
type QuarantinePolicy_Status string

const (
	QuarantinePolicy_Status_Disabled = QuarantinePolicy_Status("disabled")
	QuarantinePolicy_Status_Enabled  = QuarantinePolicy_Status("enabled")
)

// Deprecated version of QuarantinePolicy_Status_STATUS. Use v1api20210901.QuarantinePolicy_Status_STATUS instead
type QuarantinePolicy_Status_STATUS string

const (
	QuarantinePolicy_Status_STATUS_Disabled = QuarantinePolicy_Status_STATUS("disabled")
	QuarantinePolicy_Status_STATUS_Enabled  = QuarantinePolicy_Status_STATUS("enabled")
)

// Deprecated version of RetentionPolicy_Status. Use v1api20210901.RetentionPolicy_Status instead
// +kubebuilder:validation:Enum={"disabled","enabled"}
type RetentionPolicy_Status string

const (
	RetentionPolicy_Status_Disabled = RetentionPolicy_Status("disabled")
	RetentionPolicy_Status_Enabled  = RetentionPolicy_Status("enabled")
)

// Deprecated version of RetentionPolicy_Status_STATUS. Use v1api20210901.RetentionPolicy_Status_STATUS instead
type RetentionPolicy_Status_STATUS string

const (
	RetentionPolicy_Status_STATUS_Disabled = RetentionPolicy_Status_STATUS("disabled")
	RetentionPolicy_Status_STATUS_Enabled  = RetentionPolicy_Status_STATUS("enabled")
)

// Deprecated version of TrustPolicy_Status. Use v1api20210901.TrustPolicy_Status instead
// +kubebuilder:validation:Enum={"disabled","enabled"}
type TrustPolicy_Status string

const (
	TrustPolicy_Status_Disabled = TrustPolicy_Status("disabled")
	TrustPolicy_Status_Enabled  = TrustPolicy_Status("enabled")
)

// Deprecated version of TrustPolicy_Status_STATUS. Use v1api20210901.TrustPolicy_Status_STATUS instead
type TrustPolicy_Status_STATUS string

const (
	TrustPolicy_Status_STATUS_Disabled = TrustPolicy_Status_STATUS("disabled")
	TrustPolicy_Status_STATUS_Enabled  = TrustPolicy_Status_STATUS("enabled")
)

// Deprecated version of TrustPolicy_Type. Use v1api20210901.TrustPolicy_Type instead
// +kubebuilder:validation:Enum={"Notary"}
type TrustPolicy_Type string

const TrustPolicy_Type_Notary = TrustPolicy_Type("Notary")

// Deprecated version of TrustPolicy_Type_STATUS. Use v1api20210901.TrustPolicy_Type_STATUS instead
type TrustPolicy_Type_STATUS string

const TrustPolicy_Type_STATUS_Notary = TrustPolicy_Type_STATUS("Notary")

func init() {
	SchemeBuilder.Register(&Registry{}, &RegistryList{})
}
