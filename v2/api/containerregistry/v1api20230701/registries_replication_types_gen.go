// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230701

import (
	"fmt"
	arm "github.com/Azure/azure-service-operator/v2/api/containerregistry/v1api20230701/arm"
	storage "github.com/Azure/azure-service-operator/v2/api/containerregistry/v1api20230701/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/configmaps"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/core"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/secrets"
	"github.com/rotisserie/eris"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /containerregistry/resource-manager/Microsoft.ContainerRegistry/stable/2023-07-01/containerregistry.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}
type RegistriesReplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegistriesReplication_Spec   `json:"spec,omitempty"`
	Status            RegistriesReplication_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RegistriesReplication{}

// GetConditions returns the conditions of the resource
func (replication *RegistriesReplication) GetConditions() conditions.Conditions {
	return replication.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (replication *RegistriesReplication) SetConditions(conditions conditions.Conditions) {
	replication.Status.Conditions = conditions
}

var _ conversion.Convertible = &RegistriesReplication{}

// ConvertFrom populates our RegistriesReplication from the provided hub RegistriesReplication
func (replication *RegistriesReplication) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*storage.RegistriesReplication)
	if !ok {
		return fmt.Errorf("expected containerregistry/v1api20230701/storage/RegistriesReplication but received %T instead", hub)
	}

	return replication.AssignProperties_From_RegistriesReplication(source)
}

// ConvertTo populates the provided hub RegistriesReplication from our RegistriesReplication
func (replication *RegistriesReplication) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*storage.RegistriesReplication)
	if !ok {
		return fmt.Errorf("expected containerregistry/v1api20230701/storage/RegistriesReplication but received %T instead", hub)
	}

	return replication.AssignProperties_To_RegistriesReplication(destination)
}

// +kubebuilder:webhook:path=/mutate-containerregistry-azure-com-v1api20230701-registriesreplication,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerregistry.azure.com,resources=registriesreplications,verbs=create;update,versions=v1api20230701,name=default.v1api20230701.registriesreplications.containerregistry.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &RegistriesReplication{}

// Default applies defaults to the RegistriesReplication resource
func (replication *RegistriesReplication) Default() {
	replication.defaultImpl()
	var temp any = replication
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (replication *RegistriesReplication) defaultAzureName() {
	if replication.Spec.AzureName == "" {
		replication.Spec.AzureName = replication.Name
	}
}

// defaultImpl applies the code generated defaults to the RegistriesReplication resource
func (replication *RegistriesReplication) defaultImpl() { replication.defaultAzureName() }

var _ configmaps.Exporter = &RegistriesReplication{}

// ConfigMapDestinationExpressions returns the Spec.OperatorSpec.ConfigMapExpressions property
func (replication *RegistriesReplication) ConfigMapDestinationExpressions() []*core.DestinationExpression {
	if replication.Spec.OperatorSpec == nil {
		return nil
	}
	return replication.Spec.OperatorSpec.ConfigMapExpressions
}

var _ secrets.Exporter = &RegistriesReplication{}

// SecretDestinationExpressions returns the Spec.OperatorSpec.SecretExpressions property
func (replication *RegistriesReplication) SecretDestinationExpressions() []*core.DestinationExpression {
	if replication.Spec.OperatorSpec == nil {
		return nil
	}
	return replication.Spec.OperatorSpec.SecretExpressions
}

var _ genruntime.ImportableResource = &RegistriesReplication{}

// InitializeSpec initializes the spec for this resource from the given status
func (replication *RegistriesReplication) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*RegistriesReplication_STATUS); ok {
		return replication.Spec.Initialize_From_RegistriesReplication_STATUS(s)
	}

	return fmt.Errorf("expected Status of type RegistriesReplication_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &RegistriesReplication{}

// AzureName returns the Azure name of the resource
func (replication *RegistriesReplication) AzureName() string {
	return replication.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2023-07-01"
func (replication RegistriesReplication) GetAPIVersion() string {
	return "2023-07-01"
}

// GetResourceScope returns the scope of the resource
func (replication *RegistriesReplication) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (replication *RegistriesReplication) GetSpec() genruntime.ConvertibleSpec {
	return &replication.Spec
}

// GetStatus returns the status of this resource
func (replication *RegistriesReplication) GetStatus() genruntime.ConvertibleStatus {
	return &replication.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (replication *RegistriesReplication) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.ContainerRegistry/registries/replications"
func (replication *RegistriesReplication) GetType() string {
	return "Microsoft.ContainerRegistry/registries/replications"
}

// NewEmptyStatus returns a new empty (blank) status
func (replication *RegistriesReplication) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &RegistriesReplication_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (replication *RegistriesReplication) Owner() *genruntime.ResourceReference {
	if replication.Spec.Owner == nil {
		return nil
	}

	group, kind := genruntime.LookupOwnerGroupKind(replication.Spec)
	return replication.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (replication *RegistriesReplication) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*RegistriesReplication_STATUS); ok {
		replication.Status = *st
		return nil
	}

	// Convert status to required version
	var st RegistriesReplication_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return eris.Wrap(err, "failed to convert status")
	}

	replication.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-containerregistry-azure-com-v1api20230701-registriesreplication,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=containerregistry.azure.com,resources=registriesreplications,verbs=create;update,versions=v1api20230701,name=validate.v1api20230701.registriesreplications.containerregistry.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &RegistriesReplication{}

// ValidateCreate validates the creation of the resource
func (replication *RegistriesReplication) ValidateCreate() (admission.Warnings, error) {
	validations := replication.createValidations()
	var temp any = replication
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (replication *RegistriesReplication) ValidateDelete() (admission.Warnings, error) {
	validations := replication.deleteValidations()
	var temp any = replication
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (replication *RegistriesReplication) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := replication.updateValidations()
	var temp any = replication
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (replication *RegistriesReplication) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){replication.validateResourceReferences, replication.validateOwnerReference, replication.validateSecretDestinations, replication.validateConfigMapDestinations}
}

// deleteValidations validates the deletion of the resource
func (replication *RegistriesReplication) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (replication *RegistriesReplication) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return replication.validateResourceReferences()
		},
		replication.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return replication.validateOwnerReference()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return replication.validateSecretDestinations()
		},
		func(old runtime.Object) (admission.Warnings, error) {
			return replication.validateConfigMapDestinations()
		},
	}
}

// validateConfigMapDestinations validates there are no colliding genruntime.ConfigMapDestinations
func (replication *RegistriesReplication) validateConfigMapDestinations() (admission.Warnings, error) {
	if replication.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return configmaps.ValidateDestinations(replication, nil, replication.Spec.OperatorSpec.ConfigMapExpressions)
}

// validateOwnerReference validates the owner field
func (replication *RegistriesReplication) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(replication)
}

// validateResourceReferences validates all resource references
func (replication *RegistriesReplication) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&replication.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateSecretDestinations validates there are no colliding genruntime.SecretDestination's
func (replication *RegistriesReplication) validateSecretDestinations() (admission.Warnings, error) {
	if replication.Spec.OperatorSpec == nil {
		return nil, nil
	}
	return secrets.ValidateDestinations(replication, nil, replication.Spec.OperatorSpec.SecretExpressions)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (replication *RegistriesReplication) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*RegistriesReplication)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, replication)
}

// AssignProperties_From_RegistriesReplication populates our RegistriesReplication from the provided source RegistriesReplication
func (replication *RegistriesReplication) AssignProperties_From_RegistriesReplication(source *storage.RegistriesReplication) error {

	// ObjectMeta
	replication.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec RegistriesReplication_Spec
	err := spec.AssignProperties_From_RegistriesReplication_Spec(&source.Spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_RegistriesReplication_Spec() to populate field Spec")
	}
	replication.Spec = spec

	// Status
	var status RegistriesReplication_STATUS
	err = status.AssignProperties_From_RegistriesReplication_STATUS(&source.Status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_From_RegistriesReplication_STATUS() to populate field Status")
	}
	replication.Status = status

	// No error
	return nil
}

// AssignProperties_To_RegistriesReplication populates the provided destination RegistriesReplication from our RegistriesReplication
func (replication *RegistriesReplication) AssignProperties_To_RegistriesReplication(destination *storage.RegistriesReplication) error {

	// ObjectMeta
	destination.ObjectMeta = *replication.ObjectMeta.DeepCopy()

	// Spec
	var spec storage.RegistriesReplication_Spec
	err := replication.Spec.AssignProperties_To_RegistriesReplication_Spec(&spec)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_RegistriesReplication_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status storage.RegistriesReplication_STATUS
	err = replication.Status.AssignProperties_To_RegistriesReplication_STATUS(&status)
	if err != nil {
		return eris.Wrap(err, "calling AssignProperties_To_RegistriesReplication_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (replication *RegistriesReplication) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: replication.Spec.OriginalVersion(),
		Kind:    "RegistriesReplication",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /containerregistry/resource-manager/Microsoft.ContainerRegistry/stable/2023-07-01/containerregistry.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}
type RegistriesReplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegistriesReplication `json:"items"`
}

// +kubebuilder:validation:Enum={"2023-07-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2023-07-01")

type RegistriesReplication_Spec struct {
	// +kubebuilder:validation:MaxLength=50
	// +kubebuilder:validation:MinLength=5
	// +kubebuilder:validation:Pattern="^[a-zA-Z0-9]*$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// Location: The location of the resource. This cannot be changed after the resource is created.
	Location *string `json:"location,omitempty"`

	// OperatorSpec: The specification for configuring operator behavior. This field is interpreted by the operator and not
	// passed directly to Azure
	OperatorSpec *RegistriesReplicationOperatorSpec `json:"operatorSpec,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a containerregistry.azure.com/Registry resource
	Owner *genruntime.KnownResourceReference `group:"containerregistry.azure.com" json:"owner,omitempty" kind:"Registry"`

	// RegionEndpointEnabled: Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to
	// a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications.
	RegionEndpointEnabled *bool `json:"regionEndpointEnabled,omitempty"`

	// Tags: The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`

	// ZoneRedundancy: Whether or not zone redundancy is enabled for this container registry replication
	ZoneRedundancy *ReplicationProperties_ZoneRedundancy `json:"zoneRedundancy,omitempty"`
}

var _ genruntime.ARMTransformer = &RegistriesReplication_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (replication *RegistriesReplication_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if replication == nil {
		return nil, nil
	}
	result := &arm.RegistriesReplication_Spec{}

	// Set property "Location":
	if replication.Location != nil {
		location := *replication.Location
		result.Location = &location
	}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if replication.RegionEndpointEnabled != nil || replication.ZoneRedundancy != nil {
		result.Properties = &arm.ReplicationProperties{}
	}
	if replication.RegionEndpointEnabled != nil {
		regionEndpointEnabled := *replication.RegionEndpointEnabled
		result.Properties.RegionEndpointEnabled = &regionEndpointEnabled
	}
	if replication.ZoneRedundancy != nil {
		var temp string
		temp = string(*replication.ZoneRedundancy)
		zoneRedundancy := arm.ReplicationProperties_ZoneRedundancy(temp)
		result.Properties.ZoneRedundancy = &zoneRedundancy
	}

	// Set property "Tags":
	if replication.Tags != nil {
		result.Tags = make(map[string]string, len(replication.Tags))
		for key, value := range replication.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (replication *RegistriesReplication_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.RegistriesReplication_Spec{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (replication *RegistriesReplication_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.RegistriesReplication_Spec)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.RegistriesReplication_Spec, got %T", armInput)
	}

	// Set property "AzureName":
	replication.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		replication.Location = &location
	}

	// no assignment for property "OperatorSpec"

	// Set property "Owner":
	replication.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "RegionEndpointEnabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RegionEndpointEnabled != nil {
			regionEndpointEnabled := *typedInput.Properties.RegionEndpointEnabled
			replication.RegionEndpointEnabled = &regionEndpointEnabled
		}
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		replication.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			replication.Tags[key] = value
		}
	}

	// Set property "ZoneRedundancy":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundancy != nil {
			var temp string
			temp = string(*typedInput.Properties.ZoneRedundancy)
			zoneRedundancy := ReplicationProperties_ZoneRedundancy(temp)
			replication.ZoneRedundancy = &zoneRedundancy
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &RegistriesReplication_Spec{}

// ConvertSpecFrom populates our RegistriesReplication_Spec from the provided source
func (replication *RegistriesReplication_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*storage.RegistriesReplication_Spec)
	if ok {
		// Populate our instance from source
		return replication.AssignProperties_From_RegistriesReplication_Spec(src)
	}

	// Convert to an intermediate form
	src = &storage.RegistriesReplication_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = replication.AssignProperties_From_RegistriesReplication_Spec(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our RegistriesReplication_Spec
func (replication *RegistriesReplication_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*storage.RegistriesReplication_Spec)
	if ok {
		// Populate destination from our instance
		return replication.AssignProperties_To_RegistriesReplication_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &storage.RegistriesReplication_Spec{}
	err := replication.AssignProperties_To_RegistriesReplication_Spec(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_RegistriesReplication_Spec populates our RegistriesReplication_Spec from the provided source RegistriesReplication_Spec
func (replication *RegistriesReplication_Spec) AssignProperties_From_RegistriesReplication_Spec(source *storage.RegistriesReplication_Spec) error {

	// AzureName
	replication.AzureName = source.AzureName

	// Location
	replication.Location = genruntime.ClonePointerToString(source.Location)

	// OperatorSpec
	if source.OperatorSpec != nil {
		var operatorSpec RegistriesReplicationOperatorSpec
		err := operatorSpec.AssignProperties_From_RegistriesReplicationOperatorSpec(source.OperatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_RegistriesReplicationOperatorSpec() to populate field OperatorSpec")
		}
		replication.OperatorSpec = &operatorSpec
	} else {
		replication.OperatorSpec = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		replication.Owner = &owner
	} else {
		replication.Owner = nil
	}

	// RegionEndpointEnabled
	if source.RegionEndpointEnabled != nil {
		regionEndpointEnabled := *source.RegionEndpointEnabled
		replication.RegionEndpointEnabled = &regionEndpointEnabled
	} else {
		replication.RegionEndpointEnabled = nil
	}

	// Tags
	replication.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// ZoneRedundancy
	if source.ZoneRedundancy != nil {
		zoneRedundancy := *source.ZoneRedundancy
		zoneRedundancyTemp := genruntime.ToEnum(zoneRedundancy, replicationProperties_ZoneRedundancy_Values)
		replication.ZoneRedundancy = &zoneRedundancyTemp
	} else {
		replication.ZoneRedundancy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RegistriesReplication_Spec populates the provided destination RegistriesReplication_Spec from our RegistriesReplication_Spec
func (replication *RegistriesReplication_Spec) AssignProperties_To_RegistriesReplication_Spec(destination *storage.RegistriesReplication_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = replication.AzureName

	// Location
	destination.Location = genruntime.ClonePointerToString(replication.Location)

	// OperatorSpec
	if replication.OperatorSpec != nil {
		var operatorSpec storage.RegistriesReplicationOperatorSpec
		err := replication.OperatorSpec.AssignProperties_To_RegistriesReplicationOperatorSpec(&operatorSpec)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_RegistriesReplicationOperatorSpec() to populate field OperatorSpec")
		}
		destination.OperatorSpec = &operatorSpec
	} else {
		destination.OperatorSpec = nil
	}

	// OriginalVersion
	destination.OriginalVersion = replication.OriginalVersion()

	// Owner
	if replication.Owner != nil {
		owner := replication.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RegionEndpointEnabled
	if replication.RegionEndpointEnabled != nil {
		regionEndpointEnabled := *replication.RegionEndpointEnabled
		destination.RegionEndpointEnabled = &regionEndpointEnabled
	} else {
		destination.RegionEndpointEnabled = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(replication.Tags)

	// ZoneRedundancy
	if replication.ZoneRedundancy != nil {
		zoneRedundancy := string(*replication.ZoneRedundancy)
		destination.ZoneRedundancy = &zoneRedundancy
	} else {
		destination.ZoneRedundancy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_RegistriesReplication_STATUS populates our RegistriesReplication_Spec from the provided source RegistriesReplication_STATUS
func (replication *RegistriesReplication_Spec) Initialize_From_RegistriesReplication_STATUS(source *RegistriesReplication_STATUS) error {

	// Location
	replication.Location = genruntime.ClonePointerToString(source.Location)

	// RegionEndpointEnabled
	if source.RegionEndpointEnabled != nil {
		regionEndpointEnabled := *source.RegionEndpointEnabled
		replication.RegionEndpointEnabled = &regionEndpointEnabled
	} else {
		replication.RegionEndpointEnabled = nil
	}

	// Tags
	replication.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// ZoneRedundancy
	if source.ZoneRedundancy != nil {
		zoneRedundancy := genruntime.ToEnum(string(*source.ZoneRedundancy), replicationProperties_ZoneRedundancy_Values)
		replication.ZoneRedundancy = &zoneRedundancy
	} else {
		replication.ZoneRedundancy = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (replication *RegistriesReplication_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (replication *RegistriesReplication_Spec) SetAzureName(azureName string) {
	replication.AzureName = azureName
}

type RegistriesReplication_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Id: The resource ID.
	Id *string `json:"id,omitempty"`

	// Location: The location of the resource. This cannot be changed after the resource is created.
	Location *string `json:"location,omitempty"`

	// Name: The name of the resource.
	Name *string `json:"name,omitempty"`

	// ProvisioningState: The provisioning state of the replication at the time the operation was called.
	ProvisioningState *ReplicationProperties_ProvisioningState_STATUS `json:"provisioningState,omitempty"`

	// RegionEndpointEnabled: Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to
	// a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications.
	RegionEndpointEnabled *bool `json:"regionEndpointEnabled,omitempty"`

	// Status: The status of the replication at the time the operation was called.
	Status *Status_STATUS `json:"status,omitempty"`

	// SystemData: Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData_STATUS `json:"systemData,omitempty"`

	// Tags: The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: The type of the resource.
	Type *string `json:"type,omitempty"`

	// ZoneRedundancy: Whether or not zone redundancy is enabled for this container registry replication
	ZoneRedundancy *ReplicationProperties_ZoneRedundancy_STATUS `json:"zoneRedundancy,omitempty"`
}

var _ genruntime.ConvertibleStatus = &RegistriesReplication_STATUS{}

// ConvertStatusFrom populates our RegistriesReplication_STATUS from the provided source
func (replication *RegistriesReplication_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*storage.RegistriesReplication_STATUS)
	if ok {
		// Populate our instance from source
		return replication.AssignProperties_From_RegistriesReplication_STATUS(src)
	}

	// Convert to an intermediate form
	src = &storage.RegistriesReplication_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = replication.AssignProperties_From_RegistriesReplication_STATUS(src)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our RegistriesReplication_STATUS
func (replication *RegistriesReplication_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*storage.RegistriesReplication_STATUS)
	if ok {
		// Populate destination from our instance
		return replication.AssignProperties_To_RegistriesReplication_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &storage.RegistriesReplication_STATUS{}
	err := replication.AssignProperties_To_RegistriesReplication_STATUS(dst)
	if err != nil {
		return eris.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return eris.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &RegistriesReplication_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (replication *RegistriesReplication_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.RegistriesReplication_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (replication *RegistriesReplication_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.RegistriesReplication_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.RegistriesReplication_STATUS, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		replication.Id = &id
	}

	// Set property "Location":
	if typedInput.Location != nil {
		location := *typedInput.Location
		replication.Location = &location
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		replication.Name = &name
	}

	// Set property "ProvisioningState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			var temp string
			temp = string(*typedInput.Properties.ProvisioningState)
			provisioningState := ReplicationProperties_ProvisioningState_STATUS(temp)
			replication.ProvisioningState = &provisioningState
		}
	}

	// Set property "RegionEndpointEnabled":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RegionEndpointEnabled != nil {
			regionEndpointEnabled := *typedInput.Properties.RegionEndpointEnabled
			replication.RegionEndpointEnabled = &regionEndpointEnabled
		}
	}

	// Set property "Status":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			var status1 Status_STATUS
			err := status1.PopulateFromARM(owner, *typedInput.Properties.Status)
			if err != nil {
				return err
			}
			status := status1
			replication.Status = &status
		}
	}

	// Set property "SystemData":
	if typedInput.SystemData != nil {
		var systemData1 SystemData_STATUS
		err := systemData1.PopulateFromARM(owner, *typedInput.SystemData)
		if err != nil {
			return err
		}
		systemData := systemData1
		replication.SystemData = &systemData
	}

	// Set property "Tags":
	if typedInput.Tags != nil {
		replication.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			replication.Tags[key] = value
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		replication.Type = &typeVar
	}

	// Set property "ZoneRedundancy":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ZoneRedundancy != nil {
			var temp string
			temp = string(*typedInput.Properties.ZoneRedundancy)
			zoneRedundancy := ReplicationProperties_ZoneRedundancy_STATUS(temp)
			replication.ZoneRedundancy = &zoneRedundancy
		}
	}

	// No error
	return nil
}

// AssignProperties_From_RegistriesReplication_STATUS populates our RegistriesReplication_STATUS from the provided source RegistriesReplication_STATUS
func (replication *RegistriesReplication_STATUS) AssignProperties_From_RegistriesReplication_STATUS(source *storage.RegistriesReplication_STATUS) error {

	// Conditions
	replication.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	replication.Id = genruntime.ClonePointerToString(source.Id)

	// Location
	replication.Location = genruntime.ClonePointerToString(source.Location)

	// Name
	replication.Name = genruntime.ClonePointerToString(source.Name)

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := *source.ProvisioningState
		provisioningStateTemp := genruntime.ToEnum(provisioningState, replicationProperties_ProvisioningState_STATUS_Values)
		replication.ProvisioningState = &provisioningStateTemp
	} else {
		replication.ProvisioningState = nil
	}

	// RegionEndpointEnabled
	if source.RegionEndpointEnabled != nil {
		regionEndpointEnabled := *source.RegionEndpointEnabled
		replication.RegionEndpointEnabled = &regionEndpointEnabled
	} else {
		replication.RegionEndpointEnabled = nil
	}

	// Status
	if source.Status != nil {
		var status Status_STATUS
		err := status.AssignProperties_From_Status_STATUS(source.Status)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_Status_STATUS() to populate field Status")
		}
		replication.Status = &status
	} else {
		replication.Status = nil
	}

	// SystemData
	if source.SystemData != nil {
		var systemDatum SystemData_STATUS
		err := systemDatum.AssignProperties_From_SystemData_STATUS(source.SystemData)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_From_SystemData_STATUS() to populate field SystemData")
		}
		replication.SystemData = &systemDatum
	} else {
		replication.SystemData = nil
	}

	// Tags
	replication.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	replication.Type = genruntime.ClonePointerToString(source.Type)

	// ZoneRedundancy
	if source.ZoneRedundancy != nil {
		zoneRedundancy := *source.ZoneRedundancy
		zoneRedundancyTemp := genruntime.ToEnum(zoneRedundancy, replicationProperties_ZoneRedundancy_STATUS_Values)
		replication.ZoneRedundancy = &zoneRedundancyTemp
	} else {
		replication.ZoneRedundancy = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RegistriesReplication_STATUS populates the provided destination RegistriesReplication_STATUS from our RegistriesReplication_STATUS
func (replication *RegistriesReplication_STATUS) AssignProperties_To_RegistriesReplication_STATUS(destination *storage.RegistriesReplication_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(replication.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(replication.Id)

	// Location
	destination.Location = genruntime.ClonePointerToString(replication.Location)

	// Name
	destination.Name = genruntime.ClonePointerToString(replication.Name)

	// ProvisioningState
	if replication.ProvisioningState != nil {
		provisioningState := string(*replication.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// RegionEndpointEnabled
	if replication.RegionEndpointEnabled != nil {
		regionEndpointEnabled := *replication.RegionEndpointEnabled
		destination.RegionEndpointEnabled = &regionEndpointEnabled
	} else {
		destination.RegionEndpointEnabled = nil
	}

	// Status
	if replication.Status != nil {
		var status storage.Status_STATUS
		err := replication.Status.AssignProperties_To_Status_STATUS(&status)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_Status_STATUS() to populate field Status")
		}
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// SystemData
	if replication.SystemData != nil {
		var systemDatum storage.SystemData_STATUS
		err := replication.SystemData.AssignProperties_To_SystemData_STATUS(&systemDatum)
		if err != nil {
			return eris.Wrap(err, "calling AssignProperties_To_SystemData_STATUS() to populate field SystemData")
		}
		destination.SystemData = &systemDatum
	} else {
		destination.SystemData = nil
	}

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(replication.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(replication.Type)

	// ZoneRedundancy
	if replication.ZoneRedundancy != nil {
		zoneRedundancy := string(*replication.ZoneRedundancy)
		destination.ZoneRedundancy = &zoneRedundancy
	} else {
		destination.ZoneRedundancy = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Details for configuring operator behavior. Fields in this struct are interpreted by the operator directly rather than being passed to Azure
type RegistriesReplicationOperatorSpec struct {
	// ConfigMapExpressions: configures where to place operator written dynamic ConfigMaps (created with CEL expressions).
	ConfigMapExpressions []*core.DestinationExpression `json:"configMapExpressions,omitempty"`

	// SecretExpressions: configures where to place operator written dynamic secrets (created with CEL expressions).
	SecretExpressions []*core.DestinationExpression `json:"secretExpressions,omitempty"`
}

// AssignProperties_From_RegistriesReplicationOperatorSpec populates our RegistriesReplicationOperatorSpec from the provided source RegistriesReplicationOperatorSpec
func (operator *RegistriesReplicationOperatorSpec) AssignProperties_From_RegistriesReplicationOperatorSpec(source *storage.RegistriesReplicationOperatorSpec) error {

	// ConfigMapExpressions
	if source.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(source.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range source.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		operator.ConfigMapExpressions = configMapExpressionList
	} else {
		operator.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if source.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(source.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range source.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		operator.SecretExpressions = secretExpressionList
	} else {
		operator.SecretExpressions = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RegistriesReplicationOperatorSpec populates the provided destination RegistriesReplicationOperatorSpec from our RegistriesReplicationOperatorSpec
func (operator *RegistriesReplicationOperatorSpec) AssignProperties_To_RegistriesReplicationOperatorSpec(destination *storage.RegistriesReplicationOperatorSpec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ConfigMapExpressions
	if operator.ConfigMapExpressions != nil {
		configMapExpressionList := make([]*core.DestinationExpression, len(operator.ConfigMapExpressions))
		for configMapExpressionIndex, configMapExpressionItem := range operator.ConfigMapExpressions {
			// Shadow the loop variable to avoid aliasing
			configMapExpressionItem := configMapExpressionItem
			if configMapExpressionItem != nil {
				configMapExpression := *configMapExpressionItem.DeepCopy()
				configMapExpressionList[configMapExpressionIndex] = &configMapExpression
			} else {
				configMapExpressionList[configMapExpressionIndex] = nil
			}
		}
		destination.ConfigMapExpressions = configMapExpressionList
	} else {
		destination.ConfigMapExpressions = nil
	}

	// SecretExpressions
	if operator.SecretExpressions != nil {
		secretExpressionList := make([]*core.DestinationExpression, len(operator.SecretExpressions))
		for secretExpressionIndex, secretExpressionItem := range operator.SecretExpressions {
			// Shadow the loop variable to avoid aliasing
			secretExpressionItem := secretExpressionItem
			if secretExpressionItem != nil {
				secretExpression := *secretExpressionItem.DeepCopy()
				secretExpressionList[secretExpressionIndex] = &secretExpression
			} else {
				secretExpressionList[secretExpressionIndex] = nil
			}
		}
		destination.SecretExpressions = secretExpressionList
	} else {
		destination.SecretExpressions = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type ReplicationProperties_ProvisioningState_STATUS string

const (
	ReplicationProperties_ProvisioningState_STATUS_Canceled  = ReplicationProperties_ProvisioningState_STATUS("Canceled")
	ReplicationProperties_ProvisioningState_STATUS_Creating  = ReplicationProperties_ProvisioningState_STATUS("Creating")
	ReplicationProperties_ProvisioningState_STATUS_Deleting  = ReplicationProperties_ProvisioningState_STATUS("Deleting")
	ReplicationProperties_ProvisioningState_STATUS_Failed    = ReplicationProperties_ProvisioningState_STATUS("Failed")
	ReplicationProperties_ProvisioningState_STATUS_Succeeded = ReplicationProperties_ProvisioningState_STATUS("Succeeded")
	ReplicationProperties_ProvisioningState_STATUS_Updating  = ReplicationProperties_ProvisioningState_STATUS("Updating")
)

// Mapping from string to ReplicationProperties_ProvisioningState_STATUS
var replicationProperties_ProvisioningState_STATUS_Values = map[string]ReplicationProperties_ProvisioningState_STATUS{
	"canceled":  ReplicationProperties_ProvisioningState_STATUS_Canceled,
	"creating":  ReplicationProperties_ProvisioningState_STATUS_Creating,
	"deleting":  ReplicationProperties_ProvisioningState_STATUS_Deleting,
	"failed":    ReplicationProperties_ProvisioningState_STATUS_Failed,
	"succeeded": ReplicationProperties_ProvisioningState_STATUS_Succeeded,
	"updating":  ReplicationProperties_ProvisioningState_STATUS_Updating,
}

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type ReplicationProperties_ZoneRedundancy string

const (
	ReplicationProperties_ZoneRedundancy_Disabled = ReplicationProperties_ZoneRedundancy("Disabled")
	ReplicationProperties_ZoneRedundancy_Enabled  = ReplicationProperties_ZoneRedundancy("Enabled")
)

// Mapping from string to ReplicationProperties_ZoneRedundancy
var replicationProperties_ZoneRedundancy_Values = map[string]ReplicationProperties_ZoneRedundancy{
	"disabled": ReplicationProperties_ZoneRedundancy_Disabled,
	"enabled":  ReplicationProperties_ZoneRedundancy_Enabled,
}

type ReplicationProperties_ZoneRedundancy_STATUS string

const (
	ReplicationProperties_ZoneRedundancy_STATUS_Disabled = ReplicationProperties_ZoneRedundancy_STATUS("Disabled")
	ReplicationProperties_ZoneRedundancy_STATUS_Enabled  = ReplicationProperties_ZoneRedundancy_STATUS("Enabled")
)

// Mapping from string to ReplicationProperties_ZoneRedundancy_STATUS
var replicationProperties_ZoneRedundancy_STATUS_Values = map[string]ReplicationProperties_ZoneRedundancy_STATUS{
	"disabled": ReplicationProperties_ZoneRedundancy_STATUS_Disabled,
	"enabled":  ReplicationProperties_ZoneRedundancy_STATUS_Enabled,
}

// The status of an Azure resource at the time the operation was called.
type Status_STATUS struct {
	// DisplayStatus: The short label for the status.
	DisplayStatus *string `json:"displayStatus,omitempty"`

	// Message: The detailed message for the status, including alerts and error messages.
	Message *string `json:"message,omitempty"`

	// Timestamp: The timestamp when the status was changed to the current value.
	Timestamp *string `json:"timestamp,omitempty"`
}

var _ genruntime.FromARMConverter = &Status_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (status *Status_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.Status_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (status *Status_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.Status_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.Status_STATUS, got %T", armInput)
	}

	// Set property "DisplayStatus":
	if typedInput.DisplayStatus != nil {
		displayStatus := *typedInput.DisplayStatus
		status.DisplayStatus = &displayStatus
	}

	// Set property "Message":
	if typedInput.Message != nil {
		message := *typedInput.Message
		status.Message = &message
	}

	// Set property "Timestamp":
	if typedInput.Timestamp != nil {
		timestamp := *typedInput.Timestamp
		status.Timestamp = &timestamp
	}

	// No error
	return nil
}

// AssignProperties_From_Status_STATUS populates our Status_STATUS from the provided source Status_STATUS
func (status *Status_STATUS) AssignProperties_From_Status_STATUS(source *storage.Status_STATUS) error {

	// DisplayStatus
	status.DisplayStatus = genruntime.ClonePointerToString(source.DisplayStatus)

	// Message
	status.Message = genruntime.ClonePointerToString(source.Message)

	// Timestamp
	status.Timestamp = genruntime.ClonePointerToString(source.Timestamp)

	// No error
	return nil
}

// AssignProperties_To_Status_STATUS populates the provided destination Status_STATUS from our Status_STATUS
func (status *Status_STATUS) AssignProperties_To_Status_STATUS(destination *storage.Status_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DisplayStatus
	destination.DisplayStatus = genruntime.ClonePointerToString(status.DisplayStatus)

	// Message
	destination.Message = genruntime.ClonePointerToString(status.Message)

	// Timestamp
	destination.Timestamp = genruntime.ClonePointerToString(status.Timestamp)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Metadata pertaining to creation and last modification of the resource.
type SystemData_STATUS struct {
	// CreatedAt: The timestamp of resource creation (UTC).
	CreatedAt *string `json:"createdAt,omitempty"`

	// CreatedBy: The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreatedByType: The type of identity that created the resource.
	CreatedByType *SystemData_CreatedByType_STATUS `json:"createdByType,omitempty"`

	// LastModifiedAt: The timestamp of resource modification (UTC).
	LastModifiedAt *string `json:"lastModifiedAt,omitempty"`

	// LastModifiedBy: The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// LastModifiedByType: The type of identity that last modified the resource.
	LastModifiedByType *SystemData_LastModifiedByType_STATUS `json:"lastModifiedByType,omitempty"`
}

var _ genruntime.FromARMConverter = &SystemData_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (data *SystemData_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &arm.SystemData_STATUS{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (data *SystemData_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(arm.SystemData_STATUS)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected arm.SystemData_STATUS, got %T", armInput)
	}

	// Set property "CreatedAt":
	if typedInput.CreatedAt != nil {
		createdAt := *typedInput.CreatedAt
		data.CreatedAt = &createdAt
	}

	// Set property "CreatedBy":
	if typedInput.CreatedBy != nil {
		createdBy := *typedInput.CreatedBy
		data.CreatedBy = &createdBy
	}

	// Set property "CreatedByType":
	if typedInput.CreatedByType != nil {
		var temp string
		temp = string(*typedInput.CreatedByType)
		createdByType := SystemData_CreatedByType_STATUS(temp)
		data.CreatedByType = &createdByType
	}

	// Set property "LastModifiedAt":
	if typedInput.LastModifiedAt != nil {
		lastModifiedAt := *typedInput.LastModifiedAt
		data.LastModifiedAt = &lastModifiedAt
	}

	// Set property "LastModifiedBy":
	if typedInput.LastModifiedBy != nil {
		lastModifiedBy := *typedInput.LastModifiedBy
		data.LastModifiedBy = &lastModifiedBy
	}

	// Set property "LastModifiedByType":
	if typedInput.LastModifiedByType != nil {
		var temp string
		temp = string(*typedInput.LastModifiedByType)
		lastModifiedByType := SystemData_LastModifiedByType_STATUS(temp)
		data.LastModifiedByType = &lastModifiedByType
	}

	// No error
	return nil
}

// AssignProperties_From_SystemData_STATUS populates our SystemData_STATUS from the provided source SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_From_SystemData_STATUS(source *storage.SystemData_STATUS) error {

	// CreatedAt
	data.CreatedAt = genruntime.ClonePointerToString(source.CreatedAt)

	// CreatedBy
	data.CreatedBy = genruntime.ClonePointerToString(source.CreatedBy)

	// CreatedByType
	if source.CreatedByType != nil {
		createdByType := *source.CreatedByType
		createdByTypeTemp := genruntime.ToEnum(createdByType, systemData_CreatedByType_STATUS_Values)
		data.CreatedByType = &createdByTypeTemp
	} else {
		data.CreatedByType = nil
	}

	// LastModifiedAt
	data.LastModifiedAt = genruntime.ClonePointerToString(source.LastModifiedAt)

	// LastModifiedBy
	data.LastModifiedBy = genruntime.ClonePointerToString(source.LastModifiedBy)

	// LastModifiedByType
	if source.LastModifiedByType != nil {
		lastModifiedByType := *source.LastModifiedByType
		lastModifiedByTypeTemp := genruntime.ToEnum(lastModifiedByType, systemData_LastModifiedByType_STATUS_Values)
		data.LastModifiedByType = &lastModifiedByTypeTemp
	} else {
		data.LastModifiedByType = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SystemData_STATUS populates the provided destination SystemData_STATUS from our SystemData_STATUS
func (data *SystemData_STATUS) AssignProperties_To_SystemData_STATUS(destination *storage.SystemData_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CreatedAt
	destination.CreatedAt = genruntime.ClonePointerToString(data.CreatedAt)

	// CreatedBy
	destination.CreatedBy = genruntime.ClonePointerToString(data.CreatedBy)

	// CreatedByType
	if data.CreatedByType != nil {
		createdByType := string(*data.CreatedByType)
		destination.CreatedByType = &createdByType
	} else {
		destination.CreatedByType = nil
	}

	// LastModifiedAt
	destination.LastModifiedAt = genruntime.ClonePointerToString(data.LastModifiedAt)

	// LastModifiedBy
	destination.LastModifiedBy = genruntime.ClonePointerToString(data.LastModifiedBy)

	// LastModifiedByType
	if data.LastModifiedByType != nil {
		lastModifiedByType := string(*data.LastModifiedByType)
		destination.LastModifiedByType = &lastModifiedByType
	} else {
		destination.LastModifiedByType = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

type SystemData_CreatedByType_STATUS string

const (
	SystemData_CreatedByType_STATUS_Application     = SystemData_CreatedByType_STATUS("Application")
	SystemData_CreatedByType_STATUS_Key             = SystemData_CreatedByType_STATUS("Key")
	SystemData_CreatedByType_STATUS_ManagedIdentity = SystemData_CreatedByType_STATUS("ManagedIdentity")
	SystemData_CreatedByType_STATUS_User            = SystemData_CreatedByType_STATUS("User")
)

// Mapping from string to SystemData_CreatedByType_STATUS
var systemData_CreatedByType_STATUS_Values = map[string]SystemData_CreatedByType_STATUS{
	"application":     SystemData_CreatedByType_STATUS_Application,
	"key":             SystemData_CreatedByType_STATUS_Key,
	"managedidentity": SystemData_CreatedByType_STATUS_ManagedIdentity,
	"user":            SystemData_CreatedByType_STATUS_User,
}

type SystemData_LastModifiedByType_STATUS string

const (
	SystemData_LastModifiedByType_STATUS_Application     = SystemData_LastModifiedByType_STATUS("Application")
	SystemData_LastModifiedByType_STATUS_Key             = SystemData_LastModifiedByType_STATUS("Key")
	SystemData_LastModifiedByType_STATUS_ManagedIdentity = SystemData_LastModifiedByType_STATUS("ManagedIdentity")
	SystemData_LastModifiedByType_STATUS_User            = SystemData_LastModifiedByType_STATUS("User")
)

// Mapping from string to SystemData_LastModifiedByType_STATUS
var systemData_LastModifiedByType_STATUS_Values = map[string]SystemData_LastModifiedByType_STATUS{
	"application":     SystemData_LastModifiedByType_STATUS_Application,
	"key":             SystemData_LastModifiedByType_STATUS_Key,
	"managedidentity": SystemData_LastModifiedByType_STATUS_ManagedIdentity,
	"user":            SystemData_LastModifiedByType_STATUS_User,
}

func init() {
	SchemeBuilder.Register(&RegistriesReplication{}, &RegistriesReplicationList{})
}
