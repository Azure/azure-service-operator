// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20230701

import (
	"encoding/json"
	storage "github.com/Azure/azure-service-operator/v2/api/containerregistry/v1api20230701/storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_RegistriesReplication_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RegistriesReplication to hub returns original",
		prop.ForAll(RunResourceConversionTestForRegistriesReplication, RegistriesReplicationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForRegistriesReplication tests if a specific instance of RegistriesReplication round trips to the hub storage version and back losslessly
func RunResourceConversionTestForRegistriesReplication(subject RegistriesReplication) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub storage.RegistriesReplication
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual RegistriesReplication
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RegistriesReplication_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RegistriesReplication to RegistriesReplication via AssignProperties_To_RegistriesReplication & AssignProperties_From_RegistriesReplication returns original",
		prop.ForAll(RunPropertyAssignmentTestForRegistriesReplication, RegistriesReplicationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRegistriesReplication tests if a specific instance of RegistriesReplication can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRegistriesReplication(subject RegistriesReplication) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RegistriesReplication
	err := copied.AssignProperties_To_RegistriesReplication(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RegistriesReplication
	err = actual.AssignProperties_From_RegistriesReplication(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RegistriesReplication_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistriesReplication via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistriesReplication, RegistriesReplicationGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistriesReplication runs a test to see if a specific instance of RegistriesReplication round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistriesReplication(subject RegistriesReplication) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistriesReplication
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistriesReplication instances for property testing - lazily instantiated by
// RegistriesReplicationGenerator()
var registriesReplicationGenerator gopter.Gen

// RegistriesReplicationGenerator returns a generator of RegistriesReplication instances for property testing.
func RegistriesReplicationGenerator() gopter.Gen {
	if registriesReplicationGenerator != nil {
		return registriesReplicationGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRegistriesReplication(generators)
	registriesReplicationGenerator = gen.Struct(reflect.TypeOf(RegistriesReplication{}), generators)

	return registriesReplicationGenerator
}

// AddRelatedPropertyGeneratorsForRegistriesReplication is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistriesReplication(gens map[string]gopter.Gen) {
	gens["Spec"] = RegistriesReplication_SpecGenerator()
	gens["Status"] = RegistriesReplication_STATUSGenerator()
}

func Test_RegistriesReplicationOperatorSpec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RegistriesReplicationOperatorSpec to RegistriesReplicationOperatorSpec via AssignProperties_To_RegistriesReplicationOperatorSpec & AssignProperties_From_RegistriesReplicationOperatorSpec returns original",
		prop.ForAll(RunPropertyAssignmentTestForRegistriesReplicationOperatorSpec, RegistriesReplicationOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRegistriesReplicationOperatorSpec tests if a specific instance of RegistriesReplicationOperatorSpec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRegistriesReplicationOperatorSpec(subject RegistriesReplicationOperatorSpec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RegistriesReplicationOperatorSpec
	err := copied.AssignProperties_To_RegistriesReplicationOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RegistriesReplicationOperatorSpec
	err = actual.AssignProperties_From_RegistriesReplicationOperatorSpec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RegistriesReplicationOperatorSpec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistriesReplicationOperatorSpec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistriesReplicationOperatorSpec, RegistriesReplicationOperatorSpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistriesReplicationOperatorSpec runs a test to see if a specific instance of RegistriesReplicationOperatorSpec round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistriesReplicationOperatorSpec(subject RegistriesReplicationOperatorSpec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistriesReplicationOperatorSpec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistriesReplicationOperatorSpec instances for property testing - lazily instantiated by
// RegistriesReplicationOperatorSpecGenerator()
var registriesReplicationOperatorSpecGenerator gopter.Gen

// RegistriesReplicationOperatorSpecGenerator returns a generator of RegistriesReplicationOperatorSpec instances for property testing.
func RegistriesReplicationOperatorSpecGenerator() gopter.Gen {
	if registriesReplicationOperatorSpecGenerator != nil {
		return registriesReplicationOperatorSpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	registriesReplicationOperatorSpecGenerator = gen.Struct(reflect.TypeOf(RegistriesReplicationOperatorSpec{}), generators)

	return registriesReplicationOperatorSpecGenerator
}

func Test_RegistriesReplication_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RegistriesReplication_STATUS to RegistriesReplication_STATUS via AssignProperties_To_RegistriesReplication_STATUS & AssignProperties_From_RegistriesReplication_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForRegistriesReplication_STATUS, RegistriesReplication_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRegistriesReplication_STATUS tests if a specific instance of RegistriesReplication_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRegistriesReplication_STATUS(subject RegistriesReplication_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RegistriesReplication_STATUS
	err := copied.AssignProperties_To_RegistriesReplication_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RegistriesReplication_STATUS
	err = actual.AssignProperties_From_RegistriesReplication_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RegistriesReplication_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistriesReplication_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistriesReplication_STATUS, RegistriesReplication_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistriesReplication_STATUS runs a test to see if a specific instance of RegistriesReplication_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistriesReplication_STATUS(subject RegistriesReplication_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistriesReplication_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistriesReplication_STATUS instances for property testing - lazily instantiated by
// RegistriesReplication_STATUSGenerator()
var registriesReplication_STATUSGenerator gopter.Gen

// RegistriesReplication_STATUSGenerator returns a generator of RegistriesReplication_STATUS instances for property testing.
// We first initialize registriesReplication_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistriesReplication_STATUSGenerator() gopter.Gen {
	if registriesReplication_STATUSGenerator != nil {
		return registriesReplication_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistriesReplication_STATUS(generators)
	registriesReplication_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistriesReplication_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistriesReplication_STATUS(generators)
	AddRelatedPropertyGeneratorsForRegistriesReplication_STATUS(generators)
	registriesReplication_STATUSGenerator = gen.Struct(reflect.TypeOf(RegistriesReplication_STATUS{}), generators)

	return registriesReplication_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForRegistriesReplication_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistriesReplication_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ReplicationProperties_ProvisioningState_STATUS_Canceled,
		ReplicationProperties_ProvisioningState_STATUS_Creating,
		ReplicationProperties_ProvisioningState_STATUS_Deleting,
		ReplicationProperties_ProvisioningState_STATUS_Failed,
		ReplicationProperties_ProvisioningState_STATUS_Succeeded,
		ReplicationProperties_ProvisioningState_STATUS_Updating))
	gens["RegionEndpointEnabled"] = gen.PtrOf(gen.Bool())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundancy"] = gen.PtrOf(gen.OneConstOf(ReplicationProperties_ZoneRedundancy_STATUS_Disabled, ReplicationProperties_ZoneRedundancy_STATUS_Enabled))
}

// AddRelatedPropertyGeneratorsForRegistriesReplication_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistriesReplication_STATUS(gens map[string]gopter.Gen) {
	gens["Status"] = gen.PtrOf(Status_STATUSGenerator())
	gens["SystemData"] = gen.PtrOf(SystemData_STATUSGenerator())
}

func Test_RegistriesReplication_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from RegistriesReplication_Spec to RegistriesReplication_Spec via AssignProperties_To_RegistriesReplication_Spec & AssignProperties_From_RegistriesReplication_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForRegistriesReplication_Spec, RegistriesReplication_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForRegistriesReplication_Spec tests if a specific instance of RegistriesReplication_Spec can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForRegistriesReplication_Spec(subject RegistriesReplication_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.RegistriesReplication_Spec
	err := copied.AssignProperties_To_RegistriesReplication_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual RegistriesReplication_Spec
	err = actual.AssignProperties_From_RegistriesReplication_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_RegistriesReplication_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RegistriesReplication_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRegistriesReplication_Spec, RegistriesReplication_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRegistriesReplication_Spec runs a test to see if a specific instance of RegistriesReplication_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForRegistriesReplication_Spec(subject RegistriesReplication_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RegistriesReplication_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RegistriesReplication_Spec instances for property testing - lazily instantiated by
// RegistriesReplication_SpecGenerator()
var registriesReplication_SpecGenerator gopter.Gen

// RegistriesReplication_SpecGenerator returns a generator of RegistriesReplication_Spec instances for property testing.
// We first initialize registriesReplication_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RegistriesReplication_SpecGenerator() gopter.Gen {
	if registriesReplication_SpecGenerator != nil {
		return registriesReplication_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistriesReplication_Spec(generators)
	registriesReplication_SpecGenerator = gen.Struct(reflect.TypeOf(RegistriesReplication_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRegistriesReplication_Spec(generators)
	AddRelatedPropertyGeneratorsForRegistriesReplication_Spec(generators)
	registriesReplication_SpecGenerator = gen.Struct(reflect.TypeOf(RegistriesReplication_Spec{}), generators)

	return registriesReplication_SpecGenerator
}

// AddIndependentPropertyGeneratorsForRegistriesReplication_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRegistriesReplication_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["RegionEndpointEnabled"] = gen.PtrOf(gen.Bool())
	gens["Tags"] = gen.MapOf(
		gen.AlphaString(),
		gen.AlphaString())
	gens["ZoneRedundancy"] = gen.PtrOf(gen.OneConstOf(ReplicationProperties_ZoneRedundancy_Disabled, ReplicationProperties_ZoneRedundancy_Enabled))
}

// AddRelatedPropertyGeneratorsForRegistriesReplication_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRegistriesReplication_Spec(gens map[string]gopter.Gen) {
	gens["OperatorSpec"] = gen.PtrOf(RegistriesReplicationOperatorSpecGenerator())
}

func Test_Status_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Status_STATUS to Status_STATUS via AssignProperties_To_Status_STATUS & AssignProperties_From_Status_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForStatus_STATUS, Status_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForStatus_STATUS tests if a specific instance of Status_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForStatus_STATUS(subject Status_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.Status_STATUS
	err := copied.AssignProperties_To_Status_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Status_STATUS
	err = actual.AssignProperties_From_Status_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Status_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Status_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForStatus_STATUS, Status_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForStatus_STATUS runs a test to see if a specific instance of Status_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForStatus_STATUS(subject Status_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Status_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Status_STATUS instances for property testing - lazily instantiated by Status_STATUSGenerator()
var status_STATUSGenerator gopter.Gen

// Status_STATUSGenerator returns a generator of Status_STATUS instances for property testing.
func Status_STATUSGenerator() gopter.Gen {
	if status_STATUSGenerator != nil {
		return status_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForStatus_STATUS(generators)
	status_STATUSGenerator = gen.Struct(reflect.TypeOf(Status_STATUS{}), generators)

	return status_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForStatus_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForStatus_STATUS(gens map[string]gopter.Gen) {
	gens["DisplayStatus"] = gen.PtrOf(gen.AlphaString())
	gens["Message"] = gen.PtrOf(gen.AlphaString())
	gens["Timestamp"] = gen.PtrOf(gen.AlphaString())
}

func Test_SystemData_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from SystemData_STATUS to SystemData_STATUS via AssignProperties_To_SystemData_STATUS & AssignProperties_From_SystemData_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForSystemData_STATUS tests if a specific instance of SystemData_STATUS can be assigned to storage and back losslessly
func RunPropertyAssignmentTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other storage.SystemData_STATUS
	err := copied.AssignProperties_To_SystemData_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual SystemData_STATUS
	err = actual.AssignProperties_From_SystemData_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_SystemData_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SystemData_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSystemData_STATUS, SystemData_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSystemData_STATUS runs a test to see if a specific instance of SystemData_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSystemData_STATUS(subject SystemData_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SystemData_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SystemData_STATUS instances for property testing - lazily instantiated by SystemData_STATUSGenerator()
var systemData_STATUSGenerator gopter.Gen

// SystemData_STATUSGenerator returns a generator of SystemData_STATUS instances for property testing.
func SystemData_STATUSGenerator() gopter.Gen {
	if systemData_STATUSGenerator != nil {
		return systemData_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSystemData_STATUS(generators)
	systemData_STATUSGenerator = gen.Struct(reflect.TypeOf(SystemData_STATUS{}), generators)

	return systemData_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSystemData_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSystemData_STATUS(gens map[string]gopter.Gen) {
	gens["CreatedAt"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedBy"] = gen.PtrOf(gen.AlphaString())
	gens["CreatedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_CreatedByType_STATUS_Application,
		SystemData_CreatedByType_STATUS_Key,
		SystemData_CreatedByType_STATUS_ManagedIdentity,
		SystemData_CreatedByType_STATUS_User))
	gens["LastModifiedAt"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedBy"] = gen.PtrOf(gen.AlphaString())
	gens["LastModifiedByType"] = gen.PtrOf(gen.OneConstOf(
		SystemData_LastModifiedByType_STATUS_Application,
		SystemData_LastModifiedByType_STATUS_Key,
		SystemData_LastModifiedByType_STATUS_ManagedIdentity,
		SystemData_LastModifiedByType_STATUS_User))
}
