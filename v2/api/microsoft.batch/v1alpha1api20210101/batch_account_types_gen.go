// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1alpha1api20210101

import (
	"fmt"
	"github.com/Azure/azure-service-operator/v2/api/microsoft.batch/v1alpha1api20210101storage"
	"github.com/Azure/azure-service-operator/v2/internal/controller/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:rbac:groups=microsoft.batch.azure.com,resources=batchaccounts,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=microsoft.batch.azure.com,resources={batchaccounts/status,batchaccounts/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
//Generated from: https://schema.management.azure.com/schemas/2021-01-01/Microsoft.Batch.json#/resourceDefinitions/batchAccounts
type BatchAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BatchAccounts_Spec  `json:"spec,omitempty"`
	Status            BatchAccount_Status `json:"status,omitempty"`
}

var _ conditions.Conditioner = &BatchAccount{}

// GetConditions returns the conditions of the resource
func (batchAccount *BatchAccount) GetConditions() conditions.Conditions {
	return batchAccount.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (batchAccount *BatchAccount) SetConditions(conditions conditions.Conditions) {
	batchAccount.Status.Conditions = conditions
}

// +kubebuilder:webhook:path=/mutate-microsoft-batch-azure-com-v1alpha1api20210101-batchaccount,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.batch.azure.com,resources=batchaccounts,verbs=create;update,versions=v1alpha1api20210101,name=default.v1alpha1api20210101.batchaccounts.microsoft.batch.azure.com,admissionReviewVersions=v1beta1

var _ admission.Defaulter = &BatchAccount{}

// Default applies defaults to the BatchAccount resource
func (batchAccount *BatchAccount) Default() {
	batchAccount.defaultImpl()
	var temp interface{} = batchAccount
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (batchAccount *BatchAccount) defaultAzureName() {
	if batchAccount.Spec.AzureName == "" {
		batchAccount.Spec.AzureName = batchAccount.Name
	}
}

// defaultImpl applies the code generated defaults to the BatchAccount resource
func (batchAccount *BatchAccount) defaultImpl() { batchAccount.defaultAzureName() }

var _ genruntime.KubernetesResource = &BatchAccount{}

// AzureName returns the Azure name of the resource
func (batchAccount *BatchAccount) AzureName() string {
	return batchAccount.Spec.AzureName
}

// GetResourceKind returns the kind of the resource
func (batchAccount *BatchAccount) GetResourceKind() genruntime.ResourceKind {
	return genruntime.ResourceKindNormal
}

// GetSpec returns the specification of this resource
func (batchAccount *BatchAccount) GetSpec() genruntime.ConvertibleSpec {
	return &batchAccount.Spec
}

// GetStatus returns the status of this resource
func (batchAccount *BatchAccount) GetStatus() genruntime.ConvertibleStatus {
	return &batchAccount.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Batch/batchAccounts"
func (batchAccount *BatchAccount) GetType() string {
	return "Microsoft.Batch/batchAccounts"
}

// NewEmptyStatus returns a new empty (blank) status
func (batchAccount *BatchAccount) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &BatchAccount_Status{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (batchAccount *BatchAccount) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(batchAccount.Spec)
	return &genruntime.ResourceReference{Group: group, Kind: kind, Namespace: batchAccount.Namespace, Name: batchAccount.Spec.Owner.Name}
}

// SetStatus sets the status of this resource
func (batchAccount *BatchAccount) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*BatchAccount_Status); ok {
		batchAccount.Status = *st
		return nil
	}

	// Convert status to required version
	var st BatchAccount_Status
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	batchAccount.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-microsoft-batch-azure-com-v1alpha1api20210101-batchaccount,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=microsoft.batch.azure.com,resources=batchaccounts,verbs=create;update,versions=v1alpha1api20210101,name=validate.v1alpha1api20210101.batchaccounts.microsoft.batch.azure.com,admissionReviewVersions=v1beta1

var _ admission.Validator = &BatchAccount{}

// ValidateCreate validates the creation of the resource
func (batchAccount *BatchAccount) ValidateCreate() error {
	validations := batchAccount.createValidations()
	var temp interface{} = batchAccount
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (batchAccount *BatchAccount) ValidateDelete() error {
	validations := batchAccount.deleteValidations()
	var temp interface{} = batchAccount
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (batchAccount *BatchAccount) ValidateUpdate(old runtime.Object) error {
	validations := batchAccount.updateValidations()
	var temp interface{} = batchAccount
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (batchAccount *BatchAccount) createValidations() []func() error {
	return []func() error{batchAccount.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (batchAccount *BatchAccount) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (batchAccount *BatchAccount) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return batchAccount.validateResourceReferences()
		},
	}
}

// validateResourceReferences validates all resource references
func (batchAccount *BatchAccount) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&batchAccount.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// AssignPropertiesFromBatchAccount populates our BatchAccount from the provided source BatchAccount
func (batchAccount *BatchAccount) AssignPropertiesFromBatchAccount(source *v1alpha1api20210101storage.BatchAccount) error {

	// Spec
	var spec BatchAccounts_Spec
	err := spec.AssignPropertiesFromBatchAccountsSpec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesFromBatchAccountsSpec()")
	}
	batchAccount.Spec = spec

	// Status
	var status BatchAccount_Status
	err = status.AssignPropertiesFromBatchAccountStatus(&source.Status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesFromBatchAccountStatus()")
	}
	batchAccount.Status = status

	// No error
	return nil
}

// AssignPropertiesToBatchAccount populates the provided destination BatchAccount from our BatchAccount
func (batchAccount *BatchAccount) AssignPropertiesToBatchAccount(destination *v1alpha1api20210101storage.BatchAccount) error {

	// Spec
	var spec v1alpha1api20210101storage.BatchAccounts_Spec
	err := batchAccount.Spec.AssignPropertiesToBatchAccountsSpec(&spec)
	if err != nil {
		return errors.Wrap(err, "populating Spec from Spec, calling AssignPropertiesToBatchAccountsSpec()")
	}
	destination.Spec = spec

	// Status
	var status v1alpha1api20210101storage.BatchAccount_Status
	err = batchAccount.Status.AssignPropertiesToBatchAccountStatus(&status)
	if err != nil {
		return errors.Wrap(err, "populating Status from Status, calling AssignPropertiesToBatchAccountStatus()")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (batchAccount *BatchAccount) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: batchAccount.Spec.OriginalVersion(),
		Kind:    "BatchAccount",
	}
}

// +kubebuilder:object:root=true
//Generated from: https://schema.management.azure.com/schemas/2021-01-01/Microsoft.Batch.json#/resourceDefinitions/batchAccounts
type BatchAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BatchAccount `json:"items"`
}

//Generated from:
type BatchAccount_Status struct {
	//AccountEndpoint: The account endpoint used to interact with the Batch service.
	AccountEndpoint              *string                       `json:"accountEndpoint,omitempty"`
	ActiveJobAndJobScheduleQuota *int                          `json:"activeJobAndJobScheduleQuota,omitempty"`
	AutoStorage                  *AutoStorageProperties_Status `json:"autoStorage,omitempty"`

	//Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	//DedicatedCoreQuota: For accounts with PoolAllocationMode set to
	//UserSubscription, quota is managed on the subscription so this value is not
	//returned.
	DedicatedCoreQuota *int `json:"dedicatedCoreQuota,omitempty"`

	//DedicatedCoreQuotaPerVMFamily: A list of the dedicated core quota per Virtual
	//Machine family for the Batch account. For accounts with PoolAllocationMode set
	//to UserSubscription, quota is managed on the subscription so this value is not
	//returned.
	DedicatedCoreQuotaPerVMFamily []VirtualMachineFamilyCoreQuota_Status `json:"dedicatedCoreQuotaPerVMFamily,omitempty"`

	//DedicatedCoreQuotaPerVMFamilyEnforced: Batch is transitioning its core quota
	//system for dedicated cores to be enforced per Virtual Machine family. During
	//this transitional phase, the dedicated core quota per Virtual Machine family may
	//not yet be enforced. If this flag is false, dedicated core quota is enforced via
	//the old dedicatedCoreQuota property on the account and does not consider Virtual
	//Machine family. If this flag is true, dedicated core quota is enforced via the
	//dedicatedCoreQuotaPerVMFamily property on the account, and the old
	//dedicatedCoreQuota does not apply.
	DedicatedCoreQuotaPerVMFamilyEnforced *bool `json:"dedicatedCoreQuotaPerVMFamilyEnforced,omitempty"`

	//Encryption: Configures how customer data is encrypted inside the Batch account.
	//By default, accounts are encrypted using a Microsoft managed key. For additional
	//control, a customer-managed key can be used instead.
	Encryption *EncryptionProperties_Status `json:"encryption,omitempty"`

	//Id: The ID of the resource.
	Id *string `json:"id,omitempty"`

	//Identity: The identity of the Batch account.
	Identity          *BatchAccountIdentity_Status `json:"identity,omitempty"`
	KeyVaultReference *KeyVaultReference_Status    `json:"keyVaultReference,omitempty"`

	//Location: The location of the resource.
	Location *string `json:"location,omitempty"`

	//LowPriorityCoreQuota: For accounts with PoolAllocationMode set to
	//UserSubscription, quota is managed on the subscription so this value is not
	//returned.
	LowPriorityCoreQuota *int `json:"lowPriorityCoreQuota,omitempty"`

	//Name: The name of the resource.
	Name               *string                    `json:"name,omitempty"`
	PoolAllocationMode *PoolAllocationMode_Status `json:"poolAllocationMode,omitempty"`
	PoolQuota          *int                       `json:"poolQuota,omitempty"`

	//PrivateEndpointConnections: List of private endpoint connections associated with
	//the Batch account
	PrivateEndpointConnections []PrivateEndpointConnection_Status `json:"privateEndpointConnections,omitempty"`

	//ProvisioningState: The provisioned state of the resource
	ProvisioningState *BatchAccountPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//PublicNetworkAccess: If not specified, the default value is 'enabled'.
	PublicNetworkAccess *PublicNetworkAccessType_Status `json:"publicNetworkAccess,omitempty"`

	//Tags: The tags of the resource.
	Tags map[string]string `json:"tags,omitempty"`

	//Type: The type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &BatchAccount_Status{}

// ConvertStatusFrom populates our BatchAccount_Status from the provided source
func (batchAccountStatus *BatchAccount_Status) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v1alpha1api20210101storage.BatchAccount_Status)
	if ok {
		// Populate our instance from source
		return batchAccountStatus.AssignPropertiesFromBatchAccountStatus(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101storage.BatchAccount_Status{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = batchAccountStatus.AssignPropertiesFromBatchAccountStatus(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our BatchAccount_Status
func (batchAccountStatus *BatchAccount_Status) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v1alpha1api20210101storage.BatchAccount_Status)
	if ok {
		// Populate destination from our instance
		return batchAccountStatus.AssignPropertiesToBatchAccountStatus(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101storage.BatchAccount_Status{}
	err := batchAccountStatus.AssignPropertiesToBatchAccountStatus(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &BatchAccount_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (batchAccountStatus *BatchAccount_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccount_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (batchAccountStatus *BatchAccount_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccount_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccount_StatusARM, got %T", armInput)
	}

	// Set property ‘AccountEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AccountEndpoint != nil {
			accountEndpoint := *typedInput.Properties.AccountEndpoint
			batchAccountStatus.AccountEndpoint = &accountEndpoint
		}
	}

	// Set property ‘ActiveJobAndJobScheduleQuota’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ActiveJobAndJobScheduleQuota != nil {
			activeJobAndJobScheduleQuota := *typedInput.Properties.ActiveJobAndJobScheduleQuota
			batchAccountStatus.ActiveJobAndJobScheduleQuota = &activeJobAndJobScheduleQuota
		}
	}

	// Set property ‘AutoStorage’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoStorage != nil {
			var autoStorage1 AutoStorageProperties_Status
			err := autoStorage1.PopulateFromARM(owner, *typedInput.Properties.AutoStorage)
			if err != nil {
				return err
			}
			autoStorage := autoStorage1
			batchAccountStatus.AutoStorage = &autoStorage
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DedicatedCoreQuota’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DedicatedCoreQuota != nil {
			dedicatedCoreQuota := *typedInput.Properties.DedicatedCoreQuota
			batchAccountStatus.DedicatedCoreQuota = &dedicatedCoreQuota
		}
	}

	// Set property ‘DedicatedCoreQuotaPerVMFamily’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.DedicatedCoreQuotaPerVMFamily {
			var item1 VirtualMachineFamilyCoreQuota_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			batchAccountStatus.DedicatedCoreQuotaPerVMFamily = append(batchAccountStatus.DedicatedCoreQuotaPerVMFamily, item1)
		}
	}

	// Set property ‘DedicatedCoreQuotaPerVMFamilyEnforced’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DedicatedCoreQuotaPerVMFamilyEnforced != nil {
			dedicatedCoreQuotaPerVMFamilyEnforced := *typedInput.Properties.DedicatedCoreQuotaPerVMFamilyEnforced
			batchAccountStatus.DedicatedCoreQuotaPerVMFamilyEnforced = &dedicatedCoreQuotaPerVMFamilyEnforced
		}
	}

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Encryption != nil {
			var encryption1 EncryptionProperties_Status
			err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
			if err != nil {
				return err
			}
			encryption := encryption1
			batchAccountStatus.Encryption = &encryption
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		batchAccountStatus.Id = &id
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 BatchAccountIdentity_Status
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		batchAccountStatus.Identity = &identity
	}

	// Set property ‘KeyVaultReference’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.KeyVaultReference != nil {
			var keyVaultReference1 KeyVaultReference_Status
			err := keyVaultReference1.PopulateFromARM(owner, *typedInput.Properties.KeyVaultReference)
			if err != nil {
				return err
			}
			keyVaultReference := keyVaultReference1
			batchAccountStatus.KeyVaultReference = &keyVaultReference
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		batchAccountStatus.Location = &location
	}

	// Set property ‘LowPriorityCoreQuota’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LowPriorityCoreQuota != nil {
			lowPriorityCoreQuota := *typedInput.Properties.LowPriorityCoreQuota
			batchAccountStatus.LowPriorityCoreQuota = &lowPriorityCoreQuota
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		batchAccountStatus.Name = &name
	}

	// Set property ‘PoolAllocationMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PoolAllocationMode != nil {
			poolAllocationMode := *typedInput.Properties.PoolAllocationMode
			batchAccountStatus.PoolAllocationMode = &poolAllocationMode
		}
	}

	// Set property ‘PoolQuota’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PoolQuota != nil {
			poolQuota := *typedInput.Properties.PoolQuota
			batchAccountStatus.PoolQuota = &poolQuota
		}
	}

	// Set property ‘PrivateEndpointConnections’:
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.PrivateEndpointConnections {
			var item1 PrivateEndpointConnection_Status
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			batchAccountStatus.PrivateEndpointConnections = append(batchAccountStatus.PrivateEndpointConnections, item1)
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			batchAccountStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PublicNetworkAccess != nil {
			publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
			batchAccountStatus.PublicNetworkAccess = &publicNetworkAccess
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		batchAccountStatus.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			batchAccountStatus.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		batchAccountStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountStatus populates our BatchAccount_Status from the provided source BatchAccount_Status
func (batchAccountStatus *BatchAccount_Status) AssignPropertiesFromBatchAccountStatus(source *v1alpha1api20210101storage.BatchAccount_Status) error {

	// AccountEndpoint
	if source.AccountEndpoint != nil {
		accountEndpoint := *source.AccountEndpoint
		batchAccountStatus.AccountEndpoint = &accountEndpoint
	} else {
		batchAccountStatus.AccountEndpoint = nil
	}

	// ActiveJobAndJobScheduleQuota
	if source.ActiveJobAndJobScheduleQuota != nil {
		activeJobAndJobScheduleQuotum := *source.ActiveJobAndJobScheduleQuota
		batchAccountStatus.ActiveJobAndJobScheduleQuota = &activeJobAndJobScheduleQuotum
	} else {
		batchAccountStatus.ActiveJobAndJobScheduleQuota = nil
	}

	// AutoStorage
	if source.AutoStorage != nil {
		var autoStorage AutoStorageProperties_Status
		err := autoStorage.AssignPropertiesFromAutoStoragePropertiesStatus(source.AutoStorage)
		if err != nil {
			return errors.Wrap(err, "populating AutoStorage from AutoStorage, calling AssignPropertiesFromAutoStoragePropertiesStatus()")
		}
		batchAccountStatus.AutoStorage = &autoStorage
	} else {
		batchAccountStatus.AutoStorage = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(source.Conditions))
	for conditionIndex, conditionItem := range source.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	batchAccountStatus.Conditions = conditionList

	// DedicatedCoreQuota
	if source.DedicatedCoreQuota != nil {
		dedicatedCoreQuotum := *source.DedicatedCoreQuota
		batchAccountStatus.DedicatedCoreQuota = &dedicatedCoreQuotum
	} else {
		batchAccountStatus.DedicatedCoreQuota = nil
	}

	// DedicatedCoreQuotaPerVMFamily
	dedicatedCoreQuotaPerVMFamilyList := make([]VirtualMachineFamilyCoreQuota_Status, len(source.DedicatedCoreQuotaPerVMFamily))
	for dedicatedCoreQuotaPerVMFamilyIndex, dedicatedCoreQuotaPerVMFamilyItem := range source.DedicatedCoreQuotaPerVMFamily {
		// Shadow the loop variable to avoid aliasing
		dedicatedCoreQuotaPerVMFamilyItem := dedicatedCoreQuotaPerVMFamilyItem
		var dedicatedCoreQuotaPerVMFamily VirtualMachineFamilyCoreQuota_Status
		err := dedicatedCoreQuotaPerVMFamily.AssignPropertiesFromVirtualMachineFamilyCoreQuotaStatus(&dedicatedCoreQuotaPerVMFamilyItem)
		if err != nil {
			return errors.Wrap(err, "populating DedicatedCoreQuotaPerVMFamily from DedicatedCoreQuotaPerVMFamily, calling AssignPropertiesFromVirtualMachineFamilyCoreQuotaStatus()")
		}
		dedicatedCoreQuotaPerVMFamilyList[dedicatedCoreQuotaPerVMFamilyIndex] = dedicatedCoreQuotaPerVMFamily
	}
	batchAccountStatus.DedicatedCoreQuotaPerVMFamily = dedicatedCoreQuotaPerVMFamilyList

	// DedicatedCoreQuotaPerVMFamilyEnforced
	if source.DedicatedCoreQuotaPerVMFamilyEnforced != nil {
		dedicatedCoreQuotaPerVMFamilyEnforced := *source.DedicatedCoreQuotaPerVMFamilyEnforced
		batchAccountStatus.DedicatedCoreQuotaPerVMFamilyEnforced = &dedicatedCoreQuotaPerVMFamilyEnforced
	} else {
		batchAccountStatus.DedicatedCoreQuotaPerVMFamilyEnforced = nil
	}

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperties_Status
		err := encryption.AssignPropertiesFromEncryptionPropertiesStatus(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "populating Encryption from Encryption, calling AssignPropertiesFromEncryptionPropertiesStatus()")
		}
		batchAccountStatus.Encryption = &encryption
	} else {
		batchAccountStatus.Encryption = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		batchAccountStatus.Id = &id
	} else {
		batchAccountStatus.Id = nil
	}

	// Identity
	if source.Identity != nil {
		var identity BatchAccountIdentity_Status
		err := identity.AssignPropertiesFromBatchAccountIdentityStatus(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromBatchAccountIdentityStatus()")
		}
		batchAccountStatus.Identity = &identity
	} else {
		batchAccountStatus.Identity = nil
	}

	// KeyVaultReference
	if source.KeyVaultReference != nil {
		var keyVaultReference KeyVaultReference_Status
		err := keyVaultReference.AssignPropertiesFromKeyVaultReferenceStatus(source.KeyVaultReference)
		if err != nil {
			return errors.Wrap(err, "populating KeyVaultReference from KeyVaultReference, calling AssignPropertiesFromKeyVaultReferenceStatus()")
		}
		batchAccountStatus.KeyVaultReference = &keyVaultReference
	} else {
		batchAccountStatus.KeyVaultReference = nil
	}

	// Location
	if source.Location != nil {
		location := *source.Location
		batchAccountStatus.Location = &location
	} else {
		batchAccountStatus.Location = nil
	}

	// LowPriorityCoreQuota
	if source.LowPriorityCoreQuota != nil {
		lowPriorityCoreQuotum := *source.LowPriorityCoreQuota
		batchAccountStatus.LowPriorityCoreQuota = &lowPriorityCoreQuotum
	} else {
		batchAccountStatus.LowPriorityCoreQuota = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		batchAccountStatus.Name = &name
	} else {
		batchAccountStatus.Name = nil
	}

	// PoolAllocationMode
	if source.PoolAllocationMode != nil {
		poolAllocationMode := PoolAllocationMode_Status(*source.PoolAllocationMode)
		batchAccountStatus.PoolAllocationMode = &poolAllocationMode
	} else {
		batchAccountStatus.PoolAllocationMode = nil
	}

	// PoolQuota
	if source.PoolQuota != nil {
		poolQuotum := *source.PoolQuota
		batchAccountStatus.PoolQuota = &poolQuotum
	} else {
		batchAccountStatus.PoolQuota = nil
	}

	// PrivateEndpointConnections
	privateEndpointConnectionList := make([]PrivateEndpointConnection_Status, len(source.PrivateEndpointConnections))
	for privateEndpointConnectionIndex, privateEndpointConnectionItem := range source.PrivateEndpointConnections {
		// Shadow the loop variable to avoid aliasing
		privateEndpointConnectionItem := privateEndpointConnectionItem
		var privateEndpointConnection PrivateEndpointConnection_Status
		err := privateEndpointConnection.AssignPropertiesFromPrivateEndpointConnectionStatus(&privateEndpointConnectionItem)
		if err != nil {
			return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesFromPrivateEndpointConnectionStatus()")
		}
		privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
	}
	batchAccountStatus.PrivateEndpointConnections = privateEndpointConnectionList

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := BatchAccountPropertiesStatusProvisioningState(*source.ProvisioningState)
		batchAccountStatus.ProvisioningState = &provisioningState
	} else {
		batchAccountStatus.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := PublicNetworkAccessType_Status(*source.PublicNetworkAccess)
		batchAccountStatus.PublicNetworkAccess = &publicNetworkAccess
	} else {
		batchAccountStatus.PublicNetworkAccess = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	batchAccountStatus.Tags = tagMap

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		batchAccountStatus.Type = &typeVar
	} else {
		batchAccountStatus.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBatchAccountStatus populates the provided destination BatchAccount_Status from our BatchAccount_Status
func (batchAccountStatus *BatchAccount_Status) AssignPropertiesToBatchAccountStatus(destination *v1alpha1api20210101storage.BatchAccount_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AccountEndpoint
	if batchAccountStatus.AccountEndpoint != nil {
		accountEndpoint := *batchAccountStatus.AccountEndpoint
		destination.AccountEndpoint = &accountEndpoint
	} else {
		destination.AccountEndpoint = nil
	}

	// ActiveJobAndJobScheduleQuota
	if batchAccountStatus.ActiveJobAndJobScheduleQuota != nil {
		activeJobAndJobScheduleQuotum := *batchAccountStatus.ActiveJobAndJobScheduleQuota
		destination.ActiveJobAndJobScheduleQuota = &activeJobAndJobScheduleQuotum
	} else {
		destination.ActiveJobAndJobScheduleQuota = nil
	}

	// AutoStorage
	if batchAccountStatus.AutoStorage != nil {
		var autoStorage v1alpha1api20210101storage.AutoStorageProperties_Status
		err := (*batchAccountStatus.AutoStorage).AssignPropertiesToAutoStoragePropertiesStatus(&autoStorage)
		if err != nil {
			return errors.Wrap(err, "populating AutoStorage from AutoStorage, calling AssignPropertiesToAutoStoragePropertiesStatus()")
		}
		destination.AutoStorage = &autoStorage
	} else {
		destination.AutoStorage = nil
	}

	// Conditions
	conditionList := make([]conditions.Condition, len(batchAccountStatus.Conditions))
	for conditionIndex, conditionItem := range batchAccountStatus.Conditions {
		// Shadow the loop variable to avoid aliasing
		conditionItem := conditionItem
		conditionList[conditionIndex] = conditionItem.Copy()
	}
	destination.Conditions = conditionList

	// DedicatedCoreQuota
	if batchAccountStatus.DedicatedCoreQuota != nil {
		dedicatedCoreQuotum := *batchAccountStatus.DedicatedCoreQuota
		destination.DedicatedCoreQuota = &dedicatedCoreQuotum
	} else {
		destination.DedicatedCoreQuota = nil
	}

	// DedicatedCoreQuotaPerVMFamily
	dedicatedCoreQuotaPerVMFamilyList := make([]v1alpha1api20210101storage.VirtualMachineFamilyCoreQuota_Status, len(batchAccountStatus.DedicatedCoreQuotaPerVMFamily))
	for dedicatedCoreQuotaPerVMFamilyIndex, dedicatedCoreQuotaPerVMFamilyItem := range batchAccountStatus.DedicatedCoreQuotaPerVMFamily {
		// Shadow the loop variable to avoid aliasing
		dedicatedCoreQuotaPerVMFamilyItem := dedicatedCoreQuotaPerVMFamilyItem
		var dedicatedCoreQuotaPerVMFamily v1alpha1api20210101storage.VirtualMachineFamilyCoreQuota_Status
		err := dedicatedCoreQuotaPerVMFamilyItem.AssignPropertiesToVirtualMachineFamilyCoreQuotaStatus(&dedicatedCoreQuotaPerVMFamily)
		if err != nil {
			return errors.Wrap(err, "populating DedicatedCoreQuotaPerVMFamily from DedicatedCoreQuotaPerVMFamily, calling AssignPropertiesToVirtualMachineFamilyCoreQuotaStatus()")
		}
		dedicatedCoreQuotaPerVMFamilyList[dedicatedCoreQuotaPerVMFamilyIndex] = dedicatedCoreQuotaPerVMFamily
	}
	destination.DedicatedCoreQuotaPerVMFamily = dedicatedCoreQuotaPerVMFamilyList

	// DedicatedCoreQuotaPerVMFamilyEnforced
	if batchAccountStatus.DedicatedCoreQuotaPerVMFamilyEnforced != nil {
		dedicatedCoreQuotaPerVMFamilyEnforced := *batchAccountStatus.DedicatedCoreQuotaPerVMFamilyEnforced
		destination.DedicatedCoreQuotaPerVMFamilyEnforced = &dedicatedCoreQuotaPerVMFamilyEnforced
	} else {
		destination.DedicatedCoreQuotaPerVMFamilyEnforced = nil
	}

	// Encryption
	if batchAccountStatus.Encryption != nil {
		var encryption v1alpha1api20210101storage.EncryptionProperties_Status
		err := (*batchAccountStatus.Encryption).AssignPropertiesToEncryptionPropertiesStatus(&encryption)
		if err != nil {
			return errors.Wrap(err, "populating Encryption from Encryption, calling AssignPropertiesToEncryptionPropertiesStatus()")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Id
	if batchAccountStatus.Id != nil {
		id := *batchAccountStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Identity
	if batchAccountStatus.Identity != nil {
		var identity v1alpha1api20210101storage.BatchAccountIdentity_Status
		err := (*batchAccountStatus.Identity).AssignPropertiesToBatchAccountIdentityStatus(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToBatchAccountIdentityStatus()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyVaultReference
	if batchAccountStatus.KeyVaultReference != nil {
		var keyVaultReference v1alpha1api20210101storage.KeyVaultReference_Status
		err := (*batchAccountStatus.KeyVaultReference).AssignPropertiesToKeyVaultReferenceStatus(&keyVaultReference)
		if err != nil {
			return errors.Wrap(err, "populating KeyVaultReference from KeyVaultReference, calling AssignPropertiesToKeyVaultReferenceStatus()")
		}
		destination.KeyVaultReference = &keyVaultReference
	} else {
		destination.KeyVaultReference = nil
	}

	// Location
	if batchAccountStatus.Location != nil {
		location := *batchAccountStatus.Location
		destination.Location = &location
	} else {
		destination.Location = nil
	}

	// LowPriorityCoreQuota
	if batchAccountStatus.LowPriorityCoreQuota != nil {
		lowPriorityCoreQuotum := *batchAccountStatus.LowPriorityCoreQuota
		destination.LowPriorityCoreQuota = &lowPriorityCoreQuotum
	} else {
		destination.LowPriorityCoreQuota = nil
	}

	// Name
	if batchAccountStatus.Name != nil {
		name := *batchAccountStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// PoolAllocationMode
	if batchAccountStatus.PoolAllocationMode != nil {
		poolAllocationMode := string(*batchAccountStatus.PoolAllocationMode)
		destination.PoolAllocationMode = &poolAllocationMode
	} else {
		destination.PoolAllocationMode = nil
	}

	// PoolQuota
	if batchAccountStatus.PoolQuota != nil {
		poolQuotum := *batchAccountStatus.PoolQuota
		destination.PoolQuota = &poolQuotum
	} else {
		destination.PoolQuota = nil
	}

	// PrivateEndpointConnections
	privateEndpointConnectionList := make([]v1alpha1api20210101storage.PrivateEndpointConnection_Status, len(batchAccountStatus.PrivateEndpointConnections))
	for privateEndpointConnectionIndex, privateEndpointConnectionItem := range batchAccountStatus.PrivateEndpointConnections {
		// Shadow the loop variable to avoid aliasing
		privateEndpointConnectionItem := privateEndpointConnectionItem
		var privateEndpointConnection v1alpha1api20210101storage.PrivateEndpointConnection_Status
		err := privateEndpointConnectionItem.AssignPropertiesToPrivateEndpointConnectionStatus(&privateEndpointConnection)
		if err != nil {
			return errors.Wrap(err, "populating PrivateEndpointConnections from PrivateEndpointConnections, calling AssignPropertiesToPrivateEndpointConnectionStatus()")
		}
		privateEndpointConnectionList[privateEndpointConnectionIndex] = privateEndpointConnection
	}
	destination.PrivateEndpointConnections = privateEndpointConnectionList

	// ProvisioningState
	if batchAccountStatus.ProvisioningState != nil {
		provisioningState := string(*batchAccountStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// PublicNetworkAccess
	if batchAccountStatus.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*batchAccountStatus.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range batchAccountStatus.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Type
	if batchAccountStatus.Type != nil {
		typeVar := *batchAccountStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type BatchAccounts_Spec struct {
	//AutoStorage: The properties related to the auto-storage account.
	AutoStorage *AutoStorageBaseProperties `json:"autoStorage,omitempty"`

	// +kubebuilder:validation:MaxLength=24
	// +kubebuilder:validation:MinLength=3
	// +kubebuilder:validation:Pattern="^[a-zA-Z0-9]+$"
	//AzureName: The name of the resource in Azure. This is often the same as the name
	//of the resource in Kubernetes but it doesn't have to be.
	AzureName string `json:"azureName"`

	//Encryption: Configures how customer data is encrypted inside the Batch account.
	//By default, accounts are encrypted using a Microsoft managed key. For additional
	//control, a customer-managed key can be used instead.
	Encryption *EncryptionProperties `json:"encryption,omitempty"`

	//Identity: The identity of the Batch account, if configured. This is only used
	//when the user specifies 'Microsoft.KeyVault' as their Batch account encryption
	//configuration.
	Identity *BatchAccountIdentity `json:"identity,omitempty"`

	//KeyVaultReference: Identifies the Azure key vault associated with a Batch
	//account.
	KeyVaultReference *KeyVaultReference `json:"keyVaultReference,omitempty"`

	//Location: The region in which to create the account.
	Location string `json:"location,omitempty"`

	// +kubebuilder:validation:Required
	Owner genruntime.KnownResourceReference `group:"microsoft.resources.azure.com" json:"owner" kind:"ResourceGroup"`

	//PoolAllocationMode: The pool allocation mode also affects how clients may
	//authenticate to the Batch Service API. If the mode is BatchService, clients may
	//authenticate using access keys or Azure Active Directory. If the mode is
	//UserSubscription, clients must use Azure Active Directory. The default is
	//BatchService.
	PoolAllocationMode *BatchAccountCreatePropertiesPoolAllocationMode `json:"poolAllocationMode,omitempty"`

	//PublicNetworkAccess: If not specified, the default value is 'enabled'.
	PublicNetworkAccess *BatchAccountCreatePropertiesPublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	//Tags: The user-specified tags associated with the account.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &BatchAccounts_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (batchAccountsSpec *BatchAccounts_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if batchAccountsSpec == nil {
		return nil, nil
	}
	var result BatchAccounts_SpecARM

	// Set property ‘APIVersion’:
	result.APIVersion = BatchAccountsSpecAPIVersion20210101

	// Set property ‘Identity’:
	if batchAccountsSpec.Identity != nil {
		identityARM, err := (*batchAccountsSpec.Identity).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		identity := identityARM.(BatchAccountIdentityARM)
		result.Identity = &identity
	}

	// Set property ‘Location’:
	result.Location = batchAccountsSpec.Location

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if batchAccountsSpec.AutoStorage != nil {
		autoStorageARM, err := (*batchAccountsSpec.AutoStorage).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		autoStorage := autoStorageARM.(AutoStorageBasePropertiesARM)
		result.Properties.AutoStorage = &autoStorage
	}
	if batchAccountsSpec.Encryption != nil {
		encryptionARM, err := (*batchAccountsSpec.Encryption).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		encryption := encryptionARM.(EncryptionPropertiesARM)
		result.Properties.Encryption = &encryption
	}
	if batchAccountsSpec.KeyVaultReference != nil {
		keyVaultReferenceARM, err := (*batchAccountsSpec.KeyVaultReference).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultReference := keyVaultReferenceARM.(KeyVaultReferenceARM)
		result.Properties.KeyVaultReference = &keyVaultReference
	}
	if batchAccountsSpec.PoolAllocationMode != nil {
		poolAllocationMode := *batchAccountsSpec.PoolAllocationMode
		result.Properties.PoolAllocationMode = &poolAllocationMode
	}
	if batchAccountsSpec.PublicNetworkAccess != nil {
		publicNetworkAccess := *batchAccountsSpec.PublicNetworkAccess
		result.Properties.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Tags’:
	if batchAccountsSpec.Tags != nil {
		result.Tags = make(map[string]string)
		for key, value := range batchAccountsSpec.Tags {
			result.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	result.Type = BatchAccountsSpecTypeMicrosoftBatchBatchAccounts
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (batchAccountsSpec *BatchAccounts_Spec) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccounts_SpecARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (batchAccountsSpec *BatchAccounts_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccounts_SpecARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccounts_SpecARM, got %T", armInput)
	}

	// Set property ‘AutoStorage’:
	// copying flattened property:
	if typedInput.Properties.AutoStorage != nil {
		var autoStorage1 AutoStorageBaseProperties
		err := autoStorage1.PopulateFromARM(owner, *typedInput.Properties.AutoStorage)
		if err != nil {
			return err
		}
		autoStorage := autoStorage1
		batchAccountsSpec.AutoStorage = &autoStorage
	}

	// Set property ‘AzureName’:
	batchAccountsSpec.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Encryption’:
	// copying flattened property:
	if typedInput.Properties.Encryption != nil {
		var encryption1 EncryptionProperties
		err := encryption1.PopulateFromARM(owner, *typedInput.Properties.Encryption)
		if err != nil {
			return err
		}
		encryption := encryption1
		batchAccountsSpec.Encryption = &encryption
	}

	// Set property ‘Identity’:
	if typedInput.Identity != nil {
		var identity1 BatchAccountIdentity
		err := identity1.PopulateFromARM(owner, *typedInput.Identity)
		if err != nil {
			return err
		}
		identity := identity1
		batchAccountsSpec.Identity = &identity
	}

	// Set property ‘KeyVaultReference’:
	// copying flattened property:
	if typedInput.Properties.KeyVaultReference != nil {
		var keyVaultReference1 KeyVaultReference
		err := keyVaultReference1.PopulateFromARM(owner, *typedInput.Properties.KeyVaultReference)
		if err != nil {
			return err
		}
		keyVaultReference := keyVaultReference1
		batchAccountsSpec.KeyVaultReference = &keyVaultReference
	}

	// Set property ‘Location’:
	batchAccountsSpec.Location = typedInput.Location

	// Set property ‘Owner’:
	batchAccountsSpec.Owner = genruntime.KnownResourceReference{
		Name: owner.Name,
	}

	// Set property ‘PoolAllocationMode’:
	// copying flattened property:
	if typedInput.Properties.PoolAllocationMode != nil {
		poolAllocationMode := *typedInput.Properties.PoolAllocationMode
		batchAccountsSpec.PoolAllocationMode = &poolAllocationMode
	}

	// Set property ‘PublicNetworkAccess’:
	// copying flattened property:
	if typedInput.Properties.PublicNetworkAccess != nil {
		publicNetworkAccess := *typedInput.Properties.PublicNetworkAccess
		batchAccountsSpec.PublicNetworkAccess = &publicNetworkAccess
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		batchAccountsSpec.Tags = make(map[string]string)
		for key, value := range typedInput.Tags {
			batchAccountsSpec.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &BatchAccounts_Spec{}

// ConvertSpecFrom populates our BatchAccounts_Spec from the provided source
func (batchAccountsSpec *BatchAccounts_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v1alpha1api20210101storage.BatchAccounts_Spec)
	if ok {
		// Populate our instance from source
		return batchAccountsSpec.AssignPropertiesFromBatchAccountsSpec(src)
	}

	// Convert to an intermediate form
	src = &v1alpha1api20210101storage.BatchAccounts_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = batchAccountsSpec.AssignPropertiesFromBatchAccountsSpec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our BatchAccounts_Spec
func (batchAccountsSpec *BatchAccounts_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v1alpha1api20210101storage.BatchAccounts_Spec)
	if ok {
		// Populate destination from our instance
		return batchAccountsSpec.AssignPropertiesToBatchAccountsSpec(dst)
	}

	// Convert to an intermediate form
	dst = &v1alpha1api20210101storage.BatchAccounts_Spec{}
	err := batchAccountsSpec.AssignPropertiesToBatchAccountsSpec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignPropertiesFromBatchAccountsSpec populates our BatchAccounts_Spec from the provided source BatchAccounts_Spec
func (batchAccountsSpec *BatchAccounts_Spec) AssignPropertiesFromBatchAccountsSpec(source *v1alpha1api20210101storage.BatchAccounts_Spec) error {

	// AutoStorage
	if source.AutoStorage != nil {
		var autoStorage AutoStorageBaseProperties
		err := autoStorage.AssignPropertiesFromAutoStorageBaseProperties(source.AutoStorage)
		if err != nil {
			return errors.Wrap(err, "populating AutoStorage from AutoStorage, calling AssignPropertiesFromAutoStorageBaseProperties()")
		}
		batchAccountsSpec.AutoStorage = &autoStorage
	} else {
		batchAccountsSpec.AutoStorage = nil
	}

	// AzureName
	batchAccountsSpec.AzureName = source.AzureName

	// Encryption
	if source.Encryption != nil {
		var encryption EncryptionProperties
		err := encryption.AssignPropertiesFromEncryptionProperties(source.Encryption)
		if err != nil {
			return errors.Wrap(err, "populating Encryption from Encryption, calling AssignPropertiesFromEncryptionProperties()")
		}
		batchAccountsSpec.Encryption = &encryption
	} else {
		batchAccountsSpec.Encryption = nil
	}

	// Identity
	if source.Identity != nil {
		var identity BatchAccountIdentity
		err := identity.AssignPropertiesFromBatchAccountIdentity(source.Identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesFromBatchAccountIdentity()")
		}
		batchAccountsSpec.Identity = &identity
	} else {
		batchAccountsSpec.Identity = nil
	}

	// KeyVaultReference
	if source.KeyVaultReference != nil {
		var keyVaultReference KeyVaultReference
		err := keyVaultReference.AssignPropertiesFromKeyVaultReference(source.KeyVaultReference)
		if err != nil {
			return errors.Wrap(err, "populating KeyVaultReference from KeyVaultReference, calling AssignPropertiesFromKeyVaultReference()")
		}
		batchAccountsSpec.KeyVaultReference = &keyVaultReference
	} else {
		batchAccountsSpec.KeyVaultReference = nil
	}

	// Location
	if source.Location != nil {
		batchAccountsSpec.Location = *source.Location
	} else {
		batchAccountsSpec.Location = ""
	}

	// Owner
	batchAccountsSpec.Owner = source.Owner.Copy()

	// PoolAllocationMode
	if source.PoolAllocationMode != nil {
		poolAllocationMode := BatchAccountCreatePropertiesPoolAllocationMode(*source.PoolAllocationMode)
		batchAccountsSpec.PoolAllocationMode = &poolAllocationMode
	} else {
		batchAccountsSpec.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if source.PublicNetworkAccess != nil {
		publicNetworkAccess := BatchAccountCreatePropertiesPublicNetworkAccess(*source.PublicNetworkAccess)
		batchAccountsSpec.PublicNetworkAccess = &publicNetworkAccess
	} else {
		batchAccountsSpec.PublicNetworkAccess = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range source.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	batchAccountsSpec.Tags = tagMap

	// No error
	return nil
}

// AssignPropertiesToBatchAccountsSpec populates the provided destination BatchAccounts_Spec from our BatchAccounts_Spec
func (batchAccountsSpec *BatchAccounts_Spec) AssignPropertiesToBatchAccountsSpec(destination *v1alpha1api20210101storage.BatchAccounts_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoStorage
	if batchAccountsSpec.AutoStorage != nil {
		var autoStorage v1alpha1api20210101storage.AutoStorageBaseProperties
		err := (*batchAccountsSpec.AutoStorage).AssignPropertiesToAutoStorageBaseProperties(&autoStorage)
		if err != nil {
			return errors.Wrap(err, "populating AutoStorage from AutoStorage, calling AssignPropertiesToAutoStorageBaseProperties()")
		}
		destination.AutoStorage = &autoStorage
	} else {
		destination.AutoStorage = nil
	}

	// AzureName
	destination.AzureName = batchAccountsSpec.AzureName

	// Encryption
	if batchAccountsSpec.Encryption != nil {
		var encryption v1alpha1api20210101storage.EncryptionProperties
		err := (*batchAccountsSpec.Encryption).AssignPropertiesToEncryptionProperties(&encryption)
		if err != nil {
			return errors.Wrap(err, "populating Encryption from Encryption, calling AssignPropertiesToEncryptionProperties()")
		}
		destination.Encryption = &encryption
	} else {
		destination.Encryption = nil
	}

	// Identity
	if batchAccountsSpec.Identity != nil {
		var identity v1alpha1api20210101storage.BatchAccountIdentity
		err := (*batchAccountsSpec.Identity).AssignPropertiesToBatchAccountIdentity(&identity)
		if err != nil {
			return errors.Wrap(err, "populating Identity from Identity, calling AssignPropertiesToBatchAccountIdentity()")
		}
		destination.Identity = &identity
	} else {
		destination.Identity = nil
	}

	// KeyVaultReference
	if batchAccountsSpec.KeyVaultReference != nil {
		var keyVaultReference v1alpha1api20210101storage.KeyVaultReference
		err := (*batchAccountsSpec.KeyVaultReference).AssignPropertiesToKeyVaultReference(&keyVaultReference)
		if err != nil {
			return errors.Wrap(err, "populating KeyVaultReference from KeyVaultReference, calling AssignPropertiesToKeyVaultReference()")
		}
		destination.KeyVaultReference = &keyVaultReference
	} else {
		destination.KeyVaultReference = nil
	}

	// Location
	location := batchAccountsSpec.Location
	destination.Location = &location

	// OriginalVersion
	destination.OriginalVersion = batchAccountsSpec.OriginalVersion()

	// Owner
	destination.Owner = batchAccountsSpec.Owner.Copy()

	// PoolAllocationMode
	if batchAccountsSpec.PoolAllocationMode != nil {
		poolAllocationMode := string(*batchAccountsSpec.PoolAllocationMode)
		destination.PoolAllocationMode = &poolAllocationMode
	} else {
		destination.PoolAllocationMode = nil
	}

	// PublicNetworkAccess
	if batchAccountsSpec.PublicNetworkAccess != nil {
		publicNetworkAccess := string(*batchAccountsSpec.PublicNetworkAccess)
		destination.PublicNetworkAccess = &publicNetworkAccess
	} else {
		destination.PublicNetworkAccess = nil
	}

	// Tags
	tagMap := make(map[string]string)
	for tagKey, tagValue := range batchAccountsSpec.Tags {
		// Shadow the loop variable to avoid aliasing
		tagValue := tagValue
		tagMap[tagKey] = tagValue
	}
	destination.Tags = tagMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

func (batchAccountsSpec *BatchAccounts_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (batchAccountsSpec *BatchAccounts_Spec) SetAzureName(azureName string) {
	batchAccountsSpec.AzureName = azureName
}

//Generated from: https://schema.management.azure.com/schemas/2021-01-01/Microsoft.Batch.json#/definitions/AutoStorageBaseProperties
type AutoStorageBaseProperties struct {
	// +kubebuilder:validation:Required
	//StorageAccountReference: The resource ID of the storage account to be used for
	//auto-storage account.
	StorageAccountReference genruntime.ResourceReference `armReference:"StorageAccountId" json:"storageAccountReference"`
}

var _ genruntime.ARMTransformer = &AutoStorageBaseProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (autoStorageBaseProperties *AutoStorageBaseProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if autoStorageBaseProperties == nil {
		return nil, nil
	}
	var result AutoStorageBasePropertiesARM

	// Set property ‘StorageAccountId’:
	storageAccountReferenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(autoStorageBaseProperties.StorageAccountReference)
	if err != nil {
		return nil, err
	}
	result.StorageAccountId = storageAccountReferenceARMID
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (autoStorageBaseProperties *AutoStorageBaseProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoStorageBasePropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (autoStorageBaseProperties *AutoStorageBaseProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	_, ok := armInput.(AutoStorageBasePropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoStorageBasePropertiesARM, got %T", armInput)
	}

	// no assignment for property ‘StorageAccountReference’

	// No error
	return nil
}

// AssignPropertiesFromAutoStorageBaseProperties populates our AutoStorageBaseProperties from the provided source AutoStorageBaseProperties
func (autoStorageBaseProperties *AutoStorageBaseProperties) AssignPropertiesFromAutoStorageBaseProperties(source *v1alpha1api20210101storage.AutoStorageBaseProperties) error {

	// StorageAccountReference
	autoStorageBaseProperties.StorageAccountReference = source.StorageAccountReference.Copy()

	// No error
	return nil
}

// AssignPropertiesToAutoStorageBaseProperties populates the provided destination AutoStorageBaseProperties from our AutoStorageBaseProperties
func (autoStorageBaseProperties *AutoStorageBaseProperties) AssignPropertiesToAutoStorageBaseProperties(destination *v1alpha1api20210101storage.AutoStorageBaseProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// StorageAccountReference
	destination.StorageAccountReference = autoStorageBaseProperties.StorageAccountReference.Copy()

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type AutoStorageProperties_Status struct {
	// +kubebuilder:validation:Required
	//LastKeySync: The UTC time at which storage keys were last synchronized with the
	//Batch account.
	LastKeySync string `json:"lastKeySync"`

	// +kubebuilder:validation:Required
	//StorageAccountId: The resource ID of the storage account to be used for
	//auto-storage account.
	StorageAccountId string `json:"storageAccountId"`
}

var _ genruntime.FromARMConverter = &AutoStorageProperties_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (autoStoragePropertiesStatus *AutoStorageProperties_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &AutoStorageProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (autoStoragePropertiesStatus *AutoStorageProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(AutoStorageProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected AutoStorageProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘LastKeySync’:
	autoStoragePropertiesStatus.LastKeySync = typedInput.LastKeySync

	// Set property ‘StorageAccountId’:
	autoStoragePropertiesStatus.StorageAccountId = typedInput.StorageAccountId

	// No error
	return nil
}

// AssignPropertiesFromAutoStoragePropertiesStatus populates our AutoStorageProperties_Status from the provided source AutoStorageProperties_Status
func (autoStoragePropertiesStatus *AutoStorageProperties_Status) AssignPropertiesFromAutoStoragePropertiesStatus(source *v1alpha1api20210101storage.AutoStorageProperties_Status) error {

	// LastKeySync
	if source.LastKeySync != nil {
		autoStoragePropertiesStatus.LastKeySync = *source.LastKeySync
	} else {
		autoStoragePropertiesStatus.LastKeySync = ""
	}

	// StorageAccountId
	if source.StorageAccountId != nil {
		autoStoragePropertiesStatus.StorageAccountId = *source.StorageAccountId
	} else {
		autoStoragePropertiesStatus.StorageAccountId = ""
	}

	// No error
	return nil
}

// AssignPropertiesToAutoStoragePropertiesStatus populates the provided destination AutoStorageProperties_Status from our AutoStorageProperties_Status
func (autoStoragePropertiesStatus *AutoStorageProperties_Status) AssignPropertiesToAutoStoragePropertiesStatus(destination *v1alpha1api20210101storage.AutoStorageProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// LastKeySync
	lastKeySync := autoStoragePropertiesStatus.LastKeySync
	destination.LastKeySync = &lastKeySync

	// StorageAccountId
	storageAccountId := autoStoragePropertiesStatus.StorageAccountId
	destination.StorageAccountId = &storageAccountId

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"BatchService","UserSubscription"}
type BatchAccountCreatePropertiesPoolAllocationMode string

const (
	BatchAccountCreatePropertiesPoolAllocationModeBatchService     = BatchAccountCreatePropertiesPoolAllocationMode("BatchService")
	BatchAccountCreatePropertiesPoolAllocationModeUserSubscription = BatchAccountCreatePropertiesPoolAllocationMode("UserSubscription")
)

// +kubebuilder:validation:Enum={"Disabled","Enabled"}
type BatchAccountCreatePropertiesPublicNetworkAccess string

const (
	BatchAccountCreatePropertiesPublicNetworkAccessDisabled = BatchAccountCreatePropertiesPublicNetworkAccess("Disabled")
	BatchAccountCreatePropertiesPublicNetworkAccessEnabled  = BatchAccountCreatePropertiesPublicNetworkAccess("Enabled")
)

//Generated from: https://schema.management.azure.com/schemas/2021-01-01/Microsoft.Batch.json#/definitions/BatchAccountIdentity
type BatchAccountIdentity struct {
	// +kubebuilder:validation:Required
	//Type: The type of identity used for the Batch account.
	Type BatchAccountIdentityType `json:"type"`
}

var _ genruntime.ARMTransformer = &BatchAccountIdentity{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (batchAccountIdentity *BatchAccountIdentity) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if batchAccountIdentity == nil {
		return nil, nil
	}
	var result BatchAccountIdentityARM

	// Set property ‘Type’:
	result.Type = batchAccountIdentity.Type
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (batchAccountIdentity *BatchAccountIdentity) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentityARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (batchAccountIdentity *BatchAccountIdentity) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentityARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentityARM, got %T", armInput)
	}

	// Set property ‘Type’:
	batchAccountIdentity.Type = typedInput.Type

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentity populates our BatchAccountIdentity from the provided source BatchAccountIdentity
func (batchAccountIdentity *BatchAccountIdentity) AssignPropertiesFromBatchAccountIdentity(source *v1alpha1api20210101storage.BatchAccountIdentity) error {

	// Type
	if source.Type != nil {
		batchAccountIdentity.Type = BatchAccountIdentityType(*source.Type)
	} else {
		batchAccountIdentity.Type = ""
	}

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentity populates the provided destination BatchAccountIdentity from our BatchAccountIdentity
func (batchAccountIdentity *BatchAccountIdentity) AssignPropertiesToBatchAccountIdentity(destination *v1alpha1api20210101storage.BatchAccountIdentity) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Type
	typeVar := string(batchAccountIdentity.Type)
	destination.Type = &typeVar

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type BatchAccountIdentity_Status struct {
	//PrincipalId: The principal id of the Batch account. This property will only be
	//provided for a system assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`

	//TenantId: The tenant id associated with the Batch account. This property will
	//only be provided for a system assigned identity.
	TenantId *string `json:"tenantId,omitempty"`

	// +kubebuilder:validation:Required
	//Type: The type of identity used for the Batch account.
	Type BatchAccountIdentityStatusType `json:"type"`

	//UserAssignedIdentities: The list of user identities associated with the Batch
	//account. The user identity dictionary key references will be ARM resource ids in
	//the form:
	//'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]BatchAccountIdentity_Status_UserAssignedIdentities `json:"userAssignedIdentities,omitempty"`
}

var _ genruntime.FromARMConverter = &BatchAccountIdentity_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (batchAccountIdentityStatus *BatchAccountIdentity_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentity_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (batchAccountIdentityStatus *BatchAccountIdentity_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentity_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentity_StatusARM, got %T", armInput)
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		batchAccountIdentityStatus.PrincipalId = &principalId
	}

	// Set property ‘TenantId’:
	if typedInput.TenantId != nil {
		tenantId := *typedInput.TenantId
		batchAccountIdentityStatus.TenantId = &tenantId
	}

	// Set property ‘Type’:
	batchAccountIdentityStatus.Type = typedInput.Type

	// Set property ‘UserAssignedIdentities’:
	if typedInput.UserAssignedIdentities != nil {
		batchAccountIdentityStatus.UserAssignedIdentities = make(map[string]BatchAccountIdentity_Status_UserAssignedIdentities)
		for key, value := range typedInput.UserAssignedIdentities {
			var value1 BatchAccountIdentity_Status_UserAssignedIdentities
			err := value1.PopulateFromARM(owner, value)
			if err != nil {
				return err
			}
			batchAccountIdentityStatus.UserAssignedIdentities[key] = value1
		}
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentityStatus populates our BatchAccountIdentity_Status from the provided source BatchAccountIdentity_Status
func (batchAccountIdentityStatus *BatchAccountIdentity_Status) AssignPropertiesFromBatchAccountIdentityStatus(source *v1alpha1api20210101storage.BatchAccountIdentity_Status) error {

	// PrincipalId
	if source.PrincipalId != nil {
		principalId := *source.PrincipalId
		batchAccountIdentityStatus.PrincipalId = &principalId
	} else {
		batchAccountIdentityStatus.PrincipalId = nil
	}

	// TenantId
	if source.TenantId != nil {
		tenantId := *source.TenantId
		batchAccountIdentityStatus.TenantId = &tenantId
	} else {
		batchAccountIdentityStatus.TenantId = nil
	}

	// Type
	if source.Type != nil {
		batchAccountIdentityStatus.Type = BatchAccountIdentityStatusType(*source.Type)
	} else {
		batchAccountIdentityStatus.Type = ""
	}

	// UserAssignedIdentities
	userAssignedIdentityMap := make(map[string]BatchAccountIdentity_Status_UserAssignedIdentities)
	for userAssignedIdentityKey, userAssignedIdentityValue := range source.UserAssignedIdentities {
		// Shadow the loop variable to avoid aliasing
		userAssignedIdentityValue := userAssignedIdentityValue
		var userAssignedIdentity BatchAccountIdentity_Status_UserAssignedIdentities
		err := userAssignedIdentity.AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities(&userAssignedIdentityValue)
		if err != nil {
			return errors.Wrap(err, "populating UserAssignedIdentities from UserAssignedIdentities, calling AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities()")
		}
		userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
	}
	batchAccountIdentityStatus.UserAssignedIdentities = userAssignedIdentityMap

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentityStatus populates the provided destination BatchAccountIdentity_Status from our BatchAccountIdentity_Status
func (batchAccountIdentityStatus *BatchAccountIdentity_Status) AssignPropertiesToBatchAccountIdentityStatus(destination *v1alpha1api20210101storage.BatchAccountIdentity_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// PrincipalId
	if batchAccountIdentityStatus.PrincipalId != nil {
		principalId := *batchAccountIdentityStatus.PrincipalId
		destination.PrincipalId = &principalId
	} else {
		destination.PrincipalId = nil
	}

	// TenantId
	if batchAccountIdentityStatus.TenantId != nil {
		tenantId := *batchAccountIdentityStatus.TenantId
		destination.TenantId = &tenantId
	} else {
		destination.TenantId = nil
	}

	// Type
	typeVar := string(batchAccountIdentityStatus.Type)
	destination.Type = &typeVar

	// UserAssignedIdentities
	userAssignedIdentityMap := make(map[string]v1alpha1api20210101storage.BatchAccountIdentity_Status_UserAssignedIdentities)
	for userAssignedIdentityKey, userAssignedIdentityValue := range batchAccountIdentityStatus.UserAssignedIdentities {
		// Shadow the loop variable to avoid aliasing
		userAssignedIdentityValue := userAssignedIdentityValue
		var userAssignedIdentity v1alpha1api20210101storage.BatchAccountIdentity_Status_UserAssignedIdentities
		err := userAssignedIdentityValue.AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities(&userAssignedIdentity)
		if err != nil {
			return errors.Wrap(err, "populating UserAssignedIdentities from UserAssignedIdentities, calling AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities()")
		}
		userAssignedIdentityMap[userAssignedIdentityKey] = userAssignedIdentity
	}
	destination.UserAssignedIdentities = userAssignedIdentityMap

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type BatchAccountPropertiesStatusProvisioningState string

const (
	BatchAccountPropertiesStatusProvisioningStateCancelled = BatchAccountPropertiesStatusProvisioningState("Cancelled")
	BatchAccountPropertiesStatusProvisioningStateCreating  = BatchAccountPropertiesStatusProvisioningState("Creating")
	BatchAccountPropertiesStatusProvisioningStateDeleting  = BatchAccountPropertiesStatusProvisioningState("Deleting")
	BatchAccountPropertiesStatusProvisioningStateFailed    = BatchAccountPropertiesStatusProvisioningState("Failed")
	BatchAccountPropertiesStatusProvisioningStateInvalid   = BatchAccountPropertiesStatusProvisioningState("Invalid")
	BatchAccountPropertiesStatusProvisioningStateSucceeded = BatchAccountPropertiesStatusProvisioningState("Succeeded")
)

//Generated from: https://schema.management.azure.com/schemas/2021-01-01/Microsoft.Batch.json#/definitions/EncryptionProperties
type EncryptionProperties struct {
	//KeySource: Type of the key source.
	KeySource *EncryptionPropertiesKeySource `json:"keySource,omitempty"`

	//KeyVaultProperties: KeyVault configuration when using an encryption KeySource of
	//Microsoft.KeyVault.
	KeyVaultProperties *KeyVaultProperties `json:"keyVaultProperties,omitempty"`
}

var _ genruntime.ARMTransformer = &EncryptionProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (encryptionProperties *EncryptionProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if encryptionProperties == nil {
		return nil, nil
	}
	var result EncryptionPropertiesARM

	// Set property ‘KeySource’:
	if encryptionProperties.KeySource != nil {
		keySource := *encryptionProperties.KeySource
		result.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if encryptionProperties.KeyVaultProperties != nil {
		keyVaultPropertiesARM, err := (*encryptionProperties.KeyVaultProperties).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		keyVaultProperties := keyVaultPropertiesARM.(KeyVaultPropertiesARM)
		result.KeyVaultProperties = &keyVaultProperties
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryptionProperties *EncryptionProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryptionProperties *EncryptionProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionPropertiesARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryptionProperties.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		encryptionProperties.KeyVaultProperties = &keyVaultProperties
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionProperties populates our EncryptionProperties from the provided source EncryptionProperties
func (encryptionProperties *EncryptionProperties) AssignPropertiesFromEncryptionProperties(source *v1alpha1api20210101storage.EncryptionProperties) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionPropertiesKeySource(*source.KeySource)
		encryptionProperties.KeySource = &keySource
	} else {
		encryptionProperties.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties
		err := keyVaultProperty.AssignPropertiesFromKeyVaultProperties(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "populating KeyVaultProperties from KeyVaultProperties, calling AssignPropertiesFromKeyVaultProperties()")
		}
		encryptionProperties.KeyVaultProperties = &keyVaultProperty
	} else {
		encryptionProperties.KeyVaultProperties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionProperties populates the provided destination EncryptionProperties from our EncryptionProperties
func (encryptionProperties *EncryptionProperties) AssignPropertiesToEncryptionProperties(destination *v1alpha1api20210101storage.EncryptionProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if encryptionProperties.KeySource != nil {
		keySource := string(*encryptionProperties.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if encryptionProperties.KeyVaultProperties != nil {
		var keyVaultProperty v1alpha1api20210101storage.KeyVaultProperties
		err := (*encryptionProperties.KeyVaultProperties).AssignPropertiesToKeyVaultProperties(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "populating KeyVaultProperties from KeyVaultProperties, calling AssignPropertiesToKeyVaultProperties()")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type EncryptionProperties_Status struct {
	//KeySource: Type of the key source.
	KeySource *EncryptionPropertiesStatusKeySource `json:"keySource,omitempty"`

	//KeyVaultProperties: Additional details when using Microsoft.KeyVault
	KeyVaultProperties *KeyVaultProperties_Status `json:"keyVaultProperties,omitempty"`
}

var _ genruntime.FromARMConverter = &EncryptionProperties_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (encryptionPropertiesStatus *EncryptionProperties_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &EncryptionProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (encryptionPropertiesStatus *EncryptionProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(EncryptionProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected EncryptionProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘KeySource’:
	if typedInput.KeySource != nil {
		keySource := *typedInput.KeySource
		encryptionPropertiesStatus.KeySource = &keySource
	}

	// Set property ‘KeyVaultProperties’:
	if typedInput.KeyVaultProperties != nil {
		var keyVaultProperties1 KeyVaultProperties_Status
		err := keyVaultProperties1.PopulateFromARM(owner, *typedInput.KeyVaultProperties)
		if err != nil {
			return err
		}
		keyVaultProperties := keyVaultProperties1
		encryptionPropertiesStatus.KeyVaultProperties = &keyVaultProperties
	}

	// No error
	return nil
}

// AssignPropertiesFromEncryptionPropertiesStatus populates our EncryptionProperties_Status from the provided source EncryptionProperties_Status
func (encryptionPropertiesStatus *EncryptionProperties_Status) AssignPropertiesFromEncryptionPropertiesStatus(source *v1alpha1api20210101storage.EncryptionProperties_Status) error {

	// KeySource
	if source.KeySource != nil {
		keySource := EncryptionPropertiesStatusKeySource(*source.KeySource)
		encryptionPropertiesStatus.KeySource = &keySource
	} else {
		encryptionPropertiesStatus.KeySource = nil
	}

	// KeyVaultProperties
	if source.KeyVaultProperties != nil {
		var keyVaultProperty KeyVaultProperties_Status
		err := keyVaultProperty.AssignPropertiesFromKeyVaultPropertiesStatus(source.KeyVaultProperties)
		if err != nil {
			return errors.Wrap(err, "populating KeyVaultProperties from KeyVaultProperties, calling AssignPropertiesFromKeyVaultPropertiesStatus()")
		}
		encryptionPropertiesStatus.KeyVaultProperties = &keyVaultProperty
	} else {
		encryptionPropertiesStatus.KeyVaultProperties = nil
	}

	// No error
	return nil
}

// AssignPropertiesToEncryptionPropertiesStatus populates the provided destination EncryptionProperties_Status from our EncryptionProperties_Status
func (encryptionPropertiesStatus *EncryptionProperties_Status) AssignPropertiesToEncryptionPropertiesStatus(destination *v1alpha1api20210101storage.EncryptionProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeySource
	if encryptionPropertiesStatus.KeySource != nil {
		keySource := string(*encryptionPropertiesStatus.KeySource)
		destination.KeySource = &keySource
	} else {
		destination.KeySource = nil
	}

	// KeyVaultProperties
	if encryptionPropertiesStatus.KeyVaultProperties != nil {
		var keyVaultProperty v1alpha1api20210101storage.KeyVaultProperties_Status
		err := (*encryptionPropertiesStatus.KeyVaultProperties).AssignPropertiesToKeyVaultPropertiesStatus(&keyVaultProperty)
		if err != nil {
			return errors.Wrap(err, "populating KeyVaultProperties from KeyVaultProperties, calling AssignPropertiesToKeyVaultPropertiesStatus()")
		}
		destination.KeyVaultProperties = &keyVaultProperty
	} else {
		destination.KeyVaultProperties = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from: https://schema.management.azure.com/schemas/2021-01-01/Microsoft.Batch.json#/definitions/KeyVaultReference
type KeyVaultReference struct {
	// +kubebuilder:validation:Required
	//Reference: The resource ID of the Azure key vault associated with the Batch
	//account.
	Reference genruntime.ResourceReference `armReference:"Id" json:"reference"`

	// +kubebuilder:validation:Required
	//Url: The URL of the Azure key vault associated with the Batch account.
	Url string `json:"url"`
}

var _ genruntime.ARMTransformer = &KeyVaultReference{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (keyVaultReference *KeyVaultReference) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if keyVaultReference == nil {
		return nil, nil
	}
	var result KeyVaultReferenceARM

	// Set property ‘Id’:
	referenceARMID, err := resolved.ResolvedReferences.ARMIDOrErr(keyVaultReference.Reference)
	if err != nil {
		return nil, err
	}
	result.Id = referenceARMID

	// Set property ‘Url’:
	result.Url = keyVaultReference.Url
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keyVaultReference *KeyVaultReference) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultReferenceARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keyVaultReference *KeyVaultReference) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultReferenceARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultReferenceARM, got %T", armInput)
	}

	// no assignment for property ‘Reference’

	// Set property ‘Url’:
	keyVaultReference.Url = typedInput.Url

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultReference populates our KeyVaultReference from the provided source KeyVaultReference
func (keyVaultReference *KeyVaultReference) AssignPropertiesFromKeyVaultReference(source *v1alpha1api20210101storage.KeyVaultReference) error {

	// Reference
	keyVaultReference.Reference = source.Reference.Copy()

	// Url
	if source.Url != nil {
		keyVaultReference.Url = *source.Url
	} else {
		keyVaultReference.Url = ""
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultReference populates the provided destination KeyVaultReference from our KeyVaultReference
func (keyVaultReference *KeyVaultReference) AssignPropertiesToKeyVaultReference(destination *v1alpha1api20210101storage.KeyVaultReference) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Reference
	destination.Reference = keyVaultReference.Reference.Copy()

	// Url
	url := keyVaultReference.Url
	destination.Url = &url

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type KeyVaultReference_Status struct {
	// +kubebuilder:validation:Required
	//Id: The resource ID of the Azure key vault associated with the Batch account.
	Id string `json:"id"`

	// +kubebuilder:validation:Required
	//Url: The URL of the Azure key vault associated with the Batch account.
	Url string `json:"url"`
}

var _ genruntime.FromARMConverter = &KeyVaultReference_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keyVaultReferenceStatus *KeyVaultReference_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultReference_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keyVaultReferenceStatus *KeyVaultReference_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultReference_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultReference_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	keyVaultReferenceStatus.Id = typedInput.Id

	// Set property ‘Url’:
	keyVaultReferenceStatus.Url = typedInput.Url

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultReferenceStatus populates our KeyVaultReference_Status from the provided source KeyVaultReference_Status
func (keyVaultReferenceStatus *KeyVaultReference_Status) AssignPropertiesFromKeyVaultReferenceStatus(source *v1alpha1api20210101storage.KeyVaultReference_Status) error {

	// Id
	if source.Id != nil {
		keyVaultReferenceStatus.Id = *source.Id
	} else {
		keyVaultReferenceStatus.Id = ""
	}

	// Url
	if source.Url != nil {
		keyVaultReferenceStatus.Url = *source.Url
	} else {
		keyVaultReferenceStatus.Url = ""
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultReferenceStatus populates the provided destination KeyVaultReference_Status from our KeyVaultReference_Status
func (keyVaultReferenceStatus *KeyVaultReference_Status) AssignPropertiesToKeyVaultReferenceStatus(destination *v1alpha1api20210101storage.KeyVaultReference_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	id := keyVaultReferenceStatus.Id
	destination.Id = &id

	// Url
	url := keyVaultReferenceStatus.Url
	destination.Url = &url

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type PoolAllocationMode_Status string

const (
	PoolAllocationMode_StatusBatchService     = PoolAllocationMode_Status("BatchService")
	PoolAllocationMode_StatusUserSubscription = PoolAllocationMode_Status("UserSubscription")
)

//Generated from:
type PrivateEndpointConnection_Status struct {
	//Etag: The ETag of the resource, used for concurrency statements.
	Etag *string `json:"etag,omitempty"`

	//Id: The ID of the resource.
	Id *string `json:"id,omitempty"`

	//Name: The name of the resource.
	Name                              *string                                                     `json:"name,omitempty"`
	PrivateEndpoint                   *PrivateEndpoint_Status                                     `json:"privateEndpoint,omitempty"`
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState_Status                   `json:"privateLinkServiceConnectionState,omitempty"`
	ProvisioningState                 *PrivateEndpointConnectionPropertiesStatusProvisioningState `json:"provisioningState,omitempty"`

	//Type: The type of the resource.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpointConnection_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointConnectionStatus *PrivateEndpointConnection_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpointConnection_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointConnectionStatus *PrivateEndpointConnection_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpointConnection_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpointConnection_StatusARM, got %T", armInput)
	}

	// Set property ‘Etag’:
	if typedInput.Etag != nil {
		etag := *typedInput.Etag
		privateEndpointConnectionStatus.Etag = &etag
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		privateEndpointConnectionStatus.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		privateEndpointConnectionStatus.Name = &name
	}

	// Set property ‘PrivateEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpoint != nil {
			var privateEndpoint1 PrivateEndpoint_Status
			err := privateEndpoint1.PopulateFromARM(owner, *typedInput.Properties.PrivateEndpoint)
			if err != nil {
				return err
			}
			privateEndpoint := privateEndpoint1
			privateEndpointConnectionStatus.PrivateEndpoint = &privateEndpoint
		}
	}

	// Set property ‘PrivateLinkServiceConnectionState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateLinkServiceConnectionState != nil {
			var privateLinkServiceConnectionState1 PrivateLinkServiceConnectionState_Status
			err := privateLinkServiceConnectionState1.PopulateFromARM(owner, *typedInput.Properties.PrivateLinkServiceConnectionState)
			if err != nil {
				return err
			}
			privateLinkServiceConnectionState := privateLinkServiceConnectionState1
			privateEndpointConnectionStatus.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
		}
	}

	// Set property ‘ProvisioningState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ProvisioningState != nil {
			provisioningState := *typedInput.Properties.ProvisioningState
			privateEndpointConnectionStatus.ProvisioningState = &provisioningState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		privateEndpointConnectionStatus.Type = &typeVar
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointConnectionStatus populates our PrivateEndpointConnection_Status from the provided source PrivateEndpointConnection_Status
func (privateEndpointConnectionStatus *PrivateEndpointConnection_Status) AssignPropertiesFromPrivateEndpointConnectionStatus(source *v1alpha1api20210101storage.PrivateEndpointConnection_Status) error {

	// Etag
	if source.Etag != nil {
		etag := *source.Etag
		privateEndpointConnectionStatus.Etag = &etag
	} else {
		privateEndpointConnectionStatus.Etag = nil
	}

	// Id
	if source.Id != nil {
		id := *source.Id
		privateEndpointConnectionStatus.Id = &id
	} else {
		privateEndpointConnectionStatus.Id = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		privateEndpointConnectionStatus.Name = &name
	} else {
		privateEndpointConnectionStatus.Name = nil
	}

	// PrivateEndpoint
	if source.PrivateEndpoint != nil {
		var privateEndpoint PrivateEndpoint_Status
		err := privateEndpoint.AssignPropertiesFromPrivateEndpointStatus(source.PrivateEndpoint)
		if err != nil {
			return errors.Wrap(err, "populating PrivateEndpoint from PrivateEndpoint, calling AssignPropertiesFromPrivateEndpointStatus()")
		}
		privateEndpointConnectionStatus.PrivateEndpoint = &privateEndpoint
	} else {
		privateEndpointConnectionStatus.PrivateEndpoint = nil
	}

	// PrivateLinkServiceConnectionState
	if source.PrivateLinkServiceConnectionState != nil {
		var privateLinkServiceConnectionState PrivateLinkServiceConnectionState_Status
		err := privateLinkServiceConnectionState.AssignPropertiesFromPrivateLinkServiceConnectionStateStatus(source.PrivateLinkServiceConnectionState)
		if err != nil {
			return errors.Wrap(err, "populating PrivateLinkServiceConnectionState from PrivateLinkServiceConnectionState, calling AssignPropertiesFromPrivateLinkServiceConnectionStateStatus()")
		}
		privateEndpointConnectionStatus.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	} else {
		privateEndpointConnectionStatus.PrivateLinkServiceConnectionState = nil
	}

	// ProvisioningState
	if source.ProvisioningState != nil {
		provisioningState := PrivateEndpointConnectionPropertiesStatusProvisioningState(*source.ProvisioningState)
		privateEndpointConnectionStatus.ProvisioningState = &provisioningState
	} else {
		privateEndpointConnectionStatus.ProvisioningState = nil
	}

	// Type
	if source.Type != nil {
		typeVar := *source.Type
		privateEndpointConnectionStatus.Type = &typeVar
	} else {
		privateEndpointConnectionStatus.Type = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointConnectionStatus populates the provided destination PrivateEndpointConnection_Status from our PrivateEndpointConnection_Status
func (privateEndpointConnectionStatus *PrivateEndpointConnection_Status) AssignPropertiesToPrivateEndpointConnectionStatus(destination *v1alpha1api20210101storage.PrivateEndpointConnection_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Etag
	if privateEndpointConnectionStatus.Etag != nil {
		etag := *privateEndpointConnectionStatus.Etag
		destination.Etag = &etag
	} else {
		destination.Etag = nil
	}

	// Id
	if privateEndpointConnectionStatus.Id != nil {
		id := *privateEndpointConnectionStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Name
	if privateEndpointConnectionStatus.Name != nil {
		name := *privateEndpointConnectionStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// PrivateEndpoint
	if privateEndpointConnectionStatus.PrivateEndpoint != nil {
		var privateEndpoint v1alpha1api20210101storage.PrivateEndpoint_Status
		err := (*privateEndpointConnectionStatus.PrivateEndpoint).AssignPropertiesToPrivateEndpointStatus(&privateEndpoint)
		if err != nil {
			return errors.Wrap(err, "populating PrivateEndpoint from PrivateEndpoint, calling AssignPropertiesToPrivateEndpointStatus()")
		}
		destination.PrivateEndpoint = &privateEndpoint
	} else {
		destination.PrivateEndpoint = nil
	}

	// PrivateLinkServiceConnectionState
	if privateEndpointConnectionStatus.PrivateLinkServiceConnectionState != nil {
		var privateLinkServiceConnectionState v1alpha1api20210101storage.PrivateLinkServiceConnectionState_Status
		err := (*privateEndpointConnectionStatus.PrivateLinkServiceConnectionState).AssignPropertiesToPrivateLinkServiceConnectionStateStatus(&privateLinkServiceConnectionState)
		if err != nil {
			return errors.Wrap(err, "populating PrivateLinkServiceConnectionState from PrivateLinkServiceConnectionState, calling AssignPropertiesToPrivateLinkServiceConnectionStateStatus()")
		}
		destination.PrivateLinkServiceConnectionState = &privateLinkServiceConnectionState
	} else {
		destination.PrivateLinkServiceConnectionState = nil
	}

	// ProvisioningState
	if privateEndpointConnectionStatus.ProvisioningState != nil {
		provisioningState := string(*privateEndpointConnectionStatus.ProvisioningState)
		destination.ProvisioningState = &provisioningState
	} else {
		destination.ProvisioningState = nil
	}

	// Type
	if privateEndpointConnectionStatus.Type != nil {
		typeVar := *privateEndpointConnectionStatus.Type
		destination.Type = &typeVar
	} else {
		destination.Type = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type PublicNetworkAccessType_Status string

const (
	PublicNetworkAccessType_StatusDisabled = PublicNetworkAccessType_Status("Disabled")
	PublicNetworkAccessType_StatusEnabled  = PublicNetworkAccessType_Status("Enabled")
)

//Generated from:
type VirtualMachineFamilyCoreQuota_Status struct {
	//CoreQuota: The core quota for the VM family for the Batch account.
	CoreQuota *int `json:"coreQuota,omitempty"`

	//Name: The Virtual Machine family name.
	Name *string `json:"name,omitempty"`
}

var _ genruntime.FromARMConverter = &VirtualMachineFamilyCoreQuota_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (virtualMachineFamilyCoreQuotaStatus *VirtualMachineFamilyCoreQuota_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &VirtualMachineFamilyCoreQuota_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (virtualMachineFamilyCoreQuotaStatus *VirtualMachineFamilyCoreQuota_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(VirtualMachineFamilyCoreQuota_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected VirtualMachineFamilyCoreQuota_StatusARM, got %T", armInput)
	}

	// Set property ‘CoreQuota’:
	if typedInput.CoreQuota != nil {
		coreQuota := *typedInput.CoreQuota
		virtualMachineFamilyCoreQuotaStatus.CoreQuota = &coreQuota
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		virtualMachineFamilyCoreQuotaStatus.Name = &name
	}

	// No error
	return nil
}

// AssignPropertiesFromVirtualMachineFamilyCoreQuotaStatus populates our VirtualMachineFamilyCoreQuota_Status from the provided source VirtualMachineFamilyCoreQuota_Status
func (virtualMachineFamilyCoreQuotaStatus *VirtualMachineFamilyCoreQuota_Status) AssignPropertiesFromVirtualMachineFamilyCoreQuotaStatus(source *v1alpha1api20210101storage.VirtualMachineFamilyCoreQuota_Status) error {

	// CoreQuota
	if source.CoreQuota != nil {
		coreQuotum := *source.CoreQuota
		virtualMachineFamilyCoreQuotaStatus.CoreQuota = &coreQuotum
	} else {
		virtualMachineFamilyCoreQuotaStatus.CoreQuota = nil
	}

	// Name
	if source.Name != nil {
		name := *source.Name
		virtualMachineFamilyCoreQuotaStatus.Name = &name
	} else {
		virtualMachineFamilyCoreQuotaStatus.Name = nil
	}

	// No error
	return nil
}

// AssignPropertiesToVirtualMachineFamilyCoreQuotaStatus populates the provided destination VirtualMachineFamilyCoreQuota_Status from our VirtualMachineFamilyCoreQuota_Status
func (virtualMachineFamilyCoreQuotaStatus *VirtualMachineFamilyCoreQuota_Status) AssignPropertiesToVirtualMachineFamilyCoreQuotaStatus(destination *v1alpha1api20210101storage.VirtualMachineFamilyCoreQuota_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// CoreQuota
	if virtualMachineFamilyCoreQuotaStatus.CoreQuota != nil {
		coreQuotum := *virtualMachineFamilyCoreQuotaStatus.CoreQuota
		destination.CoreQuota = &coreQuotum
	} else {
		destination.CoreQuota = nil
	}

	// Name
	if virtualMachineFamilyCoreQuotaStatus.Name != nil {
		name := *virtualMachineFamilyCoreQuotaStatus.Name
		destination.Name = &name
	} else {
		destination.Name = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type BatchAccountIdentity_Status_UserAssignedIdentities struct {
	//ClientId: The client id of user assigned identity.
	ClientId *string `json:"clientId,omitempty"`

	//PrincipalId: The principal id of user assigned identity.
	PrincipalId *string `json:"principalId,omitempty"`
}

var _ genruntime.FromARMConverter = &BatchAccountIdentity_Status_UserAssignedIdentities{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (batchAccountIdentityStatusUserAssignedIdentities *BatchAccountIdentity_Status_UserAssignedIdentities) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &BatchAccountIdentity_Status_UserAssignedIdentitiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (batchAccountIdentityStatusUserAssignedIdentities *BatchAccountIdentity_Status_UserAssignedIdentities) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(BatchAccountIdentity_Status_UserAssignedIdentitiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected BatchAccountIdentity_Status_UserAssignedIdentitiesARM, got %T", armInput)
	}

	// Set property ‘ClientId’:
	if typedInput.ClientId != nil {
		clientId := *typedInput.ClientId
		batchAccountIdentityStatusUserAssignedIdentities.ClientId = &clientId
	}

	// Set property ‘PrincipalId’:
	if typedInput.PrincipalId != nil {
		principalId := *typedInput.PrincipalId
		batchAccountIdentityStatusUserAssignedIdentities.PrincipalId = &principalId
	}

	// No error
	return nil
}

// AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities populates our BatchAccountIdentity_Status_UserAssignedIdentities from the provided source BatchAccountIdentity_Status_UserAssignedIdentities
func (batchAccountIdentityStatusUserAssignedIdentities *BatchAccountIdentity_Status_UserAssignedIdentities) AssignPropertiesFromBatchAccountIdentityStatusUserAssignedIdentities(source *v1alpha1api20210101storage.BatchAccountIdentity_Status_UserAssignedIdentities) error {

	// ClientId
	if source.ClientId != nil {
		clientId := *source.ClientId
		batchAccountIdentityStatusUserAssignedIdentities.ClientId = &clientId
	} else {
		batchAccountIdentityStatusUserAssignedIdentities.ClientId = nil
	}

	// PrincipalId
	if source.PrincipalId != nil {
		principalId := *source.PrincipalId
		batchAccountIdentityStatusUserAssignedIdentities.PrincipalId = &principalId
	} else {
		batchAccountIdentityStatusUserAssignedIdentities.PrincipalId = nil
	}

	// No error
	return nil
}

// AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities populates the provided destination BatchAccountIdentity_Status_UserAssignedIdentities from our BatchAccountIdentity_Status_UserAssignedIdentities
func (batchAccountIdentityStatusUserAssignedIdentities *BatchAccountIdentity_Status_UserAssignedIdentities) AssignPropertiesToBatchAccountIdentityStatusUserAssignedIdentities(destination *v1alpha1api20210101storage.BatchAccountIdentity_Status_UserAssignedIdentities) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ClientId
	if batchAccountIdentityStatusUserAssignedIdentities.ClientId != nil {
		clientId := *batchAccountIdentityStatusUserAssignedIdentities.ClientId
		destination.ClientId = &clientId
	} else {
		destination.ClientId = nil
	}

	// PrincipalId
	if batchAccountIdentityStatusUserAssignedIdentities.PrincipalId != nil {
		principalId := *batchAccountIdentityStatusUserAssignedIdentities.PrincipalId
		destination.PrincipalId = &principalId
	} else {
		destination.PrincipalId = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Microsoft.Batch","Microsoft.KeyVault"}
type EncryptionPropertiesKeySource string

const (
	EncryptionPropertiesKeySourceMicrosoftBatch    = EncryptionPropertiesKeySource("Microsoft.Batch")
	EncryptionPropertiesKeySourceMicrosoftKeyVault = EncryptionPropertiesKeySource("Microsoft.KeyVault")
)

type EncryptionPropertiesStatusKeySource string

const (
	EncryptionPropertiesStatusKeySourceMicrosoftBatch    = EncryptionPropertiesStatusKeySource("Microsoft.Batch")
	EncryptionPropertiesStatusKeySourceMicrosoftKeyVault = EncryptionPropertiesStatusKeySource("Microsoft.KeyVault")
)

//Generated from: https://schema.management.azure.com/schemas/2021-01-01/Microsoft.Batch.json#/definitions/KeyVaultProperties
type KeyVaultProperties struct {
	//KeyIdentifier: Full path to the versioned secret. Example
	//https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
	//To be usable the following prerequisites must be met:
	//The Batch Account has a System Assigned identity
	//The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap
	//permissions
	//The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.ARMTransformer = &KeyVaultProperties{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (keyVaultProperties *KeyVaultProperties) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if keyVaultProperties == nil {
		return nil, nil
	}
	var result KeyVaultPropertiesARM

	// Set property ‘KeyIdentifier’:
	if keyVaultProperties.KeyIdentifier != nil {
		keyIdentifier := *keyVaultProperties.KeyIdentifier
		result.KeyIdentifier = &keyIdentifier
	}
	return result, nil
}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keyVaultProperties *KeyVaultProperties) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultPropertiesARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keyVaultProperties *KeyVaultProperties) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultPropertiesARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultPropertiesARM, got %T", armInput)
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		keyVaultProperties.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultProperties populates our KeyVaultProperties from the provided source KeyVaultProperties
func (keyVaultProperties *KeyVaultProperties) AssignPropertiesFromKeyVaultProperties(source *v1alpha1api20210101storage.KeyVaultProperties) error {

	// KeyIdentifier
	if source.KeyIdentifier != nil {
		keyIdentifier := *source.KeyIdentifier
		keyVaultProperties.KeyIdentifier = &keyIdentifier
	} else {
		keyVaultProperties.KeyIdentifier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultProperties populates the provided destination KeyVaultProperties from our KeyVaultProperties
func (keyVaultProperties *KeyVaultProperties) AssignPropertiesToKeyVaultProperties(destination *v1alpha1api20210101storage.KeyVaultProperties) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyIdentifier
	if keyVaultProperties.KeyIdentifier != nil {
		keyIdentifier := *keyVaultProperties.KeyIdentifier
		destination.KeyIdentifier = &keyIdentifier
	} else {
		destination.KeyIdentifier = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type KeyVaultProperties_Status struct {
	//KeyIdentifier: Full path to the versioned secret. Example
	//https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053.
	//To be usable the following prerequisites must be met:
	//The Batch Account has a System Assigned identity
	//The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap
	//permissions
	//The KeyVault has soft-delete and purge protection enabled
	KeyIdentifier *string `json:"keyIdentifier,omitempty"`
}

var _ genruntime.FromARMConverter = &KeyVaultProperties_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (keyVaultPropertiesStatus *KeyVaultProperties_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &KeyVaultProperties_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (keyVaultPropertiesStatus *KeyVaultProperties_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(KeyVaultProperties_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected KeyVaultProperties_StatusARM, got %T", armInput)
	}

	// Set property ‘KeyIdentifier’:
	if typedInput.KeyIdentifier != nil {
		keyIdentifier := *typedInput.KeyIdentifier
		keyVaultPropertiesStatus.KeyIdentifier = &keyIdentifier
	}

	// No error
	return nil
}

// AssignPropertiesFromKeyVaultPropertiesStatus populates our KeyVaultProperties_Status from the provided source KeyVaultProperties_Status
func (keyVaultPropertiesStatus *KeyVaultProperties_Status) AssignPropertiesFromKeyVaultPropertiesStatus(source *v1alpha1api20210101storage.KeyVaultProperties_Status) error {

	// KeyIdentifier
	if source.KeyIdentifier != nil {
		keyIdentifier := *source.KeyIdentifier
		keyVaultPropertiesStatus.KeyIdentifier = &keyIdentifier
	} else {
		keyVaultPropertiesStatus.KeyIdentifier = nil
	}

	// No error
	return nil
}

// AssignPropertiesToKeyVaultPropertiesStatus populates the provided destination KeyVaultProperties_Status from our KeyVaultProperties_Status
func (keyVaultPropertiesStatus *KeyVaultProperties_Status) AssignPropertiesToKeyVaultPropertiesStatus(destination *v1alpha1api20210101storage.KeyVaultProperties_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// KeyIdentifier
	if keyVaultPropertiesStatus.KeyIdentifier != nil {
		keyIdentifier := *keyVaultPropertiesStatus.KeyIdentifier
		destination.KeyIdentifier = &keyIdentifier
	} else {
		destination.KeyIdentifier = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

type PrivateEndpointConnectionPropertiesStatusProvisioningState string

const (
	PrivateEndpointConnectionPropertiesStatusProvisioningStateFailed    = PrivateEndpointConnectionPropertiesStatusProvisioningState("Failed")
	PrivateEndpointConnectionPropertiesStatusProvisioningStateSucceeded = PrivateEndpointConnectionPropertiesStatusProvisioningState("Succeeded")
	PrivateEndpointConnectionPropertiesStatusProvisioningStateUpdating  = PrivateEndpointConnectionPropertiesStatusProvisioningState("Updating")
)

//Generated from:
type PrivateEndpoint_Status struct {
	Id *string `json:"id,omitempty"`
}

var _ genruntime.FromARMConverter = &PrivateEndpoint_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateEndpointStatus *PrivateEndpoint_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateEndpoint_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateEndpointStatus *PrivateEndpoint_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateEndpoint_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateEndpoint_StatusARM, got %T", armInput)
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		privateEndpointStatus.Id = &id
	}

	// No error
	return nil
}

// AssignPropertiesFromPrivateEndpointStatus populates our PrivateEndpoint_Status from the provided source PrivateEndpoint_Status
func (privateEndpointStatus *PrivateEndpoint_Status) AssignPropertiesFromPrivateEndpointStatus(source *v1alpha1api20210101storage.PrivateEndpoint_Status) error {

	// Id
	if source.Id != nil {
		id := *source.Id
		privateEndpointStatus.Id = &id
	} else {
		privateEndpointStatus.Id = nil
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateEndpointStatus populates the provided destination PrivateEndpoint_Status from our PrivateEndpoint_Status
func (privateEndpointStatus *PrivateEndpoint_Status) AssignPropertiesToPrivateEndpointStatus(destination *v1alpha1api20210101storage.PrivateEndpoint_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Id
	if privateEndpointStatus.Id != nil {
		id := *privateEndpointStatus.Id
		destination.Id = &id
	} else {
		destination.Id = nil
	}

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type PrivateLinkServiceConnectionState_Status struct {
	ActionRequired *string `json:"actionRequired,omitempty"`
	Description    *string `json:"description,omitempty"`

	// +kubebuilder:validation:Required
	Status PrivateLinkServiceConnectionStatus_Status `json:"status"`
}

var _ genruntime.FromARMConverter = &PrivateLinkServiceConnectionState_Status{}

// CreateEmptyARMValue returns an empty ARM value suitable for deserializing into
func (privateLinkServiceConnectionStateStatus *PrivateLinkServiceConnectionState_Status) CreateEmptyARMValue() genruntime.ARMResourceStatus {
	return &PrivateLinkServiceConnectionState_StatusARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (privateLinkServiceConnectionStateStatus *PrivateLinkServiceConnectionState_Status) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(PrivateLinkServiceConnectionState_StatusARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected PrivateLinkServiceConnectionState_StatusARM, got %T", armInput)
	}

	// Set property ‘ActionRequired’:
	if typedInput.ActionRequired != nil {
		actionRequired := *typedInput.ActionRequired
		privateLinkServiceConnectionStateStatus.ActionRequired = &actionRequired
	}

	// Set property ‘Description’:
	if typedInput.Description != nil {
		description := *typedInput.Description
		privateLinkServiceConnectionStateStatus.Description = &description
	}

	// Set property ‘Status’:
	privateLinkServiceConnectionStateStatus.Status = typedInput.Status

	// No error
	return nil
}

// AssignPropertiesFromPrivateLinkServiceConnectionStateStatus populates our PrivateLinkServiceConnectionState_Status from the provided source PrivateLinkServiceConnectionState_Status
func (privateLinkServiceConnectionStateStatus *PrivateLinkServiceConnectionState_Status) AssignPropertiesFromPrivateLinkServiceConnectionStateStatus(source *v1alpha1api20210101storage.PrivateLinkServiceConnectionState_Status) error {

	// ActionRequired
	if source.ActionRequired != nil {
		actionRequired := *source.ActionRequired
		privateLinkServiceConnectionStateStatus.ActionRequired = &actionRequired
	} else {
		privateLinkServiceConnectionStateStatus.ActionRequired = nil
	}

	// Description
	if source.Description != nil {
		description := *source.Description
		privateLinkServiceConnectionStateStatus.Description = &description
	} else {
		privateLinkServiceConnectionStateStatus.Description = nil
	}

	// Status
	if source.Status != nil {
		privateLinkServiceConnectionStateStatus.Status = PrivateLinkServiceConnectionStatus_Status(*source.Status)
	} else {
		privateLinkServiceConnectionStateStatus.Status = ""
	}

	// No error
	return nil
}

// AssignPropertiesToPrivateLinkServiceConnectionStateStatus populates the provided destination PrivateLinkServiceConnectionState_Status from our PrivateLinkServiceConnectionState_Status
func (privateLinkServiceConnectionStateStatus *PrivateLinkServiceConnectionState_Status) AssignPropertiesToPrivateLinkServiceConnectionStateStatus(destination *v1alpha1api20210101storage.PrivateLinkServiceConnectionState_Status) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// ActionRequired
	if privateLinkServiceConnectionStateStatus.ActionRequired != nil {
		actionRequired := *privateLinkServiceConnectionStateStatus.ActionRequired
		destination.ActionRequired = &actionRequired
	} else {
		destination.ActionRequired = nil
	}

	// Description
	if privateLinkServiceConnectionStateStatus.Description != nil {
		description := *privateLinkServiceConnectionStateStatus.Description
		destination.Description = &description
	} else {
		destination.Description = nil
	}

	// Status
	status := string(privateLinkServiceConnectionStateStatus.Status)
	destination.Status = &status

	// Update the property bag
	destination.PropertyBag = propertyBag

	// No error
	return nil
}

//Generated from:
type PrivateLinkServiceConnectionStatus_Status string

const (
	PrivateLinkServiceConnectionStatus_StatusApproved     = PrivateLinkServiceConnectionStatus_Status("Approved")
	PrivateLinkServiceConnectionStatus_StatusDisconnected = PrivateLinkServiceConnectionStatus_Status("Disconnected")
	PrivateLinkServiceConnectionStatus_StatusPending      = PrivateLinkServiceConnectionStatus_Status("Pending")
	PrivateLinkServiceConnectionStatus_StatusRejected     = PrivateLinkServiceConnectionStatus_Status("Rejected")
)

func init() {
	SchemeBuilder.Register(&BatchAccount{}, &BatchAccountList{})
}
